#!/usr/bin/env node\n\n/**\n * Migration script to help convert existing tests to use the new transaction isolation system\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nfunction findTestFiles(dir) {\n  const files = [];\n  const items = fs.readdirSync(dir);\n  \n  for (const item of items) {\n    const fullPath = path.join(dir, item);\n    const stat = fs.statSync(fullPath);\n    \n    if (stat.isDirectory()) {\n      files.push(...findTestFiles(fullPath));\n    } else if (item.endsWith('.test.ts') || item.endsWith('.test.js')) {\n      files.push(fullPath);\n    }\n  }\n  \n  return files;\n}\n\nfunction migrateTestFile(filePath) {\n  const content = fs.readFileSync(filePath, 'utf8');\n  let newContent = content;\n  let changes = [];\n  \n  // Replace direct prisma imports\n  if (content.includes(\"import { prisma } from '../src/prisma'\")) {\n    newContent = newContent.replace(\n      \"import { prisma } from '../src/prisma';\",\n      \"import { getTestPrismaClient } from '../../tests/jest.setup';\\nconst prisma = getTestPrismaClient();\"\n    );\n    changes.push('Replaced direct prisma import with test client');\n  }\n  \n  // Add factory import if test creates data\n  if (content.includes('prisma.') && content.includes('.create(') && !content.includes('factories')) {\n    const importMatch = newContent.match(/^(import.*from.*jest.*globals.*;)$/m);\n    if (importMatch) {\n      newContent = newContent.replace(\n        importMatch[0],\n        `${importMatch[0]}\\nimport { factories } from '../../tests/factories';`\n      );\n      changes.push('Added factories import');\n    }\n  }\n  \n  // Remove manual cleanup if present\n  const cleanupPatterns = [\n    /afterEach\\(async \\(\\) => \\{[\\s\\S]*?await prisma\\.[\\w]+\\.deleteMany\\(\\);[\\s\\S]*?\\}\\);/g,\n    /beforeEach\\(async \\(\\) => \\{[\\s\\S]*?await prisma\\.[\\w]+\\.deleteMany\\(\\);[\\s\\S]*?\\}\\);/g\n  ];\n  \n  for (const pattern of cleanupPatterns) {\n    if (pattern.test(newContent)) {\n      newContent = newContent.replace(pattern, '// Cleanup now handled automatically by transaction isolation');\n      changes.push('Removed manual cleanup code');\n    }\n  }\n  \n  // Suggest factory usage for common patterns\n  const createPatterns = [\n    {\n      pattern: /await prisma\\.subject\\.create\\(\\{\\s*data:\\s*\\{([^}]+)\\}\\s*\\}\\)/g,\n      suggestion: 'Consider using factories.subject.create({ ... }) instead'\n    },\n    {\n      pattern: /await prisma\\.milestone\\.create\\(\\{\\s*data:\\s*\\{([^}]+)\\}\\s*\\}\\)/g,\n      suggestion: 'Consider using factories.milestone.create({ ... }) instead'\n    },\n    {\n      pattern: /await prisma\\.activity\\.create\\(\\{\\s*data:\\s*\\{([^}]+)\\}\\s*\\}\\)/g,\n      suggestion: 'Consider using factories.activity.create({ ... }) instead'\n    }\n  ];\n  \n  for (const { pattern, suggestion } of createPatterns) {\n    if (pattern.test(content)) {\n      changes.push(suggestion);\n    }\n  }\n  \n  return { newContent, changes };\n}\n\nfunction main() {\n  const testDir = path.join(__dirname, '../src/__tests__');\n  \n  if (!fs.existsSync(testDir)) {\n    console.log('No __tests__ directory found');\n    return;\n  }\n  \n  const testFiles = findTestFiles(testDir);\n  console.log(`Found ${testFiles.length} test files to analyze`);\n  \n  const migrationSummary = [];\n  \n  for (const filePath of testFiles) {\n    const { newContent, changes } = migrateTestFile(filePath);\n    \n    if (changes.length > 0) {\n      const relativePath = path.relative(process.cwd(), filePath);\n      migrationSummary.push({ file: relativePath, changes });\n      \n      // Create backup\n      const backupPath = `${filePath}.backup`;\n      if (!fs.existsSync(backupPath)) {\n        fs.writeFileSync(backupPath, fs.readFileSync(filePath));\n      }\n      \n      // Write migrated content\n      fs.writeFileSync(filePath, newContent);\n      \n      console.log(`âœ… Migrated: ${relativePath}`);\n      for (const change of changes) {\n        console.log(`   - ${change}`);\n      }\n    }\n  }\n  \n  if (migrationSummary.length === 0) {\n    console.log('\\nðŸŽ‰ No migration needed - all tests are already compatible!');\n  } else {\n    console.log(`\\nðŸ“‹ Migration Summary:`);\n    console.log(`   Files modified: ${migrationSummary.length}`);\n    console.log(`   Backup files created with .backup extension`);\n    console.log(`\\nðŸ’¡ Next steps:`);\n    console.log(`   1. Review the changes in each file`);\n    console.log(`   2. Consider replacing manual data creation with factories`);\n    console.log(`   3. Run tests to ensure everything works: pnpm test`);\n    console.log(`   4. Remove .backup files when satisfied: rm **/*.backup`);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = { migrateTestFile, findTestFiles };