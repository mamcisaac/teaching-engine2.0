c22992622476c0aa1918b113822837f5
import { jest } from '@jest/globals';
import { getTestPrismaClient } from '../jest.setup';
// Mock the email service before importing the module that uses it
const mockSendEmail = jest.fn().mockResolvedValue(undefined);
jest.unstable_mockModule('../src/services/emailService', () => ({
    sendEmail: mockSendEmail,
}));
// Import after mock is set up
// const { sendUnreadNotifications } = await import('../src/jobs/unreadNotificationEmail'); // Job doesn't exist
/**
 * @todo This test uses mocked email service and should be converted to integration test
 * @mocked emailService - prevents testing actual email notification flow
 * @not-fully-implemented - should use real email service with test configuration
 */
describe('Unread Notifications', () => {
    let prisma;
    beforeEach(() => {
        prisma = getTestPrismaClient();
        jest.clearAllMocks();
    });
    test('emails unread notifications older than 48h', async () => {
        // Create old notification (older than 48 hours)
        await prisma.notification.create({
            data: {
                message: 'Old note',
                createdAt: new Date(Date.now() - 3 * 86400000), // 3 days ago
                read: false,
            },
        });
        await sendUnreadNotifications();
        expect(mockSendEmail).toHaveBeenCalled();
        expect(mockSendEmail).toHaveBeenCalledWith('teacher@example.com', 'Unread Notification', 'Old note');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3VucmVhZE5vdGlmaWNhdGlvbnMudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRCxrRUFBa0U7QUFDbEUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzdELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzlELFNBQVMsRUFBRSxhQUFhO0NBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUosOEJBQThCO0FBQzlCLGdIQUFnSDtBQUVoSDs7OztHQUlHO0FBQ0gsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxJQUFJLE1BQThDLENBQUM7SUFFbkQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1RCxnREFBZ0Q7UUFDaEQsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUMvQixJQUFJLEVBQUU7Z0JBQ0osT0FBTyxFQUFFLFVBQVU7Z0JBQ25CLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxFQUFFLGFBQWE7Z0JBQzdELElBQUksRUFBRSxLQUFLO2FBQ1o7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLHVCQUF1QixFQUFFLENBQUM7UUFDaEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDekMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLG9CQUFvQixDQUN4QyxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLFVBQVUsQ0FDWCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvdGVzdHMvaW50ZWdyYXRpb24vdW5yZWFkTm90aWZpY2F0aW9ucy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGplc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IGdldFRlc3RQcmlzbWFDbGllbnQgfSBmcm9tICcuLi9qZXN0LnNldHVwJztcblxuLy8gTW9jayB0aGUgZW1haWwgc2VydmljZSBiZWZvcmUgaW1wb3J0aW5nIHRoZSBtb2R1bGUgdGhhdCB1c2VzIGl0XG5jb25zdCBtb2NrU2VuZEVtYWlsID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5qZXN0LnVuc3RhYmxlX21vY2tNb2R1bGUoJy4uL3NyYy9zZXJ2aWNlcy9lbWFpbFNlcnZpY2UnLCAoKSA9PiAoe1xuICBzZW5kRW1haWw6IG1vY2tTZW5kRW1haWwsXG59KSk7XG5cbi8vIEltcG9ydCBhZnRlciBtb2NrIGlzIHNldCB1cFxuLy8gY29uc3QgeyBzZW5kVW5yZWFkTm90aWZpY2F0aW9ucyB9ID0gYXdhaXQgaW1wb3J0KCcuLi9zcmMvam9icy91bnJlYWROb3RpZmljYXRpb25FbWFpbCcpOyAvLyBKb2IgZG9lc24ndCBleGlzdFxuXG4vKipcbiAqIEB0b2RvIFRoaXMgdGVzdCB1c2VzIG1vY2tlZCBlbWFpbCBzZXJ2aWNlIGFuZCBzaG91bGQgYmUgY29udmVydGVkIHRvIGludGVncmF0aW9uIHRlc3RcbiAqIEBtb2NrZWQgZW1haWxTZXJ2aWNlIC0gcHJldmVudHMgdGVzdGluZyBhY3R1YWwgZW1haWwgbm90aWZpY2F0aW9uIGZsb3dcbiAqIEBub3QtZnVsbHktaW1wbGVtZW50ZWQgLSBzaG91bGQgdXNlIHJlYWwgZW1haWwgc2VydmljZSB3aXRoIHRlc3QgY29uZmlndXJhdGlvblxuICovXG5kZXNjcmliZSgnVW5yZWFkIE5vdGlmaWNhdGlvbnMnLCAoKSA9PiB7XG4gIGxldCBwcmlzbWE6IFJldHVyblR5cGU8dHlwZW9mIGdldFRlc3RQcmlzbWFDbGllbnQ+O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByaXNtYSA9IGdldFRlc3RQcmlzbWFDbGllbnQoKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgnZW1haWxzIHVucmVhZCBub3RpZmljYXRpb25zIG9sZGVyIHRoYW4gNDhoJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBvbGQgbm90aWZpY2F0aW9uIChvbGRlciB0aGFuIDQ4IGhvdXJzKVxuICAgIGF3YWl0IHByaXNtYS5ub3RpZmljYXRpb24uY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbWVzc2FnZTogJ09sZCBub3RlJyxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMyAqIDg2NDAwMDAwKSwgLy8gMyBkYXlzIGFnb1xuICAgICAgICByZWFkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBhd2FpdCBzZW5kVW5yZWFkTm90aWZpY2F0aW9ucygpO1xuICAgIGV4cGVjdChtb2NrU2VuZEVtYWlsKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KG1vY2tTZW5kRW1haWwpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgJ3RlYWNoZXJAZXhhbXBsZS5jb20nLFxuICAgICAgJ1VucmVhZCBOb3RpZmljYXRpb24nLFxuICAgICAgJ09sZCBub3RlJyxcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9