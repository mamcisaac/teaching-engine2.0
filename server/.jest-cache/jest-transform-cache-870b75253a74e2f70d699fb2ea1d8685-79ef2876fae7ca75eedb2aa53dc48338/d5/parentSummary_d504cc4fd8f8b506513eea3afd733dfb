b17e7e6315ca0e3f99e648ead08a0bd8
import { Router } from 'express';
import { prisma } from '../prisma';
import { generateParentSummary, regenerateParentSummary } from '../services/parentSummaryLLM';
import { z } from 'zod';
const router = Router();
// Validation schemas
const generateSummarySchema = z.object({
    studentId: z.number().int().positive(),
    from: z.string().datetime(),
    to: z.string().datetime(),
    focus: z.array(z.string()).optional(),
});
const regenerateSummarySchema = z.object({
    originalFrench: z.string().min(1),
    originalEnglish: z.string().min(1),
    studentId: z.number().int().positive(),
    from: z.string().datetime(),
    to: z.string().datetime(),
    focus: z.array(z.string()).optional(),
    tone: z.enum(['formal', 'informal']).optional(),
});
const saveSummarySchema = z.object({
    studentId: z.number().int().positive(),
    dateFrom: z.string().datetime(),
    dateTo: z.string().datetime(),
    focus: z.array(z.string()).optional(),
    contentFr: z.string().min(1),
    contentEn: z.string().min(1),
    isDraft: z.boolean().optional(),
});
// Generate a new parent summary using AI
router.post('/generate', async (req, res, _next) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const validation = generateSummarySchema.safeParse(req.body);
        if (!validation.success) {
            return res.status(400).json({
                error: 'Invalid request data',
                details: validation.error.flatten(),
            });
        }
        const { studentId, from, to, focus } = validation.data;
        // Verify the student belongs to this teacher
        const student = await prisma.student.findFirst({
            where: {
                id: studentId,
                userId: parseInt(userId),
            },
            include: {
                // parentContacts: true, // DISABLED: Legacy model removed
                artifacts: {
                    where: {
                        createdAt: {
                            gte: new Date(from),
                            lte: new Date(to),
                        },
                    },
                },
                reflections: {
                    where: {
                        createdAt: {
                            gte: new Date(from),
                            lte: new Date(to),
                        },
                    },
                },
            },
        });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        // Generate the summary using AI
        const summaryData = await generateParentSummary({
            student: student,
            fromDate: new Date(from),
            toDate: new Date(to),
            focusAreas: focus,
        });
        res.json(summaryData);
    }
    catch (err) {
        console.error('Error generating parent summary:', err);
        _next(err);
    }
});
// Regenerate an existing summary with variations
router.post('/regenerate', async (req, res, _next) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const validation = regenerateSummarySchema.safeParse(req.body);
        if (!validation.success) {
            return res.status(400).json({
                error: 'Invalid request data',
                details: validation.error.flatten(),
            });
        }
        const { originalFrench, originalEnglish, studentId, from, to, focus, tone } = validation.data;
        // Verify the student belongs to this teacher
        const student = await prisma.student.findFirst({
            where: {
                id: studentId,
                userId: parseInt(userId),
            },
        });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        // Regenerate the summary with variations
        const summaryData = await regenerateParentSummary({
            originalFrench,
            originalEnglish,
            student,
            fromDate: new Date(from),
            toDate: new Date(to),
            focusAreas: focus,
            tone: tone || 'formal',
        });
        res.json(summaryData);
    }
    catch (err) {
        console.error('Error regenerating parent summary:', err);
        _next(err);
    }
});
// Save a summary to the database
router.post('/save', async (req, res, _next) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const validation = saveSummarySchema.safeParse(req.body);
        if (!validation.success) {
            return res.status(400).json({
                error: 'Invalid request data',
                details: validation.error.flatten(),
            });
        }
        const { studentId, dateFrom, dateTo, focus, contentFr, contentEn, isDraft } = validation.data;
        // Verify the student belongs to this teacher
        const student = await prisma.student.findFirst({
            where: {
                id: studentId,
                userId: parseInt(userId),
            },
        });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        // Save the summary
        const summary = await prisma.parentSummary.create({
            data: {
                studentId,
                dateFrom: new Date(dateFrom),
                dateTo: new Date(dateTo),
                focus: JSON.stringify(focus || []),
                contentFr,
                contentEn,
                isDraft: isDraft ?? true,
            },
        });
        res.status(201).json(summary);
    }
    catch (err) {
        console.error('Error saving parent summary:', err);
        _next(err);
    }
});
// Get all summaries for a specific student
router.get('/student/:studentId', async (req, res, _next) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const studentId = parseInt(req.params.studentId);
        // Verify the student belongs to this teacher
        const student = await prisma.student.findFirst({
            where: {
                id: studentId,
                userId: parseInt(userId),
            },
        });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        const summaries = await prisma.parentSummary.findMany({
            where: { studentId },
            orderBy: { createdAt: 'desc' },
        });
        res.json(summaries);
    }
    catch (err) {
        _next(err);
    }
});
// Update a summary
router.put('/:id', async (req, res, _next) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const summaryId = parseInt(req.params.id);
        // Verify the summary belongs to a student of this teacher
        const existingSummary = await prisma.parentSummary.findFirst({
            where: {
                id: summaryId,
                student: {
                    userId: parseInt(userId),
                },
            },
        });
        if (!existingSummary) {
            return res.status(404).json({ error: 'Summary not found' });
        }
        const summary = await prisma.parentSummary.update({
            where: { id: summaryId },
            data: req.body,
        });
        res.json(summary);
    }
    catch (err) {
        _next(err);
    }
});
// Delete a summary
router.delete('/:id', async (req, res, _next) => {
    try {
        const userId = req.user?.id;
        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const summaryId = parseInt(req.params.id);
        // Verify the summary belongs to a student of this teacher
        const existingSummary = await prisma.parentSummary.findFirst({
            where: {
                id: summaryId,
                student: {
                    userId: parseInt(userId),
                },
            },
        });
        if (!existingSummary) {
            return res.status(404).json({ error: 'Summary not found' });
        }
        await prisma.parentSummary.delete({
            where: { id: summaryId },
        });
        res.status(204).send();
    }
    catch (err) {
        _next(err);
    }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9yb3V0ZXMvcGFyZW50U3VtbWFyeS50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFXLE1BQU0sU0FBUyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUYsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUd4QixNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUV4QixxQkFBcUI7QUFDckIsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3JDLFNBQVMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3RDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzNCLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3pCLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtDQUN0QyxDQUFDLENBQUM7QUFFSCxNQUFNLHVCQUF1QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdkMsY0FBYyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLGVBQWUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUN0QyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFB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YWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL3JvdXRlcy9wYXJlbnRTdW1tYXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciwgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi4vcHJpc21hJztcbmltcG9ydCB7IGdlbmVyYXRlUGFyZW50U3VtbWFyeSwgcmVnZW5lcmF0ZVBhcmVudFN1bW1hcnkgfSBmcm9tICcuLi9zZXJ2aWNlcy9wYXJlbnRTdW1tYXJ5TExNJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG5cbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG4vLyBWYWxpZGF0aW9uIHNjaGVtYXNcbmNvbnN0IGdlbmVyYXRlU3VtbWFyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgc3R1ZGVudElkOiB6Lm51bWJlcigpLmludCgpLnBvc2l0aXZlKCksXG4gIGZyb206IHouc3RyaW5nKCkuZGF0ZXRpbWUoKSxcbiAgdG86IHouc3RyaW5nKCkuZGF0ZXRpbWUoKSxcbiAgZm9jdXM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCByZWdlbmVyYXRlU3VtbWFyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgb3JpZ2luYWxGcmVuY2g6IHouc3RyaW5nKCkubWluKDEpLFxuICBvcmlnaW5hbEVuZ2xpc2g6IHouc3RyaW5nKCkubWluKDEpLFxuICBzdHVkZW50SWQ6IHoubnVtYmVyKCkuaW50KCkucG9zaXRpdmUoKSxcbiAgZnJvbTogei5zdHJpbmcoKS5kYXRldGltZSgpLFxuICB0bzogei5zdHJpbmcoKS5kYXRldGltZSgpLFxuICBmb2N1czogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICB0b25lOiB6LmVudW0oWydmb3JtYWwnLCAnaW5mb3JtYWwnXSkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBzYXZlU3VtbWFyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgc3R1ZGVudElkOiB6Lm51bWJlcigpLmludCgpLnBvc2l0aXZlKCksXG4gIGRhdGVGcm9tOiB6LnN0cmluZygpLmRhdGV0aW1lKCksXG4gIGRhdGVUbzogei5zdHJpbmcoKS5kYXRldGltZSgpLFxuICBmb2N1czogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICBjb250ZW50RnI6IHouc3RyaW5nKCkubWluKDEpLFxuICBjb250ZW50RW46IHouc3RyaW5nKCkubWluKDEpLFxuICBpc0RyYWZ0OiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIEdlbmVyYXRlIGEgbmV3IHBhcmVudCBzdW1tYXJ5IHVzaW5nIEFJXG5yb3V0ZXIucG9zdCgnL2dlbmVyYXRlJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBnZW5lcmF0ZVN1bW1hcnlTY2hlbWEuc2FmZVBhcnNlKHJlcS5ib2R5KTtcbiAgICBpZiAoIXZhbGlkYXRpb24uc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnZhbGlkIHJlcXVlc3QgZGF0YScsXG4gICAgICAgIGRldGFpbHM6IHZhbGlkYXRpb24uZXJyb3IuZmxhdHRlbigpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBzdHVkZW50SWQsIGZyb20sIHRvLCBmb2N1cyB9ID0gdmFsaWRhdGlvbi5kYXRhO1xuXG4gICAgLy8gVmVyaWZ5IHRoZSBzdHVkZW50IGJlbG9uZ3MgdG8gdGhpcyB0ZWFjaGVyXG4gICAgY29uc3Qgc3R1ZGVudCA9IGF3YWl0IHByaXNtYS5zdHVkZW50LmZpbmRGaXJzdCh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBpZDogc3R1ZGVudElkLFxuICAgICAgICB1c2VySWQ6IHBhcnNlSW50KHVzZXJJZCksXG4gICAgICB9LFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICAvLyBwYXJlbnRDb250YWN0czogdHJ1ZSwgLy8gRElTQUJMRUQ6IExlZ2FjeSBtb2RlbCByZW1vdmVkXG4gICAgICAgIGFydGlmYWN0czoge1xuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICBjcmVhdGVkQXQ6IHtcbiAgICAgICAgICAgICAgZ3RlOiBuZXcgRGF0ZShmcm9tKSxcbiAgICAgICAgICAgICAgbHRlOiBuZXcgRGF0ZSh0byksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlZmxlY3Rpb25zOiB7XG4gICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgICAgICBndGU6IG5ldyBEYXRlKGZyb20pLFxuICAgICAgICAgICAgICBsdGU6IG5ldyBEYXRlKHRvKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXN0dWRlbnQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnU3R1ZGVudCBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIHRoZSBzdW1tYXJ5IHVzaW5nIEFJXG4gICAgY29uc3Qgc3VtbWFyeURhdGEgPSBhd2FpdCBnZW5lcmF0ZVBhcmVudFN1bW1hcnkoe1xuICAgICAgc3R1ZGVudDogc3R1ZGVudCxcbiAgICAgIGZyb21EYXRlOiBuZXcgRGF0ZShmcm9tKSxcbiAgICAgIHRvRGF0ZTogbmV3IERhdGUodG8pLFxuICAgICAgZm9jdXNBcmVhczogZm9jdXMsXG4gICAgfSk7XG5cbiAgICByZXMuanNvbihzdW1tYXJ5RGF0YSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgcGFyZW50IHN1bW1hcnk6JywgZXJyKTtcbiAgICBfbmV4dChlcnIpO1xuICB9XG59KTtcblxuLy8gUmVnZW5lcmF0ZSBhbiBleGlzdGluZyBzdW1tYXJ5IHdpdGggdmFyaWF0aW9uc1xucm91dGVyLnBvc3QoJy9yZWdlbmVyYXRlJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSByZWdlbmVyYXRlU3VtbWFyeVNjaGVtYS5zYWZlUGFyc2UocmVxLmJvZHkpO1xuICAgIGlmICghdmFsaWRhdGlvbi5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludmFsaWQgcmVxdWVzdCBkYXRhJyxcbiAgICAgICAgZGV0YWlsczogdmFsaWRhdGlvbi5lcnJvci5mbGF0dGVuKCksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IG9yaWdpbmFsRnJlbmNoLCBvcmlnaW5hbEVuZ2xpc2gsIHN0dWRlbnRJZCwgZnJvbSwgdG8sIGZvY3VzLCB0b25lIH0gPSB2YWxpZGF0aW9uLmRhdGE7XG5cbiAgICAvLyBWZXJpZnkgdGhlIHN0dWRlbnQgYmVsb25ncyB0byB0aGlzIHRlYWNoZXJcbiAgICBjb25zdCBzdHVkZW50ID0gYXdhaXQgcHJpc21hLnN0dWRlbnQuZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlkOiBzdHVkZW50SWQsXG4gICAgICAgIHVzZXJJZDogcGFyc2VJbnQodXNlcklkKSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXN0dWRlbnQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnU3R1ZGVudCBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIFJlZ2VuZXJhdGUgdGhlIHN1bW1hcnkgd2l0aCB2YXJpYXRpb25zXG4gICAgY29uc3Qgc3VtbWFyeURhdGEgPSBhd2FpdCByZWdlbmVyYXRlUGFyZW50U3VtbWFyeSh7XG4gICAgICBvcmlnaW5hbEZyZW5jaCxcbiAgICAgIG9yaWdpbmFsRW5nbGlzaCxcbiAgICAgIHN0dWRlbnQsXG4gICAgICBmcm9tRGF0ZTogbmV3IERhdGUoZnJvbSksXG4gICAgICB0b0RhdGU6IG5ldyBEYXRlKHRvKSxcbiAgICAgIGZvY3VzQXJlYXM6IGZvY3VzLFxuICAgICAgdG9uZTogdG9uZSB8fCAnZm9ybWFsJyxcbiAgICB9KTtcblxuICAgIHJlcy5qc29uKHN1bW1hcnlEYXRhKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVnZW5lcmF0aW5nIHBhcmVudCBzdW1tYXJ5OicsIGVycik7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIFNhdmUgYSBzdW1tYXJ5IHRvIHRoZSBkYXRhYmFzZVxucm91dGVyLnBvc3QoJy9zYXZlJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBzYXZlU3VtbWFyeVNjaGVtYS5zYWZlUGFyc2UocmVxLmJvZHkpO1xuICAgIGlmICghdmFsaWRhdGlvbi5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludmFsaWQgcmVxdWVzdCBkYXRhJyxcbiAgICAgICAgZGV0YWlsczogdmFsaWRhdGlvbi5lcnJvci5mbGF0dGVuKCksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHN0dWRlbnRJZCwgZGF0ZUZyb20sIGRhdGVUbywgZm9jdXMsIGNvbnRlbnRGciwgY29udGVudEVuLCBpc0RyYWZ0IH0gPSB2YWxpZGF0aW9uLmRhdGE7XG5cbiAgICAvLyBWZXJpZnkgdGhlIHN0dWRlbnQgYmVsb25ncyB0byB0aGlzIHRlYWNoZXJcbiAgICBjb25zdCBzdHVkZW50ID0gYXdhaXQgcHJpc21hLnN0dWRlbnQuZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlkOiBzdHVkZW50SWQsXG4gICAgICAgIHVzZXJJZDogcGFyc2VJbnQodXNlcklkKSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXN0dWRlbnQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnU3R1ZGVudCBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIFNhdmUgdGhlIHN1bW1hcnlcbiAgICBjb25zdCBzdW1tYXJ5ID0gYXdhaXQgcHJpc21hLnBhcmVudFN1bW1hcnkuY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3R1ZGVudElkLFxuICAgICAgICBkYXRlRnJvbTogbmV3IERhdGUoZGF0ZUZyb20pLFxuICAgICAgICBkYXRlVG86IG5ldyBEYXRlKGRhdGVUbyksXG4gICAgICAgIGZvY3VzOiBKU09OLnN0cmluZ2lmeShmb2N1cyB8fCBbXSksXG4gICAgICAgIGNvbnRlbnRGcixcbiAgICAgICAgY29udGVudEVuLFxuICAgICAgICBpc0RyYWZ0OiBpc0RyYWZ0ID8/IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24oc3VtbWFyeSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBwYXJlbnQgc3VtbWFyeTonLCBlcnIpO1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBHZXQgYWxsIHN1bW1hcmllcyBmb3IgYSBzcGVjaWZpYyBzdHVkZW50XG5yb3V0ZXIuZ2V0KCcvc3R1ZGVudC86c3R1ZGVudElkJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHN0dWRlbnRJZCA9IHBhcnNlSW50KHJlcS5wYXJhbXMuc3R1ZGVudElkKTtcblxuICAgIC8vIFZlcmlmeSB0aGUgc3R1ZGVudCBiZWxvbmdzIHRvIHRoaXMgdGVhY2hlclxuICAgIGNvbnN0IHN0dWRlbnQgPSBhd2FpdCBwcmlzbWEuc3R1ZGVudC5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHN0dWRlbnRJZCxcbiAgICAgICAgdXNlcklkOiBwYXJzZUludCh1c2VySWQpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghc3R1ZGVudCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdTdHVkZW50IG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3VtbWFyaWVzID0gYXdhaXQgcHJpc21hLnBhcmVudFN1bW1hcnkuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHsgc3R1ZGVudElkIH0sXG4gICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sXG4gICAgfSk7XG5cbiAgICByZXMuanNvbihzdW1tYXJpZXMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfbmV4dChlcnIpO1xuICB9XG59KTtcblxuLy8gVXBkYXRlIGEgc3VtbWFyeVxucm91dGVyLnB1dCgnLzppZCcsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQ7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBzdW1tYXJ5SWQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkKTtcblxuICAgIC8vIFZlcmlmeSB0aGUgc3VtbWFyeSBiZWxvbmdzIHRvIGEgc3R1ZGVudCBvZiB0aGlzIHRlYWNoZXJcbiAgICBjb25zdCBleGlzdGluZ1N1bW1hcnkgPSBhd2FpdCBwcmlzbWEucGFyZW50U3VtbWFyeS5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHN1bW1hcnlJZCxcbiAgICAgICAgc3R1ZGVudDoge1xuICAgICAgICAgIHVzZXJJZDogcGFyc2VJbnQodXNlcklkKSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0aW5nU3VtbWFyeSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdTdW1tYXJ5IG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3VtbWFyeSA9IGF3YWl0IHByaXNtYS5wYXJlbnRTdW1tYXJ5LnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogc3VtbWFyeUlkIH0sXG4gICAgICBkYXRhOiByZXEuYm9keSxcbiAgICB9KTtcblxuICAgIHJlcy5qc29uKHN1bW1hcnkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfbmV4dChlcnIpO1xuICB9XG59KTtcblxuLy8gRGVsZXRlIGEgc3VtbWFyeVxucm91dGVyLmRlbGV0ZSgnLzppZCcsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQ7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBzdW1tYXJ5SWQgPSBwYXJzZUludChyZXEucGFyYW1zLmlkKTtcblxuICAgIC8vIFZlcmlmeSB0aGUgc3VtbWFyeSBiZWxvbmdzIHRvIGEgc3R1ZGVudCBvZiB0aGlzIHRlYWNoZXJcbiAgICBjb25zdCBleGlzdGluZ1N1bW1hcnkgPSBhd2FpdCBwcmlzbWEucGFyZW50U3VtbWFyeS5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHN1bW1hcnlJZCxcbiAgICAgICAgc3R1ZGVudDoge1xuICAgICAgICAgIHVzZXJJZDogcGFyc2VJbnQodXNlcklkKSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0aW5nU3VtbWFyeSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdTdW1tYXJ5IG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgcHJpc21hLnBhcmVudFN1bW1hcnkuZGVsZXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiBzdW1tYXJ5SWQgfSxcbiAgICB9KTtcblxuICAgIHJlcy5zdGF0dXMoMjA0KS5zZW5kKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XG4iXSwidmVyc2lvbiI6M30=