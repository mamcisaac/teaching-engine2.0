{"version":3,"names":["cov_2gj251ahmm","actualCoverage","express","cors","PrismaClient","errorHandler","rateLimiters","authRoutes","userRoutes","createApp","prisma","f","app","s","use","origin","b","process","env","CLIENT_URL","credentials","json","urlencoded","extended","auth","get","req","res","status","timestamp","Date","toISOString","error","createTestApp","testPrisma","NODE_ENV","next","headers","authorization","user","id","userId","email"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/app.ts"],"sourcesContent":["/**\n * Express Application Factory\n * Creates and configures the Express application\n */\n\nimport express, { Express } from 'express';\nimport cors from 'cors';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { errorHandler } from '@/middleware/errorHandler';\nimport { rateLimiters } from '@/middleware/rateLimiter';\nimport { authRoutes } from '@/routes/auth';\nimport { userRoutes } from '@/routes/user';\n\nexport function createApp(prisma: PrismaClient): Express {\n  const app = express();\n\n  // Middleware\n  app.use(\n    cors({\n      origin: process.env.CLIENT_URL || 'http://localhost:5173',\n      credentials: true,\n    }),\n  );\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Rate limiting\n  app.use('/api/auth', rateLimiters.auth);\n\n  // Health check\n  app.get('/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // Routes\n  app.use('/api/auth', authRoutes(prisma));\n  app.use('/api/user', userRoutes(prisma));\n\n  // 404 handler\n  app.use((req, res) => {\n    res.status(404).json({ error: 'Route not found' });\n  });\n\n  // Error handler\n  app.use(errorHandler);\n\n  return app;\n}\n\nexport async function createTestApp(prisma?: PrismaClient): Promise<Express> {\n  // Use provided prisma or create a mock\n  const testPrisma = prisma || new PrismaClient();\n\n  const app = createApp(testPrisma);\n\n  // Add test-specific middleware\n  if (process.env.NODE_ENV === 'test') {\n    app.use((req, res, next) => {\n      // Mock authentication for testing\n      if (req.headers.authorization === 'Bearer valid.jwt.token') {\n        req.user = {\n          id: 123,\n          userId: '123',\n          email: 'test@example.com',\n        };\n      } else if (req.headers.authorization === 'Bearer admin.token') {\n        req.user = {\n          id: 456,\n          userId: '456',\n          email: 'admin@example.com',\n        };\n      }\n      next();\n    });\n  }\n\n  return app;\n}\n"],"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","ignoreList":[]}