fa26c1268bbd5234d38c99a0f1a45273
import OpenAI from 'openai';
import logger from '../logger';
let openai = null;
if (process.env.OPENAI_API_KEY) {
    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
}
export { openai };
export async function generateContent(prompt, systemMessage) {
    if (!openai) {
        logger.warn('OpenAI API key not configured, returning placeholder content');
        return 'AI content generation is not available. Please configure OPENAI_API_KEY environment variable.';
    }
    try {
        const messages = [];
        if (systemMessage) {
            messages.push({
                role: 'system',
                content: systemMessage,
            });
        }
        messages.push({
            role: 'user',
            content: prompt,
        });
        const chat = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages,
            temperature: 0.7,
            max_tokens: 1000,
        });
        if (chat?.usage?.total_tokens) {
            logger.info({ tokens: chat.usage.total_tokens }, 'LLM tokens used for content generation');
        }
        return chat?.choices?.[0]?.message?.content?.trim() || 'No content generated';
    }
    catch (err) {
        logger.error({ err }, 'LLM content generation failed');
        return 'Failed to generate content. Please try again later.';
    }
}
export async function generateBilingualContent(prompt, systemMessage) {
    const bilingualSystemMessage = `${systemMessage || ''}\n\nPlease respond with content in both French and English. Format your response as:

FRENCH:
[French content here]

ENGLISH:
[English content here]`;
    const content = await generateContent(prompt, bilingualSystemMessage);
    // Parse the bilingual response
    const frenchMatch = content.match(/FRENCH:\s*([\s\S]*?)(?=ENGLISH:|$)/i);
    const englishMatch = content.match(/ENGLISH:\s*([\s\S]*?)$/i);
    return {
        french: frenchMatch?.[1]?.trim() || content,
        english: englishMatch?.[1]?.trim() || content,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9zZXJ2aWNlcy9sbG1TZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLE1BQU0sTUFBTSxXQUFXLENBQUM7QUFFL0IsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztBQUNqQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDL0IsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRWxCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZSxDQUFDLE1BQWMsRUFBRSxhQUFzQjtJQUMxRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLDhEQUE4RCxDQUFDLENBQUM7UUFDNUUsT0FBTywrRkFBK0YsQ0FBQztJQUN6RyxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQXlELEVBQUUsQ0FBQztRQUUxRSxJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQ1osSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsT0FBTyxFQUFFLGFBQWE7YUFDdkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDWixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxNQUFNO1NBQ2hCLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1lBQ2hELEtBQUssRUFBRSxlQUFlO1lBQ3RCLFFBQVE7WUFDUixXQUFXLEVBQUUsR0FBRztZQUNoQixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFFLHdDQUF3QyxDQUFDLENBQUM7UUFDN0YsQ0FBQztRQUVELE9BQU8sSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksc0JBQXNCLENBQUM7SUFDaEYsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsK0JBQStCLENBQUMsQ0FBQztRQUN2RCxPQUFPLHFEQUFxRCxDQUFDO0lBQy9ELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSx3QkFBd0IsQ0FDNUMsTUFBYyxFQUNkLGFBQXNCO0lBRXRCLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxhQUFhLElBQUksRUFBRTs7Ozs7O3VCQU1oQyxDQUFDO0lBRXRCLE1BQU0sT0FBTyxHQUFHLE1BQU0sZUFBZSxDQUFDLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBRXRFLCtCQUErQjtJQUMvQixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDekUsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBRTlELE9BQU87UUFDTCxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksT0FBTztRQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksT0FBTztLQUM5QyxDQUFDO0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL3NlcnZpY2VzL2xsbVNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5sZXQgb3BlbmFpOiBPcGVuQUkgfCBudWxsID0gbnVsbDtcbmlmIChwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSkge1xuICBvcGVuYWkgPSBuZXcgT3BlbkFJKHsgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSB9KTtcbn1cblxuZXhwb3J0IHsgb3BlbmFpIH07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUNvbnRlbnQocHJvbXB0OiBzdHJpbmcsIHN5c3RlbU1lc3NhZ2U/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBpZiAoIW9wZW5haSkge1xuICAgIGxvZ2dlci53YXJuKCdPcGVuQUkgQVBJIGtleSBub3QgY29uZmlndXJlZCwgcmV0dXJuaW5nIHBsYWNlaG9sZGVyIGNvbnRlbnQnKTtcbiAgICByZXR1cm4gJ0FJIGNvbnRlbnQgZ2VuZXJhdGlvbiBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgY29uZmlndXJlIE9QRU5BSV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlLic7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IG1lc3NhZ2VzOiBPcGVuQUkuQ2hhdC5Db21wbGV0aW9ucy5DaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbVtdID0gW107XG5cbiAgICBpZiAoc3lzdGVtTWVzc2FnZSkge1xuICAgICAgbWVzc2FnZXMucHVzaCh7XG4gICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgICAgICBjb250ZW50OiBzeXN0ZW1NZXNzYWdlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVzc2FnZXMucHVzaCh7XG4gICAgICByb2xlOiAndXNlcicsXG4gICAgICBjb250ZW50OiBwcm9tcHQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjaGF0ID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgIG1vZGVsOiAnZ3B0LTMuNS10dXJibycsXG4gICAgICBtZXNzYWdlcyxcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4gICAgICBtYXhfdG9rZW5zOiAxMDAwLFxuICAgIH0pO1xuXG4gICAgaWYgKGNoYXQ/LnVzYWdlPy50b3RhbF90b2tlbnMpIHtcbiAgICAgIGxvZ2dlci5pbmZvKHsgdG9rZW5zOiBjaGF0LnVzYWdlLnRvdGFsX3Rva2VucyB9LCAnTExNIHRva2VucyB1c2VkIGZvciBjb250ZW50IGdlbmVyYXRpb24nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hhdD8uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50cmltKCkgfHwgJ05vIGNvbnRlbnQgZ2VuZXJhdGVkJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmVycm9yKHsgZXJyIH0sICdMTE0gY29udGVudCBnZW5lcmF0aW9uIGZhaWxlZCcpO1xuICAgIHJldHVybiAnRmFpbGVkIHRvIGdlbmVyYXRlIGNvbnRlbnQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJztcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVCaWxpbmd1YWxDb250ZW50KFxuICBwcm9tcHQ6IHN0cmluZyxcbiAgc3lzdGVtTWVzc2FnZT86IHN0cmluZyxcbik6IFByb21pc2U8eyBmcmVuY2g6IHN0cmluZzsgZW5nbGlzaDogc3RyaW5nIH0+IHtcbiAgY29uc3QgYmlsaW5ndWFsU3lzdGVtTWVzc2FnZSA9IGAke3N5c3RlbU1lc3NhZ2UgfHwgJyd9XFxuXFxuUGxlYXNlIHJlc3BvbmQgd2l0aCBjb250ZW50IGluIGJvdGggRnJlbmNoIGFuZCBFbmdsaXNoLiBGb3JtYXQgeW91ciByZXNwb25zZSBhczpcblxuRlJFTkNIOlxuW0ZyZW5jaCBjb250ZW50IGhlcmVdXG5cbkVOR0xJU0g6XG5bRW5nbGlzaCBjb250ZW50IGhlcmVdYDtcblxuICBjb25zdCBjb250ZW50ID0gYXdhaXQgZ2VuZXJhdGVDb250ZW50KHByb21wdCwgYmlsaW5ndWFsU3lzdGVtTWVzc2FnZSk7XG5cbiAgLy8gUGFyc2UgdGhlIGJpbGluZ3VhbCByZXNwb25zZVxuICBjb25zdCBmcmVuY2hNYXRjaCA9IGNvbnRlbnQubWF0Y2goL0ZSRU5DSDpcXHMqKFtcXHNcXFNdKj8pKD89RU5HTElTSDp8JCkvaSk7XG4gIGNvbnN0IGVuZ2xpc2hNYXRjaCA9IGNvbnRlbnQubWF0Y2goL0VOR0xJU0g6XFxzKihbXFxzXFxTXSo/KSQvaSk7XG5cbiAgcmV0dXJuIHtcbiAgICBmcmVuY2g6IGZyZW5jaE1hdGNoPy5bMV0/LnRyaW0oKSB8fCBjb250ZW50LFxuICAgIGVuZ2xpc2g6IGVuZ2xpc2hNYXRjaD8uWzFdPy50cmltKCkgfHwgY29udGVudCxcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==