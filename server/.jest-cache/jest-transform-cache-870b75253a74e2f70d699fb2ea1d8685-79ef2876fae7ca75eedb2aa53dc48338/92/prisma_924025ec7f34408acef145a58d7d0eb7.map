{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/prisma.ts","mappings":"AAAA,mCAAmC;AACnC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAEzD,0EAA0E;AAC1E,cAAc,2BAA2B,CAAC;AAE1C,6CAA6C;AAC7C,MAAM,eAAe,GAAG,UAGvB,CAAC;AAEF,wDAAwD;AACxD,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;AAExF,8DAA8D;AAC9D,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,IAAI,iBAAiB,IAAI,eAAe,CAAC,gBAAgB,EAAE,CAAC;QAC1D,OAAO,eAAe,CAAC,gBAAgB,CAAC;IAC1C,CAAC;IACD,OAAO,CACL,eAAe,CAAC,MAAM;QACtB,IAAI,YAAY,CAAC;YACf,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;SACrF,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,kDAAkD;AAClD,MAAM,CAAC,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,EAAuC,EAAE;IACvE,GAAG,CAAC,MAAM,EAAE,IAAI;QACd,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,OAAO,MAAM,CAAC,IAA+C,CAAC,CAAC;IACjE,CAAC;IACD,GAAG,CAAC,MAAM,EAAE,IAAI;QACd,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,OAAO,IAAI,IAAI,MAAM,CAAC;IACxB,CAAC;CACF,CAAC,CAAC;AAEH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAChE,eAAe,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC;AACvC,CAAC;AAED,yBAAyB;AACzB,OAAO,EAAE,YAAY,EAAE,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/prisma.ts"],"sourcesContent":["// Import from the database package\nimport { PrismaClient } from '@teaching-engine/database';\n\n// Re-export everything from database package (including Prisma namespace)\nexport * from '@teaching-engine/database';\n\n// Create singleton instance for server usage\nconst globalForPrisma = globalThis as unknown as {\n  prisma: InstanceType<typeof PrismaClient> | undefined;\n  testPrismaClient: InstanceType<typeof PrismaClient> | undefined;\n};\n\n// In test environment, use the test client if available\nconst isTestEnvironment = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID;\n\n// Create a getter that always returns the current test client\nconst getPrisma = () => {\n  if (isTestEnvironment && globalForPrisma.testPrismaClient) {\n    return globalForPrisma.testPrismaClient;\n  }\n  return (\n    globalForPrisma.prisma ??\n    new PrismaClient({\n      log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n    })\n  );\n};\n\n// Create a proxy to always use the current client\nexport const prisma = new Proxy({} as InstanceType<typeof PrismaClient>, {\n  get(target, prop) {\n    const client = getPrisma();\n    return client[prop as keyof InstanceType<typeof PrismaClient>];\n  },\n  has(target, prop) {\n    const client = getPrisma();\n    return prop in client;\n  },\n});\n\nif (process.env.NODE_ENV !== 'production' && !isTestEnvironment) {\n  globalForPrisma.prisma = getPrisma();\n}\n\n// Re-export PrismaClient\nexport { PrismaClient };\n"],"version":3}