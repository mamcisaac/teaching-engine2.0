{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/curriculumImportService.coverage.test.ts","mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAIvE,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE,CAAC,CAAC;IACtD,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;QACpD,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC/D,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;KACrD,CAAC,CAAC;CACJ,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE,CAAC,CAAC;IACvD,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;QACrD,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;YAC3C,QAAQ,EAAE,EAAE;YACZ,kBAAkB,EAAE,EAAE;YACtB,eAAe,EAAE,GAAG;SACrB,CAAC;KACH,CAAC,CAAC;CACJ,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;IACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;IACpB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;IAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;IACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;CAClB,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;IAC1B,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC;CACjF,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAC1B,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC,CAC/D,CAAC;AAnCF,OAAO,EAAE,uBAAuB,EAAE,MAAM,4CAA4C,CAAC;AACrF,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAoCpE,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;IACtD,IAAI,OAAgC,CAAC;IACrC,IAAI,QAAa,CAAC;IAElB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,mBAAmB;QACnB,QAAQ,GAAG,MAAM,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC/C,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,IAAI,EAAE;oBACJ,KAAK,EAAE,kBAAkB;oBACzB,QAAQ,EAAE,iBAAiB;oBAC3B,IAAI,EAAE,cAAc;oBACpB,IAAI,EAAE,SAAS;iBAChB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,YAAY;gBACtB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;gBACzC,IAAI,EAAE,GAAG;gBACT,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAC3C,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;YAC1C,YAAY,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAEpE,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,eAAe;gBAC7B,QAAQ,EAAE,iBAAiB;gBAC3B,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBACrC,IAAI,EAAE,GAAG;gBACT,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAC3C,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;YACvC,WAAW,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAEvF,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,gBAAgB;gBAC9B,QAAQ,EAAE,yEAAyE;gBACnF,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBACrC,IAAI,EAAE,GAAG;gBACT,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAC3C,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,WAAW;gBACzB,QAAQ,EAAE,iBAAiB;gBAC3B,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvB,IAAI,EAAE,CAAC;gBACP,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAC3C,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,WAAW;gBACzB,QAAQ,EAAE,iBAAiB;gBAC3B,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,QAAQ;gBACjD,IAAI,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;gBACvB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAC3C,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YAChF,MAAM,SAAS,GAAG;gBAChB,4BAA4B;gBAC5B,8CAA8C;gBAC9C,2BAA2B;gBAC3B,4DAA4D;gBAC5D,uBAAuB;gBACvB,qDAAqD;gBACrD,2BAA2B;gBAC3B,sDAAsD;aACvD,CAAC;YAEF,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;gBAC7B,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC9E,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YACxC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,oBAAoB,GAAG;;;;;;OAM5B,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,oBAAoB,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC9F,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,KAAK,GAAG;gBACZ,wBAAwB;gBACxB,2BAA2B;gBAC3B,2BAA2B;gBAC3B,wBAAwB;aACzB,CAAC;YAEF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC9E,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;QACtD,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,wCAAwC;YACxC,MAAM,MAAM,GAAG,mBAAmB,EAAE,CAAC;YACrC,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;YAE/F,MAAM,IAAI,GAAG,uBAAuB,CAAC;YAErC,MAAM,MAAM,CACV,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CACzD,CAAC,OAAO,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;YAEhD,0BAA0B;YAC1B,MAAM,CAAC,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,MAAM,GAAG,mBAAmB,EAAE,CAAC;YAErC,kCAAkC;YAClC,MAAM,mBAAmB,GAAG,MAAM,CAAC,YAAY,CAAC;YAChD,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACpE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,uBAAuB,CAAC;YAErC,MAAM,MAAM,CACV,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CACzD,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;YAExC,0BAA0B;YAC1B,MAAM,CAAC,YAAY,GAAG,mBAAmB,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,aAAa,GAAG,KAAK,CAAC;YAC5B,MAAM,IAAI,GAAG,uBAAuB,CAAC;YAErC,+CAA+C;YAC/C,MAAM,MAAM,CACV,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,aAAa,CAAC,CAC3D,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,aAAa,GAAG;;;;OAIrB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,aAAa,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEvF,2DAA2D;YAC3D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAChC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACtD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;gBACzD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,QAAQ,GAAG,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,kBAAkB,CAAC;YAEtE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YAClF,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAE7B,4DAA4D;YAC5D,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAChC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,YAAY,GAAG;gBACnB,0BAA0B;gBAC1B,oBAAoB;gBACpB,mCAAmC;gBACnC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,cAAc;aACvC,CAAC;YAEF,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;gBAChC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC9E,sDAAsD;gBACtD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBAChC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBACzD,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,QAAQ,GAAG,EAAE,CAAC;YAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,QAAQ,GAAG;oBACf,YAAY,EAAE,OAAO,CAAC,MAAM;oBAC5B,QAAQ,EAAE,iBAAiB;oBAC3B,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;oBACxC,IAAI,EAAE,GAAG;oBACT,SAAS,EAAE,MAAM;oBACjB,QAAQ,EAAE,MAAM;oBAChB,MAAM,EAAE,IAAW;oBACnB,WAAW,EAAE,EAAE;oBACf,QAAQ,EAAE,EAAE;oBACZ,IAAI,EAAE,EAAE;iBACT,CAAC;gBAEF,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,CAAC;YAED,+CAA+C;YAC/C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE/B,4DAA4D;YAC5D,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,iBAAiB;gBAC3B,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;gBACnC,IAAI,EAAE,GAAG;gBACT,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,iBAAiB,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErE,4CAA4C;YAC5C,UAAU,CAAC,GAAG,EAAE;gBACd,mDAAmD;YACrD,CAAC,EAAE,EAAE,CAAC,CAAC;YAEP,wCAAwC;YACxC,MAAM,MAAM,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC,qCAAqC,CAAC,CAAC;YAC5E,MAAM,oBAAoB,GAAG,IAAI,gBAAgB,EAAE,CAAC;YACpD,oBAAoB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAErG,MAAM,IAAI,GAAG,uBAAuB,CAAC;YAErC,2CAA2C;YAC3C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC,sCAAsC,CAAC,CAAC;YAC9E,MAAM,qBAAqB,GAAG,IAAI,iBAAiB,EAAE,CAAC;YACtD,qBAAqB,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;YAErG,MAAM,IAAI,GAAG,iDAAiD,CAAC;YAE/D,8CAA8C;YAC9C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;YAC/C,OAAO,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;YAElC,MAAM,IAAI,GAAG,uBAAuB,CAAC;YAErC,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC9E,kDAAkD;gBAClD,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,CAAC;oBAAS,CAAC;gBACT,sBAAsB;gBACtB,IAAI,WAAW,EAAE,CAAC;oBAChB,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,WAAW,CAAC;gBAC3C,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,sDAAsD;YACtD,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,iBAAiB;gBAC3B,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,QAAQ;gBACjD,IAAI,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;gBACvB,SAAS,EAAE,MAAM;gBACjB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAW;gBACnB,WAAW,EAAE,EAAE;gBACf,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAC3C,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/curriculumImportService.coverage.test.ts"],"sourcesContent":["/**\n * Additional Test Coverage for Curriculum Import Service\n * \n * Tests critical paths and edge cases that weren't covered in existing tests\n * to improve overall test coverage for this critical service\n */\n\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { CurriculumImportService } from '../../src/services/curriculumImportService';\nimport { getTestPrismaClient, createTestData } from '../jest.setup';\n\n// Mock dependencies\njest.mock('../../src/services/embeddingService', () => ({\n  EmbeddingService: jest.fn().mockImplementation(() => ({\n    generateEmbedding: jest.fn().mockResolvedValue([0.1, 0.2, 0.3]),\n    findSimilarOutcomes: jest.fn().mockResolvedValue([]),\n  })),\n}));\n\njest.mock('../../src/services/clusteringService', () => ({\n  ClusteringService: jest.fn().mockImplementation(() => ({\n    clusterOutcomes: jest.fn().mockResolvedValue({\n      clusters: [],\n      clusterAssignments: {},\n      silhouetteScore: 0.5\n    }),\n  })),\n}));\n\njest.mock('fs/promises', () => ({\n  readFile: jest.fn(),\n  writeFile: jest.fn(),\n  mkdir: jest.fn(),\n  unlink: jest.fn(),\n  access: jest.fn(),\n}));\n\njest.mock('mammoth', () => ({\n  extractRawText: jest.fn().mockResolvedValue({ value: 'Extracted text content' }),\n}));\n\njest.mock('pdf-parse', () => \n  jest.fn().mockResolvedValue({ text: 'Extracted PDF content' })\n);\n\ndescribe('CurriculumImportService Coverage Tests', () => {\n  let service: CurriculumImportService;\n  let mockUser: any;\n\n  beforeEach(async () => {\n    // Create test user\n    mockUser = await createTestData(async (prisma) => {\n      return await prisma.user.create({\n        data: {\n          email: 'test@example.com',\n          password: 'hashed_password',\n          name: 'Test Teacher',\n          role: 'teacher',\n        },\n      });\n    });\n\n    service = new CurriculumImportService();\n  });\n\n  describe('File Processing Edge Cases', () => {\n    it('should handle unsupported file types gracefully', async () => {\n      const mockFile = {\n        originalname: 'test.txt',\n        mimetype: 'text/plain',\n        buffer: Buffer.from('Plain text content'),\n        size: 100,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      await expect(\n        service.processFile(mockFile, mockUser.id)\n      ).rejects.toThrow('Unsupported file type');\n    });\n\n    it('should handle corrupted PDF files', async () => {\n      const pdfParseMock = require('pdf-parse');\n      pdfParseMock.mockRejectedValueOnce(new Error('PDF parsing failed'));\n\n      const mockFile = {\n        originalname: 'corrupted.pdf',\n        mimetype: 'application/pdf',\n        buffer: Buffer.from('corrupted data'),\n        size: 100,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      await expect(\n        service.processFile(mockFile, mockUser.id)\n      ).rejects.toThrow('PDF parsing failed');\n    });\n\n    it('should handle corrupted Word documents', async () => {\n      const mammothMock = require('mammoth');\n      mammothMock.extractRawText.mockRejectedValueOnce(new Error('Document parsing failed'));\n\n      const mockFile = {\n        originalname: 'corrupted.docx',\n        mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        buffer: Buffer.from('corrupted data'),\n        size: 100,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      await expect(\n        service.processFile(mockFile, mockUser.id)\n      ).rejects.toThrow('Document parsing failed');\n    });\n\n    it('should handle empty files', async () => {\n      const mockFile = {\n        originalname: 'empty.pdf',\n        mimetype: 'application/pdf',\n        buffer: Buffer.alloc(0),\n        size: 0,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      await expect(\n        service.processFile(mockFile, mockUser.id)\n      ).rejects.toThrow();\n    });\n\n    it('should handle files that are too large', async () => {\n      const mockFile = {\n        originalname: 'large.pdf',\n        mimetype: 'application/pdf',\n        buffer: Buffer.alloc(100 * 1024 * 1024), // 100MB\n        size: 100 * 1024 * 1024,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      await expect(\n        service.processFile(mockFile, mockUser.id)\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Text Extraction and Parsing', () => {\n    it('should extract curriculum expectations from various text formats', async () => {\n      const testTexts = [\n        // Ontario curriculum format\n        'A1.1 demonstrate an understanding of numbers',\n        // Quebec curriculum format\n        'Compétence 1: Résoudre une situation-problème mathématique',\n        // BC curriculum format\n        'Students are expected to know and do the following:',\n        // Mixed content with noise\n        'Page 15\\nA1.1 demonstrate understanding\\nFooter text',\n      ];\n\n      for (const text of testTexts) {\n        const result = await service.extractCurriculumExpectations(text, mockUser.id);\n        expect(result).toBeDefined();\n        expect(result.outcomes).toBeDefined();\n      }\n    });\n\n    it('should handle text with special characters and encoding', async () => {\n      const textWithSpecialChars = `\n        A1.1 demonstrate an understanding of numbers, including: \n        • whole numbers (1–1 000 000)\n        • decimal numbers to thousandths\n        • proper and improper fractions and mixed numbers\n        • ratio and rate\n      `;\n\n      const result = await service.extractCurriculumExpectations(textWithSpecialChars, mockUser.id);\n      expect(result).toBeDefined();\n      expect(result.outcomes).toBeDefined();\n    });\n\n    it('should parse curriculum codes correctly', async () => {\n      const texts = [\n        'A1.1 Basic expectation',\n        'B2.3 Advanced expectation',\n        'C.1.2 Complex code format',\n        'Math.1.A Simple format',\n      ];\n\n      for (const text of texts) {\n        const result = await service.extractCurriculumExpectations(text, mockUser.id);\n        expect(result.outcomes.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  describe('Database Operations and Error Handling', () => {\n    it('should handle database connection errors gracefully', async () => {\n      // Mock prisma to throw connection error\n      const prisma = getTestPrismaClient();\n      const originalFind = prisma.outcome.findMany;\n      prisma.outcome.findMany = jest.fn().mockRejectedValue(new Error('Database connection failed'));\n\n      const text = 'A1.1 Test expectation';\n      \n      await expect(\n        service.extractCurriculumExpectations(text, mockUser.id)\n      ).rejects.toThrow('Database connection failed');\n\n      // Restore original method\n      prisma.outcome.findMany = originalFind;\n    });\n\n    it('should handle transaction rollbacks properly', async () => {\n      const prisma = getTestPrismaClient();\n      \n      // Mock transaction to fail midway\n      const originalTransaction = prisma.$transaction;\n      prisma.$transaction = jest.fn().mockImplementation(async (callback) => {\n        throw new Error('Transaction failed');\n      });\n\n      const text = 'A1.1 Test expectation';\n      \n      await expect(\n        service.extractCurriculumExpectations(text, mockUser.id)\n      ).rejects.toThrow('Transaction failed');\n\n      // Restore original method\n      prisma.$transaction = originalTransaction;\n    });\n\n    it('should validate user permissions before processing', async () => {\n      const invalidUserId = 99999;\n      const text = 'A1.1 Test expectation';\n\n      // This should either fail or handle gracefully\n      await expect(\n        service.extractCurriculumExpectations(text, invalidUserId)\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Data Validation and Sanitization', () => {\n    it('should sanitize malicious content in curriculum text', async () => {\n      const maliciousText = `\n        A1.1 <script>alert('xss')</script> demonstrate understanding\n        B2.2 <img src=\"x\" onerror=\"alert(1)\"> solve problems\n        C3.3 javascript:alert('malicious') analyze data\n      `;\n\n      const result = await service.extractCurriculumExpectations(maliciousText, mockUser.id);\n      \n      // Should extract expectations but remove malicious content\n      expect(result.outcomes.length).toBeGreaterThan(0);\n      result.outcomes.forEach(outcome => {\n        expect(outcome.description).not.toContain('<script>');\n        expect(outcome.description).not.toContain('javascript:');\n        expect(outcome.description).not.toContain('onerror');\n      });\n    });\n\n    it('should handle extremely long text content', async () => {\n      const longText = 'A1.1 ' + 'very '.repeat(10000) + 'long expectation';\n\n      const result = await service.extractCurriculumExpectations(longText, mockUser.id);\n      expect(result).toBeDefined();\n      \n      // Should truncate or handle long descriptions appropriately\n      result.outcomes.forEach(outcome => {\n        expect(outcome.description.length).toBeLessThan(5000);\n      });\n    });\n\n    it('should validate curriculum code formats', async () => {\n      const invalidCodes = [\n        'INVALID_CODE expectation',\n        '123ABC expectation',\n        '<script>A1.1</script> expectation',\n        'A' + '1'.repeat(100) + ' expectation',\n      ];\n\n      for (const text of invalidCodes) {\n        const result = await service.extractCurriculumExpectations(text, mockUser.id);\n        // Should either reject invalid codes or sanitize them\n        result.outcomes.forEach(outcome => {\n          expect(outcome.code).toMatch(/^[A-Z]+[0-9]+\\.[0-9]+$/);\n        });\n      }\n    });\n  });\n\n  describe('Performance and Memory Management', () => {\n    it('should handle multiple concurrent file uploads', async () => {\n      const promises = [];\n      \n      for (let i = 0; i < 5; i++) {\n        const mockFile = {\n          originalname: `test${i}.pdf`,\n          mimetype: 'application/pdf',\n          buffer: Buffer.from(`Test content ${i}`),\n          size: 100,\n          fieldname: 'file',\n          encoding: '7bit',\n          stream: null as any,\n          destination: '',\n          filename: '',\n          path: ''\n        };\n        \n        promises.push(service.processFile(mockFile, mockUser.id));\n      }\n\n      // All should either succeed or fail gracefully\n      const results = await Promise.allSettled(promises);\n      expect(results.length).toBe(5);\n      \n      // Check that we don't have memory leaks or hanging promises\n      results.forEach(result => {\n        expect(result.status).toBeOneOf(['fulfilled', 'rejected']);\n      });\n    });\n\n    it('should handle processing interruption gracefully', async () => {\n      const mockFile = {\n        originalname: 'test.pdf',\n        mimetype: 'application/pdf',\n        buffer: Buffer.from('Test content'),\n        size: 100,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      const processingPromise = service.processFile(mockFile, mockUser.id);\n      \n      // Simulate interruption after a short delay\n      setTimeout(() => {\n        // In a real scenario, we might abort the operation\n      }, 10);\n\n      // Should handle interruption gracefully\n      await expect(processingPromise).resolves.toBeDefined();\n    });\n  });\n\n  describe('Integration with External Services', () => {\n    it('should handle embedding service failures', async () => {\n      const { EmbeddingService } = require('../../src/services/embeddingService');\n      const mockEmbeddingService = new EmbeddingService();\n      mockEmbeddingService.generateEmbedding.mockRejectedValue(new Error('Embedding service unavailable'));\n\n      const text = 'A1.1 Test expectation';\n      \n      // Should either retry or handle gracefully\n      const result = await service.extractCurriculumExpectations(text, mockUser.id);\n      expect(result).toBeDefined();\n    });\n\n    it('should handle clustering service failures', async () => {\n      const { ClusteringService } = require('../../src/services/clusteringService');\n      const mockClusteringService = new ClusteringService();\n      mockClusteringService.clusterOutcomes.mockRejectedValue(new Error('Clustering service unavailable'));\n\n      const text = 'A1.1 Test expectation\\nB2.2 Another expectation';\n      \n      // Should handle clustering failure gracefully\n      const result = await service.extractCurriculumExpectations(text, mockUser.id);\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Configuration and Environment', () => {\n    it('should handle missing environment variables', async () => {\n      const originalEnv = process.env.OPENAI_API_KEY;\n      delete process.env.OPENAI_API_KEY;\n\n      const text = 'A1.1 Test expectation';\n      \n      try {\n        const result = await service.extractCurriculumExpectations(text, mockUser.id);\n        // Should either use fallback or handle gracefully\n        expect(result).toBeDefined();\n      } finally {\n        // Restore environment\n        if (originalEnv) {\n          process.env.OPENAI_API_KEY = originalEnv;\n        }\n      }\n    });\n\n    it('should respect processing limits and quotas', async () => {\n      // Test with a very large file that should be rejected\n      const mockFile = {\n        originalname: 'huge.pdf',\n        mimetype: 'application/pdf',\n        buffer: Buffer.alloc(200 * 1024 * 1024), // 200MB\n        size: 200 * 1024 * 1024,\n        fieldname: 'file',\n        encoding: '7bit',\n        stream: null as any,\n        destination: '',\n        filename: '',\n        path: ''\n      };\n\n      await expect(\n        service.processFile(mockFile, mockUser.id)\n      ).rejects.toThrow();\n    });\n  });\n});"],"version":3}