06580c9732267330c740685fb9542aee
import { jest } from '@jest/globals';
import { getTestPrismaClient } from '../jest.setup';
// Mock the email service before importing the module that uses it - service doesn't exist but test is skipped
const mockSendEmail = jest.fn().mockResolvedValue(undefined);
// jest.unstable_mockModule('../src/services/emailService', () => ({
//   sendEmail: mockSendEmail,
// }));
// Import after mock is set up
// NOTE: This function doesn't exist yet - test is disabled
const sendUnreadNotifications = async () => {
    throw new Error('sendUnreadNotifications not implemented');
};
/**
 * @todo This test uses mocked email service and should be converted to integration test
 * @mocked emailService - prevents testing actual email notification flow
 * @not-fully-implemented - should use real email service with test configuration
 */
// DISABLED: sendUnreadNotifications function not implemented
describe.skip('Unread Notifications - DISABLED (function not implemented)', () => {
    let prisma;
    beforeEach(() => {
        prisma = getTestPrismaClient();
        jest.clearAllMocks();
    });
    test.skip('emails unread notifications older than 48h - DISABLED (function not implemented)', async () => {
        // Create old notification (older than 48 hours)
        await prisma.notification.create({
            data: {
                message: 'Old note',
                createdAt: new Date(Date.now() - 3 * 86400000), // 3 days ago
                read: false,
            },
        });
        await sendUnreadNotifications();
        expect(mockSendEmail).toHaveBeenCalled();
        expect(mockSendEmail).toHaveBeenCalledWith('teacher@example.com', 'Unread Notification', 'Old note');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3VucmVhZE5vdGlmaWNhdGlvbnMudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRCw4R0FBOEc7QUFDOUcsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzdELG9FQUFvRTtBQUNwRSw4QkFBOEI7QUFDOUIsT0FBTztBQUVQLDhCQUE4QjtBQUM5QiwyREFBMkQ7QUFDM0QsTUFBTSx1QkFBdUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7QUFDN0QsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILDZEQUE2RDtBQUM3RCxRQUFRLENBQUMsSUFBSSxDQUFDLDREQUE0RCxFQUFFLEdBQUcsRUFBRTtJQUMvRSxJQUFJLE1BQThDLENBQUM7SUFFbkQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxJQUFJLENBQUMsa0ZBQWtGLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdkcsZ0RBQWdEO1FBQ2hELE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7WUFDL0IsSUFBSSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxVQUFVO2dCQUNuQixTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsRUFBRSxhQUFhO2dCQUM3RCxJQUFJLEVBQUUsS0FBSzthQUNaO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSx1QkFBdUIsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxvQkFBb0IsQ0FDeEMscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQixVQUFVLENBQ1gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3VucmVhZE5vdGlmaWNhdGlvbnMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBnZXRUZXN0UHJpc21hQ2xpZW50IH0gZnJvbSAnLi4vamVzdC5zZXR1cCc7XG5cbi8vIE1vY2sgdGhlIGVtYWlsIHNlcnZpY2UgYmVmb3JlIGltcG9ydGluZyB0aGUgbW9kdWxlIHRoYXQgdXNlcyBpdCAtIHNlcnZpY2UgZG9lc24ndCBleGlzdCBidXQgdGVzdCBpcyBza2lwcGVkXG5jb25zdCBtb2NrU2VuZEVtYWlsID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4vLyBqZXN0LnVuc3RhYmxlX21vY2tNb2R1bGUoJy4uL3NyYy9zZXJ2aWNlcy9lbWFpbFNlcnZpY2UnLCAoKSA9PiAoe1xuLy8gICBzZW5kRW1haWw6IG1vY2tTZW5kRW1haWwsXG4vLyB9KSk7XG5cbi8vIEltcG9ydCBhZnRlciBtb2NrIGlzIHNldCB1cFxuLy8gTk9URTogVGhpcyBmdW5jdGlvbiBkb2Vzbid0IGV4aXN0IHlldCAtIHRlc3QgaXMgZGlzYWJsZWRcbmNvbnN0IHNlbmRVbnJlYWROb3RpZmljYXRpb25zID0gYXN5bmMgKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3NlbmRVbnJlYWROb3RpZmljYXRpb25zIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuLyoqXG4gKiBAdG9kbyBUaGlzIHRlc3QgdXNlcyBtb2NrZWQgZW1haWwgc2VydmljZSBhbmQgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBpbnRlZ3JhdGlvbiB0ZXN0XG4gKiBAbW9ja2VkIGVtYWlsU2VydmljZSAtIHByZXZlbnRzIHRlc3RpbmcgYWN0dWFsIGVtYWlsIG5vdGlmaWNhdGlvbiBmbG93XG4gKiBAbm90LWZ1bGx5LWltcGxlbWVudGVkIC0gc2hvdWxkIHVzZSByZWFsIGVtYWlsIHNlcnZpY2Ugd2l0aCB0ZXN0IGNvbmZpZ3VyYXRpb25cbiAqL1xuLy8gRElTQUJMRUQ6IHNlbmRVbnJlYWROb3RpZmljYXRpb25zIGZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZFxuZGVzY3JpYmUuc2tpcCgnVW5yZWFkIE5vdGlmaWNhdGlvbnMgLSBESVNBQkxFRCAoZnVuY3Rpb24gbm90IGltcGxlbWVudGVkKScsICgpID0+IHtcbiAgbGV0IHByaXNtYTogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0VGVzdFByaXNtYUNsaWVudD47XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcHJpc21hID0gZ2V0VGVzdFByaXNtYUNsaWVudCgpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICB0ZXN0LnNraXAoJ2VtYWlscyB1bnJlYWQgbm90aWZpY2F0aW9ucyBvbGRlciB0aGFuIDQ4aCAtIERJU0FCTEVEIChmdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQpJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBvbGQgbm90aWZpY2F0aW9uIChvbGRlciB0aGFuIDQ4IGhvdXJzKVxuICAgIGF3YWl0IHByaXNtYS5ub3RpZmljYXRpb24uY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbWVzc2FnZTogJ09sZCBub3RlJyxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMyAqIDg2NDAwMDAwKSwgLy8gMyBkYXlzIGFnb1xuICAgICAgICByZWFkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBhd2FpdCBzZW5kVW5yZWFkTm90aWZpY2F0aW9ucygpO1xuICAgIGV4cGVjdChtb2NrU2VuZEVtYWlsKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KG1vY2tTZW5kRW1haWwpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgJ3RlYWNoZXJAZXhhbXBsZS5jb20nLFxuICAgICAgJ1VucmVhZCBOb3RpZmljYXRpb24nLFxuICAgICAgJ09sZCBub3RlJyxcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9