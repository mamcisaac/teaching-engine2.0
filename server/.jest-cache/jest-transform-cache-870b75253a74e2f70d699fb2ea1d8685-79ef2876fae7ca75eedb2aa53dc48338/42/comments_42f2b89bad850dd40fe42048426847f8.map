{"version":3,"names":["cov_228q628luo","actualCoverage","Router","z","authenticate","asyncHandler","logger","createCommentSchema","s","object","planType","enum","planId","string","content","min","max","parentId","optional","updateCommentSchema","isResolved","boolean","isPinned","commentRoutes","prisma","f","router","use","checkCommentAccess","userId","isOwner","b","lrPlan","longRangePlan","findUnique","where","id","unitPlan","lessonPlan","eTFOLessonPlan","daybookEntry","sharedPlan","findFirst","OR","sharedWithId","teamId","not","canComment","isMember","teamMember","get","req","res","user","query","status","json","error","hasAccess","comments","planComment","findMany","include","select","name","email","replies","orderBy","createdAt","post","parse","body","parentComment","comment","create","data","info","patch","commentId","params","updates","isAuthor","undefined","planOwnerChecks","long-range","plan","unit","lesson","daybook","isPlanOwner","updated","update","delete","_count","send","total","resolved","unresolved","Promise","all","count"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/comments.ts"],"sourcesContent":["/**\n * Plan Comments Routes\n * Handles commenting and feedback on shared plans\n */\n\nimport { Router } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport { authenticate } from '@/middleware/authenticate';\nimport { asyncHandler } from '@/middleware/errorHandler';\nimport logger from '@/logger';\n\n// Validation schemas\nconst createCommentSchema = z.object({\n  planType: z.enum(['long-range', 'unit', 'lesson', 'daybook']),\n  planId: z.string(),\n  content: z.string().min(1).max(5000),\n  parentId: z.string().optional(),\n});\n\nconst updateCommentSchema = z.object({\n  content: z.string().min(1).max(5000).optional(),\n  isResolved: z.boolean().optional(),\n  isPinned: z.boolean().optional(),\n});\n\nexport function commentRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Apply authentication to all routes\n  router.use(authenticate);\n\n  // Helper function to check if user has access to comment on a plan\n  async function checkCommentAccess(\n    planType: string,\n    planId: string,\n    userId: number,\n  ): Promise<boolean> {\n    // Check if user owns the plan\n    let isOwner = false;\n    switch (planType) {\n      case 'long-range': {\n        const lrPlan = await prisma.longRangePlan.findUnique({\n          where: { id: planId },\n        });\n        isOwner = lrPlan?.userId === userId;\n        break;\n      }\n\n      case 'unit': {\n        const unitPlan = await prisma.unitPlan.findUnique({\n          where: { id: planId },\n        });\n        isOwner = unitPlan?.userId === userId;\n        break;\n      }\n\n      case 'lesson': {\n        const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n          where: { id: planId },\n        });\n        isOwner = lessonPlan?.userId === userId;\n        break;\n      }\n\n      case 'daybook': {\n        const daybookEntry = await prisma.daybookEntry.findUnique({\n          where: { id: planId },\n        });\n        isOwner = daybookEntry?.userId === userId;\n        break;\n      }\n    }\n\n    if (isOwner) return true;\n\n    // Check if plan is shared with user and commenting is allowed\n    const sharedPlan = await prisma.sharedPlan.findFirst({\n      where: {\n        planType,\n        planId,\n        OR: [{ sharedWithId: userId }, { teamId: { not: null } }],\n        canComment: true,\n      },\n    });\n\n    if (sharedPlan) {\n      // If shared with team, check team membership\n      if (sharedPlan.teamId) {\n        const isMember = await prisma.teamMember.findFirst({\n          where: { teamId: sharedPlan.teamId, userId },\n        });\n        return !!isMember;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  // Get comments for a plan\n  router.get(\n    '/',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { planType, planId } = req.query;\n\n      if (!planType || !planId) {\n        return res.status(400).json({ error: 'planType and planId are required' });\n      }\n\n      // Check access\n      const hasAccess = await checkCommentAccess(planType as string, planId as string, userId);\n      if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      const comments = await prisma.planComment.findMany({\n        where: {\n          planType: planType as string,\n          planId: planId as string,\n          parentId: null, // Only get top-level comments\n        },\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n          replies: {\n            include: {\n              user: {\n                select: { id: true, name: true, email: true },\n              },\n            },\n            orderBy: { createdAt: 'asc' },\n          },\n        },\n        orderBy: [{ isPinned: 'desc' }, { createdAt: 'desc' }],\n      });\n\n      res.json(comments);\n    }),\n  );\n\n  // Create a comment\n  router.post(\n    '/',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { planType, planId, content, parentId } = createCommentSchema.parse(req.body);\n\n      // Check access\n      const hasAccess = await checkCommentAccess(planType, planId, userId);\n      if (!hasAccess) {\n        return res\n          .status(403)\n          .json({ error: 'You do not have permission to comment on this plan' });\n      }\n\n      // If replying to a comment, verify parent exists\n      if (parentId) {\n        const parentComment = await prisma.planComment.findUnique({\n          where: { id: parentId },\n        });\n\n        if (\n          !parentComment ||\n          parentComment.planType !== planType ||\n          parentComment.planId !== planId\n        ) {\n          return res.status(400).json({ error: 'Invalid parent comment' });\n        }\n      }\n\n      const comment = await prisma.planComment.create({\n        data: {\n          planType,\n          planId,\n          userId,\n          content,\n          parentId,\n        },\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      logger.info(`Comment created on ${planType}/${planId} by user ${userId}`);\n      res.status(201).json(comment);\n    }),\n  );\n\n  // Update a comment\n  router.patch(\n    '/:commentId',\n    asyncHandler(async (req, res) => {\n      const { commentId } = req.params;\n      const userId = req.user!.id;\n      const updates = updateCommentSchema.parse(req.body);\n\n      const comment = await prisma.planComment.findUnique({\n        where: { id: commentId },\n      });\n\n      if (!comment) {\n        return res.status(404).json({ error: 'Comment not found' });\n      }\n\n      // Check permissions\n      const isAuthor = comment.userId === userId;\n      const hasAccess = await checkCommentAccess(comment.planType, comment.planId, userId);\n\n      if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      // Only author can edit content\n      if (updates.content !== undefined && !isAuthor) {\n        return res.status(403).json({ error: 'Only the comment author can edit the content' });\n      }\n\n      // Plan owner can pin/resolve comments\n      const planOwnerChecks: Record<string, () => Promise<boolean>> = {\n        'long-range': async () => {\n          const plan = await prisma.longRangePlan.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n        unit: async () => {\n          const plan = await prisma.unitPlan.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n        lesson: async () => {\n          const plan = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n        daybook: async () => {\n          const plan = await prisma.daybookEntry.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n      };\n\n      const isPlanOwner = await planOwnerChecks[comment.planType]?.();\n\n      if ((updates.isPinned !== undefined || updates.isResolved !== undefined) && !isPlanOwner) {\n        return res.status(403).json({ error: 'Only the plan owner can pin or resolve comments' });\n      }\n\n      const updated = await prisma.planComment.update({\n        where: { id: commentId },\n        data: updates,\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      res.json(updated);\n    }),\n  );\n\n  // Delete a comment\n  router.delete(\n    '/:commentId',\n    asyncHandler(async (req, res) => {\n      const { commentId } = req.params;\n      const userId = req.user!.id;\n\n      const comment = await prisma.planComment.findUnique({\n        where: { id: commentId },\n        include: {\n          _count: {\n            select: { replies: true },\n          },\n        },\n      });\n\n      if (!comment) {\n        return res.status(404).json({ error: 'Comment not found' });\n      }\n\n      // Only author can delete their comment\n      if (comment.userId !== userId) {\n        return res.status(403).json({ error: 'Only the comment author can delete the comment' });\n      }\n\n      // Don't allow deletion if there are replies\n      if (comment._count.replies > 0) {\n        return res.status(400).json({ error: 'Cannot delete a comment with replies' });\n      }\n\n      await prisma.planComment.delete({\n        where: { id: commentId },\n      });\n\n      logger.info(`Comment ${commentId} deleted by user ${userId}`);\n      res.status(204).send();\n    }),\n  );\n\n  // Get comment statistics for a plan\n  router.get(\n    '/stats',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { planType, planId } = req.query;\n\n      if (!planType || !planId) {\n        return res.status(400).json({ error: 'planType and planId are required' });\n      }\n\n      // Check access\n      const hasAccess = await checkCommentAccess(planType as string, planId as string, userId);\n      if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      const [total, resolved, unresolved] = await Promise.all([\n        prisma.planComment.count({\n          where: {\n            planType: planType as string,\n            planId: planId as string,\n          },\n        }),\n        prisma.planComment.count({\n          where: {\n            planType: planType as string,\n            planId: planId as string,\n            isResolved: true,\n          },\n        }),\n        prisma.planComment.count({\n          where: {\n            planType: planType as string,\n            planId: planId as string,\n            isResolved: false,\n          },\n        }),\n      ]);\n\n      res.json({\n        total,\n        resolved,\n        unresolved,\n      });\n    }),\n  );\n\n  return router;\n}\n"],"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","ignoreList":[]}