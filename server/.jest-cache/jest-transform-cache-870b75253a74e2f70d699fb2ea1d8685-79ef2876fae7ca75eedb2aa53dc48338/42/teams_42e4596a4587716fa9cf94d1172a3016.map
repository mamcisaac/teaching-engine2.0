{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/teams.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/teams.ts"],"sourcesContent":["/**\n * Team Collaboration Routes\n * Handles team creation, management, and collaboration features\n */\n\nimport { Router } from 'express';\nimport { PrismaClient, TeamRole, InvitationStatus } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport { authenticate } from '@/middleware/authenticate';\nimport { asyncHandler } from '@/middleware/errorHandler';\nimport logger from '@/logger';\nimport { addDays } from 'date-fns';\n\n// Validation schemas\nconst createTeamSchema = z.object({\n  name: z.string().min(1).max(100),\n  description: z.string().optional(),\n  grade: z.number().int().min(1).max(12).optional(),\n  subject: z.string().optional(),\n  schoolName: z.string().optional(),\n  schoolBoard: z.string().optional(),\n  isPublic: z.boolean().optional(),\n  requiresApproval: z.boolean().optional(),\n});\n\nconst updateTeamSchema = createTeamSchema.partial();\n\nconst inviteMemberSchema = z.object({\n  email: z.string().email(),\n  message: z.string().optional(),\n  role: z.enum(['ADMIN', 'MEMBER', 'VIEWER']).optional(),\n});\n\nconst respondToInvitationSchema = z.object({\n  response: z.enum(['accept', 'decline']),\n});\n\nexport function teamRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Apply authentication to all routes\n  router.use(authenticate);\n\n  // Get all teams for the current user\n  router.get(\n    '/',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n\n      const teams = await prisma.team.findMany({\n        where: {\n          OR: [{ ownerId: userId }, { members: { some: { userId } } }],\n        },\n        include: {\n          owner: {\n            select: { id: true, name: true, email: true },\n          },\n          _count: {\n            select: { members: true },\n          },\n        },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      res.json(teams);\n    }),\n  );\n\n  // Get public teams (for discovery)\n  router.get(\n    '/public',\n    asyncHandler(async (req, res) => {\n      const { grade, subject, search } = req.query;\n\n      const teams = await prisma.team.findMany({\n        where: {\n          isPublic: true,\n          ...(grade && { grade: parseInt(grade as string) }),\n          ...(subject && { subject: subject as string }),\n          ...(search && {\n            OR: [\n              { name: { contains: search as string } },\n              { description: { contains: search as string } },\n            ],\n          }),\n        },\n        include: {\n          owner: {\n            select: { id: true, name: true },\n          },\n          _count: {\n            select: { members: true },\n          },\n        },\n        orderBy: { createdAt: 'desc' },\n        take: 50,\n      });\n\n      res.json(teams);\n    }),\n  );\n\n  // Get team by ID\n  router.get(\n    '/:teamId',\n    asyncHandler(async (req, res) => {\n      const { teamId } = req.params;\n      const userId = req.user!.id;\n\n      const team = await prisma.team.findUnique({\n        where: { id: teamId },\n        include: {\n          owner: {\n            select: { id: true, name: true, email: true },\n          },\n          members: {\n            include: {\n              user: {\n                select: { id: true, name: true, email: true },\n              },\n            },\n            orderBy: { joinedAt: 'asc' },\n          },\n          _count: {\n            select: {\n              members: true,\n              sharedResources: true,\n              discussions: true,\n            },\n          },\n        },\n      });\n\n      if (!team) {\n        return res.status(404).json({ error: 'Team not found' });\n      }\n\n      // Check if user has access\n      const isMember = team.ownerId === userId || team.members.some((m) => m.userId === userId);\n\n      if (!isMember && !team.isPublic && !team.allowGuests) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      res.json(team);\n    }),\n  );\n\n  // Create a new team\n  router.post(\n    '/',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const data = createTeamSchema.parse(req.body);\n\n      const team = await prisma.team.create({\n        data: {\n          name: data.name,\n          description: data.description,\n          grade: data.grade,\n          subject: data.subject,\n          schoolName: data.schoolName,\n          schoolBoard: data.schoolBoard,\n          isPublic: data.isPublic,\n          requiresApproval: data.requiresApproval,\n          owner: {\n            connect: { id: userId },\n          },\n          members: {\n            create: {\n              userId,\n              role: TeamRole.OWNER,\n            },\n          },\n        },\n        include: {\n          owner: {\n            select: { id: true, name: true, email: true },\n          },\n          members: {\n            include: {\n              user: {\n                select: { id: true, name: true, email: true },\n              },\n            },\n          },\n        },\n      });\n\n      logger.info(`Team created: ${team.id} by user ${userId}`);\n      res.status(201).json(team);\n    }),\n  );\n\n  // Update team\n  router.patch(\n    '/:teamId',\n    asyncHandler(async (req, res) => {\n      const { teamId } = req.params;\n      const userId = req.user!.id;\n      const data = updateTeamSchema.parse(req.body);\n\n      // Check if user is owner or admin\n      const member = await prisma.teamMember.findUnique({\n        where: { teamId_userId: { teamId, userId } },\n      });\n\n      if (!member || (member.role !== TeamRole.OWNER && member.role !== TeamRole.ADMIN)) {\n        return res\n          .status(403)\n          .json({ error: 'Only team owners and admins can update team settings' });\n      }\n\n      const team = await prisma.team.update({\n        where: { id: teamId },\n        data,\n        include: {\n          owner: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      res.json(team);\n    }),\n  );\n\n  // Delete team (owner only)\n  router.delete(\n    '/:teamId',\n    asyncHandler(async (req, res) => {\n      const { teamId } = req.params;\n      const userId = req.user!.id;\n\n      const team = await prisma.team.findUnique({\n        where: { id: teamId },\n      });\n\n      if (!team) {\n        return res.status(404).json({ error: 'Team not found' });\n      }\n\n      if (team.ownerId !== userId) {\n        return res.status(403).json({ error: 'Only the team owner can delete the team' });\n      }\n\n      await prisma.team.delete({\n        where: { id: teamId },\n      });\n\n      logger.info(`Team deleted: ${teamId} by user ${userId}`);\n      res.status(204).send();\n    }),\n  );\n\n  // Invite member to team\n  router.post(\n    '/:teamId/invitations',\n    asyncHandler(async (req, res) => {\n      const { teamId } = req.params;\n      const userId = req.user!.id;\n      const { email, message, role = TeamRole.MEMBER } = inviteMemberSchema.parse(req.body);\n\n      // Check if user can invite (owner or admin)\n      const member = await prisma.teamMember.findUnique({\n        where: { teamId_userId: { teamId, userId } },\n      });\n\n      if (!member || (member.role !== TeamRole.OWNER && member.role !== TeamRole.ADMIN)) {\n        return res.status(403).json({ error: 'Only team owners and admins can invite members' });\n      }\n\n      // Check if user is already a member\n      const existingUser = await prisma.user.findUnique({\n        where: { email },\n      });\n\n      if (existingUser) {\n        const existingMember = await prisma.teamMember.findUnique({\n          where: { teamId_userId: { teamId, userId: existingUser.id } },\n        });\n\n        if (existingMember) {\n          return res.status(409).json({ error: 'User is already a team member' });\n        }\n      }\n\n      // Check for existing pending invitation\n      const existingInvitation = await prisma.teamInvitation.findUnique({\n        where: { teamId_email: { teamId, email } },\n      });\n\n      if (existingInvitation && existingInvitation.status === InvitationStatus.PENDING) {\n        return res.status(409).json({ error: 'An invitation is already pending for this email' });\n      }\n\n      // Create invitation\n      const invitation = await prisma.teamInvitation.create({\n        data: {\n          teamId,\n          email,\n          invitedById: userId,\n          invitedUserId: existingUser?.id,\n          message,\n          role,\n          expiresAt: addDays(new Date(), 7), // 7 day expiration\n        },\n        include: {\n          team: {\n            select: { id: true, name: true },\n          },\n          invitedBy: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      // TODO: Send email notification\n\n      res.status(201).json(invitation);\n    }),\n  );\n\n  // Get team invitations\n  router.get(\n    '/:teamId/invitations',\n    asyncHandler(async (req, res) => {\n      const { teamId } = req.params;\n      const userId = req.user!.id;\n\n      // Check if user is member\n      const member = await prisma.teamMember.findUnique({\n        where: { teamId_userId: { teamId, userId } },\n      });\n\n      if (!member) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      const invitations = await prisma.teamInvitation.findMany({\n        where: {\n          teamId,\n          status: InvitationStatus.PENDING,\n          expiresAt: { gt: new Date() },\n        },\n        include: {\n          invitedBy: {\n            select: { id: true, name: true, email: true },\n          },\n          invitedUser: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      res.json(invitations);\n    }),\n  );\n\n  // Get user's pending invitations\n  router.get(\n    '/invitations/my',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const userEmail = req.user!.email;\n\n      const invitations = await prisma.teamInvitation.findMany({\n        where: {\n          OR: [{ invitedUserId: userId }, { email: userEmail }],\n          status: InvitationStatus.PENDING,\n          expiresAt: { gt: new Date() },\n        },\n        include: {\n          team: {\n            include: {\n              owner: {\n                select: { id: true, name: true },\n              },\n              _count: {\n                select: { members: true },\n              },\n            },\n          },\n          invitedBy: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n        orderBy: { createdAt: 'desc' },\n      });\n\n      res.json(invitations);\n    }),\n  );\n\n  // Respond to invitation\n  router.post(\n    '/invitations/:invitationId/respond',\n    asyncHandler(async (req, res) => {\n      const { invitationId } = req.params;\n      const userId = req.user!.id;\n      const userEmail = req.user!.email;\n      const { response } = respondToInvitationSchema.parse(req.body);\n\n      const invitation = await prisma.teamInvitation.findUnique({\n        where: { id: invitationId },\n      });\n\n      if (!invitation) {\n        return res.status(404).json({ error: 'Invitation not found' });\n      }\n\n      // Check if invitation is for this user\n      if (invitation.invitedUserId !== userId && invitation.email !== userEmail) {\n        return res.status(403).json({ error: 'This invitation is not for you' });\n      }\n\n      // Check if invitation is still valid\n      if (invitation.status !== InvitationStatus.PENDING) {\n        return res.status(409).json({ error: 'Invitation has already been responded to' });\n      }\n\n      if (new Date() > invitation.expiresAt) {\n        return res.status(409).json({ error: 'Invitation has expired' });\n      }\n\n      if (response === 'accept') {\n        // Create team membership\n        await prisma.$transaction(async (tx) => {\n          // Update invitation\n          await tx.teamInvitation.update({\n            where: { id: invitationId },\n            data: {\n              status: InvitationStatus.ACCEPTED,\n              respondedAt: new Date(),\n            },\n          });\n\n          // Create membership\n          await tx.teamMember.create({\n            data: {\n              teamId: invitation.teamId,\n              userId,\n              role: invitation.role,\n            },\n          });\n        });\n\n        logger.info(`User ${userId} accepted invitation to team ${invitation.teamId}`);\n        res.json({ message: 'Invitation accepted successfully' });\n      } else {\n        // Decline invitation\n        await prisma.teamInvitation.update({\n          where: { id: invitationId },\n          data: {\n            status: InvitationStatus.DECLINED,\n            respondedAt: new Date(),\n          },\n        });\n\n        res.json({ message: 'Invitation declined' });\n      }\n    }),\n  );\n\n  // Leave team\n  router.post(\n    '/:teamId/leave',\n    asyncHandler(async (req, res) => {\n      const { teamId } = req.params;\n      const userId = req.user!.id;\n\n      const member = await prisma.teamMember.findUnique({\n        where: { teamId_userId: { teamId, userId } },\n      });\n\n      if (!member) {\n        return res.status(404).json({ error: 'You are not a member of this team' });\n      }\n\n      if (member.role === TeamRole.OWNER) {\n        return res\n          .status(400)\n          .json({\n            error: 'Team owner cannot leave the team. Transfer ownership or delete the team.',\n          });\n      }\n\n      await prisma.teamMember.delete({\n        where: { id: member.id },\n      });\n\n      logger.info(`User ${userId} left team ${teamId}`);\n      res.json({ message: 'Successfully left the team' });\n    }),\n  );\n\n  // Update member role\n  router.patch(\n    '/:teamId/members/:memberId',\n    asyncHandler(async (req, res) => {\n      const { teamId, memberId } = req.params;\n      const userId = req.user!.id;\n      const { role } = z.object({ role: z.enum(['ADMIN', 'MEMBER', 'VIEWER']) }).parse(req.body);\n\n      // Check if user is owner\n      const team = await prisma.team.findUnique({\n        where: { id: teamId },\n      });\n\n      if (!team || team.ownerId !== userId) {\n        return res.status(403).json({ error: 'Only the team owner can change member roles' });\n      }\n\n      const member = await prisma.teamMember.findFirst({\n        where: { id: memberId, teamId },\n      });\n\n      if (!member) {\n        return res.status(404).json({ error: 'Member not found' });\n      }\n\n      if (member.role === TeamRole.OWNER) {\n        return res.status(400).json({ error: 'Cannot change owner role' });\n      }\n\n      const updatedMember = await prisma.teamMember.update({\n        where: { id: memberId },\n        data: { role },\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      res.json(updatedMember);\n    }),\n  );\n\n  // Remove member from team\n  router.delete(\n    '/:teamId/members/:memberId',\n    asyncHandler(async (req, res) => {\n      const { teamId, memberId } = req.params;\n      const userId = req.user!.id;\n\n      // Check if user is owner or admin\n      const currentMember = await prisma.teamMember.findUnique({\n        where: { teamId_userId: { teamId, userId } },\n      });\n\n      if (\n        !currentMember ||\n        (currentMember.role !== TeamRole.OWNER && currentMember.role !== TeamRole.ADMIN)\n      ) {\n        return res.status(403).json({ error: 'Only team owners and admins can remove members' });\n      }\n\n      const memberToRemove = await prisma.teamMember.findFirst({\n        where: { id: memberId, teamId },\n      });\n\n      if (!memberToRemove) {\n        return res.status(404).json({ error: 'Member not found' });\n      }\n\n      if (memberToRemove.role === TeamRole.OWNER) {\n        return res.status(400).json({ error: 'Cannot remove team owner' });\n      }\n\n      await prisma.teamMember.delete({\n        where: { id: memberId },\n      });\n\n      logger.info(`Member ${memberToRemove.userId} removed from team ${teamId} by user ${userId}`);\n      res.status(204).send();\n    }),\n  );\n\n  return router;\n}\n"],"version":3}