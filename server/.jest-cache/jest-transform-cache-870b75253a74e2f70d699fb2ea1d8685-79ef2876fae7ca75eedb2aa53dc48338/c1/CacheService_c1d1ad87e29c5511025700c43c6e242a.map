{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\n\nexport interface CacheEntry<T = unknown> {\n  key: string;\n  value: T;\n  ttl: number; // Time to live in milliseconds\n  createdAt: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface CacheOptions {\n  defaultTTL?: number; // Default TTL in milliseconds\n  cleanupInterval?: number; // Cleanup interval in milliseconds\n  maxSize?: number; // Maximum number of entries\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  size: number;\n  maxSize: number;\n  memoryUsage: number; // Approximate memory usage in bytes\n}\n\nexport class CacheService extends BaseService {\n  private cache = new Map<string, CacheEntry>();\n  private stats = {\n    hits: 0,\n    misses: 0,\n  };\n  private cleanupInterval: NodeJS.Timeout;\n  private readonly defaultTTL: number;\n  private readonly maxSize: number;\n  private readonly cleanupIntervalMs: number;\n\n  constructor(options: CacheOptions = {}) {\n    super('CacheService');\n\n    this.defaultTTL = options.defaultTTL || 5 * 60 * 1000; // 5 minutes\n    this.maxSize = options.maxSize || 10000; // Maximum cache entries\n    this.cleanupIntervalMs = options.cleanupInterval || 10 * 60 * 1000; // 10 minutes\n\n    this.startCleanupTask();\n  }\n\n  /**\n   * Store a value in the cache\n   */\n  async set<T>(\n    key: string,\n    value: T,\n    options: { ttl?: number; namespace?: string } = {},\n  ): Promise<void> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const ttl = options.ttl || this.defaultTTL;\n      const now = Date.now();\n\n      const entry: CacheEntry<T> = {\n        key: key, // Store original key, not fullKey\n        value,\n        ttl,\n        createdAt: now,\n        accessCount: 0,\n        lastAccessed: now,\n      };\n\n      // Check if we need to evict entries to make room\n      if (this.cache.size >= this.maxSize) {\n        await this.evictLeastUsed();\n      }\n\n      this.cache.set(fullKey, entry);\n\n      this.logger.debug({ key: fullKey, ttl }, 'Value cached');\n    } catch (error) {\n      this.handleError(error, { key, options });\n    }\n  }\n\n  /**\n   * Retrieve a value from the cache\n   */\n  async get<T>(key: string, options: { namespace?: string } = {}): Promise<T | null> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey) as CacheEntry<T> | undefined;\n\n      if (!entry) {\n        this.stats.misses++;\n        this.logger.debug({ key: fullKey }, 'Cache miss');\n        return null;\n      }\n\n      // Check if entry has expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        this.stats.misses++;\n        this.logger.debug({ key: fullKey }, 'Cache entry expired');\n        return null;\n      }\n\n      // Update access stats\n      entry.accessCount++;\n      entry.lastAccessed = now;\n      this.stats.hits++;\n\n      this.logger.debug({ key: fullKey, accessCount: entry.accessCount }, 'Cache hit');\n      return entry.value;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to get cache value');\n      return null;\n    }\n  }\n\n  /**\n   * Get or set a value using a factory function\n   */\n  async getOrSet<T>(\n    key: string,\n    factory: () => Promise<T>,\n    options: { ttl?: number; namespace?: string } = {},\n  ): Promise<T> {\n    try {\n      const cached = await this.get<T>(key, options);\n      if (cached !== null) {\n        return cached;\n      }\n\n      const value = await factory();\n      await this.set(key, value, options);\n\n      this.logger.debug({ key }, 'Value computed and cached');\n      return value;\n    } catch (error) {\n      this.handleError(error, { key, options });\n    }\n  }\n\n  /**\n   * Delete a value from the cache\n   */\n  async delete(key: string, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const deleted = this.cache.delete(fullKey);\n\n      if (deleted) {\n        this.logger.debug({ key: fullKey }, 'Cache entry deleted');\n      }\n\n      return deleted;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to delete cache entry');\n      return false;\n    }\n  }\n\n  /**\n   * Clear all entries in a namespace (or entire cache if no namespace)\n   */\n  async clear(namespace?: string): Promise<number> {\n    try {\n      let deletedCount = 0;\n\n      if (namespace) {\n        const prefix = `${namespace}:`;\n        for (const key of this.cache.keys()) {\n          if (key.startsWith(prefix)) {\n            this.cache.delete(key);\n            deletedCount++;\n          }\n        }\n        this.logger.info({ namespace, deletedCount }, 'Namespace cleared');\n      } else {\n        deletedCount = this.cache.size;\n        this.cache.clear();\n        this.stats.hits = 0;\n        this.stats.misses = 0;\n        this.logger.info({ deletedCount }, 'Cache cleared');\n      }\n\n      return deletedCount;\n    } catch (error) {\n      this.logger.error({ error, namespace }, 'Failed to clear cache');\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a key exists in the cache\n   */\n  async has(key: string, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey);\n\n      if (!entry) return false;\n\n      // Check if expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to check cache key existence');\n      return false;\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    const totalRequests = this.stats.hits + this.stats.misses;\n    const hitRate = totalRequests > 0 ? this.stats.hits / totalRequests : 0;\n\n    // Approximate memory usage calculation\n    let memoryUsage = 0;\n    for (const entry of this.cache.values()) {\n      memoryUsage += this.estimateEntrySize(entry);\n    }\n\n    return {\n      hits: this.stats.hits,\n      misses: this.stats.misses,\n      hitRate: Math.round(hitRate * 10000) / 100, // Percentage with 2 decimal places\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      memoryUsage,\n    };\n  }\n\n  /**\n   * Get keys matching a pattern (supports wildcards)\n   */\n  async getKeys(pattern: string, namespace?: string): Promise<string[]> {\n    try {\n      const fullPattern = namespace ? `${namespace}:${pattern}` : pattern;\n      const regex = new RegExp('^' + fullPattern.replace(/\\*/g, '.*').replace(/\\?/g, '.') + '$');\n\n      const matchingKeys: string[] = [];\n      for (const key of this.cache.keys()) {\n        if (regex.test(key)) {\n          // Remove namespace prefix if present\n          const cleanKey = namespace ? key.substring(namespace.length + 1) : key;\n          matchingKeys.push(cleanKey);\n        }\n      }\n\n      return matchingKeys;\n    } catch (error) {\n      this.logger.error({ error, pattern, namespace }, 'Failed to get matching keys');\n      return [];\n    }\n  }\n\n  /**\n   * Set multiple values at once\n   */\n  async setMultiple<T>(\n    entries: { key: string; value: T; ttl?: number }[],\n    options: { namespace?: string } = {},\n  ): Promise<{ successful: number; failed: string[] }> {\n    const operations = entries.map(\n      (entry) => () =>\n        this.set(entry.key, entry.value, {\n          ttl: entry.ttl,\n          namespace: options.namespace,\n        }),\n    );\n\n    const { successCount, errors } = await this.withParallel(operations, {\n      failFast: false,\n    });\n\n    const failed = entries.filter((_, index) => errors[index] !== null).map((entry) => entry.key);\n\n    this.logger.info(\n      {\n        total: entries.length,\n        successful: successCount,\n        failed: failed.length,\n      },\n      'Batch cache set completed',\n    );\n\n    return { successful: successCount, failed };\n  }\n\n  /**\n   * Get multiple values at once\n   */\n  async getMultiple<T>(\n    keys: string[],\n    options: { namespace?: string } = {},\n  ): Promise<{ [key: string]: T | null }> {\n    const operations = keys.map((key) => () => this.get<T>(key, options));\n\n    const { results } = await this.withParallel(operations, {\n      failFast: false,\n    });\n\n    const result: { [key: string]: T | null } = {};\n    for (let i = 0; i < keys.length; i++) {\n      result[keys[i]] = results[i] as T | null;\n    }\n\n    return result;\n  }\n\n  /**\n   * Extend the TTL of an existing cache entry\n   */\n  async touch(key: string, newTTL: number, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey);\n\n      if (!entry) return false;\n\n      // Check if expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        return false;\n      }\n\n      entry.ttl = newTTL;\n      entry.createdAt = now; // Reset creation time\n      entry.lastAccessed = now;\n\n      this.logger.debug({ key: fullKey, newTTL }, 'Cache entry TTL updated');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to update cache entry TTL');\n      return false;\n    }\n  }\n\n  /**\n   * Get cache entries sorted by various criteria\n   */\n  getTopEntries(\n    sortBy: 'accessCount' | 'lastAccessed' | 'createdAt' = 'accessCount',\n    limit: number = 10,\n  ): Array<{ key: string; accessCount: number; lastAccessed: Date; createdAt: Date }> {\n    const entries = Array.from(this.cache.entries())\n      .map(([, entry]) => ({\n        key: entry.key, // Use the original key stored in the entry\n        accessCount: entry.accessCount,\n        lastAccessed: entry.lastAccessed,\n        createdAt: entry.createdAt,\n      }))\n      .sort((a, b) => {\n        switch (sortBy) {\n          case 'accessCount':\n            return b.accessCount - a.accessCount;\n          case 'lastAccessed':\n            return b.lastAccessed - a.lastAccessed;\n          case 'createdAt':\n            return b.createdAt - a.createdAt;\n          default:\n            return 0;\n        }\n      })\n      .slice(0, limit)\n      .map((entry) => ({\n        key: entry.key,\n        accessCount: entry.accessCount,\n        lastAccessed: new Date(entry.lastAccessed),\n        createdAt: new Date(entry.createdAt),\n      }));\n\n    return entries;\n  }\n\n  // Private methods\n\n  private buildKey(key: string, namespace?: string): string {\n    return namespace ? `${namespace}:${key}` : key;\n  }\n\n  private async evictLeastUsed(): Promise<void> {\n    if (this.cache.size === 0) return;\n\n    // Find the least recently used entry\n    let lruKey: string | null = null;\n    let oldestAccess = Date.now();\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < oldestAccess) {\n        oldestAccess = entry.lastAccessed;\n        lruKey = key;\n      }\n    }\n\n    if (lruKey) {\n      this.cache.delete(lruKey);\n      this.logger.info(\n        {\n          evictedKey: lruKey,\n          cacheSize: this.cache.size,\n          oldestAccess,\n        },\n        'Evicted LRU cache entry',\n      );\n    }\n  }\n\n  private estimateEntrySize(entry: CacheEntry): number {\n    // Rough estimation of memory usage\n    const keySize = entry.key.length * 2; // 2 bytes per character (UTF-16)\n    const valueSize = this.estimateValueSize(entry.value);\n    const overhead = 100; // Approximate overhead for entry metadata\n\n    return keySize + valueSize + overhead;\n  }\n\n  private estimateValueSize(value: unknown): number {\n    if (value === null || value === undefined) return 0;\n\n    if (typeof value === 'string') {\n      return value.length * 2; // 2 bytes per character\n    }\n\n    if (typeof value === 'number') {\n      return 8; // 64-bit number\n    }\n\n    if (typeof value === 'boolean') {\n      return 1;\n    }\n\n    if (typeof value === 'object') {\n      // Rough estimation for objects\n      const jsonString = JSON.stringify(value);\n      return jsonString.length * 2;\n    }\n\n    return 100; // Default estimation\n  }\n\n  private startCleanupTask(): void {\n    // Clean up expired entries at configured interval\n    this.cleanupInterval = setInterval(() => {\n      const now = Date.now();\n      let cleanedCount = 0;\n\n      for (const [key, entry] of this.cache.entries()) {\n        if (now - entry.createdAt > entry.ttl) {\n          this.cache.delete(key);\n          cleanedCount++;\n        }\n      }\n\n      if (cleanedCount > 0) {\n        this.logger.info({ cleanedCount }, 'Cleaned up expired cache entries');\n      }\n    }, this.cleanupIntervalMs);\n  }\n\n  /**\n   * Cleanup resources on service shutdown\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nexport const cacheService = new CacheService();\n"],"version":3}