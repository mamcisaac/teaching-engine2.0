2dd982d7005506eefa10a904af891365
/* istanbul ignore next */
function cov_13fddtuok() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reflectionClassifierService.ts";
  var hash = "f148c31c5aa5796d9361aa0c4c339ff6373c523d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reflectionClassifierService.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "1": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "2": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 55
        }
      },
      "3": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 36
        }
      },
      "4": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "5": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 101
        }
      },
      "6": {
        start: {
          line: 37,
          column: 43
        },
        end: {
          line: 37,
          column: 91
        }
      },
      "7": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 67
        }
      },
      "8": {
        start: {
          line: 40,
          column: 27
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "9": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 49,
          column: 54
        }
      },
      "10": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "11": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 107
        }
      },
      "12": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 61
        }
      },
      "13": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "14": {
        start: {
          line: 63,
          column: 40
        },
        end: {
          line: 63,
          column: 107
        }
      },
      "15": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "16": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 85
        }
      },
      "17": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 26
        }
      },
      "18": {
        start: {
          line: 71,
          column: 42
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "19": {
        start: {
          line: 85,
          column: 33
        },
        end: {
          line: 94,
          column: 60
        }
      },
      "20": {
        start: {
          line: 87,
          column: 35
        },
        end: {
          line: 87,
          column: 91
        }
      },
      "21": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 92,
          column: 18
        }
      },
      "22": {
        start: {
          line: 94,
          column: 32
        },
        end: {
          line: 94,
          column: 59
        }
      },
      "23": {
        start: {
          line: 96,
          column: 36
        },
        end: {
          line: 96,
          column: 94
        }
      },
      "24": {
        start: {
          line: 96,
          column: 63
        },
        end: {
          line: 96,
          column: 81
        }
      },
      "25": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "26": {
        start: {
          line: 99,
          column: 34
        },
        end: {
          line: 99,
          column: 126
        }
      },
      "27": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 104,
          column: 18
        }
      },
      "28": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 27
        }
      },
      "29": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 80
        }
      },
      "30": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 22
        }
      },
      "31": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "32": {
        start: {
          line: 118,
          column: 34
        },
        end: {
          line: 129,
          column: 71
        }
      },
      "33": {
        start: {
          line: 130,
          column: 27
        },
        end: {
          line: 130,
          column: 68
        }
      },
      "34": {
        start: {
          line: 131,
          column: 29
        },
        end: {
          line: 131,
          column: 73
        }
      },
      "35": {
        start: {
          line: 133,
          column: 34
        },
        end: {
          line: 137,
          column: 28
        }
      },
      "36": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "37": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 69
        }
      },
      "38": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 99
        }
      },
      "39": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 33
        }
      },
      "40": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 71
        }
      },
      "41": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 22
        }
      },
      "42": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "43": {
        start: {
          line: 151,
          column: 34
        },
        end: {
          line: 151,
          column: 184
        }
      },
      "44": {
        start: {
          line: 152,
          column: 27
        },
        end: {
          line: 156,
          column: 72
        }
      },
      "45": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 74
        }
      },
      "46": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 92
        }
      },
      "47": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 85
        }
      },
      "48": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 69
        }
      },
      "49": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "50": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 21
        }
      },
      "51": {
        start: {
          line: 172,
          column: 25
        },
        end: {
          line: 172,
          column: 26
        }
      },
      "52": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "53": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 21
        }
      },
      "54": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "55": {
        start: {
          line: 175,
          column: 21
        },
        end: {
          line: 175,
          column: 22
        }
      },
      "56": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 44
        }
      },
      "57": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 39
        }
      },
      "58": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 39
        }
      },
      "59": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "60": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 21
        }
      },
      "61": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 66
        }
      },
      "62": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "63": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "64": {
        start: {
          line: 193,
          column: 95
        },
        end: {
          line: 193,
          column: 99
        }
      },
      "65": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 97
        }
      },
      "66": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 106
        }
      },
      "67": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 24
        }
      },
      "68": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "69": {
        start: {
          line: 213,
          column: 42
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "70": {
        start: {
          line: 228,
          column: 36
        },
        end: {
          line: 228,
          column: 64
        }
      },
      "71": {
        start: {
          line: 229,
          column: 38
        },
        end: {
          line: 232,
          column: 19
        }
      },
      "72": {
        start: {
          line: 230,
          column: 59
        },
        end: {
          line: 230,
          column: 98
        }
      },
      "73": {
        start: {
          line: 234,
          column: 30
        },
        end: {
          line: 234,
          column: 32
        }
      },
      "74": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "75": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 246,
          column: 17
        }
      },
      "76": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 245,
          column: 21
        }
      },
      "77": {
        start: {
          line: 238,
          column: 37
        },
        end: {
          line: 238,
          column: 67
        }
      },
      "78": {
        start: {
          line: 239,
          column: 24
        },
        end: {
          line: 241,
          column: 27
        }
      },
      "79": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 71
        }
      },
      "80": {
        start: {
          line: 248,
          column: 31
        },
        end: {
          line: 251,
          column: 28
        }
      },
      "81": {
        start: {
          line: 249,
          column: 40
        },
        end: {
          line: 249,
          column: 54
        }
      },
      "82": {
        start: {
          line: 250,
          column: 32
        },
        end: {
          line: 250,
          column: 49
        }
      },
      "83": {
        start: {
          line: 253,
          column: 34
        },
        end: {
          line: 253,
          column: 44
        }
      },
      "84": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 64
        }
      },
      "85": {
        start: {
          line: 255,
          column: 42
        },
        end: {
          line: 255,
          column: 134
        }
      },
      "86": {
        start: {
          line: 255,
          column: 78
        },
        end: {
          line: 255,
          column: 126
        }
      },
      "87": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "88": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 87
        }
      },
      "89": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 38
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 50
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 21
          },
          end: {
            line: 86,
            column: 22
          }
        },
        loc: {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 93,
            column: 13
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 22
          },
          end: {
            line: 94,
            column: 23
          }
        },
        loc: {
          start: {
            line: 94,
            column: 32
          },
          end: {
            line: 94,
            column: 59
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 96,
            column: 56
          },
          end: {
            line: 96,
            column: 57
          }
        },
        loc: {
          start: {
            line: 96,
            column: 63
          },
          end: {
            line: 96,
            column: 81
          }
        },
        line: 96
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 98,
            column: 66
          },
          end: {
            line: 98,
            column: 67
          }
        },
        loc: {
          start: {
            line: 98,
            column: 89
          },
          end: {
            line: 105,
            column: 13
          }
        },
        line: 98
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 41
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 116
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 135,
            column: 21
          },
          end: {
            line: 135,
            column: 22
          }
        },
        loc: {
          start: {
            line: 135,
            column: 30
          },
          end: {
            line: 135,
            column: 54
          }
        },
        line: 135
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 136,
            column: 25
          }
        },
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 136,
            column: 69
          }
        },
        line: 136
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 79
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 149
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 33
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 168
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 75
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 188
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 193,
            column: 88
          },
          end: {
            line: 193,
            column: 89
          }
        },
        loc: {
          start: {
            line: 193,
            column: 95
          },
          end: {
            line: 193,
            column: 99
          }
        },
        line: 193
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 210
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 230,
            column: 47
          },
          end: {
            line: 230,
            column: 48
          }
        },
        loc: {
          start: {
            line: 230,
            column: 59
          },
          end: {
            line: 230,
            column: 98
          }
        },
        line: 230
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 235,
            column: 42
          },
          end: {
            line: 235,
            column: 43
          }
        },
        loc: {
          start: {
            line: 235,
            column: 58
          },
          end: {
            line: 247,
            column: 13
          }
        },
        line: 235
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 239,
            column: 37
          },
          end: {
            line: 239,
            column: 38
          }
        },
        loc: {
          start: {
            line: 239,
            column: 46
          },
          end: {
            line: 241,
            column: 25
          }
        },
        line: 239
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 249,
            column: 21
          },
          end: {
            line: 249,
            column: 22
          }
        },
        loc: {
          start: {
            line: 249,
            column: 40
          },
          end: {
            line: 249,
            column: 54
          }
        },
        line: 249
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 250,
            column: 22
          },
          end: {
            line: 250,
            column: 23
          }
        },
        loc: {
          start: {
            line: 250,
            column: 32
          },
          end: {
            line: 250,
            column: 49
          }
        },
        line: 250
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 255,
            column: 71
          },
          end: {
            line: 255,
            column: 72
          }
        },
        loc: {
          start: {
            line: 255,
            column: 78
          },
          end: {
            line: 255,
            column: 126
          }
        },
        line: 255
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "1": {
        loc: {
          start: {
            line: 158,
            column: 19
          },
          end: {
            line: 158,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 44
          },
          end: {
            line: 158,
            column: 79
          }
        }, {
          start: {
            line: 158,
            column: 82
          },
          end: {
            line: 158,
            column: 91
          }
        }],
        line: 158
      },
      "2": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "3": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "4": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 180,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 180,
            column: 23
          }
        }, {
          start: {
            line: 180,
            column: 27
          },
          end: {
            line: 180,
            column: 38
          }
        }],
        line: 180
      },
      "5": {
        loc: {
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 195,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 195,
            column: 88
          }
        }, {
          start: {
            line: 195,
            column: 92
          },
          end: {
            line: 195,
            column: 93
          }
        }],
        line: 195
      },
      "6": {
        loc: {
          start: {
            line: 196,
            column: 45
          },
          end: {
            line: 196,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 45
          },
          end: {
            line: 196,
            column: 86
          }
        }, {
          start: {
            line: 196,
            column: 90
          },
          end: {
            line: 196,
            column: 92
          }
        }],
        line: 196
      },
      "7": {
        loc: {
          start: {
            line: 229,
            column: 38
          },
          end: {
            line: 232,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 18
          },
          end: {
            line: 231,
            column: 35
          }
        }, {
          start: {
            line: 232,
            column: 18
          },
          end: {
            line: 232,
            column: 19
          }
        }],
        line: 229
      },
      "8": {
        loc: {
          start: {
            line: 230,
            column: 66
          },
          end: {
            line: 230,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 66
          },
          end: {
            line: 230,
            column: 92
          }
        }, {
          start: {
            line: 230,
            column: 96
          },
          end: {
            line: 230,
            column: 97
          }
        }],
        line: 230
      },
      "9": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "10": {
        loc: {
          start: {
            line: 240,
            column: 46
          },
          end: {
            line: 240,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 46
          },
          end: {
            line: 240,
            column: 60
          }
        }, {
          start: {
            line: 240,
            column: 64
          },
          end: {
            line: 240,
            column: 65
          }
        }],
        line: 240
      },
      "11": {
        loc: {
          start: {
            line: 255,
            column: 78
          },
          end: {
            line: 255,
            column: 126
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 255,
            column: 78
          },
          end: {
            line: 255,
            column: 92
          }
        }, {
          start: {
            line: 255,
            column: 96
          },
          end: {
            line: 255,
            column: 126
          }
        }],
        line: 255
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reflectionClassifierService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reflectionClassifierService.ts"],
      sourcesContent: ["import { BaseService } from './base/BaseService';\nimport { EmbeddingService } from './embeddingService';\nimport { generateContent } from './llmService';\n\nexport interface ClassificationResult {\n  expectations: Array<{\n    id: string;\n    confidence: number;\n    rationale: string;\n  }>;\n  selTags: string[];\n}\n\nexport interface ReflectionClassificationRequest {\n  studentId: number;\n  text: string;\n  existingExpectationId?: string; // If already linked to an expectation\n}\n\nexport class ReflectionClassifierService extends BaseService {\n  private embeddingService: EmbeddingService;\n\n  // SEL tags taxonomy - developmentally appropriate for elementary students\n  private readonly selTagsVocabulary = [\n    'perseverance',\n    'collaboration',\n    'curiosity',\n    'creativity',\n    'leadership',\n    'empathy',\n    'self-reflection',\n    'problem-solving',\n    'communication',\n    'responsibility',\n    'risk-taking',\n    'independence',\n    'organization',\n    'goal-setting',\n    'resilience',\n    'cultural-awareness',\n  ];\n\n  constructor() {\n    super('ReflectionClassifierService');\n    this.embeddingService = new EmbeddingService();\n  }\n\n  /**\n   * Classify a student reflection to suggest curriculum outcomes and SEL tags\n   */\n  async classifyReflection(\n    request: ReflectionClassificationRequest,\n  ): Promise<ClassificationResult> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info({ studentId: request.studentId }, 'Starting reflection classification');\n\n      // Get expectation suggestions using embedding similarity\n      const expectationSuggestions = await this.findSimilarExpectations(request.text);\n\n      // Extract SEL tags using LLM\n      const selTags = await this.extractSELTags(request.text);\n\n      const result: ClassificationResult = {\n        expectations: expectationSuggestions,\n        selTags,\n      };\n\n      this.logger.info(\n        {\n          studentId: request.studentId,\n          expectationCount: result.expectations.length,\n          selTagCount: result.selTags.length,\n          duration: Date.now() - startTime,\n        },\n        'Reflection classification completed',\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error(\n        { error, studentId: request.studentId },\n        'Reflection classification failed',\n      );\n      throw new Error('Failed to classify reflection');\n    }\n  }\n\n  /**\n   * Find similar curriculum expectations using embedding similarity\n   */\n  private async findSimilarExpectations(reflectionText: string): Promise<\n    Array<{\n      id: string;\n      confidence: number;\n      rationale: string;\n    }>\n  > {\n    try {\n      // Generate embedding for the reflection text\n      const reflectionEmbedding =\n        await this.embeddingService.generateEmbeddingVector(reflectionText);\n\n      if (!reflectionEmbedding) {\n        this.logger.warn('Could not generate embedding for reflection text');\n        return [];\n      }\n\n      // Find similar expectations using cosine similarity\n      // Note: In a production system, you'd use a vector database like Pinecone or Qdrant\n      // For now, we'll use a simplified approach with the existing embeddings\n      const expectationEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n        include: {\n          expectation: {\n            select: {\n              id: true,\n              code: true,\n              description: true,\n              subject: true,\n              grade: true,\n            },\n          },\n        },\n        take: 50, // Limit for performance\n      });\n\n      const similarities = expectationEmbeddings\n        .map((ee) => {\n          const similarity = this.cosineSimilarity(reflectionEmbedding, ee.embedding as number[]);\n\n          return {\n            id: ee.expectationId,\n            similarity,\n            expectation: ee.expectation,\n          };\n        })\n        .sort((a, b) => b.similarity - a.similarity);\n\n      // Take top 3 with confidence > 0.6\n      const topExpectations = similarities.filter((s) => s.similarity > 0.6).slice(0, 3);\n\n      // Generate rationales for the top expectations\n      const results = await Promise.all(\n        topExpectations.map(async (expectation) => {\n          const rationale = await this.generateExpectationRationale(\n            reflectionText,\n            expectation.expectation.description,\n          );\n\n          return {\n            id: expectation.id,\n            confidence: Math.round(expectation.similarity * 100) / 100,\n            rationale,\n          };\n        }),\n      );\n\n      return results;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to find similar expectations');\n      return [];\n    }\n  }\n\n  /**\n   * Extract SEL (Social Emotional Learning) tags from reflection text\n   */\n  private async extractSELTags(reflectionText: string): Promise<string[]> {\n    try {\n      const systemMessage = `You are an expert in Social Emotional Learning (SEL) for elementary school students. \n      Analyze the following student reflection and identify which SEL competencies are demonstrated.\n      \n      Available SEL tags: ${this.selTagsVocabulary.join(', ')}\n      \n      Rules:\n      - Only use tags from the provided vocabulary\n      - Return 1-4 most relevant tags\n      - Consider both explicit mentions and implicit demonstrations\n      - Focus on what the student actually demonstrated, not what they might learn\n      \n      Respond with ONLY a comma-separated list of tags, no other text.`;\n\n      const prompt = `Student reflection: \"${reflectionText}\"`;\n\n      const response = await generateContent(prompt, systemMessage);\n\n      // Parse and validate the response\n      const extractedTags = response\n        .split(',')\n        .map((tag) => tag.trim().toLowerCase())\n        .filter((tag) => this.selTagsVocabulary.includes(tag))\n        .slice(0, 4); // Limit to 4 tags maximum\n\n      this.logger.debug({ extractedTags, originalResponse: response }, 'SEL tags extracted');\n\n      return extractedTags;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to extract SEL tags');\n      return [];\n    }\n  }\n\n  /**\n   * Generate a rationale for why an expectation matches a reflection\n   */\n  private async generateExpectationRationale(\n    reflectionText: string,\n    expectationDescription: string,\n  ): Promise<string> {\n    try {\n      const systemMessage = `You are an educational expert. Explain in 1-2 concise sentences why a student reflection demonstrates evidence of a specific curriculum expectation.`;\n\n      const prompt = `Student reflection: \"${reflectionText}\"\n      \n      Curriculum expectation: \"${expectationDescription}\"\n      \n      Explain why this reflection provides evidence of the expectation:`;\n\n      const rationale = await generateContent(prompt, systemMessage);\n      return rationale.length > 200 ? rationale.substring(0, 200) + '...' : rationale;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to generate expectation rationale');\n      return 'Demonstrates relevant skills and understanding.';\n    }\n  }\n\n  /**\n   * Calculate cosine similarity between two vectors\n   */\n  private cosineSimilarity(vecA: number[], vecB: number[]): number {\n    if (vecA.length !== vecB.length) {\n      return 0;\n    }\n\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n\n    for (let i = 0; i < vecA.length; i++) {\n      dotProduct += vecA[i] * vecB[i];\n      normA += vecA[i] * vecA[i];\n      normB += vecB[i] * vecB[i];\n    }\n\n    if (normA === 0 || normB === 0) {\n      return 0;\n    }\n\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n  /**\n   * Update a student reflection with classification results\n   */\n  async updateReflectionWithClassification(\n    reflectionId: number,\n    classification: ClassificationResult,\n  ): Promise<void> {\n    try {\n      await this.prisma.studentReflection.update({\n        where: { id: reflectionId },\n        data: {\n          suggestedOutcomeIds: JSON.stringify(classification.expectations.map((e) => e.id)),\n          selTags: JSON.stringify(classification.selTags),\n          classificationConfidence: classification.expectations[0]?.confidence || 0,\n          classificationRationale: classification.expectations[0]?.rationale || '',\n          classifiedAt: new Date(),\n        },\n      });\n\n      this.logger.info({ reflectionId }, 'Reflection updated with classification results');\n    } catch (error) {\n      this.logger.error({ error, reflectionId }, 'Failed to update reflection with classification');\n      throw error;\n    }\n  }\n\n  /**\n   * Get classification statistics for analytics\n   */\n  async getClassificationStats(userId: number): Promise<{\n    totalClassified: number;\n    averageConfidence: number;\n    topSELTags: Array<{ tag: string; count: number }>;\n    recentClassifications: number;\n  }> {\n    try {\n      // Get all student reflections for the user that have been classified\n      const classifiedReflections = await this.prisma.studentReflection.findMany({\n        where: {\n          student: {\n            userId: userId,\n          },\n          classifiedAt: {\n            not: null,\n          },\n        },\n        select: {\n          classificationConfidence: true,\n          selTags: true,\n          classifiedAt: true,\n        },\n      });\n\n      const totalClassified = classifiedReflections.length;\n      const averageConfidence =\n        totalClassified > 0\n          ? classifiedReflections.reduce((acc, r) => acc + (r.classificationConfidence || 0), 0) /\n            totalClassified\n          : 0;\n\n      // Count SEL tags\n      const tagCounts: Record<string, number> = {};\n      classifiedReflections.forEach((reflection) => {\n        if (reflection.selTags) {\n          try {\n            const tags = JSON.parse(reflection.selTags) as string[];\n            tags.forEach((tag) => {\n              tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n            });\n          } catch (error) {\n            // Skip invalid JSON\n          }\n        }\n      });\n\n      const topSELTags = Object.entries(tagCounts)\n        .map(([tag, count]) => ({ tag, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5);\n\n      // Recent classifications (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentClassifications = classifiedReflections.filter(\n        (r) => r.classifiedAt && r.classifiedAt > thirtyDaysAgo,\n      ).length;\n\n      return {\n        totalClassified,\n        averageConfidence: Math.round(averageConfidence * 100) / 100,\n        topSELTags,\n        recentClassifications,\n      };\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get classification stats');\n      throw error;\n    }\n  }\n}\n\nexport default ReflectionClassifierService;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f148c31c5aa5796d9361aa0c4c339ff6373c523d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13fddtuok = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13fddtuok();
import { BaseService } from './base/BaseService';
import { EmbeddingService } from './embeddingService';
import { generateContent } from './llmService';
export class ReflectionClassifierService extends BaseService {
  embeddingService;
  // SEL tags taxonomy - developmentally appropriate for elementary students
  selTagsVocabulary =
  /* istanbul ignore next */
  (cov_13fddtuok().s[0]++, ['perseverance', 'collaboration', 'curiosity', 'creativity', 'leadership', 'empathy', 'self-reflection', 'problem-solving', 'communication', 'responsibility', 'risk-taking', 'independence', 'organization', 'goal-setting', 'resilience', 'cultural-awareness']);
  constructor() {
    /* istanbul ignore next */
    cov_13fddtuok().f[0]++;
    cov_13fddtuok().s[1]++;
    super('ReflectionClassifierService');
    /* istanbul ignore next */
    cov_13fddtuok().s[2]++;
    this.embeddingService = new EmbeddingService();
  }
  /**
   * Classify a student reflection to suggest curriculum outcomes and SEL tags
   */
  async classifyReflection(request) {
    /* istanbul ignore next */
    cov_13fddtuok().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_13fddtuok().s[3]++, Date.now());
    /* istanbul ignore next */
    cov_13fddtuok().s[4]++;
    try {
      /* istanbul ignore next */
      cov_13fddtuok().s[5]++;
      this.logger.info({
        studentId: request.studentId
      }, 'Starting reflection classification');
      // Get expectation suggestions using embedding similarity
      const expectationSuggestions =
      /* istanbul ignore next */
      (cov_13fddtuok().s[6]++, await this.findSimilarExpectations(request.text));
      // Extract SEL tags using LLM
      const selTags =
      /* istanbul ignore next */
      (cov_13fddtuok().s[7]++, await this.extractSELTags(request.text));
      const result =
      /* istanbul ignore next */
      (cov_13fddtuok().s[8]++, {
        expectations: expectationSuggestions,
        selTags
      });
      /* istanbul ignore next */
      cov_13fddtuok().s[9]++;
      this.logger.info({
        studentId: request.studentId,
        expectationCount: result.expectations.length,
        selTagCount: result.selTags.length,
        duration: Date.now() - startTime
      }, 'Reflection classification completed');
      /* istanbul ignore next */
      cov_13fddtuok().s[10]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_13fddtuok().s[11]++;
      this.logger.error({
        error,
        studentId: request.studentId
      }, 'Reflection classification failed');
      /* istanbul ignore next */
      cov_13fddtuok().s[12]++;
      throw new Error('Failed to classify reflection');
    }
  }
  /**
   * Find similar curriculum expectations using embedding similarity
   */
  async findSimilarExpectations(reflectionText) {
    /* istanbul ignore next */
    cov_13fddtuok().f[2]++;
    cov_13fddtuok().s[13]++;
    try {
      // Generate embedding for the reflection text
      const reflectionEmbedding =
      /* istanbul ignore next */
      (cov_13fddtuok().s[14]++, await this.embeddingService.generateEmbeddingVector(reflectionText));
      /* istanbul ignore next */
      cov_13fddtuok().s[15]++;
      if (!reflectionEmbedding) {
        /* istanbul ignore next */
        cov_13fddtuok().b[0][0]++;
        cov_13fddtuok().s[16]++;
        this.logger.warn('Could not generate embedding for reflection text');
        /* istanbul ignore next */
        cov_13fddtuok().s[17]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_13fddtuok().b[0][1]++;
      }
      // Find similar expectations using cosine similarity
      // Note: In a production system, you'd use a vector database like Pinecone or Qdrant
      // For now, we'll use a simplified approach with the existing embeddings
      const expectationEmbeddings =
      /* istanbul ignore next */
      (cov_13fddtuok().s[18]++, await this.prisma.curriculumExpectationEmbedding.findMany({
        include: {
          expectation: {
            select: {
              id: true,
              code: true,
              description: true,
              subject: true,
              grade: true
            }
          }
        },
        take: 50 // Limit for performance
      }));
      const similarities =
      /* istanbul ignore next */
      (cov_13fddtuok().s[19]++, expectationEmbeddings.map(ee => {
        /* istanbul ignore next */
        cov_13fddtuok().f[3]++;
        const similarity =
        /* istanbul ignore next */
        (cov_13fddtuok().s[20]++, this.cosineSimilarity(reflectionEmbedding, ee.embedding));
        /* istanbul ignore next */
        cov_13fddtuok().s[21]++;
        return {
          id: ee.expectationId,
          similarity,
          expectation: ee.expectation
        };
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_13fddtuok().f[4]++;
        cov_13fddtuok().s[22]++;
        return b.similarity - a.similarity;
      }));
      // Take top 3 with confidence > 0.6
      const topExpectations =
      /* istanbul ignore next */
      (cov_13fddtuok().s[23]++, similarities.filter(s => {
        /* istanbul ignore next */
        cov_13fddtuok().f[5]++;
        cov_13fddtuok().s[24]++;
        return s.similarity > 0.6;
      }).slice(0, 3));
      // Generate rationales for the top expectations
      const results =
      /* istanbul ignore next */
      (cov_13fddtuok().s[25]++, await Promise.all(topExpectations.map(async expectation => {
        /* istanbul ignore next */
        cov_13fddtuok().f[6]++;
        const rationale =
        /* istanbul ignore next */
        (cov_13fddtuok().s[26]++, await this.generateExpectationRationale(reflectionText, expectation.expectation.description));
        /* istanbul ignore next */
        cov_13fddtuok().s[27]++;
        return {
          id: expectation.id,
          confidence: Math.round(expectation.similarity * 100) / 100,
          rationale
        };
      })));
      /* istanbul ignore next */
      cov_13fddtuok().s[28]++;
      return results;
    } catch (error) {
      /* istanbul ignore next */
      cov_13fddtuok().s[29]++;
      this.logger.error({
        error
      }, 'Failed to find similar expectations');
      /* istanbul ignore next */
      cov_13fddtuok().s[30]++;
      return [];
    }
  }
  /**
   * Extract SEL (Social Emotional Learning) tags from reflection text
   */
  async extractSELTags(reflectionText) {
    /* istanbul ignore next */
    cov_13fddtuok().f[7]++;
    cov_13fddtuok().s[31]++;
    try {
      const systemMessage =
      /* istanbul ignore next */
      (cov_13fddtuok().s[32]++, `You are an expert in Social Emotional Learning (SEL) for elementary school students. 
      Analyze the following student reflection and identify which SEL competencies are demonstrated.
      
      Available SEL tags: ${this.selTagsVocabulary.join(', ')}
      
      Rules:
      - Only use tags from the provided vocabulary
      - Return 1-4 most relevant tags
      - Consider both explicit mentions and implicit demonstrations
      - Focus on what the student actually demonstrated, not what they might learn
      
      Respond with ONLY a comma-separated list of tags, no other text.`);
      const prompt =
      /* istanbul ignore next */
      (cov_13fddtuok().s[33]++, `Student reflection: "${reflectionText}"`);
      const response =
      /* istanbul ignore next */
      (cov_13fddtuok().s[34]++, await generateContent(prompt, systemMessage));
      // Parse and validate the response
      const extractedTags =
      /* istanbul ignore next */
      (cov_13fddtuok().s[35]++, response.split(',').map(tag => {
        /* istanbul ignore next */
        cov_13fddtuok().f[8]++;
        cov_13fddtuok().s[36]++;
        return tag.trim().toLowerCase();
      }).filter(tag => {
        /* istanbul ignore next */
        cov_13fddtuok().f[9]++;
        cov_13fddtuok().s[37]++;
        return this.selTagsVocabulary.includes(tag);
      }).slice(0, 4)); // Limit to 4 tags maximum
      /* istanbul ignore next */
      cov_13fddtuok().s[38]++;
      this.logger.debug({
        extractedTags,
        originalResponse: response
      }, 'SEL tags extracted');
      /* istanbul ignore next */
      cov_13fddtuok().s[39]++;
      return extractedTags;
    } catch (error) {
      /* istanbul ignore next */
      cov_13fddtuok().s[40]++;
      this.logger.error({
        error
      }, 'Failed to extract SEL tags');
      /* istanbul ignore next */
      cov_13fddtuok().s[41]++;
      return [];
    }
  }
  /**
   * Generate a rationale for why an expectation matches a reflection
   */
  async generateExpectationRationale(reflectionText, expectationDescription) {
    /* istanbul ignore next */
    cov_13fddtuok().f[10]++;
    cov_13fddtuok().s[42]++;
    try {
      const systemMessage =
      /* istanbul ignore next */
      (cov_13fddtuok().s[43]++, `You are an educational expert. Explain in 1-2 concise sentences why a student reflection demonstrates evidence of a specific curriculum expectation.`);
      const prompt =
      /* istanbul ignore next */
      (cov_13fddtuok().s[44]++, `Student reflection: "${reflectionText}"
      
      Curriculum expectation: "${expectationDescription}"
      
      Explain why this reflection provides evidence of the expectation:`);
      const rationale =
      /* istanbul ignore next */
      (cov_13fddtuok().s[45]++, await generateContent(prompt, systemMessage));
      /* istanbul ignore next */
      cov_13fddtuok().s[46]++;
      return rationale.length > 200 ?
      /* istanbul ignore next */
      (cov_13fddtuok().b[1][0]++, rationale.substring(0, 200) + '...') :
      /* istanbul ignore next */
      (cov_13fddtuok().b[1][1]++, rationale);
    } catch (error) {
      /* istanbul ignore next */
      cov_13fddtuok().s[47]++;
      this.logger.error({
        error
      }, 'Failed to generate expectation rationale');
      /* istanbul ignore next */
      cov_13fddtuok().s[48]++;
      return 'Demonstrates relevant skills and understanding.';
    }
  }
  /**
   * Calculate cosine similarity between two vectors
   */
  cosineSimilarity(vecA, vecB) {
    /* istanbul ignore next */
    cov_13fddtuok().f[11]++;
    cov_13fddtuok().s[49]++;
    if (vecA.length !== vecB.length) {
      /* istanbul ignore next */
      cov_13fddtuok().b[2][0]++;
      cov_13fddtuok().s[50]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_13fddtuok().b[2][1]++;
    }
    let dotProduct =
    /* istanbul ignore next */
    (cov_13fddtuok().s[51]++, 0);
    let normA =
    /* istanbul ignore next */
    (cov_13fddtuok().s[52]++, 0);
    let normB =
    /* istanbul ignore next */
    (cov_13fddtuok().s[53]++, 0);
    /* istanbul ignore next */
    cov_13fddtuok().s[54]++;
    for (let i =
    /* istanbul ignore next */
    (cov_13fddtuok().s[55]++, 0); i < vecA.length; i++) {
      /* istanbul ignore next */
      cov_13fddtuok().s[56]++;
      dotProduct += vecA[i] * vecB[i];
      /* istanbul ignore next */
      cov_13fddtuok().s[57]++;
      normA += vecA[i] * vecA[i];
      /* istanbul ignore next */
      cov_13fddtuok().s[58]++;
      normB += vecB[i] * vecB[i];
    }
    /* istanbul ignore next */
    cov_13fddtuok().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_13fddtuok().b[4][0]++, normA === 0) ||
    /* istanbul ignore next */
    (cov_13fddtuok().b[4][1]++, normB === 0)) {
      /* istanbul ignore next */
      cov_13fddtuok().b[3][0]++;
      cov_13fddtuok().s[60]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_13fddtuok().b[3][1]++;
    }
    cov_13fddtuok().s[61]++;
    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
  }
  /**
   * Update a student reflection with classification results
   */
  async updateReflectionWithClassification(reflectionId, classification) {
    /* istanbul ignore next */
    cov_13fddtuok().f[12]++;
    cov_13fddtuok().s[62]++;
    try {
      /* istanbul ignore next */
      cov_13fddtuok().s[63]++;
      await this.prisma.studentReflection.update({
        where: {
          id: reflectionId
        },
        data: {
          suggestedOutcomeIds: JSON.stringify(classification.expectations.map(e => {
            /* istanbul ignore next */
            cov_13fddtuok().f[13]++;
            cov_13fddtuok().s[64]++;
            return e.id;
          })),
          selTags: JSON.stringify(classification.selTags),
          classificationConfidence:
          /* istanbul ignore next */
          (cov_13fddtuok().b[5][0]++, classification.expectations[0]?.confidence) ||
          /* istanbul ignore next */
          (cov_13fddtuok().b[5][1]++, 0),
          classificationRationale:
          /* istanbul ignore next */
          (cov_13fddtuok().b[6][0]++, classification.expectations[0]?.rationale) ||
          /* istanbul ignore next */
          (cov_13fddtuok().b[6][1]++, ''),
          classifiedAt: new Date()
        }
      });
      /* istanbul ignore next */
      cov_13fddtuok().s[65]++;
      this.logger.info({
        reflectionId
      }, 'Reflection updated with classification results');
    } catch (error) {
      /* istanbul ignore next */
      cov_13fddtuok().s[66]++;
      this.logger.error({
        error,
        reflectionId
      }, 'Failed to update reflection with classification');
      /* istanbul ignore next */
      cov_13fddtuok().s[67]++;
      throw error;
    }
  }
  /**
   * Get classification statistics for analytics
   */
  async getClassificationStats(userId) {
    /* istanbul ignore next */
    cov_13fddtuok().f[14]++;
    cov_13fddtuok().s[68]++;
    try {
      // Get all student reflections for the user that have been classified
      const classifiedReflections =
      /* istanbul ignore next */
      (cov_13fddtuok().s[69]++, await this.prisma.studentReflection.findMany({
        where: {
          student: {
            userId: userId
          },
          classifiedAt: {
            not: null
          }
        },
        select: {
          classificationConfidence: true,
          selTags: true,
          classifiedAt: true
        }
      }));
      const totalClassified =
      /* istanbul ignore next */
      (cov_13fddtuok().s[70]++, classifiedReflections.length);
      const averageConfidence =
      /* istanbul ignore next */
      (cov_13fddtuok().s[71]++, totalClassified > 0 ?
      /* istanbul ignore next */
      (cov_13fddtuok().b[7][0]++, classifiedReflections.reduce((acc, r) => {
        /* istanbul ignore next */
        cov_13fddtuok().f[15]++;
        cov_13fddtuok().s[72]++;
        return acc + (
        /* istanbul ignore next */
        (cov_13fddtuok().b[8][0]++, r.classificationConfidence) ||
        /* istanbul ignore next */
        (cov_13fddtuok().b[8][1]++, 0));
      }, 0) / totalClassified) :
      /* istanbul ignore next */
      (cov_13fddtuok().b[7][1]++, 0));
      // Count SEL tags
      const tagCounts =
      /* istanbul ignore next */
      (cov_13fddtuok().s[73]++, {});
      /* istanbul ignore next */
      cov_13fddtuok().s[74]++;
      classifiedReflections.forEach(reflection => {
        /* istanbul ignore next */
        cov_13fddtuok().f[16]++;
        cov_13fddtuok().s[75]++;
        if (reflection.selTags) {
          /* istanbul ignore next */
          cov_13fddtuok().b[9][0]++;
          cov_13fddtuok().s[76]++;
          try {
            const tags =
            /* istanbul ignore next */
            (cov_13fddtuok().s[77]++, JSON.parse(reflection.selTags));
            /* istanbul ignore next */
            cov_13fddtuok().s[78]++;
            tags.forEach(tag => {
              /* istanbul ignore next */
              cov_13fddtuok().f[17]++;
              cov_13fddtuok().s[79]++;
              tagCounts[tag] = (
              /* istanbul ignore next */
              (cov_13fddtuok().b[10][0]++, tagCounts[tag]) ||
              /* istanbul ignore next */
              (cov_13fddtuok().b[10][1]++, 0)) + 1;
            });
          } catch (error) {
            // Skip invalid JSON
          }
        } else
        /* istanbul ignore next */
        {
          cov_13fddtuok().b[9][1]++;
        }
      });
      const topSELTags =
      /* istanbul ignore next */
      (cov_13fddtuok().s[80]++, Object.entries(tagCounts).map(([tag, count]) => {
        /* istanbul ignore next */
        cov_13fddtuok().f[18]++;
        cov_13fddtuok().s[81]++;
        return {
          tag,
          count
        };
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_13fddtuok().f[19]++;
        cov_13fddtuok().s[82]++;
        return b.count - a.count;
      }).slice(0, 5));
      // Recent classifications (last 30 days)
      const thirtyDaysAgo =
      /* istanbul ignore next */
      (cov_13fddtuok().s[83]++, new Date());
      /* istanbul ignore next */
      cov_13fddtuok().s[84]++;
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      const recentClassifications =
      /* istanbul ignore next */
      (cov_13fddtuok().s[85]++, classifiedReflections.filter(r => {
        /* istanbul ignore next */
        cov_13fddtuok().f[20]++;
        cov_13fddtuok().s[86]++;
        return /* istanbul ignore next */(cov_13fddtuok().b[11][0]++, r.classifiedAt) &&
        /* istanbul ignore next */
        (cov_13fddtuok().b[11][1]++, r.classifiedAt > thirtyDaysAgo);
      }).length);
      /* istanbul ignore next */
      cov_13fddtuok().s[87]++;
      return {
        totalClassified,
        averageConfidence: Math.round(averageConfidence * 100) / 100,
        topSELTags,
        recentClassifications
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_13fddtuok().s[88]++;
      this.logger.error({
        error,
        userId
      }, 'Failed to get classification stats');
      /* istanbul ignore next */
      cov_13fddtuok().s[89]++;
      throw error;
    }
  }
}
export default ReflectionClassifierService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,