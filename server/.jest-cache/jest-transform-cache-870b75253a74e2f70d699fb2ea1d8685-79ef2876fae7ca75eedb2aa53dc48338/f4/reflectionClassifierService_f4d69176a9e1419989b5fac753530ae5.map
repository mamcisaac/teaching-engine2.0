{"version":3,"names":["cov_13fddtuok","actualCoverage","BaseService","EmbeddingService","generateContent","ReflectionClassifierService","embeddingService","selTagsVocabulary","s","constructor","f","classifyReflection","request","startTime","Date","now","logger","info","studentId","expectationSuggestions","findSimilarExpectations","text","selTags","extractSELTags","result","expectations","expectationCount","length","selTagCount","duration","error","Error","reflectionText","reflectionEmbedding","generateEmbeddingVector","b","warn","expectationEmbeddings","prisma","curriculumExpectationEmbedding","findMany","include","expectation","select","id","code","description","subject","grade","take","similarities","map","ee","similarity","cosineSimilarity","embedding","expectationId","sort","a","topExpectations","filter","slice","results","Promise","all","rationale","generateExpectationRationale","confidence","Math","round","systemMessage","join","prompt","response","extractedTags","split","tag","trim","toLowerCase","includes","debug","originalResponse","expectationDescription","substring","vecA","vecB","dotProduct","normA","normB","i","sqrt","updateReflectionWithClassification","reflectionId","classification","studentReflection","update","where","data","suggestedOutcomeIds","JSON","stringify","e","classificationConfidence","classificationRationale","classifiedAt","getClassificationStats","userId","classifiedReflections","student","not","totalClassified","averageConfidence","reduce","acc","r","tagCounts","forEach","reflection","tags","parse","topSELTags","Object","entries","count","thirtyDaysAgo","setDate","getDate","recentClassifications"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reflectionClassifierService.ts"],"sourcesContent":["import { BaseService } from './base/BaseService';\nimport { EmbeddingService } from './embeddingService';\nimport { generateContent } from './llmService';\n\nexport interface ClassificationResult {\n  expectations: Array<{\n    id: string;\n    confidence: number;\n    rationale: string;\n  }>;\n  selTags: string[];\n}\n\nexport interface ReflectionClassificationRequest {\n  studentId: number;\n  text: string;\n  existingExpectationId?: string; // If already linked to an expectation\n}\n\nexport class ReflectionClassifierService extends BaseService {\n  private embeddingService: EmbeddingService;\n\n  // SEL tags taxonomy - developmentally appropriate for elementary students\n  private readonly selTagsVocabulary = [\n    'perseverance',\n    'collaboration',\n    'curiosity',\n    'creativity',\n    'leadership',\n    'empathy',\n    'self-reflection',\n    'problem-solving',\n    'communication',\n    'responsibility',\n    'risk-taking',\n    'independence',\n    'organization',\n    'goal-setting',\n    'resilience',\n    'cultural-awareness',\n  ];\n\n  constructor() {\n    super('ReflectionClassifierService');\n    this.embeddingService = new EmbeddingService();\n  }\n\n  /**\n   * Classify a student reflection to suggest curriculum outcomes and SEL tags\n   */\n  async classifyReflection(\n    request: ReflectionClassificationRequest,\n  ): Promise<ClassificationResult> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info({ studentId: request.studentId }, 'Starting reflection classification');\n\n      // Get expectation suggestions using embedding similarity\n      const expectationSuggestions = await this.findSimilarExpectations(request.text);\n\n      // Extract SEL tags using LLM\n      const selTags = await this.extractSELTags(request.text);\n\n      const result: ClassificationResult = {\n        expectations: expectationSuggestions,\n        selTags,\n      };\n\n      this.logger.info(\n        {\n          studentId: request.studentId,\n          expectationCount: result.expectations.length,\n          selTagCount: result.selTags.length,\n          duration: Date.now() - startTime,\n        },\n        'Reflection classification completed',\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error(\n        { error, studentId: request.studentId },\n        'Reflection classification failed',\n      );\n      throw new Error('Failed to classify reflection');\n    }\n  }\n\n  /**\n   * Find similar curriculum expectations using embedding similarity\n   */\n  private async findSimilarExpectations(reflectionText: string): Promise<\n    Array<{\n      id: string;\n      confidence: number;\n      rationale: string;\n    }>\n  > {\n    try {\n      // Generate embedding for the reflection text\n      const reflectionEmbedding =\n        await this.embeddingService.generateEmbeddingVector(reflectionText);\n\n      if (!reflectionEmbedding) {\n        this.logger.warn('Could not generate embedding for reflection text');\n        return [];\n      }\n\n      // Find similar expectations using cosine similarity\n      // Note: In a production system, you'd use a vector database like Pinecone or Qdrant\n      // For now, we'll use a simplified approach with the existing embeddings\n      const expectationEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n        include: {\n          expectation: {\n            select: {\n              id: true,\n              code: true,\n              description: true,\n              subject: true,\n              grade: true,\n            },\n          },\n        },\n        take: 50, // Limit for performance\n      });\n\n      const similarities = expectationEmbeddings\n        .map((ee) => {\n          const similarity = this.cosineSimilarity(reflectionEmbedding, ee.embedding as number[]);\n\n          return {\n            id: ee.expectationId,\n            similarity,\n            expectation: ee.expectation,\n          };\n        })\n        .sort((a, b) => b.similarity - a.similarity);\n\n      // Take top 3 with confidence > 0.6\n      const topExpectations = similarities.filter((s) => s.similarity > 0.6).slice(0, 3);\n\n      // Generate rationales for the top expectations\n      const results = await Promise.all(\n        topExpectations.map(async (expectation) => {\n          const rationale = await this.generateExpectationRationale(\n            reflectionText,\n            expectation.expectation.description,\n          );\n\n          return {\n            id: expectation.id,\n            confidence: Math.round(expectation.similarity * 100) / 100,\n            rationale,\n          };\n        }),\n      );\n\n      return results;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to find similar expectations');\n      return [];\n    }\n  }\n\n  /**\n   * Extract SEL (Social Emotional Learning) tags from reflection text\n   */\n  private async extractSELTags(reflectionText: string): Promise<string[]> {\n    try {\n      const systemMessage = `You are an expert in Social Emotional Learning (SEL) for elementary school students. \n      Analyze the following student reflection and identify which SEL competencies are demonstrated.\n      \n      Available SEL tags: ${this.selTagsVocabulary.join(', ')}\n      \n      Rules:\n      - Only use tags from the provided vocabulary\n      - Return 1-4 most relevant tags\n      - Consider both explicit mentions and implicit demonstrations\n      - Focus on what the student actually demonstrated, not what they might learn\n      \n      Respond with ONLY a comma-separated list of tags, no other text.`;\n\n      const prompt = `Student reflection: \"${reflectionText}\"`;\n\n      const response = await generateContent(prompt, systemMessage);\n\n      // Parse and validate the response\n      const extractedTags = response\n        .split(',')\n        .map((tag) => tag.trim().toLowerCase())\n        .filter((tag) => this.selTagsVocabulary.includes(tag))\n        .slice(0, 4); // Limit to 4 tags maximum\n\n      this.logger.debug({ extractedTags, originalResponse: response }, 'SEL tags extracted');\n\n      return extractedTags;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to extract SEL tags');\n      return [];\n    }\n  }\n\n  /**\n   * Generate a rationale for why an expectation matches a reflection\n   */\n  private async generateExpectationRationale(\n    reflectionText: string,\n    expectationDescription: string,\n  ): Promise<string> {\n    try {\n      const systemMessage = `You are an educational expert. Explain in 1-2 concise sentences why a student reflection demonstrates evidence of a specific curriculum expectation.`;\n\n      const prompt = `Student reflection: \"${reflectionText}\"\n      \n      Curriculum expectation: \"${expectationDescription}\"\n      \n      Explain why this reflection provides evidence of the expectation:`;\n\n      const rationale = await generateContent(prompt, systemMessage);\n      return rationale.length > 200 ? rationale.substring(0, 200) + '...' : rationale;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to generate expectation rationale');\n      return 'Demonstrates relevant skills and understanding.';\n    }\n  }\n\n  /**\n   * Calculate cosine similarity between two vectors\n   */\n  private cosineSimilarity(vecA: number[], vecB: number[]): number {\n    if (vecA.length !== vecB.length) {\n      return 0;\n    }\n\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n\n    for (let i = 0; i < vecA.length; i++) {\n      dotProduct += vecA[i] * vecB[i];\n      normA += vecA[i] * vecA[i];\n      normB += vecB[i] * vecB[i];\n    }\n\n    if (normA === 0 || normB === 0) {\n      return 0;\n    }\n\n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n  /**\n   * Update a student reflection with classification results\n   */\n  async updateReflectionWithClassification(\n    reflectionId: number,\n    classification: ClassificationResult,\n  ): Promise<void> {\n    try {\n      await this.prisma.studentReflection.update({\n        where: { id: reflectionId },\n        data: {\n          suggestedOutcomeIds: JSON.stringify(classification.expectations.map((e) => e.id)),\n          selTags: JSON.stringify(classification.selTags),\n          classificationConfidence: classification.expectations[0]?.confidence || 0,\n          classificationRationale: classification.expectations[0]?.rationale || '',\n          classifiedAt: new Date(),\n        },\n      });\n\n      this.logger.info({ reflectionId }, 'Reflection updated with classification results');\n    } catch (error) {\n      this.logger.error({ error, reflectionId }, 'Failed to update reflection with classification');\n      throw error;\n    }\n  }\n\n  /**\n   * Get classification statistics for analytics\n   */\n  async getClassificationStats(userId: number): Promise<{\n    totalClassified: number;\n    averageConfidence: number;\n    topSELTags: Array<{ tag: string; count: number }>;\n    recentClassifications: number;\n  }> {\n    try {\n      // Get all student reflections for the user that have been classified\n      const classifiedReflections = await this.prisma.studentReflection.findMany({\n        where: {\n          student: {\n            userId: userId,\n          },\n          classifiedAt: {\n            not: null,\n          },\n        },\n        select: {\n          classificationConfidence: true,\n          selTags: true,\n          classifiedAt: true,\n        },\n      });\n\n      const totalClassified = classifiedReflections.length;\n      const averageConfidence =\n        totalClassified > 0\n          ? classifiedReflections.reduce((acc, r) => acc + (r.classificationConfidence || 0), 0) /\n            totalClassified\n          : 0;\n\n      // Count SEL tags\n      const tagCounts: Record<string, number> = {};\n      classifiedReflections.forEach((reflection) => {\n        if (reflection.selTags) {\n          try {\n            const tags = JSON.parse(reflection.selTags) as string[];\n            tags.forEach((tag) => {\n              tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n            });\n          } catch (error) {\n            // Skip invalid JSON\n          }\n        }\n      });\n\n      const topSELTags = Object.entries(tagCounts)\n        .map(([tag, count]) => ({ tag, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5);\n\n      // Recent classifications (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentClassifications = classifiedReflections.filter(\n        (r) => r.classifiedAt && r.classifiedAt > thirtyDaysAgo,\n      ).length;\n\n      return {\n        totalClassified,\n        averageConfidence: Math.round(averageConfidence * 100) / 100,\n        topSELTags,\n        recentClassifications,\n      };\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get classification stats');\n      throw error;\n    }\n  }\n}\n\nexport default ReflectionClassifierService;\n"],"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","ignoreList":[]}