{"version":3,"names":["cov_1zk3pnq4vc","actualCoverage","Router","z","authenticate","axios","router","s","batchRequestSchema","object","requests","array","id","string","method","enum","url","data","unknown","optional","headers","record","max","post","req","res","f","parse","body","concurrencyLimit","results","i","length","batch","slice","batchResults","Promise","all","map","request","baseUrl","protocol","get","fullUrl","startsWith","b","authorization","cookie","response","timeout","validateStatus","status","error","console","Error","message","push","json","responses","timestamp","Date","toISOString","ZodError","details","errors","maxBatchSize"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/batch.ts"],"sourcesContent":["// Batch API endpoint for handling multiple requests in a single HTTP call\n// Reduces network overhead and improves performance\n\nimport { Router, Request, Response } from 'express';\nimport { z } from 'zod';\nimport { authenticate } from '../middleware/auth';\nimport axios from 'axios';\n\nconst router = Router();\n\n// Schema for batch request\nconst batchRequestSchema = z.object({\n  requests: z.array(z.object({\n    id: z.string(),\n    method: z.enum(['GET', 'POST', 'PUT', 'DELETE']),\n    url: z.string(),\n    data: z.unknown().optional(),\n    headers: z.record(z.string()).optional(),\n  })).max(50), // Limit batch size to 50 requests\n});\n\n// Batch endpoint\nrouter.post('/batch', authenticate, async (req: Request, res: Response) => {\n  try {\n    // Validate request\n    const { requests } = batchRequestSchema.parse(req.body);\n    \n    // Process requests in parallel with concurrency limit\n    const concurrencyLimit = 10;\n    const results = [];\n    \n    for (let i = 0; i < requests.length; i += concurrencyLimit) {\n      const batch = requests.slice(i, i + concurrencyLimit);\n      const batchResults = await Promise.all(\n        batch.map(async (request) => {\n          try {\n            // Build full URL\n            const baseUrl = `${req.protocol}://${req.get('host')}`;\n            const fullUrl = request.url.startsWith('http') \n              ? request.url \n              : `${baseUrl}${request.url}`;\n            \n            // Forward authentication\n            const headers = {\n              ...request.headers,\n              'Authorization': req.headers.authorization,\n              'Cookie': req.headers.cookie,\n            };\n            \n            // Make internal request\n            const response = await axios({\n              method: request.method,\n              url: fullUrl,\n              data: request.data,\n              headers,\n              timeout: 30000, // 30 second timeout per request\n              validateStatus: () => true, // Don't throw on any status\n            });\n            \n            return {\n              id: request.id,\n              status: response.status,\n              data: response.data,\n            };\n          } catch (error) {\n            console.error(`Batch request ${request.id} failed:`, error);\n            \n            return {\n              id: request.id,\n              status: 500,\n              data: null,\n              error: error instanceof Error ? error.message : 'Request failed',\n            };\n          }\n        })\n      );\n      \n      results.push(...batchResults);\n    }\n    \n    res.json({\n      responses: results,\n      timestamp: new Date().toISOString(),\n    });\n    \n  } catch (error) {\n    console.error('Batch processing error:', error);\n    \n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: 'Invalid batch request',\n        details: error.errors,\n      });\n    } else {\n      res.status(500).json({\n        error: 'Batch processing failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n});\n\n// Health check endpoint for batch service\nrouter.get('/batch/health', (req: Request, res: Response) => {\n  res.json({\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    maxBatchSize: 50,\n    concurrencyLimit: 10,\n  });\n});\n\nexport default router;"],"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","ignoreList":[]}