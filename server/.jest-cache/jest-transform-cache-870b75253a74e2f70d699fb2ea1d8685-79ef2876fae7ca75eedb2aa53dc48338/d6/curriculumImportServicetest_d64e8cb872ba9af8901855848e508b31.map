{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/curriculumImportService.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/curriculumImportService.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach, jest } from '@jest/globals';\nimport { CurriculumImportService } from '../../src/services/curriculumImportService';\nimport { prisma } from '../../src/prisma';\n\n// Mock Prisma\njest.mock('../../src/prisma', () => ({\n  prisma: {\n    curriculumImport: {\n      create: jest.fn(),\n      update: jest.fn(),\n      findUnique: jest.fn(),\n      findMany: jest.fn(),\n    },\n    curriculumExpectation: {\n      createMany: jest.fn(),\n      findMany: jest.fn(),\n    },\n    expectationCluster: {\n      createMany: jest.fn(),\n    },\n    $transaction: jest.fn(),\n  },\n}));\n\n// Mock external services\njest.mock('../../src/services/embeddingService', () => ({\n  embeddingService: {\n    generateEmbedding: jest.fn().mockResolvedValue([0.1, 0.2, 0.3]),\n    generateBatchEmbeddings: jest.fn().mockResolvedValue([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]),\n  },\n}));\n\njest.mock('../../src/services/clusteringService', () => ({\n  clusteringService: {\n    clusterExpectations: jest.fn().mockResolvedValue([\n      {\n        clusterName: 'Number Operations',\n        clusterType: 'concept',\n        expectationIds: ['exp1', 'exp2'],\n        confidence: 0.85,\n      },\n    ]),\n  },\n}));\n\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\n\ndescribe('CurriculumImportService', () => {\n  let curriculumImportService: CurriculumImportService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    curriculumImportService = new CurriculumImportService();\n  });\n\n  describe('createImport', () => {\n    test('should create new curriculum import', async () => {\n      const userId = 1;\n      const importData = {\n        filename: 'test-curriculum.pdf',\n        originalName: 'Grade 1 Math Curriculum.pdf',\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      const mockImport = {\n        id: 'import1',\n        userId,\n        ...importData,\n        status: 'UPLOADING',\n        createdAt: new Date(),\n      };\n\n      mockPrisma.curriculumImport.create.mockResolvedValue(mockImport as any);\n\n      const result = await curriculumImportService.createImport(userId, importData);\n\n      expect(result).toEqual(mockImport);\n      expect(mockPrisma.curriculumImport.create).toHaveBeenCalledWith({\n        data: {\n          userId,\n          ...importData,\n          status: 'UPLOADING',\n        },\n      });\n    });\n  });\n\n  describe('updateImportStatus', () => {\n    test('should update import status and metadata', async () => {\n      const importId = 'import1';\n      const status = 'PROCESSING';\n      const metadata = { step: 'parsing_pdf' };\n\n      const mockUpdatedImport = {\n        id: importId,\n        status,\n        metadata,\n        updatedAt: new Date(),\n      };\n\n      mockPrisma.curriculumImport.update.mockResolvedValue(mockUpdatedImport as any);\n\n      const result = await curriculumImportService.updateImportStatus(importId, status, metadata);\n\n      expect(result).toEqual(mockUpdatedImport);\n      expect(mockPrisma.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: {\n          status,\n          metadata,\n          updatedAt: expect.any(Date),\n        },\n      });\n    });\n\n    test('should handle processing completion', async () => {\n      const importId = 'import1';\n      const status = 'COMPLETED';\n\n      mockPrisma.curriculumImport.update.mockResolvedValue({\n        id: importId,\n        status,\n        processedAt: expect.any(Date),\n        completedAt: expect.any(Date),\n      } as any);\n\n      await curriculumImportService.updateImportStatus(importId, status);\n\n      expect(mockPrisma.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: {\n          status,\n          processedAt: expect.any(Date),\n          completedAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        },\n      });\n    });\n  });\n\n  describe('parseTextContent', () => {\n    test('should parse curriculum text into structured expectations', async () => {\n      const importId = 'import1';\n      const rawText = `\n        A1.1 - Students will demonstrate understanding of numbers 1-10\n        A1.2 - Students will count objects accurately up to 20\n        B2.1 - Students will identify and extend simple patterns\n      `;\n\n      const mockImport = {\n        id: importId,\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n      mockPrisma.curriculumImport.update.mockResolvedValue({} as any);\n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        return await callback(mockPrisma);\n      });\n      mockPrisma.curriculumExpectation.createMany.mockResolvedValue({ count: 3 } as any);\n\n      const result = await curriculumImportService.parseTextContent(importId, rawText);\n\n      expect(result.processedCount).toBe(3);\n      expect(result.expectations).toHaveLength(3);\n      expect(result.expectations[0].code).toBe('A1.1');\n      expect(result.expectations[0].description).toBe('Students will demonstrate understanding of numbers 1-10');\n      expect(result.expectations[1].code).toBe('A1.2');\n      expect(result.expectations[2].code).toBe('B2.1');\n    });\n\n    test('should handle malformed text gracefully', async () => {\n      const importId = 'import1';\n      const rawText = `\n        Invalid line without proper format\n        A1.1 - Valid expectation\n        Another invalid line\n      `;\n\n      const mockImport = {\n        id: importId,\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n      mockPrisma.curriculumImport.update.mockResolvedValue({} as any);\n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        return await callback(mockPrisma);\n      });\n      mockPrisma.curriculumExpectation.createMany.mockResolvedValue({ count: 1 } as any);\n\n      const result = await curriculumImportService.parseTextContent(importId, rawText);\n\n      expect(result.processedCount).toBe(1);\n      expect(result.expectations).toHaveLength(1);\n      expect(result.expectations[0].code).toBe('A1.1');\n      expect(result.errors).toHaveLength(2); // Two invalid lines\n    });\n  });\n\n  describe('processCSVContent', () => {\n    test('should parse CSV curriculum data', async () => {\n      const importId = 'import1';\n      const csvContent = `code,description,strand,substrand,grade,subject\nA1.1,\"Students will demonstrate understanding of numbers 1-10\",\"Number Sense\",\"Counting\",1,\"Mathematics\"\nA1.2,\"Students will count objects accurately up to 20\",\"Number Sense\",\"Counting\",1,\"Mathematics\"\nB2.1,\"Students will identify and extend simple patterns\",\"Patterns\",\"Simple Patterns\",1,\"Mathematics\"`;\n\n      const mockImport = {\n        id: importId,\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n      mockPrisma.curriculumImport.update.mockResolvedValue({} as any);\n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        return await callback(mockPrisma);\n      });\n      mockPrisma.curriculumExpectation.createMany.mockResolvedValue({ count: 3 } as any);\n\n      const result = await curriculumImportService.processCSVContent(importId, csvContent);\n\n      expect(result.processedCount).toBe(3);\n      expect(result.expectations).toHaveLength(3);\n      expect(result.expectations[0].strand).toBe('Number Sense');\n      expect(result.expectations[0].substrand).toBe('Counting');\n      expect(result.expectations[2].strand).toBe('Patterns');\n    });\n\n    test('should handle missing required columns', async () => {\n      const importId = 'import1';\n      const csvContent = `description,strand\n\"Students will demonstrate understanding of numbers 1-10\",\"Number Sense\"`;\n\n      const mockImport = {\n        id: importId,\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n\n      await expect(\n        curriculumImportService.processCSVContent(importId, csvContent)\n      ).rejects.toThrow('Missing required columns');\n    });\n  });\n\n  describe('generateClusters', () => {\n    test('should create expectation clusters using AI', async () => {\n      const importId = 'import1';\n\n      const mockExpectations = [\n        {\n          id: 'exp1',\n          code: 'A1.1',\n          description: 'Number recognition',\n          strand: 'Number Sense',\n        },\n        {\n          id: 'exp2',\n          code: 'A1.2',\n          description: 'Counting objects',\n          strand: 'Number Sense',\n        },\n      ];\n\n      mockPrisma.curriculumExpectation.findMany.mockResolvedValue(mockExpectations as any);\n      mockPrisma.expectationCluster.createMany.mockResolvedValue({ count: 1 } as any);\n      mockPrisma.curriculumImport.update.mockResolvedValue({} as any);\n\n      const result = await curriculumImportService.generateClusters(importId);\n\n      expect(result.clustersCreated).toBe(1);\n      expect(result.clusters).toHaveLength(1);\n      expect(result.clusters[0].clusterName).toBe('Number Operations');\n      expect(result.clusters[0].expectationIds).toEqual(['exp1', 'exp2']);\n    });\n\n    test('should handle empty expectations', async () => {\n      const importId = 'import1';\n\n      mockPrisma.curriculumExpectation.findMany.mockResolvedValue([]);\n\n      const result = await curriculumImportService.generateClusters(importId);\n\n      expect(result.clustersCreated).toBe(0);\n      expect(result.clusters).toHaveLength(0);\n    });\n  });\n\n  describe('getImportProgress', () => {\n    test('should return detailed import progress', async () => {\n      const importId = 'import1';\n\n      const mockImport = {\n        id: importId,\n        status: 'PROCESSING',\n        totalOutcomes: 100,\n        processedOutcomes: 75,\n        errorLog: [\n          { line: 10, error: 'Invalid format' },\n          { line: 25, error: 'Missing code' },\n        ],\n        createdAt: new Date('2024-01-01'),\n        updatedAt: new Date('2024-01-02'),\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n\n      const result = await curriculumImportService.getImportProgress(importId);\n\n      expect(result).toEqual({\n        id: importId,\n        status: 'PROCESSING',\n        progress: 75, // processedOutcomes / totalOutcomes * 100\n        totalOutcomes: 100,\n        processedOutcomes: 75,\n        errorCount: 2,\n        errors: mockImport.errorLog,\n        createdAt: mockImport.createdAt,\n        updatedAt: mockImport.updatedAt,\n      });\n    });\n\n    test('should handle import not found', async () => {\n      const importId = 'nonexistent';\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(null);\n\n      await expect(\n        curriculumImportService.getImportProgress(importId)\n      ).rejects.toThrow('Import not found');\n    });\n  });\n\n  describe('getUserImports', () => {\n    test('should return user imports with statistics', async () => {\n      const userId = 1;\n\n      const mockImports = [\n        {\n          id: 'import1',\n          filename: 'grade1-math.pdf',\n          status: 'COMPLETED',\n          grade: 1,\n          subject: 'Mathematics',\n          totalOutcomes: 50,\n          processedOutcomes: 50,\n          createdAt: new Date('2024-01-01'),\n          curriculumExpectations: [{ id: 'exp1' }, { id: 'exp2' }],\n          clusters: [{ id: 'cluster1' }],\n        },\n        {\n          id: 'import2',\n          filename: 'grade1-science.pdf',\n          status: 'PROCESSING',\n          grade: 1,\n          subject: 'Science',\n          totalOutcomes: 30,\n          processedOutcomes: 20,\n          createdAt: new Date('2024-01-02'),\n          curriculumExpectations: [{ id: 'exp3' }],\n          clusters: [],\n        },\n      ];\n\n      mockPrisma.curriculumImport.findMany.mockResolvedValue(mockImports as any);\n\n      const result = await curriculumImportService.getUserImports(userId);\n\n      expect(result).toHaveLength(2);\n      expect(result[0].id).toBe('import1');\n      expect(result[0].expectationCount).toBe(2);\n      expect(result[0].clusterCount).toBe(1);\n      expect(result[1].id).toBe('import2');\n      expect(result[1].expectationCount).toBe(1);\n      expect(result[1].clusterCount).toBe(0);\n    });\n  });\n\n  describe('validateImportData', () => {\n    test('should validate required fields', () => {\n      const validData = {\n        filename: 'test.pdf',\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      expect(() => curriculumImportService.validateImportData(validData)).not.toThrow();\n    });\n\n    test('should reject invalid grade', () => {\n      const invalidData = {\n        filename: 'test.pdf',\n        grade: 15, // Invalid grade\n        subject: 'Mathematics',\n      };\n\n      expect(() => curriculumImportService.validateImportData(invalidData))\n        .toThrow('Grade must be between 1 and 12');\n    });\n\n    test('should reject missing filename', () => {\n      const invalidData = {\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      expect(() => curriculumImportService.validateImportData(invalidData))\n        .toThrow('Filename is required');\n    });\n\n    test('should reject unsupported file type', () => {\n      const invalidData = {\n        filename: 'test.txt', // Unsupported extension\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      expect(() => curriculumImportService.validateImportData(invalidData))\n        .toThrow('Unsupported file type');\n    });\n  });\n\n  describe('error handling', () => {\n    test('should handle database errors during import creation', async () => {\n      const userId = 1;\n      const importData = {\n        filename: 'test.pdf',\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.create.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      await expect(\n        curriculumImportService.createImport(userId, importData)\n      ).rejects.toThrow('Database connection failed');\n    });\n\n    test('should handle transaction failures during parsing', async () => {\n      const importId = 'import1';\n      const rawText = 'A1.1 - Test expectation';\n\n      const mockImport = {\n        id: importId,\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n      mockPrisma.$transaction.mockRejectedValue(new Error('Transaction failed'));\n\n      await expect(\n        curriculumImportService.parseTextContent(importId, rawText)\n      ).rejects.toThrow('Transaction failed');\n    });\n\n    test('should update import status to FAILED on error', async () => {\n      const importId = 'import1';\n      const errorMessage = 'Processing failed';\n\n      await curriculumImportService.markImportAsFailed(importId, errorMessage);\n\n      expect(mockPrisma.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: {\n          status: 'FAILED',\n          errorMessage,\n          updatedAt: expect.any(Date),\n        },\n      });\n    });\n  });\n\n  describe('performance optimization', () => {\n    test('should batch process large datasets', async () => {\n      const importId = 'import1';\n      const largeText = Array.from({ length: 1000 }, (_, i) => \n        `A${i}.1 - Test expectation ${i}`\n      ).join('\\n');\n\n      const mockImport = {\n        id: importId,\n        grade: 1,\n        subject: 'Mathematics',\n      };\n\n      mockPrisma.curriculumImport.findUnique.mockResolvedValue(mockImport as any);\n      mockPrisma.curriculumImport.update.mockResolvedValue({} as any);\n      mockPrisma.$transaction.mockImplementation(async (callback) => {\n        return await callback(mockPrisma);\n      });\n      mockPrisma.curriculumExpectation.createMany.mockResolvedValue({ count: 1000 } as any);\n\n      const result = await curriculumImportService.parseTextContent(importId, largeText);\n\n      expect(result.processedCount).toBe(1000);\n      expect(result.expectations).toHaveLength(1000);\n      \n      // Should have called createMany to batch insert\n      expect(mockPrisma.curriculumExpectation.createMany).toHaveBeenCalled();\n    });\n  });\n});"],"version":3}