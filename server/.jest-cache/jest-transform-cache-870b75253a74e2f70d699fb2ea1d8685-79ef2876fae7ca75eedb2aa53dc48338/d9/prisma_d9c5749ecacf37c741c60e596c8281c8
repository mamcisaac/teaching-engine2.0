bae03afdb54aed7038525d348dcf7d88
/* istanbul ignore next */
function cov_20g0ieqrgz() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/prisma.ts";
  var hash = "3fe2ad1a5258a13e65ed6c16d23213290a741d5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/prisma.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 87
        }
      },
      "2": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 13,
          column: 5
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 17,
          column: 12
        }
      },
      "6": {
        start: {
          line: 20,
          column: 22
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "7": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 28
        }
      },
      "9": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 30
        }
      },
      "11": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 32,
          column: 1
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 10,
            column: 19
          }
        },
        loc: {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 57
          }
        }, {
          start: {
            line: 8,
            column: 61
          },
          end: {
            line: 8,
            column: 87
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 11,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 11,
            column: 25
          }
        }, {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 11,
            column: 61
          }
        }],
        line: 11
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 17,
            column: 10
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 34
          }
        }, {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 10
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 16,
            column: 17
          },
          end: {
            line: 16,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 58
          },
          end: {
            line: 16,
            column: 84
          }
        }, {
          start: {
            line: 16,
            column: 87
          },
          end: {
            line: 16,
            column: 96
          }
        }],
        line: 16
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 0
          },
          end: {
            line: 32,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 0
          },
          end: {
            line: 32,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 41
          }
        }, {
          start: {
            line: 30,
            column: 45
          },
          end: {
            line: 30,
            column: 63
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/prisma.ts",
      mappings: "AAAA,mCAAmC;AACnC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAEzD,0EAA0E;AAC1E,cAAc,2BAA2B,CAAC;AAE1C,6CAA6C;AAC7C,MAAM,eAAe,GAAG,UAGvB,CAAC;AAEF,wDAAwD;AACxD,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;AAExF,8DAA8D;AAC9D,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,IAAI,iBAAiB,IAAI,eAAe,CAAC,gBAAgB,EAAE,CAAC;QAC1D,OAAO,eAAe,CAAC,gBAAgB,CAAC;IAC1C,CAAC;IACD,OAAO,CACL,eAAe,CAAC,MAAM;QACtB,IAAI,YAAY,CAAC;YACf,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;SACrF,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,kDAAkD;AAClD,MAAM,CAAC,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,EAAuC,EAAE;IACvE,GAAG,CAAC,MAAM,EAAE,IAAI;QACd,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,OAAO,MAAM,CAAC,IAA+C,CAAC,CAAC;IACjE,CAAC;IACD,GAAG,CAAC,MAAM,EAAE,IAAI;QACd,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,OAAO,IAAI,IAAI,MAAM,CAAC;IACxB,CAAC;CACF,CAAC,CAAC;AAEH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAChE,eAAe,CAAC,MAAM,GAAG,SAAS,EAAE,CAAC;AACvC,CAAC;AAED,yBAAyB;AACzB,OAAO,EAAE,YAAY,EAAE,CAAC",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/prisma.ts"],
      sourcesContent: ["// Import from the database package\nimport { PrismaClient } from '@teaching-engine/database';\n\n// Re-export everything from database package (including Prisma namespace)\nexport * from '@teaching-engine/database';\n\n// Create singleton instance for server usage\nconst globalForPrisma = globalThis as unknown as {\n  prisma: InstanceType<typeof PrismaClient> | undefined;\n  testPrismaClient: InstanceType<typeof PrismaClient> | undefined;\n};\n\n// In test environment, use the test client if available\nconst isTestEnvironment = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID;\n\n// Create a getter that always returns the current test client\nconst getPrisma = () => {\n  if (isTestEnvironment && globalForPrisma.testPrismaClient) {\n    return globalForPrisma.testPrismaClient;\n  }\n  return (\n    globalForPrisma.prisma ??\n    new PrismaClient({\n      log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n    })\n  );\n};\n\n// Create a proxy to always use the current client\nexport const prisma = new Proxy({} as InstanceType<typeof PrismaClient>, {\n  get(target, prop) {\n    const client = getPrisma();\n    return client[prop as keyof InstanceType<typeof PrismaClient>];\n  },\n  has(target, prop) {\n    const client = getPrisma();\n    return prop in client;\n  },\n});\n\nif (process.env.NODE_ENV !== 'production' && !isTestEnvironment) {\n  globalForPrisma.prisma = getPrisma();\n}\n\n// Re-export PrismaClient\nexport { PrismaClient };\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3fe2ad1a5258a13e65ed6c16d23213290a741d5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20g0ieqrgz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20g0ieqrgz();
// Import from the database package
import { PrismaClient } from '@teaching-engine/database';
// Re-export everything from database package (including Prisma namespace)
export * from '@teaching-engine/database';
// Create singleton instance for server usage
const globalForPrisma =
/* istanbul ignore next */
(cov_20g0ieqrgz().s[0]++, globalThis);
// In test environment, use the test client if available
const isTestEnvironment =
/* istanbul ignore next */
(cov_20g0ieqrgz().s[1]++,
/* istanbul ignore next */
(cov_20g0ieqrgz().b[0][0]++, process.env.NODE_ENV === 'test') ||
/* istanbul ignore next */
(cov_20g0ieqrgz().b[0][1]++, process.env.JEST_WORKER_ID));
// Create a getter that always returns the current test client
/* istanbul ignore next */
cov_20g0ieqrgz().s[2]++;
const getPrisma = () => {
  /* istanbul ignore next */
  cov_20g0ieqrgz().f[0]++;
  cov_20g0ieqrgz().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_20g0ieqrgz().b[2][0]++, isTestEnvironment) &&
  /* istanbul ignore next */
  (cov_20g0ieqrgz().b[2][1]++, globalForPrisma.testPrismaClient)) {
    /* istanbul ignore next */
    cov_20g0ieqrgz().b[1][0]++;
    cov_20g0ieqrgz().s[4]++;
    return globalForPrisma.testPrismaClient;
  } else
  /* istanbul ignore next */
  {
    cov_20g0ieqrgz().b[1][1]++;
  }
  cov_20g0ieqrgz().s[5]++;
  return /* istanbul ignore next */(cov_20g0ieqrgz().b[3][0]++, globalForPrisma.prisma) ??
  /* istanbul ignore next */
  (cov_20g0ieqrgz().b[3][1]++, new PrismaClient({
    log: process.env.NODE_ENV === 'development' ?
    /* istanbul ignore next */
    (cov_20g0ieqrgz().b[4][0]++, ['query', 'error', 'warn']) :
    /* istanbul ignore next */
    (cov_20g0ieqrgz().b[4][1]++, ['error'])
  }));
};
// Create a proxy to always use the current client
export const prisma =
/* istanbul ignore next */
(cov_20g0ieqrgz().s[6]++, new Proxy({}, {
  get(target, prop) {
    /* istanbul ignore next */
    cov_20g0ieqrgz().f[1]++;
    const client =
    /* istanbul ignore next */
    (cov_20g0ieqrgz().s[7]++, getPrisma());
    /* istanbul ignore next */
    cov_20g0ieqrgz().s[8]++;
    return client[prop];
  },
  has(target, prop) {
    /* istanbul ignore next */
    cov_20g0ieqrgz().f[2]++;
    const client =
    /* istanbul ignore next */
    (cov_20g0ieqrgz().s[9]++, getPrisma());
    /* istanbul ignore next */
    cov_20g0ieqrgz().s[10]++;
    return prop in client;
  }
}));
/* istanbul ignore next */
cov_20g0ieqrgz().s[11]++;
if (
/* istanbul ignore next */
(cov_20g0ieqrgz().b[6][0]++, process.env.NODE_ENV !== 'production') &&
/* istanbul ignore next */
(cov_20g0ieqrgz().b[6][1]++, !isTestEnvironment)) {
  /* istanbul ignore next */
  cov_20g0ieqrgz().b[5][0]++;
  cov_20g0ieqrgz().s[12]++;
  globalForPrisma.prisma = getPrisma();
} else
/* istanbul ignore next */
{
  cov_20g0ieqrgz().b[5][1]++;
}
// Re-export PrismaClient
export { PrismaClient };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjBnMGllcXJneiIsImFjdHVhbENvdmVyYWdlIiwiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwicyIsImdsb2JhbFRoaXMiLCJpc1Rlc3RFbnZpcm9ubWVudCIsImIiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJKRVNUX1dPUktFUl9JRCIsImdldFByaXNtYSIsImYiLCJ0ZXN0UHJpc21hQ2xpZW50IiwicHJpc21hIiwibG9nIiwiUHJveHkiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wIiwiY2xpZW50IiwiaGFzIl0sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9wcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IGZyb20gdGhlIGRhdGFiYXNlIHBhY2thZ2VcbmltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0B0ZWFjaGluZy1lbmdpbmUvZGF0YWJhc2UnO1xuXG4vLyBSZS1leHBvcnQgZXZlcnl0aGluZyBmcm9tIGRhdGFiYXNlIHBhY2thZ2UgKGluY2x1ZGluZyBQcmlzbWEgbmFtZXNwYWNlKVxuZXhwb3J0ICogZnJvbSAnQHRlYWNoaW5nLWVuZ2luZS9kYXRhYmFzZSc7XG5cbi8vIENyZWF0ZSBzaW5nbGV0b24gaW5zdGFuY2UgZm9yIHNlcnZlciB1c2FnZVxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBJbnN0YW5jZVR5cGU8dHlwZW9mIFByaXNtYUNsaWVudD4gfCB1bmRlZmluZWQ7XG4gIHRlc3RQcmlzbWFDbGllbnQ6IEluc3RhbmNlVHlwZTx0eXBlb2YgUHJpc21hQ2xpZW50PiB8IHVuZGVmaW5lZDtcbn07XG5cbi8vIEluIHRlc3QgZW52aXJvbm1lbnQsIHVzZSB0aGUgdGVzdCBjbGllbnQgaWYgYXZhaWxhYmxlXG5jb25zdCBpc1Rlc3RFbnZpcm9ubWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgfHwgcHJvY2Vzcy5lbnYuSkVTVF9XT1JLRVJfSUQ7XG5cbi8vIENyZWF0ZSBhIGdldHRlciB0aGF0IGFsd2F5cyByZXR1cm5zIHRoZSBjdXJyZW50IHRlc3QgY2xpZW50XG5jb25zdCBnZXRQcmlzbWEgPSAoKSA9PiB7XG4gIGlmIChpc1Rlc3RFbnZpcm9ubWVudCAmJiBnbG9iYWxGb3JQcmlzbWEudGVzdFByaXNtYUNsaWVudCkge1xuICAgIHJldHVybiBnbG9iYWxGb3JQcmlzbWEudGVzdFByaXNtYUNsaWVudDtcbiAgfVxuICByZXR1cm4gKFxuICAgIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz9cbiAgICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICAgIGxvZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBbJ3F1ZXJ5JywgJ2Vycm9yJywgJ3dhcm4nXSA6IFsnZXJyb3InXSxcbiAgICB9KVxuICApO1xufTtcblxuLy8gQ3JlYXRlIGEgcHJveHkgdG8gYWx3YXlzIHVzZSB0aGUgY3VycmVudCBjbGllbnRcbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBuZXcgUHJveHkoe30gYXMgSW5zdGFuY2VUeXBlPHR5cGVvZiBQcmlzbWFDbGllbnQ+LCB7XG4gIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRQcmlzbWEoKTtcbiAgICByZXR1cm4gY2xpZW50W3Byb3AgYXMga2V5b2YgSW5zdGFuY2VUeXBlPHR5cGVvZiBQcmlzbWFDbGllbnQ+XTtcbiAgfSxcbiAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgIGNvbnN0IGNsaWVudCA9IGdldFByaXNtYSgpO1xuICAgIHJldHVybiBwcm9wIGluIGNsaWVudDtcbiAgfSxcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNUZXN0RW52aXJvbm1lbnQpIHtcbiAgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IGdldFByaXNtYSgpO1xufVxuXG4vLyBSZS1leHBvcnQgUHJpc21hQ2xpZW50XG5leHBvcnQgeyBQcmlzbWFDbGllbnQgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXVCTTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBdkJOO0FBQ0EsU0FBU0UsWUFBWSxRQUFRLDJCQUEyQjtBQUV4RDtBQUNBLGNBQWMsMkJBQTJCO0FBRXpDO0FBQ0EsTUFBTUMsZUFBZTtBQUFBO0FBQUEsQ0FBQUgsY0FBQSxHQUFBSSxDQUFBLE9BQUdDLFVBR3ZCO0FBRUQ7QUFDQSxNQUFNQyxpQkFBaUI7QUFBQTtBQUFBLENBQUFOLGNBQUEsR0FBQUksQ0FBQTtBQUFHO0FBQUEsQ0FBQUosY0FBQSxHQUFBTyxDQUFBLFVBQUFDLE9BQU8sQ0FB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