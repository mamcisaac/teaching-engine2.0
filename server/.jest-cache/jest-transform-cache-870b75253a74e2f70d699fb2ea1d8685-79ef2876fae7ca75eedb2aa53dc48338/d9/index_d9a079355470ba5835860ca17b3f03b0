93db3267541f980e59969bcdb73f07b0
import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';
import jwt from 'jsonwebtoken';
import cookieParser from 'cookie-parser';
import bcrypt from 'bcryptjs';
import debug from 'debug';
import { config } from 'dotenv';
// Load environment variables
config();
// Create debug logger
const log = debug('server:main');
const error = debug('server:error');
// Get directory name in ES module
const __filename_index = fileURLToPath(import.meta.url);
const __dirname_index = path.dirname(__filename_index);
// ETFO-aligned route imports
import curriculumImportRoutes from './routes/curriculumImport';
import curriculumDiscoveryRoutes from './routes/curriculum-discovery';
import discoverySchedulerRoutes from './routes/discovery-scheduler';
import studentRoutes from './routes/student';
import parentSummaryRoutes from './routes/parentSummary';
import newsletterRoutes from './routes/newsletters';
import curriculumExpectationRoutes from './routes/curriculum-expectations';
import longRangePlanRoutes from './routes/long-range-plans';
import unitPlanRoutes from './routes/unit-plans';
import etfoLessonPlanRoutes from './routes/etfo-lesson-plans';
import daybookEntryRoutes from './routes/daybook-entries';
import etfoProgressRoutes from './routes/etfo-progress';
import plannerStateRoutes from './routes/planner-state';
import workflowStateRoutes from './routes/workflow-state';
import aiPlanningRoutes from './routes/ai-planning';
import activityDiscoveryRoutes from './routes/activity-discovery';
import activityCollectionsRoutes from './routes/activity-collections';
import aiActivityGenerationRoutes from './routes/ai-activity-generation';
import batchProcessingRoutes from './routes/batch-processing';
import templateRoutes from './routes/templates';
import calendarEventRoutes from './routes/calendar-events';
import recentPlansRoutes from './routes/recent-plans';
import batchApiRoutes from './routes/batch';
import subPlanRoutes from './routes/sub-plan';
import { authRoutes } from './routes/auth';
import { teamRoutes } from './routes/teams';
import { sharingRoutes } from './routes/sharing';
import { commentRoutes } from './routes/comments';
import { initializeServices, shutdownServices, getServiceHealth, } from './services/initializeServices';
import logger from './logger';
import { prisma } from './prisma';
import { rateLimiters } from './middleware/rateLimiter';
import { errorHandler, notFoundHandler } from './middleware/errorHandler';
import { sanitizeInput } from './middleware/inputSanitization';
import performanceMonitoring, { performanceMonitor } from './middleware/performanceMonitoring';
// Initialize Express app
log('Initializing Express application...');
const app = express();
// Security middleware
log('Configuring security headers...');
app.use((req, res, next) => {
    // Content Security Policy
    res.setHeader('Content-Security-Policy', [
        "default-src 'self'",
        "script-src 'self' 'unsafe-inline' 'unsafe-eval'", // Allow inline scripts for dev
        "style-src 'self' 'unsafe-inline'", // Allow inline styles for CSS-in-JS
        "img-src 'self' data: https:",
        "font-src 'self' data:",
        "connect-src 'self'",
        "frame-src 'none'",
        "object-src 'none'",
        "base-uri 'self'",
        "form-action 'self'",
        'upgrade-insecure-requests',
    ].join('; '));
    // Additional security headers
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');
    next();
});
// Configure CORS with credentials support
log('Configuring CORS...');
// CORS options
const corsOptions = {
    origin: (origin, callback) => {
        // In production, replace with your actual domain
        const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || [
            'http://localhost:5173',
            'http://localhost:3000',
            'http://127.0.0.1:5173',
            'http://127.0.0.1:3000',
        ];
        if (!origin || allowedOrigins.includes(origin)) {
            callback(null, true);
        }
        else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    exposedHeaders: ['Content-Range', 'X-Total-Count'],
};
// Handle preflight requests
log('Configuring CORS preflight...');
app.options('*', cors(corsOptions));
// Apply CORS to all routes
log('Applying CORS and JSON middleware...');
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' })); // Set reasonable payload limit
app.use(cookieParser());
// Apply input sanitization middleware
log('Applying input sanitization...');
app.use(sanitizeInput);
// Apply performance monitoring
log('Applying performance monitoring...');
app.use(performanceMonitoring);
// Health check endpoints
app.get('/health', (_req, res) => {
    res.status(200).json({ status: 'ok' });
});
app.get('/api/health', (_req, res) => {
    const healthStatus = performanceMonitor.getHealthStatus();
    res.status(healthStatus.healthy ? 200 : 503).json({
        status: healthStatus.healthy ? 'ok' : 'degraded',
    });
});
// Detailed health endpoint for debugging  
app.get('/api/health/detailed', (_req, res) => {
    const healthStatus = performanceMonitor.getHealthStatus();
    res.status(healthStatus.healthy ? 200 : 503).json({
        status: healthStatus.healthy ? 'ok' : 'degraded',
        ...healthStatus,
    });
});
// Performance metrics endpoint (admin only)
app.get('/api/metrics', (req, res) => {
    // Simple admin token check
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (token !== process.env.WIZARD_TOKEN) {
        return res.status(403).json({ error: 'Admin access required' });
    }
    const summary = performanceMonitor.getPerformanceSummary();
    const slowestEndpoints = performanceMonitor.getSlowestEndpoints();
    res.json({
        summary,
        slowestEndpoints,
        timestamp: new Date().toISOString(),
    });
});
// Middleware to verify JWT token with enhanced security
const authenticateToken = (req, res, next) => {
    // First try to get token from httpOnly cookie
    let token = req.cookies?.authToken;
    // Fallback to Authorization header for backward compatibility
    if (!token) {
        const authHeader = req.headers['authorization'];
        if (authHeader && authHeader.startsWith('Bearer ')) {
            token = authHeader.split(' ')[1];
        }
    }
    if (!token) {
        return res.status(401).json({ error: 'Authentication required' });
    }
    if (!token || token.length > 1000) {
        // Prevent extremely long tokens
        return res.status(401).json({ error: 'Invalid token format' });
    }
    try {
        const secret = process.env.JWT_SECRET;
        if (!secret) {
            logger.error('CRITICAL: JWT_SECRET environment variable not configured');
            return res.status(500).json({ error: 'Server configuration error' });
        }
        const decoded = jwt.verify(token, secret, {
            algorithms: ['HS256'], // Explicitly specify allowed algorithms
            maxAge: '7d', // Maximum token age
        });
        if (!decoded?.userId || !decoded?.email || !decoded?.iat) {
            return res.status(403).json({ error: 'Invalid token payload' });
        }
        // Check token age (extra protection)
        const now = Math.floor(Date.now() / 1000);
        const maxAge = 7 * 24 * 60 * 60; // 7 days in seconds
        if (now - decoded.iat > maxAge) {
            return res.status(403).json({ error: 'Token expired' });
        }
        req.user = { userId: String(decoded.userId) };
        next();
    }
    catch (err) {
        if (err instanceof jwt.TokenExpiredError) {
            return res.status(403).json({ error: 'Token expired' });
        }
        else if (err instanceof jwt.JsonWebTokenError) {
            return res.status(403).json({ error: 'Invalid token' });
        }
        else {
            logger.error('JWT verification error:', err);
            return res.status(403).json({ error: 'Token verification failed' });
        }
    }
};
// Login rate limiting is now handled by the rateLimiters.auth middleware
// Login endpoint with enhanced rate limiting
app.post('/api/login', rateLimiters.auth, async (req, res) => {
    try {
        const { email, password: passwordInput } = req.body;
        // Input validation and sanitization
        if (!email ||
            !passwordInput ||
            typeof email !== 'string' ||
            typeof passwordInput !== 'string') {
            return res.status(400).json({ error: 'Email and password are required' });
        }
        const sanitizedEmail = email.trim().toLowerCase().slice(0, 255);
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(sanitizedEmail)) {
            return res.status(400).json({ error: 'Invalid email format' });
        }
        // Rate limiting is handled by middleware
        const user = await prisma.user.findUnique({
            where: { email: sanitizedEmail },
            select: { id: true, email: true, name: true, role: true, password: true },
        });
        if (!user) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }
        // Compare the provided password with the hashed password in the database
        const isPasswordValid = await bcrypt.compare(passwordInput, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }
        const secret = process.env.JWT_SECRET;
        if (!secret) {
            logger.error('CRITICAL: JWT_SECRET environment variable not configured');
            return res.status(500).json({ error: 'Server configuration error' });
        }
        const token = jwt.sign({
            userId: user.id.toString(),
            email: user.email,
            iat: Math.floor(Date.now() / 1000),
        }, secret, {
            expiresIn: process.env.JWT_EXPIRES_IN || '7d',
            algorithm: 'HS256',
        });
        // Return user data without password
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { password, ...userData } = user;
        // Set JWT in httpOnly cookie for security
        const isProduction = process.env.NODE_ENV === 'production';
        const cookieOptions = {
            httpOnly: true,
            secure: isProduction, // Use secure flag in production
            sameSite: 'strict',
            maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
            path: '/',
        };
        res.cookie('authToken', token, cookieOptions);
        const response = {
            user: userData,
            token: token, // Include token in response for E2E tests
        };
        res.json(response);
    }
    catch (error) {
        logger.error('Login error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});
// Auth check endpoint
app.get('/api/auth/me', authenticateToken, async (req, res) => {
    try {
        if (!req.user?.userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const user = await prisma.user.findUnique({
            where: { id: Number(req.user.userId) },
            select: { id: true, email: true, name: true, role: true },
        });
        if (!user)
            return res.status(404).json({ error: 'User not found' });
        res.json(user);
    }
    catch (error) {
        logger.error('Auth check error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});
app.get('/api/auth/check', authenticateToken, (req, res) => {
    res.json({ userId: req.user?.userId });
});
// Logout endpoint to clear httpOnly cookie
app.post('/api/logout', (_req, res) => {
    res.clearCookie('authToken', {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        path: '/',
    });
    res.json({ message: 'Logged out successfully' });
});
// Removed duplicate health endpoint - using the one with performance monitoring above
// Mount test routes (only available in test environment)
log(`NODE_ENV is: ${process.env.NODE_ENV}`);
if (process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development') {
    log('Skipping test routes - disabled in ETFO-aligned implementation');
}
else {
    log('Skipping test routes - not in test or development mode');
}
// Mount auth routes (no authentication required)
log('Mounting auth routes...');
app.use('/api', authRoutes(prisma));
// Apply authentication and rate limiting to all API routes
log('Mounting ETFO-aligned API routes...');
app.use('/api/students', authenticateToken, rateLimiters.api, studentRoutes);
app.use('/api/parent-summary', authenticateToken, rateLimiters.write, parentSummaryRoutes);
app.use('/api/newsletters', authenticateToken, rateLimiters.write, newsletterRoutes);
app.use('/api/curriculum-import', authenticateToken, rateLimiters.upload, curriculumImportRoutes);
app.use('/api/curriculum-discovery', authenticateToken, rateLimiters.read, curriculumDiscoveryRoutes);
app.use('/api/discovery-scheduler', authenticateToken, rateLimiters.api, discoverySchedulerRoutes);
// ETFO-aligned Planning Routes
app.use('/api/curriculum-expectations', authenticateToken, rateLimiters.read, curriculumExpectationRoutes);
app.use('/api/long-range-plans', authenticateToken, rateLimiters.write, longRangePlanRoutes);
app.use('/api/unit-plans', authenticateToken, rateLimiters.write, unitPlanRoutes);
app.use('/api/etfo-lesson-plans', authenticateToken, rateLimiters.write, etfoLessonPlanRoutes);
app.use('/api/daybook-entries', authenticateToken, rateLimiters.write, daybookEntryRoutes);
app.use('/api/etfo', authenticateToken, rateLimiters.read, etfoProgressRoutes);
// State Management Routes
app.use('/api/planner', authenticateToken, rateLimiters.api, plannerStateRoutes);
app.use('/api/workflow', authenticateToken, rateLimiters.api, workflowStateRoutes);
app.use('/api/ai-planning', authenticateToken, rateLimiters.ai, aiPlanningRoutes);
// Template System Routes
app.use('/api/templates', authenticateToken, rateLimiters.api, templateRoutes);
// Calendar Routes
app.use('/api/calendar-events', authenticateToken, rateLimiters.api, calendarEventRoutes);
// Recent Plans Routes
app.use('/api/recent-plans', authenticateToken, rateLimiters.api, recentPlansRoutes);
// AI status endpoint (maps to ai-planning/status for backward compatibility)
app.get('/api/ai/status', authenticateToken, async (req, res) => {
    // Forward to ai-planning routes handler
    req.url = '/status';
    aiPlanningRoutes(req, res, () => { });
});
// Planner State Routes
app.use('/api/planner', authenticateToken, plannerStateRoutes);
// Activity Discovery Routes
app.use('/api/activities', authenticateToken, rateLimiters.read, activityDiscoveryRoutes);
app.use('/api/activity-collections', authenticateToken, rateLimiters.write, activityCollectionsRoutes);
app.use('/api/ai-activities', authenticateToken, rateLimiters.ai, aiActivityGenerationRoutes);
// Batch Processing Routes
app.use('/api/batch-processing', authenticateToken, rateLimiters.write, batchProcessingRoutes);
// Sub-plan Routes
app.use('/api/sub-plan', authenticateToken, rateLimiters.write, subPlanRoutes);
// Batch API Routes (for request batching)
app.use('/api', authenticateToken, rateLimiters.api, batchApiRoutes);
// Collaboration Routes
app.use('/api/teams', authenticateToken, rateLimiters.api, teamRoutes(prisma));
app.use('/api/sharing', authenticateToken, rateLimiters.api, sharingRoutes(prisma));
app.use('/api/comments', authenticateToken, rateLimiters.api, commentRoutes(prisma));
// Service health check endpoint (no auth required for monitoring)
app.get('/api/health/services', async (_req, res) => {
    try {
        const health = await getServiceHealth();
        res.status(health.healthy ? 200 : 503).json(health);
    }
    catch (error) {
        res.status(500).json({ error: 'Failed to get service health' });
    }
});
log('All API routes mounted successfully.');
// 404 handler for API routes
app.use('/api/*', notFoundHandler);
const clientDist = path.join(__dirname_index, '../../client/dist');
log('Configuring URL-encoded and cookie parser middleware...');
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
log('Configuring static file serving for uploads...');
app.use('/uploads', express.static(path.join(__dirname_index, '../uploads')));
log('Configuring static file serving for client distribution...');
app.use(express.static(clientDist));
log('Configuring catch-all route for client-side routing...');
app.get('*', (_req, res) => {
    res.sendFile(path.join(clientDist, 'index.html'));
});
// Global error handler - must be last middleware
app.use(errorHandler);
const PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3000;
log(`Starting server on port ${PORT}...`);
// Export app before starting the server
export { app };
// Only start the server if this file is run directly
// Also start if running in test mode for E2E tests (unless IS_TEST_SERVER is set)
const isDirectRun = import.meta.url === `file://${process.argv[1]}`;
const isE2ETest = process.env.NODE_ENV === 'test' && process.env.E2E_TEST === 'true' && !process.env.IS_TEST_SERVER;
// Check if running in development mode
const isDevelopment = process.env.NODE_ENV !== 'production';
if (isDirectRun || isE2ETest || isDevelopment) {
    console.log('Starting server because:', { isDirectRun, isE2ETest, isDevelopment });
    // Initialize services before starting the server
    initializeServices()
        .then(() => {
        const server = app.listen(PORT, '0.0.0.0', () => {
            console.log(`Server is running on port ${PORT}`);
            console.log('Server address:', server.address());
            log('Server started successfully');
            // Background jobs disabled - ETFO approach uses manual workflow
        });
        server.on('error', (err) => {
            console.error('Server error:', err);
        });
    })
        .catch((err) => {
        error('Failed to initialize services:', err);
        process.exit(1);
    });
    // Graceful shutdown
    process.on('SIGTERM', async () => {
        log('SIGTERM received, shutting down gracefully...');
        await shutdownServices();
        process.exit(0);
    });
    process.on('SIGINT', async () => {
        log('SIGINT received, shutting down gracefully...');
        await shutdownServices();
        process.exit(0);
    });
}
// test
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9pbmRleC50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQTRDLE1BQU0sU0FBUyxDQUFDO0FBQ25FLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUNwQyxPQUFPLEdBQW1CLE1BQU0sY0FBYyxDQUFDO0FBQy9DLE9BQU8sWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEMsNkJBQTZCO0FBQzdCLE1BQU0sRUFBRSxDQUFDO0FBRVQsc0JBQXNCO0FBQ3RCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFcEMsa0NBQWtDO0FBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBU3ZELDZCQUE2QjtBQUM3QixPQUFPLHNCQUFzQixNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8seUJBQXlCLE1BQU0sK0JBQStCLENBQUM7QUFDdEUsT0FBTyx3QkFBd0IsTUFBTSw4QkFBOEIsQ0FBQztBQUNwRSxPQUFPLGFBQWEsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxPQUFPLG1CQUFtQixNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sZ0JBQWdCLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTywy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QUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztTQUNELEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ2IsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFTCxvQkFBb0I7SUFDcEIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0IsR0FBRyxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFDckQsTUFBTSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5QixHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQztRQUNwRCxNQUFNLGdCQUFnQixFQUFFLENBQUM7UUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFDRCxPQUFPIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MsIHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IGp3dCwgeyBKd3RQYXlsb2FkIH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCBjb29raWVQYXJzZXIgZnJvbSAnY29va2llLXBhcnNlcic7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdkb3RlbnYnO1xuXG4vLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuY29uZmlnKCk7XG5cbi8vIENyZWF0ZSBkZWJ1ZyBsb2dnZXJcbmNvbnN0IGxvZyA9IGRlYnVnKCdzZXJ2ZXI6bWFpbicpO1xuY29uc3QgZXJyb3IgPSBkZWJ1Zygnc2VydmVyOmVycm9yJyk7XG5cbi8vIEdldCBkaXJlY3RvcnkgbmFtZSBpbiBFUyBtb2R1bGVcbmNvbnN0IF9fZmlsZW5hbWVfaW5kZXggPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBfX2Rpcm5hbWVfaW5kZXggPSBwYXRoLmRpcm5hbWUoX19maWxlbmFtZV9pbmRleCk7XG5cbi8vIEV4dGVuZCB0aGUgRXhwcmVzcyBSZXF1ZXN0IHR5cGUgdG8gaW5jbHVkZSB0aGUgdXNlciBwcm9wZXJ0eVxuaW50ZXJmYWNlIEF1dGhlbnRpY2F0ZWRSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG4gIHVzZXI/OiB7XG4gICAgdXNlcklkOiBzdHJpbmc7XG4gIH07XG59XG5cbi8vIEVURk8tYWxpZ25lZCByb3V0ZSBpbXBvcnRzXG5pbXBvcnQgY3VycmljdWx1bUltcG9ydFJvdXRlcyBmcm9tICcuL3JvdXRlcy9jdXJyaWN1bHVtSW1wb3J0JztcbmltcG9ydCBjdXJyaWN1bHVtRGlzY292ZXJ5Um91dGVzIGZyb20gJy4vcm91dGVzL2N1cnJpY3VsdW0tZGlzY292ZXJ5JztcbmltcG9ydCBkaXNjb3ZlcnlTY2hlZHVsZXJSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvZGlzY292ZXJ5LXNjaGVkdWxlcic7XG5pbXBvcnQgc3R1ZGVudFJvdXRlcyBmcm9tICcuL3JvdXRlcy9zdHVkZW50JztcbmltcG9ydCBwYXJlbnRTdW1tYXJ5Um91dGVzIGZyb20gJy4vcm91dGVzL3BhcmVudFN1bW1hcnknO1xuaW1wb3J0IG5ld3NsZXR0ZXJSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvbmV3c2xldHRlcnMnO1xuaW1wb3J0IGN1cnJpY3VsdW1FeHBlY3RhdGlvblJvdXRlcyBmcm9tICcuL3JvdXRlcy9jdXJyaWN1bHVtLWV4cGVjdGF0aW9ucyc7XG5pbXBvcnQgbG9uZ1JhbmdlUGxhblJvdXRlcyBmcm9tICcuL3JvdXRlcy9sb25nLXJhbmdlLXBsYW5zJztcbmltcG9ydCB1bml0UGxhblJvdXRlcyBmcm9tICcuL3JvdXRlcy91bml0LXBsYW5zJztcbmltcG9ydCBldGZvTGVzc29uUGxhblJvdXRlcyBmcm9tICcuL3JvdXRlcy9ldGZvLWxlc3Nvbi1wbGFucyc7XG5pbXBvcnQgZGF5Ym9va0VudHJ5Um91dGVzIGZyb20gJy4vcm91dGVzL2RheWJvb2stZW50cmllcyc7XG5pbXBvcnQgZXRmb1Byb2dyZXNzUm91dGVzIGZyb20gJy4vcm91dGVzL2V0Zm8tcHJvZ3Jlc3MnO1xuaW1wb3J0IHBsYW5uZXJTdGF0ZVJvdXRlcyBmcm9tICcuL3JvdXRlcy9wbGFubmVyLXN0YXRlJztcbmltcG9ydCB3b3JrZmxvd1N0YXRlUm91dGVzIGZyb20gJy4vcm91dGVzL3dvcmtmbG93LXN0YXRlJztcbmltcG9ydCBhaVBsYW5uaW5nUm91dGVzIGZyb20gJy4vcm91dGVzL2FpLXBsYW5uaW5nJztcbmltcG9ydCBhY3Rpdml0eURpc2NvdmVyeVJvdXRlcyBmcm9tICcuL3JvdXRlcy9hY3Rpdml0eS1kaXNjb3ZlcnknO1xuaW1wb3J0IGFjdGl2aXR5Q29sbGVjdGlvbnNSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvYWN0aXZpdHktY29sbGVjdGlvbnMnO1xuaW1wb3J0IGFpQWN0aXZpdHlHZW5lcmF0aW9uUm91dGVzIGZyb20gJy4vcm91dGVzL2FpLWFjdGl2aXR5LWdlbmVyYXRpb24nO1xuaW1wb3J0IGJhdGNoUHJvY2Vzc2luZ1JvdXRlcyBmcm9tICcuL3JvdXRlcy9iYXRjaC1wcm9jZXNzaW5nJztcbmltcG9ydCB0ZW1wbGF0ZVJvdXRlcyBmcm9tICcuL3JvdXRlcy90ZW1wbGF0ZXMnO1xuaW1wb3J0IGNhbGVuZGFyRXZlbnRSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvY2FsZW5kYXItZXZlbnRzJztcbmltcG9ydCByZWNlbnRQbGFuc1JvdXRlcyBmcm9tICcuL3JvdXRlcy9yZWNlbnQtcGxhbnMnO1xuaW1wb3J0IGJhdGNoQXBpUm91dGVzIGZyb20gJy4vcm91dGVzL2JhdGNoJztcbmltcG9ydCBzdWJQbGFuUm91dGVzIGZyb20gJy4vcm91dGVzL3N1Yi1wbGFuJztcbmltcG9ydCB7IGF1dGhSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy9hdXRoJztcbmltcG9ydCB7IHRlYW1Sb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy90ZWFtcyc7XG5pbXBvcnQgeyBzaGFyaW5nUm91dGVzIH0gZnJvbSAnLi9yb3V0ZXMvc2hhcmluZyc7XG5pbXBvcnQgeyBjb21tZW50Um91dGVzIH0gZnJvbSAnLi9yb3V0ZXMvY29tbWVudHMnO1xuaW1wb3J0IHtcbiAgaW5pdGlhbGl6ZVNlcnZpY2VzLFxuICBzaHV0ZG93blNlcnZpY2VzLFxuICBnZXRTZXJ2aWNlSGVhbHRoLFxufSBmcm9tICcuL3NlcnZpY2VzL2luaXRpYWxpemVTZXJ2aWNlcyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4vcHJpc21hJztcbmltcG9ydCB7IHJhdGVMaW1pdGVycyB9IGZyb20gJy4vbWlkZGxld2FyZS9yYXRlTGltaXRlcic7XG5pbXBvcnQgeyBlcnJvckhhbmRsZXIsIG5vdEZvdW5kSGFuZGxlciB9IGZyb20gJy4vbWlkZGxld2FyZS9lcnJvckhhbmRsZXInO1xuaW1wb3J0IHsgc2FuaXRpemVJbnB1dCB9IGZyb20gJy4vbWlkZGxld2FyZS9pbnB1dFNhbml0aXphdGlvbic7XG5pbXBvcnQgcGVyZm9ybWFuY2VNb25pdG9yaW5nLCB7IHBlcmZvcm1hbmNlTW9uaXRvciB9IGZyb20gJy4vbWlkZGxld2FyZS9wZXJmb3JtYW5jZU1vbml0b3JpbmcnO1xuXG4vLyBJbml0aWFsaXplIEV4cHJlc3MgYXBwXG5sb2coJ0luaXRpYWxpemluZyBFeHByZXNzIGFwcGxpY2F0aW9uLi4uJyk7XG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbi8vIFNlY3VyaXR5IG1pZGRsZXdhcmVcbmxvZygnQ29uZmlndXJpbmcgc2VjdXJpdHkgaGVhZGVycy4uLicpO1xuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgLy8gQ29udGVudCBTZWN1cml0eSBQb2xpY3lcbiAgcmVzLnNldEhlYWRlcihcbiAgICAnQ29udGVudC1TZWN1cml0eS1Qb2xpY3knLFxuICAgIFtcbiAgICAgIFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIsXG4gICAgICBcInNjcmlwdC1zcmMgJ3NlbGYnICd1bnNhZmUtaW5saW5lJyAndW5zYWZlLWV2YWwnXCIsIC8vIEFsbG93IGlubGluZSBzY3JpcHRzIGZvciBkZXZcbiAgICAgIFwic3R5bGUtc3JjICdzZWxmJyAndW5zYWZlLWlubGluZSdcIiwgLy8gQWxsb3cgaW5saW5lIHN0eWxlcyBmb3IgQ1NTLWluLUpTXG4gICAgICBcImltZy1zcmMgJ3NlbGYnIGRhdGE6IGh0dHBzOlwiLFxuICAgICAgXCJmb250LXNyYyAnc2VsZicgZGF0YTpcIixcbiAgICAgIFwiY29ubmVjdC1zcmMgJ3NlbGYnXCIsXG4gICAgICBcImZyYW1lLXNyYyAnbm9uZSdcIixcbiAgICAgIFwib2JqZWN0LXNyYyAnbm9uZSdcIixcbiAgICAgIFwiYmFzZS11cmkgJ3NlbGYnXCIsXG4gICAgICBcImZvcm0tYWN0aW9uICdzZWxmJ1wiLFxuICAgICAgJ3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMnLFxuICAgIF0uam9pbignOyAnKSxcbiAgKTtcblxuICAvLyBBZGRpdGlvbmFsIHNlY3VyaXR5IGhlYWRlcnNcbiAgcmVzLnNldEhlYWRlcignWC1Db250ZW50LVR5cGUtT3B0aW9ucycsICdub3NuaWZmJyk7XG4gIHJlcy5zZXRIZWFkZXIoJ1gtRnJhbWUtT3B0aW9ucycsICdERU5ZJyk7XG4gIHJlcy5zZXRIZWFkZXIoJ1gtWFNTLVByb3RlY3Rpb24nLCAnMTsgbW9kZT1ibG9jaycpO1xuICByZXMuc2V0SGVhZGVyKCdSZWZlcnJlci1Qb2xpY3knLCAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicpO1xuICByZXMuc2V0SGVhZGVyKCdQZXJtaXNzaW9ucy1Qb2xpY3knLCAnZ2VvbG9jYXRpb249KCksIG1pY3JvcGhvbmU9KCksIGNhbWVyYT0oKScpO1xuXG4gIG5leHQoKTtcbn0pO1xuXG4vLyBDb25maWd1cmUgQ09SUyB3aXRoIGNyZWRlbnRpYWxzIHN1cHBvcnRcbmxvZygnQ29uZmlndXJpbmcgQ09SUy4uLicpO1xuLy8gQ09SUyBvcHRpb25zXG5jb25zdCBjb3JzT3B0aW9uczogY29ycy5Db3JzT3B0aW9ucyA9IHtcbiAgb3JpZ2luOiAob3JpZ2luLCBjYWxsYmFjaykgPT4ge1xuICAgIC8vIEluIHByb2R1Y3Rpb24sIHJlcGxhY2Ugd2l0aCB5b3VyIGFjdHVhbCBkb21haW5cbiAgICBjb25zdCBhbGxvd2VkT3JpZ2lucyA9IHByb2Nlc3MuZW52LkFMTE9XRURfT1JJR0lOUz8uc3BsaXQoJywnKSB8fCBbXG4gICAgICAnaHR0cDovL2xvY2FsaG9zdDo1MTczJyxcbiAgICAgICdodHRwOi8vbG9jYWxob3N0OjMwMDAnLFxuICAgICAgJ2h0dHA6Ly8xMjcuMC4wLjE6NTE3MycsXG4gICAgICAnaHR0cDovLzEyNy4wLjAuMTozMDAwJyxcbiAgICBdO1xuXG4gICAgaWYgKCFvcmlnaW4gfHwgYWxsb3dlZE9yaWdpbnMuaW5jbHVkZXMob3JpZ2luKSkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignTm90IGFsbG93ZWQgYnkgQ09SUycpKTtcbiAgICB9XG4gIH0sXG4gIGNyZWRlbnRpYWxzOiB0cnVlLFxuICBtZXRob2RzOiBbJ0dFVCcsICdQT1NUJywgJ1BVVCcsICdERUxFVEUnLCAnUEFUQ0gnLCAnT1BUSU9OUyddLFxuICBhbGxvd2VkSGVhZGVyczogWydDb250ZW50LVR5cGUnLCAnQXV0aG9yaXphdGlvbiddLFxuICBleHBvc2VkSGVhZGVyczogWydDb250ZW50LVJhbmdlJywgJ1gtVG90YWwtQ291bnQnXSxcbn07XG5cbi8vIEhhbmRsZSBwcmVmbGlnaHQgcmVxdWVzdHNcbmxvZygnQ29uZmlndXJpbmcgQ09SUyBwcmVmbGlnaHQuLi4nKTtcbmFwcC5vcHRpb25zKCcqJywgY29ycyhjb3JzT3B0aW9ucykpO1xuXG4vLyBBcHBseSBDT1JTIHRvIGFsbCByb3V0ZXNcbmxvZygnQXBwbHlpbmcgQ09SUyBhbmQgSlNPTiBtaWRkbGV3YXJlLi4uJyk7XG5hcHAudXNlKGNvcnMoY29yc09wdGlvbnMpKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKHsgbGltaXQ6ICcxMG1iJyB9KSk7IC8vIFNldCByZWFzb25hYmxlIHBheWxvYWQgbGltaXRcbmFwcC51c2UoY29va2llUGFyc2VyKCkpO1xuXG4vLyBBcHBseSBpbnB1dCBzYW5pdGl6YXRpb24gbWlkZGxld2FyZVxubG9nKCdBcHBseWluZyBpbnB1dCBzYW5pdGl6YXRpb24uLi4nKTtcbmFwcC51c2Uoc2FuaXRpemVJbnB1dCk7XG5cbi8vIEFwcGx5IHBlcmZvcm1hbmNlIG1vbml0b3JpbmdcbmxvZygnQXBwbHlpbmcgcGVyZm9ybWFuY2UgbW9uaXRvcmluZy4uLicpO1xuYXBwLnVzZShwZXJmb3JtYW5jZU1vbml0b3JpbmcpO1xuXG4vLyBIZWFsdGggY2hlY2sgZW5kcG9pbnRzXG5hcHAuZ2V0KCcvaGVhbHRoJywgKF9yZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN0YXR1czogJ29rJyB9KTtcbn0pO1xuXG5hcHAuZ2V0KCcvYXBpL2hlYWx0aCcsIChfcmVxLCByZXMpID0+IHtcbiAgY29uc3QgaGVhbHRoU3RhdHVzID0gcGVyZm9ybWFuY2VNb25pdG9yLmdldEhlYWx0aFN0YXR1cygpO1xuICByZXMuc3RhdHVzKGhlYWx0aFN0YXR1cy5oZWFsdGh5ID8gMjAwIDogNTAzKS5qc29uKHtcbiAgICBzdGF0dXM6IGhlYWx0aFN0YXR1cy5oZWFsdGh5ID8gJ29rJyA6ICdkZWdyYWRlZCcsXG4gIH0pO1xufSk7XG5cbi8vIERldGFpbGVkIGhlYWx0aCBlbmRwb2ludCBmb3IgZGVidWdnaW5nICBcbmFwcC5nZXQoJy9hcGkvaGVhbHRoL2RldGFpbGVkJywgKF9yZXEsIHJlcykgPT4ge1xuICBjb25zdCBoZWFsdGhTdGF0dXMgPSBwZXJmb3JtYW5jZU1vbml0b3IuZ2V0SGVhbHRoU3RhdHVzKCk7XG4gIHJlcy5zdGF0dXMoaGVhbHRoU3RhdHVzLmhlYWx0aHkgPyAyMDAgOiA1MDMpLmpzb24oe1xuICAgIHN0YXR1czogaGVhbHRoU3RhdHVzLmhlYWx0aHkgPyAnb2snIDogJ2RlZ3JhZGVkJyxcbiAgICAuLi5oZWFsdGhTdGF0dXMsXG4gIH0pO1xufSk7XG5cbi8vIFBlcmZvcm1hbmNlIG1ldHJpY3MgZW5kcG9pbnQgKGFkbWluIG9ubHkpXG5hcHAuZ2V0KCcvYXBpL21ldHJpY3MnLCAocmVxLCByZXMpID0+IHtcbiAgLy8gU2ltcGxlIGFkbWluIHRva2VuIGNoZWNrXG4gIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbj8ucmVwbGFjZSgnQmVhcmVyICcsICcnKTtcbiAgaWYgKHRva2VuICE9PSBwcm9jZXNzLmVudi5XSVpBUkRfVE9LRU4pIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0FkbWluIGFjY2VzcyByZXF1aXJlZCcgfSk7XG4gIH1cblxuICBjb25zdCBzdW1tYXJ5ID0gcGVyZm9ybWFuY2VNb25pdG9yLmdldFBlcmZvcm1hbmNlU3VtbWFyeSgpO1xuICBjb25zdCBzbG93ZXN0RW5kcG9pbnRzID0gcGVyZm9ybWFuY2VNb25pdG9yLmdldFNsb3dlc3RFbmRwb2ludHMoKTtcblxuICByZXMuanNvbih7XG4gICAgc3VtbWFyeSxcbiAgICBzbG93ZXN0RW5kcG9pbnRzLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9KTtcbn0pO1xuXG4vLyBNaWRkbGV3YXJlIHRvIHZlcmlmeSBKV1QgdG9rZW4gd2l0aCBlbmhhbmNlZCBzZWN1cml0eVxuY29uc3QgYXV0aGVudGljYXRlVG9rZW4gPSAocmVxOiBBdXRoZW50aWNhdGVkUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gIC8vIEZpcnN0IHRyeSB0byBnZXQgdG9rZW4gZnJvbSBodHRwT25seSBjb29raWVcbiAgbGV0IHRva2VuID0gcmVxLmNvb2tpZXM/LmF1dGhUb2tlbjtcblxuICAvLyBGYWxsYmFjayB0byBBdXRob3JpemF0aW9uIGhlYWRlciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBpZiAoIXRva2VuKSB7XG4gICAgY29uc3QgYXV0aEhlYWRlciA9IHJlcS5oZWFkZXJzWydhdXRob3JpemF0aW9uJ107XG4gICAgaWYgKGF1dGhIZWFkZXIgJiYgYXV0aEhlYWRlci5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcbiAgICAgIHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdG9rZW4pIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyB9KTtcbiAgfVxuICBpZiAoIXRva2VuIHx8IHRva2VuLmxlbmd0aCA+IDEwMDApIHtcbiAgICAvLyBQcmV2ZW50IGV4dHJlbWVseSBsb25nIHRva2Vuc1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnSW52YWxpZCB0b2tlbiBmb3JtYXQnIH0pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzZWNyZXQgPSBwcm9jZXNzLmVudi5KV1RfU0VDUkVUO1xuICAgIGlmICghc2VjcmV0KSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0NSSVRJQ0FMOiBKV1RfU0VDUkVUIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBjb25maWd1cmVkJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NlcnZlciBjb25maWd1cmF0aW9uIGVycm9yJyB9KTtcbiAgICB9XG4gICAgY29uc3QgZGVjb2RlZCA9IGp3dC52ZXJpZnkodG9rZW4sIHNlY3JldCwge1xuICAgICAgYWxnb3JpdGhtczogWydIUzI1NiddLCAvLyBFeHBsaWNpdGx5IHNwZWNpZnkgYWxsb3dlZCBhbGdvcml0aG1zXG4gICAgICBtYXhBZ2U6ICc3ZCcsIC8vIE1heGltdW0gdG9rZW4gYWdlXG4gICAgfSkgYXMgSnd0UGF5bG9hZDtcblxuICAgIGlmICghZGVjb2RlZD8udXNlcklkIHx8ICFkZWNvZGVkPy5lbWFpbCB8fCAhZGVjb2RlZD8uaWF0KSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgdG9rZW4gcGF5bG9hZCcgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdG9rZW4gYWdlIChleHRyYSBwcm90ZWN0aW9uKVxuICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgIGNvbnN0IG1heEFnZSA9IDcgKiAyNCAqIDYwICogNjA7IC8vIDcgZGF5cyBpbiBzZWNvbmRzXG4gICAgaWYgKG5vdyAtIGRlY29kZWQuaWF0ID4gbWF4QWdlKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ1Rva2VuIGV4cGlyZWQnIH0pO1xuICAgIH1cblxuICAgIHJlcS51c2VyID0geyB1c2VySWQ6IFN0cmluZyhkZWNvZGVkLnVzZXJJZCkgfTtcbiAgICBuZXh0KCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBqd3QuVG9rZW5FeHBpcmVkRXJyb3IpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnVG9rZW4gZXhwaXJlZCcgfSk7XG4gICAgfSBlbHNlIGlmIChlcnIgaW5zdGFuY2VvZiBqd3QuSnNvbldlYlRva2VuRXJyb3IpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnSW52YWxpZCB0b2tlbicgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5lcnJvcignSldUIHZlcmlmaWNhdGlvbiBlcnJvcjonLCBlcnIpO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdUb2tlbiB2ZXJpZmljYXRpb24gZmFpbGVkJyB9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIExvZ2luIHJhdGUgbGltaXRpbmcgaXMgbm93IGhhbmRsZWQgYnkgdGhlIHJhdGVMaW1pdGVycy5hdXRoIG1pZGRsZXdhcmVcblxuLy8gTG9naW4gZW5kcG9pbnQgd2l0aCBlbmhhbmNlZCByYXRlIGxpbWl0aW5nXG5hcHAucG9zdCgnL2FwaS9sb2dpbicsIHJhdGVMaW1pdGVycy5hdXRoLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZDogcGFzc3dvcmRJbnB1dCB9ID0gcmVxLmJvZHkgYXMgeyBlbWFpbDogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nIH07XG4gICAgLy8gSW5wdXQgdmFsaWRhdGlvbiBhbmQgc2FuaXRpemF0aW9uXG4gICAgaWYgKFxuICAgICAgIWVtYWlsIHx8XG4gICAgICAhcGFzc3dvcmRJbnB1dCB8fFxuICAgICAgdHlwZW9mIGVtYWlsICE9PSAnc3RyaW5nJyB8fFxuICAgICAgdHlwZW9mIHBhc3N3b3JkSW5wdXQgIT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0VtYWlsIGFuZCBwYXNzd29yZCBhcmUgcmVxdWlyZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNhbml0aXplZEVtYWlsID0gZW1haWwudHJpbSgpLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgMjU1KTtcbiAgICBpZiAoIS9eW15cXHNAXStAW15cXHNAXStcXC5bXlxcc0BdKyQvLnRlc3Qoc2FuaXRpemVkRW1haWwpKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgZW1haWwgZm9ybWF0JyB9KTtcbiAgICB9XG5cbiAgICAvLyBSYXRlIGxpbWl0aW5nIGlzIGhhbmRsZWQgYnkgbWlkZGxld2FyZVxuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgZW1haWw6IHNhbml0aXplZEVtYWlsIH0sXG4gICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIGVtYWlsOiB0cnVlLCBuYW1lOiB0cnVlLCByb2xlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xuICAgIH1cblxuICAgIC8vIENvbXBhcmUgdGhlIHByb3ZpZGVkIHBhc3N3b3JkIHdpdGggdGhlIGhhc2hlZCBwYXNzd29yZCBpbiB0aGUgZGF0YWJhc2VcbiAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShwYXNzd29yZElucHV0LCB1c2VyLnBhc3N3b3JkKTtcblxuICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHNlY3JldCA9IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQ7XG4gICAgaWYgKCFzZWNyZXQpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignQ1JJVElDQUw6IEpXVF9TRUNSRVQgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnU2VydmVyIGNvbmZpZ3VyYXRpb24gZXJyb3InIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0gand0LnNpZ24oXG4gICAgICB7XG4gICAgICAgIHVzZXJJZDogdXNlci5pZC50b1N0cmluZygpLFxuICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgaWF0OiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSxcbiAgICAgIH0sXG4gICAgICBzZWNyZXQsXG4gICAgICB7XG4gICAgICAgIGV4cGlyZXNJbjogcHJvY2Vzcy5lbnYuSldUX0VYUElSRVNfSU4gfHwgJzdkJyxcbiAgICAgICAgYWxnb3JpdGhtOiAnSFMyNTYnLFxuICAgICAgfSBhcyBqd3QuU2lnbk9wdGlvbnMsXG4gICAgKTtcblxuICAgIC8vIFJldHVybiB1c2VyIGRhdGEgd2l0aG91dCBwYXNzd29yZFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi51c2VyRGF0YSB9ID0gdXNlcjtcblxuICAgIC8vIFNldCBKV1QgaW4gaHR0cE9ubHkgY29va2llIGZvciBzZWN1cml0eVxuICAgIGNvbnN0IGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG4gICAgY29uc3QgY29va2llT3B0aW9ucyA9IHtcbiAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgc2VjdXJlOiBpc1Byb2R1Y3Rpb24sIC8vIFVzZSBzZWN1cmUgZmxhZyBpbiBwcm9kdWN0aW9uXG4gICAgICBzYW1lU2l0ZTogJ3N0cmljdCcgYXMgY29uc3QsXG4gICAgICBtYXhBZ2U6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwLCAvLyA3IGRheXNcbiAgICAgIHBhdGg6ICcvJyxcbiAgICB9O1xuXG4gICAgcmVzLmNvb2tpZSgnYXV0aFRva2VuJywgdG9rZW4sIGNvb2tpZU9wdGlvbnMpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICB1c2VyOiB1c2VyRGF0YSxcbiAgICAgIHRva2VuOiB0b2tlbiwgLy8gSW5jbHVkZSB0b2tlbiBpbiByZXNwb25zZSBmb3IgRTJFIHRlc3RzXG4gICAgfTtcblxuICAgIHJlcy5qc29uKHJlc3BvbnNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIuZXJyb3IoJ0xvZ2luIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgfVxufSk7XG5cbi8vIEF1dGggY2hlY2sgZW5kcG9pbnRcbmFwcC5nZXQoJy9hcGkvYXV0aC9tZScsIGF1dGhlbnRpY2F0ZVRva2VuLCBhc3luYyAocmVxOiBBdXRoZW50aWNhdGVkUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGlmICghcmVxLnVzZXI/LnVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cbiAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBpZDogTnVtYmVyKHJlcS51c2VyLnVzZXJJZCkgfSxcbiAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgZW1haWw6IHRydWUsIG5hbWU6IHRydWUsIHJvbGU6IHRydWUgfSxcbiAgICB9KTtcbiAgICBpZiAoIXVzZXIpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnVXNlciBub3QgZm91bmQnIH0pO1xuICAgIHJlcy5qc29uKHVzZXIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ2dlci5lcnJvcignQXV0aCBjaGVjayBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG4gIH1cbn0pO1xuXG5hcHAuZ2V0KCcvYXBpL2F1dGgvY2hlY2snLCBhdXRoZW50aWNhdGVUb2tlbiwgKHJlcTogQXV0aGVudGljYXRlZFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgcmVzLmpzb24oeyB1c2VySWQ6IHJlcS51c2VyPy51c2VySWQgfSk7XG59KTtcblxuLy8gTG9nb3V0IGVuZHBvaW50IHRvIGNsZWFyIGh0dHBPbmx5IGNvb2tpZVxuYXBwLnBvc3QoJy9hcGkvbG9nb3V0JywgKF9yZXEsIHJlcykgPT4ge1xuICByZXMuY2xlYXJDb29raWUoJ2F1dGhUb2tlbicsIHtcbiAgICBodHRwT25seTogdHJ1ZSxcbiAgICBzZWN1cmU6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicsXG4gICAgc2FtZVNpdGU6ICdzdHJpY3QnLFxuICAgIHBhdGg6ICcvJyxcbiAgfSk7XG4gIHJlcy5qc29uKHsgbWVzc2FnZTogJ0xvZ2dlZCBvdXQgc3VjY2Vzc2Z1bGx5JyB9KTtcbn0pO1xuXG4vLyBSZW1vdmVkIGR1cGxpY2F0ZSBoZWFsdGggZW5kcG9pbnQgLSB1c2luZyB0aGUgb25lIHdpdGggcGVyZm9ybWFuY2UgbW9uaXRvcmluZyBhYm92ZVxuXG4vLyBNb3VudCB0ZXN0IHJvdXRlcyAob25seSBhdmFpbGFibGUgaW4gdGVzdCBlbnZpcm9ubWVudClcbmxvZyhgTk9ERV9FTlYgaXM6ICR7cHJvY2Vzcy5lbnYuTk9ERV9FTlZ9YCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBsb2coJ1NraXBwaW5nIHRlc3Qgcm91dGVzIC0gZGlzYWJsZWQgaW4gRVRGTy1hbGlnbmVkIGltcGxlbWVudGF0aW9uJyk7XG59IGVsc2Uge1xuICBsb2coJ1NraXBwaW5nIHRlc3Qgcm91dGVzIC0gbm90IGluIHRlc3Qgb3IgZGV2ZWxvcG1lbnQgbW9kZScpO1xufVxuXG4vLyBNb3VudCBhdXRoIHJvdXRlcyAobm8gYXV0aGVudGljYXRpb24gcmVxdWlyZWQpXG5sb2coJ01vdW50aW5nIGF1dGggcm91dGVzLi4uJyk7XG5hcHAudXNlKCcvYXBpJywgYXV0aFJvdXRlcyhwcmlzbWEpKTtcblxuLy8gQXBwbHkgYXV0aGVudGljYXRpb24gYW5kIHJhdGUgbGltaXRpbmcgdG8gYWxsIEFQSSByb3V0ZXNcbmxvZygnTW91bnRpbmcgRVRGTy1hbGlnbmVkIEFQSSByb3V0ZXMuLi4nKTtcbmFwcC51c2UoJy9hcGkvc3R1ZGVudHMnLCBhdXRoZW50aWNhdGVUb2tlbiwgcmF0ZUxpbWl0ZXJzLmFwaSwgc3R1ZGVudFJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL3BhcmVudC1zdW1tYXJ5JywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy53cml0ZSwgcGFyZW50U3VtbWFyeVJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL25ld3NsZXR0ZXJzJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy53cml0ZSwgbmV3c2xldHRlclJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL2N1cnJpY3VsdW0taW1wb3J0JywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy51cGxvYWQsIGN1cnJpY3VsdW1JbXBvcnRSb3V0ZXMpO1xuYXBwLnVzZShcbiAgJy9hcGkvY3VycmljdWx1bS1kaXNjb3ZlcnknLFxuICBhdXRoZW50aWNhdGVUb2tlbixcbiAgcmF0ZUxpbWl0ZXJzLnJlYWQsXG4gIGN1cnJpY3VsdW1EaXNjb3ZlcnlSb3V0ZXMsXG4pO1xuYXBwLnVzZSgnL2FwaS9kaXNjb3Zlcnktc2NoZWR1bGVyJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5hcGksIGRpc2NvdmVyeVNjaGVkdWxlclJvdXRlcyk7XG5cbi8vIEVURk8tYWxpZ25lZCBQbGFubmluZyBSb3V0ZXNcbmFwcC51c2UoXG4gICcvYXBpL2N1cnJpY3VsdW0tZXhwZWN0YXRpb25zJyxcbiAgYXV0aGVudGljYXRlVG9rZW4sXG4gIHJhdGVMaW1pdGVycy5yZWFkLFxuICBjdXJyaWN1bHVtRXhwZWN0YXRpb25Sb3V0ZXMsXG4pO1xuYXBwLnVzZSgnL2FwaS9sb25nLXJhbmdlLXBsYW5zJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy53cml0ZSwgbG9uZ1JhbmdlUGxhblJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL3VuaXQtcGxhbnMnLCBhdXRoZW50aWNhdGVUb2tlbiwgcmF0ZUxpbWl0ZXJzLndyaXRlLCB1bml0UGxhblJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL2V0Zm8tbGVzc29uLXBsYW5zJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy53cml0ZSwgZXRmb0xlc3NvblBsYW5Sb3V0ZXMpO1xuYXBwLnVzZSgnL2FwaS9kYXlib29rLWVudHJpZXMnLCBhdXRoZW50aWNhdGVUb2tlbiwgcmF0ZUxpbWl0ZXJzLndyaXRlLCBkYXlib29rRW50cnlSb3V0ZXMpO1xuYXBwLnVzZSgnL2FwaS9ldGZvJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5yZWFkLCBldGZvUHJvZ3Jlc3NSb3V0ZXMpO1xuXG4vLyBTdGF0ZSBNYW5hZ2VtZW50IFJvdXRlc1xuYXBwLnVzZSgnL2FwaS9wbGFubmVyJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5hcGksIHBsYW5uZXJTdGF0ZVJvdXRlcyk7XG5hcHAudXNlKCcvYXBpL3dvcmtmbG93JywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5hcGksIHdvcmtmbG93U3RhdGVSb3V0ZXMpO1xuYXBwLnVzZSgnL2FwaS9haS1wbGFubmluZycsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMuYWksIGFpUGxhbm5pbmdSb3V0ZXMpO1xuXG4vLyBUZW1wbGF0ZSBTeXN0ZW0gUm91dGVzXG5hcHAudXNlKCcvYXBpL3RlbXBsYXRlcycsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMuYXBpLCB0ZW1wbGF0ZVJvdXRlcyk7XG5cbi8vIENhbGVuZGFyIFJvdXRlc1xuYXBwLnVzZSgnL2FwaS9jYWxlbmRhci1ldmVudHMnLCBhdXRoZW50aWNhdGVUb2tlbiwgcmF0ZUxpbWl0ZXJzLmFwaSwgY2FsZW5kYXJFdmVudFJvdXRlcyk7XG5cbi8vIFJlY2VudCBQbGFucyBSb3V0ZXNcbmFwcC51c2UoJy9hcGkvcmVjZW50LXBsYW5zJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5hcGksIHJlY2VudFBsYW5zUm91dGVzKTtcblxuLy8gQUkgc3RhdHVzIGVuZHBvaW50IChtYXBzIHRvIGFpLXBsYW5uaW5nL3N0YXR1cyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbmFwcC5nZXQoJy9hcGkvYWkvc3RhdHVzJywgYXV0aGVudGljYXRlVG9rZW4sIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyBGb3J3YXJkIHRvIGFpLXBsYW5uaW5nIHJvdXRlcyBoYW5kbGVyXG4gIHJlcS51cmwgPSAnL3N0YXR1cyc7XG4gIGFpUGxhbm5pbmdSb3V0ZXMocmVxLCByZXMsICgpID0+IHt9KTtcbn0pO1xuXG4vLyBQbGFubmVyIFN0YXRlIFJvdXRlc1xuYXBwLnVzZSgnL2FwaS9wbGFubmVyJywgYXV0aGVudGljYXRlVG9rZW4sIHBsYW5uZXJTdGF0ZVJvdXRlcyk7XG5cbi8vIEFjdGl2aXR5IERpc2NvdmVyeSBSb3V0ZXNcbmFwcC51c2UoJy9hcGkvYWN0aXZpdGllcycsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMucmVhZCwgYWN0aXZpdHlEaXNjb3ZlcnlSb3V0ZXMpO1xuYXBwLnVzZShcbiAgJy9hcGkvYWN0aXZpdHktY29sbGVjdGlvbnMnLFxuICBhdXRoZW50aWNhdGVUb2tlbixcbiAgcmF0ZUxpbWl0ZXJzLndyaXRlLFxuICBhY3Rpdml0eUNvbGxlY3Rpb25zUm91dGVzLFxuKTtcbmFwcC51c2UoJy9hcGkvYWktYWN0aXZpdGllcycsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMuYWksIGFpQWN0aXZpdHlHZW5lcmF0aW9uUm91dGVzKTtcblxuLy8gQmF0Y2ggUHJvY2Vzc2luZyBSb3V0ZXNcbmFwcC51c2UoJy9hcGkvYmF0Y2gtcHJvY2Vzc2luZycsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMud3JpdGUsIGJhdGNoUHJvY2Vzc2luZ1JvdXRlcyk7XG5cbi8vIFN1Yi1wbGFuIFJvdXRlc1xuYXBwLnVzZSgnL2FwaS9zdWItcGxhbicsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMud3JpdGUsIHN1YlBsYW5Sb3V0ZXMpO1xuXG4vLyBCYXRjaCBBUEkgUm91dGVzIChmb3IgcmVxdWVzdCBiYXRjaGluZylcbmFwcC51c2UoJy9hcGknLCBhdXRoZW50aWNhdGVUb2tlbiwgcmF0ZUxpbWl0ZXJzLmFwaSwgYmF0Y2hBcGlSb3V0ZXMpO1xuXG4vLyBDb2xsYWJvcmF0aW9uIFJvdXRlc1xuYXBwLnVzZSgnL2FwaS90ZWFtcycsIGF1dGhlbnRpY2F0ZVRva2VuLCByYXRlTGltaXRlcnMuYXBpLCB0ZWFtUm91dGVzKHByaXNtYSkpO1xuYXBwLnVzZSgnL2FwaS9zaGFyaW5nJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5hcGksIHNoYXJpbmdSb3V0ZXMocHJpc21hKSk7XG5hcHAudXNlKCcvYXBpL2NvbW1lbnRzJywgYXV0aGVudGljYXRlVG9rZW4sIHJhdGVMaW1pdGVycy5hcGksIGNvbW1lbnRSb3V0ZXMocHJpc21hKSk7XG5cbi8vIFNlcnZpY2UgaGVhbHRoIGNoZWNrIGVuZHBvaW50IChubyBhdXRoIHJlcXVpcmVkIGZvciBtb25pdG9yaW5nKVxuYXBwLmdldCgnL2FwaS9oZWFsdGgvc2VydmljZXMnLCBhc3luYyAoX3JlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgaGVhbHRoID0gYXdhaXQgZ2V0U2VydmljZUhlYWx0aCgpO1xuICAgIHJlcy5zdGF0dXMoaGVhbHRoLmhlYWx0aHkgPyAyMDAgOiA1MDMpLmpzb24oaGVhbHRoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGdldCBzZXJ2aWNlIGhlYWx0aCcgfSk7XG4gIH1cbn0pO1xuXG5sb2coJ0FsbCBBUEkgcm91dGVzIG1vdW50ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXG4vLyA0MDQgaGFuZGxlciBmb3IgQVBJIHJvdXRlc1xuYXBwLnVzZSgnL2FwaS8qJywgbm90Rm91bmRIYW5kbGVyKTtcblxuY29uc3QgY2xpZW50RGlzdCA9IHBhdGguam9pbihfX2Rpcm5hbWVfaW5kZXgsICcuLi8uLi9jbGllbnQvZGlzdCcpO1xubG9nKCdDb25maWd1cmluZyBVUkwtZW5jb2RlZCBhbmQgY29va2llIHBhcnNlciBtaWRkbGV3YXJlLi4uJyk7XG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcbmFwcC51c2UoY29va2llUGFyc2VyKCkpO1xubG9nKCdDb25maWd1cmluZyBzdGF0aWMgZmlsZSBzZXJ2aW5nIGZvciB1cGxvYWRzLi4uJyk7XG5hcHAudXNlKCcvdXBsb2FkcycsIGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWVfaW5kZXgsICcuLi91cGxvYWRzJykpKTtcbmxvZygnQ29uZmlndXJpbmcgc3RhdGljIGZpbGUgc2VydmluZyBmb3IgY2xpZW50IGRpc3RyaWJ1dGlvbi4uLicpO1xuYXBwLnVzZShleHByZXNzLnN0YXRpYyhjbGllbnREaXN0KSk7XG5sb2coJ0NvbmZpZ3VyaW5nIGNhdGNoLWFsbCByb3V0ZSBmb3IgY2xpZW50LXNpZGUgcm91dGluZy4uLicpO1xuYXBwLmdldCgnKicsIChfcmVxLCByZXMpID0+IHtcbiAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihjbGllbnREaXN0LCAnaW5kZXguaHRtbCcpKTtcbn0pO1xuXG4vLyBHbG9iYWwgZXJyb3IgaGFuZGxlciAtIG11c3QgYmUgbGFzdCBtaWRkbGV3YXJlXG5hcHAudXNlKGVycm9ySGFuZGxlcik7XG5cbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUID8gcGFyc2VJbnQocHJvY2Vzcy5lbnYuUE9SVCwgMTApIDogMzAwMDtcbmxvZyhgU3RhcnRpbmcgc2VydmVyIG9uIHBvcnQgJHtQT1JUfS4uLmApO1xuLy8gRXhwb3J0IGFwcCBiZWZvcmUgc3RhcnRpbmcgdGhlIHNlcnZlclxuZXhwb3J0IHsgYXBwIH07XG5cbi8vIE9ubHkgc3RhcnQgdGhlIHNlcnZlciBpZiB0aGlzIGZpbGUgaXMgcnVuIGRpcmVjdGx5XG4vLyBBbHNvIHN0YXJ0IGlmIHJ1bm5pbmcgaW4gdGVzdCBtb2RlIGZvciBFMkUgdGVzdHMgKHVubGVzcyBJU19URVNUX1NFUlZFUiBpcyBzZXQpXG5jb25zdCBpc0RpcmVjdFJ1biA9IGltcG9ydC5tZXRhLnVybCA9PT0gYGZpbGU6Ly8ke3Byb2Nlc3MuYXJndlsxXX1gO1xuY29uc3QgaXNFMkVUZXN0ID1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyAmJiBwcm9jZXNzLmVudi5FMkVfVEVTVCA9PT0gJ3RydWUnICYmICFwcm9jZXNzLmVudi5JU19URVNUX1NFUlZFUjtcbi8vIENoZWNrIGlmIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbmlmIChpc0RpcmVjdFJ1biB8fCBpc0UyRVRlc3QgfHwgaXNEZXZlbG9wbWVudCkge1xuICBjb25zb2xlLmxvZygnU3RhcnRpbmcgc2VydmVyIGJlY2F1c2U6JywgeyBpc0RpcmVjdFJ1biwgaXNFMkVUZXN0LCBpc0RldmVsb3BtZW50IH0pO1xuICAvLyBJbml0aWFsaXplIHNlcnZpY2VzIGJlZm9yZSBzdGFydGluZyB0aGUgc2VydmVyXG4gIGluaXRpYWxpemVTZXJ2aWNlcygpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3Qgc2VydmVyID0gYXBwLmxpc3RlbihQT1JULCAnMC4wLjAuMCcsICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIG9uIHBvcnQgJHtQT1JUfWApO1xuICAgICAgICBjb25zb2xlLmxvZygnU2VydmVyIGFkZHJlc3M6Jywgc2VydmVyLmFkZHJlc3MoKSk7XG4gICAgICAgIGxvZygnU2VydmVyIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cbiAgICAgICAgLy8gQmFja2dyb3VuZCBqb2JzIGRpc2FibGVkIC0gRVRGTyBhcHByb2FjaCB1c2VzIG1hbnVhbCB3b3JrZmxvd1xuICAgICAgfSk7XG5cbiAgICAgIHNlcnZlci5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlcnZlciBlcnJvcjonLCBlcnIpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgZXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIHNlcnZpY2VzOicsIGVycik7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfSk7XG5cbiAgLy8gR3JhY2VmdWwgc2h1dGRvd25cbiAgcHJvY2Vzcy5vbignU0lHVEVSTScsIGFzeW5jICgpID0+IHtcbiAgICBsb2coJ1NJR1RFUk0gcmVjZWl2ZWQsIHNodXR0aW5nIGRvd24gZ3JhY2VmdWxseS4uLicpO1xuICAgIGF3YWl0IHNodXRkb3duU2VydmljZXMoKTtcbiAgICBwcm9jZXNzLmV4aXQoMCk7XG4gIH0pO1xuXG4gIHByb2Nlc3Mub24oJ1NJR0lOVCcsIGFzeW5jICgpID0+IHtcbiAgICBsb2coJ1NJR0lOVCByZWNlaXZlZCwgc2h1dHRpbmcgZG93biBncmFjZWZ1bGx5Li4uJyk7XG4gICAgYXdhaXQgc2h1dGRvd25TZXJ2aWNlcygpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfSk7XG59XG4vLyB0ZXN0XG4iXSwidmVyc2lvbiI6M30=