{"version":3,"names":["cov_mm11dwr8m","actualCoverage","BaseService","BatchProcessingService","operations","s","Map","queues","activeProcesses","Set","constructor","f","addOperations","userId","withRetry","operationIds","now","Date","op","operationId","type","Math","random","toString","substr","batchOperation","id","status","progress","retryCount","createdAt","updatedAt","set","userQueue","b","get","push","logger","info","operationCount","length","processBatch","options","opts","batchSize","maxRetries","retryDelay","processId","has","Error","add","queue","pendingOperations","filter","successful","failed","pendingCount","results","withParallel","map","operation","processOperation","maxConcurrency","failFast","successCount","errors","e","delete","validateBatch","warnings","validateUnitPlanOperation","validateLessonPlanOperation","validateExpectationOperation","validateResourceOperation","error","message","duplicates","findDuplicateOperations","valid","getBatchStatus","isProcessing","queueLength","clearCompletedOperations","pending","forEach","result","processUnitPlanOperation","processLessonPlanOperation","processExpectationOperation","processResourceOperation","data","onComplete","batchSleep","onError","withTransaction","tx","expectationIds","_expectationIds","unitData","unitPlan","create","title","longRangePlanId","parseInt","startDate","endDate","unitPlanExpectation","createMany","expectationId","unitPlanId","lessonData","lessonPlan","eTFOLessonPlan","date","duration","eTFOLessonPlanExpectation","lessonPlanId","_userId","curriculumExpectation","code","description","strand","subject","grade","unitPlanResource","url","connect","eTFOLessonPlanResource","seen","key","getOperationKey","ms","Promise","resolve","setTimeout","batchProcessingService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/batchProcessingService.ts"],"sourcesContent":["import { BaseService } from './base/BaseService';\n\nexport interface BatchOperation<T = unknown> {\n  id: string;\n  type: 'unit' | 'lesson' | 'expectation' | 'resource';\n  data: T;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress?: number;\n  errors?: string[];\n  retryCount?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Type definitions for operation data\ninterface UnitPlanData {\n  title: string;\n  longRangePlanId: string;\n  startDate: string | Date;\n  endDate: string | Date;\n  expectationIds?: string[];\n  [key: string]: unknown;\n}\n\ninterface LessonPlanData {\n  title: string;\n  unitPlanId: string;\n  date: string | Date;\n  duration?: number;\n  expectationIds?: string[];\n  [key: string]: unknown;\n}\n\ninterface ExpectationData {\n  code: string;\n  description: string;\n  strand: string;\n  subject: string;\n  grade?: number;\n  [key: string]: unknown;\n}\n\ninterface ResourceData {\n  title: string;\n  type: string;\n  unitPlanId?: string;\n  lessonPlanId?: string;\n  [key: string]: unknown;\n}\n\nexport interface BatchProcessingOptions {\n  batchSize: number;\n  maxRetries: number;\n  retryDelay: number;\n  onProgress?: (operation: BatchOperation, progress: number) => void;\n  onComplete?: (operation: BatchOperation) => void;\n  onError?: (operation: BatchOperation, error: Error) => void;\n}\n\nexport interface BatchValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nclass BatchProcessingService extends BaseService {\n  private readonly operations = new Map<string, BatchOperation>();\n  private readonly queues = new Map<string, BatchOperation[]>();\n  private readonly activeProcesses = new Set<string>();\n\n  constructor() {\n    super('BatchProcessingService');\n  }\n\n  /**\n   * Add operations to the batch processing queue\n   */\n  async addOperations<T>(\n    operations: Omit<BatchOperation<T>, 'id' | 'status' | 'createdAt' | 'updatedAt'>[],\n    userId: string,\n  ): Promise<string[]> {\n    return this.withRetry(async () => {\n      const operationIds: string[] = [];\n      const now = new Date();\n\n      for (const op of operations) {\n        const operationId = `${op.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const batchOperation: BatchOperation<T> = {\n          ...op,\n          id: operationId,\n          status: 'pending',\n          progress: 0,\n          retryCount: 0,\n          createdAt: now,\n          updatedAt: now,\n        };\n\n        this.operations.set(operationId, batchOperation);\n\n        // Add to user-specific queue\n        const userQueue = this.queues.get(userId) || [];\n        userQueue.push(batchOperation);\n        this.queues.set(userId, userQueue);\n\n        operationIds.push(operationId);\n      }\n\n      this.logger.info(\n        { operationCount: operations.length, userId },\n        'Added operations to batch queue',\n      );\n\n      return operationIds;\n    });\n  }\n\n  /**\n   * Process batch operations for a specific user\n   */\n  async processBatch(\n    userId: string,\n    options: Partial<BatchProcessingOptions> = {},\n  ): Promise<{\n    successful: number;\n    failed: number;\n    operations: BatchOperation[];\n  }> {\n    const opts: BatchProcessingOptions = {\n      batchSize: 10,\n      maxRetries: 3,\n      retryDelay: 1000,\n      ...options,\n    };\n\n    const processId = `${userId}_${Date.now()}`;\n\n    if (this.activeProcesses.has(userId)) {\n      throw new Error('Batch processing already in progress for this user');\n    }\n\n    this.activeProcesses.add(userId);\n\n    try {\n      const queue = this.queues.get(userId) || [];\n      const pendingOperations = queue.filter((op) => op.status === 'pending');\n\n      if (pendingOperations.length === 0) {\n        return { successful: 0, failed: 0, operations: [] };\n      }\n\n      this.logger.info(\n        { userId, pendingCount: pendingOperations.length, processId },\n        'Starting batch processing',\n      );\n\n      const results = await this.withParallel(\n        pendingOperations.map((operation) => () => this.processOperation(operation, userId, opts)),\n        {\n          maxConcurrency: opts.batchSize,\n          failFast: false,\n        },\n      );\n\n      const successful = results.successCount;\n      const failed = results.errors.filter((e) => e !== null).length;\n\n      this.logger.info({ userId, successful, failed, processId }, 'Batch processing completed');\n\n      return {\n        successful,\n        failed,\n        operations: pendingOperations,\n      };\n    } finally {\n      this.activeProcesses.delete(userId);\n    }\n  }\n\n  /**\n   * Validate batch operations before processing\n   */\n  async validateBatch(operations: BatchOperation[]): Promise<BatchValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    for (const operation of operations) {\n      try {\n        // Type-specific validation\n        switch (operation.type) {\n          case 'unit':\n            await this.validateUnitPlanOperation(operation);\n            break;\n          case 'lesson':\n            await this.validateLessonPlanOperation(operation);\n            break;\n          case 'expectation':\n            await this.validateExpectationOperation(operation);\n            break;\n          case 'resource':\n            await this.validateResourceOperation(operation);\n            break;\n          default:\n            errors.push(`Unknown operation type: ${operation.type}`);\n        }\n      } catch (error) {\n        errors.push(`Validation failed for operation ${operation.id}: ${error.message}`);\n      }\n    }\n\n    // Check for duplicates\n    const duplicates = this.findDuplicateOperations(operations);\n    if (duplicates.length > 0) {\n      warnings.push(`Found ${duplicates.length} duplicate operations`);\n    }\n\n    // Check batch size limits\n    if (operations.length > 100) {\n      warnings.push('Large batch size may impact performance');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Get batch processing status for a user\n   */\n  getBatchStatus(userId: string): {\n    isProcessing: boolean;\n    queueLength: number;\n    operations: BatchOperation[];\n  } {\n    const queue = this.queues.get(userId) || [];\n\n    return {\n      isProcessing: this.activeProcesses.has(userId),\n      queueLength: queue.length,\n      operations: queue.map((op) => ({ ...op })), // Return copies\n    };\n  }\n\n  /**\n   * Clear completed operations from queue\n   */\n  clearCompletedOperations(userId: string): void {\n    const queue = this.queues.get(userId) || [];\n    const pending = queue.filter((op) => op.status === 'pending' || op.status === 'processing');\n    this.queues.set(userId, pending);\n\n    // Remove from operations map\n    queue\n      .filter((op) => op.status === 'completed' || op.status === 'error')\n      .forEach((op) => this.operations.delete(op.id));\n  }\n\n  // Private methods\n\n  private async processOperation(\n    operation: BatchOperation,\n    userId: string,\n    options: BatchProcessingOptions,\n  ): Promise<BatchOperation> {\n    operation.status = 'processing';\n    operation.updatedAt = new Date();\n\n    try {\n      let result;\n\n      switch (operation.type) {\n        case 'unit':\n          result = await this.processUnitPlanOperation(operation, userId);\n          break;\n        case 'lesson':\n          result = await this.processLessonPlanOperation(operation, userId);\n          break;\n        case 'expectation':\n          result = await this.processExpectationOperation(operation, userId);\n          break;\n        case 'resource':\n          result = await this.processResourceOperation(operation, userId);\n          break;\n        default:\n          throw new Error(`Unknown operation type: ${operation.type}`);\n      }\n\n      operation.status = 'completed';\n      operation.progress = 100;\n      operation.data = result;\n\n      if (options.onComplete) {\n        options.onComplete(operation);\n      }\n\n      return operation;\n    } catch (error) {\n      operation.retryCount = (operation.retryCount || 0) + 1;\n      operation.errors = operation.errors || [];\n      operation.errors.push(error.message);\n\n      if (operation.retryCount < options.maxRetries) {\n        // Retry the operation\n        await this.batchSleep(options.retryDelay * operation.retryCount);\n        return this.processOperation(operation, userId, options);\n      } else {\n        operation.status = 'error';\n\n        if (options.onError) {\n          options.onError(operation, error);\n        }\n\n        this.logger.error(\n          { operationId: operation.id, error: error.message, retryCount: operation.retryCount },\n          'Operation failed after max retries',\n        );\n\n        throw error;\n      }\n    } finally {\n      operation.updatedAt = new Date();\n      this.operations.set(operation.id, operation);\n    }\n  }\n\n  private async processUnitPlanOperation(\n    operation: BatchOperation,\n    userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as UnitPlanData;\n\n    return await this.withTransaction(async (tx) => {\n      const { expectationIds: _expectationIds, ...unitData } = data;\n      const unitPlan = await tx.unitPlan.create({\n        data: {\n          title: unitData.title,\n          longRangePlanId: unitData.longRangePlanId,\n          userId: parseInt(userId),\n          startDate: new Date(data.startDate),\n          endDate: new Date(data.endDate),\n        },\n      });\n\n      if (data.expectationIds && data.expectationIds.length > 0) {\n        await tx.unitPlanExpectation.createMany({\n          data: data.expectationIds.map((expectationId: string) => ({\n            unitPlanId: unitPlan.id,\n            expectationId,\n          })),\n        });\n      }\n\n      return unitPlan;\n    });\n  }\n\n  private async processLessonPlanOperation(\n    operation: BatchOperation,\n    userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as LessonPlanData;\n\n    return await this.withTransaction(async (tx) => {\n      const { expectationIds: _expectationIds, ...lessonData } = data;\n      const lessonPlan = await tx.eTFOLessonPlan.create({\n        data: {\n          title: lessonData.title,\n          unitPlanId: lessonData.unitPlanId,\n          userId: parseInt(userId),\n          date: new Date(data.date),\n          duration: lessonData.duration,\n        },\n      });\n\n      if (data.expectationIds && data.expectationIds.length > 0) {\n        await tx.eTFOLessonPlanExpectation.createMany({\n          data: data.expectationIds.map((expectationId: string) => ({\n            lessonPlanId: lessonPlan.id,\n            expectationId,\n          })),\n        });\n      }\n\n      return lessonPlan;\n    });\n  }\n\n  private async processExpectationOperation(\n    operation: BatchOperation,\n    _userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as ExpectationData;\n\n    return await this.withTransaction(async (tx) => {\n      return await tx.curriculumExpectation.create({\n        data: {\n          code: data.code,\n          description: data.description,\n          strand: data.strand,\n          subject: data.subject,\n          grade: data.grade || 0,\n        },\n      });\n    });\n  }\n\n  private async processResourceOperation(\n    operation: BatchOperation,\n    _userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as ResourceData;\n\n    return await this.withTransaction(async (tx) => {\n      if (data.unitPlanId) {\n        return await tx.unitPlanResource.create({\n          data: {\n            title: data.title as string,\n            type: data.type as string,\n            url: data.url as string,\n            unitPlan: { connect: { id: data.unitPlanId as string } }\n          },\n        });\n      } else if (data.lessonPlanId) {\n        return await tx.eTFOLessonPlanResource.create({\n          data: {\n            title: data.title as string,\n            type: data.type as string,\n            url: data.url as string,\n            lessonPlan: { connect: { id: data.lessonPlanId as string } }\n          },\n        });\n      } else {\n        throw new Error('Resource must be associated with either a unit plan or lesson plan');\n      }\n    });\n  }\n\n  private async validateUnitPlanOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as UnitPlanData;\n\n    if (!data.title || !data.longRangePlanId || !data.startDate || !data.endDate) {\n      throw new Error('Missing required fields for unit plan');\n    }\n\n    if (!data.expectationIds || data.expectationIds.length === 0) {\n      throw new Error('At least one curriculum expectation must be selected');\n    }\n\n    const startDate = new Date(data.startDate);\n    const endDate = new Date(data.endDate);\n\n    if (endDate <= startDate) {\n      throw new Error('End date must be after start date');\n    }\n  }\n\n  private async validateLessonPlanOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as LessonPlanData;\n\n    if (!data.title || !data.unitPlanId || !data.date) {\n      throw new Error('Missing required fields for lesson plan');\n    }\n\n    if (data.duration && (data.duration < 5 || data.duration > 480)) {\n      throw new Error('Lesson duration must be between 5 and 480 minutes');\n    }\n  }\n\n  private async validateExpectationOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as ExpectationData;\n\n    if (!data.code || !data.description || !data.strand || !data.subject) {\n      throw new Error('Missing required fields for curriculum expectation');\n    }\n  }\n\n  private async validateResourceOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as ResourceData;\n\n    if (!data.title || !data.type) {\n      throw new Error('Missing required fields for resource');\n    }\n\n    if (!data.unitPlanId && !data.lessonPlanId) {\n      throw new Error('Resource must be associated with either a unit plan or lesson plan');\n    }\n  }\n\n  private findDuplicateOperations(operations: BatchOperation[]): BatchOperation[] {\n    const seen = new Set<string>();\n    const duplicates: BatchOperation[] = [];\n\n    for (const operation of operations) {\n      const key = this.getOperationKey(operation);\n      if (seen.has(key)) {\n        duplicates.push(operation);\n      } else {\n        seen.add(key);\n      }\n    }\n\n    return duplicates;\n  }\n\n  private getOperationKey(operation: BatchOperation): string {\n    switch (operation.type) {\n      case 'unit': {\n        const data = operation.data as UnitPlanData;\n        return `unit_${data.title}_${data.longRangePlanId}`;\n      }\n      case 'lesson': {\n        const data = operation.data as LessonPlanData;\n        return `lesson_${data.title}_${data.unitPlanId}_${data.date}`;\n      }\n      case 'expectation': {\n        const data = operation.data as ExpectationData;\n        return `expectation_${data.code}_${data.subject}_${data.grade}`;\n      }\n      case 'resource': {\n        const data = operation.data as ResourceData;\n        return `resource_${data.title}_${data.unitPlanId || data.lessonPlanId}`;\n      }\n      default:\n        return operation.id;\n    }\n  }\n\n  private batchSleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\nexport const batchProcessingService = new BatchProcessingService();\n"],"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","ignoreList":[]}