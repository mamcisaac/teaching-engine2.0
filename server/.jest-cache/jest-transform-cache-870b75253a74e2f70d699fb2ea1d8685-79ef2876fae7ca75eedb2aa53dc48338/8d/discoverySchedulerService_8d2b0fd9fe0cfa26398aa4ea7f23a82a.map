{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts","mappings":"AAAA,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AA4B1E;;;GAGG;AACH,MAAM,OAAO,yBAA0B,SAAQ,WAAW;IAChD,cAAc,GAA+B,IAAI,GAAG,EAAE,CAAC;IACvD,YAAY,GAA+B,IAAI,GAAG,EAAE,CAAC;IACrD,UAAU,GAAgC,IAAI,GAAG,EAAE,CAAC;IACpD,aAAa,GAAY,KAAK,CAAC;IAEvC;QACE,KAAK,CAAC,2BAA2B,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,IAAI,IAAI,CAAC,aAAa;YAAE,OAAO;QAE/B,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;YAE7D,iCAAiC;YACjC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAEhC,sBAAsB;YACtB,IAAI,CAAC,cAAc,EAAE,CAAC;YAEtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;QAC3E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,kDAAkD,CAAC,CAAC;YACjF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB;QAC9B,MAAM,YAAY,GAAgC;YAChD;gBACE,IAAI,EAAE,4BAA4B;gBAClC,IAAI,EAAE,WAAW;gBACjB,SAAS,EAAE,OAAO;gBAClB,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;gBACrC,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,OAAO,EAAE,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC;oBAC7C,WAAW,EAAE,KAAK,EAAE,4CAA4C;iBACjE;aACF;YACD;gBACE,IAAI,EAAE,8BAA8B;gBACpC,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;gBACtC,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,SAAS,EAAE,EAAE,EAAE,gCAAgC;oBAC/C,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,yBAAyB;iBAC3D;aACF;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,IAAI,EAAE,SAAS;gBACf,SAAS,EAAE,SAAS;gBACpB,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;gBACvC,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,cAAc,EAAE,IAAI;oBACpB,eAAe,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,UAAU;iBACtD;aACF;SACF,CAAC;QAEF,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE,CAAC;YACpC,MAAM,IAAI,GAAkB;gBAC1B,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACtC,GAAG,QAAQ;aACZ,CAAC;YAEF,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED;;OAEG;IACK,cAAc;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAE5C,4BAA4B;QAC5B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC;YAChD,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;QAED,+CAA+C;QAC/C,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,IAAmB;QACtC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAElE,8BAA8B;QAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,aAAa,EAAE,CAAC;YAClB,YAAY,CAAC,aAAa,CAAC,CAAC;QAC9B,CAAC;QAED,oBAAoB;QACpB,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;YAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAEpC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,EACtE,gBAAgB,CACjB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,WAAW,CAAC,IAAmB;QAC3C,MAAM,SAAS,GAAkB;YAC/B,MAAM,EAAE,IAAI,CAAC,EAAE;YACf,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,MAAM,EAAE,SAAS;SAClB,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QAE1C,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,yBAAyB,CAAC,CAAC;YAEtF,IAAI,MAA+B,CAAC;YAEpC,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;gBAClB,KAAK,WAAW;oBACd,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oBAC/C,MAAM;gBACR,KAAK,cAAc;oBACjB,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;oBAClD,MAAM;gBACR,KAAK,SAAS;oBACZ,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBAC7C,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YACvD,CAAC;YAED,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;YAC1B,SAAS,CAAC,MAAM,GAAG,WAAW,CAAC;YAC/B,SAAS,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;YAE/B,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EACvH,6BAA6B,CAC9B,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC5B,SAAS,CAAC,KAAK,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC3E,SAAS,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;YAE/B,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAC/C,uBAAuB,CACxB,CAAC;QACJ,CAAC;gBAAS,CAAC;YACT,uBAAuB;YACvB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,SAAS,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjE,0BAA0B;YAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAExB,sDAAsD;YACtD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAAC,IAAmB;QACpD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3B,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,0BAA0B,CAAC,iBAAiB,EAAE,CAAC;YAEvE,IAAI,cAAc,GAAG,CAAC,CAAC;YACvB,MAAM,MAAM,GAAa,EAAE,CAAC;YAE5B,uCAAuC;YACvC,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;gBACvB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;oBACjC,IAAI,CAAC;wBACH,0EAA0E;wBAC1E,wCAAwC;wBACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAClD,gDAAgD,CACjD,CAAC;wBACF,cAAc,EAAE,CAAC;oBACnB,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,MAAM,QAAQ,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;wBAC1E,MAAM,CAAC,IAAI,CAAC,qBAAqB,QAAQ,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC,CAAC;oBAClE,CAAC;gBACH,CAAC;YACH,CAAC;YAED,OAAO;gBACL,cAAc,EAAE,SAAS,CAAC,MAAM;gBAChC,kBAAkB,EAAE,cAAc;gBAClC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;aAC/C,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,0BAA0B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;QACxG,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB,CAAC,IAAmB;QACvD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,SAAS,GAAI,MAAM,CAAC,SAAoB,IAAI,EAAE,CAAC;QACrD,MAAM,MAAM,GAAI,MAAM,CAAC,MAAiB,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAEpE,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,0BAA0B,CAAC,sBAAsB,EAAE,CAAC;YACtE,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YAEvB,wCAAwC;YACxC,MAAM,iBAAiB,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;gBAC/C,MAAM,qBAAqB,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;gBACzE,OAAO,qBAAqB,GAAG,MAAM,CAAC;YACxC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAEvB,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,MAAM,MAAM,GAAa,EAAE,CAAC;YAE5B,KAAK,MAAM,QAAQ,IAAI,iBAAiB,EAAE,CAAC;gBACzC,IAAI,CAAC;oBACH,MAAM,WAAW,GAAG,MAAM,0BAA0B,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAEjF,IAAI,WAAW,EAAE,CAAC;wBAChB,aAAa,EAAE,CAAC;oBAClB,CAAC;yBAAM,CAAC;wBACN,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAClD,iCAAiC,CAClC,CAAC;oBACJ,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,MAAM,QAAQ,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;oBAC1E,MAAM,CAAC,IAAI,CAAC,oBAAoB,QAAQ,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC,CAAC;gBACjE,CAAC;gBAED,mDAAmD;gBACnD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;YAED,OAAO;gBACL,iBAAiB,EAAE,aAAa;gBAChC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;aAC/C,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,6BAA6B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;QAC3G,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAAC,IAAmB;QAClD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,cAAc,GAAG,MAAM,CAAC,cAAyB,CAAC;QACxD,MAAM,eAAe,GAAI,MAAM,CAAC,eAA0B,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAEvF,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,0BAA0B,CAAC,sBAAsB,EAAE,CAAC;YACtE,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YAEvB,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,MAAM,MAAM,GAAa,EAAE,CAAC;YAE5B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;gBACjC,IAAI,YAAY,GAAG,KAAK,CAAC;gBAEzB,0CAA0C;gBAC1C,IAAI,cAAc,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;oBACzC,YAAY,GAAG,IAAI,CAAC;gBACtB,CAAC;gBAED,uBAAuB;gBACvB,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;gBACpE,IAAI,WAAW,GAAG,eAAe,EAAE,CAAC;oBAClC,YAAY,GAAG,IAAI,CAAC;gBACtB,CAAC;gBAED,IAAI,YAAY,EAAE,CAAC;oBACjB,IAAI,CAAC;wBACH,MAAM,OAAO,GAAG,0BAA0B,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;wBACjF,IAAI,OAAO,EAAE,CAAC;4BACZ,YAAY,EAAE,CAAC;4BACf,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAClD,iCAAiC,CAClC,CAAC;wBACJ,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,MAAM,QAAQ,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;wBAC1E,MAAM,CAAC,IAAI,CAAC,oBAAoB,QAAQ,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC,CAAC;oBACjE,CAAC;gBACH,CAAC;YACH,CAAC;YAED,OAAO;gBACL,kBAAkB,EAAE,YAAY;gBAChC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;aAC/C,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,wBAAwB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;QACtG,CAAC;IACH,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,SAAqC,EAAE,OAAc;QAC1E,MAAM,IAAI,GAAG,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAE5B,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,OAAO;gBACV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc;gBACzC,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc;gBACzC,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,yBAAyB;gBAC1C,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc;gBACzC,MAAM;QACV,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,IAAY;QACjC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACpE,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC;YAChD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,EACxC,0BAA0B,CAC3B,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,QAAmC;QACzC,MAAM,IAAI,GAAkB;YAC1B,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtC,GAAG,QAAQ;SACZ,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAEvC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,MAAc;QACvB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,KAAK,EAAE,CAAC;YACV,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEnD,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,cAAc,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,MAAc;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,eAAe;QACb,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,MAAc,EAAE,QAAiB;QAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAExB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,QAAQ,EAAE,CAAC;YACb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,KAAK,EAAE,CAAC;gBACV,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,EACzC,qBAAqB,CACtB,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc;QAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,mBAAmB,MAAM,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,4BAA4B,MAAM,EAAE,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,0BAA0B,CAAC,CAAC;QAC9E,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,iBAAiB;QAMf,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI;YACpC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM;YACpF,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI;YACpC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,0CAA0C;SACrG,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QAE9D,oBAAoB;QACpB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC;YAC7C,YAAY,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAExB,oDAAoD;QACpD,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAC5D,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,cAAc,CAAC,MAAM,4BAA4B,CAAC,CAAC;YAEnF,8CAA8C;YAC9C,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;YAClF,CAAC,EAAE,KAAK,CAAC,CAAC;YAEV,sBAAsB;YACtB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;gBAClC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;YAED,YAAY,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,EAAU;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;CACF;AAED,4BAA4B;AAC5B,MAAM,CAAC,MAAM,yBAAyB,GAAG,IAAI,yBAAyB,EAAE,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { curriculumDiscoveryService } from './curriculumDiscoveryService';\n// import { activityDiscoveryService } from './activityDiscoveryService'; // Unused import\n\nexport interface ScheduledTask {\n  id: string;\n  name: string;\n  type: 'discovery' | 'verification' | 'cleanup';\n  frequency: 'daily' | 'weekly' | 'monthly';\n  lastRun?: Date;\n  nextRun: Date;\n  isActive: boolean;\n  config: Record<string, unknown>;\n}\n\nexport interface TaskExecution {\n  taskId: string;\n  startTime: Date;\n  endTime?: Date;\n  status: 'running' | 'completed' | 'failed';\n  result?: {\n    documentsFound?: number;\n    documentsVerified?: number;\n    documentsProcessed?: number;\n    errors?: string[];\n  };\n  error?: string;\n}\n\n/**\n * Discovery Scheduler Service\n * Manages background tasks for curriculum document discovery and monitoring\n */\nexport class DiscoverySchedulerService extends BaseService {\n  private scheduledTasks: Map<string, ScheduledTask> = new Map();\n  private runningTasks: Map<string, TaskExecution> = new Map();\n  private taskTimers: Map<string, NodeJS.Timeout> = new Map();\n  private isInitialized: boolean = false;\n\n  constructor() {\n    super('DiscoverySchedulerService');\n  }\n\n  /**\n   * Initialize the scheduler with default tasks\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      this.logger.info('Initializing Discovery Scheduler Service');\n      \n      // Create default scheduled tasks\n      await this.createDefaultTasks();\n      \n      // Start the scheduler\n      this.startScheduler();\n      \n      this.isInitialized = true;\n      this.logger.info('Discovery Scheduler Service initialized successfully');\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to initialize Discovery Scheduler Service');\n      throw error;\n    }\n  }\n\n  /**\n   * Create default scheduled tasks\n   */\n  private async createDefaultTasks(): Promise<void> {\n    const defaultTasks: Omit<ScheduledTask, 'id'>[] = [\n      {\n        name: 'Daily Curriculum Discovery',\n        type: 'discovery',\n        frequency: 'daily',\n        nextRun: this.getNextRunTime('daily'),\n        isActive: true,\n        config: {\n          sources: ['pei-gov', 'ontario-edu', 'bc-gov'],\n          autoProcess: false, // Don't auto-process, require manual review\n        },\n      },\n      {\n        name: 'Weekly Document Verification',\n        type: 'verification',\n        frequency: 'weekly',\n        nextRun: this.getNextRunTime('weekly'),\n        isActive: true,\n        config: {\n          batchSize: 50, // Verify 50 documents at a time\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds\n        },\n      },\n      {\n        name: 'Monthly Cleanup',\n        type: 'cleanup',\n        frequency: 'monthly',\n        nextRun: this.getNextRunTime('monthly'),\n        isActive: true,\n        config: {\n          removeInactive: true,\n          removeOlderThan: 90 * 24 * 60 * 60 * 1000, // 90 days\n        },\n      },\n    ];\n\n    for (const taskData of defaultTasks) {\n      const task: ScheduledTask = {\n        id: this.generateTaskId(taskData.name),\n        ...taskData,\n      };\n      \n      this.scheduledTasks.set(task.id, task);\n      this.logger.info(`Created task: ${task.name} (${task.id})`);\n    }\n  }\n\n  /**\n   * Start the task scheduler\n   */\n  private startScheduler(): void {\n    this.logger.info('Starting task scheduler');\n    \n    // Schedule all active tasks\n    for (const task of this.scheduledTasks.values()) {\n      if (task.isActive) {\n        this.scheduleTask(task);\n      }\n    }\n\n    // Set up periodic scheduler check (every hour)\n    setInterval(() => {\n      this.checkAndScheduleTasks();\n    }, 60 * 60 * 1000);\n  }\n\n  /**\n   * Schedule a specific task\n   */\n  private scheduleTask(task: ScheduledTask): void {\n    const now = new Date();\n    const delay = Math.max(0, task.nextRun.getTime() - now.getTime());\n    \n    // Clear existing timer if any\n    const existingTimer = this.taskTimers.get(task.id);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Schedule the task\n    const timer = setTimeout(() => {\n      this.executeTask(task);\n    }, delay);\n\n    this.taskTimers.set(task.id, timer);\n    \n    this.logger.info(\n      { taskId: task.id, taskName: task.name, nextRun: task.nextRun, delay },\n      'Task scheduled'\n    );\n  }\n\n  /**\n   * Execute a scheduled task\n   */\n  private async executeTask(task: ScheduledTask): Promise<void> {\n    const execution: TaskExecution = {\n      taskId: task.id,\n      startTime: new Date(),\n      status: 'running',\n    };\n\n    this.runningTasks.set(task.id, execution);\n\n    try {\n      this.logger.info({ taskId: task.id, taskName: task.name }, 'Starting task execution');\n\n      let result: TaskExecution['result'];\n\n      switch (task.type) {\n        case 'discovery':\n          result = await this.executeDiscoveryTask(task);\n          break;\n        case 'verification':\n          result = await this.executeVerificationTask(task);\n          break;\n        case 'cleanup':\n          result = await this.executeCleanupTask(task);\n          break;\n        default:\n          throw new Error(`Unknown task type: ${task.type}`);\n      }\n\n      execution.result = result;\n      execution.status = 'completed';\n      execution.endTime = new Date();\n\n      this.logger.info(\n        { taskId: task.id, taskName: task.name, result, duration: execution.endTime.getTime() - execution.startTime.getTime() },\n        'Task completed successfully'\n      );\n    } catch (error) {\n      execution.status = 'failed';\n      execution.error = error instanceof Error ? error.message : 'Unknown error';\n      execution.endTime = new Date();\n\n      this.logger.error(\n        { taskId: task.id, taskName: task.name, error },\n        'Task execution failed'\n      );\n    } finally {\n      // Update task schedule\n      task.lastRun = execution.startTime;\n      task.nextRun = this.getNextRunTime(task.frequency, task.lastRun);\n\n      // Schedule next execution\n      this.scheduleTask(task);\n\n      // Keep execution record but remove from running tasks\n      this.runningTasks.delete(task.id);\n    }\n  }\n\n  /**\n   * Execute curriculum discovery task\n   */\n  private async executeDiscoveryTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    \n    try {\n      const documents = await curriculumDiscoveryService.discoverDocuments();\n      \n      let processedCount = 0;\n      const errors: string[] = [];\n\n      // Auto-process documents if configured\n      if (config.autoProcess) {\n        for (const document of documents) {\n          try {\n            // This would require a user ID - in practice, this might be a system user\n            // For now, we'll just log the discovery\n            this.logger.info(\n              { documentId: document.id, title: document.title },\n              'Document discovered (auto-processing disabled)'\n            );\n            processedCount++;\n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to process ${document.title}: ${errorMsg}`);\n          }\n        }\n      }\n\n      return {\n        documentsFound: documents.length,\n        documentsProcessed: processedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Discovery task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute document verification task\n   */\n  private async executeVerificationTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    const batchSize = (config.batchSize as number) || 50;\n    const maxAge = (config.maxAge as number) || 7 * 24 * 60 * 60 * 1000;\n\n    try {\n      const documents = curriculumDiscoveryService.getDiscoveredDocuments();\n      const now = new Date();\n      \n      // Find documents that need verification\n      const documentsToVerify = documents.filter(doc => {\n        const timeSinceVerification = now.getTime() - doc.lastVerified.getTime();\n        return timeSinceVerification > maxAge;\n      }).slice(0, batchSize);\n\n      let verifiedCount = 0;\n      const errors: string[] = [];\n\n      for (const document of documentsToVerify) {\n        try {\n          const isAvailable = await curriculumDiscoveryService.verifyDocument(document.id);\n          \n          if (isAvailable) {\n            verifiedCount++;\n          } else {\n            this.logger.warn(\n              { documentId: document.id, title: document.title },\n              'Document is no longer available'\n            );\n          }\n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          errors.push(`Failed to verify ${document.title}: ${errorMsg}`);\n        }\n\n        // Add delay between verifications to be respectful\n        await this.delay(1000);\n      }\n\n      return {\n        documentsVerified: verifiedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Verification task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute cleanup task\n   */\n  private async executeCleanupTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    const removeInactive = config.removeInactive as boolean;\n    const removeOlderThan = (config.removeOlderThan as number) || 90 * 24 * 60 * 60 * 1000;\n\n    try {\n      const documents = curriculumDiscoveryService.getDiscoveredDocuments();\n      const now = new Date();\n      \n      let removedCount = 0;\n      const errors: string[] = [];\n\n      for (const document of documents) {\n        let shouldRemove = false;\n\n        // Remove inactive documents if configured\n        if (removeInactive && !document.isActive) {\n          shouldRemove = true;\n        }\n\n        // Remove old documents\n        const documentAge = now.getTime() - document.lastVerified.getTime();\n        if (documentAge > removeOlderThan) {\n          shouldRemove = true;\n        }\n\n        if (shouldRemove) {\n          try {\n            const removed = curriculumDiscoveryService.removeDiscoveredDocument(document.id);\n            if (removed) {\n              removedCount++;\n              this.logger.info(\n                { documentId: document.id, title: document.title },\n                'Document removed during cleanup'\n              );\n            }\n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to remove ${document.title}: ${errorMsg}`);\n          }\n        }\n      }\n\n      return {\n        documentsProcessed: removedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Cleanup task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get the next run time for a task frequency\n   */\n  private getNextRunTime(frequency: ScheduledTask['frequency'], lastRun?: Date): Date {\n    const base = lastRun || new Date();\n    const next = new Date(base);\n\n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        next.setHours(2, 0, 0, 0); // Run at 2 AM\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        next.setHours(3, 0, 0, 0); // Run at 3 AM\n        break;\n      case 'monthly':\n        next.setMonth(next.getMonth() + 1);\n        next.setDate(1); // First day of the month\n        next.setHours(4, 0, 0, 0); // Run at 4 AM\n        break;\n    }\n\n    return next;\n  }\n\n  /**\n   * Generate a unique task ID\n   */\n  private generateTaskId(name: string): string {\n    return name.toLowerCase().replace(/\\s+/g, '-') + '-' + Date.now();\n  }\n\n  /**\n   * Check and schedule tasks that might have been missed\n   */\n  private checkAndScheduleTasks(): void {\n    const now = new Date();\n    \n    for (const task of this.scheduledTasks.values()) {\n      if (task.isActive && task.nextRun <= now && !this.runningTasks.has(task.id)) {\n        this.logger.info(\n          { taskId: task.id, taskName: task.name },\n          'Rescheduling missed task'\n        );\n        this.scheduleTask(task);\n      }\n    }\n  }\n\n  /**\n   * Add a new scheduled task\n   */\n  addTask(taskData: Omit<ScheduledTask, 'id'>): string {\n    const task: ScheduledTask = {\n      id: this.generateTaskId(taskData.name),\n      ...taskData,\n    };\n\n    this.scheduledTasks.set(task.id, task);\n    \n    if (task.isActive) {\n      this.scheduleTask(task);\n    }\n\n    this.logger.info({ taskId: task.id, taskName: task.name }, 'Task added');\n    return task.id;\n  }\n\n  /**\n   * Remove a scheduled task\n   */\n  removeTask(taskId: string): boolean {\n    const timer = this.taskTimers.get(taskId);\n    if (timer) {\n      clearTimeout(timer);\n      this.taskTimers.delete(taskId);\n    }\n\n    const removed = this.scheduledTasks.delete(taskId);\n    \n    if (removed) {\n      this.logger.info({ taskId }, 'Task removed');\n    }\n\n    return removed;\n  }\n\n  /**\n   * Get all scheduled tasks\n   */\n  getTasks(): ScheduledTask[] {\n    return Array.from(this.scheduledTasks.values());\n  }\n\n  /**\n   * Get task by ID\n   */\n  getTask(taskId: string): ScheduledTask | undefined {\n    return this.scheduledTasks.get(taskId);\n  }\n\n  /**\n   * Get running tasks\n   */\n  getRunningTasks(): TaskExecution[] {\n    return Array.from(this.runningTasks.values());\n  }\n\n  /**\n   * Enable or disable a task\n   */\n  setTaskStatus(taskId: string, isActive: boolean): boolean {\n    const task = this.scheduledTasks.get(taskId);\n    if (!task) return false;\n\n    task.isActive = isActive;\n\n    if (isActive) {\n      this.scheduleTask(task);\n    } else {\n      const timer = this.taskTimers.get(taskId);\n      if (timer) {\n        clearTimeout(timer);\n        this.taskTimers.delete(taskId);\n      }\n    }\n\n    this.logger.info(\n      { taskId, taskName: task.name, isActive },\n      'Task status updated'\n    );\n\n    return true;\n  }\n\n  /**\n   * Manually trigger a task\n   */\n  async triggerTask(taskId: string): Promise<void> {\n    const task = this.scheduledTasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    if (this.runningTasks.has(taskId)) {\n      throw new Error(`Task is already running: ${taskId}`);\n    }\n\n    this.logger.info({ taskId, taskName: task.name }, 'Manually triggering task');\n    await this.executeTask(task);\n  }\n\n  /**\n   * Get scheduler statistics\n   */\n  getSchedulerStats(): {\n    totalTasks: number;\n    activeTasks: number;\n    runningTasks: number;\n    uptime: number;\n  } {\n    return {\n      totalTasks: this.scheduledTasks.size,\n      activeTasks: Array.from(this.scheduledTasks.values()).filter(t => t.isActive).length,\n      runningTasks: this.runningTasks.size,\n      uptime: this.isInitialized ? Date.now() - Date.now() : 0, // Would track actual uptime in production\n    };\n  }\n\n  /**\n   * Shutdown the scheduler\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Discovery Scheduler Service');\n\n    // Cancel all timers\n    for (const timer of this.taskTimers.values()) {\n      clearTimeout(timer);\n    }\n    this.taskTimers.clear();\n\n    // Wait for running tasks to complete (with timeout)\n    const runningTaskIds = Array.from(this.runningTasks.keys());\n    if (runningTaskIds.length > 0) {\n      this.logger.info(`Waiting for ${runningTaskIds.length} running tasks to complete`);\n      \n      // Wait up to 30 seconds for tasks to complete\n      const timeout = setTimeout(() => {\n        this.logger.warn('Shutdown timeout reached, some tasks may not have completed');\n      }, 30000);\n\n      // Poll for completion\n      while (this.runningTasks.size > 0) {\n        await this.delay(1000);\n      }\n\n      clearTimeout(timeout);\n    }\n\n    this.isInitialized = false;\n    this.logger.info('Discovery Scheduler Service shutdown complete');\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const discoverySchedulerService = new DiscoverySchedulerService();"],"version":3}