caa5562f0c4e8dc81c0d8af0dfee8fdd
import { describe, it, expect, beforeAll, beforeEach } from '@jest/globals';
import { app } from '../../src/index';
import { authRequest } from '../test-auth-helper';
import { getTestPrismaClient } from '../jest.setup';
import { setupAuthenticatedTest } from '../test-setup-helpers';
// DISABLED: Equipment booking is an archived feature not currently implemented
describe.skip('Equipment Booking API - DISABLED (archived feature)', () => {
    let teacherId;
    let prisma;
    const auth = authRequest(app);
    beforeAll(async () => {
        prisma = getTestPrismaClient();
    });
    beforeEach(async () => {
        // Setup auth for each test to handle database resets
        await setupAuthenticatedTest(prisma, auth);
        // Create a teacher for the equipment bookings
        const teacher = await prisma.user.create({
            data: { email: `eb${Date.now()}@e.com`, password: 'x', name: 'EB', preferredLanguage: 'en' },
        });
        teacherId = teacher.id;
    });
    // No need for afterAll cleanup - database is reset after each test
    it('creates and lists bookings', async () => {
        const create = await auth.post('/api/equipment-bookings').send({
            teacherId,
            resourceName: 'iPad Cart',
            neededBy: '2025-03-01T00:00:00.000Z',
            leadTimeDays: 10,
        });
        expect(create.status).toBe(201);
        const list = await auth.get(`/api/equipment-bookings?teacherId=${teacherId}`);
        expect(list.status).toBe(200);
        expect(list.body.length).toBeGreaterThan(0);
    });
    describe('Edge Cases', () => {
        it('should handle empty data scenarios', async () => {
            // Test with missing required fields
            const missingTeacher = await auth.post('/api/equipment-bookings').send({
                resourceName: 'iPad Cart',
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 10,
            });
            expect(missingTeacher.status).toBe(400);
            const missingResource = await auth.post('/api/equipment-bookings').send({
                teacherId,
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 10,
            });
            expect(missingResource.status).toBe(400);
            // Test empty string values
            const emptyResource = await auth.post('/api/equipment-bookings').send({
                teacherId,
                resourceName: '',
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 10,
            });
            expect(emptyResource.status).toBe(400);
        });
        it('should handle maximum data limits', async () => {
            // Test extremely long resource names
            const longResourceName = 'a'.repeat(1000);
            const longName = await auth.post('/api/equipment-bookings').send({
                teacherId,
                resourceName: longResourceName,
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 10,
            });
            expect(longName.status).toBe(400);
            // Test maximum lead time
            const maxLeadTime = await auth.post('/api/equipment-bookings').send({
                teacherId,
                resourceName: 'iPad Cart',
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 999999,
            });
            expect(maxLeadTime.status).toBe(400);
        });
        it('should handle special characters and Unicode', async () => {
            const specialChars = [
                'iPad Cart (franÃ§ais)',
                'Ã‰quipement spÃ©cial',
                'iPad ðŸ“± Cart',
                'Equipment "Quote" Test',
                "Equipment 'Apostrophe' Test",
                'Equipment\\BackslashTest',
                'Equipment%PercentTest',
            ];
            for (const resourceName of specialChars) {
                const response = await auth.post('/api/equipment-bookings').send({
                    teacherId,
                    resourceName,
                    neededBy: '2025-03-01T00:00:00.000Z',
                    leadTimeDays: 5,
                });
                // Should handle special characters gracefully
                expect([200, 201, 400]).toContain(response.status);
            }
        });
        it('should handle invalid date formats', async () => {
            const invalidDates = [
                'invalid-date',
                '2025-13-01T00:00:00.000Z', // Invalid month
                '2025-02-30T00:00:00.000Z', // Invalid day
                '2025-01-01T25:00:00.000Z', // Invalid hour
                '2025-01-01', // Missing time
                '', // Empty string
                null, // Null value
                undefined, // Undefined value
            ];
            for (const date of invalidDates) {
                const response = await auth.post('/api/equipment-bookings').send({
                    teacherId,
                    resourceName: 'iPad Cart',
                    neededBy: date,
                    leadTimeDays: 10,
                });
                expect(response.status).toBe(400);
            }
        });
        it('should handle past dates', async () => {
            const pastDate = new Date('2020-01-01T00:00:00.000Z');
            const response = await auth.post('/api/equipment-bookings').send({
                teacherId,
                resourceName: 'iPad Cart',
                neededBy: pastDate.toISOString(),
                leadTimeDays: 10,
            });
            expect(response.status).toBe(400);
        });
        it('should handle negative and zero values', async () => {
            // Test negative lead time
            const negativeLeadTime = await auth.post('/api/equipment-bookings').send({
                teacherId,
                resourceName: 'iPad Cart',
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: -5,
            });
            expect(negativeLeadTime.status).toBe(400);
            // Test zero lead time
            const zeroLeadTime = await auth.post('/api/equipment-bookings').send({
                teacherId,
                resourceName: 'iPad Cart',
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 0,
            });
            expect([200, 201, 400]).toContain(zeroLeadTime.status);
            // Test negative teacher ID
            const negativeTeacher = await auth.post('/api/equipment-bookings').send({
                teacherId: -1,
                resourceName: 'iPad Cart',
                neededBy: '2025-03-01T00:00:00.000Z',
                leadTimeDays: 10,
            });
            expect(negativeTeacher.status).toBe(400);
        });
        it('should handle concurrent booking requests', async () => {
            const bookingData = {
                teacherId,
                resourceName: 'Shared iPad Cart',
                neededBy: '2025-04-01T00:00:00.000Z',
                leadTimeDays: 10,
            };
            // Create multiple concurrent booking requests
            const concurrentRequests = Array.from({ length: 5 }, () => auth.post('/api/equipment-bookings').send(bookingData));
            const responses = await Promise.all(concurrentRequests);
            // At least one should succeed
            const successfulRequests = responses.filter((r) => r.status === 201);
            expect(successfulRequests.length).toBeGreaterThan(0);
        });
        it('should handle extreme numeric values', async () => {
            const extremeValues = [
                Number.MAX_SAFE_INTEGER,
                Number.MIN_SAFE_INTEGER,
                Infinity,
                -Infinity,
                NaN,
            ];
            for (const value of extremeValues) {
                const response = await auth.post('/api/equipment-bookings').send({
                    teacherId: value,
                    resourceName: 'iPad Cart',
                    neededBy: '2025-03-01T00:00:00.000Z',
                    leadTimeDays: 10,
                });
                expect(response.status).toBe(400);
            }
        });
        it('should handle malformed JSON and request bodies', async () => {
            // Test with invalid JSON structure
            const malformedRequests = [
                { teacherId: 'not-a-number' },
                { leadTimeDays: 'not-a-number' },
                { neededBy: 12345 }, // Number instead of string
                { additionalField: 'should-be-ignored' },
            ];
            for (const data of malformedRequests) {
                const response = await auth.post('/api/equipment-bookings').send({
                    ...data,
                    teacherId: data.teacherId || teacherId,
                    resourceName: 'iPad Cart',
                    neededBy: data.neededBy || '2025-03-01T00:00:00.000Z',
                    leadTimeDays: data.leadTimeDays || 10,
                });
                // Should handle malformed data gracefully
                expect([200, 201, 400]).toContain(response.status);
            }
        });
        it('should handle timezone edge cases', async () => {
            const timezoneTestCases = [
                '2025-03-01T00:00:00.000Z', // UTC
                '2025-03-01T05:00:00.000-05:00', // EST
                '2025-03-01T23:59:59.999Z', // End of day UTC
                '2025-03-01T00:00:00.001Z', // Start of day UTC
            ];
            for (const dateString of timezoneTestCases) {
                const response = await auth.post('/api/equipment-bookings').send({
                    teacherId,
                    resourceName: 'Timezone Test Cart',
                    neededBy: dateString,
                    leadTimeDays: 5,
                });
                // Should handle all valid ISO date formats
                expect([200, 201]).toContain(response.status);
            }
        });
        it('should handle leap year and DST transitions', async () => {
            const specialDates = [
                '2024-02-29T00:00:00.000Z', // Leap year
                '2025-03-09T07:00:00.000Z', // DST begins (US)
                '2025-11-02T06:00:00.000Z', // DST ends (US)
                '2025-12-31T23:59:59.999Z', // Year end
                '2026-01-01T00:00:00.000Z', // Year start
            ];
            for (const dateString of specialDates) {
                const response = await auth.post('/api/equipment-bookings').send({
                    teacherId,
                    resourceName: 'Calendar Edge Case Cart',
                    neededBy: dateString,
                    leadTimeDays: 7,
                });
                expect([200, 201]).toContain(response.status);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2VxdWlwbWVudEJvb2tpbmcudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUvRCwrRUFBK0U7QUFDL0UsUUFBUSxDQUFDLElBQUksQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7SUFDeEUsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLElBQUksTUFBOEMsQ0FBQztJQUNuRCxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFOUIsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLHFEQUFxRDtRQUNyRCxNQUFNLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUzQyw4Q0FBOEM7UUFDOUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFO1NB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SSxDQUFDO29CQUMvRCxTQUFTO29CQUNULFlBQVksRUFBRSxvQkFBb0I7b0JBQ2xDLFFBQVEsRUFBRSxVQUFVO29CQUNwQixZQUFZLEVBQUUsQ0FBQztpQkFDaEIsQ0FBQyxDQUFDO2dCQUVILDJDQUEyQztnQkFDM0MsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDM0QsTUFBTSxZQUFZLEdBQUc7Z0JBQ25CLDBCQUEwQixFQUFFLFlBQVk7Z0JBQ3hDLDBCQUEwQixFQUFFLGtCQUFrQjtnQkFDOUMsMEJBQTBCLEVBQUUsZ0JBQWdCO2dCQUM1QywwQkFBMEIsRUFBRSxXQUFXO2dCQUN2QywwQkFBMEIsRUFBRSxhQUFhO2FBQzFDLENBQUM7WUFFRixLQUFLLE1BQU0sVUFBVSxJQUFJLFlBQVksRUFBRSxDQUFDO2dCQUN0QyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQy9ELFNBQVM7b0JBQ1QsWUFBWSxFQUFFLHlCQUF5QjtvQkFDdkMsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFlBQVksRUFBRSxDQUFDO2lCQUNoQixDQUFDLENBQUM7Z0JBRUgsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy9pbnRlZ3JhdGlvbi9lcXVpcG1lbnRCb29raW5nLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGJlZm9yZUFsbCwgYmVmb3JlRWFjaCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vLi4vc3JjL2luZGV4JztcbmltcG9ydCB7IGF1dGhSZXF1ZXN0IH0gZnJvbSAnLi4vdGVzdC1hdXRoLWhlbHBlcic7XG5pbXBvcnQgeyBnZXRUZXN0UHJpc21hQ2xpZW50IH0gZnJvbSAnLi4vamVzdC5zZXR1cCc7XG5pbXBvcnQgeyBzZXR1cEF1dGhlbnRpY2F0ZWRUZXN0IH0gZnJvbSAnLi4vdGVzdC1zZXR1cC1oZWxwZXJzJztcblxuLy8gRElTQUJMRUQ6IEVxdWlwbWVudCBib29raW5nIGlzIGFuIGFyY2hpdmVkIGZlYXR1cmUgbm90IGN1cnJlbnRseSBpbXBsZW1lbnRlZFxuZGVzY3JpYmUuc2tpcCgnRXF1aXBtZW50IEJvb2tpbmcgQVBJIC0gRElTQUJMRUQgKGFyY2hpdmVkIGZlYXR1cmUpJywgKCkgPT4ge1xuICBsZXQgdGVhY2hlcklkOiBudW1iZXI7XG4gIGxldCBwcmlzbWE6IFJldHVyblR5cGU8dHlwZW9mIGdldFRlc3RQcmlzbWFDbGllbnQ+O1xuICBjb25zdCBhdXRoID0gYXV0aFJlcXVlc3QoYXBwKTtcblxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIHByaXNtYSA9IGdldFRlc3RQcmlzbWFDbGllbnQoKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gU2V0dXAgYXV0aCBmb3IgZWFjaCB0ZXN0IHRvIGhhbmRsZSBkYXRhYmFzZSByZXNldHNcbiAgICBhd2FpdCBzZXR1cEF1dGhlbnRpY2F0ZWRUZXN0KHByaXNtYSwgYXV0aCk7XG5cbiAgICAvLyBDcmVhdGUgYSB0ZWFjaGVyIGZvciB0aGUgZXF1aXBtZW50IGJvb2tpbmdzXG4gICAgY29uc3QgdGVhY2hlciA9IGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7IGVtYWlsOiBgZWIke0RhdGUubm93KCl9QGUuY29tYCwgcGFzc3dvcmQ6ICd4JywgbmFtZTogJ0VCJywgcHJlZmVycmVkTGFuZ3VhZ2U6ICdlbicgfSxcbiAgICB9KTtcbiAgICB0ZWFjaGVySWQgPSB0ZWFjaGVyLmlkO1xuICB9KTtcblxuICAvLyBObyBuZWVkIGZvciBhZnRlckFsbCBjbGVhbnVwIC0gZGF0YWJhc2UgaXMgcmVzZXQgYWZ0ZXIgZWFjaCB0ZXN0XG5cbiAgaXQoJ2NyZWF0ZXMgYW5kIGxpc3RzIGJvb2tpbmdzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNyZWF0ZSA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9lcXVpcG1lbnQtYm9va2luZ3MnKS5zZW5kKHtcbiAgICAgIHRlYWNoZXJJZCxcbiAgICAgIHJlc291cmNlTmFtZTogJ2lQYWQgQ2FydCcsXG4gICAgICBuZWVkZWRCeTogJzIwMjUtMDMtMDFUMDA6MDA6MDAuMDAwWicsXG4gICAgICBsZWFkVGltZURheXM6IDEwLFxuICAgIH0pO1xuICAgIGV4cGVjdChjcmVhdGUuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IGF1dGguZ2V0KGAvYXBpL2VxdWlwbWVudC1ib29raW5ncz90ZWFjaGVySWQ9JHt0ZWFjaGVySWR9YCk7XG4gICAgZXhwZWN0KGxpc3Quc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KGxpc3QuYm9keS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZGF0YSBzY2VuYXJpb3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBUZXN0IHdpdGggbWlzc2luZyByZXF1aXJlZCBmaWVsZHNcbiAgICAgIGNvbnN0IG1pc3NpbmdUZWFjaGVyID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICByZXNvdXJjZU5hbWU6ICdpUGFkIENhcnQnLFxuICAgICAgICBuZWVkZWRCeTogJzIwMjUtMDMtMDFUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgIGxlYWRUaW1lRGF5czogMTAsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChtaXNzaW5nVGVhY2hlci5zdGF0dXMpLnRvQmUoNDAwKTtcblxuICAgICAgY29uc3QgbWlzc2luZ1Jlc291cmNlID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICB0ZWFjaGVySWQsXG4gICAgICAgIG5lZWRlZEJ5OiAnMjAyNS0wMy0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgbGVhZFRpbWVEYXlzOiAxMCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KG1pc3NpbmdSZXNvdXJjZS5zdGF0dXMpLnRvQmUoNDAwKTtcblxuICAgICAgLy8gVGVzdCBlbXB0eSBzdHJpbmcgdmFsdWVzXG4gICAgICBjb25zdCBlbXB0eVJlc291cmNlID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICB0ZWFjaGVySWQsXG4gICAgICAgIHJlc291cmNlTmFtZTogJycsXG4gICAgICAgIG5lZWRlZEJ5OiAnMjAyNS0wMy0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgbGVhZFRpbWVEYXlzOiAxMCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGVtcHR5UmVzb3VyY2Uuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtYXhpbXVtIGRhdGEgbGltaXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGVzdCBleHRyZW1lbHkgbG9uZyByZXNvdXJjZSBuYW1lc1xuICAgICAgY29uc3QgbG9uZ1Jlc291cmNlTmFtZSA9ICdhJy5yZXBlYXQoMTAwMCk7XG4gICAgICBjb25zdCBsb25nTmFtZSA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9lcXVpcG1lbnQtYm9va2luZ3MnKS5zZW5kKHtcbiAgICAgICAgdGVhY2hlcklkLFxuICAgICAgICByZXNvdXJjZU5hbWU6IGxvbmdSZXNvdXJjZU5hbWUsXG4gICAgICAgIG5lZWRlZEJ5OiAnMjAyNS0wMy0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgbGVhZFRpbWVEYXlzOiAxMCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGxvbmdOYW1lLnN0YXR1cykudG9CZSg0MDApO1xuXG4gICAgICAvLyBUZXN0IG1heGltdW0gbGVhZCB0aW1lXG4gICAgICBjb25zdCBtYXhMZWFkVGltZSA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9lcXVpcG1lbnQtYm9va2luZ3MnKS5zZW5kKHtcbiAgICAgICAgdGVhY2hlcklkLFxuICAgICAgICByZXNvdXJjZU5hbWU6ICdpUGFkIENhcnQnLFxuICAgICAgICBuZWVkZWRCeTogJzIwMjUtMDMtMDFUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgIGxlYWRUaW1lRGF5czogOTk5OTk5LFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobWF4TGVhZFRpbWUuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIFVuaWNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzcGVjaWFsQ2hhcnMgPSBbXG4gICAgICAgICdpUGFkIENhcnQgKGZyYW7Dp2FpcyknLFxuICAgICAgICAnw4lxdWlwZW1lbnQgc3DDqWNpYWwnLFxuICAgICAgICAnaVBhZCDwn5OxIENhcnQnLFxuICAgICAgICAnRXF1aXBtZW50IFwiUXVvdGVcIiBUZXN0JyxcbiAgICAgICAgXCJFcXVpcG1lbnQgJ0Fwb3N0cm9waGUnIFRlc3RcIixcbiAgICAgICAgJ0VxdWlwbWVudFxcXFxCYWNrc2xhc2hUZXN0JyxcbiAgICAgICAgJ0VxdWlwbWVudCVQZXJjZW50VGVzdCcsXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IHJlc291cmNlTmFtZSBvZiBzcGVjaWFsQ2hhcnMpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvZXF1aXBtZW50LWJvb2tpbmdzJykuc2VuZCh7XG4gICAgICAgICAgdGVhY2hlcklkLFxuICAgICAgICAgIHJlc291cmNlTmFtZSxcbiAgICAgICAgICBuZWVkZWRCeTogJzIwMjUtMDMtMDFUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgICAgbGVhZFRpbWVEYXlzOiA1LFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gU2hvdWxkIGhhbmRsZSBzcGVjaWFsIGNoYXJhY3RlcnMgZ3JhY2VmdWxseVxuICAgICAgICBleHBlY3QoWzIwMCwgMjAxLCA0MDBdKS50b0NvbnRhaW4ocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgZGF0ZSBmb3JtYXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW52YWxpZERhdGVzID0gW1xuICAgICAgICAnaW52YWxpZC1kYXRlJyxcbiAgICAgICAgJzIwMjUtMTMtMDFUMDA6MDA6MDAuMDAwWicsIC8vIEludmFsaWQgbW9udGhcbiAgICAgICAgJzIwMjUtMDItMzBUMDA6MDA6MDAuMDAwWicsIC8vIEludmFsaWQgZGF5XG4gICAgICAgICcyMDI1LTAxLTAxVDI1OjAwOjAwLjAwMFonLCAvLyBJbnZhbGlkIGhvdXJcbiAgICAgICAgJzIwMjUtMDEtMDEnLCAvLyBNaXNzaW5nIHRpbWVcbiAgICAgICAgJycsIC8vIEVtcHR5IHN0cmluZ1xuICAgICAgICBudWxsLCAvLyBOdWxsIHZhbHVlXG4gICAgICAgIHVuZGVmaW5lZCwgLy8gVW5kZWZpbmVkIHZhbHVlXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IGRhdGUgb2YgaW52YWxpZERhdGVzKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICAgIHRlYWNoZXJJZCxcbiAgICAgICAgICByZXNvdXJjZU5hbWU6ICdpUGFkIENhcnQnLFxuICAgICAgICAgIG5lZWRlZEJ5OiBkYXRlLFxuICAgICAgICAgIGxlYWRUaW1lRGF5czogMTAsXG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBwYXN0IGRhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGFzdERhdGUgPSBuZXcgRGF0ZSgnMjAyMC0wMS0wMVQwMDowMDowMC4wMDBaJyk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9lcXVpcG1lbnQtYm9va2luZ3MnKS5zZW5kKHtcbiAgICAgICAgdGVhY2hlcklkLFxuICAgICAgICByZXNvdXJjZU5hbWU6ICdpUGFkIENhcnQnLFxuICAgICAgICBuZWVkZWRCeTogcGFzdERhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgbGVhZFRpbWVEYXlzOiAxMCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmVnYXRpdmUgYW5kIHplcm8gdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVGVzdCBuZWdhdGl2ZSBsZWFkIHRpbWVcbiAgICAgIGNvbnN0IG5lZ2F0aXZlTGVhZFRpbWUgPSBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvZXF1aXBtZW50LWJvb2tpbmdzJykuc2VuZCh7XG4gICAgICAgIHRlYWNoZXJJZCxcbiAgICAgICAgcmVzb3VyY2VOYW1lOiAnaVBhZCBDYXJ0JyxcbiAgICAgICAgbmVlZGVkQnk6ICcyMDI1LTAzLTAxVDAwOjAwOjAwLjAwMFonLFxuICAgICAgICBsZWFkVGltZURheXM6IC01LFxuICAgICAgfSk7XG4gICAgICBleHBlY3QobmVnYXRpdmVMZWFkVGltZS5zdGF0dXMpLnRvQmUoNDAwKTtcblxuICAgICAgLy8gVGVzdCB6ZXJvIGxlYWQgdGltZVxuICAgICAgY29uc3QgemVyb0xlYWRUaW1lID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICB0ZWFjaGVySWQsXG4gICAgICAgIHJlc291cmNlTmFtZTogJ2lQYWQgQ2FydCcsXG4gICAgICAgIG5lZWRlZEJ5OiAnMjAyNS0wMy0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgbGVhZFRpbWVEYXlzOiAwLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoWzIwMCwgMjAxLCA0MDBdKS50b0NvbnRhaW4oemVyb0xlYWRUaW1lLnN0YXR1cyk7XG5cbiAgICAgIC8vIFRlc3QgbmVnYXRpdmUgdGVhY2hlciBJRFxuICAgICAgY29uc3QgbmVnYXRpdmVUZWFjaGVyID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICB0ZWFjaGVySWQ6IC0xLFxuICAgICAgICByZXNvdXJjZU5hbWU6ICdpUGFkIENhcnQnLFxuICAgICAgICBuZWVkZWRCeTogJzIwMjUtMDMtMDFUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgIGxlYWRUaW1lRGF5czogMTAsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChuZWdhdGl2ZVRlYWNoZXIuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb25jdXJyZW50IGJvb2tpbmcgcmVxdWVzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBib29raW5nRGF0YSA9IHtcbiAgICAgICAgdGVhY2hlcklkLFxuICAgICAgICByZXNvdXJjZU5hbWU6ICdTaGFyZWQgaVBhZCBDYXJ0JyxcbiAgICAgICAgbmVlZGVkQnk6ICcyMDI1LTA0LTAxVDAwOjAwOjAwLjAwMFonLFxuICAgICAgICBsZWFkVGltZURheXM6IDEwLFxuICAgICAgfTtcblxuICAgICAgLy8gQ3JlYXRlIG11bHRpcGxlIGNvbmN1cnJlbnQgYm9va2luZyByZXF1ZXN0c1xuICAgICAgY29uc3QgY29uY3VycmVudFJlcXVlc3RzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNSB9LCAoKSA9PlxuICAgICAgICBhdXRoLnBvc3QoJy9hcGkvZXF1aXBtZW50LWJvb2tpbmdzJykuc2VuZChib29raW5nRGF0YSksXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCBQcm9taXNlLmFsbChjb25jdXJyZW50UmVxdWVzdHMpO1xuXG4gICAgICAvLyBBdCBsZWFzdCBvbmUgc2hvdWxkIHN1Y2NlZWRcbiAgICAgIGNvbnN0IHN1Y2Nlc3NmdWxSZXF1ZXN0cyA9IHJlc3BvbnNlcy5maWx0ZXIoKHIpID0+IHIuc3RhdHVzID09PSAyMDEpO1xuICAgICAgZXhwZWN0KHN1Y2Nlc3NmdWxSZXF1ZXN0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGV4dHJlbWUgbnVtZXJpYyB2YWx1ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleHRyZW1lVmFsdWVzID0gW1xuICAgICAgICBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgICAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsXG4gICAgICAgIEluZmluaXR5LFxuICAgICAgICAtSW5maW5pdHksXG4gICAgICAgIE5hTixcbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgZXh0cmVtZVZhbHVlcykge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9lcXVpcG1lbnQtYm9va2luZ3MnKS5zZW5kKHtcbiAgICAgICAgICB0ZWFjaGVySWQ6IHZhbHVlLFxuICAgICAgICAgIHJlc291cmNlTmFtZTogJ2lQYWQgQ2FydCcsXG4gICAgICAgICAgbmVlZGVkQnk6ICcyMDI1LTAzLTAxVDAwOjAwOjAwLjAwMFonLFxuICAgICAgICAgIGxlYWRUaW1lRGF5czogMTAsXG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtYWxmb3JtZWQgSlNPTiBhbmQgcmVxdWVzdCBib2RpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBUZXN0IHdpdGggaW52YWxpZCBKU09OIHN0cnVjdHVyZVxuICAgICAgY29uc3QgbWFsZm9ybWVkUmVxdWVzdHMgPSBbXG4gICAgICAgIHsgdGVhY2hlcklkOiAnbm90LWEtbnVtYmVyJyB9LFxuICAgICAgICB7IGxlYWRUaW1lRGF5czogJ25vdC1hLW51bWJlcicgfSxcbiAgICAgICAgeyBuZWVkZWRCeTogMTIzNDUgfSwgLy8gTnVtYmVyIGluc3RlYWQgb2Ygc3RyaW5nXG4gICAgICAgIHsgYWRkaXRpb25hbEZpZWxkOiAnc2hvdWxkLWJlLWlnbm9yZWQnIH0sXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgbWFsZm9ybWVkUmVxdWVzdHMpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvZXF1aXBtZW50LWJvb2tpbmdzJykuc2VuZCh7XG4gICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICB0ZWFjaGVySWQ6IGRhdGEudGVhY2hlcklkIHx8IHRlYWNoZXJJZCxcbiAgICAgICAgICByZXNvdXJjZU5hbWU6ICdpUGFkIENhcnQnLFxuICAgICAgICAgIG5lZWRlZEJ5OiBkYXRhLm5lZWRlZEJ5IHx8ICcyMDI1LTAzLTAxVDAwOjAwOjAwLjAwMFonLFxuICAgICAgICAgIGxlYWRUaW1lRGF5czogZGF0YS5sZWFkVGltZURheXMgfHwgMTAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNob3VsZCBoYW5kbGUgbWFsZm9ybWVkIGRhdGEgZ3JhY2VmdWxseVxuICAgICAgICBleHBlY3QoWzIwMCwgMjAxLCA0MDBdKS50b0NvbnRhaW4ocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHRpbWV6b25lIGVkZ2UgY2FzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0aW1lem9uZVRlc3RDYXNlcyA9IFtcbiAgICAgICAgJzIwMjUtMDMtMDFUMDA6MDA6MDAuMDAwWicsIC8vIFVUQ1xuICAgICAgICAnMjAyNS0wMy0wMVQwNTowMDowMC4wMDAtMDU6MDAnLCAvLyBFU1RcbiAgICAgICAgJzIwMjUtMDMtMDFUMjM6NTk6NTkuOTk5WicsIC8vIEVuZCBvZiBkYXkgVVRDXG4gICAgICAgICcyMDI1LTAzLTAxVDAwOjAwOjAwLjAwMVonLCAvLyBTdGFydCBvZiBkYXkgVVRDXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IGRhdGVTdHJpbmcgb2YgdGltZXpvbmVUZXN0Q2FzZXMpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvZXF1aXBtZW50LWJvb2tpbmdzJykuc2VuZCh7XG4gICAgICAgICAgdGVhY2hlcklkLFxuICAgICAgICAgIHJlc291cmNlTmFtZTogJ1RpbWV6b25lIFRlc3QgQ2FydCcsXG4gICAgICAgICAgbmVlZGVkQnk6IGRhdGVTdHJpbmcsXG4gICAgICAgICAgbGVhZFRpbWVEYXlzOiA1LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTaG91bGQgaGFuZGxlIGFsbCB2YWxpZCBJU08gZGF0ZSBmb3JtYXRzXG4gICAgICAgIGV4cGVjdChbMjAwLCAyMDFdKS50b0NvbnRhaW4ocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxlYXAgeWVhciBhbmQgRFNUIHRyYW5zaXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3BlY2lhbERhdGVzID0gW1xuICAgICAgICAnMjAyNC0wMi0yOVQwMDowMDowMC4wMDBaJywgLy8gTGVhcCB5ZWFyXG4gICAgICAgICcyMDI1LTAzLTA5VDA3OjAwOjAwLjAwMFonLCAvLyBEU1QgYmVnaW5zIChVUylcbiAgICAgICAgJzIwMjUtMTEtMDJUMDY6MDA6MDAuMDAwWicsIC8vIERTVCBlbmRzIChVUylcbiAgICAgICAgJzIwMjUtMTItMzFUMjM6NTk6NTkuOTk5WicsIC8vIFllYXIgZW5kXG4gICAgICAgICcyMDI2LTAxLTAxVDAwOjAwOjAwLjAwMFonLCAvLyBZZWFyIHN0YXJ0XG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IGRhdGVTdHJpbmcgb2Ygc3BlY2lhbERhdGVzKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2VxdWlwbWVudC1ib29raW5ncycpLnNlbmQoe1xuICAgICAgICAgIHRlYWNoZXJJZCxcbiAgICAgICAgICByZXNvdXJjZU5hbWU6ICdDYWxlbmRhciBFZGdlIENhc2UgQ2FydCcsXG4gICAgICAgICAgbmVlZGVkQnk6IGRhdGVTdHJpbmcsXG4gICAgICAgICAgbGVhZFRpbWVEYXlzOiA3LFxuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QoWzIwMCwgMjAxXSkudG9Db250YWluKHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=