{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumDiscoveryService.ts","mappings":"AAAA,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAyCxF,MAAM,wBAAwB,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACxB,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE;IACrB,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;IAClB,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE;IACpB,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;IAC3E,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IACpD,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;CACvC,CAAC,CAAC;AAEH,MAAM,OAAO,0BAA2B,SAAQ,WAAW;IACjD,uBAAuB,CAA0B;IACjD,mBAAmB,GAAoC,IAAI,GAAG,EAAE,CAAC;IACjE,OAAO,GAAsB,EAAE,CAAC;IAExC;QACE,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACpC,IAAI,CAAC,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAC7D,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,wBAAwB;QAC9B,IAAI,CAAC,OAAO,GAAG;YACb;gBACE,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,8CAA8C;gBACpD,OAAO,EAAE,mCAAmC;gBAC5C,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE;oBACV,uDAAuD;oBACvD,wEAAwE;oBACxE,uGAAuG;iBACxG;gBACD,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,8CAA8C;gBACzD,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,CAAC;gBACX,cAAc,EAAE,CAAC,2BAA2B,CAAC;gBAC7C,eAAe,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC;aACtD;YACD;gBACE,EAAE,EAAE,aAAa;gBACjB,IAAI,EAAE,+BAA+B;gBACrC,OAAO,EAAE,+BAA+B;gBACxC,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE;oBACV,6CAA6C;oBAC7C,wDAAwD;oBACxD,yEAAyE;iBAC1E;gBACD,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,0CAA0C;gBACrD,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,CAAC;gBACX,cAAc,EAAE,CAAC,uBAAuB,EAAE,eAAe,CAAC;gBAC1D,eAAe,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC;aACpD;YACD;gBACE,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE,wCAAwC;gBAC9C,OAAO,EAAE,8BAA8B;gBACvC,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE;oBACV,yCAAyC;oBACzC,0DAA0D;iBAC3D;gBACD,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,yCAAyC;gBACpD,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,CAAC;gBACX,cAAc,EAAE,CAAC,sBAAsB,CAAC;gBACxC,eAAe,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;aAC3C;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;YAC3D,MAAM,YAAY,GAAyB,EAAE,CAAC;YAE9C,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC5D,IAAI,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC9D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;oBACxD,YAAY,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;oBAEhC,wBAAwB;oBACxB,MAAM,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;gBACnC,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,EAC9B,qCAAqC,MAAM,CAAC,IAAI,EAAE,CACnD,CAAC;gBACJ,CAAC;gBAED,sCAAsC;gBACtC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACtC,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,YAAY,CAAC,MAAM,uBAAuB,CAAC,CAAC;YAC3E,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,yCAAyC,CAAC,CAAC;YACxE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB,CAAC,MAAuB;QACtD,MAAM,SAAS,GAAyB,EAAE,CAAC;QAC3C,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;QAEtC,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YAC1C,IAAI,CAAC;gBACH,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,SAAS,CACxC,SAAS,EACT,MAAM,EACN,WAAW,EACX,CAAC,CACF,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;YACnC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,EACzC,4BAA4B,CAC7B,CAAC;YACJ,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,SAAS,CACrB,GAAW,EACX,MAAuB,EACvB,WAAwB,EACxB,KAAa;QAEb,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,IAAI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YACpD,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,kCAAkC;QAClC,IAAI,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;YACpE,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrB,MAAM,SAAS,GAAyB,EAAE,CAAC;QAE3C,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,GAAG,YAAY,KAAK,GAAG,CAAC,CAAC;YAE7D,2CAA2C;YAC3C,MAAM,aAAa,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBACzB,MAAM,IAAI,KAAK,CAAC,0BAA0B,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,GAAG,EAAE;gBACpC,OAAO,EAAE;oBACP,QAAQ,EAAE,iEAAiE;iBAC5E;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,QAAQ,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;YACrE,CAAC;YAED,yCAAyC;YACzC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa;gBAChE,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAChE,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE7B,iDAAiD;YACjD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;YAC1E,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;YAEjC,uCAAuC;YACvC,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBAE1D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;oBACzB,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACpC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;oBACnF,SAAS,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,CAAC;gBACrC,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,wBAAwB,CACpC,CAAqB,EACrB,OAAe,EACf,MAAuB;QAEvB,MAAM,SAAS,GAAyB,EAAE,CAAC;QAE3C,iEAAiE;QACjE,MAAM,aAAa,GAAG,CAAC,CAAC,iFAAiF,CAAC,CAAC;QAE3G,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;YAChC,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;YACzB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;YACrC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;YAEhD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,CAAC;gBAC9D,OAAO;YACT,CAAC;YAED,wBAAwB;YACxB,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;YAEtD,4BAA4B;YAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,sBAAsB,CAAC;gBAC3C,GAAG,EAAE,WAAW;gBAChB,KAAK,EAAE,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;gBACxD,MAAM,EAAE,MAAM,CAAC,IAAI;gBACnB,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,OAAO,EAAE,UAAU;gBACnB,OAAO;aACR,CAAC,CAAC;YAEH,IAAI,QAAQ,EAAE,CAAC;gBACb,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,QAAgB,EAAE,OAAe;QAC5D,MAAM,YAAY,GAAG,CAAC,QAAQ,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAE9D,MAAM,kBAAkB,GAAG;YACzB,YAAY;YACZ,oBAAoB;YACpB,gBAAgB;YAChB,mBAAmB;YACnB,cAAc;YACd,OAAO;YACP,eAAe;YACf,gBAAgB;YAChB,YAAY;YACZ,QAAQ;YACR,UAAU;YACV,kBAAkB;YAClB,aAAa;YACb,SAAS;YACT,gBAAgB;YAChB,uBAAuB;YACvB,oBAAoB;YACpB,gBAAgB;SACjB,CAAC;QAEF,+CAA+C;QAC/C,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAC/D,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAC/B,CAAC;QAEF,mCAAmC;QACnC,MAAM,eAAe,GAAG;YACtB,MAAM;YACN,aAAa;YACb,YAAY;YACZ,MAAM;YACN,OAAO;YACP,UAAU;YACV,SAAS;YACT,WAAW;YACX,QAAQ;YACR,QAAQ;YACR,WAAW;SACZ,CAAC;QAEF,MAAM,iBAAiB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CACzD,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAC/B,CAAC;QAEF,OAAO,oBAAoB,IAAI,CAAC,iBAAiB,CAAC;IACpD,CAAC;IAED;;OAEG;IACK,sBAAsB,CAC5B,CAAqB,EACrB,OAAe,EACf,MAAuB;QAEvB,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QAElC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;YAC/B,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;YACzB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YAEnD,IAAI,CAAC,IAAI;gBAAE,OAAO;YAElB,wBAAwB;YACxB,IAAI,WAAmB,CAAC;YACxB,IAAI,CAAC;gBACH,WAAW,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;YAClD,CAAC;YAAC,MAAM,CAAC;gBACP,OAAO,CAAC,oBAAoB;YAC9B,CAAC;YAED,yCAAyC;YACzC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;gBAC3E,OAAO;YACT,CAAC;YAED,yCAAyC;YACzC,MAAM,sBAAsB,GAAG;gBAC7B,YAAY;gBACZ,OAAO;gBACP,SAAS;gBACT,SAAS;gBACT,QAAQ;gBACR,UAAU;gBACV,QAAQ;gBACR,WAAW;gBACX,YAAY;gBACZ,SAAS;aACV,CAAC;YAEF,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;gBACzE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,oBAAoB;IACzD,CAAC;IAED;;OAEG;IACK,sBAAsB,CAAC,MAO9B;QACC,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;YAEzD,0CAA0C;YAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;YAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;YACrE,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;YAE7D,MAAM,QAAQ,GAAuB;gBACnC,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC;gBAChC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;gBAC7B,GAAG;gBACH,MAAM;gBACN,UAAU,EAAE,YAAY;gBACxB,QAAQ;gBACR,KAAK;gBACL,OAAO;gBACP,YAAY;gBACZ,QAAQ;gBACR,WAAW,EAAE,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;gBACpD,QAAQ;gBACR,QAAQ,EAAE,IAAI;gBACd,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,gBAAgB,EAAE,CAAC;gBACnB,cAAc,EAAE,SAAS;aAC1B,CAAC;YAEF,oBAAoB;YACpB,MAAM,UAAU,GAAG,wBAAwB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAChE,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,EAC7C,wCAAwC,CACzC,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,qCAAqC,CAAC,CAAC;YAC5E,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,IAAY;QAC/B,MAAM,aAAa,GAAG;YACpB,gBAAgB;YAChB,eAAe;YACf,iCAAiC;YACjC,eAAe;SAChB,CAAC;QAEF,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE,CAAC;YACpC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,KAAK,EAAE,CAAC;gBACV,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE,EAAE,CAAC;oBAC9B,OAAO,KAAK,CAAC;gBACf,CAAC;YACH,CAAC;QACH,CAAC;QAED,yBAAyB;QACzB,IAAI,iCAAiC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACjD,OAAO,CAAC,CAAC;QACX,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,IAAY;QACjC,MAAM,eAAe,GAA6B;YAChD,aAAa,EAAE,CAAC,OAAO,EAAE,cAAc,EAAE,gBAAgB,CAAC;YAC1D,QAAQ,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,mBAAmB,CAAC;YAC/D,SAAS,EAAE,CAAC,UAAU,EAAE,gBAAgB,EAAE,MAAM,EAAE,UAAU,CAAC;YAC7D,SAAS,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;YACpC,gBAAgB,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC;YACtG,oBAAoB,EAAE,CAAC,qBAAqB,EAAE,UAAU,EAAE,KAAK,EAAE,qBAAqB,EAAE,SAAS,CAAC;YAClG,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC;SAC9D,CAAC;QAEF,KAAK,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;YAClE,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;gBACnD,OAAO,OAAO,CAAC;YACjB,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,IAAY;QACtC,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAErC,IAAI,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YACzG,OAAO,YAAY,CAAC;QACtB,CAAC;QACD,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YACnG,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACvE,OAAO,WAAW,CAAC;QACrB,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,GAAW;QACjC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,KAAK,CAAC;QAC5C,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,MAAM,CAAC;QAC3E,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO,MAAM,CAAC;QAC3E,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,IAAY;QAClC,MAAM,SAAS,GAAG,4CAA4C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1E,MAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE3G,IAAI,SAAS,IAAI,UAAU;YAAE,OAAO,MAAM,CAAC;QAC3C,IAAI,SAAS;YAAE,OAAO,IAAI,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,kBAAkB,CAAC,GAAW;QACpC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,KAAa;QAC9B,OAAO,KAAK;aACT,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC;aACpC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;aACpB,IAAI,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,GAAW;QACrC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,qBAAqB,CAAC;YAC3E,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,qBAAqB,CAAC;QAC/B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,UAAkB;QAKvC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,YAAY,UAAU,YAAY,CAAC,CAAC;YACtD,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YAErE,2BAA2B;YAC3B,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YAC5B,QAAQ,CAAC,cAAc,GAAG,SAAS,CAAC;YAEpC,kCAAkC;YAClC,MAAM,aAAa,GAAG,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBACzB,MAAM,IAAI,KAAK,CAAC,0BAA0B,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAE/C,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,QAAQ,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;YACrE,CAAC;YAED,wCAAwC;YACxC,MAAM,WAAW,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,aAAa;YACnD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,WAAW,CAAC,EAAE,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACzD,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YAE5C,uCAAuC;YACvC,IAAI,MAAM,CAAC,UAAU,GAAG,WAAW,EAAE,CAAC;gBACpC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEvC,sBAAsB;YACtB,QAAQ,CAAC,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC;YACtC,QAAQ,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;YACnC,QAAQ,CAAC,cAAc,GAAG,YAAY,CAAC;YAEvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,QAAQ,CAAC,KAAK,KAAK,QAAQ,CAAC,QAAQ,SAAS,CAAC,CAAC;YAExF,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAE,6CAA6C;aACtE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,6BAA6B,CAAC,CAAC;YAExE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,QAAQ,EAAE,CAAC;gBACb,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC;gBACnC,QAAQ,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,IAAI,EAAE,CAAC;gBAC5D,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;YAC3F,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CACnB,UAAkB,EAClB,MAAc;QAMd,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,YAAY,UAAU,YAAY,CAAC,CAAC;YACtD,CAAC;YAED,IAAI,QAAQ,CAAC,cAAc,KAAK,YAAY,EAAE,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;YACnE,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YAE3D,wBAAwB;YACxB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAC7D,MAAM,EACN,QAAQ,CAAC,KAAK,IAAI,CAAC,EACnB,QAAQ,CAAC,OAAO,IAAI,SAAS,EAC7B,QAAQ,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EACtF,QAAQ,CAAC,KAAK,EACd;gBACE,eAAe,EAAE,QAAQ,CAAC,MAAM;gBAChC,WAAW,EAAE,QAAQ,CAAC,GAAG;gBACzB,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,cAAc,EAAE,IAAI;aACrB,CACF,CAAC;YAEF,yBAAyB;YACzB,QAAQ,CAAC,cAAc,GAAG,WAAW,CAAC;YAEtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,QAAQ,kBAAkB,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YAEvF,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,QAAQ;aACT,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,4BAA4B,CAAC,CAAC;YAEvE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,QAAQ,EAAE,CAAC;gBACb,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC;gBACnC,QAAQ,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,IAAI,EAAE,CAAC;gBAC5D,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;YAC3F,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,sBAAsB;QACpB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,MAOpB;QACC,MAAM,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAEhD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YAC9B,IAAI,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ;gBAAE,OAAO,KAAK,CAAC;YACtE,IAAI,MAAM,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK;gBAAE,OAAO,KAAK,CAAC;YAC7D,IAAI,MAAM,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO;gBAAE,OAAO,KAAK,CAAC;YACnE,IAAI,MAAM,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ;gBAAE,OAAO,KAAK,CAAC;YACtE,IAAI,MAAM,CAAC,YAAY,IAAI,GAAG,CAAC,YAAY,KAAK,MAAM,CAAC,YAAY;gBAAE,OAAO,KAAK,CAAC;YAClF,IAAI,MAAM,CAAC,cAAc,IAAI,GAAG,CAAC,cAAc,KAAK,MAAM,CAAC,cAAc;gBAAE,OAAO,KAAK,CAAC;YACxF,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,UAAkB;QACrC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,CAAC,QAAQ;gBAAE,OAAO,KAAK,CAAC;YAE5B,mCAAmC;YACnC,MAAM,aAAa,GAAG,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,CAAC,GAAG,EAAE,EAAE,8BAA8B,CAAC,CAAC;gBACpF,OAAO,KAAK,CAAC;YACf,CAAC;YAED,uCAAuC;YACvC,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;YACnE,MAAM,WAAW,GAAG,QAAQ,CAAC,EAAE,CAAC;YAEhC,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAC;YAChC,QAAQ,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;YAEnC,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,2BAA2B,CAAC,CAAC;YACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1D,IAAI,QAAQ,EAAE,CAAC;gBACb,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;gBAC1B,QAAQ,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;YACrC,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,QAA4B;QAChD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,wBAAwB,CAAC,UAAkB;QACzC,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,iBAAiB;QAQf,MAAM,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAEhD,MAAM,KAAK,GAAG;YACZ,cAAc,EAAE,SAAS,CAAC,MAAM;YAChC,UAAU,EAAE,EAA4B;YACxC,SAAS,EAAE,EAA4B;YACvC,OAAO,EAAE,EAA4B;YACrC,QAAQ,EAAE,EAA4B;YACtC,UAAU,EAAE,EAA4B;SACzC,CAAC;QAEF,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACxB,oBAAoB;YACpB,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAE3E,mBAAmB;YACnB,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;gBAChB,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACzE,CAAC;YAED,iBAAiB;YACjB,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC5B,MAAM,QAAQ,GAAG,SAAS,GAAG,CAAC,KAAK,EAAE,CAAC;gBACtC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAC/D,CAAC;YAED,kBAAkB;YAClB,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAEnF,oBAAoB;YACpB,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,EAAU;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;CACF;AAED,4BAA4B;AAC5B,MAAM,CAAC,MAAM,0BAA0B,GAAG,IAAI,0BAA0B,EAAE,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumDiscoveryService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport * as cheerio from 'cheerio';\nimport { z } from 'zod';\nimport { CurriculumImportService } from './curriculumImportService';\nimport { safeFetch, isValidExternalURL, validateFileSize } from '../utils/urlValidator';\n\nexport interface CurriculumDocument {\n  id: string;\n  title: string;\n  url: string;\n  source: string;\n  sourceType: 'government' | 'ministry' | 'department';\n  province: string;\n  grade?: number;\n  gradeRange?: { min: number; max: number };\n  subject?: string;\n  documentType: 'curriculum' | 'guideline' | 'assessment' | 'resource';\n  fileType: 'pdf' | 'docx' | 'html' | 'unknown';\n  publishedDate?: Date;\n  lastModified?: Date;\n  fileSize?: number;\n  description?: string;\n  language: 'en' | 'fr' | 'both';\n  isActive: boolean;\n  lastVerified: Date;\n  downloadAttempts: number;\n  downloadStatus: 'pending' | 'downloaded' | 'processed' | 'failed';\n  processingErrors?: string[];\n}\n\nexport interface DiscoverySource {\n  id: string;\n  name: string;\n  baseUrl: string;\n  province: string;\n  searchUrls: string[];\n  isActive: boolean;\n  lastScanDate?: Date;\n  robotsTxt?: string;\n  crawlDelay: number; // milliseconds\n  maxDepth: number;\n  allowedDomains: string[];\n  excludePatterns: string[];\n}\n\nconst CurriculumDocumentSchema = z.object({\n  title: z.string().min(1),\n  url: z.string().url(),\n  source: z.string(),\n  province: z.string(),\n  grade: z.number().optional(),\n  subject: z.string().optional(),\n  documentType: z.enum(['curriculum', 'guideline', 'assessment', 'resource']),\n  fileType: z.enum(['pdf', 'docx', 'html', 'unknown']),\n  description: z.string().optional(),\n  language: z.enum(['en', 'fr', 'both']),\n});\n\nexport class CurriculumDiscoveryService extends BaseService {\n  private curriculumImportService: CurriculumImportService;\n  private discoveredDocuments: Map<string, CurriculumDocument> = new Map();\n  private sources: DiscoverySource[] = [];\n\n  constructor() {\n    super('CurriculumDiscoveryService');\n    this.curriculumImportService = new CurriculumImportService();\n    this.initializeDefaultSources();\n  }\n\n  /**\n   * Initialize default government curriculum sources\n   */\n  private initializeDefaultSources(): void {\n    this.sources = [\n      {\n        id: 'pei-gov',\n        name: 'Prince Edward Island Department of Education',\n        baseUrl: 'https://www.princeedwardisland.ca',\n        province: 'PE',\n        searchUrls: [\n          'https://www.princeedwardisland.ca/en/topic/curriculum',\n          'https://www.princeedwardisland.ca/en/topic/curriculum-french-immersion',\n          'https://www.princeedwardisland.ca/en/information/education-and-lifelong-learning/curriculum-documents',\n        ],\n        isActive: true,\n        robotsTxt: 'https://www.princeedwardisland.ca/robots.txt',\n        crawlDelay: 2000,\n        maxDepth: 3,\n        allowedDomains: ['www.princeedwardisland.ca'],\n        excludePatterns: ['/search/', '/contact/', '/about/'],\n      },\n      {\n        id: 'ontario-edu',\n        name: 'Ontario Ministry of Education',\n        baseUrl: 'https://www.dcp.edu.gov.on.ca',\n        province: 'ON',\n        searchUrls: [\n          'https://www.dcp.edu.gov.on.ca/en/curriculum',\n          'https://www.dcp.edu.gov.on.ca/en/curriculum/elementary',\n          'https://www.dcp.edu.gov.on.ca/en/curriculum/elementary/french-immersion',\n        ],\n        isActive: true,\n        robotsTxt: 'https://www.dcp.edu.gov.on.ca/robots.txt',\n        crawlDelay: 3000,\n        maxDepth: 3,\n        allowedDomains: ['www.dcp.edu.gov.on.ca', 'edu.gov.on.ca'],\n        excludePatterns: ['/search/', '/login/', '/admin/'],\n      },\n      {\n        id: 'bc-gov',\n        name: 'British Columbia Ministry of Education',\n        baseUrl: 'https://curriculum.gov.bc.ca',\n        province: 'BC',\n        searchUrls: [\n          'https://curriculum.gov.bc.ca/curriculum',\n          'https://curriculum.gov.bc.ca/curriculum/french-immersion',\n        ],\n        isActive: true,\n        robotsTxt: 'https://curriculum.gov.bc.ca/robots.txt',\n        crawlDelay: 2000,\n        maxDepth: 2,\n        allowedDomains: ['curriculum.gov.bc.ca'],\n        excludePatterns: ['/search/', '/contact/'],\n      },\n    ];\n  }\n\n  /**\n   * Discover curriculum documents from all active sources\n   */\n  async discoverDocuments(): Promise<CurriculumDocument[]> {\n    try {\n      this.logger.info('Starting curriculum document discovery');\n      const allDocuments: CurriculumDocument[] = [];\n\n      for (const source of this.sources.filter((s) => s.isActive)) {\n        try {\n          this.logger.info(`Discovering documents from ${source.name}`);\n          const documents = await this.discoverFromSource(source);\n          allDocuments.push(...documents);\n          \n          // Update last scan date\n          source.lastScanDate = new Date();\n        } catch (error) {\n          this.logger.error(\n            { error, sourceId: source.id },\n            `Failed to discover documents from ${source.name}`\n          );\n        }\n\n        // Respect crawl delay between sources\n        await this.delay(source.crawlDelay);\n      }\n\n      this.logger.info(`Discovered ${allDocuments.length} curriculum documents`);\n      return allDocuments;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to discover curriculum documents');\n      throw error;\n    }\n  }\n\n  /**\n   * Discover documents from a specific source\n   */\n  private async discoverFromSource(source: DiscoverySource): Promise<CurriculumDocument[]> {\n    const documents: CurriculumDocument[] = [];\n    const visitedUrls = new Set<string>();\n\n    for (const searchUrl of source.searchUrls) {\n      try {\n        const pageDocuments = await this.crawlPage(\n          searchUrl,\n          source,\n          visitedUrls,\n          0\n        );\n        documents.push(...pageDocuments);\n      } catch (error) {\n        this.logger.error(\n          { error, searchUrl, sourceId: source.id },\n          'Failed to crawl search URL'\n        );\n      }\n    }\n\n    return documents;\n  }\n\n  /**\n   * Crawl a page and its linked pages for curriculum documents\n   */\n  private async crawlPage(\n    url: string,\n    source: DiscoverySource,\n    visitedUrls: Set<string>,\n    depth: number\n  ): Promise<CurriculumDocument[]> {\n    if (depth > source.maxDepth || visitedUrls.has(url)) {\n      return [];\n    }\n\n    // Check if URL should be excluded\n    if (source.excludePatterns.some((pattern) => url.includes(pattern))) {\n      return [];\n    }\n\n    visitedUrls.add(url);\n    const documents: CurriculumDocument[] = [];\n\n    try {\n      this.logger.debug(`Crawling page: ${url} (depth: ${depth})`);\n      \n      // Validate and fetch page content securely\n      const urlValidation = isValidExternalURL(url);\n      if (!urlValidation.valid) {\n        throw new Error(`URL validation failed: ${urlValidation.error}`);\n      }\n\n      const response = await safeFetch(url, {\n        headers: {\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Validate file size for large responses\n      if (!validateFileSize(response, 10 * 1024 * 1024)) { // 10MB limit\n        throw new Error('Response too large - potential DoS attempt');\n      }\n\n      const html = await response.text();\n      const $ = cheerio.load(html);\n\n      // Extract curriculum documents from current page\n      const pageDocuments = await this.extractDocumentsFromPage($, url, source);\n      documents.push(...pageDocuments);\n\n      // Find links to other curriculum pages\n      if (depth < source.maxDepth) {\n        const links = this.extractCurriculumLinks($, url, source);\n        \n        for (const link of links) {\n          await this.delay(source.crawlDelay);\n          const linkedDocuments = await this.crawlPage(link, source, visitedUrls, depth + 1);\n          documents.push(...linkedDocuments);\n        }\n      }\n    } catch (error) {\n      this.logger.error({ error, url }, 'Failed to crawl page');\n    }\n\n    return documents;\n  }\n\n  /**\n   * Extract curriculum documents from a single page\n   */\n  private async extractDocumentsFromPage(\n    $: cheerio.CheerioAPI,\n    pageUrl: string,\n    source: DiscoverySource\n  ): Promise<CurriculumDocument[]> {\n    const documents: CurriculumDocument[] = [];\n\n    // Look for PDF and DOCX links that might be curriculum documents\n    const documentLinks = $('a[href$=\".pdf\"], a[href$=\".docx\"], a[href*=\"/download/\"], a[href*=\"/resource/\"]');\n\n    documentLinks.each((_, element) => {\n      const $link = $(element);\n      const href = $link.attr('href');\n      const linkText = $link.text().trim();\n      const parentText = $link.parent().text().trim();\n\n      if (!href || !this.isCurriculumDocument(linkText, parentText)) {\n        return;\n      }\n\n      // Resolve relative URLs\n      const absoluteUrl = new URL(href, pageUrl).toString();\n\n      // Extract document metadata\n      const document = this.createDocumentFromLink({\n        url: absoluteUrl,\n        title: linkText || this.extractTitleFromUrl(absoluteUrl),\n        source: source.name,\n        province: source.province,\n        context: parentText,\n        pageUrl,\n      });\n\n      if (document) {\n        documents.push(document);\n      }\n    });\n\n    return documents;\n  }\n\n  /**\n   * Determine if a link is likely a curriculum document\n   */\n  private isCurriculumDocument(linkText: string, context: string): boolean {\n    const combinedText = (linkText + ' ' + context).toLowerCase();\n    \n    const curriculumKeywords = [\n      'curriculum',\n      'program of studies',\n      'course outline',\n      'learning outcomes',\n      'expectations',\n      'grade',\n      'subject guide',\n      'teaching guide',\n      'assessment',\n      'rubric',\n      'français',\n      'french immersion',\n      'mathematics',\n      'science',\n      'social studies',\n      'english language arts',\n      'physical education',\n      'arts education',\n    ];\n\n    // Must contain at least one curriculum keyword\n    const hasCurriculumKeyword = curriculumKeywords.some((keyword) =>\n      combinedText.includes(keyword)\n    );\n\n    // Exclude non-curriculum documents\n    const excludeKeywords = [\n      'form',\n      'application',\n      'newsletter',\n      'news',\n      'event',\n      'calendar',\n      'contact',\n      'directory',\n      'budget',\n      'policy',\n      'procedure',\n    ];\n\n    const hasExcludeKeyword = excludeKeywords.some((keyword) =>\n      combinedText.includes(keyword)\n    );\n\n    return hasCurriculumKeyword && !hasExcludeKeyword;\n  }\n\n  /**\n   * Extract curriculum-related links from a page\n   */\n  private extractCurriculumLinks(\n    $: cheerio.CheerioAPI,\n    pageUrl: string,\n    source: DiscoverySource\n  ): string[] {\n    const links: string[] = [];\n    const linkElements = $('a[href]');\n\n    linkElements.each((_, element) => {\n      const $link = $(element);\n      const href = $link.attr('href');\n      const linkText = $link.text().trim().toLowerCase();\n\n      if (!href) return;\n\n      // Resolve relative URLs\n      let absoluteUrl: string;\n      try {\n        absoluteUrl = new URL(href, pageUrl).toString();\n      } catch {\n        return; // Skip invalid URLs\n      }\n\n      // Check if URL is within allowed domains\n      const url = new URL(absoluteUrl);\n      if (!source.allowedDomains.some((domain) => url.hostname.includes(domain))) {\n        return;\n      }\n\n      // Look for curriculum-related page links\n      const curriculumPageKeywords = [\n        'curriculum',\n        'grade',\n        'subject',\n        'program',\n        'course',\n        'français',\n        'french',\n        'immersion',\n        'elementary',\n        'primary',\n      ];\n\n      if (curriculumPageKeywords.some((keyword) => linkText.includes(keyword))) {\n        links.push(absoluteUrl);\n      }\n    });\n\n    return Array.from(new Set(links)); // Remove duplicates\n  }\n\n  /**\n   * Create a CurriculumDocument from a link\n   */\n  private createDocumentFromLink(params: {\n    url: string;\n    title: string;\n    source: string;\n    province: string;\n    context: string;\n    pageUrl: string;\n  }): CurriculumDocument | null {\n    try {\n      const { url, title, source, province, context } = params;\n\n      // Extract metadata from title and context\n      const grade = this.extractGrade(title + ' ' + context);\n      const subject = this.extractSubject(title + ' ' + context);\n      const documentType = this.extractDocumentType(title + ' ' + context);\n      const fileType = this.extractFileType(url);\n      const language = this.extractLanguage(title + ' ' + context);\n\n      const document: CurriculumDocument = {\n        id: this.generateDocumentId(url),\n        title: this.cleanTitle(title),\n        url,\n        source,\n        sourceType: 'government',\n        province,\n        grade,\n        subject,\n        documentType,\n        fileType,\n        description: context !== title ? context : undefined,\n        language,\n        isActive: true,\n        lastVerified: new Date(),\n        downloadAttempts: 0,\n        downloadStatus: 'pending',\n      };\n\n      // Validate document\n      const validation = CurriculumDocumentSchema.safeParse(document);\n      if (!validation.success) {\n        this.logger.warn(\n          { errors: validation.error.errors, document },\n          'Invalid curriculum document discovered'\n        );\n        return null;\n      }\n\n      return document;\n    } catch (error) {\n      this.logger.error({ error, params }, 'Failed to create document from link');\n      return null;\n    }\n  }\n\n  /**\n   * Extract grade from text\n   */\n  private extractGrade(text: string): number | undefined {\n    const gradePatterns = [\n      /grade\\s+(\\d+)/i,\n      /gr\\.\\s*(\\d+)/i,\n      /\\b(\\d+)(?:st|nd|rd|th)\\s+grade/i,\n      /year\\s+(\\d+)/i,\n    ];\n\n    for (const pattern of gradePatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        const grade = parseInt(match[1]);\n        if (grade >= 0 && grade <= 12) {\n          return grade;\n        }\n      }\n    }\n\n    // Check for kindergarten\n    if (/kindergarten|kinder|maternelle/i.test(text)) {\n      return 0;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract subject from text\n   */\n  private extractSubject(text: string): string | undefined {\n    const subjectPatterns: Record<string, RegExp[]> = {\n      'Mathematics': [/math/i, /mathematics/i, /mathématiques/i],\n      'French': [/french/i, /français/i, /fsl/i, /french immersion/i],\n      'English': [/english/i, /language arts/i, /ela/i, /anglais/i],\n      'Science': [/science/i, /sciences/i],\n      'Social Studies': [/social studies/i, /social science/i, /études sociales/i, /history/i, /geography/i],\n      'Physical Education': [/physical education/i, /phys ed/i, /pe/i, /éducation physique/i, /health/i],\n      'Arts': [/arts/i, /art/i, /music/i, /drama/i, /visual arts/i],\n    };\n\n    for (const [subject, patterns] of Object.entries(subjectPatterns)) {\n      if (patterns.some((pattern) => pattern.test(text))) {\n        return subject;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract document type from text\n   */\n  private extractDocumentType(text: string): CurriculumDocument['documentType'] {\n    const lowerText = text.toLowerCase();\n\n    if (lowerText.includes('assessment') || lowerText.includes('rubric') || lowerText.includes('evaluation')) {\n      return 'assessment';\n    }\n    if (lowerText.includes('guide') || lowerText.includes('resource') || lowerText.includes('support')) {\n      return 'resource';\n    }\n    if (lowerText.includes('guideline') || lowerText.includes('framework')) {\n      return 'guideline';\n    }\n\n    return 'curriculum';\n  }\n\n  /**\n   * Extract file type from URL\n   */\n  private extractFileType(url: string): CurriculumDocument['fileType'] {\n    const lowerUrl = url.toLowerCase();\n    if (lowerUrl.includes('.pdf')) return 'pdf';\n    if (lowerUrl.includes('.docx') || lowerUrl.includes('.doc')) return 'docx';\n    if (lowerUrl.includes('.html') || lowerUrl.includes('.htm')) return 'html';\n    return 'unknown';\n  }\n\n  /**\n   * Extract language from text\n   */\n  private extractLanguage(text: string): CurriculumDocument['language'] {\n    const hasFrench = /french|français|immersion|fsl|francophone/i.test(text);\n    const hasEnglish = /english|anglais/i.test(text) || (!hasFrench && /curriculum|program|guide/i.test(text));\n\n    if (hasFrench && hasEnglish) return 'both';\n    if (hasFrench) return 'fr';\n    return 'en';\n  }\n\n  /**\n   * Generate unique document ID from URL\n   */\n  private generateDocumentId(url: string): string {\n    const hash = Buffer.from(url).toString('base64');\n    return hash.replace(/[^a-zA-Z0-9]/g, '').substring(0, 16);\n  }\n\n  /**\n   * Clean and normalize document title\n   */\n  private cleanTitle(title: string): string {\n    return title\n      .replace(/\\.(pdf|docx?|html?)$/i, '')\n      .replace(/^\\s*-\\s*/, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  /**\n   * Extract title from URL if no title is available\n   */\n  private extractTitleFromUrl(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      const fileName = urlObj.pathname.split('/').pop() || 'curriculum-document';\n      return this.cleanTitle(fileName);\n    } catch {\n      return 'Curriculum Document';\n    }\n  }\n\n  /**\n   * Download a discovered curriculum document\n   */\n  async downloadDocument(documentId: string): Promise<{\n    success: boolean;\n    filePath?: string;\n    error?: string;\n  }> {\n    try {\n      const document = this.discoveredDocuments.get(documentId);\n      if (!document) {\n        throw new Error(`Document ${documentId} not found`);\n      }\n\n      this.logger.info(`Starting download of document: ${document.title}`);\n\n      // Update download attempts\n      document.downloadAttempts++;\n      document.downloadStatus = 'pending';\n\n      // Validate URL before downloading\n      const urlValidation = isValidExternalURL(document.url);\n      if (!urlValidation.valid) {\n        throw new Error(`URL validation failed: ${urlValidation.error}`);\n      }\n\n      const response = await safeFetch(document.url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Validate file size before downloading\n      const maxFileSize = 50 * 1024 * 1024; // 50MB limit\n      if (!validateFileSize(response, maxFileSize)) {\n        throw new Error('File too large - exceeds 50MB limit');\n      }\n\n      const buffer = await response.arrayBuffer();\n      \n      // Additional size check after download\n      if (buffer.byteLength > maxFileSize) {\n        throw new Error('Downloaded file exceeds size limit');\n      }\n      \n      const fileBuffer = Buffer.from(buffer);\n\n      // Store file metadata\n      document.fileSize = fileBuffer.length;\n      document.lastModified = new Date();\n      document.downloadStatus = 'downloaded';\n\n      this.logger.info(`Downloaded document: ${document.title} (${document.fileSize} bytes)`);\n\n      return {\n        success: true,\n        filePath: document.url, // In production, would save to cloud storage\n      };\n    } catch (error) {\n      this.logger.error({ error, documentId }, 'Failed to download document');\n      \n      const document = this.discoveredDocuments.get(documentId);\n      if (document) {\n        document.downloadStatus = 'failed';\n        document.processingErrors = document.processingErrors || [];\n        document.processingErrors.push(error instanceof Error ? error.message : 'Unknown error');\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Process a downloaded document using the curriculum import service\n   */\n  async processDocument(\n    documentId: string,\n    userId: number\n  ): Promise<{\n    success: boolean;\n    importId?: string;\n    error?: string;\n  }> {\n    try {\n      const document = this.discoveredDocuments.get(documentId);\n      if (!document) {\n        throw new Error(`Document ${documentId} not found`);\n      }\n\n      if (document.downloadStatus !== 'downloaded') {\n        throw new Error('Document must be downloaded before processing');\n      }\n\n      this.logger.info(`Processing document: ${document.title}`);\n\n      // Create import session\n      const importId = await this.curriculumImportService.startImport(\n        userId,\n        document.grade || 1,\n        document.subject || 'General',\n        document.fileType === 'pdf' ? 'pdf' : document.fileType === 'docx' ? 'docx' : 'manual',\n        document.title,\n        {\n          discoverySource: document.source,\n          originalUrl: document.url,\n          documentType: document.documentType,\n          province: document.province,\n          autoDiscovered: true,\n        }\n      );\n\n      // Update document status\n      document.downloadStatus = 'processed';\n\n      this.logger.info(`Created import session ${importId} for document: ${document.title}`);\n\n      return {\n        success: true,\n        importId,\n      };\n    } catch (error) {\n      this.logger.error({ error, documentId }, 'Failed to process document');\n\n      const document = this.discoveredDocuments.get(documentId);\n      if (document) {\n        document.downloadStatus = 'failed';\n        document.processingErrors = document.processingErrors || [];\n        document.processingErrors.push(error instanceof Error ? error.message : 'Unknown error');\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get all discovered documents\n   */\n  getDiscoveredDocuments(): CurriculumDocument[] {\n    return Array.from(this.discoveredDocuments.values());\n  }\n\n  /**\n   * Get discovered documents filtered by criteria\n   */\n  getDocumentsByFilter(filter: {\n    province?: string;\n    grade?: number;\n    subject?: string;\n    language?: string;\n    documentType?: string;\n    downloadStatus?: string;\n  }): CurriculumDocument[] {\n    const documents = this.getDiscoveredDocuments();\n    \n    return documents.filter((doc) => {\n      if (filter.province && doc.province !== filter.province) return false;\n      if (filter.grade && doc.grade !== filter.grade) return false;\n      if (filter.subject && doc.subject !== filter.subject) return false;\n      if (filter.language && doc.language !== filter.language) return false;\n      if (filter.documentType && doc.documentType !== filter.documentType) return false;\n      if (filter.downloadStatus && doc.downloadStatus !== filter.downloadStatus) return false;\n      return true;\n    });\n  }\n\n  /**\n   * Update document verification status\n   */\n  async verifyDocument(documentId: string): Promise<boolean> {\n    try {\n      const document = this.discoveredDocuments.get(documentId);\n      if (!document) return false;\n\n      // Validate URL before verification\n      const urlValidation = isValidExternalURL(document.url);\n      if (!urlValidation.valid) {\n        this.logger.warn({ documentId, url: document.url }, 'Invalid URL for verification');\n        return false;\n      }\n\n      // Check if document is still available\n      const response = await safeFetch(document.url, { method: 'HEAD' });\n      const isAvailable = response.ok;\n\n      document.isActive = isAvailable;\n      document.lastVerified = new Date();\n\n      return isAvailable;\n    } catch (error) {\n      this.logger.error({ error, documentId }, 'Failed to verify document');\n      const document = this.discoveredDocuments.get(documentId);\n      if (document) {\n        document.isActive = false;\n        document.lastVerified = new Date();\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Add discovered document to internal storage\n   */\n  addDiscoveredDocument(document: CurriculumDocument): void {\n    this.discoveredDocuments.set(document.id, document);\n  }\n\n  /**\n   * Remove document from discovery results\n   */\n  removeDiscoveredDocument(documentId: string): boolean {\n    return this.discoveredDocuments.delete(documentId);\n  }\n\n  /**\n   * Get discovery statistics\n   */\n  getDiscoveryStats(): {\n    totalDocuments: number;\n    byProvince: Record<string, number>;\n    bySubject: Record<string, number>;\n    byGrade: Record<string, number>;\n    byStatus: Record<string, number>;\n    byLanguage: Record<string, number>;\n  } {\n    const documents = this.getDiscoveredDocuments();\n    \n    const stats = {\n      totalDocuments: documents.length,\n      byProvince: {} as Record<string, number>,\n      bySubject: {} as Record<string, number>,\n      byGrade: {} as Record<string, number>,\n      byStatus: {} as Record<string, number>,\n      byLanguage: {} as Record<string, number>,\n    };\n\n    documents.forEach((doc) => {\n      // Count by province\n      stats.byProvince[doc.province] = (stats.byProvince[doc.province] || 0) + 1;\n      \n      // Count by subject\n      if (doc.subject) {\n        stats.bySubject[doc.subject] = (stats.bySubject[doc.subject] || 0) + 1;\n      }\n      \n      // Count by grade\n      if (doc.grade !== undefined) {\n        const gradeKey = `Grade ${doc.grade}`;\n        stats.byGrade[gradeKey] = (stats.byGrade[gradeKey] || 0) + 1;\n      }\n      \n      // Count by status\n      stats.byStatus[doc.downloadStatus] = (stats.byStatus[doc.downloadStatus] || 0) + 1;\n      \n      // Count by language\n      stats.byLanguage[doc.language] = (stats.byLanguage[doc.language] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n   * Utility method to add delay between requests\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const curriculumDiscoveryService = new CurriculumDiscoveryService();"],"version":3}