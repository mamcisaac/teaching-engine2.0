{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/equipmentBooking.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/equipmentBooking.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, beforeEach } from '@jest/globals';\nimport { app } from '../../src/index';\nimport { authRequest } from '../test-auth-helper';\nimport { getTestPrismaClient } from '../jest.setup';\nimport { setupAuthenticatedTest } from '../test-setup-helpers';\n\n// DISABLED: Equipment booking is an archived feature not currently implemented\ndescribe.skip('Equipment Booking API - DISABLED (archived feature)', () => {\n  let teacherId: number;\n  let prisma: ReturnType<typeof getTestPrismaClient>;\n  const auth = authRequest(app);\n\n  beforeAll(async () => {\n    prisma = getTestPrismaClient();\n  });\n\n  beforeEach(async () => {\n    // Setup auth for each test to handle database resets\n    await setupAuthenticatedTest(prisma, auth);\n\n    // Create a teacher for the equipment bookings\n    const teacher = await prisma.user.create({\n      data: { email: `eb${Date.now()}@e.com`, password: 'x', name: 'EB', preferredLanguage: 'en' },\n    });\n    teacherId = teacher.id;\n  });\n\n  // No need for afterAll cleanup - database is reset after each test\n\n  it('creates and lists bookings', async () => {\n    const create = await auth.post('/api/equipment-bookings').send({\n      teacherId,\n      resourceName: 'iPad Cart',\n      neededBy: '2025-03-01T00:00:00.000Z',\n      leadTimeDays: 10,\n    });\n    expect(create.status).toBe(201);\n    const list = await auth.get(`/api/equipment-bookings?teacherId=${teacherId}`);\n    expect(list.status).toBe(200);\n    expect(list.body.length).toBeGreaterThan(0);\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle empty data scenarios', async () => {\n      // Test with missing required fields\n      const missingTeacher = await auth.post('/api/equipment-bookings').send({\n        resourceName: 'iPad Cart',\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 10,\n      });\n      expect(missingTeacher.status).toBe(400);\n\n      const missingResource = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 10,\n      });\n      expect(missingResource.status).toBe(400);\n\n      // Test empty string values\n      const emptyResource = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        resourceName: '',\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 10,\n      });\n      expect(emptyResource.status).toBe(400);\n    });\n\n    it('should handle maximum data limits', async () => {\n      // Test extremely long resource names\n      const longResourceName = 'a'.repeat(1000);\n      const longName = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        resourceName: longResourceName,\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 10,\n      });\n      expect(longName.status).toBe(400);\n\n      // Test maximum lead time\n      const maxLeadTime = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        resourceName: 'iPad Cart',\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 999999,\n      });\n      expect(maxLeadTime.status).toBe(400);\n    });\n\n    it('should handle special characters and Unicode', async () => {\n      const specialChars = [\n        'iPad Cart (français)',\n        'Équipement spécial',\n        'iPad 📱 Cart',\n        'Equipment \"Quote\" Test',\n        \"Equipment 'Apostrophe' Test\",\n        'Equipment\\\\BackslashTest',\n        'Equipment%PercentTest',\n      ];\n\n      for (const resourceName of specialChars) {\n        const response = await auth.post('/api/equipment-bookings').send({\n          teacherId,\n          resourceName,\n          neededBy: '2025-03-01T00:00:00.000Z',\n          leadTimeDays: 5,\n        });\n        // Should handle special characters gracefully\n        expect([200, 201, 400]).toContain(response.status);\n      }\n    });\n\n    it('should handle invalid date formats', async () => {\n      const invalidDates = [\n        'invalid-date',\n        '2025-13-01T00:00:00.000Z', // Invalid month\n        '2025-02-30T00:00:00.000Z', // Invalid day\n        '2025-01-01T25:00:00.000Z', // Invalid hour\n        '2025-01-01', // Missing time\n        '', // Empty string\n        null, // Null value\n        undefined, // Undefined value\n      ];\n\n      for (const date of invalidDates) {\n        const response = await auth.post('/api/equipment-bookings').send({\n          teacherId,\n          resourceName: 'iPad Cart',\n          neededBy: date,\n          leadTimeDays: 10,\n        });\n        expect(response.status).toBe(400);\n      }\n    });\n\n    it('should handle past dates', async () => {\n      const pastDate = new Date('2020-01-01T00:00:00.000Z');\n      const response = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        resourceName: 'iPad Cart',\n        neededBy: pastDate.toISOString(),\n        leadTimeDays: 10,\n      });\n      expect(response.status).toBe(400);\n    });\n\n    it('should handle negative and zero values', async () => {\n      // Test negative lead time\n      const negativeLeadTime = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        resourceName: 'iPad Cart',\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: -5,\n      });\n      expect(negativeLeadTime.status).toBe(400);\n\n      // Test zero lead time\n      const zeroLeadTime = await auth.post('/api/equipment-bookings').send({\n        teacherId,\n        resourceName: 'iPad Cart',\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 0,\n      });\n      expect([200, 201, 400]).toContain(zeroLeadTime.status);\n\n      // Test negative teacher ID\n      const negativeTeacher = await auth.post('/api/equipment-bookings').send({\n        teacherId: -1,\n        resourceName: 'iPad Cart',\n        neededBy: '2025-03-01T00:00:00.000Z',\n        leadTimeDays: 10,\n      });\n      expect(negativeTeacher.status).toBe(400);\n    });\n\n    it('should handle concurrent booking requests', async () => {\n      const bookingData = {\n        teacherId,\n        resourceName: 'Shared iPad Cart',\n        neededBy: '2025-04-01T00:00:00.000Z',\n        leadTimeDays: 10,\n      };\n\n      // Create multiple concurrent booking requests\n      const concurrentRequests = Array.from({ length: 5 }, () =>\n        auth.post('/api/equipment-bookings').send(bookingData),\n      );\n\n      const responses = await Promise.all(concurrentRequests);\n\n      // At least one should succeed\n      const successfulRequests = responses.filter((r) => r.status === 201);\n      expect(successfulRequests.length).toBeGreaterThan(0);\n    });\n\n    it('should handle extreme numeric values', async () => {\n      const extremeValues = [\n        Number.MAX_SAFE_INTEGER,\n        Number.MIN_SAFE_INTEGER,\n        Infinity,\n        -Infinity,\n        NaN,\n      ];\n\n      for (const value of extremeValues) {\n        const response = await auth.post('/api/equipment-bookings').send({\n          teacherId: value,\n          resourceName: 'iPad Cart',\n          neededBy: '2025-03-01T00:00:00.000Z',\n          leadTimeDays: 10,\n        });\n        expect(response.status).toBe(400);\n      }\n    });\n\n    it('should handle malformed JSON and request bodies', async () => {\n      // Test with invalid JSON structure\n      const malformedRequests = [\n        { teacherId: 'not-a-number' },\n        { leadTimeDays: 'not-a-number' },\n        { neededBy: 12345 }, // Number instead of string\n        { additionalField: 'should-be-ignored' },\n      ];\n\n      for (const data of malformedRequests) {\n        const response = await auth.post('/api/equipment-bookings').send({\n          ...data,\n          teacherId: data.teacherId || teacherId,\n          resourceName: 'iPad Cart',\n          neededBy: data.neededBy || '2025-03-01T00:00:00.000Z',\n          leadTimeDays: data.leadTimeDays || 10,\n        });\n\n        // Should handle malformed data gracefully\n        expect([200, 201, 400]).toContain(response.status);\n      }\n    });\n\n    it('should handle timezone edge cases', async () => {\n      const timezoneTestCases = [\n        '2025-03-01T00:00:00.000Z', // UTC\n        '2025-03-01T05:00:00.000-05:00', // EST\n        '2025-03-01T23:59:59.999Z', // End of day UTC\n        '2025-03-01T00:00:00.001Z', // Start of day UTC\n      ];\n\n      for (const dateString of timezoneTestCases) {\n        const response = await auth.post('/api/equipment-bookings').send({\n          teacherId,\n          resourceName: 'Timezone Test Cart',\n          neededBy: dateString,\n          leadTimeDays: 5,\n        });\n\n        // Should handle all valid ISO date formats\n        expect([200, 201]).toContain(response.status);\n      }\n    });\n\n    it('should handle leap year and DST transitions', async () => {\n      const specialDates = [\n        '2024-02-29T00:00:00.000Z', // Leap year\n        '2025-03-09T07:00:00.000Z', // DST begins (US)\n        '2025-11-02T06:00:00.000Z', // DST ends (US)\n        '2025-12-31T23:59:59.999Z', // Year end\n        '2026-01-01T00:00:00.000Z', // Year start\n      ];\n\n      for (const dateString of specialDates) {\n        const response = await auth.post('/api/equipment-bookings').send({\n          teacherId,\n          resourceName: 'Calendar Edge Case Cart',\n          neededBy: dateString,\n          leadTimeDays: 7,\n        });\n\n        expect([200, 201]).toContain(response.status);\n      }\n    });\n  });\n});\n"],"version":3}