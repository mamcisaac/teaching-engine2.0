{"version":3,"names":["cov_vxig0dxh5","actualCoverage","Router","prisma","router","s","post","req","res","_next","f","userId","b","user","id","status","json","error","planType","planId","body","recentPlanAccess","upsert","where","userId_planType_planId","update","lastAccessed","Date","accessCount","increment","create","success","err","console","get","limit","parseInt","query","recentAccesses","findMany","orderBy","take","recentPlans","Promise","all","map","access","plan","parentInfo","longRangePlan","findUnique","select","title","subject","grade","academicYear","_count","unitPlans","unitPlan","lessonPlans","eTFOLessonPlan","date","daybookEntry","lessonPlan","progress","undefined","Math","min","type","toLocaleDateString","parentTitle","validPlans","filter","Boolean","delete","deleteMany"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/recent-plans.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { prisma } from '../prisma';\n\nconst router = Router();\n\n// Track plan access\nrouter.post('/track', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { planType, planId } = req.body;\n\n    if (!planType || !planId) {\n      return res.status(400).json({ error: 'Plan type and ID are required' });\n    }\n\n    // Upsert recent plan access\n    await prisma.recentPlanAccess.upsert({\n      where: {\n        userId_planType_planId: {\n          userId,\n          planType,\n          planId,\n        },\n      },\n      update: {\n        lastAccessed: new Date(),\n        accessCount: { increment: 1 },\n      },\n      create: {\n        userId,\n        planType,\n        planId,\n        lastAccessed: new Date(),\n        accessCount: 1,\n      },\n    });\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error in recent plans route:', err);\n    res.status(500).json({ error: 'Failed to process request' });\n  }\n});\n\n// Get recent plans for user\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const limit = parseInt(req.query.limit as string) || 10;\n\n    const recentAccesses = await prisma.recentPlanAccess.findMany({\n      where: { userId },\n      orderBy: { lastAccessed: 'desc' },\n      take: limit,\n    });\n\n    // Fetch plan details for each recent access\n    const recentPlans = await Promise.all(\n      recentAccesses.map(async (access) => {\n        let plan = null;\n        let parentInfo = null;\n\n        switch (access.planType) {\n          case 'long-range':\n            plan = await prisma.longRangePlan.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                title: true,\n                subject: true,\n                grade: true,\n                academicYear: true,\n                _count: {\n                  select: { unitPlans: true },\n                },\n              },\n            });\n            break;\n\n          case 'unit':\n            plan = await prisma.unitPlan.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                title: true,\n                longRangePlan: {\n                  select: {\n                    id: true,\n                    title: true,\n                    subject: true,\n                    grade: true,\n                  },\n                },\n                _count: {\n                  select: { lessonPlans: true },\n                },\n              },\n            });\n            if (plan) {\n              parentInfo = plan.longRangePlan;\n            }\n            break;\n\n          case 'lesson':\n            plan = await prisma.eTFOLessonPlan.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                title: true,\n                date: true,\n                unitPlan: {\n                  select: {\n                    id: true,\n                    title: true,\n                    longRangePlan: {\n                      select: {\n                        subject: true,\n                        grade: true,\n                      },\n                    },\n                  },\n                },\n                daybookEntry: {\n                  select: { id: true },\n                },\n              },\n            });\n            if (plan) {\n              parentInfo = plan.unitPlan;\n            }\n            break;\n\n          case 'daybook':\n            plan = await prisma.daybookEntry.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                date: true,\n                lessonPlan: {\n                  select: {\n                    id: true,\n                    title: true,\n                    unitPlan: {\n                      select: {\n                        title: true,\n                        longRangePlan: {\n                          select: {\n                            subject: true,\n                            grade: true,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            });\n            if (plan?.lessonPlan) {\n              parentInfo = plan.lessonPlan.unitPlan;\n            }\n            break;\n        }\n\n        if (!plan) return null;\n\n        // Calculate progress based on plan type\n        let progress = undefined;\n        let status = 'in-progress';\n\n        if (access.planType === 'long-range' && '_count' in plan) {\n          // For simplicity, assume progress based on unit count\n          progress = Math.min(plan._count.unitPlans * 10, 100);\n        } else if (access.planType === 'unit' && '_count' in plan) {\n          progress = Math.min(plan._count.lessonPlans * 5, 100);\n        } else if (access.planType === 'lesson' && 'daybookEntry' in plan) {\n          status = plan.daybookEntry ? 'completed' : 'in-progress';\n        }\n\n        return {\n          id: plan.id,\n          type: access.planType,\n          title:\n            'title' in plan ? plan.title : `Daybook - ${new Date(plan.date).toLocaleDateString()}`,\n          subject: parentInfo?.longRangePlan?.subject || parentInfo?.subject,\n          grade: parentInfo?.longRangePlan?.grade || parentInfo?.grade,\n          lastAccessed: access.lastAccessed,\n          progress,\n          status,\n          parentTitle: parentInfo?.title,\n        };\n      }),\n    );\n\n    // Filter out null values (deleted plans)\n    const validPlans = recentPlans.filter(Boolean);\n\n    res.json(validPlans);\n  } catch (err) {\n    console.error('Error in recent plans route:', err);\n    res.status(500).json({ error: 'Failed to process request' });\n  }\n});\n\n// Clear recent plans history\nrouter.delete('/clear', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    await prisma.recentPlanAccess.deleteMany({\n      where: { userId },\n    });\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error in recent plans route:', err);\n    res.status(500).json({ error: 'Failed to process request' });\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}