{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/auth.refactored.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/auth.refactored.test.ts"],"sourcesContent":["/**\n * Refactored Auth Middleware Unit Tests\n * \n * This demonstrates the new standardized test patterns:\n * - Using the test framework utilities\n * - Consistent mocking patterns\n * - Better test isolation\n * - Clear test structure\n */\n\nimport {\n  describe,\n  it,\n  expect,\n  beforeEach,\n  isolatedTest,\n  AuthHelper,\n  MockFactory,\n  AssertionHelpers\n} from '../utils/testFramework';\nimport { Response } from 'express';\nimport { authMiddleware, type AuthRequest } from '../../src/middleware/auth';\n\ndescribe('Auth Middleware - Refactored', () => {\n  const authHelper = new AuthHelper();\n  let req: Partial<AuthRequest>;\n  let res: Partial<Response>;\n  let next: jest.MockedFunction<() => void>;\n\n  beforeEach(() => {\n    // Clean setup for each test\n    req = { headers: {} };\n    res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n    };\n    next = jest.fn();\n  });\n\n  describe('Authorization Header Validation', () => {\n    it('should reject requests without authorization header', () => {\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n      expect(next).not.toHaveBeenCalled();\n    });\n\n    it('should reject requests with empty authorization header', () => {\n      req.headers!.authorization = '';\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n      expect(next).not.toHaveBeenCalled();\n    });\n\n    it('should reject requests with malformed authorization header', () => {\n      req.headers!.authorization = 'InvalidFormat token';\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n    });\n  });\n\n  describe('Token Validation', () => {\n    isolatedTest('should accept valid JWT token', async (context) => {\n      const userId = 'test-user-123';\n      const token = authHelper.createToken(userId);\n      \n      req.headers!.authorization = `Bearer ${token}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      expect(req.user).toEqual({ userId });\n      expect(next).toHaveBeenCalledTimes(1);\n      expect(res.status).not.toHaveBeenCalled();\n    });\n\n    isolatedTest('should reject expired tokens', async (context) => {\n      const userId = 'test-user-456';\n      const expiredToken = authHelper.createExpiredToken(userId);\n      \n      req.headers!.authorization = `Bearer ${expiredToken}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n      expect(req.user).toBeUndefined();\n      expect(next).not.toHaveBeenCalled();\n    });\n\n    it('should reject invalid tokens', () => {\n      req.headers!.authorization = 'Bearer invalid-jwt-token';\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n    });\n\n    it('should reject tokens with invalid signature', () => {\n      // Create token with different secret\n      const jwt = require('jsonwebtoken');\n      const invalidToken = jwt.sign({ userId: '789' }, 'wrong-secret');\n      \n      req.headers!.authorization = `Bearer ${invalidToken}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n    });\n  });\n\n  describe('Token Extraction', () => {\n    it('should extract user data from valid token', () => {\n      const userId = 'user-789';\n      const additionalClaims = { role: 'admin', email: 'admin@example.com' };\n      const token = authHelper.createToken(userId, {\n        expiresIn: '2h',\n        issuer: 'test-suite'\n      });\n      \n      // Mock JWT to include additional claims\n      const jwt = require('jsonwebtoken');\n      jest.spyOn(jwt, 'verify').mockImplementationOnce((token, secret, callback) => {\n        callback(null, { userId, ...additionalClaims });\n      });\n      \n      req.headers!.authorization = `Bearer ${token}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      expect(req.user).toEqual({ userId, ...additionalClaims });\n      expect(next).toHaveBeenCalled();\n    });\n\n    it('should handle case-insensitive bearer prefix', () => {\n      const userId = 'case-test-user';\n      const token = authHelper.createToken(userId);\n      \n      // Test different case variations\n      const bearerVariations = ['Bearer', 'BEARER', 'bearer', 'BeArEr'];\n      \n      bearerVariations.forEach(bearerPrefix => {\n        req.headers!.authorization = `${bearerPrefix} ${token}`;\n        \n        authMiddleware(req as AuthRequest, res as Response, next);\n        \n        expect(req.user?.userId).toBe(userId);\n        expect(next).toHaveBeenCalled();\n        \n        // Reset for next iteration\n        req.user = undefined;\n        next.mockClear();\n      });\n    });\n  });\n\n  describe('Environment Configuration', () => {\n    it('should use JWT_SECRET from environment', () => {\n      const originalSecret = process.env.JWT_SECRET;\n      const customSecret = 'custom-test-secret-12345';\n      process.env.JWT_SECRET = customSecret;\n\n      const userId = 'env-test-user';\n      const jwt = require('jsonwebtoken');\n      const token = jwt.sign({ userId }, customSecret);\n      \n      req.headers!.authorization = `Bearer ${token}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      expect(req.user?.userId).toBe(userId);\n      expect(next).toHaveBeenCalled();\n\n      // Restore original\n      process.env.JWT_SECRET = originalSecret;\n    });\n\n    it('should fall back to default secret when JWT_SECRET is not set', () => {\n      const originalSecret = process.env.JWT_SECRET;\n      delete process.env.JWT_SECRET;\n\n      const userId = 'fallback-test-user';\n      const jwt = require('jsonwebtoken');\n      const token = jwt.sign({ userId }, 'secret'); // Default fallback\n      \n      req.headers!.authorization = `Bearer ${token}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      expect(req.user?.userId).toBe(userId);\n      expect(next).toHaveBeenCalled();\n\n      // Restore original\n      if (originalSecret) {\n        process.env.JWT_SECRET = originalSecret;\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle JWT decode errors gracefully', () => {\n      const jwt = require('jsonwebtoken');\n      jest.spyOn(jwt, 'verify').mockImplementationOnce(() => {\n        throw new Error('JWT decode failed');\n      });\n      \n      req.headers!.authorization = 'Bearer some-token';\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      AssertionHelpers.assertErrorResponse(\n        { status: res.status, body: res.json },\n        401,\n        'Unauthorized'\n      );\n    });\n\n    it('should handle missing user ID in token', () => {\n      const jwt = require('jsonwebtoken');\n      const tokenWithoutUserId = jwt.sign({ role: 'admin' }, 'secret');\n      \n      req.headers!.authorization = `Bearer ${tokenWithoutUserId}`;\n\n      authMiddleware(req as AuthRequest, res as Response, next);\n\n      // Should still pass but with incomplete user object\n      expect(req.user).toBeDefined();\n      expect(req.user?.userId).toBeUndefined();\n      expect(next).toHaveBeenCalled();\n    });\n  });\n});"],"version":3}