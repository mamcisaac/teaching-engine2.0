{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/utils/testFramework.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/utils/testFramework.ts"],"sourcesContent":["/**\n * Standardized Test Framework for Teaching Engine 2.0\n * \n * Provides consistent patterns and utilities for all test types:\n * - Unit tests\n * - Integration tests\n * - Performance tests\n * \n * Goals:\n * - Eliminate test flakiness\n * - Improve test isolation\n * - Standardize mocking patterns\n * - Simplify setup/teardown\n */\n\nimport { jest } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\nimport type { Express } from 'express';\nimport request from 'supertest';\nimport jwt from 'jsonwebtoken';\nimport { faker } from '@faker-js/faker';\nimport { performance } from 'perf_hooks';\n\n// Re-export commonly used testing utilities\nexport { describe, it, test, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';\nexport { jest };\n\n/**\n * Base test suite class for consistent test structure\n */\nexport abstract class TestSuite {\n  protected prisma: PrismaClient;\n  protected app: Express;\n  protected testStartTime: number;\n  protected cleanupFunctions: Array<() => Promise<void>> = [];\n\n  /**\n   * Setup test environment\n   */\n  async setup(): Promise<void> {\n    this.testStartTime = performance.now();\n    this.prisma = await this.createPrismaClient();\n    this.app = await this.createApp();\n    await this.seedData();\n  }\n\n  /**\n   * Teardown test environment\n   */\n  async teardown(): Promise<void> {\n    // Run all cleanup functions in reverse order\n    for (const cleanupFn of this.cleanupFunctions.reverse()) {\n      await cleanupFn();\n    }\n    \n    await this.cleanup();\n    await this.prisma.$disconnect();\n    \n    const duration = performance.now() - this.testStartTime;\n    if (duration > 5000) {\n      console.warn(`⚠️  Long test duration: ${duration.toFixed(0)}ms`);\n    }\n  }\n\n  /**\n   * Register a cleanup function to be called during teardown\n   */\n  protected registerCleanup(fn: () => Promise<void>): void {\n    this.cleanupFunctions.push(fn);\n  }\n\n  /**\n   * Create isolated Prisma client for testing\n   */\n  protected abstract createPrismaClient(): Promise<PrismaClient>;\n\n  /**\n   * Create test application instance\n   */\n  protected abstract createApp(): Promise<Express>;\n\n  /**\n   * Seed initial test data\n   */\n  protected abstract seedData(): Promise<void>;\n\n  /**\n   * Clean up test data\n   */\n  protected abstract cleanup(): Promise<void>;\n}\n\n/**\n * Test context for isolated test execution\n */\nexport interface TestContext {\n  prisma: PrismaClient;\n  app: Express;\n  auth: AuthHelper;\n  factories: MockFactory;\n  cleanup: () => Promise<void>;\n}\n\n/**\n * Create isolated test context\n */\nexport async function createIsolatedContext(): Promise<TestContext> {\n  const testId = faker.string.uuid();\n  const prisma = new PrismaClient({\n    datasources: {\n      db: {\n        url: `file:./test-${testId}.db`\n      }\n    }\n  });\n\n  await prisma.$connect();\n\n  const auth = new AuthHelper();\n  const factories = new MockFactory(prisma);\n  \n  const cleanup = async () => {\n    await prisma.$disconnect();\n    // Clean up test database file\n    const fs = await import('fs/promises');\n    try {\n      await fs.unlink(`./test-${testId}.db`);\n      await fs.unlink(`./test-${testId}.db-journal`);\n    } catch {\n      // Ignore cleanup errors\n    }\n  };\n\n  return {\n    prisma,\n    app: null as any, // Will be set by test\n    auth,\n    factories,\n    cleanup\n  };\n}\n\n/**\n * Isolated test wrapper for automatic cleanup\n */\nexport function isolatedTest(\n  name: string,\n  fn: (context: TestContext) => Promise<void>\n): void {\n  test(name, async () => {\n    const context = await createIsolatedContext();\n    try {\n      await fn(context);\n    } finally {\n      await context.cleanup();\n    }\n  });\n}\n\n/**\n * Authentication helper for tests\n */\nexport class AuthHelper {\n  private defaultSecret = 'test-secret';\n\n  /**\n   * Create a valid JWT token\n   */\n  createToken(userId: string, options?: jwt.SignOptions): string {\n    const secret = process.env.JWT_SECRET || this.defaultSecret;\n    return jwt.sign({ userId }, secret, {\n      expiresIn: '1h',\n      ...options\n    });\n  }\n\n  /**\n   * Create an expired token\n   */\n  createExpiredToken(userId: string): string {\n    return this.createToken(userId, {\n      expiresIn: '-1h'\n    });\n  }\n\n  /**\n   * Create authorization header\n   */\n  createAuthHeader(userId: string): { Authorization: string } {\n    return {\n      Authorization: `Bearer ${this.createToken(userId)}`\n    };\n  }\n\n  /**\n   * Create authenticated request\n   */\n  authenticatedRequest(app: Express, userId: string) {\n    const token = this.createToken(userId);\n    return {\n      get: (url: string) => request(app).get(url).set('Authorization', `Bearer ${token}`),\n      post: (url: string) => request(app).post(url).set('Authorization', `Bearer ${token}`),\n      put: (url: string) => request(app).put(url).set('Authorization', `Bearer ${token}`),\n      patch: (url: string) => request(app).patch(url).set('Authorization', `Bearer ${token}`),\n      delete: (url: string) => request(app).delete(url).set('Authorization', `Bearer ${token}`)\n    };\n  }\n}\n\n/**\n * Mock factory for creating test data\n */\nexport class MockFactory {\n  constructor(private prisma: PrismaClient) {}\n\n  /**\n   * Create a test user\n   */\n  async createUser(overrides?: Partial<any>): Promise<any> {\n    const user = {\n      id: faker.string.uuid(),\n      email: faker.internet.email(),\n      name: faker.person.fullName(),\n      password: await this.hashPassword('password123'),\n      role: 'TEACHER',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n\n    return this.prisma.user.create({ data: user });\n  }\n\n  /**\n   * Create a test student\n   */\n  async createStudent(userId: string, overrides?: Partial<any>): Promise<any> {\n    const student = {\n      id: faker.string.uuid(),\n      name: faker.person.fullName(),\n      gradeLevel: faker.helpers.arrayElement(['K', '1', '2', '3', '4', '5', '6']),\n      userId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n\n    return this.prisma.student.create({ data: student });\n  }\n\n  /**\n   * Create a test curriculum expectation\n   */\n  async createExpectation(overrides?: Partial<any>): Promise<any> {\n    const expectation = {\n      id: faker.string.uuid(),\n      code: faker.string.alphanumeric(6).toUpperCase(),\n      description: faker.lorem.sentence(),\n      subject: faker.helpers.arrayElement(['Math', 'Science', 'English', 'Social Studies']),\n      gradeLevel: faker.helpers.arrayElement(['1', '2', '3', '4', '5', '6']),\n      strand: faker.lorem.word(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n\n    return this.prisma.curriculumExpectation.create({ data: expectation });\n  }\n\n  /**\n   * Create a test lesson plan\n   */\n  async createLessonPlan(userId: string, overrides?: Partial<any>): Promise<any> {\n    const lessonPlan = {\n      id: faker.string.uuid(),\n      title: faker.lorem.sentence(),\n      subject: faker.helpers.arrayElement(['Math', 'Science', 'English', 'Social Studies']),\n      gradeLevel: faker.helpers.arrayElement(['1', '2', '3', '4', '5', '6']),\n      duration: faker.number.int({ min: 30, max: 120 }),\n      date: faker.date.future(),\n      userId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n\n    return this.prisma.lessonPlan.create({ data: lessonPlan });\n  }\n\n  /**\n   * Hash password for test users\n   */\n  private async hashPassword(password: string): Promise<string> {\n    const bcrypt = await import('bcryptjs');\n    return bcrypt.hash(password, 10);\n  }\n}\n\n/**\n * Performance test utilities\n */\nexport class PerformanceTestHelper {\n  private measurements: Map<string, number[]> = new Map();\n\n  /**\n   * Measure execution time of a function\n   */\n  async measure<T>(name: string, fn: () => Promise<T>): Promise<T> {\n    const start = performance.now();\n    const result = await fn();\n    const duration = performance.now() - start;\n\n    if (!this.measurements.has(name)) {\n      this.measurements.set(name, []);\n    }\n    this.measurements.get(name)!.push(duration);\n\n    return result;\n  }\n\n  /**\n   * Get performance statistics\n   */\n  getStats(name: string): {\n    count: number;\n    min: number;\n    max: number;\n    avg: number;\n    p95: number;\n  } | null {\n    const measurements = this.measurements.get(name);\n    if (!measurements || measurements.length === 0) {\n      return null;\n    }\n\n    const sorted = [...measurements].sort((a, b) => a - b);\n    const p95Index = Math.floor(sorted.length * 0.95);\n\n    return {\n      count: measurements.length,\n      min: Math.min(...measurements),\n      max: Math.max(...measurements),\n      avg: measurements.reduce((sum, val) => sum + val, 0) / measurements.length,\n      p95: sorted[p95Index]\n    };\n  }\n\n  /**\n   * Assert performance threshold\n   */\n  assertPerformance(name: string, maxDuration: number): void {\n    const stats = this.getStats(name);\n    if (!stats) {\n      throw new Error(`No measurements found for ${name}`);\n    }\n\n    if (stats.p95 > maxDuration) {\n      throw new Error(\n        `Performance threshold exceeded for ${name}: ` +\n        `p95=${stats.p95.toFixed(0)}ms, max=${maxDuration}ms`\n      );\n    }\n  }\n}\n\n/**\n * Test data builders for complex scenarios\n */\nexport class TestDataBuilder {\n  constructor(private factories: MockFactory) {}\n\n  /**\n   * Build a complete classroom setup\n   */\n  async buildClassroom(userId: string, studentCount: number = 20): Promise<{\n    teacher: any;\n    students: any[];\n    subjects: any[];\n    expectations: any[];\n  }> {\n    const teacher = await this.factories.createUser({ id: userId });\n    \n    const students = await Promise.all(\n      Array.from({ length: studentCount }, () =>\n        this.factories.createStudent(userId)\n      )\n    );\n\n    const subjects = ['Math', 'Science', 'English', 'Social Studies'];\n    \n    const expectations = await Promise.all(\n      subjects.flatMap(subject =>\n        Array.from({ length: 5 }, () =>\n          this.factories.createExpectation({ subject })\n        )\n      )\n    );\n\n    return { teacher, students, subjects, expectations };\n  }\n\n  /**\n   * Build a week of lesson plans\n   */\n  async buildWeekOfLessons(userId: string, startDate: Date): Promise<any[]> {\n    const lessons = [];\n    const subjects = ['Math', 'Science', 'English', 'Social Studies', 'Art'];\n\n    for (let day = 0; day < 5; day++) {\n      const date = new Date(startDate);\n      date.setDate(date.getDate() + day);\n\n      for (const subject of subjects) {\n        const lesson = await this.factories.createLessonPlan(userId, {\n          subject,\n          date,\n          duration: 45\n        });\n        lessons.push(lesson);\n      }\n    }\n\n    return lessons;\n  }\n}\n\n/**\n * Assertion helpers for common test scenarios\n */\nexport class AssertionHelpers {\n  /**\n   * Assert API response structure\n   */\n  static assertApiResponse(response: any, expectedStatus: number, expectedShape?: object): void {\n    expect(response.status).toBe(expectedStatus);\n    \n    if (expectedShape) {\n      expect(response.body).toMatchObject(expectedShape);\n    }\n  }\n\n  /**\n   * Assert error response\n   */\n  static assertErrorResponse(response: any, expectedStatus: number, expectedMessage?: string): void {\n    expect(response.status).toBe(expectedStatus);\n    expect(response.body).toHaveProperty('error');\n    \n    if (expectedMessage) {\n      expect(response.body.error).toContain(expectedMessage);\n    }\n  }\n\n  /**\n   * Assert pagination response\n   */\n  static assertPaginatedResponse(response: any, expectedProperties: string[] = []): void {\n    expect(response.body).toHaveProperty('data');\n    expect(response.body).toHaveProperty('total');\n    expect(response.body).toHaveProperty('page');\n    expect(response.body).toHaveProperty('pageSize');\n    expect(Array.isArray(response.body.data)).toBe(true);\n\n    if (expectedProperties.length > 0 && response.body.data.length > 0) {\n      expectedProperties.forEach(prop => {\n        expect(response.body.data[0]).toHaveProperty(prop);\n      });\n    }\n  }\n}\n\n/**\n * Wait utilities for async operations\n */\nexport class WaitUtils {\n  /**\n   * Wait for a condition to be true\n   */\n  static async waitFor(\n    condition: () => boolean | Promise<boolean>,\n    timeout: number = 5000,\n    interval: number = 100\n  ): Promise<void> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      if (await condition()) {\n        return;\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    \n    throw new Error(`Timeout waiting for condition after ${timeout}ms`);\n  }\n\n  /**\n   * Wait for a specific duration\n   */\n  static async wait(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Export all utilities\nexport {\n  isolatedTest,\n  createIsolatedContext,\n  AuthHelper,\n  MockFactory,\n  PerformanceTestHelper,\n  TestDataBuilder,\n  AssertionHelpers,\n  WaitUtils\n};"],"version":3}