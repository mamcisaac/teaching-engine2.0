{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/test-database-manager.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/test-database-manager.ts"],"sourcesContent":["import { PrismaClient } from '@teaching-engine/database';\nimport { execSync } from 'child_process';\nimport { resolve } from 'path';\n\ninterface TransactionClient {\n  client: PrismaClient;\n  rollback: () => Promise<void>;\n}\n\nclass TestDatabaseManager {\n  private clients: Map<string, PrismaClient> = new Map();\n  private transactions: Map<string, TransactionClient> = new Map();\n  private connectionStats: Map<string, { queries: number; startTime: number }> = new Map();\n\n  async createTestDatabase(workerId: string): Promise<void> {\n    const databaseUrl = this.getDatabaseUrl(workerId);\n    process.env.DATABASE_URL = databaseUrl;\n\n    // Create a new Prisma client for this worker\n    const client = new PrismaClient({\n      datasources: {\n        db: {\n          url: databaseUrl,\n        },\n      },\n    });\n\n    this.clients.set(workerId, client);\n    this.connectionStats.set(workerId, { queries: 0, startTime: Date.now() });\n\n    // Initialize the database schema\n    const databasePath = resolve(process.cwd(), '..', 'packages', 'database');\n    try {\n      execSync('npx prisma db push --force-reset --skip-generate', {\n        stdio: 'inherit',\n        cwd: databasePath,\n        env: { ...process.env, DATABASE_URL: databaseUrl },\n      });\n    } catch (error) {\n      console.error(`Failed to create test database for worker ${workerId}:`, error);\n      throw error;\n    }\n  }\n\n  async isDatabaseHealthy(workerId: string): Promise<boolean> {\n    const client = this.clients.get(workerId);\n    if (!client) return false;\n\n    try {\n      await client.$queryRaw`SELECT 1`;\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async startTransaction(testId: string): Promise<PrismaClient> {\n    const workerId = process.env.JEST_WORKER_ID || 'default';\n    const client = this.clients.get(workerId);\n\n    if (!client) {\n      throw new Error(`No client found for worker ${workerId}`);\n    }\n\n    // For SQLite, just return the client without transactions\n    // We'll rely on resetting the database between tests\n    this.transactions.set(testId, {\n      client,\n      rollback: async () => {\n        // No-op for now\n      },\n    });\n\n    return client;\n  }\n\n  async rollbackTransaction(testId: string): Promise<void> {\n    const transaction = this.transactions.get(testId);\n    if (transaction) {\n      await transaction.rollback();\n      this.transactions.delete(testId);\n    }\n  }\n\n  async resetDatabase(workerId: string): Promise<void> {\n    const client = this.clients.get(workerId);\n    if (!client) return;\n\n    try {\n      // For SQLite, get all table names dynamically\n      const tables = await client.$queryRaw<Array<{ name: string }>>`\n        SELECT name FROM sqlite_master \n        WHERE type='table' \n        AND name NOT LIKE 'sqlite_%'\n        AND name NOT LIKE '_prisma_migrations'\n      `;\n\n      // Disable foreign key constraints for SQLite\n      await client.$executeRawUnsafe('PRAGMA foreign_keys = OFF');\n\n      // Clear all tables\n      for (const { name } of tables) {\n        await client.$executeRawUnsafe(`DELETE FROM \"${name}\"`);\n      }\n\n      // Reset autoincrement sequences\n      await client.$executeRawUnsafe(`DELETE FROM sqlite_sequence`);\n\n      // Re-enable foreign key constraints\n      await client.$executeRawUnsafe('PRAGMA foreign_keys = ON');\n    } catch (error) {\n      console.error(`Failed to reset database for worker ${workerId}:`, error);\n      throw error;\n    }\n  }\n\n  async getConnectionStats(workerId: string) {\n    const stats = this.connectionStats.get(workerId);\n    if (!stats) return null;\n\n    return {\n      queries: stats.queries,\n      uptime: Date.now() - stats.startTime,\n      workerId,\n    };\n  }\n\n  async cleanup(): Promise<void> {\n    // Disconnect all clients\n    for (const [workerId, client] of this.clients) {\n      try {\n        await client.$disconnect();\n      } catch (error) {\n        console.error(`Failed to disconnect client for worker ${workerId}:`, error);\n      }\n    }\n\n    this.clients.clear();\n    this.transactions.clear();\n    this.connectionStats.clear();\n  }\n\n  getPrismaClient(workerId: string): PrismaClient {\n    let client = this.clients.get(workerId);\n    if (!client) {\n      // Create client on demand if it doesn't exist\n      const databaseUrl = this.getDatabaseUrl(workerId);\n      process.env.DATABASE_URL = databaseUrl;\n\n      client = new PrismaClient({\n        datasources: {\n          db: {\n            url: databaseUrl,\n          },\n        },\n      });\n\n      this.clients.set(workerId, client);\n      this.connectionStats.set(workerId, { queries: 0, startTime: Date.now() });\n    }\n    return client;\n  }\n\n  async executeWithRetry<T>(fn: () => Promise<T>, retries = 3): Promise<T> {\n    let lastError: Error | null = null;\n\n    for (let i = 0; i < retries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error as Error;\n\n        // If it's a database locked error, wait before retrying\n        if (lastError.message.includes('database is locked')) {\n          await new Promise((resolve) => setTimeout(resolve, 100 * (i + 1)));\n        } else {\n          // For other errors, don't retry\n          throw error;\n        }\n      }\n    }\n\n    throw lastError || new Error('Failed after retries');\n  }\n\n  private getDatabaseUrl(workerId: string): string {\n    // Use a unique database file for each worker to avoid conflicts\n    const dbPath = resolve(process.cwd(), 'tests', `test-${workerId}.db`);\n    return `file:${dbPath}`;\n  }\n}\n\n// Export a singleton instance\nexport const testDb = new TestDatabaseManager();\n"],"version":3}