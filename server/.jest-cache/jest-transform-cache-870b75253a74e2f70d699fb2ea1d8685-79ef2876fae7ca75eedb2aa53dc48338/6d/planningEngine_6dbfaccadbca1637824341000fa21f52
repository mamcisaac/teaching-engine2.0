064f9033be9ba919c5cfd45e6eb96134
export function filterAvailableBlocksByCalendar(slots, events, unavailable = [], holidays = []) {
    return slots
        .filter((s) => s.subjectId)
        .filter((slot) => {
        // Filter out holidays (CalendarEvents with type 'HOLIDAY' and allDay true)
        const holidayEvents = holidays.filter(h => h.eventType === 'HOLIDAY' && h.allDay);
        return !holidayEvents.some((h) => (new Date(h.start).getUTCDay() + 6) % 7 === slot.day);
    })
        .filter((slot) => {
        const dayEvents = events.filter((e) => (new Date(e.start).getUTCDay() + 6) % 7 === slot.day);
        return dayEvents.every((ev) => {
            const start = ev.allDay
                ? 0
                : new Date(ev.start).getUTCHours() * 60 + new Date(ev.start).getUTCMinutes();
            const end = ev.allDay
                ? 1440
                : new Date(ev.end).getUTCHours() * 60 + new Date(ev.end).getUTCMinutes();
            return end <= slot.startMin || start >= slot.endMin;
        });
    })
        .filter((slot) => {
        const dayBlocks = unavailable.filter((b) => (new Date(b.date).getUTCDay() + 6) % 7 === slot.day);
        return dayBlocks.every((b) => b.endMin <= slot.startMin || b.startMin >= slot.endMin);
    })
        .map((s) => ({
        day: s.day,
        slotId: s.id,
        startMin: s.startMin,
        endMin: s.endMin,
        subjectId: s.subjectId,
    }));
}
export function scheduleBufferBlockPerDay(schedule, blocks, preserve) {
    if (!preserve)
        return schedule;
    const byDay = new Map();
    for (const b of blocks) {
        if (!byDay.has(b.day))
            byDay.set(b.day, []);
        byDay.get(b.day).push(b);
    }
    const result = [...schedule];
    for (const [day, dayBlocks] of byDay.entries()) {
        const used = new Set(result.filter((s) => s.day === day).map((s) => s.slotId));
        const free = dayBlocks.find((b) => !used.has(b.slotId));
        if (free) {
            result.push({ day, slotId: free.slotId, activityId: null });
        }
        else {
            const idx = result
                .map((s, i) => [s, i])
                .filter(([s]) => s.day === day)
                .pop();
            if (idx) {
                const [removed, index] = idx;
                result.splice(index, 1);
                result.push({ day, slotId: removed.slotId, activityId: null });
            }
        }
    }
    return result;
}
/**
 * TODO: Reimplement using ETFO lesson plans
 * Generate a weekly schedule using ETFO lesson plans and unit plans
 * @param opts Schedule generation options
 * @returns Array of scheduled items mapped to ETFO lesson plans
 */
export async function generateWeeklySchedule(_opts) {
    // TODO: Implement scheduling logic using:
    // - ETFOLessonPlan model for individual lessons
    // - UnitPlan model for unit-level scheduling
    // - DayPlan model for daily organization
    console.warn('generateWeeklySchedule pending reimplementation with ETFO planning models');
    return [];
}
/**
 * TODO: Reimplement using ETFO lesson plans and Activity Discovery
 * Generate activity suggestions based on curriculum alignment
 * @param options Filter options for suggestions
 * @returns Array of suggested activities from Activity Discovery service
 */
export async function generateSuggestions(_options = {}) {
    // TODO: Implement suggestion logic using:
    // - Activity Discovery service for external activities
    // - ExternalActivity model for activity suggestions
    // - CurriculumExpectation model for alignment
    console.warn('generateSuggestions pending reimplementation with Activity Discovery service');
    return [];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9zZXJ2aWNlcy9wbGFubmluZ0VuZ2luZS50cyIsIm1hcHBpbmdzIjoiQUF1QkEsTUFBTSxVQUFVLCtCQUErQixDQUM3QyxLQU1FLEVBQ0YsTUFBdUIsRUFDdkIsY0FBa0MsRUFBRSxFQUNwQyxXQUE0QixFQUFFO0lBRTlCLE9BQU8sS0FBSztTQUNULE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztTQUMxQixNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNmLDJFQUEyRTtRQUMzRSxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xGLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFGLENBQUMsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2YsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3RixPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUM1QixNQUFNLEtBQUssR0FBRyxFQUFF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WixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLG1CQUFtQixDQUN2QyxXQUFrRCxFQUFFO0lBRXBELDBDQUEwQztJQUMxQyx1REFBdUQ7SUFDdkQsb0RBQW9EO0lBQ3BELDhDQUE4QztJQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLDhFQUE4RSxDQUFDLENBQUM7SUFDN0YsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvc2VydmljZXMvcGxhbm5pbmdFbmdpbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDYWxlbmRhckV2ZW50LCBVbmF2YWlsYWJsZUJsb2NrIH0gZnJvbSAnQHRlYWNoaW5nLWVuZ2luZS9kYXRhYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVJdGVtIHtcbiAgZGF5OiBudW1iZXI7XG4gIHNsb3RJZDogbnVtYmVyO1xuICBhY3Rpdml0eUlkOiBudW1iZXIgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhaWx5QmxvY2sge1xuICBkYXk6IG51bWJlcjtcbiAgc2xvdElkOiBudW1iZXI7XG4gIHN0YXJ0TWluOiBudW1iZXI7XG4gIGVuZE1pbjogbnVtYmVyO1xuICBzdWJqZWN0SWQ/OiBudW1iZXIgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlU2NoZWR1bGVPcHRpb25zIHtcbiAgYXZhaWxhYmxlQmxvY2tzOiBEYWlseUJsb2NrW107XG4gIG1pbGVzdG9uZVByaW9yaXRpZXM6IE1hcDxudW1iZXIsIG51bWJlcj47XG4gIHBhY2luZ1N0cmF0ZWd5OiAnc3RyaWN0JyB8ICdyZWxheGVkJztcbiAgcHJlc2VydmVCdWZmZXI6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJBdmFpbGFibGVCbG9ja3NCeUNhbGVuZGFyKFxuICBzbG90czogQXJyYXk8e1xuICAgIGlkOiBudW1iZXI7XG4gICAgZGF5OiBudW1iZXI7XG4gICAgc3RhcnRNaW46IG51bWJlcjtcbiAgICBlbmRNaW46IG51bWJlcjtcbiAgICBzdWJqZWN0SWQ6IG51bWJlciB8IG51bGw7XG4gIH0+LFxuICBldmVudHM6IENhbGVuZGFyRXZlbnRbXSxcbiAgdW5hdmFpbGFibGU6IFVuYXZhaWxhYmxlQmxvY2tbXSA9IFtdLFxuICBob2xpZGF5czogQ2FsZW5kYXJFdmVudFtdID0gW10sIC8vIE5vdyB1c2luZyBDYWxlbmRhckV2ZW50IHdpdGggdHlwZSAnSE9MSURBWSdcbik6IERhaWx5QmxvY2tbXSB7XG4gIHJldHVybiBzbG90c1xuICAgIC5maWx0ZXIoKHMpID0+IHMuc3ViamVjdElkKVxuICAgIC5maWx0ZXIoKHNsb3QpID0+IHtcbiAgICAgIC8vIEZpbHRlciBvdXQgaG9saWRheXMgKENhbGVuZGFyRXZlbnRzIHdpdGggdHlwZSAnSE9MSURBWScgYW5kIGFsbERheSB0cnVlKVxuICAgICAgY29uc3QgaG9saWRheUV2ZW50cyA9IGhvbGlkYXlzLmZpbHRlcihoID0+IGguZXZlbnRUeXBlID09PSAnSE9MSURBWScgJiYgaC5hbGxEYXkpO1xuICAgICAgcmV0dXJuICFob2xpZGF5RXZlbnRzLnNvbWUoKGgpID0+IChuZXcgRGF0ZShoLnN0YXJ0KS5nZXRVVENEYXkoKSArIDYpICUgNyA9PT0gc2xvdC5kYXkpO1xuICAgIH0pXG4gICAgLmZpbHRlcigoc2xvdCkgPT4ge1xuICAgICAgY29uc3QgZGF5RXZlbnRzID0gZXZlbnRzLmZpbHRlcigoZSkgPT4gKG5ldyBEYXRlKGUuc3RhcnQpLmdldFVUQ0RheSgpICsgNikgJSA3ID09PSBzbG90LmRheSk7XG4gICAgICByZXR1cm4gZGF5RXZlbnRzLmV2ZXJ5KChldikgPT4ge1xuICAgICAgICBjb25zdCBzdGFydCA9IGV2LmFsbERheVxuICAgICAgICAgID8gMFxuICAgICAgICAgIDogbmV3IERhdGUoZXYuc3RhcnQpLmdldFVUQ0hvdXJzKCkgKiA2MCArIG5ldyBEYXRlKGV2LnN0YXJ0KS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgIGNvbnN0IGVuZCA9IGV2LmFsbERheVxuICAgICAgICAgID8gMTQ0MFxuICAgICAgICAgIDogbmV3IERhdGUoZXYuZW5kKS5nZXRVVENIb3VycygpICogNjAgKyBuZXcgRGF0ZShldi5lbmQpLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgcmV0dXJuIGVuZCA8PSBzbG90LnN0YXJ0TWluIHx8IHN0YXJ0ID49IHNsb3QuZW5kTWluO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICAuZmlsdGVyKChzbG90KSA9PiB7XG4gICAgICBjb25zdCBkYXlCbG9ja3MgPSB1bmF2YWlsYWJsZS5maWx0ZXIoXG4gICAgICAgIChiKSA9PiAobmV3IERhdGUoYi5kYXRlKS5nZXRVVENEYXkoKSArIDYpICUgNyA9PT0gc2xvdC5kYXksXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRheUJsb2Nrcy5ldmVyeSgoYikgPT4gYi5lbmRNaW4gPD0gc2xvdC5zdGFydE1pbiB8fCBiLnN0YXJ0TWluID49IHNsb3QuZW5kTWluKTtcbiAgICB9KVxuICAgIC5tYXAoKHMpID0+ICh7XG4gICAgICBkYXk6IHMuZGF5LFxuICAgICAgc2xvdElkOiBzLmlkLFxuICAgICAgc3RhcnRNaW46IHMuc3RhcnRNaW4sXG4gICAgICBlbmRNaW46IHMuZW5kTWluLFxuICAgICAgc3ViamVjdElkOiBzLnN1YmplY3RJZCxcbiAgICB9KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUJ1ZmZlckJsb2NrUGVyRGF5KFxuICBzY2hlZHVsZTogU2NoZWR1bGVJdGVtW10sXG4gIGJsb2NrczogRGFpbHlCbG9ja1tdLFxuICBwcmVzZXJ2ZTogYm9vbGVhbixcbik6IFNjaGVkdWxlSXRlbVtdIHtcbiAgaWYgKCFwcmVzZXJ2ZSkgcmV0dXJuIHNjaGVkdWxlO1xuICBjb25zdCBieURheSA9IG5ldyBNYXA8bnVtYmVyLCBEYWlseUJsb2NrW10+KCk7XG4gIGZvciAoY29uc3QgYiBvZiBibG9ja3MpIHtcbiAgICBpZiAoIWJ5RGF5LmhhcyhiLmRheSkpIGJ5RGF5LnNldChiLmRheSwgW10pO1xuICAgIGJ5RGF5LmdldChiLmRheSkhLnB1c2goYik7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBbLi4uc2NoZWR1bGVdO1xuICBmb3IgKGNvbnN0IFtkYXksIGRheUJsb2Nrc10gb2YgYnlEYXkuZW50cmllcygpKSB7XG4gICAgY29uc3QgdXNlZCA9IG5ldyBTZXQocmVzdWx0LmZpbHRlcigocykgPT4gcy5kYXkgPT09IGRheSkubWFwKChzKSA9PiBzLnNsb3RJZCkpO1xuICAgIGNvbnN0IGZyZWUgPSBkYXlCbG9ja3MuZmluZCgoYikgPT4gIXVzZWQuaGFzKGIuc2xvdElkKSk7XG4gICAgaWYgKGZyZWUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHsgZGF5LCBzbG90SWQ6IGZyZWUuc2xvdElkLCBhY3Rpdml0eUlkOiBudWxsIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpZHggPSByZXN1bHRcbiAgICAgICAgLm1hcCgocywgaSkgPT4gW3MsIGldIGFzIGNvbnN0KVxuICAgICAgICAuZmlsdGVyKChbc10pID0+IHMuZGF5ID09PSBkYXkpXG4gICAgICAgIC5wb3AoKTtcbiAgICAgIGlmIChpZHgpIHtcbiAgICAgICAgY29uc3QgW3JlbW92ZWQsIGluZGV4XSA9IGlkeDtcbiAgICAgICAgcmVzdWx0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHsgZGF5LCBzbG90SWQ6IHJlbW92ZWQuc2xvdElkLCBhY3Rpdml0eUlkOiBudWxsIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRPRE86IFJlaW1wbGVtZW50IHVzaW5nIEVURk8gbGVzc29uIHBsYW5zXG4gKiBHZW5lcmF0ZSBhIHdlZWtseSBzY2hlZHVsZSB1c2luZyBFVEZPIGxlc3NvbiBwbGFucyBhbmQgdW5pdCBwbGFuc1xuICogQHBhcmFtIG9wdHMgU2NoZWR1bGUgZ2VuZXJhdGlvbiBvcHRpb25zXG4gKiBAcmV0dXJucyBBcnJheSBvZiBzY2hlZHVsZWQgaXRlbXMgbWFwcGVkIHRvIEVURk8gbGVzc29uIHBsYW5zXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVdlZWtseVNjaGVkdWxlKFxuICBfb3B0czogR2VuZXJhdGVTY2hlZHVsZU9wdGlvbnMsXG4pOiBQcm9taXNlPFNjaGVkdWxlSXRlbVtdPiB7XG4gIC8vIFRPRE86IEltcGxlbWVudCBzY2hlZHVsaW5nIGxvZ2ljIHVzaW5nOlxuICAvLyAtIEVURk9MZXNzb25QbGFuIG1vZGVsIGZvciBpbmRpdmlkdWFsIGxlc3NvbnNcbiAgLy8gLSBVbml0UGxhbiBtb2RlbCBmb3IgdW5pdC1sZXZlbCBzY2hlZHVsaW5nXG4gIC8vIC0gRGF5UGxhbiBtb2RlbCBmb3IgZGFpbHkgb3JnYW5pemF0aW9uXG4gIGNvbnNvbGUud2FybignZ2VuZXJhdGVXZWVrbHlTY2hlZHVsZSBwZW5kaW5nIHJlaW1wbGVtZW50YXRpb24gd2l0aCBFVEZPIHBsYW5uaW5nIG1vZGVscycpO1xuICByZXR1cm4gW107XG59XG5cbi8qKlxuICogVE9ETzogUmVpbXBsZW1lbnQgdXNpbmcgRVRGTyBsZXNzb24gcGxhbnMgYW5kIEFjdGl2aXR5IERpc2NvdmVyeVxuICogR2VuZXJhdGUgYWN0aXZpdHkgc3VnZ2VzdGlvbnMgYmFzZWQgb24gY3VycmljdWx1bSBhbGlnbm1lbnRcbiAqIEBwYXJhbSBvcHRpb25zIEZpbHRlciBvcHRpb25zIGZvciBzdWdnZXN0aW9uc1xuICogQHJldHVybnMgQXJyYXkgb2Ygc3VnZ2VzdGVkIGFjdGl2aXRpZXMgZnJvbSBBY3Rpdml0eSBEaXNjb3Zlcnkgc2VydmljZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTdWdnZXN0aW9ucyhcbiAgX29wdGlvbnM6IHsgZmlsdGVycz86IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+IH0gPSB7fSxcbik6IFByb21pc2U8QXJyYXk8dW5rbm93bj4+IHtcbiAgLy8gVE9ETzogSW1wbGVtZW50IHN1Z2dlc3Rpb24gbG9naWMgdXNpbmc6XG4gIC8vIC0gQWN0aXZpdHkgRGlzY292ZXJ5IHNlcnZpY2UgZm9yIGV4dGVybmFsIGFjdGl2aXRpZXNcbiAgLy8gLSBFeHRlcm5hbEFjdGl2aXR5IG1vZGVsIGZvciBhY3Rpdml0eSBzdWdnZXN0aW9uc1xuICAvLyAtIEN1cnJpY3VsdW1FeHBlY3RhdGlvbiBtb2RlbCBmb3IgYWxpZ25tZW50XG4gIGNvbnNvbGUud2FybignZ2VuZXJhdGVTdWdnZXN0aW9ucyBwZW5kaW5nIHJlaW1wbGVtZW50YXRpb24gd2l0aCBBY3Rpdml0eSBEaXNjb3Zlcnkgc2VydmljZScpO1xuICByZXR1cm4gW107XG59XG4iXSwidmVyc2lvbiI6M30=