{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/ai-planning.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/ai-planning.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { aiPlanningAssistant } from '../services/aiPlanningAssistant';\n\n// Rate limiting for AI requests\nconst aiRequestTracking = new Map<string, { count: number; lastReset: number }>();\nconst AI_RATE_LIMIT = 10; // requests per hour\nconst AI_RATE_WINDOW = 60 * 60 * 1000; // 1 hour in milliseconds\n\n// Cleanup old rate limit entries every 5 minutes to prevent memory leaks\nsetInterval(\n  () => {\n    const now = Date.now();\n    for (const [userId, tracking] of aiRequestTracking.entries()) {\n      if (now - tracking.lastReset > AI_RATE_WINDOW * 2) {\n        // Remove entries older than 2 hours\n        aiRequestTracking.delete(userId);\n      }\n    }\n  },\n  5 * 60 * 1000,\n); // Clean up every 5 minutes\n\nconst aiRateLimit = (req: Request, res: Response, next: NextFunction) => {\n  const userId = req.user?.id;\n  if (!userId) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  const now = Date.now();\n  const userIdStr = userId.toString();\n  const userTracking = aiRequestTracking.get(userIdStr) || { count: 0, lastReset: now };\n\n  // Reset count if window has expired\n  if (now - userTracking.lastReset > AI_RATE_WINDOW) {\n    userTracking.count = 0;\n    userTracking.lastReset = now;\n  }\n\n  // Check rate limit\n  if (userTracking.count >= AI_RATE_LIMIT) {\n    const resetTime = userTracking.lastReset + AI_RATE_WINDOW;\n    const waitTime = Math.ceil((resetTime - now) / 1000 / 60); // minutes\n    return res.status(429).json({\n      error: 'AI request limit exceeded',\n      retryAfter: waitTime,\n      limit: AI_RATE_LIMIT,\n      window: 'hour',\n    });\n  }\n\n  // Increment count\n  userTracking.count++;\n  aiRequestTracking.set(userIdStr, userTracking);\n  next();\n};\n\n// Enhanced input sanitization to prevent prompt injection and security issues\nconst sanitizeAIInput = (input: unknown): unknown => {\n  if (typeof input === 'string') {\n    // Remove potentially dangerous characters and prevent prompt injection\n    return input\n      .trim()\n      .slice(0, 2000) // Limit input length\n      .replace(/[<>'\"&]/g, '') // Remove HTML/script characters\n      .replace(/(\\n\\s*){3,}/g, '\\n\\n') // Limit excessive newlines\n      .replace(/ignore\\s+(previous|all)\\s+(instructions?|prompts?)/gi, '') // Remove prompt injection attempts\n      .replace(/system\\s*:\\s*/gi, '') // Remove system prompt attempts\n      .replace(/assistant\\s*:\\s*/gi, '') // Remove assistant prompt attempts\n      .replace(/human\\s*:\\s*/gi, '') // Remove human prompt attempts\n      .replace(/\\[INST\\]/gi, '') // Remove instruction markers\n      .replace(/\\[\\/INST\\]/gi, '') // Remove instruction markers\n      .replace(/<<SYS>>/gi, '') // Remove system markers\n      .replace(/<\\/SYS>>/gi, '') // Remove system markers\n      .replace(/###\\s*(SYSTEM|ASSISTANT|HUMAN)/gi, '') // Remove role markers\n      .replace(/^\\s*(SYSTEM|ASSISTANT|HUMAN)\\s*:/gi, ''); // Remove role prefixes\n  }\n  if (Array.isArray(input)) {\n    return input.map(sanitizeAIInput).slice(0, 50); // Limit array size\n  }\n  if (typeof input === 'object' && input !== null) {\n    const sanitized: Record<string, unknown> = {};\n    Object.keys(input)\n      .slice(0, 20)\n      .forEach((key) => {\n        // Limit object keys\n        sanitized[key] = sanitizeAIInput(input[key]);\n      });\n    return sanitized;\n  }\n  return input;\n};\n\n// Additional validation for educational content\nconst _validateEducationalInput = (input: unknown, fieldName: string): string => {\n  if (!input || typeof input !== 'string') {\n    throw new Error(`Invalid ${fieldName}: must be a non-empty string`);\n  }\n\n  // Check for obvious non-educational content\n  const suspiciousPatterns = [\n    /crypto|bitcoin|investment|trading/gi,\n    /hack|exploit|vulnerability|attack/gi,\n    /password|token|api.key|secret/gi,\n    /download|install|execute|script/gi,\n  ];\n\n  for (const pattern of suspiciousPatterns) {\n    if (pattern.test(input)) {\n      throw new Error(`Invalid ${fieldName}: contains inappropriate content`);\n    }\n  }\n\n  return sanitizeAIInput(input) as string;\n};\n\nconst router = Router();\n\n/**\n * GET /api/ai-planning/status\n * Check AI service availability and user quota status\n */\nrouter.get('/status', async (req: Request, res) => {\n  try {\n    const userId = req.user?.id;\n\n    // Check OpenAI API key availability\n    const hasApiKey = !!process.env.OPENAI_API_KEY;\n\n    // Get service health\n    const serviceHealth = await aiPlanningAssistant.getServiceHealth();\n\n    // Calculate user quota (basic implementation)\n    const userQuota = {\n      dailyRequests: 50, // Default quota\n      requestsUsed: 0, // TODO: Implement actual tracking\n      resetTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    };\n\n    const status = {\n      available: hasApiKey && serviceHealth.healthy,\n      features: {\n        longRangeGoals: hasApiKey,\n        unitBigIdeas: hasApiKey,\n        lessonActivities: hasApiKey,\n        materialsList: hasApiKey,\n        assessmentStrategies: hasApiKey,\n        reflectionPrompts: hasApiKey,\n        curriculumAligned: hasApiKey,\n      },\n      quota: userQuota,\n      health: serviceHealth,\n      userId: userId,\n    };\n\n    res.json(status);\n  } catch (error) {\n    console.error('Error checking AI status:', error);\n    res.status(500).json({\n      available: false,\n      error: 'Failed to check AI service status',\n    });\n  }\n});\n\n/**\n * POST /api/ai-planning/long-range/goals\n * Generate AI suggestions for long-range plan goals\n */\nrouter.post('/long-range/goals', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      subject?: string;\n      grade?: string | number;\n      termLength?: string | number;\n      focusAreas?: string[];\n    };\n    const { subject, grade, termLength, focusAreas } = sanitizedBody;\n\n    if (!subject || !grade || !termLength) {\n      return res.status(400).json({\n        error: 'Missing required fields: subject, grade, termLength',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateLongRangeGoals({\n      subject: subject!,\n      grade: Number(grade),\n      termLength: Number(termLength),\n      focusAreas: focusAreas as string[],\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating long-range goals:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/unit/big-ideas\n * Generate AI suggestions for unit plan big ideas\n */\nrouter.post('/unit/big-ideas', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      unitTitle?: string;\n      subject?: string;\n      grade?: string | number;\n      curriculumExpectations?: string[];\n      duration?: string | number;\n    };\n    const { unitTitle, subject, grade, curriculumExpectations, duration } = sanitizedBody;\n\n    if (!unitTitle || !subject || !grade || !curriculumExpectations || !duration) {\n      return res.status(400).json({\n        error:\n          'Missing required fields: unitTitle, subject, grade, curriculumExpectations, duration',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateUnitBigIdeas({\n      unitTitle,\n      subject,\n      grade: Number(grade),\n      curriculumExpectations,\n      duration: Number(duration),\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating unit big ideas:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/lesson/activities\n * Generate AI suggestions for lesson activities\n */\nrouter.post('/lesson/activities', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      lessonTitle?: string;\n      learningGoals?: string[];\n      subject?: string;\n      grade?: string | number;\n      duration?: string | number;\n      materials?: string[];\n    };\n    const { lessonTitle, learningGoals, subject, grade, duration, materials } = sanitizedBody;\n\n    if (!lessonTitle || !learningGoals || !subject || !grade || !duration) {\n      return res.status(400).json({\n        error: 'Missing required fields: lessonTitle, learningGoals, subject, grade, duration',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateLessonActivities({\n      lessonTitle,\n      learningGoals,\n      subject,\n      grade: Number(grade),\n      duration: Number(duration),\n      materials,\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating lesson activities:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/lesson/materials\n * Generate AI suggestions for materials list\n */\nrouter.post('/lesson/materials', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      activities?: string[];\n      subject?: string;\n      grade?: string | number;\n      classSize?: string | number;\n    };\n    const { activities, subject, grade, classSize } = sanitizedBody;\n\n    if (!activities || !subject || !grade) {\n      return res.status(400).json({\n        error: 'Missing required fields: activities, subject, grade',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateMaterialsList({\n      activities,\n      subject,\n      grade: Number(grade),\n      classSize: Number(classSize) || 25,\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating materials list:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/lesson/assessments\n * Generate AI suggestions for assessment strategies\n */\nrouter.post('/lesson/assessments', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      learningGoals?: string[];\n      activities?: string[];\n      subject?: string;\n      grade?: string | number;\n    };\n    const { learningGoals, activities, subject, grade } = sanitizedBody;\n\n    if (!learningGoals || !activities || !subject || !grade) {\n      return res.status(400).json({\n        error: 'Missing required fields: learningGoals, activities, subject, grade',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateAssessmentStrategies({\n      learningGoals,\n      activities,\n      subject,\n      grade: Number(grade),\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating assessment strategies:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/daybook/reflections\n * Generate AI suggestions for daybook reflection prompts\n */\nrouter.post('/daybook/reflections', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      date?: string;\n      activities?: string[];\n      subject?: string;\n      grade?: string | number;\n      previousReflections?: string[];\n    };\n    const { date, activities, subject, grade, previousReflections } = sanitizedBody;\n\n    if (!date || !activities || !subject || !grade) {\n      return res.status(400).json({\n        error: 'Missing required fields: date, activities, subject, grade',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateReflectionPrompts({\n      date: new Date(date),\n      activities,\n      subject,\n      grade: Number(grade),\n      previousReflections,\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating reflection prompts:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/curriculum-aligned\n * Get curriculum-aligned suggestions\n */\nrouter.post('/curriculum-aligned', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      expectationIds?: string[];\n      suggestionType?: string;\n    };\n    const { expectationIds, suggestionType } = sanitizedBody;\n\n    if (!expectationIds || !suggestionType) {\n      return res.status(400).json({\n        error: 'Missing required fields: expectationIds, suggestionType',\n      });\n    }\n\n    if (!['activities', 'assessments', 'resources'].includes(suggestionType)) {\n      return res.status(400).json({\n        error: 'Invalid suggestionType. Must be: activities, assessments, or resources',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.getCurriculumAlignedSuggestions(\n      expectationIds,\n      suggestionType as 'activities' | 'assessments' | 'resources',\n    );\n\n    res.json({ suggestions });\n  } catch (error) {\n    console.error('Error generating curriculum-aligned suggestions:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\nexport default router;\n"],"version":3}