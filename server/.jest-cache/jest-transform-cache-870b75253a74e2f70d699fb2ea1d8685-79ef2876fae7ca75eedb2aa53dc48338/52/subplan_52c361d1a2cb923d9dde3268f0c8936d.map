{"version":3,"names":["cov_2kj6rxfm7k","actualCoverage","Router","z","validate","generateSubPlan","prisma","router","s","subPlanGenerateSchema","object","date","string","regex","days","number","int","min","max","default","includeGoals","boolean","includeRoutines","includePlans","anonymize","userId","optional","saveRecord","emailTo","notes","post","req","res","next","f","b","user","id","status","json","error","body","targetUserId","options","pdfBuffer","subPlanRecord","create","data","Date","daysCount","content","emailedTo","JSON","stringify","anonymized","setHeader","length","send","get","query","parseInt","routines","classRoutine","findMany","where","orderBy","priority","title","description","category","timeOfDay","isActive","routine","update","undefined","delete","routineId","params","success","records"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/sub-plan.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { z } from 'zod';\nimport { validate } from '../validation';\nimport { generateSubPlan } from '../services/subPlanService';\nimport { prisma } from '../prisma';\n\n// Use global Express Request type with user: { id: number; email: string }\n\nconst router = Router();\n\n// Sub-plan generation schema\nconst subPlanGenerateSchema = z.object({\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Date must be in YYYY-MM-DD format'),\n  days: z.number().int().min(1).max(5).default(1),\n  includeGoals: z.boolean().default(true),\n  includeRoutines: z.boolean().default(true),\n  includePlans: z.boolean().default(true),\n  anonymize: z.boolean().default(false),\n  userId: z.number().int().optional(),\n  saveRecord: z.boolean().default(false),\n  emailTo: z.string().optional(),\n  notes: z.string().max(1000).optional(),\n});\n\n/**\n * Generate substitute plan PDF\n * POST /api/sub-plan/generate\n */\nrouter.post(\n  '/generate',\n  validate(subPlanGenerateSchema),\n  async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userId = req.user?.id || 0;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const {\n        date,\n        days,\n        includeGoals,\n        includeRoutines,\n        includePlans,\n        anonymize,\n        saveRecord,\n        emailTo,\n        notes,\n      } = req.body;\n\n      // Use the authenticated user's ID if userId not provided in request\n      const targetUserId = req.body.userId || userId;\n\n      const options = {\n        includeGoals,\n        includeRoutines,\n        includePlans,\n        anonymize,\n        userId: targetUserId,\n      };\n\n      const pdfBuffer = await generateSubPlan(date, days, options);\n\n      // Save record if requested\n      if (saveRecord) {\n        await prisma.subPlanRecord.create({\n          data: {\n            userId: targetUserId,\n            date: new Date(date),\n            daysCount: days,\n            content: { emailedTo: emailTo, options: JSON.stringify(options) },\n            includeGoals,\n            includeRoutines,\n            includePlans,\n            anonymized: anonymize,\n            notes: notes,\n          },\n        });\n      }\n\n      // Set PDF headers\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"sub-plan-${date}.pdf\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n\n      res.send(pdfBuffer);\n    } catch (error) {\n      next(error);\n    }\n  },\n);\n\n/**\n * Get class routines for user\n * GET /api/sub-plan/routines\n */\nrouter.get('/routines', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const targetUserId = req.query.userId ? parseInt(req.query.userId as string, 10) : userId;\n\n    const routines = await prisma.classRoutine.findMany({\n      where: { userId: targetUserId },\n      orderBy: { priority: 'desc' }, // Higher priority first\n    });\n\n    res.json(routines);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Create or update class routine\n * POST /api/sub-plan/routines\n */\nrouter.post('/routines', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { id, title, description, category, timeOfDay, priority, isActive } = req.body;\n\n    if (id) {\n      // Update existing routine\n      const routine = await prisma.classRoutine.update({\n        where: { id: parseInt(id, 10) },\n        data: {\n          title,\n          description,\n          category,\n          timeOfDay,\n          priority,\n          isActive: isActive !== undefined ? isActive : true,\n        },\n      });\n      res.json(routine);\n    } else {\n      // Create new routine\n      const routine = await prisma.classRoutine.create({\n        data: {\n          userId,\n          title,\n          description,\n          category,\n          timeOfDay,\n          priority: priority || 5,\n          isActive: isActive !== undefined ? isActive : true,\n        },\n      });\n      res.json(routine);\n    }\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Delete class routine\n * DELETE /api/sub-plan/routines/:id\n */\nrouter.delete('/routines/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const routineId = parseInt(req.params.id, 10);\n\n    await prisma.classRoutine.delete({\n      where: { id: routineId },\n    });\n\n    res.json({ success: true });\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Get sub plan records\n * GET /api/sub-plan/records\n */\nrouter.get('/records', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const targetUserId = req.query.userId ? parseInt(req.query.userId as string, 10) : userId;\n\n    const records = await prisma.subPlanRecord.findMany({\n      where: { userId: targetUserId },\n      orderBy: { date: 'desc' },\n    });\n\n    res.json(records);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}