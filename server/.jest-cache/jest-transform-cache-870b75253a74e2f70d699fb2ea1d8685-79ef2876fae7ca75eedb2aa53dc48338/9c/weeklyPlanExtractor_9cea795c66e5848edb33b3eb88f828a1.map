{"version":3,"names":["cov_2dzno051fg","actualCoverage","prisma","buildSubPlanData","extractWeeklyPlan","startDate","numDays","b","options","f","userId","s","days","startDateObj","Date","i","currentDate","setUTCDate","getUTCDate","dateStr","toISOString","split","dayData","push","endDateObj","endDate","weeklyOverview","extractWeeklyOverview","continuityNotes","generateContinuityNotes","emergencyBackupPlans","generateEmergencyBackupPlans","weekStart","setUTCHours","weekEnd","weeklyPlans","unitPlans","unitPlan","findMany","where","OR","gte","lte","AND","include","longRangePlan","select","subject","grade","lessonPlans","daybookEntry","specialEvents","calendarEvent","start","end","subjectMap","Map","plan","item","items","slot","activity","milestone","has","name","set","totalHours","keyTopics","Set","outcomes","subjectData","get","title","add","outcomeRel","outcome","id","code","description","subjects","Array","from","values","map","Math","round","slice","processedAssessments","processedEvents","event","date","time","allDay","undefined","impact","determineEventImpact","assessments","notes","length","currentDay","previousDay","connections","preparations","currentSubjects","extractSubjectsFromSchedule","schedule","previousSubjects","commonSubjects","filter","some","ps","prevActivity","find","currentActivities","a","toLowerCase","includes","dayActivities","day","fallbackActivities","activities","materials","generateSubjectMaterials","entry","note","inferSubjectFromActivity","lower","commonMaterials"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/weeklyPlanExtractor.ts"],"sourcesContent":["import { prisma } from '../prisma';\nimport { SubPlanData, SubPlanOptions, buildSubPlanData } from './subPlanService';\n\nexport interface WeeklyPlanData {\n  startDate: string;\n  endDate: string;\n  days: SubPlanData[];\n  weeklyOverview: {\n    subjects: Array<{\n      name: string;\n      totalHours: number;\n      keyTopics: string[];\n      outcomes: Array<{\n        code: string;\n        description: string;\n      }>;\n    }>;\n    unitPlans: Array<{\n      id: string;\n      title: string;\n      startDate: Date;\n      endDate: Date;\n      subject?: string;\n      longRangePlan: {\n        subject: string;\n        grade: number;\n      };\n      lessonPlans: Array<{\n        id: string;\n        title: string;\n        duration: number;\n        daybookEntry: unknown;\n      }>;\n    }>;\n    assessments: Array<{\n      title: string;\n      date: string;\n      subject: string;\n      type: string;\n    }>;\n    specialEvents: Array<{\n      title: string;\n      date: string;\n      time?: string;\n      impact: string; // How it affects the regular schedule\n    }>;\n  };\n  continuityNotes: Array<{\n    day: string;\n    previousDay?: string;\n    connections: string[];\n    preparations: string[];\n  }>;\n  emergencyBackupPlans: Array<{\n    subject: string;\n    activities: string[];\n    materials: string[];\n  }>;\n}\n\n/**\n * Extract a comprehensive weekly substitute plan with cross-day continuity\n */\nexport async function extractWeeklyPlan(\n  startDate: string,\n  numDays: number = 5,\n  options: SubPlanOptions = {},\n): Promise<WeeklyPlanData> {\n  const { userId = 1 } = options;\n\n  // Generate data for each day\n  const days: SubPlanData[] = [];\n  const startDateObj = new Date(startDate);\n\n  for (let i = 0; i < numDays; i++) {\n    const currentDate = new Date(startDateObj);\n    currentDate.setUTCDate(startDateObj.getUTCDate() + i);\n    const dateStr = currentDate.toISOString().split('T')[0];\n\n    const dayData = await buildSubPlanData(dateStr, options);\n    days.push(dayData);\n  }\n\n  // Calculate end date\n  const endDateObj = new Date(startDateObj);\n  endDateObj.setUTCDate(startDateObj.getUTCDate() + numDays - 1);\n  const endDate = endDateObj.toISOString().split('T')[0];\n\n  // Extract weekly overview data\n  const weeklyOverview = await extractWeeklyOverview(startDate, endDate, userId);\n\n  // Generate continuity notes\n  const continuityNotes = generateContinuityNotes(days);\n\n  // Create emergency backup plans\n  const emergencyBackupPlans = await generateEmergencyBackupPlans();\n\n  return {\n    startDate,\n    endDate,\n    days,\n    weeklyOverview,\n    continuityNotes,\n    emergencyBackupPlans,\n  };\n}\n\n/**\n * Extract weekly overview with subjects, milestones, and assessments\n */\nasync function extractWeeklyOverview(\n  startDate: string,\n  endDate: string,\n  userId: number,\n): Promise<{\n  subjects: Array<{\n    name: string;\n    totalHours: number;\n    keyTopics: string[];\n    outcomes: Array<{\n      code: string;\n      description: string;\n    }>;\n  }>;\n  unitPlans: Array<{\n    id: string;\n    title: string;\n    startDate: Date;\n    endDate: Date;\n    subject?: string;\n    longRangePlan: {\n      subject: string;\n      grade: number;\n    };\n    lessonPlans: Array<{\n      id: string;\n      title: string;\n      duration: number;\n      daybookEntry: unknown;\n    }>;\n  }>;\n  assessments: Array<{\n    title: string;\n    date: string;\n    subject: string;\n    type: string;\n  }>;\n  specialEvents: Array<{\n    title: string;\n    date: string;\n    time?: string;\n    impact: string;\n  }>;\n}> {\n  const weekStart = new Date(startDate);\n  weekStart.setUTCHours(0, 0, 0, 0);\n  const weekEnd = new Date(endDate);\n  weekEnd.setUTCHours(23, 59, 59, 999);\n\n  // Get all daily plans for the week\n  // DISABLED: Legacy dailyPlan model removed in ETFO migration\n  const weeklyPlans: Array<{\n    items: Array<{\n      slot?: { subject?: { name: string } };\n      activity?: {\n        title?: string;\n        milestone?: { subject?: { name: string } };\n        outcomes?: Array<{\n          outcome: {\n            id: string;\n            code: string;\n            description: string;\n          };\n        }>;\n      };\n    }>;\n  }> = []; // Legacy dailyPlan query disabled\n\n  // Get unit plans for the period using ETFO framework\n  const unitPlans = await prisma.unitPlan.findMany({\n    where: {\n      userId,\n      OR: [\n        {\n          startDate: {\n            gte: weekStart,\n            lte: weekEnd,\n          },\n        },\n        {\n          endDate: {\n            gte: weekStart,\n            lte: weekEnd,\n          },\n        },\n        {\n          AND: [{ startDate: { lte: weekStart } }, { endDate: { gte: weekEnd } }],\n        },\n      ],\n    },\n    include: {\n      longRangePlan: {\n        select: {\n          subject: true,\n          grade: true,\n        },\n      },\n      lessonPlans: {\n        include: {\n          daybookEntry: true,\n        },\n      },\n    },\n  });\n\n  // Assessment functionality removed\n  // const assessments: Array<Record<string, unknown>> = [];\n\n  // Get special events\n  const specialEvents = await prisma.calendarEvent.findMany({\n    where: {\n      start: {\n        gte: weekStart,\n      },\n      end: {\n        lte: weekEnd,\n      },\n    },\n  });\n\n  // Process subjects and calculate hours\n  const subjectMap = new Map<\n    string,\n    {\n      name: string;\n      totalHours: number;\n      keyTopics: Set<string>;\n      outcomes: Map<string, { code: string; description: string }>;\n    }\n  >();\n\n  for (const plan of weeklyPlans) {\n    for (const item of plan.items) {\n      const subject = item.slot?.subject || item.activity?.milestone?.subject;\n      if (!subject) continue;\n\n      if (!subjectMap.has(subject.name)) {\n        subjectMap.set(subject.name, {\n          name: subject.name,\n          totalHours: 0,\n          keyTopics: new Set(),\n          outcomes: new Map(),\n        });\n      }\n\n      const subjectData = subjectMap.get(subject.name)!;\n\n      // Add duration (assuming 15-minute slots, could be made configurable)\n      subjectData.totalHours += 0.25;\n\n      // Add activity topics\n      if (item.activity?.title) {\n        subjectData.keyTopics.add(item.activity.title);\n      }\n\n      // Add outcomes\n      if (item.activity?.outcomes) {\n        for (const outcomeRel of item.activity.outcomes) {\n          const outcome = outcomeRel.outcome;\n          subjectData.outcomes.set(outcome.id, {\n            code: outcome.code,\n            description: outcome.description,\n          });\n        }\n      }\n    }\n  }\n\n  // Convert to final format\n  const subjects = Array.from(subjectMap.values()).map((s) => ({\n    name: s.name,\n    totalHours: Math.round(s.totalHours * 4) / 4, // Round to nearest quarter hour\n    keyTopics: Array.from(s.keyTopics).slice(0, 5), // Limit to top 5\n    outcomes: Array.from(s.outcomes.values()),\n  }));\n\n  // Process milestones - DISABLED: Legacy milestone model removed in ETFO migration\n  // const processedMilestones: any[] = []; // Legacy milestone processing disabled\n\n  // Assessment functionality removed\n  const processedAssessments: Array<{\n    title: string;\n    date: string;\n    subject: string;\n    type: string;\n  }> = [];\n\n  // Process special events\n  const processedEvents = specialEvents.map((event) => ({\n    title: event.title,\n    date: event.start.toISOString().split('T')[0],\n    time: event.allDay ? undefined : event.start.toISOString().split('T')[1].slice(0, 5),\n    impact: determineEventImpact(event.title, event.allDay),\n  }));\n\n  return {\n    subjects,\n    unitPlans, // Changed from milestones to unitPlans (ETFO alignment)\n    assessments: processedAssessments,\n    specialEvents: processedEvents,\n  };\n}\n\n/**\n * Generate continuity notes showing how each day builds on the previous\n */\nfunction generateContinuityNotes(days: SubPlanData[]): Array<{\n  day: string;\n  previousDay?: string;\n  connections: string[];\n  preparations: string[];\n}> {\n  const notes = [];\n\n  for (let i = 0; i < days.length; i++) {\n    const currentDay = days[i];\n    const previousDay = i > 0 ? days[i - 1] : undefined;\n\n    const connections: string[] = [];\n    const preparations: string[] = [];\n\n    if (previousDay) {\n      // Find subject connections\n      const currentSubjects = extractSubjectsFromSchedule(currentDay.schedule);\n      const previousSubjects = extractSubjectsFromSchedule(previousDay.schedule);\n\n      const commonSubjects = currentSubjects.filter((s) =>\n        previousSubjects.some((ps) => ps.subject === s.subject),\n      );\n\n      for (const subject of commonSubjects) {\n        const prevActivity = previousSubjects.find((ps) => ps.subject === subject.subject);\n        if (prevActivity && subject.activity !== prevActivity.activity) {\n          connections.push(\n            `${subject.subject}: Continue from \"${prevActivity.activity}\" to \"${subject.activity}\"`,\n          );\n        }\n      }\n\n      // Check for materials/setup needed\n      const currentActivities = currentDay.schedule\n        .filter((s) => s.activity)\n        .map((s) => s.activity!);\n\n      if (currentActivities.some((a) => a.toLowerCase().includes('project'))) {\n        preparations.push('Ensure project materials from previous day are available');\n      }\n\n      if (currentActivities.some((a) => a.toLowerCase().includes('presentation'))) {\n        preparations.push('Set up presentation equipment and student work displays');\n      }\n    }\n\n    // Add general preparations for the day\n    const dayActivities = currentDay.schedule.filter((s) => s.activity);\n    if (dayActivities.length > 0) {\n      preparations.push('Review daily schedule and prepare transition materials');\n    }\n\n    notes.push({\n      day: currentDay.date,\n      previousDay: previousDay?.date,\n      connections,\n      preparations,\n    });\n  }\n\n  return notes;\n}\n\n/**\n * Generate emergency backup plans by subject\n */\nasync function generateEmergencyBackupPlans(): Promise<\n  Array<{\n    subject: string;\n    activities: string[];\n    materials: string[];\n  }>\n> {\n  const subjects = await prisma.subject.findMany({});\n\n  return subjects.map((subject) => {\n    // DISABLED: Legacy milestone/activity models removed in ETFO migration\n    const fallbackActivities: Array<{ title: string }> = [];\n\n    return {\n      subject: subject.name,\n      activities: fallbackActivities.slice(0, 3).map((a) => a.title),\n      materials: generateSubjectMaterials(subject.name),\n    };\n  });\n}\n\n/**\n * Extract subjects from schedule entries\n */\nfunction extractSubjectsFromSchedule(\n  schedule: Array<{ time: string; activity?: string; note?: string }>,\n) {\n  return schedule\n    .filter((entry) => entry.activity && !entry.note)\n    .map((entry) => ({\n      time: entry.time,\n      activity: entry.activity!,\n      subject: inferSubjectFromActivity(entry.activity!),\n    }));\n}\n\n/**\n * Infer subject from activity name (basic heuristic)\n */\nfunction inferSubjectFromActivity(activity: string): string {\n  const lower = activity.toLowerCase();\n\n  if (lower.includes('math') || lower.includes('number') || lower.includes('calculation')) {\n    return 'Mathematics';\n  }\n  if (lower.includes('read') || lower.includes('writing') || lower.includes('language')) {\n    return 'Language Arts';\n  }\n  if (lower.includes('science') || lower.includes('experiment') || lower.includes('nature')) {\n    return 'Science';\n  }\n  if (lower.includes('social') || lower.includes('history') || lower.includes('geography')) {\n    return 'Social Studies';\n  }\n  if (lower.includes('art') || lower.includes('draw') || lower.includes('paint')) {\n    return 'Arts';\n  }\n  if (lower.includes('pe') || lower.includes('physical') || lower.includes('sport')) {\n    return 'Physical Education';\n  }\n\n  return 'General';\n}\n\n/**\n * Determine impact of calendar events on schedule\n */\nfunction determineEventImpact(title: string, allDay: boolean): string {\n  const lower = title.toLowerCase();\n\n  if (allDay) {\n    if (lower.includes('holiday') || lower.includes('break')) {\n      return 'No classes - school closed';\n    }\n    if (lower.includes('pd') || lower.includes('development')) {\n      return 'No students - professional development day';\n    }\n    if (lower.includes('assembly')) {\n      return 'Modified schedule for all-school assembly';\n    }\n  }\n\n  if (lower.includes('fire drill')) {\n    return 'Brief interruption - practice emergency procedures';\n  }\n  if (lower.includes('photo')) {\n    return 'Students may be called out for individual/class photos';\n  }\n  if (lower.includes('visit') || lower.includes('guest')) {\n    return 'Special visitor - may affect regular activities';\n  }\n\n  return 'May affect regular schedule - check with office';\n}\n\n/**\n * Generate common materials list by subject\n */\nfunction generateSubjectMaterials(subject: string): string[] {\n  const commonMaterials = ['Whiteboard markers', 'Paper and pencils', 'Timer for activities'];\n\n  switch (subject.toLowerCase()) {\n    case 'mathematics':\n      return [...commonMaterials, 'Calculators', 'Math manipulatives', 'Graph paper'];\n    case 'language arts':\n      return [...commonMaterials, 'Reading books', 'Writing journals', 'Dictionary'];\n    case 'science':\n      return [...commonMaterials, 'Science notebooks', 'Safety goggles', 'Basic lab supplies'];\n    case 'social studies':\n      return [...commonMaterials, 'Maps', 'Timeline materials', 'Research books'];\n    case 'arts':\n      return [...commonMaterials, 'Art supplies', 'Drawing paper', 'Colored pencils'];\n    default:\n      return commonMaterials;\n  }\n}\n"],"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","ignoreList":[]}