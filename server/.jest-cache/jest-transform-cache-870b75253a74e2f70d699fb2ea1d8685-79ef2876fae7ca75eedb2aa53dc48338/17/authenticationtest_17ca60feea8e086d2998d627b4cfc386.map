{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/auth/authentication.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/auth/authentication.test.ts"],"sourcesContent":["/**\n * Authentication Service - Comprehensive Test Coverage\n * Addresses Issue #264: Critical test coverage gaps\n */\n\nimport { describe, test, expect, jest, beforeEach } from '@jest/globals';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { \n  generateAuthToken, \n  hashPassword, \n  validatePassword,\n  verifyToken,\n  authenticate,\n  checkPermissions \n} from '@/services/authService';\n\n// Mock dependencies\njest.mock('bcryptjs');\njest.mock('jsonwebtoken');\njest.mock('@teaching-engine/database');\n\ndescribe('Authentication Service - Critical Path Testing', () => {\n  let mockPrisma: jest.Mocked<PrismaClient>;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockPrisma = new PrismaClient() as jest.Mocked<PrismaClient>;\n    process.env.JWT_SECRET = 'test-secret-key';\n  });\n\n  describe('JWT Token Generation', () => {\n    test('generates valid JWT tokens with correct payload', async () => {\n      const userId = '123';\n      const mockToken = 'mock.jwt.token';\n      \n      (jwt.sign as jest.Mock).mockReturnValue(mockToken);\n      \n      const token = await generateAuthToken(userId);\n      \n      expect(jwt.sign).toHaveBeenCalledWith(\n        { userId, iat: expect.any(Number) },\n        'test-secret-key',\n        { expiresIn: '7d' }\n      );\n      expect(token).toBe(mockToken);\n    });\n    \n    test('throws error when JWT_SECRET is missing', async () => {\n      delete process.env.JWT_SECRET;\n      \n      await expect(generateAuthToken('123'))\n        .rejects.toThrow('JWT_SECRET environment variable is required');\n    });\n    \n    test('generates tokens with custom expiration', async () => {\n      const userId = '123';\n      const customExpiry = '1h';\n      \n      (jwt.sign as jest.Mock).mockReturnValue('mock.token');\n      \n      await generateAuthToken(userId, customExpiry);\n      \n      expect(jwt.sign).toHaveBeenCalledWith(\n        expect.any(Object),\n        expect.any(String),\n        { expiresIn: customExpiry }\n      );\n    });\n    \n    test('handles token generation failures gracefully', async () => {\n      (jwt.sign as jest.Mock).mockImplementation(() => {\n        throw new Error('Token generation failed');\n      });\n      \n      await expect(generateAuthToken('123'))\n        .rejects.toThrow('Token generation failed');\n    });\n  });\n\n  describe('Password Security', () => {\n    test('hashes passwords with bcrypt using correct salt rounds', async () => {\n      const plaintext = 'TestPassword123!';\n      const hashedPassword = '$2a$10$mockedHashValue';\n      \n      (bcrypt.hash as jest.Mock).mockResolvedValue(hashedPassword);\n      \n      const result = await hashPassword(plaintext);\n      \n      expect(bcrypt.hash).toHaveBeenCalledWith(plaintext, 10);\n      expect(result).toBe(hashedPassword);\n    });\n    \n    test('validates password strength requirements', async () => {\n      const weakPasswords = [\n        '123456',        // Too simple\n        'password',      // Common password\n        'qwerty',        // Common pattern\n        'short',         // Too short\n        'nouppercase1!', // No uppercase\n        'NOLOWERCASE1!', // No lowercase\n        'NoNumbers!',    // No numbers\n        'NoSpecial123',  // No special characters\n      ];\n      \n      for (const weakPassword of weakPasswords) {\n        await expect(validatePassword(weakPassword))\n          .rejects.toThrow('Password does not meet security requirements');\n      }\n    });\n    \n    test('accepts strong passwords', async () => {\n      const strongPasswords = [\n        'StrongPass123!',\n        'C0mpl3x!P@ssw0rd',\n        'Secure#Pass2023',\n        'V@lidP@ssw0rd123',\n      ];\n      \n      for (const strongPassword of strongPasswords) {\n        await expect(validatePassword(strongPassword))\n          .resolves.toBe(true);\n      }\n    });\n    \n    test('compares passwords correctly', async () => {\n      const plaintext = 'TestPassword123!';\n      const hash = '$2a$10$hashedValue';\n      \n      (bcrypt.compare as jest.Mock).mockResolvedValue(true);\n      \n      const isValid = await bcrypt.compare(plaintext, hash);\n      \n      expect(isValid).toBe(true);\n      expect(bcrypt.compare).toHaveBeenCalledWith(plaintext, hash);\n    });\n  });\n\n  describe('Token Verification', () => {\n    test('verifies valid tokens successfully', async () => {\n      const mockPayload = { userId: '123', iat: Date.now() / 1000 };\n      const mockToken = 'valid.jwt.token';\n      \n      (jwt.verify as jest.Mock).mockReturnValue(mockPayload);\n      \n      const result = await verifyToken(mockToken);\n      \n      expect(jwt.verify).toHaveBeenCalledWith(mockToken, 'test-secret-key');\n      expect(result).toEqual(mockPayload);\n    });\n    \n    test('rejects expired tokens', async () => {\n      const mockToken = 'expired.jwt.token';\n      \n      (jwt.verify as jest.Mock).mockImplementation(() => {\n        throw new jwt.TokenExpiredError('jwt expired', new Date());\n      });\n      \n      await expect(verifyToken(mockToken))\n        .rejects.toThrow('jwt expired');\n    });\n    \n    test('rejects malformed tokens', async () => {\n      const malformedTokens = [\n        '',\n        'invalid',\n        'not.a.token',\n        'malformed..token',\n      ];\n      \n      for (const token of malformedTokens) {\n        (jwt.verify as jest.Mock).mockImplementation(() => {\n          throw new jwt.JsonWebTokenError('jwt malformed');\n        });\n        \n        await expect(verifyToken(token))\n          .rejects.toThrow('jwt malformed');\n      }\n    });\n    \n    test('handles missing JWT secret during verification', async () => {\n      delete process.env.JWT_SECRET;\n      \n      await expect(verifyToken('any.token'))\n        .rejects.toThrow('JWT_SECRET environment variable is required');\n    });\n  });\n\n  describe('Authentication Flow', () => {\n    test('authenticates valid credentials successfully', async () => {\n      const email = 'test@example.com';\n      const password = 'ValidPass123!';\n      const hashedPassword = '$2a$10$hashedPassword';\n      const mockUser = {\n        id: '123',\n        email,\n        password: hashedPassword,\n        name: 'Test User',\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(mockUser);\n      (bcrypt.compare as jest.Mock).mockResolvedValue(true);\n      (jwt.sign as jest.Mock).mockReturnValue('mock.token');\n      \n      const result = await authenticate(email, password, mockPrisma);\n      \n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { email },\n      });\n      expect(bcrypt.compare).toHaveBeenCalledWith(password, hashedPassword);\n      expect(result).toEqual({\n        user: expect.objectContaining({\n          id: mockUser.id,\n          email: mockUser.email,\n          name: mockUser.name,\n        }),\n        token: 'mock.token',\n      });\n      expect(result.user).not.toHaveProperty('password');\n    });\n    \n    test('rejects non-existent users', async () => {\n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(null);\n      \n      await expect(authenticate('nonexistent@example.com', 'password', mockPrisma))\n        .rejects.toThrow('Invalid credentials');\n    });\n    \n    test('rejects incorrect passwords', async () => {\n      const mockUser = {\n        id: '123',\n        email: 'test@example.com',\n        password: '$2a$10$hashedPassword',\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(mockUser);\n      (bcrypt.compare as jest.Mock).mockResolvedValue(false);\n      \n      await expect(authenticate('test@example.com', 'wrongpassword', mockPrisma))\n        .rejects.toThrow('Invalid credentials');\n    });\n    \n    test('handles database errors gracefully', async () => {\n      mockPrisma.user.findUnique = jest.fn().mockRejectedValue(\n        new Error('Database connection failed')\n      );\n      \n      await expect(authenticate('test@example.com', 'password', mockPrisma))\n        .rejects.toThrow('Database connection failed');\n    });\n  });\n\n  describe('SQL Injection Prevention', () => {\n    test('sanitizes email input against SQL injection', async () => {\n      const maliciousInputs = [\n        \"' OR '1'='1\",\n        \"admin'--\",\n        \"1; DROP TABLE users;--\",\n        \"' UNION SELECT * FROM users--\",\n        \"admin' OR 1=1--\",\n      ];\n      \n      for (const maliciousInput of maliciousInputs) {\n        mockPrisma.user.findUnique = jest.fn().mockResolvedValue(null);\n        \n        await expect(authenticate(maliciousInput, 'password', mockPrisma))\n          .rejects.toThrow('Invalid credentials');\n        \n        // Verify Prisma was called with sanitized input\n        expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n          where: { email: maliciousInput },\n        });\n      }\n    });\n  });\n\n  describe('Permission Checking', () => {\n    test('allows access for users with correct permissions', async () => {\n      const user = {\n        id: '123',\n        role: 'ADMIN',\n        permissions: ['read', 'write', 'delete'],\n      };\n      \n      const hasPermission = await checkPermissions(user, 'write');\n      expect(hasPermission).toBe(true);\n    });\n    \n    test('denies access for users without required permissions', async () => {\n      const user = {\n        id: '123',\n        role: 'USER',\n        permissions: ['read'],\n      };\n      \n      const hasPermission = await checkPermissions(user, 'delete');\n      expect(hasPermission).toBe(false);\n    });\n    \n    test('handles role-based permissions correctly', async () => {\n      const adminUser = { id: '1', role: 'ADMIN' };\n      const regularUser = { id: '2', role: 'USER' };\n      \n      expect(await checkPermissions(adminUser, 'admin.access')).toBe(true);\n      expect(await checkPermissions(regularUser, 'admin.access')).toBe(false);\n    });\n  });\n\n  describe('Session Management', () => {\n    test('creates secure session tokens', async () => {\n      const sessionData = {\n        userId: '123',\n        deviceId: 'device-123',\n        ipAddress: '192.168.1.1',\n      };\n      \n      (jwt.sign as jest.Mock).mockReturnValue('session.token');\n      \n      const token = await createSessionToken(sessionData);\n      \n      expect(jwt.sign).toHaveBeenCalledWith(\n        expect.objectContaining(sessionData),\n        expect.any(String),\n        expect.objectContaining({\n          expiresIn: expect.any(String),\n        })\n      );\n    });\n    \n    test('validates session tokens against blacklist', async () => {\n      const token = 'potentially.blacklisted.token';\n      const mockBlacklist = new Set(['blacklisted.token']);\n      \n      const isValid = await validateSessionToken(token, mockBlacklist);\n      expect(isValid).toBe(true);\n      \n      const isBlacklisted = await validateSessionToken('blacklisted.token', mockBlacklist);\n      expect(isBlacklisted).toBe(false);\n    });\n  });\n\n  describe('Multi-Factor Authentication', () => {\n    test('generates valid TOTP codes', async () => {\n      const secret = 'JBSWY3DPEHPK3PXP';\n      const code = generateTOTPCode(secret);\n      \n      expect(code).toMatch(/^\\d{6}$/);\n    });\n    \n    test('verifies TOTP codes within time window', async () => {\n      const secret = 'JBSWY3DPEHPK3PXP';\n      const validCode = generateTOTPCode(secret);\n      \n      const isValid = await verifyTOTPCode(validCode, secret);\n      expect(isValid).toBe(true);\n    });\n    \n    test('rejects invalid TOTP codes', async () => {\n      const secret = 'JBSWY3DPEHPK3PXP';\n      const invalidCodes = ['000000', '123456', '999999'];\n      \n      for (const code of invalidCodes) {\n        const isValid = await verifyTOTPCode(code, secret);\n        expect(isValid).toBe(false);\n      }\n    });\n  });\n});\n\n// Mock function implementations for testing\nasync function createSessionToken(data: any): Promise<string> {\n  return jwt.sign(data, process.env.JWT_SECRET!, { expiresIn: '24h' });\n}\n\nasync function validateSessionToken(token: string, blacklist: Set<string>): Promise<boolean> {\n  return !blacklist.has(token);\n}\n\nfunction generateTOTPCode(secret: string): string {\n  // Mock implementation\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nasync function verifyTOTPCode(code: string, secret: string): Promise<boolean> {\n  // Mock implementation\n  return code === generateTOTPCode(secret);\n}"],"version":3}