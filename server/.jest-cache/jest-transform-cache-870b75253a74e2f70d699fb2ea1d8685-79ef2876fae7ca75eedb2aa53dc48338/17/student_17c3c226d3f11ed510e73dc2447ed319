ab1da0f8400ce7e59e63cf2e33e5bed8
/* istanbul ignore next */
function cov_vtfu0vm5k() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/student.ts";
  var hash = "965e947628a0d5a42ce4f6b75e13ca6cc2194d36";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/student.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 23
        }
      },
      "1": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "2": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 92
        }
      },
      "3": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "4": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "5": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "6": {
        start: {
          line: 41,
          column: 38
        },
        end: {
          line: 49,
          column: 2
        }
      },
      "7": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 87,
          column: 3
        }
      },
      "8": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "9": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 35
        }
      },
      "10": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "11": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 67
        }
      },
      "12": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "13": {
        start: {
          line: 73,
          column: 35
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "14": {
        start: {
          line: 73,
          column: 62
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "15": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 37
        }
      },
      "16": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 18
        }
      },
      "17": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 132,
          column: 3
        }
      },
      "18": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "19": {
        start: {
          line: 91,
          column: 23
        },
        end: {
          line: 91,
          column: 35
        }
      },
      "20": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "21": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "22": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 67
        }
      },
      "23": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 113,
          column: 10
        }
      },
      "24": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "25": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 72
        }
      },
      "26": {
        start: {
          line: 118,
          column: 34
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "27": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 36
        }
      },
      "28": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 18
        }
      },
      "29": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 184,
          column: 3
        }
      },
      "30": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "31": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 35
        }
      },
      "32": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "33": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 67
        }
      },
      "34": {
        start: {
          line: 140,
          column: 53
        },
        end: {
          line: 140,
          column: 61
        }
      },
      "35": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "36": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 150,
          column: 14
        }
      },
      "37": {
        start: {
          line: 152,
          column: 13
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "38": {
        start: {
          line: 154,
          column: 30
        },
        end: {
          line: 154,
          column: 52
        }
      },
      "39": {
        start: {
          line: 155,
          column: 34
        },
        end: {
          line: 155,
          column: 59
        }
      },
      "40": {
        start: {
          line: 156,
          column: 33
        },
        end: {
          line: 156,
          column: 74
        }
      },
      "41": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "42": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 75
        }
      },
      "43": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 173,
          column: 10
        }
      },
      "44": {
        start: {
          line: 175,
          column: 34
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "45": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 48
        }
      },
      "46": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 18
        }
      },
      "47": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 235,
          column: 3
        }
      },
      "48": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 234,
          column: 5
        }
      },
      "49": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 35
        }
      },
      "50": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 49
        }
      },
      "51": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "52": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 67
        }
      },
      "53": {
        start: {
          line: 194,
          column: 32
        },
        end: {
          line: 199,
          column: 10
        }
      },
      "54": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "55": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 72
        }
      },
      "56": {
        start: {
          line: 203,
          column: 53
        },
        end: {
          line: 203,
          column: 61
        }
      },
      "57": {
        start: {
          line: 204,
          column: 27
        },
        end: {
          line: 204,
          column: 29
        }
      },
      "58": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 206,
          column: 45
        }
      },
      "59": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 45
        }
      },
      "60": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "61": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "62": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 210,
          column: 37
        }
      },
      "63": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 37
        }
      },
      "64": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "65": {
        start: {
          line: 213,
          column: 30
        },
        end: {
          line: 213,
          column: 52
        }
      },
      "66": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 61
        }
      },
      "67": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 76
        }
      },
      "68": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 224,
          column: 10
        }
      },
      "69": {
        start: {
          line: 226,
          column: 34
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "70": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 36
        }
      },
      "71": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 18
        }
      },
      "72": {
        start: {
          line: 237,
          column: 0
        },
        end: {
          line: 272,
          column: 3
        }
      },
      "73": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 271,
          column: 5
        }
      },
      "74": {
        start: {
          line: 239,
          column: 23
        },
        end: {
          line: 239,
          column: 35
        }
      },
      "75": {
        start: {
          line: 240,
          column: 26
        },
        end: {
          line: 240,
          column: 49
        }
      },
      "76": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "77": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 67
        }
      },
      "78": {
        start: {
          line: 245,
          column: 32
        },
        end: {
          line: 250,
          column: 10
        }
      },
      "79": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "80": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 72
        }
      },
      "81": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 266,
          column: 11
        }
      },
      "82": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 74
        }
      },
      "83": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 76
        }
      },
      "84": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 70
        }
      },
      "85": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 72
        }
      },
      "86": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 66
        }
      },
      "87": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 31
        }
      },
      "88": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 18
        }
      },
      "89": {
        start: {
          line: 274,
          column: 0
        },
        end: {
          line: 298,
          column: 3
        }
      },
      "90": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "91": {
        start: {
          line: 276,
          column: 23
        },
        end: {
          line: 276,
          column: 40
        }
      },
      "92": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "93": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 67
        }
      },
      "94": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 285,
          column: 10
        }
      },
      "95": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 287,
          column: 72
        }
      },
      "96": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 72
        }
      },
      "97": {
        start: {
          line: 288,
          column: 22
        },
        end: {
          line: 292,
          column: 10
        }
      },
      "98": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 24
        }
      },
      "99": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 18
        }
      },
      "100": {
        start: {
          line: 299,
          column: 0
        },
        end: {
          line: 327,
          column: 3
        }
      },
      "101": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 326,
          column: 5
        }
      },
      "102": {
        start: {
          line: 301,
          column: 23
        },
        end: {
          line: 301,
          column: 40
        }
      },
      "103": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "104": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 67
        }
      },
      "105": {
        start: {
          line: 305,
          column: 24
        },
        end: {
          line: 310,
          column: 10
        }
      },
      "106": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 312,
          column: 72
        }
      },
      "107": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 72
        }
      },
      "108": {
        start: {
          line: 313,
          column: 21
        },
        end: {
          line: 321,
          column: 10
        }
      },
      "109": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 35
        }
      },
      "110": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 18
        }
      },
      "111": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 362,
          column: 3
        }
      },
      "112": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 361,
          column: 5
        }
      },
      "113": {
        start: {
          line: 330,
          column: 23
        },
        end: {
          line: 330,
          column: 40
        }
      },
      "114": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "115": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 67
        }
      },
      "116": {
        start: {
          line: 334,
          column: 24
        },
        end: {
          line: 339,
          column: 10
        }
      },
      "117": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 341,
          column: 72
        }
      },
      "118": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 72
        }
      },
      "119": {
        start: {
          line: 342,
          column: 21
        },
        end: {
          line: 353,
          column: 10
        }
      },
      "120": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 23
        }
      },
      "121": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "122": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 69
        }
      },
      "123": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 18
        }
      },
      "124": {
        start: {
          line: 363,
          column: 0
        },
        end: {
          line: 391,
          column: 3
        }
      },
      "125": {
        start: {
          line: 364,
          column: 4
        },
        end: {
          line: 390,
          column: 5
        }
      },
      "126": {
        start: {
          line: 365,
          column: 23
        },
        end: {
          line: 365,
          column: 40
        }
      },
      "127": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "128": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 67
        }
      },
      "129": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 374,
          column: 10
        }
      },
      "130": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 376,
          column: 72
        }
      },
      "131": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 72
        }
      },
      "132": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 382,
          column: 11
        }
      },
      "133": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 30
        }
      },
      "134": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "135": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 69
        }
      },
      "136": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 18
        }
      },
      "137": {
        start: {
          line: 393,
          column: 0
        },
        end: {
          line: 417,
          column: 3
        }
      },
      "138": {
        start: {
          line: 394,
          column: 4
        },
        end: {
          line: 416,
          column: 5
        }
      },
      "139": {
        start: {
          line: 395,
          column: 23
        },
        end: {
          line: 395,
          column: 40
        }
      },
      "140": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "141": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 67
        }
      },
      "142": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 404,
          column: 10
        }
      },
      "143": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 406,
          column: 72
        }
      },
      "144": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 72
        }
      },
      "145": {
        start: {
          line: 407,
          column: 28
        },
        end: {
          line: 411,
          column: 10
        }
      },
      "146": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 30
        }
      },
      "147": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 18
        }
      },
      "148": {
        start: {
          line: 418,
          column: 0
        },
        end: {
          line: 446,
          column: 3
        }
      },
      "149": {
        start: {
          line: 419,
          column: 4
        },
        end: {
          line: 445,
          column: 5
        }
      },
      "150": {
        start: {
          line: 420,
          column: 23
        },
        end: {
          line: 420,
          column: 40
        }
      },
      "151": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "152": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 67
        }
      },
      "153": {
        start: {
          line: 424,
          column: 24
        },
        end: {
          line: 429,
          column: 10
        }
      },
      "154": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 431,
          column: 72
        }
      },
      "155": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 72
        }
      },
      "156": {
        start: {
          line: 432,
          column: 27
        },
        end: {
          line: 440,
          column: 10
        }
      },
      "157": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 441,
          column: 41
        }
      },
      "158": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 18
        }
      },
      "159": {
        start: {
          line: 447,
          column: 0
        },
        end: {
          line: 475,
          column: 3
        }
      },
      "160": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 474,
          column: 5
        }
      },
      "161": {
        start: {
          line: 449,
          column: 23
        },
        end: {
          line: 449,
          column: 40
        }
      },
      "162": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "163": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 67
        }
      },
      "164": {
        start: {
          line: 453,
          column: 24
        },
        end: {
          line: 458,
          column: 10
        }
      },
      "165": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 460,
          column: 72
        }
      },
      "166": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 72
        }
      },
      "167": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 466,
          column: 11
        }
      },
      "168": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 30
        }
      },
      "169": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 472,
          column: 9
        }
      },
      "170": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 75
        }
      },
      "171": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 18
        }
      },
      "172": {
        start: {
          line: 477,
          column: 0
        },
        end: {
          line: 508,
          column: 3
        }
      },
      "173": {
        start: {
          line: 478,
          column: 4
        },
        end: {
          line: 507,
          column: 5
        }
      },
      "174": {
        start: {
          line: 479,
          column: 23
        },
        end: {
          line: 479,
          column: 35
        }
      },
      "175": {
        start: {
          line: 480,
          column: 26
        },
        end: {
          line: 480,
          column: 49
        }
      },
      "176": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "177": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 67
        }
      },
      "178": {
        start: {
          line: 484,
          column: 24
        },
        end: {
          line: 489,
          column: 10
        }
      },
      "179": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "180": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 72
        }
      },
      "181": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 503,
          column: 11
        }
      },
      "182": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 17,
            column: 13
          }
        },
        loc: {
          start: {
            line: 17,
            column: 22
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 43
          }
        },
        loc: {
          start: {
            line: 51,
            column: 68
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 51
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 49
          }
        },
        loc: {
          start: {
            line: 73,
            column: 62
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 73
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 89,
            column: 45
          },
          end: {
            line: 89,
            column: 46
          }
        },
        loc: {
          start: {
            line: 89,
            column: 71
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 89
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 134,
            column: 76
          },
          end: {
            line: 134,
            column: 77
          }
        },
        loc: {
          start: {
            line: 134,
            column: 102
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 134
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 186,
            column: 78
          },
          end: {
            line: 186,
            column: 79
          }
        },
        loc: {
          start: {
            line: 186,
            column: 104
          },
          end: {
            line: 235,
            column: 1
          }
        },
        line: 186
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 237,
            column: 50
          },
          end: {
            line: 237,
            column: 51
          }
        },
        loc: {
          start: {
            line: 237,
            column: 76
          },
          end: {
            line: 272,
            column: 1
          }
        },
        line: 237
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 255,
            column: 34
          },
          end: {
            line: 255,
            column: 35
          }
        },
        loc: {
          start: {
            line: 255,
            column: 48
          },
          end: {
            line: 263,
            column: 9
          }
        },
        line: 255
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 274,
            column: 25
          },
          end: {
            line: 274,
            column: 26
          }
        },
        loc: {
          start: {
            line: 274,
            column: 51
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 274
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 299,
            column: 61
          },
          end: {
            line: 299,
            column: 62
          }
        },
        loc: {
          start: {
            line: 299,
            column: 87
          },
          end: {
            line: 327,
            column: 1
          }
        },
        line: 299
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 328,
            column: 70
          },
          end: {
            line: 328,
            column: 71
          }
        },
        loc: {
          start: {
            line: 328,
            column: 96
          },
          end: {
            line: 362,
            column: 1
          }
        },
        line: 328
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 363,
            column: 36
          },
          end: {
            line: 363,
            column: 37
          }
        },
        loc: {
          start: {
            line: 363,
            column: 62
          },
          end: {
            line: 391,
            column: 1
          }
        },
        line: 363
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 393,
            column: 31
          },
          end: {
            line: 393,
            column: 32
          }
        },
        loc: {
          start: {
            line: 393,
            column: 57
          },
          end: {
            line: 417,
            column: 1
          }
        },
        line: 393
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 418,
            column: 73
          },
          end: {
            line: 418,
            column: 74
          }
        },
        loc: {
          start: {
            line: 418,
            column: 99
          },
          end: {
            line: 446,
            column: 1
          }
        },
        line: 418
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 447,
            column: 48
          },
          end: {
            line: 447,
            column: 49
          }
        },
        loc: {
          start: {
            line: 447,
            column: 74
          },
          end: {
            line: 475,
            column: 1
          }
        },
        line: 447
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 477,
            column: 54
          },
          end: {
            line: 477,
            column: 55
          }
        },
        loc: {
          start: {
            line: 477,
            column: 80
          },
          end: {
            line: 508,
            column: 1
          }
        },
        line: 477
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 11
          },
          end: {
            line: 19,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 19,
            column: 26
          }
        }, {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 19,
            column: 43
          }
        }, {
          start: {
            line: 19,
            column: 47
          },
          end: {
            line: 19,
            column: 77
          }
        }, {
          start: {
            line: 19,
            column: 82
          },
          end: {
            line: 19,
            column: 91
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 77,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 18
          },
          end: {
            line: 76,
            column: 60
          }
        }, {
          start: {
            line: 77,
            column: 18
          },
          end: {
            line: 77,
            column: 35
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 75,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 75,
            column: 35
          }
        }, {
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 55
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 120,
            column: 18
          },
          end: {
            line: 122,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 18
          },
          end: {
            line: 121,
            column: 60
          }
        }, {
          start: {
            line: 122,
            column: 18
          },
          end: {
            line: 122,
            column: 35
          }
        }],
        line: 120
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 18
          },
          end: {
            line: 120,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 18
          },
          end: {
            line: 120,
            column: 35
          }
        }, {
          start: {
            line: 120,
            column: 39
          },
          end: {
            line: 120,
            column: 55
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: 152,
            column: 13
          },
          end: {
            line: 166,
            column: 9
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 21
          }
        }, {
          start: {
            line: 143,
            column: 25
          },
          end: {
            line: 143,
            column: 33
          }
        }, {
          start: {
            line: 143,
            column: 37
          },
          end: {
            line: 143,
            column: 56
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 13
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 13
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: 164,
            column: 13
          },
          end: {
            line: 166,
            column: 9
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 155,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 155,
            column: 46
          }
        }, {
          start: {
            line: 155,
            column: 50
          },
          end: {
            line: 155,
            column: 59
          }
        }],
        line: 155
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 61
          }
        }, {
          start: {
            line: 156,
            column: 65
          },
          end: {
            line: 156,
            column: 74
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "15": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "16": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 206,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 206,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "17": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 208,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 208,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "18": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "19": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "20": {
        loc: {
          start: {
            line: 214,
            column: 35
          },
          end: {
            line: 214,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 35
          },
          end: {
            line: 214,
            column: 47
          }
        }, {
          start: {
            line: 214,
            column: 51
          },
          end: {
            line: 214,
            column: 60
          }
        }],
        line: 214
      },
      "21": {
        loc: {
          start: {
            line: 215,
            column: 34
          },
          end: {
            line: 215,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 34
          },
          end: {
            line: 215,
            column: 62
          }
        }, {
          start: {
            line: 215,
            column: 66
          },
          end: {
            line: 215,
            column: 75
          }
        }],
        line: 215
      },
      "22": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "23": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "24": {
        loc: {
          start: {
            line: 276,
            column: 23
          },
          end: {
            line: 276,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 23
          },
          end: {
            line: 276,
            column: 35
          }
        }, {
          start: {
            line: 276,
            column: 39
          },
          end: {
            line: 276,
            column: 40
          }
        }],
        line: 276
      },
      "25": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "26": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 287,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 287,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "27": {
        loc: {
          start: {
            line: 301,
            column: 23
          },
          end: {
            line: 301,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 23
          },
          end: {
            line: 301,
            column: 35
          }
        }, {
          start: {
            line: 301,
            column: 39
          },
          end: {
            line: 301,
            column: 40
          }
        }],
        line: 301
      },
      "28": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "29": {
        loc: {
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 312,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 8
          },
          end: {
            line: 312,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "30": {
        loc: {
          start: {
            line: 317,
            column: 28
          },
          end: {
            line: 317,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 28
          },
          end: {
            line: 317,
            column: 47
          }
        }, {
          start: {
            line: 317,
            column: 51
          },
          end: {
            line: 317,
            column: 55
          }
        }],
        line: 317
      },
      "31": {
        loc: {
          start: {
            line: 318,
            column: 24
          },
          end: {
            line: 318,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 318,
            column: 24
          },
          end: {
            line: 318,
            column: 39
          }
        }, {
          start: {
            line: 318,
            column: 43
          },
          end: {
            line: 318,
            column: 51
          }
        }],
        line: 318
      },
      "32": {
        loc: {
          start: {
            line: 330,
            column: 23
          },
          end: {
            line: 330,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 23
          },
          end: {
            line: 330,
            column: 35
          }
        }, {
          start: {
            line: 330,
            column: 39
          },
          end: {
            line: 330,
            column: 40
          }
        }],
        line: 330
      },
      "33": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "34": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 341,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 341,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "35": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "36": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 63
          }
        }, {
          start: {
            line: 357,
            column: 67
          },
          end: {
            line: 357,
            column: 87
          }
        }],
        line: 357
      },
      "37": {
        loc: {
          start: {
            line: 365,
            column: 23
          },
          end: {
            line: 365,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 23
          },
          end: {
            line: 365,
            column: 35
          }
        }, {
          start: {
            line: 365,
            column: 39
          },
          end: {
            line: 365,
            column: 40
          }
        }],
        line: 365
      },
      "38": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "39": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 376,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 376,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "40": {
        loc: {
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 388,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 388,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "41": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 386,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 386,
            column: 63
          }
        }, {
          start: {
            line: 386,
            column: 67
          },
          end: {
            line: 386,
            column: 87
          }
        }],
        line: 386
      },
      "42": {
        loc: {
          start: {
            line: 395,
            column: 23
          },
          end: {
            line: 395,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 23
          },
          end: {
            line: 395,
            column: 35
          }
        }, {
          start: {
            line: 395,
            column: 39
          },
          end: {
            line: 395,
            column: 40
          }
        }],
        line: 395
      },
      "43": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "44": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 406,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 406,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "45": {
        loc: {
          start: {
            line: 420,
            column: 23
          },
          end: {
            line: 420,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 23
          },
          end: {
            line: 420,
            column: 35
          }
        }, {
          start: {
            line: 420,
            column: 39
          },
          end: {
            line: 420,
            column: 40
          }
        }],
        line: 420
      },
      "46": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "47": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 431,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 431,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "48": {
        loc: {
          start: {
            line: 435,
            column: 25
          },
          end: {
            line: 435,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 25
          },
          end: {
            line: 435,
            column: 41
          }
        }, {
          start: {
            line: 435,
            column: 45
          },
          end: {
            line: 435,
            column: 58
          }
        }, {
          start: {
            line: 435,
            column: 62
          },
          end: {
            line: 435,
            column: 66
          }
        }],
        line: 435
      },
      "49": {
        loc: {
          start: {
            line: 436,
            column: 22
          },
          end: {
            line: 436,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 436,
            column: 38
          },
          end: {
            line: 436,
            column: 61
          }
        }, {
          start: {
            line: 436,
            column: 64
          },
          end: {
            line: 436,
            column: 74
          }
        }],
        line: 436
      },
      "50": {
        loc: {
          start: {
            line: 437,
            column: 28
          },
          end: {
            line: 437,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 437,
            column: 28
          },
          end: {
            line: 437,
            column: 47
          }
        }, {
          start: {
            line: 437,
            column: 51
          },
          end: {
            line: 437,
            column: 55
          }
        }],
        line: 437
      },
      "51": {
        loc: {
          start: {
            line: 449,
            column: 23
          },
          end: {
            line: 449,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 23
          },
          end: {
            line: 449,
            column: 35
          }
        }, {
          start: {
            line: 449,
            column: 39
          },
          end: {
            line: 449,
            column: 40
          }
        }],
        line: 449
      },
      "52": {
        loc: {
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "53": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 460,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 460,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "54": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 472,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "55": {
        loc: {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 470,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 470,
            column: 63
          }
        }, {
          start: {
            line: 470,
            column: 67
          },
          end: {
            line: 470,
            column: 87
          }
        }],
        line: 470
      },
      "56": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 483,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "57": {
        loc: {
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/student.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/student.ts"],
      sourcesContent: ["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate } from '../validation';\nimport { z } from 'zod';\nimport { auditLoggers } from '../middleware/auditLog';\n\nconst router = Router();\n\n// Validation schemas\nconst studentCreateSchema = z\n  .object({\n    firstName: z.string().min(1).max(100).optional(),\n    lastName: z.string().min(1).max(100).optional(),\n    grade: z.number().int().min(1).max(12).optional(),\n    // Legacy field for backward compatibility\n    name: z.string().min(1).max(200).optional(),\n  })\n  .refine(\n    (data) => {\n      // Either use new fields (firstName, lastName, grade) or legacy name field\n      return (data.firstName && data.lastName && typeof data.grade === 'number') || data.name;\n    },\n    {\n      message: 'Either provide firstName, lastName, and grade, or provide name',\n    },\n  );\n\nconst studentUpdateSchema = z.object({\n  firstName: z.string().min(1).max(100).optional(),\n  lastName: z.string().min(1).max(100).optional(),\n  grade: z.number().int().min(1).max(12).optional(),\n  name: z.string().min(1).max(200).optional(),\n});\n\nconst studentGoalCreateSchema = z.object({\n  text: z.string().min(1).max(500),\n  // themeId removed - ThematicUnit model archived\n  unitPlanId: z.number().int().optional(),\n  status: z.enum(['active', 'completed', 'abandoned']).default('active'),\n});\n\nconst studentGoalUpdateSchema = z.object({\n  text: z.string().min(1).max(500).optional(),\n  // themeId removed - ThematicUnit model archived\n  unitPlanId: z.number().int().optional(),\n  status: z.enum(['active', 'completed', 'abandoned']).optional(),\n});\n\nconst studentReflectionCreateSchema = z.object({\n  date: z.string().datetime().optional(),\n  text: z.string().max(1000).optional(),\n  content: z.string().max(1000).optional(),\n  emoji: z.string().max(10).optional(),\n  voicePath: z.string().max(500).optional(),\n  // themeId removed - ThematicUnit model archived\n  unitPlanId: z.number().int().optional(),\n});\n\n// Get all students for the authenticated teacher\nrouter.get('/', auditLoggers.studentView, async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const students = await prisma.student.findMany({\n      where: { userId: userId },\n      include: {\n        goals: true,\n        reflections: true,\n        _count: {\n          select: {\n            artifacts: true,\n            reflections: true,\n            parentSummaries: true,\n          },\n        },\n      },\n      orderBy: [{ grade: 'asc' }, { lastName: 'asc' }, { firstName: 'asc' }],\n    });\n\n    // Add backward compatibility for name field and mask sensitive data\n    const studentsWithLegacy = students.map((student) => ({\n      ...student,\n      name:\n        student.firstName && student.lastName\n          ? `${student.firstName} ${student.lastName}`\n          : 'Unnamed Student',\n      // Remove any accidentally included sensitive fields\n      createdAt: undefined,\n      updatedAt: undefined,\n    }));\n\n    res.json(studentsWithLegacy);\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Get a specific student\nrouter.get('/:id', auditLoggers.studentView, async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    const studentId = parseInt(req.params.id);\n\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const student = await prisma.student.findFirst({\n      where: {\n        id: studentId,\n        userId: userId,\n      },\n      include: {\n        goals: true,\n        reflections: true,\n        artifacts: {\n          orderBy: { createdAt: 'desc' },\n          take: 10,\n        },\n        parentSummaries: {\n          orderBy: { createdAt: 'desc' },\n          take: 5,\n        },\n      },\n    });\n\n    if (!student) {\n      return res.status(404).json({ error: 'Student not found' });\n    }\n\n    // Add backward compatibility for name field and mask sensitive data\n    const studentWithLegacy = {\n      ...student,\n      name:\n        student.firstName && student.lastName\n          ? `${student.firstName} ${student.lastName}`\n          : 'Unnamed Student',\n      // Remove any accidentally included sensitive fields\n      createdAt: undefined,\n      updatedAt: undefined,\n    };\n\n    res.json(studentWithLegacy);\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Create a new student\nrouter.post(\n  '/',\n  validate(studentCreateSchema),\n  auditLoggers.studentCreate,\n  async (req: Request, res, next) => {\n    try {\n      const userId = req.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const { firstName, lastName, grade, name } = req.body;\n\n      // Handle both new and legacy formats\n      let studentData;\n      if (firstName && lastName && grade !== undefined) {\n        // New parent communication format\n        studentData = {\n          firstName,\n          lastName,\n          grade,\n          userId: userId,\n        };\n      } else if (name) {\n        // Legacy format - extract first and last name from full name\n        const nameParts = name.trim().split(' ');\n        const firstNamePart = nameParts[0] || 'Unknown';\n        const lastNamePart = nameParts.slice(1).join(' ') || 'Student';\n\n        studentData = {\n          firstName: firstNamePart,\n          lastName: lastNamePart,\n          grade: 1, // Default grade for legacy students\n          userId: userId,\n        };\n      } else {\n        return res.status(400).json({ error: 'Invalid student data' });\n      }\n\n      const student = await prisma.student.create({\n        data: studentData,\n        include: {\n          goals: true,\n          reflections: true,\n        },\n      });\n\n      // Add backward compatibility for name field\n      const studentWithLegacy = {\n        ...student,\n        name: `${student.firstName} ${student.lastName}`,\n      };\n\n      res.status(201).json(studentWithLegacy);\n    } catch (err) {\n      next(err);\n    }\n  },\n);\n\n// Update a student\nrouter.put(\n  '/:id',\n  validate(studentUpdateSchema),\n  auditLoggers.studentUpdate,\n  async (req: Request, res, next) => {\n    try {\n      const userId = req.user?.id;\n      const studentId = parseInt(req.params.id);\n\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      // Verify the student belongs to this teacher\n      const existingStudent = await prisma.student.findFirst({\n        where: {\n          id: studentId,\n          userId: userId,\n        },\n      });\n\n      if (!existingStudent) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n\n      const { firstName, lastName, grade, name } = req.body;\n\n      const updateData: Record<string, unknown> = {};\n      if (firstName !== undefined) updateData.firstName = firstName;\n      if (lastName !== undefined) updateData.lastName = lastName;\n      if (grade !== undefined) updateData.grade = grade;\n\n      // Handle legacy name field\n      if (name !== undefined) {\n        const nameParts = name.trim().split(' ');\n        updateData.firstName = nameParts[0] || 'Unknown';\n        updateData.lastName = nameParts.slice(1).join(' ') || 'Student';\n      }\n\n      const student = await prisma.student.update({\n        where: { id: studentId },\n        data: updateData,\n        include: {\n          goals: true,\n          reflections: true,\n        },\n      });\n\n      // Add backward compatibility for name field\n      const studentWithLegacy = {\n        ...student,\n        name: `${student.firstName} ${student.lastName}`,\n      };\n\n      res.json(studentWithLegacy);\n    } catch (err) {\n      next(err);\n    }\n  },\n);\n\n// Delete a student\nrouter.delete('/:id', auditLoggers.studentDelete, async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    const studentId = parseInt(req.params.id);\n\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify the student belongs to this teacher\n    const existingStudent = await prisma.student.findFirst({\n      where: {\n        id: studentId,\n        userId: userId,\n      },\n    });\n\n    if (!existingStudent) {\n      return res.status(404).json({ error: 'Student not found' });\n    }\n\n    // Delete related data in a transaction for data integrity\n    await prisma.$transaction(\n      async (tx) => {\n        // Delete in dependency order\n        await tx.studentArtifact.deleteMany({ where: { studentId } });\n        await tx.studentReflection.deleteMany({ where: { studentId } });\n        await tx.studentGoal.deleteMany({ where: { studentId } });\n        await tx.parentSummary.deleteMany({ where: { studentId } });\n\n        // Finally delete the student\n        await tx.student.delete({ where: { id: studentId } });\n      },\n      {\n        // Set a timeout for the transaction\n        timeout: 10000, // 10 seconds\n      },\n    );\n\n    res.status(204).send();\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Student goals routes\nrouter.get('/:id/goals', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    const student = await prisma.student.findFirst({\n      where: {\n        id: Number(req.params.id),\n        userId,\n      },\n    });\n    if (!student) return res.status(404).json({ error: 'Student not found' });\n\n    const goals = await prisma.studentGoal.findMany({\n      where: { studentId: Number(req.params.id) },\n      // theme removed - ThematicUnit model archived\n      orderBy: { createdAt: 'desc' },\n    });\n    res.json(goals);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/:id/goals', validate(studentGoalCreateSchema), async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    const student = await prisma.student.findFirst({\n      where: {\n        id: Number(req.params.id),\n        userId,\n      },\n    });\n    if (!student) return res.status(404).json({ error: 'Student not found' });\n\n    const goal = await prisma.studentGoal.create({\n      data: {\n        studentId: Number(req.params.id),\n        text: req.body.text,\n        unitPlanId: req.body.unitPlanId || null,\n        status: req.body.status || 'active',\n      },\n      // theme removed - ThematicUnit model archived\n    });\n    res.status(201).json(goal);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.patch(\n  '/:id/goals/:goalId',\n  validate(studentGoalUpdateSchema),\n  async (req: Request, res, next) => {\n    try {\n      const userId = req.user?.id || 0;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const student = await prisma.student.findFirst({\n        where: {\n          id: Number(req.params.id),\n          userId,\n        },\n      });\n      if (!student) return res.status(404).json({ error: 'Student not found' });\n\n      const goal = await prisma.studentGoal.update({\n        where: {\n          id: Number(req.params.goalId),\n          studentId: Number(req.params.id),\n        },\n        data: {\n          text: req.body.text,\n          status: req.body.status,\n          unitPlanId: req.body.unitPlanId,\n        },\n        // theme removed - ThematicUnit model archived\n      });\n      res.json(goal);\n    } catch (err) {\n      if (err instanceof Prisma.PrismaClientKnownRequestError && err.code === 'P2025') {\n        return res.status(404).json({ error: 'Goal not found' });\n      }\n      next(err);\n    }\n  },\n);\n\nrouter.delete('/:id/goals/:goalId', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    const student = await prisma.student.findFirst({\n      where: {\n        id: Number(req.params.id),\n        userId,\n      },\n    });\n    if (!student) return res.status(404).json({ error: 'Student not found' });\n\n    await prisma.studentGoal.delete({\n      where: {\n        id: Number(req.params.goalId),\n        studentId: Number(req.params.id),\n      },\n    });\n    res.status(204).end();\n  } catch (err) {\n    if (err instanceof Prisma.PrismaClientKnownRequestError && err.code === 'P2025') {\n      return res.status(404).json({ error: 'Goal not found' });\n    }\n    next(err);\n  }\n});\n\n// Student reflections routes\nrouter.get('/:id/reflections', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    const student = await prisma.student.findFirst({\n      where: {\n        id: Number(req.params.id),\n        userId,\n      },\n    });\n    if (!student) return res.status(404).json({ error: 'Student not found' });\n\n    const reflections = await prisma.studentReflection.findMany({\n      where: { studentId: Number(req.params.id) },\n      // theme removed - ThematicUnit model archived\n      orderBy: { createdAt: 'desc' },\n    });\n    res.json(reflections);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post(\n  '/:id/reflections',\n  validate(studentReflectionCreateSchema),\n  async (req: Request, res, next) => {\n    try {\n      const userId = req.user?.id || 0;\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n      const student = await prisma.student.findFirst({\n        where: {\n          id: Number(req.params.id),\n          userId,\n        },\n      });\n      if (!student) return res.status(404).json({ error: 'Student not found' });\n\n      const reflection = await prisma.studentReflection.create({\n        data: {\n          studentId: Number(req.params.id),\n          content: req.body.content || req.body.text || null,\n          date: req.body.date ? new Date(req.body.date) : new Date(),\n          unitPlanId: req.body.unitPlanId || null,\n        },\n        // theme removed - ThematicUnit model archived\n      });\n      res.status(201).json(reflection);\n    } catch (err) {\n      next(err);\n    }\n  },\n);\n\nrouter.delete('/:id/reflections/:reflectionId', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    const student = await prisma.student.findFirst({\n      where: {\n        id: Number(req.params.id),\n        userId,\n      },\n    });\n    if (!student) return res.status(404).json({ error: 'Student not found' });\n\n    await prisma.studentReflection.delete({\n      where: {\n        id: Number(req.params.reflectionId),\n        studentId: Number(req.params.id),\n      },\n    });\n    res.status(204).end();\n  } catch (err) {\n    if (err instanceof Prisma.PrismaClientKnownRequestError && err.code === 'P2025') {\n      return res.status(404).json({ error: 'Reflection not found' });\n    }\n    next(err);\n  }\n});\n\n// Get student progress summary\nrouter.get('/:id/progress', auditLoggers.studentView, async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    const studentId = parseInt(req.params.id);\n\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const student = await prisma.student.findFirst({\n      where: {\n        id: studentId,\n        userId: userId,\n      },\n    });\n\n    if (!student) {\n      return res.status(404).json({ error: 'Student not found' });\n    }\n\n    // Assessment functionality removed\n\n    res.json({\n      student,\n      progress: {\n        totalAssessments: 0,\n        averageScore: null,\n        assessmentsByType: {},\n        artifactCount: await prisma.studentArtifact.count({ where: { studentId } }),\n        reflectionCount: await prisma.studentReflection.count({ where: { studentId } }),\n      },\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "965e947628a0d5a42ce4f6b75e13ca6cc2194d36"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vtfu0vm5k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vtfu0vm5k();
import { Router } from 'express';
import { Prisma } from '../prisma';
import { prisma } from '../prisma';
import { validate } from '../validation';
import { z } from 'zod';
import { auditLoggers } from '../middleware/auditLog';
const router =
/* istanbul ignore next */
(cov_vtfu0vm5k().s[0]++, Router());
// Validation schemas
const studentCreateSchema =
/* istanbul ignore next */
(cov_vtfu0vm5k().s[1]++, z.object({
  firstName: z.string().min(1).max(100).optional(),
  lastName: z.string().min(1).max(100).optional(),
  grade: z.number().int().min(1).max(12).optional(),
  // Legacy field for backward compatibility
  name: z.string().min(1).max(200).optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[0]++;
  cov_vtfu0vm5k().s[2]++;
  // Either use new fields (firstName, lastName, grade) or legacy name field
  return /* istanbul ignore next */(cov_vtfu0vm5k().b[0][0]++, data.firstName) &&
  /* istanbul ignore next */
  (cov_vtfu0vm5k().b[0][1]++, data.lastName) &&
  /* istanbul ignore next */
  (cov_vtfu0vm5k().b[0][2]++, typeof data.grade === 'number') ||
  /* istanbul ignore next */
  (cov_vtfu0vm5k().b[0][3]++, data.name);
}, {
  message: 'Either provide firstName, lastName, and grade, or provide name'
}));
const studentUpdateSchema =
/* istanbul ignore next */
(cov_vtfu0vm5k().s[3]++, z.object({
  firstName: z.string().min(1).max(100).optional(),
  lastName: z.string().min(1).max(100).optional(),
  grade: z.number().int().min(1).max(12).optional(),
  name: z.string().min(1).max(200).optional()
}));
const studentGoalCreateSchema =
/* istanbul ignore next */
(cov_vtfu0vm5k().s[4]++, z.object({
  text: z.string().min(1).max(500),
  // themeId removed - ThematicUnit model archived
  unitPlanId: z.number().int().optional(),
  status: z.enum(['active', 'completed', 'abandoned']).default('active')
}));
const studentGoalUpdateSchema =
/* istanbul ignore next */
(cov_vtfu0vm5k().s[5]++, z.object({
  text: z.string().min(1).max(500).optional(),
  // themeId removed - ThematicUnit model archived
  unitPlanId: z.number().int().optional(),
  status: z.enum(['active', 'completed', 'abandoned']).optional()
}));
const studentReflectionCreateSchema =
/* istanbul ignore next */
(cov_vtfu0vm5k().s[6]++, z.object({
  date: z.string().datetime().optional(),
  text: z.string().max(1000).optional(),
  content: z.string().max(1000).optional(),
  emoji: z.string().max(10).optional(),
  voicePath: z.string().max(500).optional(),
  // themeId removed - ThematicUnit model archived
  unitPlanId: z.number().int().optional()
}));
// Get all students for the authenticated teacher
/* istanbul ignore next */
cov_vtfu0vm5k().s[7]++;
router.get('/', auditLoggers.studentView, async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[1]++;
  cov_vtfu0vm5k().s[8]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[9]++, req.user?.id);
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[10]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[1][0]++;
      cov_vtfu0vm5k().s[11]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[1][1]++;
    }
    const students =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[12]++, await prisma.student.findMany({
      where: {
        userId: userId
      },
      include: {
        goals: true,
        reflections: true,
        _count: {
          select: {
            artifacts: true,
            reflections: true,
            parentSummaries: true
          }
        }
      },
      orderBy: [{
        grade: 'asc'
      }, {
        lastName: 'asc'
      }, {
        firstName: 'asc'
      }]
    }));
    // Add backward compatibility for name field and mask sensitive data
    const studentsWithLegacy =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[13]++, students.map(student => {
      /* istanbul ignore next */
      cov_vtfu0vm5k().f[2]++;
      cov_vtfu0vm5k().s[14]++;
      return {
        ...student,
        name:
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[3][0]++, student.firstName) &&
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[3][1]++, student.lastName) ?
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[2][0]++, `${student.firstName} ${student.lastName}`) :
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[2][1]++, 'Unnamed Student'),
        // Remove any accidentally included sensitive fields
        createdAt: undefined,
        updatedAt: undefined
      };
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[15]++;
    res.json(studentsWithLegacy);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[16]++;
    next(err);
  }
});
// Get a specific student
/* istanbul ignore next */
cov_vtfu0vm5k().s[17]++;
router.get('/:id', auditLoggers.studentView, async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[3]++;
  cov_vtfu0vm5k().s[18]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[19]++, req.user?.id);
    const studentId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[20]++, parseInt(req.params.id));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[21]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[4][0]++;
      cov_vtfu0vm5k().s[22]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[4][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[23]++, await prisma.student.findFirst({
      where: {
        id: studentId,
        userId: userId
      },
      include: {
        goals: true,
        reflections: true,
        artifacts: {
          orderBy: {
            createdAt: 'desc'
          },
          take: 10
        },
        parentSummaries: {
          orderBy: {
            createdAt: 'desc'
          },
          take: 5
        }
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[24]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[5][0]++;
      cov_vtfu0vm5k().s[25]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[5][1]++;
    }
    // Add backward compatibility for name field and mask sensitive data
    const studentWithLegacy =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[26]++, {
      ...student,
      name:
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[7][0]++, student.firstName) &&
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[7][1]++, student.lastName) ?
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[6][0]++, `${student.firstName} ${student.lastName}`) :
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[6][1]++, 'Unnamed Student'),
      // Remove any accidentally included sensitive fields
      createdAt: undefined,
      updatedAt: undefined
    });
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[27]++;
    res.json(studentWithLegacy);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[28]++;
    next(err);
  }
});
// Create a new student
/* istanbul ignore next */
cov_vtfu0vm5k().s[29]++;
router.post('/', validate(studentCreateSchema), auditLoggers.studentCreate, async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[4]++;
  cov_vtfu0vm5k().s[30]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[31]++, req.user?.id);
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[32]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[8][0]++;
      cov_vtfu0vm5k().s[33]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[8][1]++;
    }
    const {
      firstName,
      lastName,
      grade,
      name
    } =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[34]++, req.body);
    // Handle both new and legacy formats
    let studentData;
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[10][0]++, firstName) &&
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[10][1]++, lastName) &&
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[10][2]++, grade !== undefined)) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[9][0]++;
      cov_vtfu0vm5k().s[36]++;
      // New parent communication format
      studentData = {
        firstName,
        lastName,
        grade,
        userId: userId
      };
    } else {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[9][1]++;
      cov_vtfu0vm5k().s[37]++;
      if (name) {
        /* istanbul ignore next */
        cov_vtfu0vm5k().b[11][0]++;
        // Legacy format - extract first and last name from full name
        const nameParts =
        /* istanbul ignore next */
        (cov_vtfu0vm5k().s[38]++, name.trim().split(' '));
        const firstNamePart =
        /* istanbul ignore next */
        (cov_vtfu0vm5k().s[39]++,
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[12][0]++, nameParts[0]) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[12][1]++, 'Unknown'));
        const lastNamePart =
        /* istanbul ignore next */
        (cov_vtfu0vm5k().s[40]++,
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[13][0]++, nameParts.slice(1).join(' ')) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[13][1]++, 'Student'));
        /* istanbul ignore next */
        cov_vtfu0vm5k().s[41]++;
        studentData = {
          firstName: firstNamePart,
          lastName: lastNamePart,
          grade: 1,
          // Default grade for legacy students
          userId: userId
        };
      } else {
        /* istanbul ignore next */
        cov_vtfu0vm5k().b[11][1]++;
        cov_vtfu0vm5k().s[42]++;
        return res.status(400).json({
          error: 'Invalid student data'
        });
      }
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[43]++, await prisma.student.create({
      data: studentData,
      include: {
        goals: true,
        reflections: true
      }
    }));
    // Add backward compatibility for name field
    const studentWithLegacy =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[44]++, {
      ...student,
      name: `${student.firstName} ${student.lastName}`
    });
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[45]++;
    res.status(201).json(studentWithLegacy);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[46]++;
    next(err);
  }
});
// Update a student
/* istanbul ignore next */
cov_vtfu0vm5k().s[47]++;
router.put('/:id', validate(studentUpdateSchema), auditLoggers.studentUpdate, async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[5]++;
  cov_vtfu0vm5k().s[48]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[49]++, req.user?.id);
    const studentId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[50]++, parseInt(req.params.id));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[51]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[14][0]++;
      cov_vtfu0vm5k().s[52]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[14][1]++;
    }
    // Verify the student belongs to this teacher
    const existingStudent =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[53]++, await prisma.student.findFirst({
      where: {
        id: studentId,
        userId: userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[54]++;
    if (!existingStudent) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[15][0]++;
      cov_vtfu0vm5k().s[55]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[15][1]++;
    }
    const {
      firstName,
      lastName,
      grade,
      name
    } =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[56]++, req.body);
    const updateData =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[57]++, {});
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[58]++;
    if (firstName !== undefined) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[16][0]++;
      cov_vtfu0vm5k().s[59]++;
      updateData.firstName = firstName;
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[16][1]++;
    }
    cov_vtfu0vm5k().s[60]++;
    if (lastName !== undefined) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[17][0]++;
      cov_vtfu0vm5k().s[61]++;
      updateData.lastName = lastName;
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[17][1]++;
    }
    cov_vtfu0vm5k().s[62]++;
    if (grade !== undefined) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[18][0]++;
      cov_vtfu0vm5k().s[63]++;
      updateData.grade = grade;
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[18][1]++;
    }
    // Handle legacy name field
    cov_vtfu0vm5k().s[64]++;
    if (name !== undefined) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[19][0]++;
      const nameParts =
      /* istanbul ignore next */
      (cov_vtfu0vm5k().s[65]++, name.trim().split(' '));
      /* istanbul ignore next */
      cov_vtfu0vm5k().s[66]++;
      updateData.firstName =
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[20][0]++, nameParts[0]) ||
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[20][1]++, 'Unknown');
      /* istanbul ignore next */
      cov_vtfu0vm5k().s[67]++;
      updateData.lastName =
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[21][0]++, nameParts.slice(1).join(' ')) ||
      /* istanbul ignore next */
      (cov_vtfu0vm5k().b[21][1]++, 'Student');
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[19][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[68]++, await prisma.student.update({
      where: {
        id: studentId
      },
      data: updateData,
      include: {
        goals: true,
        reflections: true
      }
    }));
    // Add backward compatibility for name field
    const studentWithLegacy =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[69]++, {
      ...student,
      name: `${student.firstName} ${student.lastName}`
    });
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[70]++;
    res.json(studentWithLegacy);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[71]++;
    next(err);
  }
});
// Delete a student
/* istanbul ignore next */
cov_vtfu0vm5k().s[72]++;
router.delete('/:id', auditLoggers.studentDelete, async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[6]++;
  cov_vtfu0vm5k().s[73]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[74]++, req.user?.id);
    const studentId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[75]++, parseInt(req.params.id));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[76]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[22][0]++;
      cov_vtfu0vm5k().s[77]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[22][1]++;
    }
    // Verify the student belongs to this teacher
    const existingStudent =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[78]++, await prisma.student.findFirst({
      where: {
        id: studentId,
        userId: userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[79]++;
    if (!existingStudent) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[23][0]++;
      cov_vtfu0vm5k().s[80]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[23][1]++;
    }
    // Delete related data in a transaction for data integrity
    cov_vtfu0vm5k().s[81]++;
    await prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_vtfu0vm5k().f[7]++;
      cov_vtfu0vm5k().s[82]++;
      // Delete in dependency order
      await tx.studentArtifact.deleteMany({
        where: {
          studentId
        }
      });
      /* istanbul ignore next */
      cov_vtfu0vm5k().s[83]++;
      await tx.studentReflection.deleteMany({
        where: {
          studentId
        }
      });
      /* istanbul ignore next */
      cov_vtfu0vm5k().s[84]++;
      await tx.studentGoal.deleteMany({
        where: {
          studentId
        }
      });
      /* istanbul ignore next */
      cov_vtfu0vm5k().s[85]++;
      await tx.parentSummary.deleteMany({
        where: {
          studentId
        }
      });
      // Finally delete the student
      /* istanbul ignore next */
      cov_vtfu0vm5k().s[86]++;
      await tx.student.delete({
        where: {
          id: studentId
        }
      });
    }, {
      // Set a timeout for the transaction
      timeout: 10000 // 10 seconds
    });
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[87]++;
    res.status(204).send();
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[88]++;
    next(err);
  }
});
// Student goals routes
/* istanbul ignore next */
cov_vtfu0vm5k().s[89]++;
router.get('/:id/goals', async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[8]++;
  cov_vtfu0vm5k().s[90]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[91]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[24][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[24][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[92]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[25][0]++;
      cov_vtfu0vm5k().s[93]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[25][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[94]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[95]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[26][0]++;
      cov_vtfu0vm5k().s[96]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[26][1]++;
    }
    const goals =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[97]++, await prisma.studentGoal.findMany({
      where: {
        studentId: Number(req.params.id)
      },
      // theme removed - ThematicUnit model archived
      orderBy: {
        createdAt: 'desc'
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[98]++;
    res.json(goals);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[99]++;
    next(err);
  }
});
/* istanbul ignore next */
cov_vtfu0vm5k().s[100]++;
router.post('/:id/goals', validate(studentGoalCreateSchema), async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[9]++;
  cov_vtfu0vm5k().s[101]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[102]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[27][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[27][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[103]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[28][0]++;
      cov_vtfu0vm5k().s[104]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[28][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[105]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[106]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[29][0]++;
      cov_vtfu0vm5k().s[107]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[29][1]++;
    }
    const goal =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[108]++, await prisma.studentGoal.create({
      data: {
        studentId: Number(req.params.id),
        text: req.body.text,
        unitPlanId:
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[30][0]++, req.body.unitPlanId) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[30][1]++, null),
        status:
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[31][0]++, req.body.status) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[31][1]++, 'active')
      }
      // theme removed - ThematicUnit model archived
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[109]++;
    res.status(201).json(goal);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[110]++;
    next(err);
  }
});
/* istanbul ignore next */
cov_vtfu0vm5k().s[111]++;
router.patch('/:id/goals/:goalId', validate(studentGoalUpdateSchema), async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[10]++;
  cov_vtfu0vm5k().s[112]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[113]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[32][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[32][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[114]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[33][0]++;
      cov_vtfu0vm5k().s[115]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[33][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[116]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[117]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[34][0]++;
      cov_vtfu0vm5k().s[118]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[34][1]++;
    }
    const goal =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[119]++, await prisma.studentGoal.update({
      where: {
        id: Number(req.params.goalId),
        studentId: Number(req.params.id)
      },
      data: {
        text: req.body.text,
        status: req.body.status,
        unitPlanId: req.body.unitPlanId
      }
      // theme removed - ThematicUnit model archived
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[120]++;
    res.json(goal);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[121]++;
    if (
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[36][0]++, err instanceof Prisma.PrismaClientKnownRequestError) &&
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[36][1]++, err.code === 'P2025')) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[35][0]++;
      cov_vtfu0vm5k().s[122]++;
      return res.status(404).json({
        error: 'Goal not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[35][1]++;
    }
    cov_vtfu0vm5k().s[123]++;
    next(err);
  }
});
/* istanbul ignore next */
cov_vtfu0vm5k().s[124]++;
router.delete('/:id/goals/:goalId', async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[11]++;
  cov_vtfu0vm5k().s[125]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[126]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[37][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[37][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[127]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[38][0]++;
      cov_vtfu0vm5k().s[128]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[38][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[129]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[130]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[39][0]++;
      cov_vtfu0vm5k().s[131]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[39][1]++;
    }
    cov_vtfu0vm5k().s[132]++;
    await prisma.studentGoal.delete({
      where: {
        id: Number(req.params.goalId),
        studentId: Number(req.params.id)
      }
    });
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[133]++;
    res.status(204).end();
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[134]++;
    if (
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[41][0]++, err instanceof Prisma.PrismaClientKnownRequestError) &&
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[41][1]++, err.code === 'P2025')) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[40][0]++;
      cov_vtfu0vm5k().s[135]++;
      return res.status(404).json({
        error: 'Goal not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[40][1]++;
    }
    cov_vtfu0vm5k().s[136]++;
    next(err);
  }
});
// Student reflections routes
/* istanbul ignore next */
cov_vtfu0vm5k().s[137]++;
router.get('/:id/reflections', async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[12]++;
  cov_vtfu0vm5k().s[138]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[139]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[42][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[42][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[140]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[43][0]++;
      cov_vtfu0vm5k().s[141]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[43][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[142]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[143]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[44][0]++;
      cov_vtfu0vm5k().s[144]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[44][1]++;
    }
    const reflections =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[145]++, await prisma.studentReflection.findMany({
      where: {
        studentId: Number(req.params.id)
      },
      // theme removed - ThematicUnit model archived
      orderBy: {
        createdAt: 'desc'
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[146]++;
    res.json(reflections);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[147]++;
    next(err);
  }
});
/* istanbul ignore next */
cov_vtfu0vm5k().s[148]++;
router.post('/:id/reflections', validate(studentReflectionCreateSchema), async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[13]++;
  cov_vtfu0vm5k().s[149]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[150]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[45][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[45][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[151]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[46][0]++;
      cov_vtfu0vm5k().s[152]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[46][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[153]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[154]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[47][0]++;
      cov_vtfu0vm5k().s[155]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[47][1]++;
    }
    const reflection =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[156]++, await prisma.studentReflection.create({
      data: {
        studentId: Number(req.params.id),
        content:
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[48][0]++, req.body.content) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[48][1]++, req.body.text) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[48][2]++, null),
        date: req.body.date ?
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[49][0]++, new Date(req.body.date)) :
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[49][1]++, new Date()),
        unitPlanId:
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[50][0]++, req.body.unitPlanId) ||
        /* istanbul ignore next */
        (cov_vtfu0vm5k().b[50][1]++, null)
      }
      // theme removed - ThematicUnit model archived
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[157]++;
    res.status(201).json(reflection);
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[158]++;
    next(err);
  }
});
/* istanbul ignore next */
cov_vtfu0vm5k().s[159]++;
router.delete('/:id/reflections/:reflectionId', async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[14]++;
  cov_vtfu0vm5k().s[160]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[161]++,
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[51][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[51][1]++, 0));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[162]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[52][0]++;
      cov_vtfu0vm5k().s[163]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[52][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[164]++, await prisma.student.findFirst({
      where: {
        id: Number(req.params.id),
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[165]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[53][0]++;
      cov_vtfu0vm5k().s[166]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[53][1]++;
    }
    cov_vtfu0vm5k().s[167]++;
    await prisma.studentReflection.delete({
      where: {
        id: Number(req.params.reflectionId),
        studentId: Number(req.params.id)
      }
    });
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[168]++;
    res.status(204).end();
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[169]++;
    if (
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[55][0]++, err instanceof Prisma.PrismaClientKnownRequestError) &&
    /* istanbul ignore next */
    (cov_vtfu0vm5k().b[55][1]++, err.code === 'P2025')) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[54][0]++;
      cov_vtfu0vm5k().s[170]++;
      return res.status(404).json({
        error: 'Reflection not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[54][1]++;
    }
    cov_vtfu0vm5k().s[171]++;
    next(err);
  }
});
// Get student progress summary
/* istanbul ignore next */
cov_vtfu0vm5k().s[172]++;
router.get('/:id/progress', auditLoggers.studentView, async (req, res, next) => {
  /* istanbul ignore next */
  cov_vtfu0vm5k().f[15]++;
  cov_vtfu0vm5k().s[173]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[174]++, req.user?.id);
    const studentId =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[175]++, parseInt(req.params.id));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[176]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[56][0]++;
      cov_vtfu0vm5k().s[177]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[56][1]++;
    }
    const student =
    /* istanbul ignore next */
    (cov_vtfu0vm5k().s[178]++, await prisma.student.findFirst({
      where: {
        id: studentId,
        userId: userId
      }
    }));
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[179]++;
    if (!student) {
      /* istanbul ignore next */
      cov_vtfu0vm5k().b[57][0]++;
      cov_vtfu0vm5k().s[180]++;
      return res.status(404).json({
        error: 'Student not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vtfu0vm5k().b[57][1]++;
    }
    // Assessment functionality removed
    cov_vtfu0vm5k().s[181]++;
    res.json({
      student,
      progress: {
        totalAssessments: 0,
        averageScore: null,
        assessmentsByType: {},
        artifactCount: await prisma.studentArtifact.count({
          where: {
            studentId
          }
        }),
        reflectionCount: await prisma.studentReflection.count({
          where: {
            studentId
          }
        })
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_vtfu0vm5k().s[182]++;
    next(err);
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,