{"version":3,"names":["cov_26lyq7q2wd","actualCoverage","cron","prisma","runProgressCheck","f","today","s","Date","soon","setDate","getDate","unitPlans","unitPlan","findMany","where","endDate","lte","include","lessonPlans","user","plan","incompleteLessons","filter","l","date","length","b","message","title","console","warn","scheduleProgressCheck","schedule"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/jobs/progressCheck.ts"],"sourcesContent":["import cron from 'node-cron';\nimport { prisma } from '../prisma';\n\n/**\n * Query unit plans that are due within the next week and notify the teacher\n * about any plans that need attention.\n *\n * A notification record is created for each unit plan found.\n */\nexport async function runProgressCheck() {\n  const today = new Date();\n  const soon = new Date();\n  soon.setDate(today.getDate() + 7);\n  const unitPlans = await prisma.unitPlan.findMany({\n    where: {\n      endDate: { lte: soon },\n    },\n    include: { lessonPlans: true, user: true },\n  });\n  for (const plan of unitPlans) {\n    const incompleteLessons = plan.lessonPlans.filter((l) => l.date > today).length;\n    if (incompleteLessons > 0) {\n      const message = `Unit Plan \"${plan.title}\" is ending soon with ${incompleteLessons} upcoming lessons`;\n      // DISABLED: Notification model has been archived\n      // TODO: Implement using ParentMessage or DaybookEntry for progress notifications\n      console.warn(`Progress check notification: ${message}`);\n    }\n  }\n}\n\n/**\n * Schedule the progress check to run every day at 6 AM server time.\n *\n * This sets up a cron job using `node-cron` so the periodic check continues\n * to run without manual intervention.\n */\nexport function scheduleProgressCheck() {\n  cron.schedule('0 6 * * *', runProgressCheck);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAhBL,OAAOE,IAAI,MAAM,WAAW;AAC5B,SAASC,MAAM,QAAQ,WAAW;AAElC;;;;;;AAMA,OAAO,eAAeC,gBAAgBA,CAAA;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EACpC,MAAMC,KAAK;EAAA;EAAA,CAAAN,cAAA,GAAAO,CAAA,OAAG,IAAIC,IAAI,EAAE;EACxB,MAAMC,IAAI;EAAA;EAAA,CAAAT,cAAA,GAAAO,CAAA,OAAG,IAAIC,IAAI,EAAE;EAAC;EAAAR,cAAA,GAAAO,CAAA;EACxBE,IAAI,CAACC,OAAO,CAACJ,KAAK,CAACK,OAAO,EAAE,GAAG,CAAC,CAAC;EACjC,MAAMC,SAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAO,CAAA,OAAG,MAAMJ,MAAM,CAACU,QAAQ,CAACC,QAAQ,CAAC;IAC/CC,KAAK,EAAE;MACLC,OAAO,EAAE;QAAEC,GAAG,EAAER;MAAI;KACrB;IACDS,OAAO,EAAE;MAAEC,WAAW,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAI;GACzC,CAAC;EAAC;EAAApB,cAAA,GAAAO,CAAA;EACH,KAAK,MAAMc,IAAI,IAAIT,SAAS,EAAE;IAC5B,MAAMU,iBAAiB;IAAA;IAAA,CAAAtB,cAAA,GAAAO,CAAA,OAAGc,IAAI,CAACF,WAAW,CAACI,MAAM,CAAEC,CAAC,IAAK;MAAA;MAAAxB,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAO,CAAA;MAAA,OAAAiB,CAAC,CAACC,IAAI,GAAGnB,KAAK;IAAL,CAAK,CAAC,CAACoB,MAAM;IAAC;IAAA1B,cAAA,GAAAO,CAAA;IAChF,IAAIe,iBAAiB,GAAG,CAAC,EAAE;MAAA;MAAAtB,cAAA,GAAA2B,CAAA;MACzB,MAAMC,OAAO;MAAA;MAAA,CAAA5B,cAAA,GAAAO,CAAA,OAAG,cAAcc,IAAI,CAACQ,KAAK,yBAAyBP,iBAAiB,mBAAmB;MACrG;MACA;MAAA;MAAAtB,cAAA,GAAAO,CAAA;MACAuB,OAAO,CAACC,IAAI,CAAC,gCAAgCH,OAAO,EAAE,CAAC;IACzD,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAA2B,CAAA;IAAA;EACH;AACF;AAEA;;;;;;AAMA,OAAM,SAAUK,qBAAqBA,CAAA;EAAA;EAAAhC,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAO,CAAA;EACnCL,IAAI,CAAC+B,QAAQ,CAAC,WAAW,EAAE7B,gBAAgB,CAAC;AAC9C","ignoreList":[]}