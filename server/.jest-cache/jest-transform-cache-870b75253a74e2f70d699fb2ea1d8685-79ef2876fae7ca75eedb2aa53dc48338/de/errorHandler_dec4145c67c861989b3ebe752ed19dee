172093f23c3006a33218f96ab169401d
import { Prisma } from '@prisma/client';
import logger from '../logger';
import { ZodError } from 'zod';
export class AppError extends Error {
    statusCode;
    code;
    isOperational;
    constructor(message, statusCode, code, isOperational = true) {
        super(message);
        this.statusCode = statusCode;
        this.code = code;
        this.isOperational = isOperational;
        Error.captureStackTrace(this, this.constructor);
    }
}
export const asyncHandler = (fn) => (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
};
export function errorHandler(err, req, res, _next) {
    let statusCode = 500;
    const response = {
        error: 'Internal Server Error',
        timestamp: new Date().toISOString(),
        path: req.path,
    };
    // Log the error
    logger.error({
        err,
        method: req.method,
        path: req.path,
        query: req.query,
        ip: req.ip,
        userId: req.user?.userId,
    }, 'Request error');
    // Handle known error types
    if (err instanceof AppError) {
        statusCode = err.statusCode;
        response.error = err.message;
        response.code = err.code;
    }
    else if (err instanceof Prisma.PrismaClientKnownRequestError) {
        // Handle Prisma errors
        switch (err.code) {
            case 'P2002':
                statusCode = 409;
                response.error = 'Duplicate entry';
                response.message = 'A record with this value already exists';
                response.code = 'DUPLICATE_ENTRY';
                break;
            case 'P2025':
                statusCode = 404;
                response.error = 'Record not found';
                response.message = 'The requested record does not exist';
                response.code = 'NOT_FOUND';
                break;
            case 'P2003':
                statusCode = 400;
                response.error = 'Foreign key constraint failed';
                response.message = 'Referenced record does not exist';
                response.code = 'FOREIGN_KEY_ERROR';
                break;
            case 'P2016':
                statusCode = 400;
                response.error = 'Query interpretation error';
                response.message = 'Invalid query parameters';
                response.code = 'INVALID_QUERY';
                break;
            default:
                statusCode = 400;
                response.error = 'Database operation failed';
                response.message = err.message;
                response.code = `PRISMA_${err.code}`;
        }
    }
    else if (err instanceof Prisma.PrismaClientValidationError) {
        statusCode = 400;
        response.error = 'Validation error';
        response.message = 'Invalid data provided';
        response.code = 'VALIDATION_ERROR';
        // Extract useful validation info if possible
        const validationMatch = err.message.match(/Argument (\w+): (.+)/);
        if (validationMatch) {
            response.details = {
                field: validationMatch[1],
                issue: validationMatch[2],
            };
        }
    }
    else if (err instanceof ZodError) {
        // Handle Zod validation errors
        statusCode = 400;
        response.error = 'Validation error';
        response.code = 'VALIDATION_ERROR';
        response.details = err.errors.map(e => ({
            field: e.path.join('.'),
            message: e.message,
        }));
    }
    else if (err.name === 'JsonWebTokenError') {
        statusCode = 401;
        response.error = 'Invalid token';
        response.code = 'INVALID_TOKEN';
    }
    else if (err.name === 'TokenExpiredError') {
        statusCode = 401;
        response.error = 'Token expired';
        response.code = 'TOKEN_EXPIRED';
    }
    else if (err.name === 'MulterError') {
        statusCode = 400;
        response.error = 'File upload error';
        response.message = err.message;
        response.code = 'FILE_UPLOAD_ERROR';
    }
    else if (err.message.includes('CORS')) {
        statusCode = 403;
        response.error = 'CORS error';
        response.message = 'Cross-origin request blocked';
        response.code = 'CORS_ERROR';
    }
    else {
        // Generic error handling
        response.error = process.env.NODE_ENV === 'production'
            ? 'An unexpected error occurred'
            : err.message;
        // Don't leak stack traces in production
        if (process.env.NODE_ENV !== 'production') {
            response.details = {
                stack: err.stack,
            };
        }
    }
    res.status(statusCode).json(response);
}
// Catch unhandled routes
export function notFoundHandler(req, res) {
    res.status(404).json({
        error: 'Not Found',
        message: `Cannot ${req.method} ${req.path}`,
        code: 'ROUTE_NOT_FOUND',
        timestamp: new Date().toISOString(),
    });
}
// Common error generators
export const errors = {
    unauthorized: () => new AppError('Unauthorized', 401, 'UNAUTHORIZED'),
    forbidden: () => new AppError('Forbidden', 403, 'FORBIDDEN'),
    notFound: (resource) => new AppError(`${resource} not found`, 404, 'NOT_FOUND'),
    badRequest: (message) => new AppError(message, 400, 'BAD_REQUEST'),
    conflict: (message) => new AppError(message, 409, 'CONFLICT'),
    tooManyRequests: () => new AppError('Too many requests', 429, 'RATE_LIMIT_EXCEEDED'),
    serverError: (message = 'Internal server error') => new AppError(message, 500, 'SERVER_ERROR'),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9taWRkbGV3YXJlL2Vycm9ySGFuZGxlci50cyIsIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxNQUFNLE1BQU0sV0FBVyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFXL0IsTUFBTSxPQUFPLFFBQVMsU0FBUSxLQUFLO0lBQ2pDLFVBQVUsQ0FBUztJQUNuQixJQUFJLENBQVM7SUFDYixhQUFhLENBQVU7SUFFdkIsWUFBWSxPQUFlLEVBQUUsVUFBa0IsRUFBRSxJQUFZLEVBQUUsYUFBYSxHQUFHLElBQUk7UUFDakYsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFbkMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBc0UsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtJQUMxSixPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVSxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsS0FBbUI7SUFDdkYsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLE1BQU0sUUFBUSxHQUFr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QUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7S0FDcEMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELDBCQUEwQjtBQUMxQixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDcEIsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsY0FBYyxDQUFDO0lBQ3JFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQztJQUM1RCxRQUFRLEVBQUUsQ0FBQyxRQUFnQixFQUFFLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLFFBQVEsWUFBWSxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUM7SUFDdkYsVUFBVSxFQUFFLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQztJQUMxRSxRQUFRLEVBQUUsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDO0lBQ3JFLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUUscUJBQXFCLENBQUM7SUFDcEYsV0FBVyxFQUFFLENBQUMsT0FBTyxHQUFHLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQztDQUMvRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvbWlkZGxld2FyZS9lcnJvckhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUHJpc21hIH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgWm9kRXJyb3IgfSBmcm9tICd6b2QnO1xuXG5pbnRlcmZhY2UgRXJyb3JSZXNwb25zZSB7XG4gIGVycm9yOiBzdHJpbmc7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIGNvZGU/OiBzdHJpbmc7XG4gIGRldGFpbHM/OiB1bmtub3duO1xuICB0aW1lc3RhbXA/OiBzdHJpbmc7XG4gIHBhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBBcHBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgc3RhdHVzQ29kZTogbnVtYmVyO1xuICBjb2RlOiBzdHJpbmc7XG4gIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIsIGNvZGU6IHN0cmluZywgaXNPcGVyYXRpb25hbCA9IHRydWUpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5pc09wZXJhdGlvbmFsID0gaXNPcGVyYXRpb25hbDtcbiAgICBcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXN5bmNIYW5kbGVyID0gKGZuOiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IFByb21pc2U8dm9pZD4pID0+IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICBQcm9taXNlLnJlc29sdmUoZm4ocmVxLCByZXMsIG5leHQpKS5jYXRjaChuZXh0KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvckhhbmRsZXIoZXJyOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBfbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gIGxldCBzdGF0dXNDb2RlID0gNTAwO1xuICBjb25zdCByZXNwb25zZTogRXJyb3JSZXNwb25zZSA9IHtcbiAgICBlcnJvcjogJ0ludGVybmFsIFNlcnZlciBFcnJvcicsXG4gICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgcGF0aDogcmVxLnBhdGgsXG4gIH07XG5cbiAgLy8gTG9nIHRoZSBlcnJvclxuICBsb2dnZXIuZXJyb3Ioe1xuICAgIGVycixcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgcGF0aDogcmVxLnBhdGgsXG4gICAgcXVlcnk6IHJlcS5xdWVyeSxcbiAgICBpcDogcmVxLmlwLFxuICAgIHVzZXJJZDogKHJlcSBhcyBSZXF1ZXN0ICYgeyB1c2VyPzogeyB1c2VySWQ/OiBzdHJpbmcgfSB9KS51c2VyPy51c2VySWQsXG4gIH0sICdSZXF1ZXN0IGVycm9yJyk7XG5cbiAgLy8gSGFuZGxlIGtub3duIGVycm9yIHR5cGVzXG4gIGlmIChlcnIgaW5zdGFuY2VvZiBBcHBFcnJvcikge1xuICAgIHN0YXR1c0NvZGUgPSBlcnIuc3RhdHVzQ29kZTtcbiAgICByZXNwb25zZS5lcnJvciA9IGVyci5tZXNzYWdlO1xuICAgIHJlc3BvbnNlLmNvZGUgPSBlcnIuY29kZTtcbiAgfSBlbHNlIGlmIChlcnIgaW5zdGFuY2VvZiBQcmlzbWEuUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3IpIHtcbiAgICAvLyBIYW5kbGUgUHJpc21hIGVycm9yc1xuICAgIHN3aXRjaCAoZXJyLmNvZGUpIHtcbiAgICAgIGNhc2UgJ1AyMDAyJzpcbiAgICAgICAgc3RhdHVzQ29kZSA9IDQwOTtcbiAgICAgICAgcmVzcG9uc2UuZXJyb3IgPSAnRHVwbGljYXRlIGVudHJ5JztcbiAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9ICdBIHJlY29yZCB3aXRoIHRoaXMgdmFsdWUgYWxyZWFkeSBleGlzdHMnO1xuICAgICAgICByZXNwb25zZS5jb2RlID0gJ0RVUExJQ0FURV9FTlRSWSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnUDIwMjUnOlxuICAgICAgICBzdGF0dXNDb2RlID0gNDA0O1xuICAgICAgICByZXNwb25zZS5lcnJvciA9ICdSZWNvcmQgbm90IGZvdW5kJztcbiAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9ICdUaGUgcmVxdWVzdGVkIHJlY29yZCBkb2VzIG5vdCBleGlzdCc7XG4gICAgICAgIHJlc3BvbnNlLmNvZGUgPSAnTk9UX0ZPVU5EJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdQMjAwMyc6XG4gICAgICAgIHN0YXR1c0NvZGUgPSA0MDA7XG4gICAgICAgIHJlc3BvbnNlLmVycm9yID0gJ0ZvcmVpZ24ga2V5IGNvbnN0cmFpbnQgZmFpbGVkJztcbiAgICAgICAgcmVzcG9uc2UubWVzc2FnZSA9ICdSZWZlcmVuY2VkIHJlY29yZCBkb2VzIG5vdCBleGlzdCc7XG4gICAgICAgIHJlc3BvbnNlLmNvZGUgPSAnRk9SRUlHTl9LRVlfRVJST1InO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1AyMDE2JzpcbiAgICAgICAgc3RhdHVzQ29kZSA9IDQwMDtcbiAgICAgICAgcmVzcG9uc2UuZXJyb3IgPSAnUXVlcnkgaW50ZXJwcmV0YXRpb24gZXJyb3InO1xuICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gJ0ludmFsaWQgcXVlcnkgcGFyYW1ldGVycyc7XG4gICAgICAgIHJlc3BvbnNlLmNvZGUgPSAnSU5WQUxJRF9RVUVSWSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3RhdHVzQ29kZSA9IDQwMDtcbiAgICAgICAgcmVzcG9uc2UuZXJyb3IgPSAnRGF0YWJhc2Ugb3BlcmF0aW9uIGZhaWxlZCc7XG4gICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgcmVzcG9uc2UuY29kZSA9IGBQUklTTUFfJHtlcnIuY29kZX1gO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlcnIgaW5zdGFuY2VvZiBQcmlzbWEuUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yKSB7XG4gICAgc3RhdHVzQ29kZSA9IDQwMDtcbiAgICByZXNwb25zZS5lcnJvciA9ICdWYWxpZGF0aW9uIGVycm9yJztcbiAgICByZXNwb25zZS5tZXNzYWdlID0gJ0ludmFsaWQgZGF0YSBwcm92aWRlZCc7XG4gICAgcmVzcG9uc2UuY29kZSA9ICdWQUxJREFUSU9OX0VSUk9SJztcbiAgICBcbiAgICAvLyBFeHRyYWN0IHVzZWZ1bCB2YWxpZGF0aW9uIGluZm8gaWYgcG9zc2libGVcbiAgICBjb25zdCB2YWxpZGF0aW9uTWF0Y2ggPSBlcnIubWVzc2FnZS5tYXRjaCgvQXJndW1lbnQgKFxcdyspOiAoLispLyk7XG4gICAgaWYgKHZhbGlkYXRpb25NYXRjaCkge1xuICAgICAgcmVzcG9uc2UuZGV0YWlscyA9IHtcbiAgICAgICAgZmllbGQ6IHZhbGlkYXRpb25NYXRjaFsxXSxcbiAgICAgICAgaXNzdWU6IHZhbGlkYXRpb25NYXRjaFsyXSxcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGVyciBpbnN0YW5jZW9mIFpvZEVycm9yKSB7XG4gICAgLy8gSGFuZGxlIFpvZCB2YWxpZGF0aW9uIGVycm9yc1xuICAgIHN0YXR1c0NvZGUgPSA0MDA7XG4gICAgcmVzcG9uc2UuZXJyb3IgPSAnVmFsaWRhdGlvbiBlcnJvcic7XG4gICAgcmVzcG9uc2UuY29kZSA9ICdWQUxJREFUSU9OX0VSUk9SJztcbiAgICByZXNwb25zZS5kZXRhaWxzID0gZXJyLmVycm9ycy5tYXAoZSA9PiAoe1xuICAgICAgZmllbGQ6IGUucGF0aC5qb2luKCcuJyksXG4gICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgfSkpO1xuICB9IGVsc2UgaWYgKGVyci5uYW1lID09PSAnSnNvbldlYlRva2VuRXJyb3InKSB7XG4gICAgc3RhdHVzQ29kZSA9IDQwMTtcbiAgICByZXNwb25zZS5lcnJvciA9ICdJbnZhbGlkIHRva2VuJztcbiAgICByZXNwb25zZS5jb2RlID0gJ0lOVkFMSURfVE9LRU4nO1xuICB9IGVsc2UgaWYgKGVyci5uYW1lID09PSAnVG9rZW5FeHBpcmVkRXJyb3InKSB7XG4gICAgc3RhdHVzQ29kZSA9IDQwMTtcbiAgICByZXNwb25zZS5lcnJvciA9ICdUb2tlbiBleHBpcmVkJztcbiAgICByZXNwb25zZS5jb2RlID0gJ1RPS0VOX0VYUElSRUQnO1xuICB9IGVsc2UgaWYgKGVyci5uYW1lID09PSAnTXVsdGVyRXJyb3InKSB7XG4gICAgc3RhdHVzQ29kZSA9IDQwMDtcbiAgICByZXNwb25zZS5lcnJvciA9ICdGaWxlIHVwbG9hZCBlcnJvcic7XG4gICAgcmVzcG9uc2UubWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuICAgIHJlc3BvbnNlLmNvZGUgPSAnRklMRV9VUExPQURfRVJST1InO1xuICB9IGVsc2UgaWYgKGVyci5tZXNzYWdlLmluY2x1ZGVzKCdDT1JTJykpIHtcbiAgICBzdGF0dXNDb2RlID0gNDAzO1xuICAgIHJlc3BvbnNlLmVycm9yID0gJ0NPUlMgZXJyb3InO1xuICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSAnQ3Jvc3Mtb3JpZ2luIHJlcXVlc3QgYmxvY2tlZCc7XG4gICAgcmVzcG9uc2UuY29kZSA9ICdDT1JTX0VSUk9SJztcbiAgfSBlbHNlIHtcbiAgICAvLyBHZW5lcmljIGVycm9yIGhhbmRsaW5nXG4gICAgcmVzcG9uc2UuZXJyb3IgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIFxuICAgICAgPyAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCcgXG4gICAgICA6IGVyci5tZXNzYWdlO1xuICAgIFxuICAgIC8vIERvbid0IGxlYWsgc3RhY2sgdHJhY2VzIGluIHByb2R1Y3Rpb25cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmVzcG9uc2UuZGV0YWlscyA9IHtcbiAgICAgICAgc3RhY2s6IGVyci5zdGFjayxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmVzLnN0YXR1cyhzdGF0dXNDb2RlKS5qc29uKHJlc3BvbnNlKTtcbn1cblxuLy8gQ2F0Y2ggdW5oYW5kbGVkIHJvdXRlc1xuZXhwb3J0IGZ1bmN0aW9uIG5vdEZvdW5kSGFuZGxlcihyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpIHtcbiAgcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgIGVycm9yOiAnTm90IEZvdW5kJyxcbiAgICBtZXNzYWdlOiBgQ2Fubm90ICR7cmVxLm1ldGhvZH0gJHtyZXEucGF0aH1gLFxuICAgIGNvZGU6ICdST1VURV9OT1RfRk9VTkQnLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9KTtcbn1cblxuLy8gQ29tbW9uIGVycm9yIGdlbmVyYXRvcnNcbmV4cG9ydCBjb25zdCBlcnJvcnMgPSB7XG4gIHVuYXV0aG9yaXplZDogKCkgPT4gbmV3IEFwcEVycm9yKCdVbmF1dGhvcml6ZWQnLCA0MDEsICdVTkFVVEhPUklaRUQnKSxcbiAgZm9yYmlkZGVuOiAoKSA9PiBuZXcgQXBwRXJyb3IoJ0ZvcmJpZGRlbicsIDQwMywgJ0ZPUkJJRERFTicpLFxuICBub3RGb3VuZDogKHJlc291cmNlOiBzdHJpbmcpID0+IG5ldyBBcHBFcnJvcihgJHtyZXNvdXJjZX0gbm90IGZvdW5kYCwgNDA0LCAnTk9UX0ZPVU5EJyksXG4gIGJhZFJlcXVlc3Q6IChtZXNzYWdlOiBzdHJpbmcpID0+IG5ldyBBcHBFcnJvcihtZXNzYWdlLCA0MDAsICdCQURfUkVRVUVTVCcpLFxuICBjb25mbGljdDogKG1lc3NhZ2U6IHN0cmluZykgPT4gbmV3IEFwcEVycm9yKG1lc3NhZ2UsIDQwOSwgJ0NPTkZMSUNUJyksXG4gIHRvb01hbnlSZXF1ZXN0czogKCkgPT4gbmV3IEFwcEVycm9yKCdUb28gbWFueSByZXF1ZXN0cycsIDQyOSwgJ1JBVEVfTElNSVRfRVhDRUVERUQnKSxcbiAgc2VydmVyRXJyb3I6IChtZXNzYWdlID0gJ0ludGVybmFsIHNlcnZlciBlcnJvcicpID0+IG5ldyBBcHBFcnJvcihtZXNzYWdlLCA1MDAsICdTRVJWRVJfRVJST1InKSxcbn07Il0sInZlcnNpb24iOjN9