{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/helpers/emailTestHelper.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/helpers/emailTestHelper.ts"],"sourcesContent":["import { randomBytes } from 'crypto';\n\nexport interface TestEmailProvider {\n  host: string;\n  port: number;\n  user?: string;\n  pass?: string;\n  getEmails(): Promise<EmailMessage[]>;\n  clearEmails(): Promise<void>;\n  waitForEmail(to: string, timeout?: number): Promise<EmailMessage>;\n}\n\nexport interface EmailMessage {\n  id: string;\n  from: string;\n  to: string[];\n  subject: string;\n  text: string;\n  html?: string;\n  attachments?: Array<{\n    filename: string;\n    content: Buffer;\n    contentType: string;\n  }>;\n  createdAt: Date;\n}\n\nexport class MailHogTestProvider implements TestEmailProvider {\n  host = 'localhost';\n  port = 1025; // SMTP port\n  private httpPort = 8025; // HTTP API port\n\n  async getEmails(): Promise<EmailMessage[]> {\n    try {\n      const response = await fetch(`http://localhost:${this.httpPort}/api/v2/messages`);\n      if (!response.ok) {\n        throw new Error(`MailHog API responded with ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return data.items?.map(this.parseMailHogMessage) || [];\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('ECONNREFUSED')) {\n        throw new Error('MailHog server not running. Start with: docker run -p 1025:1025 -p 8025:8025 mailhog/mailhog');\n      }\n      throw error;\n    }\n  }\n\n  async clearEmails(): Promise<void> {\n    try {\n      const response = await fetch(`http://localhost:${this.httpPort}/api/v1/messages`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to clear emails: ${response.status}`);\n      }\n    } catch (error) {\n      console.warn('Failed to clear MailHog emails:', error);\n    }\n  }\n\n  async waitForEmail(to: string, timeout = 10000): Promise<EmailMessage> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      const emails = await this.getEmails();\n      const targetEmail = emails.find(email => \n        email.to.some(recipient => recipient.toLowerCase() === to.toLowerCase())\n      );\n      \n      if (targetEmail) {\n        return targetEmail;\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    \n    throw new Error(`No email received for ${to} within ${timeout}ms`);\n  }\n\n  private parseMailHogMessage(msg: { ID: string; Content: { Headers: Record<string, string[]>; Body: string; MIME?: { Parts: unknown[] } }; Created: string }): EmailMessage {\n    const content = msg.Content;\n    const headers = content.Headers;\n    \n    return {\n      id: msg.ID,\n      from: this.parseEmailAddress(headers.From?.[0] || ''),\n      to: (headers.To || []).map(this.parseEmailAddress),\n      subject: headers.Subject?.[0] || '',\n      text: content.Body || '',\n      html: content.MIME?.Parts?.find((part: unknown) => (part as { Headers: Record<string, string[]> }).Headers['Content-Type']?.[0]?.includes('text/html'))?.Body,\n      attachments: this.parseAttachments(content.MIME?.Parts || []),\n      createdAt: new Date(msg.Created),\n    };\n  }\n\n  private parseEmailAddress(addr: string): string {\n    // Extract email from \"Name <email@domain.com>\" format\n    const match = addr.match(/<([^>]+)>/);\n    return match ? match[1] : addr;\n  }\n\n  private parseAttachments(parts: { Headers: Record<string, string[]>; Body: string }[]): EmailMessage['attachments'] {\n    return parts\n      .filter(part => part.Headers['Content-Disposition']?.[0]?.includes('attachment'))\n      .map(part => ({\n        filename: this.extractFilename(part.Headers['Content-Disposition'][0]),\n        content: Buffer.from(part.Body, 'base64'),\n        contentType: part.Headers['Content-Type']?.[0] || 'application/octet-stream',\n      }));\n  }\n\n  private extractFilename(contentDisposition: string): string {\n    const match = contentDisposition.match(/filename=\"([^\"]+)\"/);\n    return match ? match[1] : 'attachment';\n  }\n}\n\n// In-memory test provider for CI environments\nexport class InMemoryTestProvider implements TestEmailProvider {\n  host = 'localhost';\n  port = 587;\n  private emails: EmailMessage[] = [];\n\n  async getEmails(): Promise<EmailMessage[]> {\n    return [...this.emails];\n  }\n\n  async clearEmails(): Promise<void> {\n    this.emails = [];\n  }\n\n  async waitForEmail(to: string, timeout = 5000): Promise<EmailMessage> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      const targetEmail = this.emails.find(email => \n        email.to.some(recipient => recipient.toLowerCase() === to.toLowerCase())\n      );\n      \n      if (targetEmail) {\n        return targetEmail;\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    throw new Error(`No email received for ${to} within ${timeout}ms`);\n  }\n\n  // This method would be called by a mock email service\n  addEmail(email: Omit<EmailMessage, 'id' | 'createdAt'>): void {\n    this.emails.push({\n      ...email,\n      id: randomBytes(8).toString('hex'),\n      createdAt: new Date(),\n    });\n  }\n}\n\n// Factory function to create appropriate test provider\nexport function createEmailTestProvider(): TestEmailProvider {\n  // Always use in-memory provider for tests\n  if (process.env.NODE_ENV === 'test') {\n    return new InMemoryTestProvider();\n  }\n  // Use MailHog only in development when explicitly enabled\n  if (process.env.USE_MAILHOG === 'true') {\n    return new MailHogTestProvider();\n  }\n  return new InMemoryTestProvider();\n}\n\n// Utility functions for email testing\nexport function generateTestEmail(domain = 'test.example.com'): string {\n  const id = randomBytes(4).toString('hex');\n  return `test-${id}@${domain}`;\n}\n\nexport function expectEmailContent(email: EmailMessage, expectedContent: Partial<EmailMessage>): void {\n  if (expectedContent.subject) {\n    expect(email.subject).toContain(expectedContent.subject);\n  }\n  if (expectedContent.text) {\n    expect(email.text).toContain(expectedContent.text);\n  }\n  if (expectedContent.html) {\n    expect(email.html).toContain(expectedContent.html);\n  }\n  if (expectedContent.from) {\n    expect(email.from).toBe(expectedContent.from);\n  }\n  if (expectedContent.to) {\n    expectedContent.to.forEach(recipient => {\n      expect(email.to).toContain(recipient);\n    });\n  }\n}"],"version":3}