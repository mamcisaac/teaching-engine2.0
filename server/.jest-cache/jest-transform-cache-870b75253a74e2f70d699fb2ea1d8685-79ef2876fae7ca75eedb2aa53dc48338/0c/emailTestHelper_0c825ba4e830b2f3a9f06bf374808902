e888aba25f219bad2e42a9d3a599f911
import { randomBytes } from 'crypto';
export class MailHogTestProvider {
    host = 'localhost';
    port = 1025; // SMTP port
    httpPort = 8025; // HTTP API port
    async getEmails() {
        try {
            const response = await fetch(`http://localhost:${this.httpPort}/api/v2/messages`);
            if (!response.ok) {
                throw new Error(`MailHog API responded with ${response.status}`);
            }
            const data = await response.json();
            return data.items?.map(this.parseMailHogMessage) || [];
        }
        catch (error) {
            if (error instanceof Error && error.message.includes('ECONNREFUSED')) {
                throw new Error('MailHog server not running. Start with: docker run -p 1025:1025 -p 8025:8025 mailhog/mailhog');
            }
            throw error;
        }
    }
    async clearEmails() {
        try {
            const response = await fetch(`http://localhost:${this.httpPort}/api/v1/messages`, {
                method: 'DELETE',
            });
            if (!response.ok) {
                throw new Error(`Failed to clear emails: ${response.status}`);
            }
        }
        catch (error) {
            console.warn('Failed to clear MailHog emails:', error);
        }
    }
    async waitForEmail(to, timeout = 10000) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            const emails = await this.getEmails();
            const targetEmail = emails.find(email => email.to.some(recipient => recipient.toLowerCase() === to.toLowerCase()));
            if (targetEmail) {
                return targetEmail;
            }
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        throw new Error(`No email received for ${to} within ${timeout}ms`);
    }
    parseMailHogMessage(msg) {
        const content = msg.Content;
        const headers = content.Headers;
        return {
            id: msg.ID,
            from: this.parseEmailAddress(headers.From?.[0] || ''),
            to: (headers.To || []).map(this.parseEmailAddress),
            subject: headers.Subject?.[0] || '',
            text: content.Body || '',
            html: content.MIME?.Parts?.find((part) => part.Headers['Content-Type']?.[0]?.includes('text/html'))?.Body,
            attachments: this.parseAttachments(content.MIME?.Parts || []),
            createdAt: new Date(msg.Created),
        };
    }
    parseEmailAddress(addr) {
        // Extract email from "Name <email@domain.com>" format
        const match = addr.match(/<([^>]+)>/);
        return match ? match[1] : addr;
    }
    parseAttachments(parts) {
        return parts
            .filter(part => part.Headers['Content-Disposition']?.[0]?.includes('attachment'))
            .map(part => ({
            filename: this.extractFilename(part.Headers['Content-Disposition'][0]),
            content: Buffer.from(part.Body, 'base64'),
            contentType: part.Headers['Content-Type']?.[0] || 'application/octet-stream',
        }));
    }
    extractFilename(contentDisposition) {
        const match = contentDisposition.match(/filename="([^"]+)"/);
        return match ? match[1] : 'attachment';
    }
}
// In-memory test provider for CI environments
export class InMemoryTestProvider {
    host = 'localhost';
    port = 587;
    emails = [];
    async getEmails() {
        return [...this.emails];
    }
    async clearEmails() {
        this.emails = [];
    }
    async waitForEmail(to, timeout = 5000) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            const targetEmail = this.emails.find(email => email.to.some(recipient => recipient.toLowerCase() === to.toLowerCase()));
            if (targetEmail) {
                return targetEmail;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        throw new Error(`No email received for ${to} within ${timeout}ms`);
    }
    // This method would be called by a mock email service
    addEmail(email) {
        this.emails.push({
            ...email,
            id: randomBytes(8).toString('hex'),
            createdAt: new Date(),
        });
    }
}
// Factory function to create appropriate test provider
export function createEmailTestProvider() {
    // Always use in-memory provider for tests
    if (process.env.NODE_ENV === 'test') {
        return new InMemoryTestProvider();
    }
    // Use MailHog only in development when explicitly enabled
    if (process.env.USE_MAILHOG === 'true') {
        return new MailHogTestProvider();
    }
    return new InMemoryTestProvider();
}
// Utility functions for email testing
export function generateTestEmail(domain = 'test.example.com') {
    const id = randomBytes(4).toString('hex');
    return `test-${id}@${domain}`;
}
export function expectEmailContent(email, expectedContent) {
    if (expectedContent.subject) {
        expect(email.subject).toContain(expectedContent.subject);
    }
    if (expectedContent.text) {
        expect(email.text).toContain(expectedContent.text);
    }
    if (expectedContent.html) {
        expect(email.html).toContain(expectedContent.html);
    }
    if (expectedContent.from) {
        expect(email.from).toBe(expectedContent.from);
    }
    if (expectedContent.to) {
        expectedContent.to.forEach(recipient => {
            expect(email.to).toContain(recipient);
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,