c14b07fd9c36f2c35af7579dd077461a
/* istanbul ignore next */
function cov_1fm4operzq() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/schemaFactory.ts";
  var hash = "99bc4588b57debe5d0d8d569013676c00d607035";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/schemaFactory.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 48
        }
      },
      "1": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 9,
          column: 5
        }
      },
      "2": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 57
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 57
        }
      },
      "7": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 18
        }
      },
      "8": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 7
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 92
        }
      },
      "11": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "12": {
        start: {
          line: 33,
          column: 32
        },
        end: {
          line: 85,
          column: 1
        }
      },
      "13": {
        start: {
          line: 36,
          column: 21
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 38,
          column: 45
        }
      },
      "15": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 45
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 40,
          column: 45
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 45
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 65
        }
      },
      "19": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 66
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 47,
          column: 45
        }
      },
      "21": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 45
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 49,
          column: 45
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 45
        }
      },
      "24": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 65
        }
      },
      "25": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 80
        }
      },
      "26": {
        start: {
          line: 57,
          column: 37
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "27": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "28": {
        start: {
          line: 66,
          column: 32
        },
        end: {
          line: 66,
          column: 45
        }
      },
      "29": {
        start: {
          line: 70,
          column: 21
        },
        end: {
          line: 70,
          column: 31
        }
      },
      "30": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 72,
          column: 45
        }
      },
      "31": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 45
        }
      },
      "32": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 74,
          column: 45
        }
      },
      "33": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 45
        }
      },
      "34": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 39
        }
      },
      "35": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "36": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "37": {
        start: {
          line: 90,
          column: 19
        },
        end: {
          line: 90,
          column: 79
        }
      },
      "38": {
        start: {
          line: 90,
          column: 52
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "39": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 28
        }
      },
      "40": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 120,
          column: 7
        }
      },
      "41": {
        start: {
          line: 104,
          column: 21
        },
        end: {
          line: 104,
          column: 36
        }
      },
      "42": {
        start: {
          line: 105,
          column: 19
        },
        end: {
          line: 105,
          column: 41
        }
      },
      "43": {
        start: {
          line: 106,
          column: 19
        },
        end: {
          line: 106,
          column: 41
        }
      },
      "44": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "45": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 40
        }
      },
      "46": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 40
        }
      },
      "48": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "createBilingualSchema",
        decl: {
          start: {
            line: 5,
            column: 16
          },
          end: {
            line: 5,
            column: 37
          }
        },
        loc: {
          start: {
            line: 5,
            column: 75
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "createBilingualObjectSchema",
        decl: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 43
          }
        },
        loc: {
          start: {
            line: 23,
            column: 66
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 36
          }
        },
        loc: {
          start: {
            line: 25,
            column: 65
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        loc: {
          start: {
            line: 35,
            column: 36
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 44,
            column: 21
          }
        },
        loc: {
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 53,
            column: 10
          },
          end: {
            line: 53,
            column: 11
          }
        },
        loc: {
          start: {
            line: 53,
            column: 34
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 53
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 57,
            column: 11
          },
          end: {
            line: 57,
            column: 12
          }
        },
        loc: {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 57
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 61,
            column: 10
          },
          end: {
            line: 61,
            column: 11
          }
        },
        loc: {
          start: {
            line: 61,
            column: 26
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 61
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 66,
            column: 23
          },
          end: {
            line: 66,
            column: 24
          }
        },
        loc: {
          start: {
            line: 66,
            column: 32
          },
          end: {
            line: 66,
            column: 45
          }
        },
        line: 66
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        loc: {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 69
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 78,
            column: 13
          },
          end: {
            line: 78,
            column: 14
          }
        },
        loc: {
          start: {
            line: 78,
            column: 29
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 78
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 82,
            column: 10
          },
          end: {
            line: 82,
            column: 11
          }
        },
        loc: {
          start: {
            line: 82,
            column: 34
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 82
      },
      "12": {
        name: "mergeSchemas",
        decl: {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 89,
            column: 28
          }
        },
        loc: {
          start: {
            line: 89,
            column: 41
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 89
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 90,
            column: 34
          },
          end: {
            line: 90,
            column: 35
          }
        },
        loc: {
          start: {
            line: 90,
            column: 52
          },
          end: {
            line: 90,
            column: 73
          }
        },
        line: 90
      },
      "14": {
        name: "createBilingualValidation",
        decl: {
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 96,
            column: 41
          }
        },
        loc: {
          start: {
            line: 96,
            column: 62
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 96
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        },
        loc: {
          start: {
            line: 103,
            column: 26
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 103
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 61
          },
          end: {
            line: 5,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 5,
            column: 71
          },
          end: {
            line: 5,
            column: 73
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 6,
            column: 12
          },
          end: {
            line: 6,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 6,
            column: 31
          },
          end: {
            line: 6,
            column: 36
          }
        }],
        line: 6
      },
      "2": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 10
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 52
          },
          end: {
            line: 23,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 62
          },
          end: {
            line: 23,
            column: 64
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 38,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 38,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 40,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 40,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 49,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 49,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 57,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 24
          },
          end: {
            line: 57,
            column: 31
          }
        }],
        line: 57
      },
      "9": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 72,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 72,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "10": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 26
          }
        }, {
          start: {
            line: 108,
            column: 30
          },
          end: {
            line: 108,
            column: 32
          }
        }, {
          start: {
            line: 108,
            column: 36
          },
          end: {
            line: 108,
            column: 38
          }
        }],
        line: 108
      },
      "13": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "14": {
        loc: {
          start: {
            line: 111,
            column: 22
          },
          end: {
            line: 111,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 22
          },
          end: {
            line: 111,
            column: 26
          }
        }, {
          start: {
            line: 111,
            column: 30
          },
          end: {
            line: 111,
            column: 32
          }
        }, {
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 111,
            column: 38
          }
        }],
        line: 111
      },
      "15": {
        loc: {
          start: {
            line: 115,
            column: 17
          },
          end: {
            line: 119,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 14
          },
          end: {
            line: 116,
            column: 57
          }
        }, {
          start: {
            line: 117,
            column: 14
          },
          end: {
            line: 119,
            column: 27
          }
        }],
        line: 115
      },
      "16": {
        loc: {
          start: {
            line: 117,
            column: 14
          },
          end: {
            line: 119,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 18
          },
          end: {
            line: 118,
            column: 68
          }
        }, {
          start: {
            line: 119,
            column: 18
          },
          end: {
            line: 119,
            column: 27
          }
        }],
        line: 117
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/schemaFactory.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/schemaFactory.ts"],
      sourcesContent: ["import { z } from 'zod';\n\nexport interface BilingualField {\n  base: string;\n  en?: string;\n  fr?: string;\n}\n\nexport interface BilingualSchemaOptions {\n  requireBilingual?: boolean;\n  defaultLanguage?: 'en' | 'fr';\n}\n\n/**\n * Creates a bilingual schema for a field that has base, English, and French versions\n */\nexport function createBilingualSchema(\n  fieldName: string,\n  baseSchema: z.ZodTypeAny,\n  options: BilingualSchemaOptions = {},\n) {\n  const { requireBilingual = false } = options;\n\n  const schema: Record<string, z.ZodTypeAny> = {\n    [fieldName]: baseSchema,\n  };\n\n  if (requireBilingual) {\n    schema[`${fieldName}En`] = baseSchema;\n    schema[`${fieldName}Fr`] = baseSchema;\n  } else {\n    schema[`${fieldName}En`] = baseSchema.optional();\n    schema[`${fieldName}Fr`] = baseSchema.optional();\n  }\n\n  return schema;\n}\n\n/**\n * Creates a bilingual object schema with multiple fields\n */\nexport function createBilingualObjectSchema<T extends Record<string, z.ZodTypeAny>>(\n  fields: T,\n  options: BilingualSchemaOptions = {},\n): z.ZodObject<T & Record<string, z.ZodTypeAny>> {\n  const schemaFields: Record<string, z.ZodTypeAny> = {};\n\n  Object.entries(fields).forEach(([fieldName, fieldSchema]) => {\n    Object.assign(schemaFields, createBilingualSchema(fieldName, fieldSchema, options));\n  });\n\n  return z.object(schemaFields) as z.ZodObject<T & Record<string, z.ZodTypeAny>>;\n}\n\n/**\n * Helper to create common bilingual schemas\n */\nexport const bilingualSchemas = {\n  // String field with bilingual support\n  string: (\n    fieldName: string,\n    options?: BilingualSchemaOptions & { min?: number; max?: number },\n  ) => {\n    let schema = z.string();\n    if (options?.min) schema = schema.min(options.min);\n    if (options?.max) schema = schema.max(options.max);\n    return createBilingualSchema(fieldName, schema, options);\n  },\n\n  // Required string with bilingual support\n  requiredString: (\n    fieldName: string,\n    options?: BilingualSchemaOptions & { min?: number; max?: number },\n  ) => {\n    let schema = z.string().min(1, `${fieldName} is required`);\n    if (options?.min) schema = schema.min(options.min);\n    if (options?.max) schema = schema.max(options.max);\n    return createBilingualSchema(fieldName, schema, options);\n  },\n\n  // Optional text field with bilingual support\n  text: (fieldName: string, options?: BilingualSchemaOptions) => {\n    return createBilingualSchema(fieldName, z.string().optional(), options);\n  },\n\n  // Email field (usually not bilingual, but included for completeness)\n  email: (fieldName: string = 'email') => ({\n    [fieldName]: z.string().email('Invalid email address'),\n  }),\n\n  // Date field\n  date: (fieldName: string) => ({\n    [fieldName]: z\n      .string()\n      .datetime()\n      .or(z.date())\n      .transform((val) => new Date(val)),\n  }),\n\n  // Number field\n  number: (fieldName: string, options?: { min?: number; max?: number }) => {\n    let schema = z.number();\n    if (options?.min !== undefined) schema = schema.min(options.min);\n    if (options?.max !== undefined) schema = schema.max(options.max);\n    return { [fieldName]: schema };\n  },\n\n  // Boolean field\n  boolean: (fieldName: string) => ({\n    [fieldName]: z.boolean(),\n  }),\n\n  // Enum field\n  enum: <T extends readonly [string, ...string[]]>(fieldName: string, values: T) => ({\n    [fieldName]: z.enum(values),\n  }),\n};\n\n/**\n * Merges multiple schema objects into one\n */\nexport function mergeSchemas(\n  ...schemas: Record<string, z.ZodTypeAny>[]\n): z.ZodObject<Record<string, z.ZodTypeAny>> {\n  const merged = schemas.reduce((acc, schema) => ({ ...acc, ...schema }), {});\n  return z.object(merged);\n}\n\n/**\n * Creates a schema that validates bilingual data consistency\n */\nexport function createBilingualValidation(\n  fieldName: string,\n  options?: {\n    requireAtLeastOne?: boolean;\n    requireAll?: boolean;\n  },\n) {\n  return z\n    .object({\n      [fieldName]: z.string().optional(),\n      [`${fieldName}En`]: z.string().optional(),\n      [`${fieldName}Fr`]: z.string().optional(),\n    })\n    .refine(\n      (data) => {\n        const base = data[fieldName];\n        const en = data[`${fieldName}En`];\n        const fr = data[`${fieldName}Fr`];\n\n        if (options?.requireAll) {\n          return !!(base && en && fr);\n        }\n\n        if (options?.requireAtLeastOne) {\n          return !!(base || en || fr);\n        }\n\n        return true;\n      },\n      {\n        message: options?.requireAll\n          ? `All versions of ${fieldName} are required`\n          : options?.requireAtLeastOne\n            ? `At least one version of ${fieldName} is required`\n            : undefined,\n      },\n    );\n}\n\n/**\n * Example usage:\n *\n * const subjectSchema = mergeSchemas(\n *   bilingualSchemas.requiredString('name'),\n *   bilingualSchemas.text('description'),\n *   bilingualSchemas.number('estHours', { min: 0 }),\n *   bilingualSchemas.date('targetDate')\n * );\n *\n * // Or with custom validation:\n * const activitySchema = createBilingualObjectSchema({\n *   title: z.string().min(1).max(100),\n *   description: z.string().optional(),\n *   duration: z.number().min(0).max(480),\n * });\n */\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "99bc4588b57debe5d0d8d569013676c00d607035"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fm4operzq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fm4operzq();
import { z } from 'zod';
/**
 * Creates a bilingual schema for a field that has base, English, and French versions
 */
export function createBilingualSchema(fieldName, baseSchema, options =
/* istanbul ignore next */
(cov_1fm4operzq().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_1fm4operzq().f[0]++;
  const {
    requireBilingual =
    /* istanbul ignore next */
    (cov_1fm4operzq().b[1][0]++, false)
  } =
  /* istanbul ignore next */
  (cov_1fm4operzq().s[0]++, options);
  const schema =
  /* istanbul ignore next */
  (cov_1fm4operzq().s[1]++, {
    [fieldName]: baseSchema
  });
  /* istanbul ignore next */
  cov_1fm4operzq().s[2]++;
  if (requireBilingual) {
    /* istanbul ignore next */
    cov_1fm4operzq().b[2][0]++;
    cov_1fm4operzq().s[3]++;
    schema[`${fieldName}En`] = baseSchema;
    /* istanbul ignore next */
    cov_1fm4operzq().s[4]++;
    schema[`${fieldName}Fr`] = baseSchema;
  } else {
    /* istanbul ignore next */
    cov_1fm4operzq().b[2][1]++;
    cov_1fm4operzq().s[5]++;
    schema[`${fieldName}En`] = baseSchema.optional();
    /* istanbul ignore next */
    cov_1fm4operzq().s[6]++;
    schema[`${fieldName}Fr`] = baseSchema.optional();
  }
  /* istanbul ignore next */
  cov_1fm4operzq().s[7]++;
  return schema;
}
/**
 * Creates a bilingual object schema with multiple fields
 */
export function createBilingualObjectSchema(fields, options =
/* istanbul ignore next */
(cov_1fm4operzq().b[3][0]++, {})) {
  /* istanbul ignore next */
  cov_1fm4operzq().f[1]++;
  const schemaFields =
  /* istanbul ignore next */
  (cov_1fm4operzq().s[8]++, {});
  /* istanbul ignore next */
  cov_1fm4operzq().s[9]++;
  Object.entries(fields).forEach(([fieldName, fieldSchema]) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[2]++;
    cov_1fm4operzq().s[10]++;
    Object.assign(schemaFields, createBilingualSchema(fieldName, fieldSchema, options));
  });
  /* istanbul ignore next */
  cov_1fm4operzq().s[11]++;
  return z.object(schemaFields);
}
/**
 * Helper to create common bilingual schemas
 */
export const bilingualSchemas =
/* istanbul ignore next */
(cov_1fm4operzq().s[12]++, {
  // String field with bilingual support
  string: (fieldName, options) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[3]++;
    let schema =
    /* istanbul ignore next */
    (cov_1fm4operzq().s[13]++, z.string());
    /* istanbul ignore next */
    cov_1fm4operzq().s[14]++;
    if (options?.min) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[4][0]++;
      cov_1fm4operzq().s[15]++;
      schema = schema.min(options.min);
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[4][1]++;
    }
    cov_1fm4operzq().s[16]++;
    if (options?.max) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[5][0]++;
      cov_1fm4operzq().s[17]++;
      schema = schema.max(options.max);
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[5][1]++;
    }
    cov_1fm4operzq().s[18]++;
    return createBilingualSchema(fieldName, schema, options);
  },
  // Required string with bilingual support
  requiredString: (fieldName, options) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[4]++;
    let schema =
    /* istanbul ignore next */
    (cov_1fm4operzq().s[19]++, z.string().min(1, `${fieldName} is required`));
    /* istanbul ignore next */
    cov_1fm4operzq().s[20]++;
    if (options?.min) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[6][0]++;
      cov_1fm4operzq().s[21]++;
      schema = schema.min(options.min);
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[6][1]++;
    }
    cov_1fm4operzq().s[22]++;
    if (options?.max) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[7][0]++;
      cov_1fm4operzq().s[23]++;
      schema = schema.max(options.max);
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[7][1]++;
    }
    cov_1fm4operzq().s[24]++;
    return createBilingualSchema(fieldName, schema, options);
  },
  // Optional text field with bilingual support
  text: (fieldName, options) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[5]++;
    cov_1fm4operzq().s[25]++;
    return createBilingualSchema(fieldName, z.string().optional(), options);
  },
  // Email field (usually not bilingual, but included for completeness)
  email: (fieldName =
  /* istanbul ignore next */
  (cov_1fm4operzq().b[8][0]++, 'email')) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[6]++;
    cov_1fm4operzq().s[26]++;
    return {
      [fieldName]: z.string().email('Invalid email address')
    };
  },
  // Date field
  date: fieldName => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[7]++;
    cov_1fm4operzq().s[27]++;
    return {
      [fieldName]: z.string().datetime().or(z.date()).transform(val => {
        /* istanbul ignore next */
        cov_1fm4operzq().f[8]++;
        cov_1fm4operzq().s[28]++;
        return new Date(val);
      })
    };
  },
  // Number field
  number: (fieldName, options) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[9]++;
    let schema =
    /* istanbul ignore next */
    (cov_1fm4operzq().s[29]++, z.number());
    /* istanbul ignore next */
    cov_1fm4operzq().s[30]++;
    if (options?.min !== undefined) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[9][0]++;
      cov_1fm4operzq().s[31]++;
      schema = schema.min(options.min);
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[9][1]++;
    }
    cov_1fm4operzq().s[32]++;
    if (options?.max !== undefined) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[10][0]++;
      cov_1fm4operzq().s[33]++;
      schema = schema.max(options.max);
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[10][1]++;
    }
    cov_1fm4operzq().s[34]++;
    return {
      [fieldName]: schema
    };
  },
  // Boolean field
  boolean: fieldName => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[10]++;
    cov_1fm4operzq().s[35]++;
    return {
      [fieldName]: z.boolean()
    };
  },
  // Enum field
  enum: (fieldName, values) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[11]++;
    cov_1fm4operzq().s[36]++;
    return {
      [fieldName]: z.enum(values)
    };
  }
});
/**
 * Merges multiple schema objects into one
 */
export function mergeSchemas(...schemas) {
  /* istanbul ignore next */
  cov_1fm4operzq().f[12]++;
  const merged =
  /* istanbul ignore next */
  (cov_1fm4operzq().s[37]++, schemas.reduce((acc, schema) => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[13]++;
    cov_1fm4operzq().s[38]++;
    return {
      ...acc,
      ...schema
    };
  }, {}));
  /* istanbul ignore next */
  cov_1fm4operzq().s[39]++;
  return z.object(merged);
}
/**
 * Creates a schema that validates bilingual data consistency
 */
export function createBilingualValidation(fieldName, options) {
  /* istanbul ignore next */
  cov_1fm4operzq().f[14]++;
  cov_1fm4operzq().s[40]++;
  return z.object({
    [fieldName]: z.string().optional(),
    [`${fieldName}En`]: z.string().optional(),
    [`${fieldName}Fr`]: z.string().optional()
  }).refine(data => {
    /* istanbul ignore next */
    cov_1fm4operzq().f[15]++;
    const base =
    /* istanbul ignore next */
    (cov_1fm4operzq().s[41]++, data[fieldName]);
    const en =
    /* istanbul ignore next */
    (cov_1fm4operzq().s[42]++, data[`${fieldName}En`]);
    const fr =
    /* istanbul ignore next */
    (cov_1fm4operzq().s[43]++, data[`${fieldName}Fr`]);
    /* istanbul ignore next */
    cov_1fm4operzq().s[44]++;
    if (options?.requireAll) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[11][0]++;
      cov_1fm4operzq().s[45]++;
      return !!(
      /* istanbul ignore next */
      (cov_1fm4operzq().b[12][0]++, base) &&
      /* istanbul ignore next */
      (cov_1fm4operzq().b[12][1]++, en) &&
      /* istanbul ignore next */
      (cov_1fm4operzq().b[12][2]++, fr));
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[11][1]++;
    }
    cov_1fm4operzq().s[46]++;
    if (options?.requireAtLeastOne) {
      /* istanbul ignore next */
      cov_1fm4operzq().b[13][0]++;
      cov_1fm4operzq().s[47]++;
      return !!(
      /* istanbul ignore next */
      (cov_1fm4operzq().b[14][0]++, base) ||
      /* istanbul ignore next */
      (cov_1fm4operzq().b[14][1]++, en) ||
      /* istanbul ignore next */
      (cov_1fm4operzq().b[14][2]++, fr));
    } else
    /* istanbul ignore next */
    {
      cov_1fm4operzq().b[13][1]++;
    }
    cov_1fm4operzq().s[48]++;
    return true;
  }, {
    message: options?.requireAll ?
    /* istanbul ignore next */
    (cov_1fm4operzq().b[15][0]++, `All versions of ${fieldName} are required`) :
    /* istanbul ignore next */
    (cov_1fm4operzq().b[15][1]++, options?.requireAtLeastOne ?
    /* istanbul ignore next */
    (cov_1fm4operzq().b[16][0]++, `At least one version of ${fieldName} is required`) :
    /* istanbul ignore next */
    (cov_1fm4operzq().b[16][1]++, undefined))
  });
}
/**
 * Example usage:
 *
 * const subjectSchema = mergeSchemas(
 *   bilingualSchemas.requiredString('name'),
 *   bilingualSchemas.text('description'),
 *   bilingualSchemas.number('estHours', { min: 0 }),
 *   bilingualSchemas.date('targetDate')
 * );
 *
 * // Or with custom validation:
 * const activitySchema = createBilingualObjectSchema({
 *   title: z.string().min(1).max(100),
 *   description: z.string().optional(),
 *   duration: z.number().min(0).max(480),
 * });
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWZtNG9wZXJ6cSIsImFjdHVhbENvdmVyYWdlIiwieiIsImNyZWF0ZUJpbGluZ3VhbFNjaGVtYSIsImZpZWxkTmFtZSIsImJhc2VTY2hlbWEiLCJvcHRpb25zIiwiYiIsImYiLCJyZXF1aXJlQmlsaW5ndWFsIiwicyIsInNjaGVtYSIsIm9wdGlvbmFsIiwiY3JlYXRlQmlsaW5ndWFsT2JqZWN0U2NoZW1hIiwiZmllbGRzIiwic2NoZW1hRmllbGRzIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJmaWVsZFNjaGVtYSIsImFzc2lnbiIsIm9iamVjdCIsImJpbGluZ3VhbFNjaGVtYXMiLCJzdHJpbmciLCJtaW4iLCJtYXgiLCJyZXF1aXJlZFN0cmluZyIsInRleHQiLCJlbWFpbCIsImRhdGUiLCJkYXRldGltZSIsIm9yIiwidHJhbnNmb3JtIiwidmFsIiwiRGF0ZSIsIm51bWJlciIsInVuZGVmaW5lZCIsImJvb2xlYW4iLCJlbnVtIiwidmFsdWVzIiwibWVyZ2VTY2hlbWFzIiwic2NoZW1hcyIsIm1lcmdlZCIsInJlZHVjZSIsImFjYyIsImNyZWF0ZUJpbGluZ3VhbFZhbGlkYXRpb24iLCJyZWZpbmUiLCJkYXRhIiwiYmFzZSIsImVuIiwiZnIiLCJyZXF1aXJlQWxsIiwicmVxdWlyZUF0TGVhc3RPbmUiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy91dGlscy9zY2hlbWFGYWN0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJpbGluZ3VhbEZpZWxkIHtcbiAgYmFzZTogc3RyaW5nO1xuICBlbj86IHN0cmluZztcbiAgZnI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmlsaW5ndWFsU2NoZW1hT3B0aW9ucyB7XG4gIHJlcXVpcmVCaWxpbmd1YWw/OiBib29sZWFuO1xuICBkZWZhdWx0TGFuZ3VhZ2U/OiAnZW4nIHwgJ2ZyJztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYmlsaW5ndWFsIHNjaGVtYSBmb3IgYSBmaWVsZCB0aGF0IGhhcyBiYXNlLCBFbmdsaXNoLCBhbmQgRnJlbmNoIHZlcnNpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCaWxpbmd1YWxTY2hlbWEoXG4gIGZpZWxkTmFtZTogc3RyaW5nLFxuICBiYXNlU2NoZW1hOiB6LlpvZFR5cGVBbnksXG4gIG9wdGlvbnM6IEJpbGluZ3VhbFNjaGVtYU9wdGlvbnMgPSB7fSxcbikge1xuICBjb25zdCB7IHJlcXVpcmVCaWxpbmd1YWwgPSBmYWxzZSB9ID0gb3B0aW9ucztcblxuICBjb25zdCBzY2hlbWE6IFJlY29yZDxzdHJpbmcsIHouWm9kVHlwZUFueT4gPSB7XG4gICAgW2ZpZWxkTmFtZV06IGJhc2VTY2hlbWEsXG4gIH07XG5cbiAgaWYgKHJlcXVpcmVCaWxpbmd1YWwpIHtcbiAgICBzY2hlbWFbYCR7ZmllbGROYW1lfUVuYF0gPSBiYXNlU2NoZW1hO1xuICAgIHNjaGVtYVtgJHtmaWVsZE5hbWV9RnJgXSA9IGJhc2VTY2hlbWE7XG4gIH0gZWxzZSB7XG4gICAgc2NoZW1hW2Ake2ZpZWxkTmFtZX1FbmBdID0gYmFzZVNjaGVtYS5vcHRpb25hbCgpO1xuICAgIHNjaGVtYVtgJHtmaWVsZE5hbWV9RnJgXSA9IGJhc2VTY2hlbWEub3B0aW9uYWwoKTtcbiAgfVxuXG4gIHJldHVybiBzY2hlbWE7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJpbGluZ3VhbCBvYmplY3Qgc2NoZW1hIHdpdGggbXVsdGlwbGUgZmllbGRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCaWxpbmd1YWxPYmplY3RTY2hlbWE8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHouWm9kVHlwZUFueT4+KFxuICBmaWVsZHM6IFQsXG4gIG9wdGlvbnM6IEJpbGluZ3VhbFNjaGVtYU9wdGlvbnMgPSB7fSxcbik6IHouWm9kT2JqZWN0PFQgJiBSZWNvcmQ8c3RyaW5nLCB6LlpvZFR5cGVBbnk+PiB7XG4gIGNvbnN0IHNjaGVtYUZpZWxkczogUmVjb3JkPHN0cmluZywgei5ab2RUeXBlQW55PiA9IHt9O1xuXG4gIE9iamVjdC5lbnRyaWVzKGZpZWxkcykuZm9yRWFjaCgoW2ZpZWxkTmFtZSwgZmllbGRTY2hlbWFdKSA9PiB7XG4gICAgT2JqZWN0LmFzc2lnbihzY2hlbWFGaWVsZHMsIGNyZWF0ZUJpbGluZ3VhbFNjaGVtYShmaWVsZE5hbWUsIGZpZWxkU2NoZW1hLCBvcHRpb25zKSk7XG4gIH0pO1xuXG4gIHJldHVybiB6Lm9iamVjdChzY2hlbWFGaWVsZHMpIGFzIHouWm9kT2JqZWN0PFQgJiBSZWNvcmQ8c3RyaW5nLCB6LlpvZFR5cGVBbnk+Pjtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gY3JlYXRlIGNvbW1vbiBiaWxpbmd1YWwgc2NoZW1hc1xuICovXG5leHBvcnQgY29uc3QgYmlsaW5ndWFsU2NoZW1hcyA9IHtcbiAgLy8gU3RyaW5nIGZpZWxkIHdpdGggYmlsaW5ndWFsIHN1cHBvcnRcbiAgc3RyaW5nOiAoXG4gICAgZmllbGROYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEJpbGluZ3VhbFNjaGVtYU9wdGlvbnMgJiB7IG1pbj86IG51bWJlcjsgbWF4PzogbnVtYmVyIH0sXG4gICkgPT4ge1xuICAgIGxldCBzY2hlbWEgPSB6LnN0cmluZygpO1xuICAgIGlmIChvcHRpb25zPy5taW4pIHNjaGVtYSA9IHNjaGVtYS5taW4ob3B0aW9ucy5taW4pO1xuICAgIGlmIChvcHRpb25zPy5tYXgpIHNjaGVtYSA9IHNjaGVtYS5tYXgob3B0aW9ucy5tYXgpO1xuICAgIHJldHVybiBjcmVhdGVCaWxpbmd1YWxTY2hlbWEoZmllbGROYW1lLCBzY2hlbWEsIG9wdGlvbnMpO1xuICB9LFxuXG4gIC8vIFJlcXVpcmVkIHN0cmluZyB3aXRoIGJpbGluZ3VhbCBzdXBwb3J0XG4gIHJlcXVpcmVkU3RyaW5nOiAoXG4gICAgZmllbGROYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEJpbGluZ3VhbFNjaGVtYU9wdGlvbnMgJiB7IG1pbj86IG51bWJlcjsgbWF4PzogbnVtYmVyIH0sXG4gICkgPT4ge1xuICAgIGxldCBzY2hlbWEgPSB6LnN0cmluZygpLm1pbigxLCBgJHtmaWVsZE5hbWV9IGlzIHJlcXVpcmVkYCk7XG4gICAgaWYgKG9wdGlvbnM/Lm1pbikgc2NoZW1hID0gc2NoZW1hLm1pbihvcHRpb25zLm1pbik7XG4gICAgaWYgKG9wdGlvbnM/Lm1heCkgc2NoZW1hID0gc2NoZW1hLm1heChvcHRpb25zLm1heCk7XG4gICAgcmV0dXJuIGNyZWF0ZUJpbGluZ3VhbFNjaGVtYShmaWVsZE5hbWUsIHNjaGVtYSwgb3B0aW9ucyk7XG4gIH0sXG5cbiAgLy8gT3B0aW9uYWwgdGV4dCBmaWVsZCB3aXRoIGJpbGluZ3VhbCBzdXBwb3J0XG4gIHRleHQ6IChmaWVsZE5hbWU6IHN0cmluZywgb3B0aW9ucz86IEJpbGluZ3VhbFNjaGVtYU9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY3JlYXRlQmlsaW5ndWFsU2NoZW1hKGZpZWxkTmFtZSwgei5zdHJpbmcoKS5vcHRpb25hbCgpLCBvcHRpb25zKTtcbiAgfSxcblxuICAvLyBFbWFpbCBmaWVsZCAodXN1YWxseSBub3QgYmlsaW5ndWFsLCBidXQgaW5jbHVkZWQgZm9yIGNvbXBsZXRlbmVzcylcbiAgZW1haWw6IChmaWVsZE5hbWU6IHN0cmluZyA9ICdlbWFpbCcpID0+ICh7XG4gICAgW2ZpZWxkTmFtZV06IHouc3RyaW5nKCkuZW1haWwoJ0ludmFsaWQgZW1haWwgYWRkcmVzcycpLFxuICB9KSxcblxuICAvLyBEYXRlIGZpZWxkXG4gIGRhdGU6IChmaWVsZE5hbWU6IHN0cmluZykgPT4gKHtcbiAgICBbZmllbGROYW1lXTogelxuICAgICAgLnN0cmluZygpXG4gICAgICAuZGF0ZXRpbWUoKVxuICAgICAgLm9yKHouZGF0ZSgpKVxuICAgICAgLnRyYW5zZm9ybSgodmFsKSA9PiBuZXcgRGF0ZSh2YWwpKSxcbiAgfSksXG5cbiAgLy8gTnVtYmVyIGZpZWxkXG4gIG51bWJlcjogKGZpZWxkTmFtZTogc3RyaW5nLCBvcHRpb25zPzogeyBtaW4/OiBudW1iZXI7IG1heD86IG51bWJlciB9KSA9PiB7XG4gICAgbGV0IHNjaGVtYSA9IHoubnVtYmVyKCk7XG4gICAgaWYgKG9wdGlvbnM/Lm1pbiAhPT0gdW5kZWZpbmVkKSBzY2hlbWEgPSBzY2hlbWEubWluKG9wdGlvbnMubWluKTtcbiAgICBpZiAob3B0aW9ucz8ubWF4ICE9PSB1bmRlZmluZWQpIHNjaGVtYSA9IHNjaGVtYS5tYXgob3B0aW9ucy5tYXgpO1xuICAgIHJldHVybiB7IFtmaWVsZE5hbWVdOiBzY2hlbWEgfTtcbiAgfSxcblxuICAvLyBCb29sZWFuIGZpZWxkXG4gIGJvb2xlYW46IChmaWVsZE5hbWU6IHN0cmluZykgPT4gKHtcbiAgICBbZmllbGROYW1lXTogei5ib29sZWFuKCksXG4gIH0pLFxuXG4gIC8vIEVudW0gZmllbGRcbiAgZW51bTogPFQgZXh0ZW5kcyByZWFkb25seSBbc3RyaW5nLCAuLi5zdHJpbmdbXV0+KGZpZWxkTmFtZTogc3RyaW5nLCB2YWx1ZXM6IFQpID0+ICh7XG4gICAgW2ZpZWxkTmFtZV06IHouZW51bSh2YWx1ZXMpLFxuICB9KSxcbn07XG5cbi8qKlxuICogTWVyZ2VzIG11bHRpcGxlIHNjaGVtYSBvYmplY3RzIGludG8gb25lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNjaGVtYXMoXG4gIC4uLnNjaGVtYXM6IFJlY29yZDxzdHJpbmcsIHouWm9kVHlwZUFueT5bXVxuKTogei5ab2RPYmplY3Q8UmVjb3JkPHN0cmluZywgei5ab2RUeXBlQW55Pj4ge1xuICBjb25zdCBtZXJnZWQgPSBzY2hlbWFzLnJlZHVjZSgoYWNjLCBzY2hlbWEpID0+ICh7IC4uLmFjYywgLi4uc2NoZW1hIH0pLCB7fSk7XG4gIHJldHVybiB6Lm9iamVjdChtZXJnZWQpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzY2hlbWEgdGhhdCB2YWxpZGF0ZXMgYmlsaW5ndWFsIGRhdGEgY29uc2lzdGVuY3lcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbGluZ3VhbFZhbGlkYXRpb24oXG4gIGZpZWxkTmFtZTogc3RyaW5nLFxuICBvcHRpb25zPzoge1xuICAgIHJlcXVpcmVBdExlYXN0T25lPzogYm9vbGVhbjtcbiAgICByZXF1aXJlQWxsPzogYm9vbGVhbjtcbiAgfSxcbikge1xuICByZXR1cm4gelxuICAgIC5vYmplY3Qoe1xuICAgICAgW2ZpZWxkTmFtZV06IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIFtgJHtmaWVsZE5hbWV9RW5gXTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgW2Ake2ZpZWxkTmFtZX1GcmBdOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAucmVmaW5lKFxuICAgICAgKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgYmFzZSA9IGRhdGFbZmllbGROYW1lXTtcbiAgICAgICAgY29uc3QgZW4gPSBkYXRhW2Ake2ZpZWxkTmFtZX1FbmBdO1xuICAgICAgICBjb25zdCBmciA9IGRhdGFbYCR7ZmllbGROYW1lfUZyYF07XG5cbiAgICAgICAgaWYgKG9wdGlvbnM/LnJlcXVpcmVBbGwpIHtcbiAgICAgICAgICByZXR1cm4gISEoYmFzZSAmJiBlbiAmJiBmcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucz8ucmVxdWlyZUF0TGVhc3RPbmUpIHtcbiAgICAgICAgICByZXR1cm4gISEoYmFzZSB8fCBlbiB8fCBmcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG1lc3NhZ2U6IG9wdGlvbnM/LnJlcXVpcmVBbGxcbiAgICAgICAgICA/IGBBbGwgdmVyc2lvbnMgb2YgJHtmaWVsZE5hbWV9IGFyZSByZXF1aXJlZGBcbiAgICAgICAgICA6IG9wdGlvbnM/LnJlcXVpcmVBdExlYXN0T25lXG4gICAgICAgICAgICA/IGBBdCBsZWFzdCBvbmUgdmVyc2lvbiBvZiAke2ZpZWxkTmFtZX0gaXMgcmVxdWlyZWRgXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIH0sXG4gICAgKTtcbn1cblxuLyoqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICpcbiAqIGNvbnN0IHN1YmplY3RTY2hlbWEgPSBtZXJnZVNjaGVtYXMoXG4gKiAgIGJpbGluZ3VhbFNjaGVtYXMucmVxdWlyZWRTdHJpbmcoJ25hbWUnKSxcbiAqICAgYmlsaW5ndWFsU2NoZW1hcy50ZXh0KCdkZXNjcmlwdGlvbicpLFxuICogICBiaWxpbmd1YWxTY2hlbWFzLm51bWJlcignZXN0SG91cnMnLCB7IG1pbjogMCB9KSxcbiAqICAgYmlsaW5ndWFsU2NoZW1hcy5kYXRlKCd0YXJnZXREYXRlJylcbiAqICk7XG4gKlxuICogLy8gT3Igd2l0aCBjdXN0b20gdmFsaWRhdGlvbjpcbiAqIGNvbnN0IGFjdGl2aXR5U2NoZW1hID0gY3JlYXRlQmlsaW5ndWFsT2JqZWN0U2NoZW1hKHtcbiAqICAgdGl0bGU6IHouc3RyaW5nKCkubWluKDEpLm1heCgxMDApLFxuICogICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICogICBkdXJhdGlvbjogei5udW1iZXIoKS5taW4oMCkubWF4KDQ4MCksXG4gKiB9KTtcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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