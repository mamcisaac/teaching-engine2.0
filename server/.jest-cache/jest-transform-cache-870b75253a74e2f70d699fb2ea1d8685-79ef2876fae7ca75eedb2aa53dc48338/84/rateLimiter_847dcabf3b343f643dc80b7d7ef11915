b16a4871f94a388d57bb7df212097d9e
import logger from '../logger';
// Store for request counts
const requestCounts = new Map();
// Cleanup old entries periodically
setInterval(() => {
    const now = Date.now();
    for (const [key, value] of requestCounts.entries()) {
        if (value.resetTime < now) {
            requestCounts.delete(key);
        }
    }
}, 60000); // Clean up every minute
export function createRateLimiter(options) {
    const { windowMs, max, keyGenerator = (req) => {
        // Default key: IP + user ID if authenticated
        const ip = req.ip || req.connection.remoteAddress || 'unknown';
        const userId = req.user?.userId || 'anonymous';
        return `${ip}-${userId}`;
    }, message = 'Too many requests, please try again later.', skipSuccessfulRequests = false, skipFailedRequests = false, } = options;
    return (req, res, next) => {
        const key = keyGenerator(req);
        const now = Date.now();
        // Get or create entry
        let entry = requestCounts.get(key);
        if (!entry || entry.resetTime < now) {
            entry = { count: 0, resetTime: now + windowMs };
            requestCounts.set(key, entry);
        }
        // Check if limit exceeded
        if (entry.count >= max) {
            const retryAfter = Math.ceil((entry.resetTime - now) / 1000);
            logger.warn({
                key,
                endpoint: req.path,
                method: req.method,
                count: entry.count,
                max,
            }, 'Rate limit exceeded');
            res.setHeader('Retry-After', retryAfter.toString());
            res.setHeader('X-RateLimit-Limit', max.toString());
            res.setHeader('X-RateLimit-Remaining', '0');
            res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());
            return res.status(429).json({
                error: message,
                retryAfter,
            });
        }
        // Increment counter
        entry.count++;
        // Set headers
        res.setHeader('X-RateLimit-Limit', max.toString());
        res.setHeader('X-RateLimit-Remaining', Math.max(0, max - entry.count).toString());
        res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());
        // Handle response to optionally skip counting
        if (skipSuccessfulRequests || skipFailedRequests) {
            const originalSend = res.send;
            res.send = function (data) {
                const shouldSkip = (skipSuccessfulRequests && res.statusCode < 400) ||
                    (skipFailedRequests && res.statusCode >= 400);
                if (shouldSkip && entry) {
                    entry.count = Math.max(0, entry.count - 1);
                }
                return originalSend.call(this, data);
            };
        }
        next();
    };
}
// Pre-configured rate limiters for different use cases
export const rateLimiters = {
    // Strict limit for authentication endpoints
    auth: createRateLimiter({
        windowMs: 15 * 60 * 1000, // 15 minutes
        max: 5, // 5 requests per window
        message: 'Too many authentication attempts. Please try again later.',
        skipSuccessfulRequests: true, // Only count failed attempts
    }),
    // Standard API rate limit
    api: createRateLimiter({
        windowMs: 15 * 60 * 1000, // 15 minutes
        max: 100, // 100 requests per window
    }),
    // Relaxed limit for read operations
    read: createRateLimiter({
        windowMs: 15 * 60 * 1000, // 15 minutes
        max: 200, // 200 requests per window
    }),
    // Strict limit for write operations
    write: createRateLimiter({
        windowMs: 15 * 60 * 1000, // 15 minutes
        max: 50, // 50 requests per window
    }),
    // Very strict limit for AI operations
    ai: createRateLimiter({
        windowMs: 60 * 60 * 1000, // 1 hour
        max: 20, // 20 requests per hour
        message: 'AI generation limit exceeded. Please try again later.',
    }),
    // File upload limit
    upload: createRateLimiter({
        windowMs: 60 * 60 * 1000, // 1 hour
        max: 10, // 10 uploads per hour
        message: 'File upload limit exceeded. Please try again later.',
    }),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,