{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/etfo-planning.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/etfo-planning.test.ts"],"sourcesContent":["import request from 'supertest';\nimport { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\nimport { app } from '../../src/index';\nimport { prisma } from '../../src/prisma';\nimport { ETFOTestHelpers } from './helpers/etfo-helpers';\n\ndescribe('ETFO Planning Integration Tests', () => {\n  let authToken: string;\n  let userId: number;\n  let testEmail: string;\n  let helpers: ETFOTestHelpers;\n\n  beforeAll(async () => {\n    // Create test user manually with unique email\n    const bcrypt = (await import('bcryptjs')).default;\n    const hashedPassword = await bcrypt.hash('testpassword123', 10);\n    const timestamp = Date.now();\n    testEmail = `etfo-test-${timestamp}@example.com`;\n\n    // Clean up any existing user with this email first\n    await prisma.user.deleteMany({\n      where: { email: testEmail },\n    });\n\n    const user = await prisma.user.create({\n      data: {\n        email: testEmail,\n        password: hashedPassword,\n        name: 'ETFO Tester',\n        role: 'teacher',\n        preferredLanguage: 'en',\n      },\n    });\n\n    userId = user.id;\n\n    // Ensure the transaction is committed\n    await prisma.$disconnect();\n    await prisma.$connect();\n\n    const loginResponse = await request(app).post('/api/login').send({\n      email: testEmail,\n      password: 'testpassword123',\n    });\n\n    if (loginResponse.status !== 200) {\n      throw new Error(\n        `Login failed: ${loginResponse.status} ${JSON.stringify(loginResponse.body)}`,\n      );\n    }\n\n    authToken = loginResponse.body.token;\n\n    if (!authToken) {\n      throw new Error('No auth token received from login');\n    }\n\n    // Initialize helpers\n    helpers = new ETFOTestHelpers(authToken);\n  });\n\n  afterAll(async () => {\n    // Clean up test data in reverse dependency order\n    if (userId) {\n      try {\n        // Delete in reverse order of dependencies\n        await prisma.daybookEntryExpectation.deleteMany({\n          where: { daybookEntry: { userId } },\n        });\n        await prisma.daybookEntry.deleteMany({ where: { userId } });\n\n        await prisma.eTFOLessonPlanExpectation.deleteMany({\n          where: { lessonPlan: { userId } },\n        });\n        await prisma.eTFOLessonPlanResource.deleteMany({\n          where: { lessonPlan: { userId } },\n        });\n        await prisma.eTFOLessonPlan.deleteMany({ where: { userId } });\n\n        await prisma.unitPlanExpectation.deleteMany({\n          where: { unitPlan: { userId } },\n        });\n        await prisma.unitPlanResource.deleteMany({\n          where: { unitPlan: { userId } },\n        });\n        await prisma.unitPlan.deleteMany({ where: { userId } });\n\n        await prisma.longRangePlanExpectation.deleteMany({\n          where: { longRangePlan: { userId } },\n        });\n        await prisma.longRangePlan.deleteMany({ where: { userId } });\n\n        // Delete curriculum expectations created by this user's imports\n        await prisma.curriculumExpectation.deleteMany({\n          where: { import: { userId } },\n        });\n        await prisma.curriculumImport.deleteMany({ where: { userId } });\n\n        await prisma.user.delete({ where: { id: userId } });\n      } catch (error) {\n        console.warn('Failed to delete test data:', error);\n      }\n    }\n    await prisma.$disconnect();\n  });\n\n  describe('Curriculum Expectations', () => {\n    test('should create a curriculum expectation', async () => {\n      const expectationId = await helpers.createExpectation('CREATE_TEST');\n      expect(expectationId).toBeDefined();\n      expect(typeof expectationId).toBe('string');\n    });\n\n    test('should search curriculum expectations', async () => {\n      // Create test expectation first\n      await helpers.createExpectation('SEARCH_TEST');\n\n      const response = await request(app)\n        .get('/api/curriculum-expectations?search=SEARCH_TEST')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0].description).toContain('SEARCH_TEST');\n    });\n  });\n\n  describe('Long-Range Plans', () => {\n    test('should create a long-range plan', async () => {\n      const expectationId = await helpers.createExpectation('LRP');\n      \n      const response = await request(app)\n        .post('/api/long-range-plans')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          title: 'Grade 1 Mathematics - Fall Term',\n          academicYear: '2024-2025',\n          term: 'Fall',\n          grade: 1,\n          subject: 'Mathematics',\n          description: 'Comprehensive math program for Grade 1',\n          goals: 'Develop number sense and basic operations',\n          themes: ['Number Sense', 'Patterns', 'Measurement'],\n          expectationIds: [expectationId],\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body.title).toBe('Grade 1 Mathematics - Fall Term');\n      expect(response.body.expectations).toHaveLength(1);\n    });\n\n    test('should get all long-range plans for user', async () => {\n      // Create test plan first\n      const longRangePlanId = await helpers.createLongRangePlan('Test Plan for Retrieval');\n\n      const response = await request(app)\n        .get('/api/long-range-plans')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body.some(plan => plan.id === longRangePlanId)).toBe(true);\n    });\n  });\n\n  describe('Unit Plans', () => {\n    test('should create a unit plan', async () => {\n      const expectationId = await helpers.createExpectation('UP');\n      const longRangePlanId = await helpers.createLongRangePlan('Test Long-Range Plan for Units');\n\n      const response = await request(app)\n        .post('/api/unit-plans')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          title: 'Numbers 1-10',\n          longRangePlanId,\n          description: 'Introduction to numbers 1-10',\n          bigIdeas: 'Numbers represent quantities',\n          essentialQuestions: ['What is a number?', 'How do we count?'],\n          startDate: '2024-09-01T00:00:00.000Z',\n          endDate: '2024-09-30T23:59:59.999Z',\n          estimatedHours: 20,\n          expectationIds: [expectationId],\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body.title).toBe('Numbers 1-10');\n      expect(response.body.longRangePlanId).toBe(longRangePlanId);\n    });\n  });\n\n  describe('ETFO Lesson Plans', () => {\n    test('should create an ETFO lesson plan', async () => {\n      const expectationId = await helpers.createExpectation('LP');\n      const longRangePlanId = await helpers.createLongRangePlan('Test Long-Range Plan for Lessons');\n      const unitPlanId = await helpers.createUnitPlan('Test Unit for Lessons', longRangePlanId, [expectationId]);\n\n      const response = await request(app)\n        .post('/api/etfo-lesson-plans')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          title: 'Counting to 5',\n          unitPlanId,\n          date: '2024-09-15T09:00:00Z',\n          duration: 45,\n          mindsOn: 'Review previous counting',\n          action: 'Practice counting objects',\n          consolidation: 'Share counting strategies',\n          learningGoals: 'Students will count to 5 accurately',\n          materials: ['counting bears', 'number cards'],\n          isSubFriendly: true,\n          expectationIds: [expectationId],\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body.title).toBe('Counting to 5');\n      expect(response.body.duration).toBe(45);\n      expect(response.body.isSubFriendly).toBe(true);\n    });\n\n    test('should get lessons by date range', async () => {\n      const { unitPlanId } = await helpers.createCompleteHierarchy('DATE_RANGE');\n\n      // Create additional lesson in date range\n      await request(app)\n        .post('/api/etfo-lesson-plans')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          title: 'Test Lesson for Date Range',\n          unitPlanId,\n          date: '2024-09-20T10:00:00Z',\n          duration: 30,\n          isSubFriendly: false,\n        });\n\n      const response = await request(app)\n        .get('/api/etfo-lesson-plans?startDate=2024-09-15&endDate=2024-09-25')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Daybook Entries', () => {\n    test('should create a daybook entry', async () => {\n      const response = await request(app)\n        .post('/api/daybook-entries')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          date: '2024-09-15T00:00:00Z',\n          whatWorked: 'Students engaged well with manipulatives',\n          whatDidntWork: 'Some students struggled with counting sequence',\n          nextSteps: 'Provide more practice with counting games',\n          studentEngagement: 'High - students were excited to use counting bears',\n          notes: 'Great day overall',\n          overallRating: 4,\n          wouldReuseLesson: true,\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body.overallRating).toBe(4);\n      expect(response.body.wouldReuseLesson).toBe(true);\n    });\n\n    test('should get daybook entries by date range', async () => {\n      // Create test entry first\n      await request(app)\n        .post('/api/daybook-entries')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          date: '2024-09-18T00:00:00Z',\n          notes: 'Test entry for date range query',\n          overallRating: 3,\n        });\n\n      const response = await request(app)\n        .get('/api/daybook-entries?startDate=2024-09-15&endDate=2024-09-20')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('AI Integration', () => {\n    test('should handle AI draft generation request', async () => {\n      const expectationId = await helpers.createExpectation('AI');\n\n      const response = await request(app)\n        .post('/api/long-range-plans/ai-draft')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          expectationIds: [expectationId],\n          subject: 'Mathematics',\n          grade: 1,\n          academicYear: '2024-2025',\n          termStructure: 'semester',\n        });\n\n      // Since we don't have OpenAI API key in test environment,\n      // we expect this to fail gracefully\n      expect([200, 500]).toContain(response.status);\n\n      if (response.status === 200) {\n        expect(response.body).toHaveProperty('units');\n        expect(Array.isArray(response.body.units)).toBe(true);\n      }\n    });\n  });\n\n  describe('Data Flow Integration', () => {\n    test('should create complete planning hierarchy', async () => {\n      const hierarchy = await helpers.createCompleteHierarchy('COMPLETE_FLOW');\n\n      // Verify all components were created successfully\n      expect(hierarchy.expectationId).toBeDefined();\n      expect(hierarchy.longRangePlanId).toBeDefined();\n      expect(hierarchy.unitPlanId).toBeDefined();\n      expect(hierarchy.lessonPlanId).toBeDefined();\n      expect(hierarchy.daybookEntryId).toBeDefined();\n\n      // Verify relationships by querying the created long-range plan\n      const planResponse = await request(app)\n        .get(`/api/long-range-plans/${hierarchy.longRangePlanId}`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(planResponse.status).toBe(200);\n      expect(planResponse.body.expectations).toHaveLength(1);\n      expect(planResponse.body.unitPlans).toHaveLength(1);\n    });\n  });\n});"],"version":3}