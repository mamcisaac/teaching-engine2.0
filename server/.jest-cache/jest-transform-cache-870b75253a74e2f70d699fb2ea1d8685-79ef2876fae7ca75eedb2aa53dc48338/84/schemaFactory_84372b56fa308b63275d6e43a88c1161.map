{"version":3,"names":["cov_1fm4operzq","actualCoverage","z","createBilingualSchema","fieldName","baseSchema","options","b","f","requireBilingual","s","schema","optional","createBilingualObjectSchema","fields","schemaFields","Object","entries","forEach","fieldSchema","assign","object","bilingualSchemas","string","min","max","requiredString","text","email","date","datetime","or","transform","val","Date","number","undefined","boolean","enum","values","mergeSchemas","schemas","merged","reduce","acc","createBilingualValidation","refine","data","base","en","fr","requireAll","requireAtLeastOne","message"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/schemaFactory.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport interface BilingualField {\n  base: string;\n  en?: string;\n  fr?: string;\n}\n\nexport interface BilingualSchemaOptions {\n  requireBilingual?: boolean;\n  defaultLanguage?: 'en' | 'fr';\n}\n\n/**\n * Creates a bilingual schema for a field that has base, English, and French versions\n */\nexport function createBilingualSchema(\n  fieldName: string,\n  baseSchema: z.ZodTypeAny,\n  options: BilingualSchemaOptions = {},\n) {\n  const { requireBilingual = false } = options;\n\n  const schema: Record<string, z.ZodTypeAny> = {\n    [fieldName]: baseSchema,\n  };\n\n  if (requireBilingual) {\n    schema[`${fieldName}En`] = baseSchema;\n    schema[`${fieldName}Fr`] = baseSchema;\n  } else {\n    schema[`${fieldName}En`] = baseSchema.optional();\n    schema[`${fieldName}Fr`] = baseSchema.optional();\n  }\n\n  return schema;\n}\n\n/**\n * Creates a bilingual object schema with multiple fields\n */\nexport function createBilingualObjectSchema<T extends Record<string, z.ZodTypeAny>>(\n  fields: T,\n  options: BilingualSchemaOptions = {},\n): z.ZodObject<T & Record<string, z.ZodTypeAny>> {\n  const schemaFields: Record<string, z.ZodTypeAny> = {};\n\n  Object.entries(fields).forEach(([fieldName, fieldSchema]) => {\n    Object.assign(schemaFields, createBilingualSchema(fieldName, fieldSchema, options));\n  });\n\n  return z.object(schemaFields) as z.ZodObject<T & Record<string, z.ZodTypeAny>>;\n}\n\n/**\n * Helper to create common bilingual schemas\n */\nexport const bilingualSchemas = {\n  // String field with bilingual support\n  string: (\n    fieldName: string,\n    options?: BilingualSchemaOptions & { min?: number; max?: number },\n  ) => {\n    let schema = z.string();\n    if (options?.min) schema = schema.min(options.min);\n    if (options?.max) schema = schema.max(options.max);\n    return createBilingualSchema(fieldName, schema, options);\n  },\n\n  // Required string with bilingual support\n  requiredString: (\n    fieldName: string,\n    options?: BilingualSchemaOptions & { min?: number; max?: number },\n  ) => {\n    let schema = z.string().min(1, `${fieldName} is required`);\n    if (options?.min) schema = schema.min(options.min);\n    if (options?.max) schema = schema.max(options.max);\n    return createBilingualSchema(fieldName, schema, options);\n  },\n\n  // Optional text field with bilingual support\n  text: (fieldName: string, options?: BilingualSchemaOptions) => {\n    return createBilingualSchema(fieldName, z.string().optional(), options);\n  },\n\n  // Email field (usually not bilingual, but included for completeness)\n  email: (fieldName: string = 'email') => ({\n    [fieldName]: z.string().email('Invalid email address'),\n  }),\n\n  // Date field\n  date: (fieldName: string) => ({\n    [fieldName]: z\n      .string()\n      .datetime()\n      .or(z.date())\n      .transform((val) => new Date(val)),\n  }),\n\n  // Number field\n  number: (fieldName: string, options?: { min?: number; max?: number }) => {\n    let schema = z.number();\n    if (options?.min !== undefined) schema = schema.min(options.min);\n    if (options?.max !== undefined) schema = schema.max(options.max);\n    return { [fieldName]: schema };\n  },\n\n  // Boolean field\n  boolean: (fieldName: string) => ({\n    [fieldName]: z.boolean(),\n  }),\n\n  // Enum field\n  enum: <T extends readonly [string, ...string[]]>(fieldName: string, values: T) => ({\n    [fieldName]: z.enum(values),\n  }),\n};\n\n/**\n * Merges multiple schema objects into one\n */\nexport function mergeSchemas(\n  ...schemas: Record<string, z.ZodTypeAny>[]\n): z.ZodObject<Record<string, z.ZodTypeAny>> {\n  const merged = schemas.reduce((acc, schema) => ({ ...acc, ...schema }), {});\n  return z.object(merged);\n}\n\n/**\n * Creates a schema that validates bilingual data consistency\n */\nexport function createBilingualValidation(\n  fieldName: string,\n  options?: {\n    requireAtLeastOne?: boolean;\n    requireAll?: boolean;\n  },\n) {\n  return z\n    .object({\n      [fieldName]: z.string().optional(),\n      [`${fieldName}En`]: z.string().optional(),\n      [`${fieldName}Fr`]: z.string().optional(),\n    })\n    .refine(\n      (data) => {\n        const base = data[fieldName];\n        const en = data[`${fieldName}En`];\n        const fr = data[`${fieldName}Fr`];\n\n        if (options?.requireAll) {\n          return !!(base && en && fr);\n        }\n\n        if (options?.requireAtLeastOne) {\n          return !!(base || en || fr);\n        }\n\n        return true;\n      },\n      {\n        message: options?.requireAll\n          ? `All versions of ${fieldName} are required`\n          : options?.requireAtLeastOne\n            ? `At least one version of ${fieldName} is required`\n            : undefined,\n      },\n    );\n}\n\n/**\n * Example usage:\n *\n * const subjectSchema = mergeSchemas(\n *   bilingualSchemas.requiredString('name'),\n *   bilingualSchemas.text('description'),\n *   bilingualSchemas.number('estHours', { min: 0 }),\n *   bilingualSchemas.date('targetDate')\n * );\n *\n * // Or with custom validation:\n * const activitySchema = createBilingualObjectSchema({\n *   title: z.string().min(1).max(100),\n *   description: z.string().optional(),\n *   duration: z.number().min(0).max(480),\n * });\n */\n"],"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","ignoreList":[]}