{"version":3,"names":["cov_83lqs6xkk","actualCoverage","Router","prisma","z","generateNewsletterContent","router","s","generateNewsletterSchema","object","studentIds","array","number","int","positive","from","string","datetime","to","tone","enum","default","focusAreas","optional","includeArtifacts","boolean","includeReflections","includeLearningGoals","includeUpcomingEvents","saveNewsletterSchema","title","min","titleFr","dateFrom","dateTo","sections","id","content","contentFr","isEditable","order","isDraft","regenerateNewsletterSchema","post","req","res","next","f","userId","user","b","status","json","error","validation","safeParse","body","success","details","flatten","data","students","student","findMany","where","in","include","artifacts","createdAt","gte","Date","lte","reflections","length","daybookEntries","daybookEntry","date","expectations","expectation","orderBy","newsletterContent","fromDate","toDate","options","err","console","_from","_to","_tone","regeneratedContent","map","section","get","query","newsletters","newsletter","undefined","findFirst","params","newsletterData","create","put","existing","update","sentAt","message","delete","send","recentStudents","take","updatedAt","select","firstName","lastName","grade","recentEntries","now","today","lastWeek","getTime","lastMonth","suggestions","dateRanges","label","toISOString","toneOptions","recentTopics","flatMap","entry","exp","description","slice"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/newsletters.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { prisma } from '../prisma';\nimport { z } from 'zod';\nimport { generateNewsletterContent } from '../services/newsletterService';\n\nconst router = Router();\n\n// Validation schemas\nconst generateNewsletterSchema = z.object({\n  studentIds: z.array(z.number().int().positive()),\n  from: z.string().datetime(),\n  to: z.string().datetime(),\n  tone: z.enum(['friendly', 'formal', 'informative']).default('friendly'),\n  focusAreas: z.array(z.string()).optional(),\n  includeArtifacts: z.boolean().default(true),\n  includeReflections: z.boolean().default(true),\n  includeLearningGoals: z.boolean().default(true),\n  includeUpcomingEvents: z.boolean().default(true),\n});\n\nconst saveNewsletterSchema = z.object({\n  title: z.string().min(1),\n  titleFr: z.string().min(1),\n  studentIds: z.array(z.number().int().positive()),\n  dateFrom: z.string().datetime(),\n  dateTo: z.string().datetime(),\n  tone: z.enum(['friendly', 'formal', 'informative']),\n  sections: z.array(\n    z.object({\n      id: z.string(),\n      title: z.string(),\n      titleFr: z.string(),\n      content: z.string(),\n      contentFr: z.string(),\n      isEditable: z.boolean().default(true),\n      order: z.number().int(),\n    }),\n  ),\n  isDraft: z.boolean().default(true),\n});\n\nconst regenerateNewsletterSchema = z.object({\n  sections: z.array(\n    z.object({\n      id: z.string(),\n      title: z.string(),\n      titleFr: z.string(),\n      content: z.string(),\n      contentFr: z.string(),\n      isEditable: z.boolean(),\n      order: z.number().int(),\n    }),\n  ),\n  studentIds: z.array(z.number().int().positive()),\n  from: z.string().datetime(),\n  to: z.string().datetime(),\n  tone: z.enum(['friendly', 'formal', 'informative']).optional(),\n});\n\n// Generate newsletter content with AI\nrouter.post('/generate-newsletter', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const validation = generateNewsletterSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validation.error.flatten(),\n      });\n    }\n\n    const {\n      studentIds,\n      from,\n      to,\n      tone,\n      focusAreas,\n      includeArtifacts,\n      includeReflections,\n      includeLearningGoals,\n      includeUpcomingEvents,\n    } = validation.data;\n\n    // Verify all students belong to this teacher\n    const students = await prisma.student.findMany({\n      where: {\n        id: { in: studentIds },\n        userId: userId,\n      },\n      include: {\n        artifacts: {\n          where: {\n            createdAt: {\n              gte: new Date(from),\n              lte: new Date(to),\n            },\n          },\n        },\n        reflections: {\n          where: {\n            createdAt: {\n              gte: new Date(from),\n              lte: new Date(to),\n            },\n          },\n        },\n      },\n    });\n\n    if (students.length !== studentIds.length) {\n      return res.status(404).json({ error: 'One or more students not found' });\n    }\n\n    // Get daybook entries for the period\n    const daybookEntries = await prisma.daybookEntry.findMany({\n      where: {\n        userId: userId,\n        date: {\n          gte: new Date(from),\n          lte: new Date(to),\n        },\n      },\n      include: {\n        expectations: {\n          include: {\n            expectation: true,\n          },\n        },\n      },\n      orderBy: { date: 'asc' },\n    });\n\n    // Generate newsletter content using AI\n    const newsletterContent = await generateNewsletterContent({\n      students,\n      daybookEntries,\n      fromDate: new Date(from),\n      toDate: new Date(to),\n      tone,\n      focusAreas,\n      options: {\n        includeArtifacts,\n        includeReflections,\n        includeLearningGoals,\n        includeUpcomingEvents,\n      },\n    });\n\n    res.json(newsletterContent);\n  } catch (err) {\n    console.error('Error generating newsletter:', err);\n    next(err);\n  }\n});\n\n// Regenerate newsletter with variations\nrouter.post('/regenerate-newsletter', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const validation = regenerateNewsletterSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validation.error.flatten(),\n      });\n    }\n\n    const { sections, studentIds, from: _from, to: _to, tone: _tone } = validation.data;\n\n    // Verify all students belong to this teacher\n    const students = await prisma.student.findMany({\n      where: {\n        id: { in: studentIds },\n        userId: userId,\n      },\n    });\n\n    if (students.length !== studentIds.length) {\n      return res.status(404).json({ error: 'One or more students not found' });\n    }\n\n    // For regeneration, we'll create variations of existing content\n    // This is a simplified version - you might want to enhance this\n    const regeneratedContent = {\n      sections: sections.map((section) => ({\n        ...section,\n        // Add variation logic here\n        content: section.content + ' (Regenerated)',\n        contentFr: section.contentFr + ' (Régénéré)',\n      })),\n    };\n\n    res.json(regeneratedContent);\n  } catch (err) {\n    console.error('Error regenerating newsletter:', err);\n    next(err);\n  }\n});\n\n// Get all newsletters\nrouter.get('/', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const isDraft = req.query.isDraft === 'true';\n\n    const newsletters = await prisma.newsletter.findMany({\n      where: {\n        userId: userId,\n        ...(isDraft !== undefined && { isDraft }),\n      },\n      orderBy: { createdAt: 'desc' },\n    });\n\n    res.json(newsletters);\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Get a specific newsletter\nrouter.get('/:id', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const newsletter = await prisma.newsletter.findFirst({\n      where: {\n        id: req.params.id,\n        userId: userId,\n      },\n    });\n\n    if (!newsletter) {\n      return res.status(404).json({ error: 'Newsletter not found' });\n    }\n\n    res.json(newsletter);\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Save newsletter\nrouter.post('/', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const validation = saveNewsletterSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validation.error.flatten(),\n      });\n    }\n\n    const newsletterData = validation.data;\n\n    // Create newsletter\n    const newsletter = await prisma.newsletter.create({\n      data: {\n        userId: userId,\n        title: newsletterData.title,\n        titleFr: newsletterData.titleFr,\n        studentIds: newsletterData.studentIds,\n        dateFrom: new Date(newsletterData.dateFrom),\n        dateTo: new Date(newsletterData.dateTo),\n        tone: newsletterData.tone,\n        sections: newsletterData.sections,\n        isDraft: newsletterData.isDraft,\n      },\n    });\n\n    res.status(201).json(newsletter);\n  } catch (err) {\n    console.error('Error saving newsletter:', err);\n    next(err);\n  }\n});\n\n// Update newsletter\nrouter.put('/:id', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const validation = saveNewsletterSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validation.error.flatten(),\n      });\n    }\n\n    const newsletterData = validation.data;\n\n    // Verify ownership\n    const existing = await prisma.newsletter.findFirst({\n      where: {\n        id: req.params.id,\n        userId: userId,\n      },\n    });\n\n    if (!existing) {\n      return res.status(404).json({ error: 'Newsletter not found' });\n    }\n\n    // Update newsletter\n    const newsletter = await prisma.newsletter.update({\n      where: { id: req.params.id },\n      data: {\n        title: newsletterData.title,\n        titleFr: newsletterData.titleFr,\n        studentIds: newsletterData.studentIds,\n        dateFrom: new Date(newsletterData.dateFrom),\n        dateTo: new Date(newsletterData.dateTo),\n        tone: newsletterData.tone,\n        sections: newsletterData.sections,\n        isDraft: newsletterData.isDraft,\n      },\n    });\n\n    res.json(newsletter);\n  } catch (err) {\n    console.error('Error updating newsletter:', err);\n    next(err);\n  }\n});\n\n// Send newsletter\nrouter.post('/:id/send', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const newsletter = await prisma.newsletter.findFirst({\n      where: {\n        id: req.params.id,\n        userId: userId,\n      },\n    });\n\n    if (!newsletter) {\n      return res.status(404).json({ error: 'Newsletter not found' });\n    }\n\n    if (!newsletter.isDraft) {\n      return res.status(400).json({ error: 'Newsletter already sent' });\n    }\n\n    // Update newsletter as sent\n    await prisma.newsletter.update({\n      where: { id: req.params.id },\n      data: {\n        isDraft: false,\n        sentAt: new Date(),\n      },\n    });\n\n    // TODO: Implement actual email sending logic here\n    // For now, we'll just mark it as sent\n\n    res.json({ message: 'Newsletter sent successfully' });\n  } catch (err) {\n    console.error('Error sending newsletter:', err);\n    next(err);\n  }\n});\n\n// Delete newsletter\nrouter.delete('/:id', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const newsletter = await prisma.newsletter.findFirst({\n      where: {\n        id: req.params.id,\n        userId: userId,\n      },\n    });\n\n    if (!newsletter) {\n      return res.status(404).json({ error: 'Newsletter not found' });\n    }\n\n    await prisma.newsletter.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).send();\n  } catch (err) {\n    console.error('Error deleting newsletter:', err);\n    next(err);\n  }\n});\n\n// Get newsletter suggestions\nrouter.get('/suggestions', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Get recent students for the user\n    const recentStudents = await prisma.student.findMany({\n      where: { userId: userId },\n      take: 10,\n      orderBy: { updatedAt: 'desc' },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        grade: true,\n      },\n    });\n\n    // Get recent daybook entries for content suggestions\n    const recentEntries = await prisma.daybookEntry.findMany({\n      where: {\n        userId: userId,\n        date: {\n          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n        },\n      },\n      take: 5,\n      orderBy: { date: 'desc' },\n      include: {\n        expectations: {\n          include: {\n            expectation: true,\n          },\n        },\n      },\n    });\n\n    // Generate date range suggestions\n    const today = new Date();\n    const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const lastMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    const suggestions = {\n      students: recentStudents,\n      dateRanges: [\n        {\n          label: 'Last Week',\n          from: lastWeek.toISOString(),\n          to: today.toISOString(),\n        },\n        {\n          label: 'Last Month',\n          from: lastMonth.toISOString(),\n          to: today.toISOString(),\n        },\n      ],\n      toneOptions: ['friendly', 'formal', 'informative'],\n      focusAreas: [\n        'Mathematics',\n        'Language Arts',\n        'Science',\n        'Social Studies',\n        'Arts',\n        'Physical Education',\n        'French',\n      ],\n      recentTopics: recentEntries\n        .flatMap((entry) => entry.expectations.map((exp) => exp.expectation.description))\n        .slice(0, 10),\n    };\n\n    res.json(suggestions);\n  } catch (err) {\n    console.error('Error getting newsletter suggestions:', err);\n    next(err);\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}