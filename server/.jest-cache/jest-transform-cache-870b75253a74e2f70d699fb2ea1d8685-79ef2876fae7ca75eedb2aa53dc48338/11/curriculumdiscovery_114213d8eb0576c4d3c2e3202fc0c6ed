dd0185fcaf9d20de050f27eefdf48246
/* istanbul ignore next */
function cov_426r1k7zf() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-discovery.ts";
  var hash = "05d15908b93a26cf44aa0bf1b73902ea320c0db7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-discovery.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 23
        }
      },
      "1": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "2": {
        start: {
          line: 15,
          column: 30
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "3": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 52,
          column: 3
        }
      },
      "4": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "5": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 42
        }
      },
      "6": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "7": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "8": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 84
        }
      },
      "9": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 62
        }
      },
      "10": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 60
        }
      },
      "11": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 11
        }
      },
      "12": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 85,
          column: 3
        }
      },
      "13": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "14": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 71
        }
      },
      "15": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "16": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "17": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 40
        }
      },
      "18": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 81
        }
      },
      "19": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "20": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 53
        }
      },
      "21": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "22": {
        start: {
          line: 90,
          column: 0
        },
        end: {
          line: 105,
          column: 3
        }
      },
      "23": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "24": {
        start: {
          line: 92,
          column: 22
        },
        end: {
          line: 92,
          column: 68
        }
      },
      "25": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "26": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 49
        }
      },
      "27": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "28": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 143,
          column: 3
        }
      },
      "29": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 142,
          column: 5
        }
      },
      "30": {
        start: {
          line: 112,
          column: 31
        },
        end: {
          line: 116,
          column: 28
        }
      },
      "31": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 84
        }
      },
      "32": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "33": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "34": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "35": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 57
        }
      },
      "36": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "37": {
        start: {
          line: 148,
          column: 0
        },
        end: {
          line: 179,
          column: 3
        }
      },
      "38": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "39": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 150,
          column: 65
        }
      },
      "40": {
        start: {
          line: 151,
          column: 23
        },
        end: {
          line: 151,
          column: 64
        }
      },
      "41": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 152,
          column: 42
        }
      },
      "42": {
        start: {
          line: 153,
          column: 23
        },
        end: {
          line: 153,
          column: 91
        }
      },
      "43": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "44": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "45": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "46": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 56
        }
      },
      "47": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "48": {
        start: {
          line: 184,
          column: 0
        },
        end: {
          line: 227,
          column: 3
        }
      },
      "49": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "50": {
        start: {
          line: 186,
          column: 31
        },
        end: {
          line: 190,
          column: 28
        }
      },
      "51": {
        start: {
          line: 191,
          column: 23
        },
        end: {
          line: 191,
          column: 42
        }
      },
      "52": {
        start: {
          line: 193,
          column: 31
        },
        end: {
          line: 193,
          column: 92
        }
      },
      "53": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "54": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "55": {
        start: {
          line: 202,
          column: 30
        },
        end: {
          line: 202,
          column: 98
        }
      },
      "56": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "57": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "58": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 218,
          column: 11
        }
      },
      "59": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 60
        }
      },
      "60": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 225,
          column: 11
        }
      },
      "61": {
        start: {
          line: 232,
          column: 0
        },
        end: {
          line: 256,
          column: 3
        }
      },
      "62": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "63": {
        start: {
          line: 234,
          column: 31
        },
        end: {
          line: 238,
          column: 28
        }
      },
      "64": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 87
        }
      },
      "65": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "66": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 55
        }
      },
      "67": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 11
        }
      },
      "68": {
        start: {
          line: 261,
          column: 0
        },
        end: {
          line: 295,
          column: 3
        }
      },
      "69": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "70": {
        start: {
          line: 263,
          column: 31
        },
        end: {
          line: 263,
          column: 41
        }
      },
      "71": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "72": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 268,
          column: 15
        }
      },
      "73": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 270,
          column: 87
        }
      },
      "74": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "75": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 278,
          column: 15
        }
      },
      "76": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 285,
          column: 15
        }
      },
      "77": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 55
        }
      },
      "78": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 293,
          column: 11
        }
      },
      "79": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 346,
          column: 3
        }
      },
      "80": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "81": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "82": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "83": {
        start: {
          line: 335,
          column: 53
        },
        end: {
          line: 335,
          column: 63
        }
      },
      "84": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 51
        }
      },
      "85": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 344,
          column: 11
        }
      },
      "86": {
        start: {
          line: 351,
          column: 0
        },
        end: {
          line: 429,
          column: 3
        }
      },
      "87": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 428,
          column: 5
        }
      },
      "88": {
        start: {
          line: 353,
          column: 43
        },
        end: {
          line: 358,
          column: 28
        }
      },
      "89": {
        start: {
          line: 359,
          column: 23
        },
        end: {
          line: 359,
          column: 42
        }
      },
      "90": {
        start: {
          line: 360,
          column: 24
        },
        end: {
          line: 360,
          column: 26
        }
      },
      "91": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "92": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "93": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 389,
          column: 17
        }
      },
      "94": {
        start: {
          line: 366,
          column: 24
        },
        end: {
          line: 366,
          column: 95
        }
      },
      "95": {
        start: {
          line: 367,
          column: 24
        },
        end: {
          line: 367,
          column: 30
        }
      },
      "96": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 102
        }
      },
      "97": {
        start: {
          line: 370,
          column: 24
        },
        end: {
          line: 370,
          column: 30
        }
      },
      "98": {
        start: {
          line: 372,
          column: 47
        },
        end: {
          line: 372,
          column: 108
        }
      },
      "99": {
        start: {
          line: 373,
          column: 24
        },
        end: {
          line: 379,
          column: 25
        }
      },
      "100": {
        start: {
          line: 374,
          column: 28
        },
        end: {
          line: 374,
          column: 106
        }
      },
      "101": {
        start: {
          line: 375,
          column: 28
        },
        end: {
          line: 375,
          column: 70
        }
      },
      "102": {
        start: {
          line: 378,
          column: 28
        },
        end: {
          line: 378,
          column: 52
        }
      },
      "103": {
        start: {
          line: 380,
          column: 24
        },
        end: {
          line: 380,
          column: 30
        }
      },
      "104": {
        start: {
          line: 383,
          column: 44
        },
        end: {
          line: 383,
          column: 103
        }
      },
      "105": {
        start: {
          line: 384,
          column: 24
        },
        end: {
          line: 384,
          column: 64
        }
      },
      "106": {
        start: {
          line: 385,
          column: 24
        },
        end: {
          line: 385,
          column: 30
        }
      },
      "107": {
        start: {
          line: 388,
          column: 24
        },
        end: {
          line: 388,
          column: 80
        }
      },
      "108": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 395,
          column: 19
        }
      },
      "109": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 402,
          column: 19
        }
      },
      "110": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 70
        }
      },
      "111": {
        start: {
          line: 405,
          column: 43
        },
        end: {
          line: 405,
          column: 68
        }
      },
      "112": {
        start: {
          line: 407,
          column: 29
        },
        end: {
          line: 407,
          column: 68
        }
      },
      "113": {
        start: {
          line: 407,
          column: 51
        },
        end: {
          line: 407,
          column: 60
        }
      },
      "114": {
        start: {
          line: 408,
          column: 29
        },
        end: {
          line: 408,
          column: 58
        }
      },
      "115": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 420,
          column: 11
        }
      },
      "116": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 55
        }
      },
      "117": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 427,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 23,
            column: 42
          }
        },
        loc: {
          start: {
            line: 23,
            column: 61
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 38,
            column: 18
          },
          end: {
            line: 38,
            column: 19
          }
        },
        loc: {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 40,
            column: 9
          }
        },
        line: 38
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 19
          },
          end: {
            line: 41,
            column: 20
          }
        },
        loc: {
          start: {
            line: 41,
            column: 30
          },
          end: {
            line: 43,
            column: 9
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 41
          },
          end: {
            line: 57,
            column: 42
          }
        },
        loc: {
          start: {
            line: 57,
            column: 61
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 90,
            column: 37
          },
          end: {
            line: 90,
            column: 38
          }
        },
        loc: {
          start: {
            line: 90,
            column: 57
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 90
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 41
          },
          end: {
            line: 110,
            column: 42
          }
        },
        loc: {
          start: {
            line: 110,
            column: 61
          },
          end: {
            line: 143,
            column: 1
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 148,
            column: 40
          },
          end: {
            line: 148,
            column: 41
          }
        },
        loc: {
          start: {
            line: 148,
            column: 60
          },
          end: {
            line: 179,
            column: 1
          }
        },
        line: 148
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 184,
            column: 53
          },
          end: {
            line: 184,
            column: 54
          }
        },
        loc: {
          start: {
            line: 184,
            column: 73
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 184
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 232,
            column: 39
          },
          end: {
            line: 232,
            column: 40
          }
        },
        loc: {
          start: {
            line: 232,
            column: 59
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 232
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 261,
            column: 56
          },
          end: {
            line: 261,
            column: 57
          }
        },
        loc: {
          start: {
            line: 261,
            column: 76
          },
          end: {
            line: 295,
            column: 1
          }
        },
        line: 261
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 300,
            column: 39
          },
          end: {
            line: 300,
            column: 40
          }
        },
        loc: {
          start: {
            line: 300,
            column: 59
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 300
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 335,
            column: 46
          },
          end: {
            line: 335,
            column: 47
          }
        },
        loc: {
          start: {
            line: 335,
            column: 53
          },
          end: {
            line: 335,
            column: 63
          }
        },
        line: 335
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 351,
            column: 38
          },
          end: {
            line: 351,
            column: 39
          }
        },
        loc: {
          start: {
            line: 351,
            column: 58
          },
          end: {
            line: 429,
            column: 1
          }
        },
        line: 351
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 405,
            column: 30
          },
          end: {
            line: 405,
            column: 31
          }
        },
        loc: {
          start: {
            line: 405,
            column: 43
          },
          end: {
            line: 405,
            column: 68
          }
        },
        line: 405
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 407,
            column: 44
          },
          end: {
            line: 407,
            column: 45
          }
        },
        loc: {
          start: {
            line: 407,
            column: 51
          },
          end: {
            line: 407,
            column: 60
          }
        },
        line: 407
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "1": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: 128,
            column: 13
          },
          end: {
            line: 134,
            column: 9
          }
        }],
        line: 118
      },
      "2": {
        loc: {
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 35
          }
        }, {
          start: {
            line: 131,
            column: 39
          },
          end: {
            line: 131,
            column: 56
          }
        }],
        line: 131
      },
      "3": {
        loc: {
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 140,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 49
          },
          end: {
            line: 140,
            column: 61
          }
        }, {
          start: {
            line: 140,
            column: 64
          },
          end: {
            line: 140,
            column: 93
          }
        }],
        line: 140
      },
      "4": {
        loc: {
          start: {
            line: 151,
            column: 23
          },
          end: {
            line: 151,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 23
          },
          end: {
            line: 151,
            column: 41
          }
        }, {
          start: {
            line: 151,
            column: 45
          },
          end: {
            line: 151,
            column: 64
          }
        }],
        line: 151
      },
      "5": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: 164,
            column: 13
          },
          end: {
            line: 170,
            column: 9
          }
        }],
        line: 154
      },
      "6": {
        loc: {
          start: {
            line: 167,
            column: 23
          },
          end: {
            line: 167,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 23
          },
          end: {
            line: 167,
            column: 35
          }
        }, {
          start: {
            line: 167,
            column: 39
          },
          end: {
            line: 167,
            column: 58
          }
        }],
        line: 167
      },
      "7": {
        loc: {
          start: {
            line: 176,
            column: 19
          },
          end: {
            line: 176,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 49
          },
          end: {
            line: 176,
            column: 61
          }
        }, {
          start: {
            line: 176,
            column: 64
          },
          end: {
            line: 176,
            column: 92
          }
        }],
        line: 176
      },
      "8": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "9": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "10": {
        loc: {
          start: {
            line: 224,
            column: 19
          },
          end: {
            line: 224,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 224,
            column: 49
          },
          end: {
            line: 224,
            column: 61
          }
        }, {
          start: {
            line: 224,
            column: 64
          },
          end: {
            line: 224,
            column: 105
          }
        }],
        line: 224
      },
      "11": {
        loc: {
          start: {
            line: 253,
            column: 19
          },
          end: {
            line: 253,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 49
          },
          end: {
            line: 253,
            column: 61
          }
        }, {
          start: {
            line: 253,
            column: 64
          },
          end: {
            line: 253,
            column: 91
          }
        }],
        line: 253
      },
      "12": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "13": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: 280,
            column: 13
          },
          end: {
            line: 286,
            column: 9
          }
        }],
        line: 271
      },
      "14": {
        loc: {
          start: {
            line: 364,
            column: 16
          },
          end: {
            line: 389,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 365,
            column: 20
          },
          end: {
            line: 367,
            column: 30
          }
        }, {
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 370,
            column: 30
          }
        }, {
          start: {
            line: 371,
            column: 20
          },
          end: {
            line: 381,
            column: 21
          }
        }, {
          start: {
            line: 382,
            column: 20
          },
          end: {
            line: 386,
            column: 21
          }
        }, {
          start: {
            line: 387,
            column: 20
          },
          end: {
            line: 388,
            column: 80
          }
        }],
        line: 364
      },
      "15": {
        loc: {
          start: {
            line: 373,
            column: 24
          },
          end: {
            line: 379,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 24
          },
          end: {
            line: 379,
            column: 25
          }
        }, {
          start: {
            line: 377,
            column: 29
          },
          end: {
            line: 379,
            column: 25
          }
        }],
        line: 373
      },
      "16": {
        loc: {
          start: {
            line: 393,
            column: 26
          },
          end: {
            line: 393,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 393,
            column: 43
          },
          end: {
            line: 393,
            column: 49
          }
        }, {
          start: {
            line: 393,
            column: 52
          },
          end: {
            line: 393,
            column: 61
          }
        }],
        line: 393
      },
      "17": {
        loc: {
          start: {
            line: 394,
            column: 27
          },
          end: {
            line: 394,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 394,
            column: 44
          },
          end: {
            line: 394,
            column: 53
          }
        }, {
          start: {
            line: 394,
            column: 56
          },
          end: {
            line: 394,
            column: 68
          }
        }],
        line: 394
      },
      "18": {
        loc: {
          start: {
            line: 401,
            column: 27
          },
          end: {
            line: 401,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 401,
            column: 52
          },
          end: {
            line: 401,
            column: 65
          }
        }, {
          start: {
            line: 401,
            column: 68
          },
          end: {
            line: 401,
            column: 83
          }
        }],
        line: 401
      },
      "19": {
        loc: {
          start: {
            line: 426,
            column: 19
          },
          end: {
            line: 426,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 426,
            column: 49
          },
          end: {
            line: 426,
            column: 61
          }
        }, {
          start: {
            line: 426,
            column: 64
          },
          end: {
            line: 426,
            column: 99
          }
        }],
        line: 426
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-discovery.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-discovery.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { z } from 'zod';\nimport { authMiddleware } from '../middleware/auth';\nimport { curriculumDiscoveryService } from '../services/curriculumDiscoveryService';\n\nconst router = Router();\n\n// Validation schemas\nconst DiscoveryFilterSchema = z.object({\n  province: z.string().optional(),\n  grade: z.coerce.number().int().min(0).max(12).optional(),\n  subject: z.string().optional(),\n  language: z.enum(['en', 'fr', 'both']).optional(),\n  documentType: z.enum(['curriculum', 'guideline', 'assessment', 'resource']).optional(),\n  downloadStatus: z.enum(['pending', 'downloaded', 'processed', 'failed']).optional(),\n});\n\nconst ProcessDocumentSchema = z.object({\n  documentId: z.string().min(1),\n  userId: z.coerce.number().int().positive().optional(),\n});\n\n/**\n * Start discovery process for curriculum documents\n * POST /api/curriculum-discovery/discover\n */\nrouter.post('/discover', authMiddleware, async (req, res) => {\n  try {\n    const userId = Number(req.user!.id);\n\n    res.json({\n      success: true,\n      message: 'Discovery process started',\n      data: {\n        status: 'initiated',\n        userId,\n        timestamp: new Date().toISOString(),\n      },\n    });\n\n    // Start discovery process in background\n    curriculumDiscoveryService\n      .discoverDocuments()\n      .then((documents) => {\n        console.log(`Discovery completed: ${documents.length} documents found`);\n      })\n      .catch((error) => {\n        console.error('Discovery process failed:', error);\n      });\n  } catch (error) {\n    console.error('Discovery initiation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to start discovery process',\n    });\n  }\n});\n\n/**\n * Get discovered curriculum documents\n * GET /api/curriculum-discovery/documents\n */\nrouter.get('/documents', authMiddleware, async (req, res) => {\n  try {\n    const filterResult = DiscoveryFilterSchema.safeParse(req.query);\n\n    if (!filterResult.success) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid filter parameters',\n        details: filterResult.error.errors,\n      });\n    }\n\n    const filter = filterResult.data;\n    const documents = curriculumDiscoveryService.getDocumentsByFilter(filter);\n\n    res.json({\n      success: true,\n      data: {\n        documents,\n        total: documents.length,\n        filter,\n      },\n    });\n  } catch (error) {\n    console.error('Get documents error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve discovered documents',\n    });\n  }\n});\n\n/**\n * Get discovery statistics\n * GET /api/curriculum-discovery/stats\n */\nrouter.get('/stats', authMiddleware, async (req, res) => {\n  try {\n    const stats = curriculumDiscoveryService.getDiscoveryStats();\n\n    res.json({\n      success: true,\n      data: stats,\n    });\n  } catch (error) {\n    console.error('Get stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve discovery statistics',\n    });\n  }\n});\n\n/**\n * Download a specific curriculum document\n * POST /api/curriculum-discovery/download\n */\nrouter.post('/download', authMiddleware, async (req, res) => {\n  try {\n    const { documentId } = z\n      .object({\n        documentId: z.string().min(1),\n      })\n      .parse(req.body);\n\n    const result = await curriculumDiscoveryService.downloadDocument(documentId);\n\n    if (result.success) {\n      res.json({\n        success: true,\n        data: {\n          documentId,\n          filePath: result.filePath,\n          message: 'Document downloaded successfully',\n        },\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        error: result.error || 'Download failed',\n        data: { documentId },\n      });\n    }\n  } catch (error) {\n    console.error('Download document error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to download document',\n    });\n  }\n});\n\n/**\n * Process a downloaded document into curriculum import\n * POST /api/curriculum-discovery/process\n */\nrouter.post('/process', authMiddleware, async (req, res) => {\n  try {\n    const parseResult = ProcessDocumentSchema.parse(req.body);\n    const userId = parseResult.userId || Number(req.user!.id);\n    const { documentId } = parseResult;\n\n    const result = await curriculumDiscoveryService.processDocument(documentId, userId);\n\n    if (result.success) {\n      res.json({\n        success: true,\n        data: {\n          documentId,\n          importId: result.importId,\n          message: 'Document processed successfully',\n        },\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        error: result.error || 'Processing failed',\n        data: { documentId },\n      });\n    }\n  } catch (error) {\n    console.error('Process document error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to process document',\n    });\n  }\n});\n\n/**\n * Download and process a document in one step\n * POST /api/curriculum-discovery/download-and-process\n */\nrouter.post('/download-and-process', authMiddleware, async (req, res) => {\n  try {\n    const { documentId } = z\n      .object({\n        documentId: z.string().min(1),\n      })\n      .parse(req.body);\n\n    const userId = Number(req.user!.id);\n\n    // Step 1: Download document\n    const downloadResult = await curriculumDiscoveryService.downloadDocument(documentId);\n    if (!downloadResult.success) {\n      return res.status(400).json({\n        success: false,\n        error: `Download failed: ${downloadResult.error}`,\n        data: { documentId, step: 'download' },\n      });\n    }\n\n    // Step 2: Process document\n    const processResult = await curriculumDiscoveryService.processDocument(documentId, userId);\n    if (!processResult.success) {\n      return res.status(400).json({\n        success: false,\n        error: `Processing failed: ${processResult.error}`,\n        data: { documentId, step: 'process' },\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        documentId,\n        importId: processResult.importId,\n        filePath: downloadResult.filePath,\n        message: 'Document downloaded and processed successfully',\n      },\n    });\n  } catch (error) {\n    console.error('Download and process error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to download and process document',\n    });\n  }\n});\n\n/**\n * Verify document availability\n * POST /api/curriculum-discovery/verify\n */\nrouter.post('/verify', authMiddleware, async (req, res) => {\n  try {\n    const { documentId } = z\n      .object({\n        documentId: z.string().min(1),\n      })\n      .parse(req.body);\n\n    const isAvailable = await curriculumDiscoveryService.verifyDocument(documentId);\n\n    res.json({\n      success: true,\n      data: {\n        documentId,\n        isAvailable,\n        verifiedAt: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    console.error('Verify document error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to verify document',\n    });\n  }\n});\n\n/**\n * Remove a discovered document\n * DELETE /api/curriculum-discovery/documents/:documentId\n */\nrouter.delete('/documents/:documentId', authMiddleware, async (req, res) => {\n  try {\n    const { documentId } = req.params;\n\n    if (!documentId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Document ID is required',\n      });\n    }\n\n    const removed = curriculumDiscoveryService.removeDiscoveredDocument(documentId);\n\n    if (removed) {\n      res.json({\n        success: true,\n        data: {\n          documentId,\n          message: 'Document removed from discovery results',\n        },\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        error: 'Document not found',\n        data: { documentId },\n      });\n    }\n  } catch (error) {\n    console.error('Remove document error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to remove document',\n    });\n  }\n});\n\n/**\n * Get discovery sources and their status\n * GET /api/curriculum-discovery/sources\n */\nrouter.get('/sources', authMiddleware, async (req, res) => {\n  try {\n    // This would be implemented if sources were stored in database\n    // For now, return static information about configured sources\n    const sources = [\n      {\n        id: 'pei-gov',\n        name: 'Prince Edward Island Department of Education',\n        province: 'PE',\n        isActive: true,\n        lastScanDate: null,\n        documentCount: curriculumDiscoveryService.getDocumentsByFilter({ province: 'PE' }).length,\n      },\n      {\n        id: 'ontario-edu',\n        name: 'Ontario Ministry of Education',\n        province: 'ON',\n        isActive: true,\n        lastScanDate: null,\n        documentCount: curriculumDiscoveryService.getDocumentsByFilter({ province: 'ON' }).length,\n      },\n      {\n        id: 'bc-gov',\n        name: 'British Columbia Ministry of Education',\n        province: 'BC',\n        isActive: true,\n        lastScanDate: null,\n        documentCount: curriculumDiscoveryService.getDocumentsByFilter({ province: 'BC' }).length,\n      },\n    ];\n\n    res.json({\n      success: true,\n      data: {\n        sources,\n        totalSources: sources.length,\n        activeSources: sources.filter((s) => s.isActive).length,\n      },\n    });\n  } catch (error) {\n    console.error('Get sources error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve discovery sources',\n    });\n  }\n});\n\n/**\n * Batch operations for multiple documents\n * POST /api/curriculum-discovery/batch\n */\nrouter.post('/batch', authMiddleware, async (req, res) => {\n  try {\n    const { operation, documentIds } = z\n      .object({\n        operation: z.enum(['download', 'process', 'download-and-process', 'verify']),\n        documentIds: z.array(z.string().min(1)).min(1).max(10), // Limit batch size\n      })\n      .parse(req.body);\n\n    const userId = Number(req.user!.id);\n    const results: Array<{\n      documentId: string;\n      success: boolean;\n      data?: unknown;\n      error?: string;\n    }> = [];\n\n    for (const documentId of documentIds) {\n      try {\n        let result: { success: boolean; [key: string]: unknown };\n\n        switch (operation) {\n          case 'download':\n            result = await curriculumDiscoveryService.downloadDocument(documentId);\n            break;\n          case 'process':\n            result = await curriculumDiscoveryService.processDocument(documentId, userId);\n            break;\n          case 'download-and-process': {\n            const downloadResult = await curriculumDiscoveryService.downloadDocument(documentId);\n            if (downloadResult.success) {\n              result = await curriculumDiscoveryService.processDocument(documentId, userId);\n              result.filePath = downloadResult.filePath;\n            } else {\n              result = downloadResult;\n            }\n            break;\n          }\n          case 'verify': {\n            const isAvailable = await curriculumDiscoveryService.verifyDocument(documentId);\n            result = { success: true, isAvailable };\n            break;\n          }\n          default:\n            result = { success: false, error: 'Unknown operation' };\n        }\n\n        results.push({\n          documentId,\n          success: result.success,\n          data: result.success ? result : undefined,\n          error: result.success ? undefined : (result.error as string),\n        });\n      } catch (error) {\n        results.push({\n          documentId,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n\n      // Add delay between batch operations to avoid overwhelming sources\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    const successCount = results.filter((r) => r.success).length;\n    const failureCount = results.length - successCount;\n\n    res.json({\n      success: true,\n      data: {\n        operation,\n        results,\n        summary: {\n          total: results.length,\n          successful: successCount,\n          failed: failureCount,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Batch operation error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to perform batch operation',\n    });\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "05d15908b93a26cf44aa0bf1b73902ea320c0db7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_426r1k7zf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_426r1k7zf();
import { Router } from 'express';
import { z } from 'zod';
import { authMiddleware } from '../middleware/auth';
import { curriculumDiscoveryService } from '../services/curriculumDiscoveryService';
const router =
/* istanbul ignore next */
(cov_426r1k7zf().s[0]++, Router());
// Validation schemas
const DiscoveryFilterSchema =
/* istanbul ignore next */
(cov_426r1k7zf().s[1]++, z.object({
  province: z.string().optional(),
  grade: z.coerce.number().int().min(0).max(12).optional(),
  subject: z.string().optional(),
  language: z.enum(['en', 'fr', 'both']).optional(),
  documentType: z.enum(['curriculum', 'guideline', 'assessment', 'resource']).optional(),
  downloadStatus: z.enum(['pending', 'downloaded', 'processed', 'failed']).optional()
}));
const ProcessDocumentSchema =
/* istanbul ignore next */
(cov_426r1k7zf().s[2]++, z.object({
  documentId: z.string().min(1),
  userId: z.coerce.number().int().positive().optional()
}));
/**
 * Start discovery process for curriculum documents
 * POST /api/curriculum-discovery/discover
 */
/* istanbul ignore next */
cov_426r1k7zf().s[3]++;
router.post('/discover', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[0]++;
  cov_426r1k7zf().s[4]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[5]++, Number(req.user.id));
    /* istanbul ignore next */
    cov_426r1k7zf().s[6]++;
    res.json({
      success: true,
      message: 'Discovery process started',
      data: {
        status: 'initiated',
        userId,
        timestamp: new Date().toISOString()
      }
    });
    // Start discovery process in background
    /* istanbul ignore next */
    cov_426r1k7zf().s[7]++;
    curriculumDiscoveryService.discoverDocuments().then(documents => {
      /* istanbul ignore next */
      cov_426r1k7zf().f[1]++;
      cov_426r1k7zf().s[8]++;
      console.log(`Discovery completed: ${documents.length} documents found`);
    }).catch(error => {
      /* istanbul ignore next */
      cov_426r1k7zf().f[2]++;
      cov_426r1k7zf().s[9]++;
      console.error('Discovery process failed:', error);
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[10]++;
    console.error('Discovery initiation error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[11]++;
    res.status(500).json({
      success: false,
      error: 'Failed to start discovery process'
    });
  }
});
/**
 * Get discovered curriculum documents
 * GET /api/curriculum-discovery/documents
 */
/* istanbul ignore next */
cov_426r1k7zf().s[12]++;
router.get('/documents', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[3]++;
  cov_426r1k7zf().s[13]++;
  try {
    const filterResult =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[14]++, DiscoveryFilterSchema.safeParse(req.query));
    /* istanbul ignore next */
    cov_426r1k7zf().s[15]++;
    if (!filterResult.success) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[0][0]++;
      cov_426r1k7zf().s[16]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid filter parameters',
        details: filterResult.error.errors
      });
    } else
    /* istanbul ignore next */
    {
      cov_426r1k7zf().b[0][1]++;
    }
    const filter =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[17]++, filterResult.data);
    const documents =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[18]++, curriculumDiscoveryService.getDocumentsByFilter(filter));
    /* istanbul ignore next */
    cov_426r1k7zf().s[19]++;
    res.json({
      success: true,
      data: {
        documents,
        total: documents.length,
        filter
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[20]++;
    console.error('Get documents error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[21]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve discovered documents'
    });
  }
});
/**
 * Get discovery statistics
 * GET /api/curriculum-discovery/stats
 */
/* istanbul ignore next */
cov_426r1k7zf().s[22]++;
router.get('/stats', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[4]++;
  cov_426r1k7zf().s[23]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[24]++, curriculumDiscoveryService.getDiscoveryStats());
    /* istanbul ignore next */
    cov_426r1k7zf().s[25]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[26]++;
    console.error('Get stats error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[27]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve discovery statistics'
    });
  }
});
/**
 * Download a specific curriculum document
 * POST /api/curriculum-discovery/download
 */
/* istanbul ignore next */
cov_426r1k7zf().s[28]++;
router.post('/download', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[5]++;
  cov_426r1k7zf().s[29]++;
  try {
    const {
      documentId
    } =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[30]++, z.object({
      documentId: z.string().min(1)
    }).parse(req.body));
    const result =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[31]++, await curriculumDiscoveryService.downloadDocument(documentId));
    /* istanbul ignore next */
    cov_426r1k7zf().s[32]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[1][0]++;
      cov_426r1k7zf().s[33]++;
      res.json({
        success: true,
        data: {
          documentId,
          filePath: result.filePath,
          message: 'Document downloaded successfully'
        }
      });
    } else {
      /* istanbul ignore next */
      cov_426r1k7zf().b[1][1]++;
      cov_426r1k7zf().s[34]++;
      res.status(400).json({
        success: false,
        error:
        /* istanbul ignore next */
        (cov_426r1k7zf().b[2][0]++, result.error) ||
        /* istanbul ignore next */
        (cov_426r1k7zf().b[2][1]++, 'Download failed'),
        data: {
          documentId
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[35]++;
    console.error('Download document error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[36]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_426r1k7zf().b[3][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_426r1k7zf().b[3][1]++, 'Failed to download document')
    });
  }
});
/**
 * Process a downloaded document into curriculum import
 * POST /api/curriculum-discovery/process
 */
/* istanbul ignore next */
cov_426r1k7zf().s[37]++;
router.post('/process', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[6]++;
  cov_426r1k7zf().s[38]++;
  try {
    const parseResult =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[39]++, ProcessDocumentSchema.parse(req.body));
    const userId =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[40]++,
    /* istanbul ignore next */
    (cov_426r1k7zf().b[4][0]++, parseResult.userId) ||
    /* istanbul ignore next */
    (cov_426r1k7zf().b[4][1]++, Number(req.user.id)));
    const {
      documentId
    } =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[41]++, parseResult);
    const result =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[42]++, await curriculumDiscoveryService.processDocument(documentId, userId));
    /* istanbul ignore next */
    cov_426r1k7zf().s[43]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[5][0]++;
      cov_426r1k7zf().s[44]++;
      res.json({
        success: true,
        data: {
          documentId,
          importId: result.importId,
          message: 'Document processed successfully'
        }
      });
    } else {
      /* istanbul ignore next */
      cov_426r1k7zf().b[5][1]++;
      cov_426r1k7zf().s[45]++;
      res.status(400).json({
        success: false,
        error:
        /* istanbul ignore next */
        (cov_426r1k7zf().b[6][0]++, result.error) ||
        /* istanbul ignore next */
        (cov_426r1k7zf().b[6][1]++, 'Processing failed'),
        data: {
          documentId
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[46]++;
    console.error('Process document error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[47]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_426r1k7zf().b[7][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_426r1k7zf().b[7][1]++, 'Failed to process document')
    });
  }
});
/**
 * Download and process a document in one step
 * POST /api/curriculum-discovery/download-and-process
 */
/* istanbul ignore next */
cov_426r1k7zf().s[48]++;
router.post('/download-and-process', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[7]++;
  cov_426r1k7zf().s[49]++;
  try {
    const {
      documentId
    } =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[50]++, z.object({
      documentId: z.string().min(1)
    }).parse(req.body));
    const userId =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[51]++, Number(req.user.id));
    // Step 1: Download document
    const downloadResult =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[52]++, await curriculumDiscoveryService.downloadDocument(documentId));
    /* istanbul ignore next */
    cov_426r1k7zf().s[53]++;
    if (!downloadResult.success) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[8][0]++;
      cov_426r1k7zf().s[54]++;
      return res.status(400).json({
        success: false,
        error: `Download failed: ${downloadResult.error}`,
        data: {
          documentId,
          step: 'download'
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_426r1k7zf().b[8][1]++;
    }
    // Step 2: Process document
    const processResult =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[55]++, await curriculumDiscoveryService.processDocument(documentId, userId));
    /* istanbul ignore next */
    cov_426r1k7zf().s[56]++;
    if (!processResult.success) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[9][0]++;
      cov_426r1k7zf().s[57]++;
      return res.status(400).json({
        success: false,
        error: `Processing failed: ${processResult.error}`,
        data: {
          documentId,
          step: 'process'
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_426r1k7zf().b[9][1]++;
    }
    cov_426r1k7zf().s[58]++;
    res.json({
      success: true,
      data: {
        documentId,
        importId: processResult.importId,
        filePath: downloadResult.filePath,
        message: 'Document downloaded and processed successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[59]++;
    console.error('Download and process error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[60]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_426r1k7zf().b[10][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_426r1k7zf().b[10][1]++, 'Failed to download and process document')
    });
  }
});
/**
 * Verify document availability
 * POST /api/curriculum-discovery/verify
 */
/* istanbul ignore next */
cov_426r1k7zf().s[61]++;
router.post('/verify', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[8]++;
  cov_426r1k7zf().s[62]++;
  try {
    const {
      documentId
    } =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[63]++, z.object({
      documentId: z.string().min(1)
    }).parse(req.body));
    const isAvailable =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[64]++, await curriculumDiscoveryService.verifyDocument(documentId));
    /* istanbul ignore next */
    cov_426r1k7zf().s[65]++;
    res.json({
      success: true,
      data: {
        documentId,
        isAvailable,
        verifiedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[66]++;
    console.error('Verify document error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[67]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_426r1k7zf().b[11][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_426r1k7zf().b[11][1]++, 'Failed to verify document')
    });
  }
});
/**
 * Remove a discovered document
 * DELETE /api/curriculum-discovery/documents/:documentId
 */
/* istanbul ignore next */
cov_426r1k7zf().s[68]++;
router.delete('/documents/:documentId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[9]++;
  cov_426r1k7zf().s[69]++;
  try {
    const {
      documentId
    } =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[70]++, req.params);
    /* istanbul ignore next */
    cov_426r1k7zf().s[71]++;
    if (!documentId) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[12][0]++;
      cov_426r1k7zf().s[72]++;
      return res.status(400).json({
        success: false,
        error: 'Document ID is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_426r1k7zf().b[12][1]++;
    }
    const removed =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[73]++, curriculumDiscoveryService.removeDiscoveredDocument(documentId));
    /* istanbul ignore next */
    cov_426r1k7zf().s[74]++;
    if (removed) {
      /* istanbul ignore next */
      cov_426r1k7zf().b[13][0]++;
      cov_426r1k7zf().s[75]++;
      res.json({
        success: true,
        data: {
          documentId,
          message: 'Document removed from discovery results'
        }
      });
    } else {
      /* istanbul ignore next */
      cov_426r1k7zf().b[13][1]++;
      cov_426r1k7zf().s[76]++;
      res.status(404).json({
        success: false,
        error: 'Document not found',
        data: {
          documentId
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[77]++;
    console.error('Remove document error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[78]++;
    res.status(500).json({
      success: false,
      error: 'Failed to remove document'
    });
  }
});
/**
 * Get discovery sources and their status
 * GET /api/curriculum-discovery/sources
 */
/* istanbul ignore next */
cov_426r1k7zf().s[79]++;
router.get('/sources', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[10]++;
  cov_426r1k7zf().s[80]++;
  try {
    // This would be implemented if sources were stored in database
    // For now, return static information about configured sources
    const sources =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[81]++, [{
      id: 'pei-gov',
      name: 'Prince Edward Island Department of Education',
      province: 'PE',
      isActive: true,
      lastScanDate: null,
      documentCount: curriculumDiscoveryService.getDocumentsByFilter({
        province: 'PE'
      }).length
    }, {
      id: 'ontario-edu',
      name: 'Ontario Ministry of Education',
      province: 'ON',
      isActive: true,
      lastScanDate: null,
      documentCount: curriculumDiscoveryService.getDocumentsByFilter({
        province: 'ON'
      }).length
    }, {
      id: 'bc-gov',
      name: 'British Columbia Ministry of Education',
      province: 'BC',
      isActive: true,
      lastScanDate: null,
      documentCount: curriculumDiscoveryService.getDocumentsByFilter({
        province: 'BC'
      }).length
    }]);
    /* istanbul ignore next */
    cov_426r1k7zf().s[82]++;
    res.json({
      success: true,
      data: {
        sources,
        totalSources: sources.length,
        activeSources: sources.filter(s => {
          /* istanbul ignore next */
          cov_426r1k7zf().f[11]++;
          cov_426r1k7zf().s[83]++;
          return s.isActive;
        }).length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[84]++;
    console.error('Get sources error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[85]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve discovery sources'
    });
  }
});
/**
 * Batch operations for multiple documents
 * POST /api/curriculum-discovery/batch
 */
/* istanbul ignore next */
cov_426r1k7zf().s[86]++;
router.post('/batch', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_426r1k7zf().f[12]++;
  cov_426r1k7zf().s[87]++;
  try {
    const {
      operation,
      documentIds
    } =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[88]++, z.object({
      operation: z.enum(['download', 'process', 'download-and-process', 'verify']),
      documentIds: z.array(z.string().min(1)).min(1).max(10) // Limit batch size
    }).parse(req.body));
    const userId =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[89]++, Number(req.user.id));
    const results =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[90]++, []);
    /* istanbul ignore next */
    cov_426r1k7zf().s[91]++;
    for (const documentId of documentIds) {
      /* istanbul ignore next */
      cov_426r1k7zf().s[92]++;
      try {
        let result;
        /* istanbul ignore next */
        cov_426r1k7zf().s[93]++;
        switch (operation) {
          case 'download':
            /* istanbul ignore next */
            cov_426r1k7zf().b[14][0]++;
            cov_426r1k7zf().s[94]++;
            result = await curriculumDiscoveryService.downloadDocument(documentId);
            /* istanbul ignore next */
            cov_426r1k7zf().s[95]++;
            break;
          case 'process':
            /* istanbul ignore next */
            cov_426r1k7zf().b[14][1]++;
            cov_426r1k7zf().s[96]++;
            result = await curriculumDiscoveryService.processDocument(documentId, userId);
            /* istanbul ignore next */
            cov_426r1k7zf().s[97]++;
            break;
          case 'download-and-process':
            /* istanbul ignore next */
            cov_426r1k7zf().b[14][2]++;
            {
              const downloadResult =
              /* istanbul ignore next */
              (cov_426r1k7zf().s[98]++, await curriculumDiscoveryService.downloadDocument(documentId));
              /* istanbul ignore next */
              cov_426r1k7zf().s[99]++;
              if (downloadResult.success) {
                /* istanbul ignore next */
                cov_426r1k7zf().b[15][0]++;
                cov_426r1k7zf().s[100]++;
                result = await curriculumDiscoveryService.processDocument(documentId, userId);
                /* istanbul ignore next */
                cov_426r1k7zf().s[101]++;
                result.filePath = downloadResult.filePath;
              } else {
                /* istanbul ignore next */
                cov_426r1k7zf().b[15][1]++;
                cov_426r1k7zf().s[102]++;
                result = downloadResult;
              }
              /* istanbul ignore next */
              cov_426r1k7zf().s[103]++;
              break;
            }
          case 'verify':
            /* istanbul ignore next */
            cov_426r1k7zf().b[14][3]++;
            {
              const isAvailable =
              /* istanbul ignore next */
              (cov_426r1k7zf().s[104]++, await curriculumDiscoveryService.verifyDocument(documentId));
              /* istanbul ignore next */
              cov_426r1k7zf().s[105]++;
              result = {
                success: true,
                isAvailable
              };
              /* istanbul ignore next */
              cov_426r1k7zf().s[106]++;
              break;
            }
          default:
            /* istanbul ignore next */
            cov_426r1k7zf().b[14][4]++;
            cov_426r1k7zf().s[107]++;
            result = {
              success: false,
              error: 'Unknown operation'
            };
        }
        /* istanbul ignore next */
        cov_426r1k7zf().s[108]++;
        results.push({
          documentId,
          success: result.success,
          data: result.success ?
          /* istanbul ignore next */
          (cov_426r1k7zf().b[16][0]++, result) :
          /* istanbul ignore next */
          (cov_426r1k7zf().b[16][1]++, undefined),
          error: result.success ?
          /* istanbul ignore next */
          (cov_426r1k7zf().b[17][0]++, undefined) :
          /* istanbul ignore next */
          (cov_426r1k7zf().b[17][1]++, result.error)
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_426r1k7zf().s[109]++;
        results.push({
          documentId,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_426r1k7zf().b[18][0]++, error.message) :
          /* istanbul ignore next */
          (cov_426r1k7zf().b[18][1]++, 'Unknown error')
        });
      }
      // Add delay between batch operations to avoid overwhelming sources
      /* istanbul ignore next */
      cov_426r1k7zf().s[110]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_426r1k7zf().f[13]++;
        cov_426r1k7zf().s[111]++;
        return setTimeout(resolve, 1000);
      });
    }
    const successCount =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[112]++, results.filter(r => {
      /* istanbul ignore next */
      cov_426r1k7zf().f[14]++;
      cov_426r1k7zf().s[113]++;
      return r.success;
    }).length);
    const failureCount =
    /* istanbul ignore next */
    (cov_426r1k7zf().s[114]++, results.length - successCount);
    /* istanbul ignore next */
    cov_426r1k7zf().s[115]++;
    res.json({
      success: true,
      data: {
        operation,
        results,
        summary: {
          total: results.length,
          successful: successCount,
          failed: failureCount
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_426r1k7zf().s[116]++;
    console.error('Batch operation error:', error);
    /* istanbul ignore next */
    cov_426r1k7zf().s[117]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_426r1k7zf().b[19][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_426r1k7zf().b[19][1]++, 'Failed to perform batch operation')
    });
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,