{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/baseService.unit.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/baseService.unit.test.ts"],"sourcesContent":["import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\n\n// Logger is already mocked in setup-all-mocks.ts\n\nimport BaseService from '../../src/services/base/BaseService';\n\n// Create a test service that extends BaseService\nclass TestService extends BaseService {\n  constructor() {\n    super('TestService');\n  }\n\n  // Expose protected methods for testing\n  async testWithRetry<T>(operation: () => Promise<T>, options?: unknown) {\n    return this.withRetry(operation, options);\n  }\n\n  async testWithTransaction<T>(operation: (tx: unknown) => Promise<T>) {\n    return this.withTransaction(operation);\n  }\n\n  async testWithParallel<T>(operations: (() => Promise<T>)[], options?: unknown) {\n    return this.withParallel(operations, options);\n  }\n\n  testHandleError(error: unknown, context?: Record<string, unknown>): never {\n    return this.handleError(error, context);\n  }\n\n  testValidateRequired(params: Record<string, unknown>, required: string[]) {\n    return this.validateRequired(params, required);\n  }\n\n  testSanitizeInput<T extends Record<string, unknown>>(input: T, schema: unknown) {\n    return this.sanitizeInput(input, schema);\n  }\n}\n\ndescribe('BaseService', () => {\n  let testService: TestService;\n\n  beforeEach(() => {\n    testService = new TestService();\n\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n\n    // Force inject logger if needed\n    if (!testService['logger']) {\n      testService['logger'] = {\n        debug: jest.fn(),\n        info: jest.fn(),\n        warn: jest.fn(),\n        error: jest.fn(),\n        child: jest.fn(function () {\n          return this;\n        }),\n      };\n    }\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    jest.restoreAllMocks();\n  });\n\n  describe('withRetry', () => {\n    it('should execute operation successfully on first try', async () => {\n      const mockOperation = jest.fn().mockResolvedValue('success');\n\n      const result = await testService.testWithRetry(mockOperation);\n\n      expect(result).toBe('success');\n      expect(mockOperation).toHaveBeenCalledTimes(1);\n    });\n\n    it('should retry on failure and succeed', async () => {\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('First failure'))\n        .mockRejectedValueOnce(new Error('Second failure'))\n        .mockResolvedValue('success');\n\n      const resultPromise = testService.testWithRetry(mockOperation, {\n        maxRetries: 3,\n        baseDelay: 0, // No delay for tests\n        maxDelay: 0,\n      });\n\n      // Even with 0 delay, we need to advance timers\n      await jest.runAllTimersAsync();\n\n      const result = await resultPromise;\n\n      expect(result).toBe('success');\n      expect(mockOperation).toHaveBeenCalledTimes(3);\n    }, 10000);\n\n    it.skip('should fail after max retries', async () => {\n      const mockOperation = jest.fn();\n      mockOperation.mockRejectedValue(new Error('Persistent failure'));\n\n      const promise = testService.testWithRetry(mockOperation, {\n        maxRetries: 2,\n        baseDelay: 0,\n        maxDelay: 0,\n      });\n\n      // Advance timers to handle retries\n      jest.runAllTimers();\n\n      await expect(promise).rejects.toThrow('Persistent failure');\n      expect(mockOperation).toHaveBeenCalledTimes(3); // Initial + 2 retries\n    });\n\n    it('should use exponential backoff', async () => {\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('Failure 1'))\n        .mockRejectedValueOnce(new Error('Failure 2'))\n        .mockResolvedValue('success');\n\n      const setTimeoutSpy = jest.spyOn(global, 'setTimeout');\n\n      const resultPromise = testService.testWithRetry(mockOperation, {\n        maxRetries: 2,\n        baseDelay: 100,\n        exponentialBackoff: true,\n      });\n\n      // Advance timers and flush promises\n      await jest.advanceTimersByTimeAsync(100); // First retry after 100ms\n      await jest.advanceTimersByTimeAsync(200); // Second retry after 200ms (exponential)\n\n      await resultPromise;\n\n      // Check that delays were applied correctly\n      expect(setTimeoutSpy).toHaveBeenCalledWith(expect.any(Function), 100);\n      expect(setTimeoutSpy).toHaveBeenCalledWith(expect.any(Function), 200);\n    });\n\n    it('should respect maxDelay', async () => {\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('Failure'))\n        .mockResolvedValue('success');\n\n      const setTimeoutSpy = jest.spyOn(global, 'setTimeout');\n\n      const resultPromise = testService.testWithRetry(mockOperation, {\n        maxRetries: 5,\n        baseDelay: 1000,\n        maxDelay: 2000,\n        exponentialBackoff: true,\n      });\n\n      await jest.runAllTimersAsync();\n      await resultPromise;\n\n      // Even with exponential backoff, delay should not exceed maxDelay\n      const delays = setTimeoutSpy.mock.calls.map((call) => call[1]);\n      expect(Math.max(...delays)).toBeLessThanOrEqual(2000);\n    });\n  });\n\n  describe('withTransaction', () => {\n    it('should execute operation within transaction', async () => {\n      const mockOperation = jest.fn().mockResolvedValue('result');\n\n      // Mock prisma for transaction\n      const mockPrisma = {\n        $transaction: jest.fn().mockImplementation((fn) => {\n          if (typeof fn === 'function') {\n            return fn(mockPrisma);\n          }\n          return Promise.resolve(fn);\n        }),\n      };\n\n      // Inject mock prisma into service\n      (testService as Record<string, unknown>).prisma = mockPrisma;\n\n      const result = await testService.testWithTransaction(mockOperation);\n\n      expect(result).toBe('result');\n      expect(mockOperation).toHaveBeenCalled();\n      expect(mockPrisma.$transaction).toHaveBeenCalled();\n    });\n\n    it('should retry transaction on failure', async () => {\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('Transaction failed'))\n        .mockResolvedValue('success');\n\n      // Mock setTimeout to advance timers instantly\n      const originalSetTimeout = global.setTimeout;\n      global.setTimeout = ((fn: () => void) => {\n        fn();\n        return {} as NodeJS.Timeout;\n      }) as typeof setTimeout;\n\n      try {\n        const result = await testService.testWithRetry(mockOperation, {\n          maxRetries: 2,\n          baseDelay: 1000, // Doesn't matter since we mock setTimeout\n        });\n\n        expect(result).toBe('success');\n        expect(mockOperation).toHaveBeenCalledTimes(2);\n      } finally {\n        // Restore original setTimeout\n        global.setTimeout = originalSetTimeout;\n      }\n    });\n  });\n\n  describe('withParallel', () => {\n    it('should execute operations in parallel', async () => {\n      const operations = [\n        jest.fn().mockResolvedValue('result1'),\n        jest.fn().mockResolvedValue('result2'),\n        jest.fn().mockResolvedValue('result3'),\n      ];\n\n      const result = await testService.testWithParallel(operations);\n\n      expect(result.results).toEqual(['result1', 'result2', 'result3']);\n      expect(result.errors).toEqual([null, null, null]);\n      expect(result.successCount).toBe(3);\n      operations.forEach((op) => expect(op).toHaveBeenCalledTimes(1));\n    });\n\n    it('should handle mixed success and failure', async () => {\n      const operations = [\n        jest.fn().mockResolvedValue('result1'),\n        jest.fn().mockRejectedValue(new Error('Failed')),\n        jest.fn().mockResolvedValue('result3'),\n      ];\n\n      const result = await testService.testWithParallel(operations);\n\n      expect(result.results).toEqual(['result1', null, 'result3']);\n      expect(result.errors[0]).toBeNull();\n      expect(result.errors[1]).toBeInstanceOf(Error);\n      expect(result.errors[2]).toBeNull();\n      expect(result.successCount).toBe(2);\n    });\n\n    it.skip('should fail fast when option is set', async () => {\n      const operations = [\n        jest.fn().mockResolvedValue('result1'),\n        jest.fn().mockRejectedValue(new Error('Failed')),\n        jest.fn().mockResolvedValue('result3'),\n      ];\n\n      await expect(testService.testWithParallel(operations, { failFast: true })).rejects.toThrow(\n        'Failed',\n      );\n\n      // Third operation should not be called due to fail fast\n      expect(operations[2]).not.toHaveBeenCalled();\n    });\n\n    it.skip('should respect maxConcurrency', async () => {\n      // Use real timers for this test\n      jest.useRealTimers();\n\n      let concurrent = 0;\n      let maxConcurrent = 0;\n\n      const operations = Array(10)\n        .fill(null)\n        .map(() =>\n          jest.fn().mockImplementation(async () => {\n            concurrent++;\n            maxConcurrent = Math.max(maxConcurrent, concurrent);\n            await new Promise((resolve) => setTimeout(resolve, 10));\n            concurrent--;\n            return 'result';\n          }),\n        );\n\n      const result = await testService.testWithParallel(operations, { maxConcurrency: 3 });\n\n      expect(maxConcurrent).toBeLessThanOrEqual(3);\n      expect(result.successCount).toBe(10);\n\n      // Restore fake timers\n      jest.useFakeTimers();\n    }, 10000); // Add explicit timeout\n  });\n\n  describe('handleError', () => {\n    it('should handle Error instances', () => {\n      const error = new Error('Test error');\n\n      expect(() => {\n        testService.testHandleError(error, { userId: 123 });\n      }).toThrow('TestService: Test error');\n    });\n\n    it('should handle non-Error objects', () => {\n      expect(() => {\n        testService.testHandleError('String error');\n      }).toThrow('TestService: Unknown error');\n\n      expect(() => {\n        testService.testHandleError({ message: 'Object error' });\n      }).toThrow('TestService: Unknown error');\n    });\n  });\n\n  describe('validateRequired', () => {\n    it('should pass validation for all required fields present', () => {\n      const params = { name: 'Test', age: 25, email: 'test@example.com' };\n\n      expect(() => {\n        testService.testValidateRequired(params, ['name', 'age', 'email']);\n      }).not.toThrow();\n    });\n\n    it('should throw for missing required fields', () => {\n      const params = { name: 'Test', age: null, email: '' };\n\n      expect(() => {\n        testService.testValidateRequired(params, ['name', 'age', 'email']);\n      }).toThrow('Missing required parameters: age, email');\n    });\n\n    it('should handle undefined values', () => {\n      const params = { name: 'Test' };\n\n      expect(() => {\n        testService.testValidateRequired(params, ['name', 'age']);\n      }).toThrow('Missing required parameters: age');\n    });\n  });\n\n  describe('sanitizeInput', () => {\n    it('should sanitize string inputs', () => {\n      const input = {\n        name: '  Test Name  ',\n        description: 'A'.repeat(2000),\n      };\n\n      const schema = {\n        name: 'string' as const,\n        description: 'string' as const,\n      };\n\n      const result = testService.testSanitizeInput(input, schema);\n\n      expect(result.name).toBe('Test Name');\n      expect(result.description).toHaveLength(1000); // Truncated\n    });\n\n    it('should convert and validate numbers', () => {\n      const validInput = {\n        age: '25',\n        price: '99.99',\n      };\n\n      const schema = {\n        age: 'number' as const,\n        price: 'number' as const,\n      };\n\n      const result = testService.testSanitizeInput(validInput, schema);\n      expect(result.age).toBe(25);\n      expect(result.price).toBe(99.99);\n\n      expect(() => {\n        testService.testSanitizeInput({ price: 'invalid' }, { price: 'number' as const });\n      }).toThrow('Invalid number value for price: invalid');\n    });\n\n    it('should convert booleans', () => {\n      const input = {\n        active: 'true',\n        enabled: 0,\n        visible: 1,\n      };\n\n      const schema = {\n        active: 'boolean' as const,\n        enabled: 'boolean' as const,\n        visible: 'boolean' as const,\n      };\n\n      const result = testService.testSanitizeInput(input, schema);\n\n      expect(result.active).toBe(true);\n      expect(result.enabled).toBe(false);\n      expect(result.visible).toBe(true);\n    });\n\n    it('should validate object and array types', () => {\n      const input = {\n        config: { key: 'value' },\n        tags: ['tag1', 'tag2'],\n      };\n\n      const schema = {\n        config: 'object' as const,\n        tags: 'array' as const,\n      };\n\n      const result = testService.testSanitizeInput(input, schema);\n\n      expect(result.config).toEqual({ key: 'value' });\n      expect(result.tags).toEqual(['tag1', 'tag2']);\n\n      expect(() => {\n        testService.testSanitizeInput({ config: [] }, schema);\n      }).toThrow('Expected object for config');\n\n      expect(() => {\n        testService.testSanitizeInput({ tags: 'not an array' }, { tags: 'array' as const });\n      }).toThrow('Expected array for tags');\n    });\n  });\n\n  describe('metrics', () => {\n    it('should track operation metrics', async () => {\n      const mockOperation = jest\n        .fn()\n        .mockResolvedValueOnce('success')\n        .mockRejectedValueOnce(new Error('Failed'))\n        .mockResolvedValueOnce('success');\n\n      await testService.testWithRetry(mockOperation);\n\n      try {\n        await testService.testWithRetry(mockOperation, { maxRetries: 0 });\n      } catch (e) {\n        // Expected failure\n      }\n\n      await testService.testWithRetry(mockOperation);\n\n      const metrics = testService.getMetrics();\n\n      expect(metrics.operationCount).toBe(3);\n      expect(metrics.errorCount).toBe(1);\n      expect(metrics.averageResponseTime).toBeGreaterThanOrEqual(0);\n      expect(metrics.lastOperation).toBeInstanceOf(Date);\n    });\n\n    it('should reset metrics', () => {\n      testService.resetMetrics();\n\n      const metrics = testService.getMetrics();\n\n      expect(metrics.operationCount).toBe(0);\n      expect(metrics.errorCount).toBe(0);\n      expect(metrics.averageResponseTime).toBe(0);\n    });\n  });\n\n  describe('healthCheck', () => {\n    it.skip('should return healthy status when database is accessible', async () => {\n      (mockPrisma.$queryRaw as jest.Mock).mockResolvedValue([{ 1: 1 }]);\n\n      const health = await testService.healthCheck();\n\n      expect(health.healthy).toBe(true);\n      expect(health.details.database).toBe(true);\n      expect(health.details.metrics).toBeDefined();\n      expect(health.details.uptime).toBeGreaterThanOrEqual(0);\n    });\n\n    it.skip('should return unhealthy status when database is not accessible', async () => {\n      (mockPrisma.$queryRaw as jest.Mock).mockRejectedValue(new Error('Connection failed'));\n\n      const health = await testService.healthCheck();\n\n      expect(health.healthy).toBe(false);\n      expect(health.details.database).toBe(false);\n    });\n  });\n});\n"],"version":3}