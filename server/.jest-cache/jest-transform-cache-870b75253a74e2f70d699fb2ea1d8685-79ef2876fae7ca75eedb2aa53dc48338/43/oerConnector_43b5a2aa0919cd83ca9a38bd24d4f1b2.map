{"version":3,"names":["cov_2qapxirnok","actualCoverage","BaseConnector","OERConnector","apiKey","baseUrl","s","constructor","f","b","process","env","OER_API_KEY","console","warn","search","params","searchParams","URLSearchParams","q","query","limit","String","offset","has_materials","grade","append","mapGradeToOER","subject","mapSubjectToOER","url","toString","response","fetchWithTimeout","headers","Authorization","Accept","ok","Error","statusText","data","json","activities","results","map","item","transformOERResource","filter","activity","error","getActivityDetails","externalId","subjectMap","math","francais","english","science","arts","toLowerCase","resource","_params","activityType","inferActivityTypeFromMaterialTypes","material_types","gradeRange","extractGradeRangeFromOER","grade_levels","extractSubjectFromOER","subjects","transformToExternalActivity","id","title","description","abstract","thumbnailUrl","thumbnail_url","duration","estimateDurationFromDescription","gradeMin","min","gradeMax","max","normalizeSubject","language","materials","extractMaterialsFromDescription","technology","extractTechnologyRequirements","groupSize","sourceRating","rating","sourceReviews","reviews_count","curriculumTags","extractStandardsFromOER","standards","learningGoals","learning_objectives","isFree","license","isActive","materialTypes","typeMap","video","interactive","worksheet","experiment","lesson_plan","assessment","materialType","normalized","gradeLevels","length","grades","level","includes","push","match","parseInt","Math","replace","tech","requires_internet","durationMatch","parseDuration","wordCount","split","notation","code","slice","extractMaterials"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/connectors/oerConnector.ts"],"sourcesContent":["import { ExternalActivity } from '@teaching-engine/database';\nimport { BaseConnector } from './baseConnector';\nimport { SearchParams } from '../activityDiscoveryService';\n\ninterface OERResource {\n  id: number;\n  title: string;\n  abstract?: string;\n  description?: string;\n  url?: string;\n  thumbnail_url?: string;\n  material_types?: string[];\n  grade_levels?: string[];\n  subjects?: string[];\n  keywords?: string[];\n  languages?: string[];\n  language?: string;\n  authors?: string[];\n  license?: string;\n  rating?: number;\n  reviews_count?: number;\n  visits?: number;\n  requires_internet?: boolean;\n  learning_objectives?: string[];\n  standards?: OERStandard[];\n}\n\ninterface OERSearchResponse {\n  meta: {\n    pagination: {\n      count: number;\n      page: number;\n      per_page: number;\n    };\n  };\n  results: OERResource[];\n}\n\ninterface OERStandard {\n  notation?: string;\n  code?: string;\n}\n\n/**\n * Open Educational Resources (OER) connector\n * Searches OER Commons and other open educational resource repositories\n * Free, openly licensed educational materials\n */\nexport class OERConnector extends BaseConnector {\n  private apiKey: string;\n  private baseUrl = 'https://www.oercommons.org/api/v1';\n\n  constructor() {\n    super('oer');\n    this.apiKey = process.env.OER_API_KEY || '';\n\n    if (!this.apiKey) {\n      console.warn('OER API key not configured. OER search will not be available.');\n    }\n  }\n\n  async search(params: SearchParams): Promise<ExternalActivity[]> {\n    if (!this.apiKey) return [];\n\n    try {\n      // Build OER search parameters\n      const searchParams = new URLSearchParams({\n        q: params.query || '',\n        limit: String(params.limit || 20),\n        offset: String(params.offset || 0),\n        has_materials: 'true',\n      });\n\n      // Add grade level filter\n      if (params.grade) {\n        searchParams.append('grade_level', this.mapGradeToOER(params.grade));\n      }\n\n      // Add subject filter\n      if (params.subject) {\n        searchParams.append('subject', this.mapSubjectToOER(params.subject));\n      }\n\n      const url = `${this.baseUrl}/search?${searchParams.toString()}`;\n\n      const response = await this.fetchWithTimeout(url, {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          Accept: 'application/json',\n        },\n      }, 30000); // 30 second timeout\n\n      if (!response.ok) {\n        throw new Error(`OER API error: ${response.statusText}`);\n      }\n\n      const data: OERSearchResponse = await response.json();\n\n      // Transform OER results to our format\n      const activities: ExternalActivity[] = data.results\n        .map((item: OERResource) => this.transformOERResource(item, params))\n        .filter(\n          (activity: ExternalActivity | null): activity is ExternalActivity => activity !== null,\n        );\n\n      return activities as ExternalActivity[];\n    } catch (error) {\n      console.error('OER search error:', error);\n      return [];\n    }\n  }\n\n  async getActivityDetails(externalId: string): Promise<ExternalActivity | null> {\n    if (!this.apiKey) return null;\n\n    try {\n      const url = `${this.baseUrl}/resources/${externalId}`;\n\n      const response = await this.fetchWithTimeout(url, {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          Accept: 'application/json',\n        },\n      }, 30000); // 30 second timeout\n\n      if (!response.ok) return null;\n\n      const data = await response.json();\n      return this.transformOERResource(data, {}) as ExternalActivity;\n    } catch (error) {\n      console.error('OER getActivityDetails error:', error);\n      return null;\n    }\n  }\n\n  private mapGradeToOER(grade: number): string {\n    // OER uses different grade level naming\n    if (grade === 0) return 'kindergarten';\n    if (grade >= 1 && grade <= 12) return `grade_${grade}`;\n    return 'primary';\n  }\n\n  private mapSubjectToOER(subject: string): string {\n    const subjectMap: Record<string, string> = {\n      math: 'mathematics',\n      francais: 'world_languages',\n      english: 'english_language_arts',\n      science: 'science',\n      'social-studies': 'social_studies',\n      'physical-education': 'health_physical_education',\n      arts: 'arts',\n    };\n\n    return subjectMap[subject.toLowerCase()] || subject;\n  }\n\n  private transformOERResource(\n    resource: OERResource,\n    _params: SearchParams,\n  ): Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'> | null {\n    if (!resource) return null;\n\n    // Determine activity type based on material types\n    const activityType = this.inferActivityTypeFromMaterialTypes(resource.material_types || []);\n\n    // Extract grade range\n    const gradeRange = this.extractGradeRangeFromOER(resource.grade_levels || []);\n\n    // Extract subject\n    const subject = this.extractSubjectFromOER(resource.subjects || []);\n\n    return this.transformToExternalActivity(\n      {} as ExternalActivity,\n      {\n        externalId: String(resource.id),\n        url: resource.url || `https://www.oercommons.org/courses/${resource.id}`,\n        title: resource.title,\n        description: resource.abstract || resource.description,\n        thumbnailUrl: resource.thumbnail_url,\n        duration: this.estimateDurationFromDescription(resource.abstract),\n        activityType,\n        gradeMin: gradeRange.min,\n        gradeMax: gradeRange.max,\n        subject: this.normalizeSubject(subject),\n        language: resource.language || 'en',\n        materials: this.extractMaterialsFromDescription(resource.abstract || ''),\n        technology: this.extractTechnologyRequirements(resource),\n        groupSize: null,\n        sourceRating: resource.rating ? resource.rating * 5 : null, // Convert to 5-star scale\n        sourceReviews: resource.reviews_count || null,\n        curriculumTags: this.extractStandardsFromOER(resource.standards || []),\n        learningGoals: resource.learning_objectives || null,\n        isFree: true,\n        license: resource.license || 'Open Educational Resource',\n        isActive: true,\n      },\n    );\n  }\n\n  private inferActivityTypeFromMaterialTypes(materialTypes: string[]): string {\n    const typeMap: Record<string, string> = {\n      video: 'video',\n      interactive: 'game',\n      worksheet: 'worksheet',\n      activity: 'handson',\n      experiment: 'experiment',\n      lesson_plan: 'worksheet',\n      assessment: 'worksheet',\n    };\n\n    for (const materialType of materialTypes) {\n      const normalized = materialType.toLowerCase();\n      if (typeMap[normalized]) {\n        return typeMap[normalized];\n      }\n    }\n\n    return 'worksheet'; // default\n  }\n\n  private extractGradeRangeFromOER(gradeLevels: string[]): { min: number; max: number } {\n    if (!gradeLevels || gradeLevels.length === 0) {\n      return { min: 1, max: 1 };\n    }\n\n    const grades: number[] = [];\n\n    for (const level of gradeLevels) {\n      if (level.includes('kindergarten')) {\n        grades.push(0);\n      } else {\n        const match = level.match(/\\d+/);\n        if (match) {\n          grades.push(parseInt(match[0]));\n        }\n      }\n    }\n\n    if (grades.length === 0) return { min: 1, max: 1 };\n\n    return {\n      min: Math.min(...grades),\n      max: Math.max(...grades),\n    };\n  }\n\n  private extractSubjectFromOER(subjects: string[]): string {\n    if (!subjects || subjects.length === 0) return 'general';\n\n    // Take the first subject and normalize it\n    return subjects[0].toLowerCase().replace(/_/g, '-');\n  }\n\n  private extractTechnologyRequirements(resource: OERResource): string[] | null {\n    const tech: string[] = [];\n\n    if (resource.requires_internet) tech.push('internet');\n    if (resource.material_types?.includes('interactive')) tech.push('ordinateur');\n    if (resource.material_types?.includes('video')) tech.push('projecteur');\n\n    return tech.length > 0 ? tech : null;\n  }\n\n  private estimateDurationFromDescription(description: string): number | null {\n    if (!description) return null;\n\n    // Look for duration mentions in description\n    const durationMatch = description.match(/(\\d+)\\s*(?:minutes?|mins?|hours?)/i);\n    if (durationMatch) {\n      return this.parseDuration(durationMatch[0]);\n    }\n\n    // Estimate based on content length\n    const wordCount = description.split(/\\s+/).length;\n    if (wordCount < 100) return 15;\n    if (wordCount < 300) return 25;\n    return 35;\n  }\n\n  private extractStandardsFromOER(standards: OERStandard[]): string[] {\n    if (!standards || standards.length === 0) return [];\n\n    return standards\n      .map((s) => s.notation || s.code)\n      .filter((s) => s)\n      .slice(0, 5); // Limit to 5 standards\n  }\n\n  private extractMaterialsFromDescription(description: string): string[] {\n    const materials = this.extractMaterials(description);\n\n    // Add common materials for open resources\n    if (materials.length === 0) {\n      materials.push('papier', 'crayons');\n    }\n\n    return materials;\n  }\n}\n"],"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","ignoreList":[]}