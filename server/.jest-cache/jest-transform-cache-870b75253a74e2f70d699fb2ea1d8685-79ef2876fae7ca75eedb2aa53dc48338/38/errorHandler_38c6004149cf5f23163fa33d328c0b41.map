{"version":3,"names":["cov_24r8wsbdcj","actualCoverage","logger","ZodError","AppError","Error","statusCode","code","isOperational","constructor","message","b","f","s","captureStackTrace","asyncHandler","fn","req","res","next","Promise","resolve","catch","errorHandler","err","_next","response","error","timestamp","Date","toISOString","path","method","query","ip","userId","user","name","prismaError","validationMatch","match","details","field","issue","errors","map","e","join","includes","process","env","NODE_ENV","stack","status","json","notFoundHandler","unauthorized","forbidden","notFound","resource","badRequest","conflict","tooManyRequests","serverError"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/errorHandler.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport type { Prisma } from '@teaching-engine/database';\nimport logger from '../logger';\nimport { ZodError } from 'zod';\n\ninterface ErrorResponse {\n  error: string;\n  message?: string;\n  code?: string;\n  details?: unknown;\n  timestamp?: string;\n  path?: string;\n}\n\nexport class AppError extends Error {\n  statusCode: number;\n  code: string;\n  isOperational: boolean;\n\n  constructor(message: string, statusCode: number, code: string, isOperational = true) {\n    super(message);\n    this.statusCode = statusCode;\n    this.code = code;\n    this.isOperational = isOperational;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport const asyncHandler =\n  (fn: (req: Request, res: Response, next: NextFunction) => Promise<unknown>) =>\n  (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n\nexport function errorHandler(err: Error, req: Request, res: Response, _next: NextFunction) {\n  let statusCode = 500;\n  const response: ErrorResponse = {\n    error: 'Internal Server Error',\n    timestamp: new Date().toISOString(),\n    path: req.path,\n  };\n\n  // Log the error\n  logger.error(\n    {\n      err,\n      method: req.method,\n      path: req.path,\n      query: req.query,\n      ip: req.ip,\n      userId: (req as Request & { user?: { userId?: string } }).user?.userId,\n    },\n    'Request error',\n  );\n\n  // Handle known error types\n  if (err instanceof AppError) {\n    statusCode = err.statusCode;\n    response.error = err.message;\n    response.code = err.code;\n  } else if (\n    err &&\n    typeof err === 'object' &&\n    'code' in err &&\n    err.constructor.name === 'PrismaClientKnownRequestError'\n  ) {\n    // Handle Prisma errors\n    const prismaError = err as Prisma.PrismaClientKnownRequestError;\n    switch (prismaError.code) {\n      case 'P2002':\n        statusCode = 409;\n        response.error = 'Duplicate entry';\n        response.message = 'A record with this value already exists';\n        response.code = 'DUPLICATE_ENTRY';\n        break;\n      case 'P2025':\n        statusCode = 404;\n        response.error = 'Record not found';\n        response.message = 'The requested record does not exist';\n        response.code = 'NOT_FOUND';\n        break;\n      case 'P2003':\n        statusCode = 400;\n        response.error = 'Foreign key constraint failed';\n        response.message = 'Referenced record does not exist';\n        response.code = 'FOREIGN_KEY_ERROR';\n        break;\n      case 'P2016':\n        statusCode = 400;\n        response.error = 'Query interpretation error';\n        response.message = 'Invalid query parameters';\n        response.code = 'INVALID_QUERY';\n        break;\n      default:\n        statusCode = 400;\n        response.error = 'Database operation failed';\n        response.message = err.message;\n        response.code = `PRISMA_${prismaError.code}`;\n    }\n  } else if (\n    err &&\n    typeof err === 'object' &&\n    err.constructor.name === 'PrismaClientValidationError'\n  ) {\n    statusCode = 400;\n    response.error = 'Validation error';\n    response.message = 'Invalid data provided';\n    response.code = 'VALIDATION_ERROR';\n\n    // Extract useful validation info if possible\n    const validationMatch = err.message.match(/Argument (\\w+): (.+)/);\n    if (validationMatch) {\n      response.details = {\n        field: validationMatch[1],\n        issue: validationMatch[2],\n      };\n    }\n  } else if (err instanceof ZodError) {\n    // Handle Zod validation errors\n    statusCode = 400;\n    response.error = 'Validation error';\n    response.code = 'VALIDATION_ERROR';\n    response.details = err.errors.map((e) => ({\n      field: e.path.join('.'),\n      message: e.message,\n    }));\n  } else if (err.name === 'JsonWebTokenError') {\n    statusCode = 401;\n    response.error = 'Invalid token';\n    response.code = 'INVALID_TOKEN';\n  } else if (err.name === 'TokenExpiredError') {\n    statusCode = 401;\n    response.error = 'Token expired';\n    response.code = 'TOKEN_EXPIRED';\n  } else if (err.name === 'MulterError') {\n    statusCode = 400;\n    response.error = 'File upload error';\n    response.message = err.message;\n    response.code = 'FILE_UPLOAD_ERROR';\n  } else if (err.message.includes('CORS')) {\n    statusCode = 403;\n    response.error = 'CORS error';\n    response.message = 'Cross-origin request blocked';\n    response.code = 'CORS_ERROR';\n  } else {\n    // Generic error handling\n    response.error =\n      process.env.NODE_ENV === 'production' ? 'An unexpected error occurred' : err.message;\n\n    // Don't leak stack traces in production\n    if (process.env.NODE_ENV !== 'production') {\n      response.details = {\n        stack: err.stack,\n      };\n    }\n  }\n\n  res.status(statusCode).json(response);\n}\n\n// Catch unhandled routes\nexport function notFoundHandler(req: Request, res: Response) {\n  res.status(404).json({\n    error: 'Not Found',\n    message: `Cannot ${req.method} ${req.path}`,\n    code: 'ROUTE_NOT_FOUND',\n    timestamp: new Date().toISOString(),\n  });\n}\n\n// Common error generators\nexport const errors = {\n  unauthorized: () => new AppError('Unauthorized', 401, 'UNAUTHORIZED'),\n  forbidden: () => new AppError('Forbidden', 403, 'FORBIDDEN'),\n  notFound: (resource: string) => new AppError(`${resource} not found`, 404, 'NOT_FOUND'),\n  badRequest: (message: string) => new AppError(message, 400, 'BAD_REQUEST'),\n  conflict: (message: string) => new AppError(message, 409, 'CONFLICT'),\n  tooManyRequests: () => new AppError('Too many requests', 429, 'RATE_LIMIT_EXCEEDED'),\n  serverError: (message = 'Internal server error') => new AppError(message, 500, 'SERVER_ERROR'),\n};\n"],"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","ignoreList":[]}