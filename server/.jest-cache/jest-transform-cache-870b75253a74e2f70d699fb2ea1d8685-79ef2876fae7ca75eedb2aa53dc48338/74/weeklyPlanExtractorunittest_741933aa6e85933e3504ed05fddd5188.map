{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/weeklyPlanExtractor.unit.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/weeklyPlanExtractor.unit.test.ts"],"sourcesContent":["import { jest, describe, it, beforeEach, expect } from '@jest/globals';\n\n// Mock prisma for the subPlanService\njest.mock('../../src/prisma', () => ({\n  prisma: (globalThis as any).testPrismaClient,\n  Prisma: {},\n}));\n\n// Mock the subPlanService completely\nconst mockBuildSubPlanData = jest.fn().mockResolvedValue({\n  date: '2024-01-01',\n  schedule: [],\n  pullOuts: [],\n  contacts: {},\n  procedures: 'Test procedures',\n  outcomes: [],\n  materials: [],\n  routines: [],\n  specialInstructions: 'Test instructions'\n});\n\njest.mock('../../src/services/subPlanService', () => ({\n  buildSubPlanData: mockBuildSubPlanData,\n}));\n\n// Import after mocks are set up\nconst { extractWeeklyPlan } = await import('../../src/services/weeklyPlanExtractor');\n\n// Mock all the helper functions that weeklyPlanExtractor uses\njest.mock('../../src/services/weeklyPlanExtractor', () => {\n  const actual = jest.requireActual('../../src/services/weeklyPlanExtractor');\n  return {\n    ...actual,\n    extractWeeklyOverview: jest.fn().mockResolvedValue({\n      subjects: [],\n      unitPlans: [],\n      assessments: [],\n      specialEvents: []\n    }),\n    generateContinuityNotes: jest.fn().mockReturnValue([]),\n    generateEmergencyBackupPlans: jest.fn().mockResolvedValue([])\n  };\n});\n\ndescribe('WeeklyPlanExtractor', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('extractWeeklyPlan', () => {\n    it('should extract weekly plan data for multiple days', async () => {\n      // Mock data\n      const mockSubject = {\n        id: 1,\n        name: 'Mathematics',\n        nameEn: 'Mathematics',\n        nameFr: 'Mathématiques',\n      };\n\n      const mockMilestone = {\n        id: 1,\n        title: 'Number Operations',\n        targetDate: new Date('2024-01-31'),\n        subject: mockSubject,\n        activities: [],\n      };\n\n      const mockActivity = {\n        id: 1,\n        title: 'Addition Practice',\n        milestone: { subject: mockSubject },\n        outcomes: [],\n      };\n\n      const mockDailyPlan = {\n        id: 1,\n        date: new Date('2024-01-15'),\n        items: [\n          {\n            id: 1,\n            startMin: 540, // 9:00 AM\n            activity: mockActivity,\n            slot: { subject: mockSubject },\n          },\n        ],\n      };\n\n      // Setup mocks\n      const mockSubPlanData = {\n        date: '2024-01-15',\n        schedule: [\n          { time: '09:00', activity: 'Mathematics - Addition Practice', note: 'Use manipulatives' }\n        ],\n        pullOuts: [],\n        contacts: { 'Principal': 'Ext. 100', 'Office': 'Ext. 101' },\n        outcomes: [\n          { code: 'M1.1', description: 'Add numbers to 20', subject: 'Mathematics' }\n        ]\n      };\n      \n      mockBuildSubPlanData.mockResolvedValue(mockSubPlanData);\n\n      const result = await extractWeeklyPlan('2024-01-15', 3, { userId: 1 });\n\n      expect(result).toHaveProperty('startDate', '2024-01-15');\n      expect(result).toHaveProperty('days');\n      expect(result.days).toHaveLength(3);\n      expect(result).toHaveProperty('weeklyOverview');\n      expect(result.weeklyOverview).toHaveProperty('subjects');\n      expect(result.weeklyOverview).toHaveProperty('milestones');\n      expect(result).toHaveProperty('continuityNotes');\n      expect(result).toHaveProperty('emergencyBackupPlans');\n    });\n\n    it('should generate continuity notes between days', async () => {\n      // Setup mock data for consecutive days with related activities\n      const mockSubject = { id: 1, name: 'Mathematics' };\n\n      const mockPlans = [\n        {\n          id: 1,\n          date: new Date('2024-01-15'),\n          items: [\n            {\n              id: 1,\n              startMin: 540,\n              activity: {\n                id: 1,\n                title: 'Introduction to Fractions',\n                milestone: { subject: mockSubject },\n              },\n              slot: { subject: mockSubject },\n            },\n          ],\n        },\n        {\n          id: 2,\n          date: new Date('2024-01-16'),\n          items: [\n            {\n              id: 2,\n              startMin: 540,\n              activity: {\n                id: 2,\n                title: 'Fraction Operations',\n                milestone: { subject: mockSubject },\n              },\n              slot: { subject: mockSubject },\n            },\n          ],\n        },\n      ];\n\n      // Mock different data for each day to test continuity\n      mockBuildSubPlanData\n        .mockResolvedValueOnce({\n          date: '2024-01-15',\n          schedule: [{ time: '09:00', activity: 'Addition Practice' }],\n          pullOuts: [],\n          contacts: {},\n        })\n        .mockResolvedValueOnce({\n          date: '2024-01-16', \n          schedule: [{ time: '09:00', activity: 'Fraction Operations' }],\n          pullOuts: [],\n          contacts: {},\n        });\n\n      const result = await extractWeeklyPlan('2024-01-15', 2, { userId: 1 });\n\n      expect(result.continuityNotes).toHaveLength(2);\n\n      const day2Notes = result.continuityNotes[1];\n      expect(day2Notes.connections.length).toBeGreaterThan(0);\n      expect(day2Notes.connections[0]).toContain('Mathematics');\n      expect(day2Notes.connections[0]).toContain('Introduction to Fractions');\n      expect(day2Notes.connections[0]).toContain('Fraction Operations');\n    });\n\n    it('should generate emergency backup plans by subject', async () => {\n      const mockSubjects = [\n        {\n          id: 1,\n          name: 'Mathematics',\n          activities: [\n            { id: 1, title: 'Math Review Worksheets', isFallback: true },\n            { id: 2, title: 'Number Games', isFallback: true },\n          ],\n        },\n        {\n          id: 2,\n          name: 'Language Arts',\n          activities: [{ id: 3, title: 'Silent Reading', isFallback: true }],\n        },\n      ];\n\n      // Mock empty day data\n      mockBuildSubPlanData.mockResolvedValue({\n        date: '2024-01-15',\n        schedule: [],\n        pullOuts: [],\n        contacts: {},\n      });\n\n      const result = await extractWeeklyPlan('2024-01-15', 1, { userId: 1 });\n\n      expect(result.emergencyBackupPlans).toHaveLength(2);\n\n      const mathPlan = result.emergencyBackupPlans.find((p) => p.subject === 'Mathematics');\n      expect(mathPlan).toBeDefined();\n      expect(mathPlan?.activities).toContain('Math Review Worksheets');\n      expect(mathPlan?.activities).toContain('Number Games');\n      expect(mathPlan?.materials).toContain('Math manipulatives');\n\n      const langPlan = result.emergencyBackupPlans.find((p) => p.subject === 'Language Arts');\n      expect(langPlan).toBeDefined();\n      expect(langPlan?.activities).toContain('Silent Reading');\n      expect(langPlan?.materials).toContain('Reading books');\n    });\n\n    it('should calculate subject hours and topics correctly', async () => {\n      const mockSubject = { id: 1, name: 'Mathematics' };\n\n      const mockDailyPlan = {\n        id: 1,\n        date: new Date('2024-01-15'),\n        items: [\n          {\n            id: 1,\n            startMin: 540, // 9:00 AM - assuming 15-minute slots\n            activity: {\n              id: 1,\n              title: 'Addition',\n              milestone: { subject: mockSubject },\n              outcomes: [],\n            },\n            slot: { subject: mockSubject },\n          },\n          {\n            id: 2,\n            startMin: 555, // 9:15 AM\n            activity: {\n              id: 2,\n              title: 'Subtraction',\n              milestone: { subject: mockSubject },\n              outcomes: [],\n            },\n            slot: { subject: mockSubject },\n          },\n          {\n            id: 3,\n            startMin: 570, // 9:30 AM\n            activity: {\n              id: 3,\n              title: 'Word Problems',\n              milestone: { subject: mockSubject },\n              outcomes: [],\n            },\n            slot: { subject: mockSubject },\n          },\n        ],\n      };\n\n      // Mock calculation data for testing subject hours\n      mockBuildSubPlanData.mockResolvedValue({\n        date: '2024-01-15',\n        schedule: [\n          { time: '09:00', activity: 'Mathematics - Addition' },\n          { time: '09:15', activity: 'Mathematics - Subtraction' },\n          { time: '09:30', activity: 'Mathematics - Word Problems' }\n        ],\n        pullOuts: [],\n        contacts: {},\n        outcomes: [\n          { code: 'M1.1', description: 'Add and subtract', subject: 'Mathematics' }\n        ]\n      });\n\n      const result = await extractWeeklyPlan('2024-01-15', 1, { userId: 1 });\n\n      const mathSubject = result.weeklyOverview.subjects.find((s) => s.name === 'Mathematics');\n      expect(mathSubject).toBeDefined();\n      expect(mathSubject?.totalHours).toBe(0.75); // 3 slots × 0.25 hours each\n      expect(mathSubject?.keyTopics).toContain('Addition');\n      expect(mathSubject?.keyTopics).toContain('Subtraction');\n      expect(mathSubject?.keyTopics).toContain('Word Problems');\n    });\n\n    it('should handle empty days gracefully', async () => {\n      // Mock empty day\n      mockBuildSubPlanData.mockResolvedValue({\n        date: '2024-01-15',\n        schedule: [],\n        pullOuts: [],\n        contacts: {},\n      });\n\n      const result = await extractWeeklyPlan('2024-01-15', 3, { userId: 1 });\n\n      expect(result.startDate).toBe('2024-01-15');\n      expect(result.days).toHaveLength(3);\n      expect(result.weeklyOverview.subjects).toHaveLength(0);\n      expect(result.weeklyOverview.milestones).toHaveLength(0);\n      expect(result.continuityNotes).toHaveLength(3);\n      expect(result.emergencyBackupPlans).toHaveLength(0);\n    });\n\n    it('should respect user options for data inclusion', async () => {\n      const mockDailyPlan = {\n        id: 1,\n        date: new Date('2024-01-15'),\n        items: [],\n      };\n\n      // Mock for user options test\n      mockBuildSubPlanData.mockResolvedValue({\n        date: '2024-01-15',\n        schedule: [{ time: '09:00', activity: 'Test Activity' }],\n        pullOuts: [],\n        contacts: {},\n        goals: [{ id: 1, text: 'Test goal', status: 'active' }],\n        routines: [{ id: 1, title: 'Morning routine', description: 'Test', category: 'morning' }]\n      });\n\n      // Test with includeGoals: false\n      const result = await extractWeeklyPlan('2024-01-15', 1, {\n        userId: 1,\n        includeGoals: false,\n        includeRoutines: false,\n        includePlans: false,\n      });\n\n      expect(result.days[0].goals).toBeUndefined();\n      expect(result.days[0].routines).toBeUndefined();\n    });\n  });\n});\n"],"version":3}