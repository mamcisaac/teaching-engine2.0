{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/connectors/baseConnector.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/connectors/baseConnector.ts"],"sourcesContent":["import { ExternalActivity } from '@teaching-engine/database';\nimport { SearchParams } from '../activityDiscoveryService';\n\n/**\n * Base abstract class for all activity source connectors\n * Each connector implements the logic to search and retrieve activities\n * from a specific external source (OER Commons, Khan Academy, TPT, etc.)\n */\nexport abstract class BaseConnector {\n  protected sourceName: string;\n\n  constructor(sourceName: string) {\n    this.sourceName = sourceName;\n  }\n\n  /**\n   * Search for activities based on the provided parameters\n   * @param params Search parameters including query, filters, etc.\n   * @returns Array of activities matching the search criteria\n   */\n  abstract search(\n    params: SearchParams,\n  ): Promise<Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'>[]>;\n\n  /**\n   * Get detailed information about a specific activity\n   * @param externalId The ID of the activity in the external system\n   * @returns Detailed activity information or null if not found\n   */\n  abstract getActivityDetails(\n    externalId: string,\n  ): Promise<Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'> | null>;\n\n  /**\n   * Check if an activity is still available at the source\n   * @param externalId The ID of the activity in the external system\n   * @returns true if the activity is still available\n   */\n  async checkAvailability(externalId: string): Promise<boolean> {\n    const activity = await this.getActivityDetails(externalId);\n    return activity !== null;\n  }\n\n  /**\n   * Transform external API response to our ExternalActivity format\n   * This is a helper method that connectors can override\n   */\n  protected transformToExternalActivity(\n    sourceData: unknown,\n    defaults: Partial<ExternalActivity> = {},\n  ): Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'> {\n    return {\n      source: this.sourceName,\n      externalId: '',\n      url: '',\n      title: '',\n      description: null,\n      thumbnailUrl: null,\n      duration: null,\n      activityType: 'worksheet',\n      gradeMin: 1,\n      gradeMax: 1,\n      subject: 'general',\n      language: 'en',\n      materials: [],\n      technology: null,\n      groupSize: null,\n      sourceRating: null,\n      sourceReviews: null,\n      internalRating: null,\n      internalReviews: null,\n      curriculumTags: [],\n      learningGoals: null,\n      isFree: true,\n      price: null,\n      license: null,\n      lastVerified: new Date(),\n      isActive: true,\n      ...defaults,\n    };\n  }\n\n  /**\n   * Parse duration string to minutes\n   * Handles formats like \"PT15M\", \"15 minutes\", \"1 hour\", etc.\n   */\n  protected parseDuration(durationStr: string): number | null {\n    if (!durationStr) return null;\n\n    // ISO 8601 duration format (PT15M, PT1H30M)\n    const iso8601Match = durationStr.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n    if (iso8601Match) {\n      const hours = parseInt(iso8601Match[1] || '0');\n      const minutes = parseInt(iso8601Match[2] || '0');\n      const seconds = parseInt(iso8601Match[3] || '0');\n      return hours * 60 + minutes + Math.ceil(seconds / 60);\n    }\n\n    // Common text formats\n    const textMatch = durationStr.match(/(\\d+)\\s*(hours?|minutes?|mins?)/i);\n    if (textMatch) {\n      const value = parseInt(textMatch[1]);\n      const unit = textMatch[2].toLowerCase();\n      if (unit.startsWith('hour')) {\n        return value * 60;\n      } else {\n        return value;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Extract grade range from various formats\n   * Examples: \"Grade 1\", \"K-2\", \"1st Grade\", \"Grades 1-3\"\n   */\n  protected parseGradeRange(gradeStr: string): { min: number; max: number } {\n    const defaultRange = { min: 1, max: 1 };\n\n    if (!gradeStr) return defaultRange;\n\n    // Handle \"K\" for kindergarten\n    const normalized = gradeStr.replace(/K/gi, '0');\n\n    // Try to extract all numbers\n    const numbers = normalized.match(/\\d+/g);\n    if (!numbers || numbers.length === 0) return defaultRange;\n\n    const grades = numbers.map((n) => parseInt(n));\n\n    if (grades.length === 1) {\n      return { min: grades[0], max: grades[0] };\n    } else {\n      return {\n        min: Math.min(...grades),\n        max: Math.max(...grades),\n      };\n    }\n  }\n\n  /**\n   * Map external subject names to our standardized subjects\n   */\n  protected normalizeSubject(subject: string): string {\n    const subjectMap: Record<string, string> = {\n      mathematics: 'math',\n      maths: 'math',\n      french: 'francais',\n      'french immersion': 'francais',\n      english: 'english',\n      'language arts': 'english',\n      ela: 'english',\n      science: 'science',\n      'social studies': 'social-studies',\n      history: 'social-studies',\n      geography: 'social-studies',\n      'phys ed': 'physical-education',\n      'physical education': 'physical-education',\n      pe: 'physical-education',\n      art: 'arts',\n      arts: 'arts',\n      music: 'arts',\n      drama: 'arts',\n      health: 'health',\n    };\n\n    const normalized = subject.toLowerCase().trim();\n    return subjectMap[normalized] || normalized;\n  }\n\n  /**\n   * Determine activity type from title, description, or metadata\n   */\n  protected inferActivityType(data: {\n    title?: string;\n    description?: string;\n    format?: string;\n    mediaType?: string;\n  }): string {\n    const combined =\n      `${data.title || ''} ${data.description || ''} ${data.format || ''} ${data.mediaType || ''}`.toLowerCase();\n\n    if (combined.includes('video')) return 'video';\n    if (combined.includes('worksheet') || combined.includes('printable')) return 'worksheet';\n    if (combined.includes('game') || combined.includes('interactive')) return 'game';\n    if (combined.includes('experiment') || combined.includes('lab')) return 'experiment';\n    if (combined.includes('hands-on') || combined.includes('manipulative')) return 'handson';\n\n    return 'worksheet'; // default\n  }\n\n  /**\n   * Extract materials from description or metadata\n   */\n  protected extractMaterials(text: string): string[] {\n    if (!text) return [];\n\n    const materials: string[] = [];\n    const materialPatterns = [\n      /materials?\\s*needed\\s*:?\\s*([^.]+)/i,\n      /you\\s*will\\s*need\\s*:?\\s*([^.]+)/i,\n      /supplies\\s*:?\\s*([^.]+)/i,\n      /required\\s*materials?\\s*:?\\s*([^.]+)/i,\n    ];\n\n    for (const pattern of materialPatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        // Split by common delimiters and clean up\n        const items = match[1]\n          .split(/[,;]/)\n          .map((item) => item.trim())\n          .filter((item) => item.length > 0 && item.length < 50);\n\n        materials.push(...items);\n      }\n    }\n\n    // Also look for specific material mentions\n    const specificMaterials = [\n      'pencil',\n      'paper',\n      'scissors',\n      'glue',\n      'markers',\n      'crayons',\n      'dice',\n      'cards',\n      'counters',\n      'calculator',\n      'ruler',\n      'computer',\n      'tablet',\n      'whiteboard',\n      'manipulatives',\n    ];\n\n    for (const material of specificMaterials) {\n      if (\n        text.toLowerCase().includes(material) &&\n        !materials.some((m) => m.toLowerCase().includes(material))\n      ) {\n        materials.push(material);\n      }\n    }\n\n    return Array.from(new Set(materials)); // Remove duplicates\n  }\n\n  /**\n   * Fetch with timeout support using AbortController\n   * @param url The URL to fetch from\n   * @param options Fetch options including headers\n   * @param timeoutMs Timeout in milliseconds (default 30 seconds)\n   * @returns Promise that resolves to Response or rejects on timeout/error\n   */\n  protected async fetchWithTimeout(\n    url: string,\n    options: RequestInit = {},\n    timeoutMs: number = 30000\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error(`Request timeout after ${timeoutMs}ms: ${url}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch with retry and timeout support\n   * @param url The URL to fetch from\n   * @param options Fetch options including headers\n   * @param maxRetries Maximum number of retry attempts (default 3)\n   * @param timeoutMs Timeout per request in milliseconds (default 30 seconds)\n   * @param retryDelay Base delay between retries in milliseconds (default 1000)\n   * @returns Promise that resolves to string response body or null on failure\n   */\n  protected async fetchWithRetryAndTimeout(\n    url: string,\n    options: RequestInit = {},\n    maxRetries: number = 3,\n    timeoutMs: number = 30000,\n    retryDelay: number = 1000\n  ): Promise<string | null> {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const response = await this.fetchWithTimeout(url, options, timeoutMs);\n\n        if (response.ok) {\n          return await response.text();\n        } else if (response.status === 429) {\n          // Rate limited, wait longer\n          const backoffDelay = retryDelay * attempt * 2;\n          console.log(`Rate limited. Waiting ${backoffDelay}ms before retry...`);\n          await this.delay(backoffDelay);\n          continue;\n        } else {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(`Attempt ${attempt}/${maxRetries} failed for ${url}:`, error);\n        \n        if (attempt < maxRetries) {\n          const backoffDelay = retryDelay * attempt;\n          console.log(`Retrying in ${backoffDelay}ms...`);\n          await this.delay(backoffDelay);\n        } else {\n          console.error(`All ${maxRetries} attempts failed for ${url}`);\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Helper method to delay execution\n   * @param ms Milliseconds to delay\n   */\n  protected delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n"],"version":3}