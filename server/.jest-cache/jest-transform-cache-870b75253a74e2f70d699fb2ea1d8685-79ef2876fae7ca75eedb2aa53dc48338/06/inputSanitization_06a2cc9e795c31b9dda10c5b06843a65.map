{"version":3,"names":["cov_o75b64vfv","actualCoverage","DOMPurify","sanitizeInput","req","res","next","f","s","b","body","sanitizeObject","query","params","error","console","status","json","obj","undefined","sanitizeString","Array","isArray","map","item","sanitized","key","value","Object","entries","sanitizedKey","str","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","KEEP_CONTENT","replace","length","substring","sanitizeHtml","dirty","FORBID_TAGS","FORBID_ATTR","ALLOW_DATA_ATTR","SANITIZE_DOM","sanitizeEmail","email","trim","toLowerCase","sanitizeUrl","url","match","escapeSqlIdentifier","identifier","Error","test"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/inputSanitization.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { ParsedQs } from 'qs';\nimport { ParamsDictionary } from 'express-serve-static-core';\nimport DOMPurify from 'isomorphic-dompurify';\n\n/**\n * Input sanitization middleware to prevent XSS and injection attacks\n */\nexport function sanitizeInput(req: Request, res: Response, next: NextFunction) {\n  try {\n    // Sanitize request body\n    if (req.body && typeof req.body === 'object') {\n      req.body = sanitizeObject(req.body);\n    }\n\n    // Sanitize query parameters\n    if (req.query && typeof req.query === 'object') {\n      req.query = sanitizeObject(req.query) as ParsedQs;\n    }\n\n    // Sanitize params\n    if (req.params && typeof req.params === 'object') {\n      req.params = sanitizeObject(req.params) as ParamsDictionary;\n    }\n\n    next();\n  } catch (error) {\n    console.error('Input sanitization error:', error);\n    res.status(400).json({ error: 'Invalid input data' });\n  }\n}\n\n/**\n * Recursively sanitize an object's string values\n */\nfunction sanitizeObject(obj: unknown): unknown {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  if (typeof obj === 'object') {\n    const sanitized: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      // Sanitize the key as well\n      const sanitizedKey = sanitizeString(key);\n      sanitized[sanitizedKey] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n/**\n * Sanitize a string value\n */\nfunction sanitizeString(str: string): string {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  // Remove potential XSS vectors\n  let sanitized = str;\n\n  // Remove script tags and event handlers\n  sanitized = DOMPurify.sanitize(sanitized, {\n    ALLOWED_TAGS: [],\n    ALLOWED_ATTR: [],\n    KEEP_CONTENT: true\n  });\n\n  // Remove null bytes and control characters\n  sanitized = sanitized.replace(/\\0/g, '');\n  // eslint-disable-next-line no-control-regex\n  sanitized = sanitized.replace(/[\\x00-\\x1F\\x7F]/g, '');\n\n  // Limit string length to prevent DoS\n  if (sanitized.length > 10000) {\n    sanitized = sanitized.substring(0, 10000);\n  }\n\n  return sanitized;\n}\n\n/**\n * Strict HTML sanitization for rich text content\n */\nexport function sanitizeHtml(dirty: string): string {\n  if (!dirty || typeof dirty !== 'string') {\n    return '';\n  }\n\n  return DOMPurify.sanitize(dirty, {\n    ALLOWED_TAGS: [\n      'p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li',\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote'\n    ],\n    ALLOWED_ATTR: ['class'],\n    FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input', 'iframe'],\n    FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'onfocus', 'onblur'],\n    ALLOW_DATA_ATTR: false,\n    SANITIZE_DOM: true,\n    KEEP_CONTENT: true\n  });\n}\n\n/**\n * Validate and sanitize email addresses\n */\nexport function sanitizeEmail(email: string): string {\n  if (!email || typeof email !== 'string') {\n    return '';\n  }\n\n  // Basic email sanitization\n  let sanitized = email.trim().toLowerCase();\n  \n  // Remove dangerous characters\n  sanitized = sanitized.replace(/[<>'\"]/g, '');\n  \n  // Limit length\n  if (sanitized.length > 255) {\n    sanitized = sanitized.substring(0, 255);\n  }\n\n  return sanitized;\n}\n\n/**\n * Validate and sanitize URLs\n */\nexport function sanitizeUrl(url: string): string {\n  if (!url || typeof url !== 'string') {\n    return '';\n  }\n\n  let sanitized = url.trim();\n\n  // Only allow http/https protocols\n  if (!sanitized.match(/^https?:\\/\\//)) {\n    return '';\n  }\n\n  // Remove dangerous characters\n  sanitized = sanitized.replace(/[<>'\"]/g, '');\n\n  // Limit length\n  if (sanitized.length > 2000) {\n    return '';\n  }\n\n  return sanitized;\n}\n\n/**\n * SQL injection prevention for dynamic queries\n */\nexport function escapeSqlIdentifier(identifier: string): string {\n  if (!identifier || typeof identifier !== 'string') {\n    throw new Error('Invalid SQL identifier');\n  }\n\n  // Allow only alphanumeric and underscore\n  if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(identifier)) {\n    throw new Error('Invalid SQL identifier format');\n  }\n\n  return identifier;\n}\n\nexport default {\n  sanitizeInput,\n  sanitizeHtml,\n  sanitizeEmail,\n  sanitizeUrl,\n  escapeSqlIdentifier\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}