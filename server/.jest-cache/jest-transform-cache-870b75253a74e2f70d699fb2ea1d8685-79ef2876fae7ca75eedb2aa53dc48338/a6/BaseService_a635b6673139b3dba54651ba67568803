fa57423b39996b11831c1093a2e4027c
import { prisma } from '../../prisma';
import logger from '../../logger';
export class BaseService {
    prisma;
    logger;
    serviceName;
    metrics;
    constructor(serviceName) {
        this.prisma = prisma;
        this.serviceName = serviceName || this.constructor.name;
        this.logger = logger.child({ service: this.serviceName });
        this.metrics = {
            operationCount: 0,
            errorCount: 0,
            averageResponseTime: 0,
            lastOperation: new Date(),
        };
    }
    /**
     * Execute a function with retry logic and metrics tracking
     */
    async withRetry(operation, options = {}) {
        const opts = {
            maxRetries: 3,
            baseDelay: 1000,
            maxDelay: 10000,
            exponentialBackoff: true,
            ...options,
        };
        const startTime = Date.now();
        let lastError;
        for (let attempt = 1; attempt <= opts.maxRetries + 1; attempt++) {
            try {
                const result = await operation();
                // Update metrics on success
                this.updateMetrics(Date.now() - startTime, false);
                if (attempt > 1) {
                    this.logger.info({ attempt, serviceName: this.serviceName }, 'Operation succeeded after retry');
                }
                return result;
            }
            catch (error) {
                lastError = error;
                if (attempt <= opts.maxRetries) {
                    const delay = opts.exponentialBackoff
                        ? Math.min(opts.baseDelay * Math.pow(2, attempt - 1), opts.maxDelay)
                        : opts.baseDelay;
                    this.logger.warn({
                        error: error.message,
                        attempt,
                        maxRetries: opts.maxRetries,
                        nextRetryIn: delay,
                        serviceName: this.serviceName,
                    }, 'Operation failed, retrying');
                    await this.sleep(delay);
                }
            }
        }
        // Update metrics on final failure
        this.updateMetrics(Date.now() - startTime, true);
        this.logger.error({
            error: lastError,
            attempts: opts.maxRetries + 1,
            serviceName: this.serviceName,
        }, 'All retry attempts failed');
        throw lastError;
    }
    /**
     * Execute a function within a database transaction
     */
    async withTransaction(operation) {
        return await this.withRetry(async () => {
            return await this.prisma.$transaction(operation);
        });
    }
    /**
     * Execute multiple operations in parallel with error handling
     */
    async withParallel(operations, options = {}) {
        const { failFast = false, maxConcurrency = 10 } = options;
        const results = [];
        const errors = [];
        let successCount = 0;
        // Process operations in batches if max concurrency is set
        const batches = this.createBatches(operations, maxConcurrency);
        let globalIndex = 0;
        for (const batch of batches) {
            const batchStartIndex = globalIndex;
            const promises = batch.map(async (operation, batchIndex) => {
                const operationIndex = batchStartIndex + batchIndex;
                try {
                    const result = await operation();
                    results[operationIndex] = result;
                    errors[operationIndex] = null;
                    successCount++;
                    return result;
                }
                catch (error) {
                    results[operationIndex] = null;
                    errors[operationIndex] = error;
                    if (failFast) {
                        throw error;
                    }
                    this.logger.warn({
                        error: error.message,
                        operationIndex: operationIndex,
                        serviceName: this.serviceName,
                    }, 'Parallel operation failed');
                    return null;
                }
            });
            if (failFast) {
                try {
                    await Promise.all(promises);
                }
                catch (error) {
                    // When failFast is true, stop processing remaining batches
                    break;
                }
            }
            else {
                await Promise.all(promises);
            }
            globalIndex += batch.length;
        }
        return { results, errors, successCount };
    }
    /**
     * Standardized error handling
     */
    handleError(error, context) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        const errorStack = error instanceof Error ? error.stack : undefined;
        this.logger.error({
            error: errorMessage,
            stack: errorStack,
            context,
            serviceName: this.serviceName,
        }, 'Service operation failed');
        // Re-throw with service context
        if (error instanceof Error) {
            error.message = `${this.serviceName}: ${error.message}`;
            throw error;
        }
        throw new Error(`${this.serviceName}: ${errorMessage}`);
    }
    /**
     * Validate required parameters
     */
    validateRequired(params, required) {
        const missing = required.filter((key) => params[key] === undefined || params[key] === null || params[key] === '');
        if (missing.length > 0) {
            throw new Error(`Missing required parameters: ${missing.join(', ')}`);
        }
    }
    /**
     * Sanitize and validate input data
     */
    sanitizeInput(input, schema) {
        const sanitized = { ...input };
        for (const [key, expectedType] of Object.entries(schema)) {
            const value = sanitized[key];
            if (value === undefined || value === null)
                continue;
            switch (expectedType) {
                case 'string':
                    if (typeof value !== 'string') {
                        sanitized[key] = String(value);
                    }
                    // Trim whitespace and limit length
                    sanitized[key] = String(value).trim().slice(0, 1000);
                    break;
                case 'number':
                    if (typeof value !== 'number') {
                        const parsed = Number(value);
                        if (isNaN(parsed)) {
                            throw new Error(`Invalid number value for ${key}: ${value}`);
                        }
                        sanitized[key] = parsed;
                    }
                    break;
                case 'boolean':
                    if (typeof value !== 'boolean') {
                        sanitized[key] = Boolean(value);
                    }
                    break;
                case 'object':
                    if (typeof value !== 'object' || Array.isArray(value)) {
                        throw new Error(`Expected object for ${key}, got ${typeof value}`);
                    }
                    break;
                case 'array':
                    if (!Array.isArray(value)) {
                        throw new Error(`Expected array for ${key}, got ${typeof value}`);
                    }
                    break;
            }
        }
        return sanitized;
    }
    /**
     * Get service performance metrics
     */
    getMetrics() {
        return { ...this.metrics };
    }
    /**
     * Reset service metrics
     */
    resetMetrics() {
        this.metrics = {
            operationCount: 0,
            errorCount: 0,
            averageResponseTime: 0,
            lastOperation: new Date(),
        };
    }
    /**
     * Check service health
     */
    async healthCheck() {
        try {
            // Test database connection
            await this.prisma.$queryRaw `SELECT 1`;
            return {
                healthy: true,
                details: {
                    database: true,
                    metrics: this.getMetrics(),
                    uptime: Date.now() - this.metrics.lastOperation.getTime(),
                },
            };
        }
        catch (error) {
            this.logger.error({ error }, 'Health check failed');
            return {
                healthy: false,
                details: {
                    database: false,
                    metrics: this.getMetrics(),
                    uptime: Date.now() - this.metrics.lastOperation.getTime(),
                },
            };
        }
    }
    // Private helper methods
    updateMetrics(responseTime, isError) {
        this.metrics.operationCount++;
        this.metrics.lastOperation = new Date();
        if (isError) {
            this.metrics.errorCount++;
        }
        // Update rolling average response time
        const totalTime = this.metrics.averageResponseTime * (this.metrics.operationCount - 1);
        this.metrics.averageResponseTime = (totalTime + responseTime) / this.metrics.operationCount;
    }
    sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    createBatches(items, batchSize) {
        const batches = [];
        for (let i = 0; i < items.length; i += batchSize) {
            batches.push(items.slice(i, i + batchSize));
        }
        return batches;
    }
}
export default BaseService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,