53d13618f59fa54d46f20eb83698f060
/* istanbul ignore next */
function cov_vymal58t4() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/unit-plans.ts";
  var hash = "c583b1463945389c27090c095058ecb1d2517a8c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/unit-plans.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 23
        }
      },
      "1": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "2": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 91
        }
      },
      "3": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 100,
          column: 3
        }
      },
      "4": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "5": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 40
        }
      },
      "6": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "7": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 67
        }
      },
      "8": {
        start: {
          line: 63,
          column: 56
        },
        end: {
          line: 63,
          column: 65
        }
      },
      "9": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 32
        }
      },
      "10": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 66,
          column: 60
        }
      },
      "11": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 60
        }
      },
      "12": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "13": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 33
        }
      },
      "14": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 70,
          column: 66
        }
      },
      "15": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 66
        }
      },
      "16": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 72,
          column: 64
        }
      },
      "17": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 64
        }
      },
      "18": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 94,
          column: 10
        }
      },
      "19": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 28
        }
      },
      "20": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 19
        }
      },
      "21": {
        start: {
          line: 102,
          column: 0
        },
        end: {
          line: 162,
          column: 3
        }
      },
      "22": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "23": {
        start: {
          line: 104,
          column: 23
        },
        end: {
          line: 104,
          column: 40
        }
      },
      "24": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "25": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 67
        }
      },
      "26": {
        start: {
          line: 108,
          column: 25
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "27": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "28": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 74
        }
      },
      "29": {
        start: {
          line: 147,
          column: 29
        },
        end: {
          line: 147,
          column: 56
        }
      },
      "30": {
        start: {
          line: 148,
          column: 33
        },
        end: {
          line: 148,
          column: 92
        }
      },
      "31": {
        start: {
          line: 148,
          column: 69
        },
        end: {
          line: 148,
          column: 84
        }
      },
      "32": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 99
        }
      },
      "33": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "34": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "35": {
        start: {
          line: 164,
          column: 0
        },
        end: {
          line: 240,
          column: 3
        }
      },
      "36": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "37": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 40
        }
      },
      "38": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "39": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 67
        }
      },
      "40": {
        start: {
          line: 170,
          column: 143
        },
        end: {
          line: 170,
          column: 151
        }
      },
      "41": {
        start: {
          line: 172,
          column: 30
        },
        end: {
          line: 177,
          column: 10
        }
      },
      "42": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "43": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 80
        }
      },
      "44": {
        start: {
          line: 182,
          column: 23
        },
        end: {
          line: 234,
          column: 10
        }
      },
      "45": {
        start: {
          line: 184,
          column: 29
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "46": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "47": {
        start: {
          line: 200,
          column: 42
        },
        end: {
          line: 203,
          column: 18
        }
      },
      "48": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "49": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 205,
          column: 85
        }
      },
      "50": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 212,
          column: 19
        }
      },
      "51": {
        start: {
          line: 208,
          column: 65
        },
        end: {
          line: 211,
          column: 21
        }
      },
      "52": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "53": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 37
        }
      },
      "54": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 19
        }
      },
      "55": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 315,
          column: 3
        }
      },
      "56": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 314,
          column: 5
        }
      },
      "57": {
        start: {
          line: 244,
          column: 23
        },
        end: {
          line: 244,
          column: 40
        }
      },
      "58": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "59": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 67
        }
      },
      "60": {
        start: {
          line: 248,
          column: 145
        },
        end: {
          line: 248,
          column: 153
        }
      },
      "61": {
        start: {
          line: 250,
          column: 25
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "62": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "63": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 74
        }
      },
      "64": {
        start: {
          line: 257,
          column: 21
        },
        end: {
          line: 257,
          column: 38
        }
      },
      "65": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "66": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "67": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 261,
          column: 56
        }
      },
      "68": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 56
        }
      },
      "69": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 263,
          column: 57
        }
      },
      "70": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 57
        }
      },
      "71": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 265,
          column: 51
        }
      },
      "72": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 51
        }
      },
      "73": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 267,
          column: 49
        }
      },
      "74": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 49
        }
      },
      "75": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 269,
          column: 47
        }
      },
      "76": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 47
        }
      },
      "77": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 271,
          column: 71
        }
      },
      "78": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 71
        }
      },
      "79": {
        start: {
          line: 273,
          column: 25
        },
        end: {
          line: 276,
          column: 10
        }
      },
      "80": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "81": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "82": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "83": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 290,
          column: 19
        }
      },
      "84": {
        start: {
          line: 286,
          column: 65
        },
        end: {
          line: 289,
          column: 21
        }
      },
      "85": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 309,
          column: 10
        }
      },
      "86": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 30
        }
      },
      "87": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 19
        }
      },
      "88": {
        start: {
          line: 317,
          column: 0
        },
        end: {
          line: 346,
          column: 3
        }
      },
      "89": {
        start: {
          line: 318,
          column: 4
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "90": {
        start: {
          line: 319,
          column: 23
        },
        end: {
          line: 319,
          column: 40
        }
      },
      "91": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "92": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 67
        }
      },
      "93": {
        start: {
          line: 324,
          column: 25
        },
        end: {
          line: 329,
          column: 10
        }
      },
      "94": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "95": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 74
        }
      },
      "96": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "97": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 336,
          column: 15
        }
      },
      "98": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 11
        }
      },
      "99": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 30
        }
      },
      "100": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 19
        }
      },
      "101": {
        start: {
          line: 348,
          column: 0
        },
        end: {
          line: 379,
          column: 3
        }
      },
      "102": {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 378,
          column: 5
        }
      },
      "103": {
        start: {
          line: 350,
          column: 23
        },
        end: {
          line: 350,
          column: 40
        }
      },
      "104": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "105": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 67
        }
      },
      "106": {
        start: {
          line: 354,
          column: 44
        },
        end: {
          line: 354,
          column: 52
        }
      },
      "107": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "108": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 82
        }
      },
      "109": {
        start: {
          line: 359,
          column: 25
        },
        end: {
          line: 361,
          column: 10
        }
      },
      "110": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "111": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 74
        }
      },
      "112": {
        start: {
          line: 365,
          column: 25
        },
        end: {
          line: 373,
          column: 10
        }
      },
      "113": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 39
        }
      },
      "114": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 377,
          column: 19
        }
      },
      "115": {
        start: {
          line: 381,
          column: 0
        },
        end: {
          line: 408,
          column: 3
        }
      },
      "116": {
        start: {
          line: 382,
          column: 4
        },
        end: {
          line: 407,
          column: 5
        }
      },
      "117": {
        start: {
          line: 383,
          column: 23
        },
        end: {
          line: 383,
          column: 40
        }
      },
      "118": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "119": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 67
        }
      },
      "120": {
        start: {
          line: 388,
          column: 25
        },
        end: {
          line: 396,
          column: 10
        }
      },
      "121": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "122": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 73
        }
      },
      "123": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 402,
          column: 11
        }
      },
      "124": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 403,
          column: 30
        }
      },
      "125": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 19
        }
      },
      "126": {
        start: {
          line: 410,
          column: 0
        },
        end: {
          line: 519,
          column: 3
        }
      },
      "127": {
        start: {
          line: 411,
          column: 4
        },
        end: {
          line: 518,
          column: 5
        }
      },
      "128": {
        start: {
          line: 412,
          column: 23
        },
        end: {
          line: 412,
          column: 40
        }
      },
      "129": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 415,
          column: 9
        }
      },
      "130": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 67
        }
      },
      "131": {
        start: {
          line: 416,
          column: 68
        },
        end: {
          line: 416,
          column: 76
        }
      },
      "132": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "133": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 87
        }
      },
      "134": {
        start: {
          line: 421,
          column: 27
        },
        end: {
          line: 435,
          column: 10
        }
      },
      "135": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "136": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 81
        }
      },
      "137": {
        start: {
          line: 440,
          column: 23
        },
        end: {
          line: 513,
          column: 10
        }
      },
      "138": {
        start: {
          line: 442,
          column: 37
        },
        end: {
          line: 442,
          column: 98
        }
      },
      "139": {
        start: {
          line: 443,
          column: 33
        },
        end: {
          line: 443,
          column: 43
        }
      },
      "140": {
        start: {
          line: 444,
          column: 31
        },
        end: {
          line: 444,
          column: 82
        }
      },
      "141": {
        start: {
          line: 446,
          column: 139
        },
        end: {
          line: 446,
          column: 149
        }
      },
      "142": {
        start: {
          line: 447,
          column: 28
        },
        end: {
          line: 455,
          column: 14
        }
      },
      "143": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 464,
          column: 13
        }
      },
      "144": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 463,
          column: 19
        }
      },
      "145": {
        start: {
          line: 459,
          column: 53
        },
        end: {
          line: 462,
          column: 21
        }
      },
      "146": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 473,
          column: 13
        }
      },
      "147": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 472,
          column: 19
        }
      },
      "148": {
        start: {
          line: 468,
          column: 119
        },
        end: {
          line: 471,
          column: 21
        }
      },
      "149": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 511,
          column: 13
        }
      },
      "150": {
        start: {
          line: 476,
          column: 16
        },
        end: {
          line: 510,
          column: 17
        }
      },
      "151": {
        start: {
          line: 477,
          column: 128
        },
        end: {
          line: 477,
          column: 134
        }
      },
      "152": {
        start: {
          line: 478,
          column: 38
        },
        end: {
          line: 478,
          column: 63
        }
      },
      "153": {
        start: {
          line: 479,
          column: 38
        },
        end: {
          line: 479,
          column: 60
        }
      },
      "154": {
        start: {
          line: 481,
          column: 43
        },
        end: {
          line: 481,
          column: 97
        }
      },
      "155": {
        start: {
          line: 482,
          column: 42
        },
        end: {
          line: 482,
          column: 91
        }
      },
      "156": {
        start: {
          line: 483,
          column: 38
        },
        end: {
          line: 491,
          column: 22
        }
      },
      "157": {
        start: {
          line: 493,
          column: 20
        },
        end: {
          line: 500,
          column: 21
        }
      },
      "158": {
        start: {
          line: 494,
          column: 24
        },
        end: {
          line: 499,
          column: 27
        }
      },
      "159": {
        start: {
          line: 495,
          column: 58
        },
        end: {
          line: 498,
          column: 29
        }
      },
      "160": {
        start: {
          line: 502,
          column: 20
        },
        end: {
          line: 509,
          column: 21
        }
      },
      "161": {
        start: {
          line: 503,
          column: 24
        },
        end: {
          line: 508,
          column: 27
        }
      },
      "162": {
        start: {
          line: 504,
          column: 131
        },
        end: {
          line: 507,
          column: 29
        }
      },
      "163": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 27
        }
      },
      "164": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 514,
          column: 37
        }
      },
      "165": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 517,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        },
        loc: {
          start: {
            line: 57,
            column: 43
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 57
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 20
          }
        },
        loc: {
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 162,
            column: 1
          }
        },
        line: 102
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 148,
            column: 61
          },
          end: {
            line: 148,
            column: 62
          }
        },
        loc: {
          start: {
            line: 148,
            column: 69
          },
          end: {
            line: 148,
            column: 84
          }
        },
        line: 148
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 164,
            column: 49
          },
          end: {
            line: 164,
            column: 50
          }
        },
        loc: {
          start: {
            line: 164,
            column: 76
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 164
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 182,
            column: 49
          },
          end: {
            line: 182,
            column: 50
          }
        },
        loc: {
          start: {
            line: 182,
            column: 63
          },
          end: {
            line: 234,
            column: 9
          }
        },
        line: 182
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 208,
            column: 45
          },
          end: {
            line: 208,
            column: 46
          }
        },
        loc: {
          start: {
            line: 208,
            column: 65
          },
          end: {
            line: 211,
            column: 21
          }
        },
        line: 208
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 242,
            column: 52
          }
        },
        loc: {
          start: {
            line: 242,
            column: 78
          },
          end: {
            line: 315,
            column: 1
          }
        },
        line: 242
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 286,
            column: 45
          },
          end: {
            line: 286,
            column: 46
          }
        },
        loc: {
          start: {
            line: 286,
            column: 65
          },
          end: {
            line: 289,
            column: 21
          }
        },
        line: 286
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 317,
            column: 22
          },
          end: {
            line: 317,
            column: 23
          }
        },
        loc: {
          start: {
            line: 317,
            column: 49
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 317
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 348,
            column: 30
          },
          end: {
            line: 348,
            column: 31
          }
        },
        loc: {
          start: {
            line: 348,
            column: 57
          },
          end: {
            line: 379,
            column: 1
          }
        },
        line: 348
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 381,
            column: 44
          },
          end: {
            line: 381,
            column: 45
          }
        },
        loc: {
          start: {
            line: 381,
            column: 71
          },
          end: {
            line: 408,
            column: 1
          }
        },
        line: 381
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 410,
            column: 26
          },
          end: {
            line: 410,
            column: 27
          }
        },
        loc: {
          start: {
            line: 410,
            column: 53
          },
          end: {
            line: 519,
            column: 1
          }
        },
        line: 410
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 440,
            column: 49
          },
          end: {
            line: 440,
            column: 50
          }
        },
        loc: {
          start: {
            line: 440,
            column: 63
          },
          end: {
            line: 513,
            column: 9
          }
        },
        line: 440
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 459,
            column: 43
          },
          end: {
            line: 459,
            column: 44
          }
        },
        loc: {
          start: {
            line: 459,
            column: 53
          },
          end: {
            line: 462,
            column: 21
          }
        },
        line: 459
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 468,
            column: 40
          },
          end: {
            line: 468,
            column: 41
          }
        },
        loc: {
          start: {
            line: 468,
            column: 119
          },
          end: {
            line: 471,
            column: 21
          }
        },
        line: 468
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 495,
            column: 48
          },
          end: {
            line: 495,
            column: 49
          }
        },
        loc: {
          start: {
            line: 495,
            column: 58
          },
          end: {
            line: 498,
            column: 29
          }
        },
        line: 495
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 504,
            column: 48
          },
          end: {
            line: 504,
            column: 49
          }
        },
        loc: {
          start: {
            line: 504,
            column: 131
          },
          end: {
            line: 507,
            column: 29
          }
        },
        line: 504
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 59,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 59,
            column: 35
          }
        }, {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 59,
            column: 40
          }
        }],
        line: 59
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 66,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 66,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 21
          }
        }, {
          start: {
            line: 67,
            column: 25
          },
          end: {
            line: 67,
            column: 32
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 72,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 72,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 104,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 104,
            column: 35
          }
        }, {
          start: {
            line: 104,
            column: 39
          },
          end: {
            line: 104,
            column: 40
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 149,
            column: 25
          },
          end: {
            line: 149,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 44
          },
          end: {
            line: 149,
            column: 95
          }
        }, {
          start: {
            line: 149,
            column: 98
          },
          end: {
            line: 149,
            column: 99
          }
        }],
        line: 149
      },
      "11": {
        loc: {
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 35
          }
        }, {
          start: {
            line: 166,
            column: 39
          },
          end: {
            line: 166,
            column: 40
          }
        }],
        line: 166
      },
      "12": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "13": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "14": {
        loc: {
          start: {
            line: 190,
            column: 40
          },
          end: {
            line: 190,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 40
          },
          end: {
            line: 190,
            column: 58
          }
        }, {
          start: {
            line: 190,
            column: 62
          },
          end: {
            line: 190,
            column: 64
          }
        }],
        line: 190
      },
      "15": {
        loc: {
          start: {
            line: 191,
            column: 37
          },
          end: {
            line: 191,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 37
          },
          end: {
            line: 191,
            column: 52
          }
        }, {
          start: {
            line: 191,
            column: 56
          },
          end: {
            line: 191,
            column: 58
          }
        }],
        line: 191
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 50
          }
        }, {
          start: {
            line: 192,
            column: 54
          },
          end: {
            line: 192,
            column: 56
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 48
          }
        }, {
          start: {
            line: 193,
            column: 52
          },
          end: {
            line: 193,
            column: 54
          }
        }],
        line: 193
      },
      "18": {
        loc: {
          start: {
            line: 194,
            column: 47
          },
          end: {
            line: 194,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 47
          },
          end: {
            line: 194,
            column: 72
          }
        }, {
          start: {
            line: 194,
            column: 76
          },
          end: {
            line: 194,
            column: 80
          }
        }],
        line: 194
      },
      "19": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "20": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 30
          }
        }, {
          start: {
            line: 198,
            column: 34
          },
          end: {
            line: 198,
            column: 59
          }
        }],
        line: 198
      },
      "21": {
        loc: {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "22": {
        loc: {
          start: {
            line: 244,
            column: 23
          },
          end: {
            line: 244,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 23
          },
          end: {
            line: 244,
            column: 35
          }
        }, {
          start: {
            line: 244,
            column: 39
          },
          end: {
            line: 244,
            column: 40
          }
        }],
        line: 244
      },
      "23": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "24": {
        loc: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "25": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 259,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 259,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "26": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 261,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 261,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "27": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 263,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 263,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "28": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 265,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 265,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "29": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 267,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 267,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "30": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 269,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 269,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "31": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 271,
            column: 71
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 271,
            column: 71
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "32": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "33": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 291,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "34": {
        loc: {
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 319,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 319,
            column: 35
          }
        }, {
          start: {
            line: 319,
            column: 39
          },
          end: {
            line: 319,
            column: 40
          }
        }],
        line: 319
      },
      "35": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "36": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "37": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "38": {
        loc: {
          start: {
            line: 350,
            column: 23
          },
          end: {
            line: 350,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 23
          },
          end: {
            line: 350,
            column: 35
          }
        }, {
          start: {
            line: 350,
            column: 39
          },
          end: {
            line: 350,
            column: 40
          }
        }],
        line: 350
      },
      "39": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "40": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "41": {
        loc: {
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 355,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 355,
            column: 18
          }
        }, {
          start: {
            line: 355,
            column: 22
          },
          end: {
            line: 355,
            column: 27
          }
        }],
        line: 355
      },
      "42": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "43": {
        loc: {
          start: {
            line: 370,
            column: 21
          },
          end: {
            line: 370,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 370,
            column: 27
          },
          end: {
            line: 370,
            column: 38
          }
        }, {
          start: {
            line: 370,
            column: 41
          },
          end: {
            line: 370,
            column: 45
          }
        }],
        line: 370
      },
      "44": {
        loc: {
          start: {
            line: 371,
            column: 23
          },
          end: {
            line: 371,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 371,
            column: 31
          },
          end: {
            line: 371,
            column: 44
          }
        }, {
          start: {
            line: 371,
            column: 47
          },
          end: {
            line: 371,
            column: 51
          }
        }],
        line: 371
      },
      "45": {
        loc: {
          start: {
            line: 383,
            column: 23
          },
          end: {
            line: 383,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 23
          },
          end: {
            line: 383,
            column: 35
          }
        }, {
          start: {
            line: 383,
            column: 39
          },
          end: {
            line: 383,
            column: 40
          }
        }],
        line: 383
      },
      "46": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "47": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "48": {
        loc: {
          start: {
            line: 412,
            column: 23
          },
          end: {
            line: 412,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 23
          },
          end: {
            line: 412,
            column: 35
          }
        }, {
          start: {
            line: 412,
            column: 39
          },
          end: {
            line: 412,
            column: 40
          }
        }],
        line: 412
      },
      "49": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 415,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "50": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 419,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "51": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 417,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 417,
            column: 21
          }
        }, {
          start: {
            line: 417,
            column: 25
          },
          end: {
            line: 417,
            column: 31
          }
        }],
        line: 417
      },
      "52": {
        loc: {
          start: {
            line: 426,
            column: 29
          },
          end: {
            line: 433,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 427,
            column: 22
          },
          end: {
            line: 432,
            column: 21
          }
        }, {
          start: {
            line: 433,
            column: 22
          },
          end: {
            line: 433,
            column: 27
          }
        }],
        line: 426
      },
      "53": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "54": {
        loc: {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 464,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "55": {
        loc: {
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 473,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 473,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "56": {
        loc: {
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 511,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 12
          },
          end: {
            line: 511,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "57": {
        loc: {
          start: {
            line: 475,
            column: 16
          },
          end: {
            line: 475,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 16
          },
          end: {
            line: 475,
            column: 31
          }
        }, {
          start: {
            line: 475,
            column: 35
          },
          end: {
            line: 475,
            column: 46
          }
        }, {
          start: {
            line: 475,
            column: 50
          },
          end: {
            line: 475,
            column: 72
          }
        }],
        line: 475
      },
      "58": {
        loc: {
          start: {
            line: 478,
            column: 38
          },
          end: {
            line: 478,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 478,
            column: 38
          },
          end: {
            line: 478,
            column: 57
          }
        }, {
          start: {
            line: 478,
            column: 61
          },
          end: {
            line: 478,
            column: 63
          }
        }],
        line: 478
      },
      "59": {
        loc: {
          start: {
            line: 479,
            column: 38
          },
          end: {
            line: 479,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 479,
            column: 38
          },
          end: {
            line: 479,
            column: 54
          }
        }, {
          start: {
            line: 479,
            column: 58
          },
          end: {
            line: 479,
            column: 60
          }
        }],
        line: 479
      },
      "60": {
        loc: {
          start: {
            line: 493,
            column: 20
          },
          end: {
            line: 500,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 20
          },
          end: {
            line: 500,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "61": {
        loc: {
          start: {
            line: 502,
            column: 20
          },
          end: {
            line: 509,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 20
          },
          end: {
            line: 509,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/unit-plans.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/unit-plans.ts"],
      sourcesContent: ["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate, cuidSchema } from '../validation';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Enhanced validation schemas with security measures\nconst unitPlanCreateSchema = z.object({\n  title: z\n    .string()\n    .min(1)\n    .max(255)\n    .regex(/^[^<>]*$/, 'Title cannot contain HTML tags'),\n  titleFr: z\n    .string()\n    .max(255)\n    .regex(/^[^<>]*$/, 'French title cannot contain HTML tags')\n    .optional(),\n  longRangePlanId: cuidSchema(),\n  description: z.string().max(2000).optional(),\n  descriptionFr: z.string().max(2000).optional(),\n  bigIdeas: z.string().max(2000).optional(),\n  bigIdeasFr: z.string().max(2000).optional(),\n  essentialQuestions: z.array(z.string().max(500)).max(20).optional(),\n  startDate: z.string().datetime(),\n  endDate: z.string().datetime(),\n  estimatedHours: z.number().int().positive().max(1000).optional(),\n  assessmentPlan: z.string().max(2000).optional(),\n  successCriteria: z.array(z.string().max(500)).max(20).optional(),\n  expectationIds: z\n    .array(cuidSchema())\n    .max(50)\n    .min(1, 'At least one curriculum expectation must be selected'),\n\n  // ETFO-aligned planning fields with validation\n  crossCurricularConnections: z.string().max(1000).optional(),\n  learningSkills: z.array(z.string().max(100)).max(10).optional(),\n  culminatingTask: z.string().max(1000).optional(),\n  keyVocabulary: z.array(z.string().max(100)).max(30).optional(),\n  priorKnowledge: z.string().max(1000).optional(),\n  parentCommunicationPlan: z.string().max(1000).optional(),\n  fieldTripsAndGuestSpeakers: z.string().max(1000).optional(),\n  differentiationStrategies: z\n    .object({\n      forStruggling: z.array(z.string().max(200)).max(10).optional(),\n      forAdvanced: z.array(z.string().max(200)).max(10).optional(),\n      forELL: z.array(z.string().max(200)).max(10).optional(),\n      forIEP: z.array(z.string().max(200)).max(10).optional(),\n    })\n    .optional(),\n  indigenousPerspectives: z.string().max(1000).optional(),\n  environmentalEducation: z.string().max(1000).optional(),\n  socialJusticeConnections: z.string().max(1000).optional(),\n  technologyIntegration: z.string().max(1000).optional(),\n  communityConnections: z.string().max(1000).optional(),\n});\n\nconst unitPlanUpdateSchema = unitPlanCreateSchema.partial().omit({ longRangePlanId: true });\n\n// Get all unit plans for the authenticated user\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { longRangePlanId, startDate, endDate } = req.query;\n\n    const where: Prisma.UnitPlanWhereInput = { userId };\n    if (longRangePlanId) where.longRangePlanId = String(longRangePlanId);\n    if (startDate || endDate) {\n      where.startDate = {};\n      if (startDate) where.startDate.gte = new Date(String(startDate));\n      if (endDate) where.startDate.lte = new Date(String(endDate));\n    }\n\n    const unitPlans = await prisma.unitPlan.findMany({\n      where,\n      orderBy: { startDate: 'asc' },\n      include: {\n        longRangePlan: {\n          select: {\n            id: true,\n            title: true,\n            subject: true,\n            grade: true,\n          },\n        },\n        _count: {\n          select: {\n            lessonPlans: true,\n            expectations: true,\n            resources: true,\n          },\n        },\n      },\n    });\n\n    res.json(unitPlans);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single unit plan\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: {\n        id: req.params.id,\n        userId,\n      },\n      include: {\n        longRangePlan: true,\n        expectations: {\n          include: {\n            expectation: true,\n          },\n          orderBy: {\n            expectation: { code: 'asc' },\n          },\n        },\n        lessonPlans: {\n          orderBy: { date: 'asc' },\n          include: {\n            _count: {\n              select: { expectations: true },\n            },\n            daybookEntry: {\n              select: {\n                id: true,\n                overallRating: true,\n                wouldReuseLesson: true,\n              },\n            },\n          },\n        },\n        resources: {\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    // Calculate progress\n    const totalLessons = unitPlan.lessonPlans.length;\n    const completedLessons = unitPlan.lessonPlans.filter((lp) => lp.daybookEntry).length;\n    const progress = totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;\n\n    res.json({\n      ...unitPlan,\n      progress: {\n        total: totalLessons,\n        completed: completedLessons,\n        percentage: progress,\n      },\n    });\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new unit plan\nrouter.post('/', validate(unitPlanCreateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const {\n      expectationIds,\n      essentialQuestions,\n      successCriteria,\n      learningSkills,\n      keyVocabulary,\n      differentiationStrategies,\n      ...planData\n    } = req.body;\n\n    // Verify user owns the long-range plan\n    const longRangePlan = await prisma.longRangePlan.findFirst({\n      where: {\n        id: planData.longRangePlanId,\n        userId,\n      },\n    });\n\n    if (!longRangePlan) {\n      return res.status(404).json({ error: 'Long-range plan not found' });\n    }\n\n    // Use transaction to ensure data integrity\n    const result = await prisma.$transaction(async (tx) => {\n      // Create the unit plan\n      const unitPlan = await tx.unitPlan.create({\n        data: {\n          ...planData,\n          userId,\n          startDate: new Date(planData.startDate),\n          endDate: new Date(planData.endDate),\n          essentialQuestions: essentialQuestions || [],\n          successCriteria: successCriteria || [],\n          learningSkills: learningSkills || [],\n          keyVocabulary: keyVocabulary || [],\n          differentiationStrategies: differentiationStrategies || null,\n        },\n      });\n\n      // Link curriculum expectations if provided\n      if (expectationIds && expectationIds.length > 0) {\n        // Validate expectation IDs exist\n        const validExpectations = await tx.curriculumExpectation.findMany({\n          where: { id: { in: expectationIds } },\n          select: { id: true },\n        });\n\n        if (validExpectations.length !== expectationIds.length) {\n          throw new Error('One or more curriculum expectations not found');\n        }\n\n        await tx.unitPlanExpectation.createMany({\n          data: expectationIds.map((expectationId: string) => ({\n            unitPlanId: unitPlan.id,\n            expectationId,\n          })),\n        });\n      }\n\n      // Return the created unit plan with relations\n      return await tx.unitPlan.findUnique({\n        where: { id: unitPlan.id },\n        include: {\n          longRangePlan: {\n            select: {\n              id: true,\n              title: true,\n              subject: true,\n              grade: true,\n            },\n          },\n          _count: {\n            select: {\n              lessonPlans: true,\n              expectations: true,\n            },\n          },\n        },\n      });\n    });\n\n    res.status(201).json(result);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a unit plan\nrouter.put('/:id', validate(unitPlanUpdateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const {\n      expectationIds,\n      essentialQuestions,\n      successCriteria,\n      learningSkills,\n      keyVocabulary,\n      differentiationStrategies,\n      ...updateData\n    } = req.body;\n\n    // Verify ownership\n    const existing = await prisma.unitPlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!existing) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    // Prepare update data\n    const data: Prisma.UnitPlanUpdateInput = { ...updateData };\n    if (updateData.startDate) data.startDate = new Date(updateData.startDate);\n    if (updateData.endDate) data.endDate = new Date(updateData.endDate);\n    if (essentialQuestions !== undefined) data.essentialQuestions = essentialQuestions;\n    if (successCriteria !== undefined) data.successCriteria = successCriteria;\n    if (learningSkills !== undefined) data.learningSkills = learningSkills;\n    if (keyVocabulary !== undefined) data.keyVocabulary = keyVocabulary;\n    if (differentiationStrategies !== undefined)\n      data.differentiationStrategies = differentiationStrategies;\n\n    // Update the plan\n    const unitPlan = await prisma.unitPlan.update({\n      where: { id: req.params.id },\n      data,\n    });\n\n    // Update expectations if provided\n    if (expectationIds !== undefined) {\n      // Remove existing expectations\n      await prisma.unitPlanExpectation.deleteMany({\n        where: { unitPlanId: unitPlan.id },\n      });\n\n      // Add new expectations\n      if (expectationIds.length > 0) {\n        await prisma.unitPlanExpectation.createMany({\n          data: expectationIds.map((expectationId: string) => ({\n            unitPlanId: unitPlan.id,\n            expectationId,\n          })),\n        });\n      }\n    }\n\n    // Refetch with updated relationships\n    const updatedPlan = await prisma.unitPlan.findUnique({\n      where: { id: unitPlan.id },\n      include: {\n        longRangePlan: true,\n        expectations: {\n          include: { expectation: true },\n        },\n        lessonPlans: {\n          orderBy: { date: 'asc' },\n          include: {\n            _count: { select: { expectations: true } },\n          },\n        },\n        resources: true,\n      },\n    });\n\n    res.json(updatedPlan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a unit plan\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership and check for dependencies\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: { id: req.params.id, userId },\n      include: {\n        _count: { select: { lessonPlans: true } },\n      },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    if (unitPlan._count.lessonPlans > 0) {\n      return res.status(400).json({\n        error: 'Cannot delete unit plan with existing lesson plans',\n      });\n    }\n\n    await prisma.unitPlan.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Add a resource to unit plan\nrouter.post('/:id/resources', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { title, type, url, notes } = req.body;\n\n    if (!title || !type) {\n      return res.status(400).json({ error: 'Title and type are required' });\n    }\n\n    // Verify ownership\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    const resource = await prisma.unitPlanResource.create({\n      data: {\n        unitPlanId: req.params.id,\n        title: String(title),\n        type: String(type),\n        url: url ? String(url) : null,\n        notes: notes ? String(notes) : null,\n      },\n    });\n\n    res.status(201).json(resource);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a resource\nrouter.delete('/:id/resources/:resourceId', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership through unit plan\n    const resource = await prisma.unitPlanResource.findFirst({\n      where: {\n        id: req.params.resourceId,\n        unitPlan: {\n          id: req.params.id,\n          userId,\n        },\n      },\n    });\n\n    if (!resource) {\n      return res.status(404).json({ error: 'Resource not found' });\n    }\n\n    await prisma.unitPlanResource.delete({\n      where: { id: req.params.resourceId },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Duplicate a unit plan\nrouter.post('/duplicate', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { sourceId, title, notes: _notes, includeSubItems } = req.body;\n\n    if (!sourceId || !title) {\n      return res.status(400).json({ error: 'Source ID and title are required' });\n    }\n\n    // Fetch the source unit plan with all relations\n    const sourceUnit = await prisma.unitPlan.findFirst({\n      where: { id: sourceId, userId },\n      include: {\n        expectations: true,\n        resources: true,\n        lessonPlans: includeSubItems\n          ? {\n              include: {\n                expectations: true,\n                resources: true,\n              },\n            }\n          : false,\n      },\n    });\n\n    if (!sourceUnit) {\n      return res.status(404).json({ error: 'Source unit plan not found' });\n    }\n\n    // Create the duplicate in a transaction\n    const result = await prisma.$transaction(async (tx) => {\n      // Calculate new dates (shift to current period)\n      const originalDuration = sourceUnit.endDate.getTime() - sourceUnit.startDate.getTime();\n      const newStartDate = new Date();\n      const newEndDate = new Date(newStartDate.getTime() + originalDuration);\n\n      // Create the duplicate unit plan\n      const {\n        id: _,\n        userId: __,\n        createdAt: _createdAt,\n        updatedAt: _updatedAt,\n        lessonPlans,\n        expectations,\n        resources,\n        ...unitData\n      } = sourceUnit;\n\n      const newUnit = await tx.unitPlan.create({\n        data: {\n          ...unitData,\n          userId,\n          title,\n          startDate: newStartDate,\n          endDate: newEndDate,\n        },\n      });\n\n      // Copy expectations\n      if (expectations.length > 0) {\n        await tx.unitPlanExpectation.createMany({\n          data: expectations.map((exp) => ({\n            unitPlanId: newUnit.id,\n            expectationId: exp.expectationId,\n          })),\n        });\n      }\n\n      // Copy resources\n      if (resources.length > 0) {\n        await tx.unitPlanResource.createMany({\n          data: resources.map(\n            ({ id: _id, unitPlanId: _unitPlanId, createdAt: _createdAt, ...resource }) => ({\n              ...resource,\n              unitPlanId: newUnit.id,\n            }),\n          ),\n        });\n      }\n\n      // Copy lesson plans if requested\n      if (includeSubItems && lessonPlans && lessonPlans.length > 0) {\n        for (const lesson of lessonPlans) {\n          const {\n            id: _,\n            unitPlanId: __,\n            userId: ___,\n            createdAt: _createdAt,\n            updatedAt: _updatedAt,\n            ...lessonData\n          } = lesson;\n          const lessonExp =\n            (lesson as { expectations?: Array<{ expectationId: string }> }).expectations || [];\n          const lessonRes =\n            (\n              lesson as {\n                resources?: Array<{\n                  id: string;\n                  lessonPlanId: string;\n                  createdAt: Date;\n                  [key: string]: unknown;\n                }>;\n              }\n            ).resources || [];\n\n          // Calculate new lesson date based on relative position\n          const originalOffset = lesson.date.getTime() - sourceUnit.startDate.getTime();\n          const newLessonDate = new Date(newStartDate.getTime() + originalOffset);\n\n          const newLesson = await tx.eTFOLessonPlan.create({\n            data: {\n              ...lessonData,\n              userId,\n              unitPlanId: newUnit.id,\n              date: newLessonDate,\n              title: `${lesson.title} (Copy)`,\n            },\n          });\n\n          // Copy lesson expectations\n          if (lessonExp.length > 0) {\n            await tx.eTFOLessonPlanExpectation.createMany({\n              data: lessonExp.map((exp) => ({\n                lessonPlanId: newLesson.id,\n                expectationId: exp.expectationId,\n              })),\n            });\n          }\n\n          // Copy lesson resources\n          if (lessonRes.length > 0) {\n            await tx.eTFOLessonPlanResource.createMany({\n              data: lessonRes.map(\n                ({ id: _id, lessonPlanId: _lessonPlanId, createdAt: _createdAt, ...resource }) => ({\n                  ...resource,\n                  lessonPlanId: newLesson.id,\n                }),\n              ) as Prisma.ETFOLessonPlanResourceCreateManyInput[],\n            });\n          }\n        }\n      }\n\n      return newUnit;\n    });\n\n    res.status(201).json(result);\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c583b1463945389c27090c095058ecb1d2517a8c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vymal58t4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vymal58t4();
import { Router } from 'express';
import { prisma } from '../prisma';
import { validate, cuidSchema } from '../validation';
import { z } from 'zod';
const router =
/* istanbul ignore next */
(cov_vymal58t4().s[0]++, Router());
// Enhanced validation schemas with security measures
const unitPlanCreateSchema =
/* istanbul ignore next */
(cov_vymal58t4().s[1]++, z.object({
  title: z.string().min(1).max(255).regex(/^[^<>]*$/, 'Title cannot contain HTML tags'),
  titleFr: z.string().max(255).regex(/^[^<>]*$/, 'French title cannot contain HTML tags').optional(),
  longRangePlanId: cuidSchema(),
  description: z.string().max(2000).optional(),
  descriptionFr: z.string().max(2000).optional(),
  bigIdeas: z.string().max(2000).optional(),
  bigIdeasFr: z.string().max(2000).optional(),
  essentialQuestions: z.array(z.string().max(500)).max(20).optional(),
  startDate: z.string().datetime(),
  endDate: z.string().datetime(),
  estimatedHours: z.number().int().positive().max(1000).optional(),
  assessmentPlan: z.string().max(2000).optional(),
  successCriteria: z.array(z.string().max(500)).max(20).optional(),
  expectationIds: z.array(cuidSchema()).max(50).min(1, 'At least one curriculum expectation must be selected'),
  // ETFO-aligned planning fields with validation
  crossCurricularConnections: z.string().max(1000).optional(),
  learningSkills: z.array(z.string().max(100)).max(10).optional(),
  culminatingTask: z.string().max(1000).optional(),
  keyVocabulary: z.array(z.string().max(100)).max(30).optional(),
  priorKnowledge: z.string().max(1000).optional(),
  parentCommunicationPlan: z.string().max(1000).optional(),
  fieldTripsAndGuestSpeakers: z.string().max(1000).optional(),
  differentiationStrategies: z.object({
    forStruggling: z.array(z.string().max(200)).max(10).optional(),
    forAdvanced: z.array(z.string().max(200)).max(10).optional(),
    forELL: z.array(z.string().max(200)).max(10).optional(),
    forIEP: z.array(z.string().max(200)).max(10).optional()
  }).optional(),
  indigenousPerspectives: z.string().max(1000).optional(),
  environmentalEducation: z.string().max(1000).optional(),
  socialJusticeConnections: z.string().max(1000).optional(),
  technologyIntegration: z.string().max(1000).optional(),
  communityConnections: z.string().max(1000).optional()
}));
const unitPlanUpdateSchema =
/* istanbul ignore next */
(cov_vymal58t4().s[2]++, unitPlanCreateSchema.partial().omit({
  longRangePlanId: true
}));
// Get all unit plans for the authenticated user
/* istanbul ignore next */
cov_vymal58t4().s[3]++;
router.get('/', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[0]++;
  cov_vymal58t4().s[4]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[5]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[0][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[0][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[6]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[1][0]++;
      cov_vymal58t4().s[7]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[1][1]++;
    }
    const {
      longRangePlanId,
      startDate,
      endDate
    } =
    /* istanbul ignore next */
    (cov_vymal58t4().s[8]++, req.query);
    const where =
    /* istanbul ignore next */
    (cov_vymal58t4().s[9]++, {
      userId
    });
    /* istanbul ignore next */
    cov_vymal58t4().s[10]++;
    if (longRangePlanId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[2][0]++;
      cov_vymal58t4().s[11]++;
      where.longRangePlanId = String(longRangePlanId);
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[2][1]++;
    }
    cov_vymal58t4().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_vymal58t4().b[4][0]++, startDate) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[4][1]++, endDate)) {
      /* istanbul ignore next */
      cov_vymal58t4().b[3][0]++;
      cov_vymal58t4().s[13]++;
      where.startDate = {};
      /* istanbul ignore next */
      cov_vymal58t4().s[14]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_vymal58t4().b[5][0]++;
        cov_vymal58t4().s[15]++;
        where.startDate.gte = new Date(String(startDate));
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[5][1]++;
      }
      cov_vymal58t4().s[16]++;
      if (endDate) {
        /* istanbul ignore next */
        cov_vymal58t4().b[6][0]++;
        cov_vymal58t4().s[17]++;
        where.startDate.lte = new Date(String(endDate));
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[6][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[3][1]++;
    }
    const unitPlans =
    /* istanbul ignore next */
    (cov_vymal58t4().s[18]++, await prisma.unitPlan.findMany({
      where,
      orderBy: {
        startDate: 'asc'
      },
      include: {
        longRangePlan: {
          select: {
            id: true,
            title: true,
            subject: true,
            grade: true
          }
        },
        _count: {
          select: {
            lessonPlans: true,
            expectations: true,
            resources: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[19]++;
    res.json(unitPlans);
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[20]++;
    _next(err);
  }
});
// Get a single unit plan
/* istanbul ignore next */
cov_vymal58t4().s[21]++;
router.get('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[1]++;
  cov_vymal58t4().s[22]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[23]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[7][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[7][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[24]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[8][0]++;
      cov_vymal58t4().s[25]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[8][1]++;
    }
    const unitPlan =
    /* istanbul ignore next */
    (cov_vymal58t4().s[26]++, await prisma.unitPlan.findFirst({
      where: {
        id: req.params.id,
        userId
      },
      include: {
        longRangePlan: true,
        expectations: {
          include: {
            expectation: true
          },
          orderBy: {
            expectation: {
              code: 'asc'
            }
          }
        },
        lessonPlans: {
          orderBy: {
            date: 'asc'
          },
          include: {
            _count: {
              select: {
                expectations: true
              }
            },
            daybookEntry: {
              select: {
                id: true,
                overallRating: true,
                wouldReuseLesson: true
              }
            }
          }
        },
        resources: {
          orderBy: {
            createdAt: 'desc'
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[27]++;
    if (!unitPlan) {
      /* istanbul ignore next */
      cov_vymal58t4().b[9][0]++;
      cov_vymal58t4().s[28]++;
      return res.status(404).json({
        error: 'Unit plan not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[9][1]++;
    }
    // Calculate progress
    const totalLessons =
    /* istanbul ignore next */
    (cov_vymal58t4().s[29]++, unitPlan.lessonPlans.length);
    const completedLessons =
    /* istanbul ignore next */
    (cov_vymal58t4().s[30]++, unitPlan.lessonPlans.filter(lp => {
      /* istanbul ignore next */
      cov_vymal58t4().f[2]++;
      cov_vymal58t4().s[31]++;
      return lp.daybookEntry;
    }).length);
    const progress =
    /* istanbul ignore next */
    (cov_vymal58t4().s[32]++, totalLessons > 0 ?
    /* istanbul ignore next */
    (cov_vymal58t4().b[10][0]++, Math.round(completedLessons / totalLessons * 100)) :
    /* istanbul ignore next */
    (cov_vymal58t4().b[10][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[33]++;
    res.json({
      ...unitPlan,
      progress: {
        total: totalLessons,
        completed: completedLessons,
        percentage: progress
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[34]++;
    _next(err);
  }
});
// Create a new unit plan
/* istanbul ignore next */
cov_vymal58t4().s[35]++;
router.post('/', validate(unitPlanCreateSchema), async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[3]++;
  cov_vymal58t4().s[36]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[37]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[11][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[11][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[38]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[12][0]++;
      cov_vymal58t4().s[39]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[12][1]++;
    }
    const {
      expectationIds,
      essentialQuestions,
      successCriteria,
      learningSkills,
      keyVocabulary,
      differentiationStrategies,
      ...planData
    } =
    /* istanbul ignore next */
    (cov_vymal58t4().s[40]++, req.body);
    // Verify user owns the long-range plan
    const longRangePlan =
    /* istanbul ignore next */
    (cov_vymal58t4().s[41]++, await prisma.longRangePlan.findFirst({
      where: {
        id: planData.longRangePlanId,
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[42]++;
    if (!longRangePlan) {
      /* istanbul ignore next */
      cov_vymal58t4().b[13][0]++;
      cov_vymal58t4().s[43]++;
      return res.status(404).json({
        error: 'Long-range plan not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[13][1]++;
    }
    // Use transaction to ensure data integrity
    const result =
    /* istanbul ignore next */
    (cov_vymal58t4().s[44]++, await prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_vymal58t4().f[4]++;
      // Create the unit plan
      const unitPlan =
      /* istanbul ignore next */
      (cov_vymal58t4().s[45]++, await tx.unitPlan.create({
        data: {
          ...planData,
          userId,
          startDate: new Date(planData.startDate),
          endDate: new Date(planData.endDate),
          essentialQuestions:
          /* istanbul ignore next */
          (cov_vymal58t4().b[14][0]++, essentialQuestions) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[14][1]++, []),
          successCriteria:
          /* istanbul ignore next */
          (cov_vymal58t4().b[15][0]++, successCriteria) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[15][1]++, []),
          learningSkills:
          /* istanbul ignore next */
          (cov_vymal58t4().b[16][0]++, learningSkills) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[16][1]++, []),
          keyVocabulary:
          /* istanbul ignore next */
          (cov_vymal58t4().b[17][0]++, keyVocabulary) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[17][1]++, []),
          differentiationStrategies:
          /* istanbul ignore next */
          (cov_vymal58t4().b[18][0]++, differentiationStrategies) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[18][1]++, null)
        }
      }));
      // Link curriculum expectations if provided
      /* istanbul ignore next */
      cov_vymal58t4().s[46]++;
      if (
      /* istanbul ignore next */
      (cov_vymal58t4().b[20][0]++, expectationIds) &&
      /* istanbul ignore next */
      (cov_vymal58t4().b[20][1]++, expectationIds.length > 0)) {
        /* istanbul ignore next */
        cov_vymal58t4().b[19][0]++;
        // Validate expectation IDs exist
        const validExpectations =
        /* istanbul ignore next */
        (cov_vymal58t4().s[47]++, await tx.curriculumExpectation.findMany({
          where: {
            id: {
              in: expectationIds
            }
          },
          select: {
            id: true
          }
        }));
        /* istanbul ignore next */
        cov_vymal58t4().s[48]++;
        if (validExpectations.length !== expectationIds.length) {
          /* istanbul ignore next */
          cov_vymal58t4().b[21][0]++;
          cov_vymal58t4().s[49]++;
          throw new Error('One or more curriculum expectations not found');
        } else
        /* istanbul ignore next */
        {
          cov_vymal58t4().b[21][1]++;
        }
        cov_vymal58t4().s[50]++;
        await tx.unitPlanExpectation.createMany({
          data: expectationIds.map(expectationId => {
            /* istanbul ignore next */
            cov_vymal58t4().f[5]++;
            cov_vymal58t4().s[51]++;
            return {
              unitPlanId: unitPlan.id,
              expectationId
            };
          })
        });
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[19][1]++;
      }
      // Return the created unit plan with relations
      cov_vymal58t4().s[52]++;
      return await tx.unitPlan.findUnique({
        where: {
          id: unitPlan.id
        },
        include: {
          longRangePlan: {
            select: {
              id: true,
              title: true,
              subject: true,
              grade: true
            }
          },
          _count: {
            select: {
              lessonPlans: true,
              expectations: true
            }
          }
        }
      });
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[53]++;
    res.status(201).json(result);
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[54]++;
    _next(err);
  }
});
// Update a unit plan
/* istanbul ignore next */
cov_vymal58t4().s[55]++;
router.put('/:id', validate(unitPlanUpdateSchema), async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[6]++;
  cov_vymal58t4().s[56]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[57]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[22][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[22][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[58]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[23][0]++;
      cov_vymal58t4().s[59]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[23][1]++;
    }
    const {
      expectationIds,
      essentialQuestions,
      successCriteria,
      learningSkills,
      keyVocabulary,
      differentiationStrategies,
      ...updateData
    } =
    /* istanbul ignore next */
    (cov_vymal58t4().s[60]++, req.body);
    // Verify ownership
    const existing =
    /* istanbul ignore next */
    (cov_vymal58t4().s[61]++, await prisma.unitPlan.findFirst({
      where: {
        id: req.params.id,
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[62]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_vymal58t4().b[24][0]++;
      cov_vymal58t4().s[63]++;
      return res.status(404).json({
        error: 'Unit plan not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[24][1]++;
    }
    // Prepare update data
    const data =
    /* istanbul ignore next */
    (cov_vymal58t4().s[64]++, {
      ...updateData
    });
    /* istanbul ignore next */
    cov_vymal58t4().s[65]++;
    if (updateData.startDate) {
      /* istanbul ignore next */
      cov_vymal58t4().b[25][0]++;
      cov_vymal58t4().s[66]++;
      data.startDate = new Date(updateData.startDate);
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[25][1]++;
    }
    cov_vymal58t4().s[67]++;
    if (updateData.endDate) {
      /* istanbul ignore next */
      cov_vymal58t4().b[26][0]++;
      cov_vymal58t4().s[68]++;
      data.endDate = new Date(updateData.endDate);
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[26][1]++;
    }
    cov_vymal58t4().s[69]++;
    if (essentialQuestions !== undefined) {
      /* istanbul ignore next */
      cov_vymal58t4().b[27][0]++;
      cov_vymal58t4().s[70]++;
      data.essentialQuestions = essentialQuestions;
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[27][1]++;
    }
    cov_vymal58t4().s[71]++;
    if (successCriteria !== undefined) {
      /* istanbul ignore next */
      cov_vymal58t4().b[28][0]++;
      cov_vymal58t4().s[72]++;
      data.successCriteria = successCriteria;
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[28][1]++;
    }
    cov_vymal58t4().s[73]++;
    if (learningSkills !== undefined) {
      /* istanbul ignore next */
      cov_vymal58t4().b[29][0]++;
      cov_vymal58t4().s[74]++;
      data.learningSkills = learningSkills;
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[29][1]++;
    }
    cov_vymal58t4().s[75]++;
    if (keyVocabulary !== undefined) {
      /* istanbul ignore next */
      cov_vymal58t4().b[30][0]++;
      cov_vymal58t4().s[76]++;
      data.keyVocabulary = keyVocabulary;
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[30][1]++;
    }
    cov_vymal58t4().s[77]++;
    if (differentiationStrategies !== undefined) {
      /* istanbul ignore next */
      cov_vymal58t4().b[31][0]++;
      cov_vymal58t4().s[78]++;
      data.differentiationStrategies = differentiationStrategies;
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[31][1]++;
    }
    // Update the plan
    const unitPlan =
    /* istanbul ignore next */
    (cov_vymal58t4().s[79]++, await prisma.unitPlan.update({
      where: {
        id: req.params.id
      },
      data
    }));
    // Update expectations if provided
    /* istanbul ignore next */
    cov_vymal58t4().s[80]++;
    if (expectationIds !== undefined) {
      /* istanbul ignore next */
      cov_vymal58t4().b[32][0]++;
      cov_vymal58t4().s[81]++;
      // Remove existing expectations
      await prisma.unitPlanExpectation.deleteMany({
        where: {
          unitPlanId: unitPlan.id
        }
      });
      // Add new expectations
      /* istanbul ignore next */
      cov_vymal58t4().s[82]++;
      if (expectationIds.length > 0) {
        /* istanbul ignore next */
        cov_vymal58t4().b[33][0]++;
        cov_vymal58t4().s[83]++;
        await prisma.unitPlanExpectation.createMany({
          data: expectationIds.map(expectationId => {
            /* istanbul ignore next */
            cov_vymal58t4().f[7]++;
            cov_vymal58t4().s[84]++;
            return {
              unitPlanId: unitPlan.id,
              expectationId
            };
          })
        });
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[33][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[32][1]++;
    }
    // Refetch with updated relationships
    const updatedPlan =
    /* istanbul ignore next */
    (cov_vymal58t4().s[85]++, await prisma.unitPlan.findUnique({
      where: {
        id: unitPlan.id
      },
      include: {
        longRangePlan: true,
        expectations: {
          include: {
            expectation: true
          }
        },
        lessonPlans: {
          orderBy: {
            date: 'asc'
          },
          include: {
            _count: {
              select: {
                expectations: true
              }
            }
          }
        },
        resources: true
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[86]++;
    res.json(updatedPlan);
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[87]++;
    _next(err);
  }
});
// Delete a unit plan
/* istanbul ignore next */
cov_vymal58t4().s[88]++;
router.delete('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[8]++;
  cov_vymal58t4().s[89]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[90]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[34][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[34][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[91]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[35][0]++;
      cov_vymal58t4().s[92]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[35][1]++;
    }
    // Verify ownership and check for dependencies
    const unitPlan =
    /* istanbul ignore next */
    (cov_vymal58t4().s[93]++, await prisma.unitPlan.findFirst({
      where: {
        id: req.params.id,
        userId
      },
      include: {
        _count: {
          select: {
            lessonPlans: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[94]++;
    if (!unitPlan) {
      /* istanbul ignore next */
      cov_vymal58t4().b[36][0]++;
      cov_vymal58t4().s[95]++;
      return res.status(404).json({
        error: 'Unit plan not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[36][1]++;
    }
    cov_vymal58t4().s[96]++;
    if (unitPlan._count.lessonPlans > 0) {
      /* istanbul ignore next */
      cov_vymal58t4().b[37][0]++;
      cov_vymal58t4().s[97]++;
      return res.status(400).json({
        error: 'Cannot delete unit plan with existing lesson plans'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[37][1]++;
    }
    cov_vymal58t4().s[98]++;
    await prisma.unitPlan.delete({
      where: {
        id: req.params.id
      }
    });
    /* istanbul ignore next */
    cov_vymal58t4().s[99]++;
    res.status(204).end();
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[100]++;
    _next(err);
  }
});
// Add a resource to unit plan
/* istanbul ignore next */
cov_vymal58t4().s[101]++;
router.post('/:id/resources', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[9]++;
  cov_vymal58t4().s[102]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[103]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[38][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[38][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[104]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[39][0]++;
      cov_vymal58t4().s[105]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[39][1]++;
    }
    const {
      title,
      type,
      url,
      notes
    } =
    /* istanbul ignore next */
    (cov_vymal58t4().s[106]++, req.body);
    /* istanbul ignore next */
    cov_vymal58t4().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_vymal58t4().b[41][0]++, !title) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[41][1]++, !type)) {
      /* istanbul ignore next */
      cov_vymal58t4().b[40][0]++;
      cov_vymal58t4().s[108]++;
      return res.status(400).json({
        error: 'Title and type are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[40][1]++;
    }
    // Verify ownership
    const unitPlan =
    /* istanbul ignore next */
    (cov_vymal58t4().s[109]++, await prisma.unitPlan.findFirst({
      where: {
        id: req.params.id,
        userId
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[110]++;
    if (!unitPlan) {
      /* istanbul ignore next */
      cov_vymal58t4().b[42][0]++;
      cov_vymal58t4().s[111]++;
      return res.status(404).json({
        error: 'Unit plan not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[42][1]++;
    }
    const resource =
    /* istanbul ignore next */
    (cov_vymal58t4().s[112]++, await prisma.unitPlanResource.create({
      data: {
        unitPlanId: req.params.id,
        title: String(title),
        type: String(type),
        url: url ?
        /* istanbul ignore next */
        (cov_vymal58t4().b[43][0]++, String(url)) :
        /* istanbul ignore next */
        (cov_vymal58t4().b[43][1]++, null),
        notes: notes ?
        /* istanbul ignore next */
        (cov_vymal58t4().b[44][0]++, String(notes)) :
        /* istanbul ignore next */
        (cov_vymal58t4().b[44][1]++, null)
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[113]++;
    res.status(201).json(resource);
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[114]++;
    _next(err);
  }
});
// Delete a resource
/* istanbul ignore next */
cov_vymal58t4().s[115]++;
router.delete('/:id/resources/:resourceId', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[10]++;
  cov_vymal58t4().s[116]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[117]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[45][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[45][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[118]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[46][0]++;
      cov_vymal58t4().s[119]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[46][1]++;
    }
    // Verify ownership through unit plan
    const resource =
    /* istanbul ignore next */
    (cov_vymal58t4().s[120]++, await prisma.unitPlanResource.findFirst({
      where: {
        id: req.params.resourceId,
        unitPlan: {
          id: req.params.id,
          userId
        }
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[121]++;
    if (!resource) {
      /* istanbul ignore next */
      cov_vymal58t4().b[47][0]++;
      cov_vymal58t4().s[122]++;
      return res.status(404).json({
        error: 'Resource not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[47][1]++;
    }
    cov_vymal58t4().s[123]++;
    await prisma.unitPlanResource.delete({
      where: {
        id: req.params.resourceId
      }
    });
    /* istanbul ignore next */
    cov_vymal58t4().s[124]++;
    res.status(204).end();
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[125]++;
    _next(err);
  }
});
// Duplicate a unit plan
/* istanbul ignore next */
cov_vymal58t4().s[126]++;
router.post('/duplicate', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_vymal58t4().f[11]++;
  cov_vymal58t4().s[127]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_vymal58t4().s[128]++,
    /* istanbul ignore next */
    (cov_vymal58t4().b[48][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[48][1]++, 0));
    /* istanbul ignore next */
    cov_vymal58t4().s[129]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_vymal58t4().b[49][0]++;
      cov_vymal58t4().s[130]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[49][1]++;
    }
    const {
      sourceId,
      title,
      notes: _notes,
      includeSubItems
    } =
    /* istanbul ignore next */
    (cov_vymal58t4().s[131]++, req.body);
    /* istanbul ignore next */
    cov_vymal58t4().s[132]++;
    if (
    /* istanbul ignore next */
    (cov_vymal58t4().b[51][0]++, !sourceId) ||
    /* istanbul ignore next */
    (cov_vymal58t4().b[51][1]++, !title)) {
      /* istanbul ignore next */
      cov_vymal58t4().b[50][0]++;
      cov_vymal58t4().s[133]++;
      return res.status(400).json({
        error: 'Source ID and title are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[50][1]++;
    }
    // Fetch the source unit plan with all relations
    const sourceUnit =
    /* istanbul ignore next */
    (cov_vymal58t4().s[134]++, await prisma.unitPlan.findFirst({
      where: {
        id: sourceId,
        userId
      },
      include: {
        expectations: true,
        resources: true,
        lessonPlans: includeSubItems ?
        /* istanbul ignore next */
        (cov_vymal58t4().b[52][0]++, {
          include: {
            expectations: true,
            resources: true
          }
        }) :
        /* istanbul ignore next */
        (cov_vymal58t4().b[52][1]++, false)
      }
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[135]++;
    if (!sourceUnit) {
      /* istanbul ignore next */
      cov_vymal58t4().b[53][0]++;
      cov_vymal58t4().s[136]++;
      return res.status(404).json({
        error: 'Source unit plan not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_vymal58t4().b[53][1]++;
    }
    // Create the duplicate in a transaction
    const result =
    /* istanbul ignore next */
    (cov_vymal58t4().s[137]++, await prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_vymal58t4().f[12]++;
      // Calculate new dates (shift to current period)
      const originalDuration =
      /* istanbul ignore next */
      (cov_vymal58t4().s[138]++, sourceUnit.endDate.getTime() - sourceUnit.startDate.getTime());
      const newStartDate =
      /* istanbul ignore next */
      (cov_vymal58t4().s[139]++, new Date());
      const newEndDate =
      /* istanbul ignore next */
      (cov_vymal58t4().s[140]++, new Date(newStartDate.getTime() + originalDuration));
      // Create the duplicate unit plan
      const {
        id: _,
        userId: __,
        createdAt: _createdAt,
        updatedAt: _updatedAt,
        lessonPlans,
        expectations,
        resources,
        ...unitData
      } =
      /* istanbul ignore next */
      (cov_vymal58t4().s[141]++, sourceUnit);
      const newUnit =
      /* istanbul ignore next */
      (cov_vymal58t4().s[142]++, await tx.unitPlan.create({
        data: {
          ...unitData,
          userId,
          title,
          startDate: newStartDate,
          endDate: newEndDate
        }
      }));
      // Copy expectations
      /* istanbul ignore next */
      cov_vymal58t4().s[143]++;
      if (expectations.length > 0) {
        /* istanbul ignore next */
        cov_vymal58t4().b[54][0]++;
        cov_vymal58t4().s[144]++;
        await tx.unitPlanExpectation.createMany({
          data: expectations.map(exp => {
            /* istanbul ignore next */
            cov_vymal58t4().f[13]++;
            cov_vymal58t4().s[145]++;
            return {
              unitPlanId: newUnit.id,
              expectationId: exp.expectationId
            };
          })
        });
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[54][1]++;
      }
      // Copy resources
      cov_vymal58t4().s[146]++;
      if (resources.length > 0) {
        /* istanbul ignore next */
        cov_vymal58t4().b[55][0]++;
        cov_vymal58t4().s[147]++;
        await tx.unitPlanResource.createMany({
          data: resources.map(({
            id: _id,
            unitPlanId: _unitPlanId,
            createdAt: _createdAt,
            ...resource
          }) => {
            /* istanbul ignore next */
            cov_vymal58t4().f[14]++;
            cov_vymal58t4().s[148]++;
            return {
              ...resource,
              unitPlanId: newUnit.id
            };
          })
        });
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[55][1]++;
      }
      // Copy lesson plans if requested
      cov_vymal58t4().s[149]++;
      if (
      /* istanbul ignore next */
      (cov_vymal58t4().b[57][0]++, includeSubItems) &&
      /* istanbul ignore next */
      (cov_vymal58t4().b[57][1]++, lessonPlans) &&
      /* istanbul ignore next */
      (cov_vymal58t4().b[57][2]++, lessonPlans.length > 0)) {
        /* istanbul ignore next */
        cov_vymal58t4().b[56][0]++;
        cov_vymal58t4().s[150]++;
        for (const lesson of lessonPlans) {
          const {
            id: _,
            unitPlanId: __,
            userId: ___,
            createdAt: _createdAt,
            updatedAt: _updatedAt,
            ...lessonData
          } =
          /* istanbul ignore next */
          (cov_vymal58t4().s[151]++, lesson);
          const lessonExp =
          /* istanbul ignore next */
          (cov_vymal58t4().s[152]++,
          /* istanbul ignore next */
          (cov_vymal58t4().b[58][0]++, lesson.expectations) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[58][1]++, []));
          const lessonRes =
          /* istanbul ignore next */
          (cov_vymal58t4().s[153]++,
          /* istanbul ignore next */
          (cov_vymal58t4().b[59][0]++, lesson.resources) ||
          /* istanbul ignore next */
          (cov_vymal58t4().b[59][1]++, []));
          // Calculate new lesson date based on relative position
          const originalOffset =
          /* istanbul ignore next */
          (cov_vymal58t4().s[154]++, lesson.date.getTime() - sourceUnit.startDate.getTime());
          const newLessonDate =
          /* istanbul ignore next */
          (cov_vymal58t4().s[155]++, new Date(newStartDate.getTime() + originalOffset));
          const newLesson =
          /* istanbul ignore next */
          (cov_vymal58t4().s[156]++, await tx.eTFOLessonPlan.create({
            data: {
              ...lessonData,
              userId,
              unitPlanId: newUnit.id,
              date: newLessonDate,
              title: `${lesson.title} (Copy)`
            }
          }));
          // Copy lesson expectations
          /* istanbul ignore next */
          cov_vymal58t4().s[157]++;
          if (lessonExp.length > 0) {
            /* istanbul ignore next */
            cov_vymal58t4().b[60][0]++;
            cov_vymal58t4().s[158]++;
            await tx.eTFOLessonPlanExpectation.createMany({
              data: lessonExp.map(exp => {
                /* istanbul ignore next */
                cov_vymal58t4().f[15]++;
                cov_vymal58t4().s[159]++;
                return {
                  lessonPlanId: newLesson.id,
                  expectationId: exp.expectationId
                };
              })
            });
          } else
          /* istanbul ignore next */
          {
            cov_vymal58t4().b[60][1]++;
          }
          // Copy lesson resources
          cov_vymal58t4().s[160]++;
          if (lessonRes.length > 0) {
            /* istanbul ignore next */
            cov_vymal58t4().b[61][0]++;
            cov_vymal58t4().s[161]++;
            await tx.eTFOLessonPlanResource.createMany({
              data: lessonRes.map(({
                id: _id,
                lessonPlanId: _lessonPlanId,
                createdAt: _createdAt,
                ...resource
              }) => {
                /* istanbul ignore next */
                cov_vymal58t4().f[16]++;
                cov_vymal58t4().s[162]++;
                return {
                  ...resource,
                  lessonPlanId: newLesson.id
                };
              })
            });
          } else
          /* istanbul ignore next */
          {
            cov_vymal58t4().b[61][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_vymal58t4().b[56][1]++;
      }
      cov_vymal58t4().s[163]++;
      return newUnit;
    }));
    /* istanbul ignore next */
    cov_vymal58t4().s[164]++;
    res.status(201).json(result);
  } catch (err) {
    /* istanbul ignore next */
    cov_vymal58t4().s[165]++;
    _next(err);
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfdnltYWw1OHQ0IiwiYWN0dWFsQ292ZXJhZ2UiLCJSb3V0ZXIiLCJwcmlzbWEiLCJ2YWxpZGF0ZSIsImN1aWRTY2hlbWEiLCJ6Iiwicm91dGVyIiwicyIsInVuaXRQbGFuQ3JlYXRlU2NoZW1hIiwib2JqZWN0IiwidGl0bGUiLCJzdHJpbmciLCJtaW4iLCJtYXgiLCJyZWdleCIsInRpdGxlRnIiLCJvcHRpb25hbCIsImxvbmdSYW5nZVBsYW5JZCIsImRlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25GciIsImJpZ0lkZWFzIiwiYmlnSWRlYXNGciIsImVzc2VudGlhbFF1ZXN0aW9ucyIsImFycmF5Iiwic3RhcnREYXRlIiwiZGF0ZXRpbWUiLCJlbmREYXRlIiwiZXN0aW1hdGVkSG91cnMiLCJudW1iZXIiLCJpbnQiLCJwb3NpdGl2ZSIsImFzc2Vzc21lbnRQbGFuIiwic3VjY2Vzc0NyaXRlcmlhIiwiZXhwZWN0YXRpb25JZHMiLCJjcm9zc0N1cnJpY3VsYXJDb25uZWN0aW9ucyIsImxlYXJuaW5nU2tpbGxzIiwiY3VsbWluYXRpbmdUYXNrIiwia2V5Vm9jYWJ1bGFyeSIsInByaW9yS25vd2xlZGdlIiwicGFyZW50Q29tbXVuaWNhdGlvblBsYW4iLCJmaWVsZFRyaXBzQW5kR3Vlc3RTcGVha2VycyIsImRpZmZlcmVudGlhdGlvblN0cmF0ZWdpZXMiLCJmb3JTdHJ1Z2dsaW5nIiwiZm9yQWR2YW5jZWQiLCJmb3JFTEwiLCJmb3JJRVAiLCJpbmRpZ2Vub3VzUGVyc3BlY3RpdmVzIiwiZW52aXJvbm1lbnRhbEVkdWNhdGlvbiIsInNvY2lhbEp1c3RpY2VDb25uZWN0aW9ucyIsInRlY2hub2xvZ3lJbnRlZ3JhdGlvbiIsImNvbW11bml0eUNvbm5lY3Rpb25zIiwidW5pdFBsYW5VcGRhdGVTY2hlbWEiLCJwYXJ0aWFsIiwib21pdCIsImdldCIsInJlcSIsInJlcyIsIl9uZXh0IiwiZiIsInVzZXJJZCIsImIiLCJ1c2VyIiwiaWQiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJxdWVyeSIsIndoZXJlIiwiU3RyaW5nIiwiZ3RlIiwiRGF0ZSIsImx0ZSIsInVuaXRQbGFucyIsInVuaXRQbGFuIiwiZmluZE1hbnkiLCJvcmRlckJ5IiwiaW5jbHVkZSIsImxvbmdSYW5nZVBsYW4iLCJzZWxlY3QiLCJzdWJqZWN0IiwiZ3JhZGUiLCJfY291bnQiLCJsZXNzb25QbGFucyIsImV4cGVjdGF0aW9ucyIsInJlc291cmNlcyIsImVyciIsImZpbmRGaXJzdCIsInBhcmFtcyIsImV4cGVjdGF0aW9uIiwiY29kZSIsImRhdGUiLCJkYXlib29rRW50cnkiLCJvdmVyYWxsUmF0aW5nIiwid291bGRSZXVzZUxlc3NvbiIsImNyZWF0ZWRBdCIsInRvdGFsTGVzc29ucyIsImxlbmd0aCIsImNvbXBsZXRlZExlc3NvbnMiLCJmaWx0ZXIiLCJscCIsInByb2dyZXNzIiwiTWF0aCIsInJvdW5kIiwidG90YWwiLCJjb21wbGV0ZWQiLCJwZXJjZW50YWdlIiwicG9zdCIsInBsYW5EYXRhIiwiYm9keSIsInJlc3VsdCIsIiR0cmFuc2FjdGlvbiIsInR4IiwiY3JlYXRlIiwiZGF0YSIsInZhbGlkRXhwZWN0YXRpb25zIiwiY3VycmljdWx1bUV4cGVjdGF0aW9uIiwiaW4iLCJFcnJvciIsInVuaXRQbGFuRXhwZWN0YXRpb24iLCJjcmVhdGVNYW55IiwibWFwIiwiZXhwZWN0YXRpb25JZCIsInVuaXRQbGFuSWQiLCJmaW5kVW5pcXVlIiwicHV0IiwidXBkYXRlRGF0YSIsImV4aXN0aW5nIiwidW5kZWZpbmVkIiwidXBkYXRlIiwiZGVsZXRlTWFueSIsInVwZGF0ZWRQbGFuIiwiZGVsZXRlIiwiZW5kIiwidHlwZSIsInVybCIsIm5vdGVzIiwicmVzb3VyY2UiLCJ1bml0UGxhblJlc291cmNlIiwicmVzb3VyY2VJZCIsInNvdXJjZUlkIiwiX25vdGVzIiwiaW5jbHVkZVN1Ykl0ZW1zIiwic291cmNlVW5pdCIsIm9yaWdpbmFsRHVyYXRpb24iLCJnZXRUaW1lIiwibmV3U3RhcnREYXRlIiwibmV3RW5kRGF0ZSIsIl8iLCJfXyIsIl9jcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJfdXBkYXRlZEF0IiwidW5pdERhdGEiLCJuZXdVbml0IiwiZXhwIiwiX2lkIiwiX3VuaXRQbGFuSWQiLCJsZXNzb24iLCJfX18iLCJsZXNzb25EYXRhIiwibGVzc29uRXhwIiwibGVzc29uUmVzIiwib3JpZ2luYWxPZmZzZXQiLCJuZXdMZXNzb25EYXRlIiwibmV3TGVzc29uIiwiZVRGT0xlc3NvblBsYW4iLCJlVEZPTGVzc29uUGxhbkV4cGVjdGF0aW9uIiwibGVzc29uUGxhbklkIiwiZVRGT0xlc3NvblBsYW5SZXNvdXJjZSIsIl9sZXNzb25QbGFuSWQiXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL3JvdXRlcy91bml0LXBsYW5zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciwgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUHJpc21hIH0gZnJvbSAnLi4vcHJpc21hJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4uL3ByaXNtYSc7XG5pbXBvcnQgeyB2YWxpZGF0ZSwgY3VpZFNjaGVtYSB9IGZyb20gJy4uL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG4vLyBFbmhhbmNlZCB2YWxpZGF0aW9uIHNjaGVtYXMgd2l0aCBzZWN1cml0eSBtZWFzdXJlc1xuY29uc3QgdW5pdFBsYW5DcmVhdGVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHRpdGxlOiB6XG4gICAgLnN0cmluZygpXG4gICAgLm1pbigxKVxuICAgIC5tYXgoMjU1KVxuICAgIC5yZWdleCgvXltePD5dKiQvLCAnVGl0bGUgY2Fubm90IGNvbnRhaW4gSFRNTCB0YWdzJyksXG4gIHRpdGxlRnI6IHpcbiAgICAuc3RyaW5nKClcbiAgICAubWF4KDI1NSlcbiAgICAucmVnZXgoL15bXjw+XSokLywgJ0ZyZW5jaCB0aXRsZSBjYW5ub3QgY29udGFpbiBIVE1MIHRhZ3MnKVxuICAgIC5vcHRpb25hbCgpLFxuICBsb25nUmFuZ2VQbGFuSWQ6IGN1aWRTY2hlbWEoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkubWF4KDIwMDApLm9wdGlvbmFsKCksXG4gIGRlc2NyaXB0aW9uRnI6IHouc3RyaW5nKCkubWF4KDIwMDApLm9wdGlvbmFsKCksXG4gIGJpZ0lkZWFzOiB6LnN0cmluZygpLm1heCgyMDAwKS5vcHRpb25hbCgpLFxuICBiaWdJZGVhc0ZyOiB6LnN0cmluZygpLm1heCgyMDAwKS5vcHRpb25hbCgpLFxuICBlc3NlbnRpYWxRdWVzdGlvbnM6IHouYXJyYXkoei5zdHJpbmcoKS5tYXgoNTAwKSkubWF4KDIwKS5vcHRpb25hbCgpLFxuICBzdGFydERhdGU6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKSxcbiAgZW5kRGF0ZTogei5zdHJpbmcoKS5kYXRldGltZSgpLFxuICBlc3RpbWF0ZWRIb3Vyczogei5udW1iZXIoKS5pbnQoKS5wb3NpdGl2ZSgpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxuICBhc3Nlc3NtZW50UGxhbjogei5zdHJpbmcoKS5tYXgoMjAwMCkub3B0aW9uYWwoKSxcbiAgc3VjY2Vzc0NyaXRlcmlhOiB6LmFycmF5KHouc3RyaW5nKCkubWF4KDUwMCkpLm1heCgyMCkub3B0aW9uYWwoKSxcbiAgZXhwZWN0YXRpb25JZHM6IHpcbiAgICAuYXJyYXkoY3VpZFNjaGVtYSgpKVxuICAgIC5tYXgoNTApXG4gICAgLm1pbigxLCAnQXQgbGVhc3Qgb25lIGN1cnJpY3VsdW0gZXhwZWN0YXRpb24gbXVzdCBiZSBzZWxlY3RlZCcpLFxuXG4gIC8vIEVURk8tYWxpZ25lZCBwbGFubmluZyBmaWVsZHMgd2l0aCB2YWxpZGF0aW9uXG4gIGNyb3NzQ3VycmljdWxhckNvbm5lY3Rpb25zOiB6LnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxuICBsZWFybmluZ1NraWxsczogei5hcnJheSh6LnN0cmluZygpLm1heCgxMDApKS5tYXgoMTApLm9wdGlvbmFsKCksXG4gIGN1bG1pbmF0aW5nVGFzazogei5zdHJpbmcoKS5tYXgoMTAwMCkub3B0aW9uYWwoKSxcbiAga2V5Vm9jYWJ1bGFyeTogei5hcnJheSh6LnN0cmluZygpLm1heCgxMDApKS5tYXgoMzApLm9wdGlvbmFsKCksXG4gIHByaW9yS25vd2xlZGdlOiB6LnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxuICBwYXJlbnRDb21tdW5pY2F0aW9uUGxhbjogei5zdHJpbmcoKS5tYXgoMTAwMCkub3B0aW9uYWwoKSxcbiAgZmllbGRUcmlwc0FuZEd1ZXN0U3BlYWtlcnM6IHouc3RyaW5nKCkubWF4KDEwMDApLm9wdGlvbmFsKCksXG4gIGRpZmZlcmVudGlhdGlvblN0cmF0ZWdpZXM6IHpcbiAgICAub2JqZWN0KHtcbiAgICAgIGZvclN0cnVnZ2xpbmc6IHouYXJyYXkoei5zdHJpbmcoKS5tYXgoMjAwKSkubWF4KDEwKS5vcHRpb25hbCgpLFxuICAgICAgZm9yQWR2YW5jZWQ6IHouYXJyYXkoei5zdHJpbmcoKS5tYXgoMjAwKSkubWF4KDEwKS5vcHRpb25hbCgpLFxuICAgICAgZm9yRUxMOiB6LmFycmF5KHouc3RyaW5nKCkubWF4KDIwMCkpLm1heCgxMCkub3B0aW9uYWwoKSxcbiAgICAgIGZvcklFUDogei5hcnJheSh6LnN0cmluZygpLm1heCgyMDApKS5tYXgoMTApLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbiAgaW5kaWdlbm91c1BlcnNwZWN0aXZlczogei5zdHJpbmcoKS5tYXgoMTAwMCkub3B0aW9uYWwoKSxcbiAgZW52aXJvbm1lbnRhbEVkdWNhdGlvbjogei5zdHJpbmcoKS5tYXgoMTAwMCkub3B0aW9uYWwoKSxcbiAgc29jaWFsSnVzdGljZUNvbm5lY3Rpb25zOiB6LnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxuICB0ZWNobm9sb2d5SW50ZWdyYXRpb246IHouc3RyaW5nKCkubWF4KDEwMDApLm9wdGlvbmFsKCksXG4gIGNvbW11bml0eUNvbm5lY3Rpb25zOiB6LnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IHVuaXRQbGFuVXBkYXRlU2NoZW1hID0gdW5pdFBsYW5DcmVhdGVTY2hlbWEucGFydGlhbCgpLm9taXQoeyBsb25nUmFuZ2VQbGFuSWQ6IHRydWUgfSk7XG5cbi8vIEdldCBhbGwgdW5pdCBwbGFucyBmb3IgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxucm91dGVyLmdldCgnLycsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQgfHwgMDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbG9uZ1JhbmdlUGxhbklkLCBzdGFydERhdGUsIGVuZERhdGUgfSA9IHJlcS5xdWVyeTtcblxuICAgIGNvbnN0IHdoZXJlOiBQcmlzbWEuVW5pdFBsYW5XaGVyZUlucHV0ID0geyB1c2VySWQgfTtcbiAgICBpZiAobG9uZ1JhbmdlUGxhbklkKSB3aGVyZS5sb25nUmFuZ2VQbGFuSWQgPSBTdHJpbmcobG9uZ1JhbmdlUGxhbklkKTtcbiAgICBpZiAoc3RhcnREYXRlIHx8IGVuZERhdGUpIHtcbiAgICAgIHdoZXJlLnN0YXJ0RGF0ZSA9IHt9O1xuICAgICAgaWYgKHN0YXJ0RGF0ZSkgd2hlcmUuc3RhcnREYXRlLmd0ZSA9IG5ldyBEYXRlKFN0cmluZyhzdGFydERhdGUpKTtcbiAgICAgIGlmIChlbmREYXRlKSB3aGVyZS5zdGFydERhdGUubHRlID0gbmV3IERhdGUoU3RyaW5nKGVuZERhdGUpKTtcbiAgICB9XG5cbiAgICBjb25zdCB1bml0UGxhbnMgPSBhd2FpdCBwcmlzbWEudW5pdFBsYW4uZmluZE1hbnkoe1xuICAgICAgd2hlcmUsXG4gICAgICBvcmRlckJ5OiB7IHN0YXJ0RGF0ZTogJ2FzYycgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgbG9uZ1JhbmdlUGxhbjoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICB0aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgIHN1YmplY3Q6IHRydWUsXG4gICAgICAgICAgICBncmFkZTogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIGxlc3NvblBsYW5zOiB0cnVlLFxuICAgICAgICAgICAgZXhwZWN0YXRpb25zOiB0cnVlLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmVzLmpzb24odW5pdFBsYW5zKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIEdldCBhIHNpbmdsZSB1bml0IHBsYW5cbnJvdXRlci5nZXQoJy86aWQnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB1bml0UGxhbiA9IGF3YWl0IHByaXNtYS51bml0UGxhbi5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHJlcS5wYXJhbXMuaWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgIH0sXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIGxvbmdSYW5nZVBsYW46IHRydWUsXG4gICAgICAgIGV4cGVjdGF0aW9uczoge1xuICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgIGV4cGVjdGF0aW9uOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgZXhwZWN0YXRpb246IHsgY29kZTogJ2FzYycgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBsZXNzb25QbGFuczoge1xuICAgICAgICAgIG9yZGVyQnk6IHsgZGF0ZTogJ2FzYycgfSxcbiAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICAgICAgc2VsZWN0OiB7IGV4cGVjdGF0aW9uczogdHJ1ZSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRheWJvb2tFbnRyeToge1xuICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyYWxsUmF0aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdvdWxkUmV1c2VMZXNzb246IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc291cmNlczoge1xuICAgICAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXVuaXRQbGFuKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1VuaXQgcGxhbiBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSBwcm9ncmVzc1xuICAgIGNvbnN0IHRvdGFsTGVzc29ucyA9IHVuaXRQbGFuLmxlc3NvblBsYW5zLmxlbmd0aDtcbiAgICBjb25zdCBjb21wbGV0ZWRMZXNzb25zID0gdW5pdFBsYW4ubGVzc29uUGxhbnMuZmlsdGVyKChscCkgPT4gbHAuZGF5Ym9va0VudHJ5KS5sZW5ndGg7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB0b3RhbExlc3NvbnMgPiAwID8gTWF0aC5yb3VuZCgoY29tcGxldGVkTGVzc29ucyAvIHRvdGFsTGVzc29ucykgKiAxMDApIDogMDtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIC4uLnVuaXRQbGFuLFxuICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgdG90YWw6IHRvdGFsTGVzc29ucyxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWRMZXNzb25zLFxuICAgICAgICBwZXJjZW50YWdlOiBwcm9ncmVzcyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBDcmVhdGUgYSBuZXcgdW5pdCBwbGFuXG5yb3V0ZXIucG9zdCgnLycsIHZhbGlkYXRlKHVuaXRQbGFuQ3JlYXRlU2NoZW1hKSwgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZCB8fCAwO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgZXhwZWN0YXRpb25JZHMsXG4gICAgICBlc3NlbnRpYWxRdWVzdGlvbnMsXG4gICAgICBzdWNjZXNzQ3JpdGVyaWEsXG4gICAgICBsZWFybmluZ1NraWxscyxcbiAgICAgIGtleVZvY2FidWxhcnksXG4gICAgICBkaWZmZXJlbnRpYXRpb25TdHJhdGVnaWVzLFxuICAgICAgLi4ucGxhbkRhdGFcbiAgICB9ID0gcmVxLmJvZHk7XG5cbiAgICAvLyBWZXJpZnkgdXNlciBvd25zIHRoZSBsb25nLXJhbmdlIHBsYW5cbiAgICBjb25zdCBsb25nUmFuZ2VQbGFuID0gYXdhaXQgcHJpc21hLmxvbmdSYW5nZVBsYW4uZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlkOiBwbGFuRGF0YS5sb25nUmFuZ2VQbGFuSWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWxvbmdSYW5nZVBsYW4pIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnTG9uZy1yYW5nZSBwbGFuIG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRyYW5zYWN0aW9uIHRvIGVuc3VyZSBkYXRhIGludGVncml0eVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgICAvLyBDcmVhdGUgdGhlIHVuaXQgcGxhblxuICAgICAgY29uc3QgdW5pdFBsYW4gPSBhd2FpdCB0eC51bml0UGxhbi5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgLi4ucGxhbkRhdGEsXG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUocGxhbkRhdGEuc3RhcnREYXRlKSxcbiAgICAgICAgICBlbmREYXRlOiBuZXcgRGF0ZShwbGFuRGF0YS5lbmREYXRlKSxcbiAgICAgICAgICBlc3NlbnRpYWxRdWVzdGlvbnM6IGVzc2VudGlhbFF1ZXN0aW9ucyB8fCBbXSxcbiAgICAgICAgICBzdWNjZXNzQ3JpdGVyaWE6IHN1Y2Nlc3NDcml0ZXJpYSB8fCBbXSxcbiAgICAgICAgICBsZWFybmluZ1NraWxsczogbGVhcm5pbmdTa2lsbHMgfHwgW10sXG4gICAgICAgICAga2V5Vm9jYWJ1bGFyeToga2V5Vm9jYWJ1bGFyeSB8fCBbXSxcbiAgICAgICAgICBkaWZmZXJlbnRpYXRpb25TdHJhdGVnaWVzOiBkaWZmZXJlbnRpYXRpb25TdHJhdGVnaWVzIHx8IG51bGwsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gTGluayBjdXJyaWN1bHVtIGV4cGVjdGF0aW9ucyBpZiBwcm92aWRlZFxuICAgICAgaWYgKGV4cGVjdGF0aW9uSWRzICYmIGV4cGVjdGF0aW9uSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gVmFsaWRhdGUgZXhwZWN0YXRpb24gSURzIGV4aXN0XG4gICAgICAgIGNvbnN0IHZhbGlkRXhwZWN0YXRpb25zID0gYXdhaXQgdHguY3VycmljdWx1bUV4cGVjdGF0aW9uLmZpbmRNYW55KHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogeyBpbjogZXhwZWN0YXRpb25JZHMgfSB9LFxuICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodmFsaWRFeHBlY3RhdGlvbnMubGVuZ3RoICE9PSBleHBlY3RhdGlvbklkcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvciBtb3JlIGN1cnJpY3VsdW0gZXhwZWN0YXRpb25zIG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdHgudW5pdFBsYW5FeHBlY3RhdGlvbi5jcmVhdGVNYW55KHtcbiAgICAgICAgICBkYXRhOiBleHBlY3RhdGlvbklkcy5tYXAoKGV4cGVjdGF0aW9uSWQ6IHN0cmluZykgPT4gKHtcbiAgICAgICAgICAgIHVuaXRQbGFuSWQ6IHVuaXRQbGFuLmlkLFxuICAgICAgICAgICAgZXhwZWN0YXRpb25JZCxcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gdGhlIGNyZWF0ZWQgdW5pdCBwbGFuIHdpdGggcmVsYXRpb25zXG4gICAgICByZXR1cm4gYXdhaXQgdHgudW5pdFBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiB1bml0UGxhbi5pZCB9LFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgbG9uZ1JhbmdlUGxhbjoge1xuICAgICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgICB0aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgc3ViamVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgZ3JhZGU6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgbGVzc29uUGxhbnM6IHRydWUsXG4gICAgICAgICAgICAgIGV4cGVjdGF0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24ocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIFVwZGF0ZSBhIHVuaXQgcGxhblxucm91dGVyLnB1dCgnLzppZCcsIHZhbGlkYXRlKHVuaXRQbGFuVXBkYXRlU2NoZW1hKSwgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZCB8fCAwO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgZXhwZWN0YXRpb25JZHMsXG4gICAgICBlc3NlbnRpYWxRdWVzdGlvbnMsXG4gICAgICBzdWNjZXNzQ3JpdGVyaWEsXG4gICAgICBsZWFybmluZ1NraWxscyxcbiAgICAgIGtleVZvY2FidWxhcnksXG4gICAgICBkaWZmZXJlbnRpYXRpb25TdHJhdGVnaWVzLFxuICAgICAgLi4udXBkYXRlRGF0YVxuICAgIH0gPSByZXEuYm9keTtcblxuICAgIC8vIFZlcmlmeSBvd25lcnNoaXBcbiAgICBjb25zdCBleGlzdGluZyA9IGF3YWl0IHByaXNtYS51bml0UGxhbi5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHJlcS5wYXJhbXMuaWQsIHVzZXJJZCB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCFleGlzdGluZykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdVbml0IHBsYW4gbm90IGZvdW5kJyB9KTtcbiAgICB9XG5cbiAgICAvLyBQcmVwYXJlIHVwZGF0ZSBkYXRhXG4gICAgY29uc3QgZGF0YTogUHJpc21hLlVuaXRQbGFuVXBkYXRlSW5wdXQgPSB7IC4uLnVwZGF0ZURhdGEgfTtcbiAgICBpZiAodXBkYXRlRGF0YS5zdGFydERhdGUpIGRhdGEuc3RhcnREYXRlID0gbmV3IERhdGUodXBkYXRlRGF0YS5zdGFydERhdGUpO1xuICAgIGlmICh1cGRhdGVEYXRhLmVuZERhdGUpIGRhdGEuZW5kRGF0ZSA9IG5ldyBEYXRlKHVwZGF0ZURhdGEuZW5kRGF0ZSk7XG4gICAgaWYgKGVzc2VudGlhbFF1ZXN0aW9ucyAhPT0gdW5kZWZpbmVkKSBkYXRhLmVzc2VudGlhbFF1ZXN0aW9ucyA9IGVzc2VudGlhbFF1ZXN0aW9ucztcbiAgICBpZiAoc3VjY2Vzc0NyaXRlcmlhICE9PSB1bmRlZmluZWQpIGRhdGEuc3VjY2Vzc0NyaXRlcmlhID0gc3VjY2Vzc0NyaXRlcmlhO1xuICAgIGlmIChsZWFybmluZ1NraWxscyAhPT0gdW5kZWZpbmVkKSBkYXRhLmxlYXJuaW5nU2tpbGxzID0gbGVhcm5pbmdTa2lsbHM7XG4gICAgaWYgKGtleVZvY2FidWxhcnkgIT09IHVuZGVmaW5lZCkgZGF0YS5rZXlWb2NhYnVsYXJ5ID0ga2V5Vm9jYWJ1bGFyeTtcbiAgICBpZiAoZGlmZmVyZW50aWF0aW9uU3RyYXRlZ2llcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgZGF0YS5kaWZmZXJlbnRpYXRpb25TdHJhdGVnaWVzID0gZGlmZmVyZW50aWF0aW9uU3RyYXRlZ2llcztcblxuICAgIC8vIFVwZGF0ZSB0aGUgcGxhblxuICAgIGNvbnN0IHVuaXRQbGFuID0gYXdhaXQgcHJpc21hLnVuaXRQbGFuLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogcmVxLnBhcmFtcy5pZCB9LFxuICAgICAgZGF0YSxcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBleHBlY3RhdGlvbnMgaWYgcHJvdmlkZWRcbiAgICBpZiAoZXhwZWN0YXRpb25JZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGV4cGVjdGF0aW9uc1xuICAgICAgYXdhaXQgcHJpc21hLnVuaXRQbGFuRXhwZWN0YXRpb24uZGVsZXRlTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IHVuaXRQbGFuSWQ6IHVuaXRQbGFuLmlkIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQWRkIG5ldyBleHBlY3RhdGlvbnNcbiAgICAgIGlmIChleHBlY3RhdGlvbklkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGF3YWl0IHByaXNtYS51bml0UGxhbkV4cGVjdGF0aW9uLmNyZWF0ZU1hbnkoe1xuICAgICAgICAgIGRhdGE6IGV4cGVjdGF0aW9uSWRzLm1hcCgoZXhwZWN0YXRpb25JZDogc3RyaW5nKSA9PiAoe1xuICAgICAgICAgICAgdW5pdFBsYW5JZDogdW5pdFBsYW4uaWQsXG4gICAgICAgICAgICBleHBlY3RhdGlvbklkLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVmZXRjaCB3aXRoIHVwZGF0ZWQgcmVsYXRpb25zaGlwc1xuICAgIGNvbnN0IHVwZGF0ZWRQbGFuID0gYXdhaXQgcHJpc21hLnVuaXRQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHVuaXRQbGFuLmlkIH0sXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIGxvbmdSYW5nZVBsYW46IHRydWUsXG4gICAgICAgIGV4cGVjdGF0aW9uczoge1xuICAgICAgICAgIGluY2x1ZGU6IHsgZXhwZWN0YXRpb246IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgICAgbGVzc29uUGxhbnM6IHtcbiAgICAgICAgICBvcmRlckJ5OiB7IGRhdGU6ICdhc2MnIH0sXG4gICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgX2NvdW50OiB7IHNlbGVjdDogeyBleHBlY3RhdGlvbnM6IHRydWUgfSB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc291cmNlczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXMuanNvbih1cGRhdGVkUGxhbik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBEZWxldGUgYSB1bml0IHBsYW5cbnJvdXRlci5kZWxldGUoJy86aWQnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgb3duZXJzaGlwIGFuZCBjaGVjayBmb3IgZGVwZW5kZW5jaWVzXG4gICAgY29uc3QgdW5pdFBsYW4gPSBhd2FpdCBwcmlzbWEudW5pdFBsYW4uZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7IGlkOiByZXEucGFyYW1zLmlkLCB1c2VySWQgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgX2NvdW50OiB7IHNlbGVjdDogeyBsZXNzb25QbGFuczogdHJ1ZSB9IH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF1bml0UGxhbikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdVbml0IHBsYW4gbm90IGZvdW5kJyB9KTtcbiAgICB9XG5cbiAgICBpZiAodW5pdFBsYW4uX2NvdW50Lmxlc3NvblBsYW5zID4gMCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdDYW5ub3QgZGVsZXRlIHVuaXQgcGxhbiB3aXRoIGV4aXN0aW5nIGxlc3NvbiBwbGFucycsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCBwcmlzbWEudW5pdFBsYW4uZGVsZXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiByZXEucGFyYW1zLmlkIH0sXG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwNCkuZW5kKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBBZGQgYSByZXNvdXJjZSB0byB1bml0IHBsYW5cbnJvdXRlci5wb3N0KCcvOmlkL3Jlc291cmNlcycsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQgfHwgMDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgdGl0bGUsIHR5cGUsIHVybCwgbm90ZXMgfSA9IHJlcS5ib2R5O1xuXG4gICAgaWYgKCF0aXRsZSB8fCAhdHlwZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdUaXRsZSBhbmQgdHlwZSBhcmUgcmVxdWlyZWQnIH0pO1xuICAgIH1cblxuICAgIC8vIFZlcmlmeSBvd25lcnNoaXBcbiAgICBjb25zdCB1bml0UGxhbiA9IGF3YWl0IHByaXNtYS51bml0UGxhbi5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHJlcS5wYXJhbXMuaWQsIHVzZXJJZCB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF1bml0UGxhbikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdVbml0IHBsYW4gbm90IGZvdW5kJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IHByaXNtYS51bml0UGxhblJlc291cmNlLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVuaXRQbGFuSWQ6IHJlcS5wYXJhbXMuaWQsXG4gICAgICAgIHRpdGxlOiBTdHJpbmcodGl0bGUpLFxuICAgICAgICB0eXBlOiBTdHJpbmcodHlwZSksXG4gICAgICAgIHVybDogdXJsID8gU3RyaW5nKHVybCkgOiBudWxsLFxuICAgICAgICBub3Rlczogbm90ZXMgPyBTdHJpbmcobm90ZXMpIDogbnVsbCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbihyZXNvdXJjZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBEZWxldGUgYSByZXNvdXJjZVxucm91dGVyLmRlbGV0ZSgnLzppZC9yZXNvdXJjZXMvOnJlc291cmNlSWQnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgb3duZXJzaGlwIHRocm91Z2ggdW5pdCBwbGFuXG4gICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBwcmlzbWEudW5pdFBsYW5SZXNvdXJjZS5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHJlcS5wYXJhbXMucmVzb3VyY2VJZCxcbiAgICAgICAgdW5pdFBsYW46IHtcbiAgICAgICAgICBpZDogcmVxLnBhcmFtcy5pZCxcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXNvdXJjZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdSZXNvdXJjZSBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIGF3YWl0IHByaXNtYS51bml0UGxhblJlc291cmNlLmRlbGV0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogcmVxLnBhcmFtcy5yZXNvdXJjZUlkIH0sXG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwNCkuZW5kKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBEdXBsaWNhdGUgYSB1bml0IHBsYW5cbnJvdXRlci5wb3N0KCcvZHVwbGljYXRlJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZCB8fCAwO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBzb3VyY2VJZCwgdGl0bGUsIG5vdGVzOiBfbm90ZXMsIGluY2x1ZGVTdWJJdGVtcyB9ID0gcmVxLmJvZHk7XG5cbiAgICBpZiAoIXNvdXJjZUlkIHx8ICF0aXRsZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdTb3VyY2UgSUQgYW5kIHRpdGxlIGFyZSByZXF1aXJlZCcgfSk7XG4gICAgfVxuXG4gICAgLy8gRmV0Y2ggdGhlIHNvdXJjZSB1bml0IHBsYW4gd2l0aCBhbGwgcmVsYXRpb25zXG4gICAgY29uc3Qgc291cmNlVW5pdCA9IGF3YWl0IHByaXNtYS51bml0UGxhbi5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHNvdXJjZUlkLCB1c2VySWQgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgZXhwZWN0YXRpb25zOiB0cnVlLFxuICAgICAgICByZXNvdXJjZXM6IHRydWUsXG4gICAgICAgIGxlc3NvblBsYW5zOiBpbmNsdWRlU3ViSXRlbXNcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICAgIGV4cGVjdGF0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXNvdXJjZXM6IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXNvdXJjZVVuaXQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnU291cmNlIHVuaXQgcGxhbiBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0aGUgZHVwbGljYXRlIGluIGEgdHJhbnNhY3Rpb25cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuJHRyYW5zYWN0aW9uKGFzeW5jICh0eCkgPT4ge1xuICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBkYXRlcyAoc2hpZnQgdG8gY3VycmVudCBwZXJpb2QpXG4gICAgICBjb25zdCBvcmlnaW5hbER1cmF0aW9uID0gc291cmNlVW5pdC5lbmREYXRlLmdldFRpbWUoKSAtIHNvdXJjZVVuaXQuc3RhcnREYXRlLmdldFRpbWUoKTtcbiAgICAgIGNvbnN0IG5ld1N0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBuZXdFbmREYXRlID0gbmV3IERhdGUobmV3U3RhcnREYXRlLmdldFRpbWUoKSArIG9yaWdpbmFsRHVyYXRpb24pO1xuXG4gICAgICAvLyBDcmVhdGUgdGhlIGR1cGxpY2F0ZSB1bml0IHBsYW5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaWQ6IF8sXG4gICAgICAgIHVzZXJJZDogX18sXG4gICAgICAgIGNyZWF0ZWRBdDogX2NyZWF0ZWRBdCxcbiAgICAgICAgdXBkYXRlZEF0OiBfdXBkYXRlZEF0LFxuICAgICAgICBsZXNzb25QbGFucyxcbiAgICAgICAgZXhwZWN0YXRpb25zLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIC4uLnVuaXREYXRhXG4gICAgICB9ID0gc291cmNlVW5pdDtcblxuICAgICAgY29uc3QgbmV3VW5pdCA9IGF3YWl0IHR4LnVuaXRQbGFuLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAuLi51bml0RGF0YSxcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgc3RhcnREYXRlOiBuZXdTdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogbmV3RW5kRGF0ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb3B5IGV4cGVjdGF0aW9uc1xuICAgICAgaWYgKGV4cGVjdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGF3YWl0IHR4LnVuaXRQbGFuRXhwZWN0YXRpb24uY3JlYXRlTWFueSh7XG4gICAgICAgICAgZGF0YTogZXhwZWN0YXRpb25zLm1hcCgoZXhwKSA9PiAoe1xuICAgICAgICAgICAgdW5pdFBsYW5JZDogbmV3VW5pdC5pZCxcbiAgICAgICAgICAgIGV4cGVjdGF0aW9uSWQ6IGV4cC5leHBlY3RhdGlvbklkLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgcmVzb3VyY2VzXG4gICAgICBpZiAocmVzb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXdhaXQgdHgudW5pdFBsYW5SZXNvdXJjZS5jcmVhdGVNYW55KHtcbiAgICAgICAgICBkYXRhOiByZXNvdXJjZXMubWFwKFxuICAgICAgICAgICAgKHsgaWQ6IF9pZCwgdW5pdFBsYW5JZDogX3VuaXRQbGFuSWQsIGNyZWF0ZWRBdDogX2NyZWF0ZWRBdCwgLi4ucmVzb3VyY2UgfSkgPT4gKHtcbiAgICAgICAgICAgICAgLi4ucmVzb3VyY2UsXG4gICAgICAgICAgICAgIHVuaXRQbGFuSWQ6IG5ld1VuaXQuaWQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICApLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBsZXNzb24gcGxhbnMgaWYgcmVxdWVzdGVkXG4gICAgICBpZiAoaW5jbHVkZVN1Ykl0ZW1zICYmIGxlc3NvblBsYW5zICYmIGxlc3NvblBsYW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBsZXNzb24gb2YgbGVzc29uUGxhbnMpIHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpZDogXyxcbiAgICAgICAgICAgIHVuaXRQbGFuSWQ6IF9fLFxuICAgICAgICAgICAgdXNlcklkOiBfX18sXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IF9jcmVhdGVkQXQsXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IF91cGRhdGVkQXQsXG4gICAgICAgICAgICAuLi5sZXNzb25EYXRhXG4gICAgICAgICAgfSA9IGxlc3NvbjtcbiAgICAgICAgICBjb25zdCBsZXNzb25FeHAgPVxuICAgICAgICAgICAgKGxlc3NvbiBhcyB7IGV4cGVjdGF0aW9ucz86IEFycmF5PHsgZXhwZWN0YXRpb25JZDogc3RyaW5nIH0+IH0pLmV4cGVjdGF0aW9ucyB8fCBbXTtcbiAgICAgICAgICBjb25zdCBsZXNzb25SZXMgPVxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICBsZXNzb24gYXMge1xuICAgICAgICAgICAgICAgIHJlc291cmNlcz86IEFycmF5PHtcbiAgICAgICAgICAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICBsZXNzb25QbGFuSWQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogRGF0ZTtcbiAgICAgICAgICAgICAgICAgIFtrZXk6IHN0cmluZ106IHVua25vd247XG4gICAgICAgICAgICAgICAgfT47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkucmVzb3VyY2VzIHx8IFtdO1xuXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBsZXNzb24gZGF0ZSBiYXNlZCBvbiByZWxhdGl2ZSBwb3NpdGlvblxuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsT2Zmc2V0ID0gbGVzc29uLmRhdGUuZ2V0VGltZSgpIC0gc291cmNlVW5pdC5zdGFydERhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgIGNvbnN0IG5ld0xlc3NvbkRhdGUgPSBuZXcgRGF0ZShuZXdTdGFydERhdGUuZ2V0VGltZSgpICsgb3JpZ2luYWxPZmZzZXQpO1xuXG4gICAgICAgICAgY29uc3QgbmV3TGVzc29uID0gYXdhaXQgdHguZVRGT0xlc3NvblBsYW4uY3JlYXRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgLi4ubGVzc29uRGF0YSxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICB1bml0UGxhbklkOiBuZXdVbml0LmlkLFxuICAgICAgICAgICAgICBkYXRlOiBuZXdMZXNzb25EYXRlLFxuICAgICAgICAgICAgICB0aXRsZTogYCR7bGVzc29uLnRpdGxlfSAoQ29weSlgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIENvcHkgbGVzc29uIGV4cGVjdGF0aW9uc1xuICAgICAgICAgIGlmIChsZXNzb25FeHAubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYXdhaXQgdHguZVRGT0xlc3NvblBsYW5FeHBlY3RhdGlvbi5jcmVhdGVNYW55KHtcbiAgICAgICAgICAgICAgZGF0YTogbGVzc29uRXhwLm1hcCgoZXhwKSA9PiAoe1xuICAgICAgICAgICAgICAgIGxlc3NvblBsYW5JZDogbmV3TGVzc29uLmlkLFxuICAgICAgICAgICAgICAgIGV4cGVjdGF0aW9uSWQ6IGV4cC5leHBlY3RhdGlvbklkLFxuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDb3B5IGxlc3NvbiByZXNvdXJjZXNcbiAgICAgICAgICBpZiAobGVzc29uUmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IHR4LmVURk9MZXNzb25QbGFuUmVzb3VyY2UuY3JlYXRlTWFueSh7XG4gICAgICAgICAgICAgIGRhdGE6IGxlc3NvblJlcy5tYXAoXG4gICAgICAgICAgICAgICAgKHsgaWQ6IF9pZCwgbGVzc29uUGxhbklkOiBfbGVzc29uUGxhbklkLCBjcmVhdGVkQXQ6IF9jcmVhdGVkQXQsIC4uLnJlc291cmNlIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgICAuLi5yZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgIGxlc3NvblBsYW5JZDogbmV3TGVzc29uLmlkLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICApIGFzIFByaXNtYS5FVEZPTGVzc29uUGxhblJlc291cmNlQ3JlYXRlTWFueUlucHV0W10sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1VuaXQ7XG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbihyZXN1bHQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfbmV4dChlcnIpO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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