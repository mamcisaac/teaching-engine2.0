{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\ninterface RateLimitOptions {\n  windowMs: number; // Time window in milliseconds\n  max: number; // Max requests per window\n  keyGenerator?: (req: Request) => string; // Custom key generator\n  message?: string; // Error message\n  skipSuccessfulRequests?: boolean; // Don't count successful requests\n  skipFailedRequests?: boolean; // Don't count failed requests\n}\n\n// Store for request counts\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\n\n// Cleanup old entries periodically\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, value] of requestCounts.entries()) {\n    if (value.resetTime < now) {\n      requestCounts.delete(key);\n    }\n  }\n}, 60000); // Clean up every minute\n\nexport function createRateLimiter(options: RateLimitOptions) {\n  const {\n    windowMs,\n    max,\n    keyGenerator = (req) => {\n      // Default key: IP + user ID if authenticated\n      const ip = req.ip || req.connection.remoteAddress || 'unknown';\n      const userId = (req as Request & { user?: { userId?: string } }).user?.userId || 'anonymous';\n      return `${ip}-${userId}`;\n    },\n    message = 'Too many requests, please try again later.',\n    skipSuccessfulRequests = false,\n    skipFailedRequests = false,\n  } = options;\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    const key = keyGenerator(req);\n    const now = Date.now();\n\n    // Get or create entry\n    let entry = requestCounts.get(key);\n    if (!entry || entry.resetTime < now) {\n      entry = { count: 0, resetTime: now + windowMs };\n      requestCounts.set(key, entry);\n    }\n\n    // Check if limit exceeded\n    if (entry.count >= max) {\n      const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n\n      logger.warn(\n        {\n          key,\n          endpoint: req.path,\n          method: req.method,\n          count: entry.count,\n          max,\n        },\n        'Rate limit exceeded',\n      );\n\n      res.setHeader('Retry-After', retryAfter.toString());\n      res.setHeader('X-RateLimit-Limit', max.toString());\n      res.setHeader('X-RateLimit-Remaining', '0');\n      res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());\n\n      return res.status(429).json({\n        error: message,\n        retryAfter,\n      });\n    }\n\n    // Increment counter\n    entry.count++;\n\n    // Set headers\n    res.setHeader('X-RateLimit-Limit', max.toString());\n    res.setHeader('X-RateLimit-Remaining', Math.max(0, max - entry.count).toString());\n    res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());\n\n    // Handle response to optionally skip counting\n    if (skipSuccessfulRequests || skipFailedRequests) {\n      const originalSend = res.send;\n      res.send = function (data) {\n        const shouldSkip =\n          (skipSuccessfulRequests && res.statusCode < 400) ||\n          (skipFailedRequests && res.statusCode >= 400);\n\n        if (shouldSkip && entry) {\n          entry.count = Math.max(0, entry.count - 1);\n        }\n\n        return originalSend.call(this, data);\n      };\n    }\n\n    next();\n  };\n}\n\n// Function to clear rate limit for a specific key (useful for development/testing)\nexport function clearRateLimit(key: string) {\n  requestCounts.delete(key);\n}\n\n// Function to clear all rate limits (useful for testing)\nexport function clearAllRateLimits() {\n  requestCounts.clear();\n}\n\n// Pre-configured rate limiters for different use cases\nexport const rateLimiters = {\n  // Strict limit for authentication endpoints (relaxed in test mode)\n  auth: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development' ? 100 : 5, // Allow more requests in test/dev mode\n    message: 'Too many authentication attempts. Please try again later.',\n    skipSuccessfulRequests: true, // Only count failed attempts\n  }),\n\n  // Standard API rate limit\n  api: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // 100 requests per window\n  }),\n\n  // Relaxed limit for read operations\n  read: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 200, // 200 requests per window\n  }),\n\n  // Strict limit for write operations\n  write: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 50, // 50 requests per window\n  }),\n\n  // Very strict limit for AI operations\n  ai: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 20, // 20 requests per hour\n    message: 'AI generation limit exceeded. Please try again later.',\n  }),\n\n  // File upload limit\n  upload: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 10, // 10 uploads per hour\n    message: 'File upload limit exceeded. Please try again later.',\n  }),\n};\n"],"version":3}