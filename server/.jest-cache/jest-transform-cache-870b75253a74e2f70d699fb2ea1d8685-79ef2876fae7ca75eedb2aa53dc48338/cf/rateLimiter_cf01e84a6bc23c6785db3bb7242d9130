ab02dd8bc3daf5af05efeaa0d0c8fc8b
/* istanbul ignore next */
function cov_21zt5skwsx() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts";
  var hash = "26d38f394051991b409bc37992b3e13a052fa7be";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 12,
          column: 10
        }
      },
      "2": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 26
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 11,
          column: 5
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 10,
          column: 9
        }
      },
      "5": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "6": {
        start: {
          line: 19,
          column: 127
        },
        end: {
          line: 19,
          column: 134
        }
      },
      "7": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 70
        }
      },
      "8": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 54
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 33
        }
      },
      "10": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 67,
          column: 6
        }
      },
      "11": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 37
        }
      },
      "12": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 30
        }
      },
      "13": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "15": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 60
        }
      },
      "16": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 42
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 31,
          column: 72
        }
      },
      "19": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 38,
          column: 38
        }
      },
      "20": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 64
        }
      },
      "21": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 63
        }
      },
      "22": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 56
        }
      },
      "23": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 88
        }
      },
      "24": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "25": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "26": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 59
        }
      },
      "27": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 90
        }
      },
      "28": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 84
        }
      },
      "29": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "30": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "31": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 64,
          column: 14
        }
      },
      "32": {
        start: {
          line: 58,
          column: 35
        },
        end: {
          line: 59,
          column: 65
        }
      },
      "33": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "34": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 63
        }
      },
      "35": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 53
        }
      },
      "36": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "37": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 30
        }
      },
      "38": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 26
        }
      },
      "39": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 113,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 12
          },
          end: {
            line: 5,
            column: 13
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "createRateLimiter",
        decl: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 33
          }
        },
        loc: {
          start: {
            line: 13,
            column: 43
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 42
          },
          end: {
            line: 14,
            column: 43
          }
        },
        loc: {
          start: {
            line: 14,
            column: 51
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 12
          }
        },
        loc: {
          start: {
            line: 20,
            column: 31
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 57,
            column: 24
          }
        },
        loc: {
          start: {
            line: 57,
            column: 39
          },
          end: {
            line: 64,
            column: 13
          }
        },
        line: 57
      },
      "5": {
        name: "clearRateLimit",
        decl: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 30
          }
        },
        loc: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 70
      },
      "6": {
        name: "clearAllRateLimits",
        decl: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 74,
            column: 34
          }
        },
        loc: {
          start: {
            line: 74,
            column: 37
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 74
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 27
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 42
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 16,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 16,
            column: 25
          }
        }, {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 57
          }
        }, {
          start: {
            line: 16,
            column: 61
          },
          end: {
            line: 16,
            column: 70
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 23
          },
          end: {
            line: 17,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 23
          },
          end: {
            line: 17,
            column: 39
          }
        }, {
          start: {
            line: 17,
            column: 43
          },
          end: {
            line: 17,
            column: 54
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 19,
            column: 7
          },
          end: {
            line: 19,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 19,
            column: 61
          }
        }],
        line: 19
      },
      "5": {
        loc: {
          start: {
            line: 19,
            column: 63
          },
          end: {
            line: 19,
            column: 93
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 88
          },
          end: {
            line: 19,
            column: 93
          }
        }],
        line: 19
      },
      "6": {
        loc: {
          start: {
            line: 19,
            column: 95
          },
          end: {
            line: 19,
            column: 121
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 116
          },
          end: {
            line: 19,
            column: 121
          }
        }],
        line: 19
      },
      "7": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "8": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 18
          }
        }, {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 43
          }
        }],
        line: 25
      },
      "9": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 34
          }
        }, {
          start: {
            line: 55,
            column: 38
          },
          end: {
            line: 55,
            column: 56
          }
        }],
        line: 55
      },
      "12": {
        loc: {
          start: {
            line: 58,
            column: 35
          },
          end: {
            line: 59,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 36
          },
          end: {
            line: 58,
            column: 58
          }
        }, {
          start: {
            line: 58,
            column: 62
          },
          end: {
            line: 58,
            column: 82
          }
        }, {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 59,
            column: 39
          }
        }, {
          start: {
            line: 59,
            column: 43
          },
          end: {
            line: 59,
            column: 64
          }
        }],
        line: 58
      },
      "13": {
        loc: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "14": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 30
          }
        }, {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 60,
            column: 39
          }
        }],
        line: 60
      },
      "15": {
        loc: {
          start: {
            line: 82,
            column: 13
          },
          end: {
            line: 82,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 89
          },
          end: {
            line: 82,
            column: 92
          }
        }, {
          start: {
            line: 82,
            column: 95
          },
          end: {
            line: 82,
            column: 96
          }
        }],
        line: 82
      },
      "16": {
        loc: {
          start: {
            line: 82,
            column: 13
          },
          end: {
            line: 82,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 13
          },
          end: {
            line: 82,
            column: 44
          }
        }, {
          start: {
            line: 82,
            column: 48
          },
          end: {
            line: 82,
            column: 86
          }
        }],
        line: 82
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts"],
      sourcesContent: ["import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\ninterface RateLimitOptions {\n  windowMs: number; // Time window in milliseconds\n  max: number; // Max requests per window\n  keyGenerator?: (req: Request) => string; // Custom key generator\n  message?: string; // Error message\n  skipSuccessfulRequests?: boolean; // Don't count successful requests\n  skipFailedRequests?: boolean; // Don't count failed requests\n}\n\n// Store for request counts\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\n\n// Cleanup old entries periodically\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, value] of requestCounts.entries()) {\n    if (value.resetTime < now) {\n      requestCounts.delete(key);\n    }\n  }\n}, 60000); // Clean up every minute\n\nexport function createRateLimiter(options: RateLimitOptions) {\n  const {\n    windowMs,\n    max,\n    keyGenerator = (req) => {\n      // Default key: IP + user ID if authenticated\n      const ip = req.ip || req.connection.remoteAddress || 'unknown';\n      const userId = (req as Request & { user?: { userId?: string } }).user?.userId || 'anonymous';\n      return `${ip}-${userId}`;\n    },\n    message = 'Too many requests, please try again later.',\n    skipSuccessfulRequests = false,\n    skipFailedRequests = false,\n  } = options;\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    const key = keyGenerator(req);\n    const now = Date.now();\n\n    // Get or create entry\n    let entry = requestCounts.get(key);\n    if (!entry || entry.resetTime < now) {\n      entry = { count: 0, resetTime: now + windowMs };\n      requestCounts.set(key, entry);\n    }\n\n    // Check if limit exceeded\n    if (entry.count >= max) {\n      const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n\n      logger.warn(\n        {\n          key,\n          endpoint: req.path,\n          method: req.method,\n          count: entry.count,\n          max,\n        },\n        'Rate limit exceeded',\n      );\n\n      res.setHeader('Retry-After', retryAfter.toString());\n      res.setHeader('X-RateLimit-Limit', max.toString());\n      res.setHeader('X-RateLimit-Remaining', '0');\n      res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());\n\n      return res.status(429).json({\n        error: message,\n        retryAfter,\n      });\n    }\n\n    // Increment counter\n    entry.count++;\n\n    // Set headers\n    res.setHeader('X-RateLimit-Limit', max.toString());\n    res.setHeader('X-RateLimit-Remaining', Math.max(0, max - entry.count).toString());\n    res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());\n\n    // Handle response to optionally skip counting\n    if (skipSuccessfulRequests || skipFailedRequests) {\n      const originalSend = res.send;\n      res.send = function (data) {\n        const shouldSkip =\n          (skipSuccessfulRequests && res.statusCode < 400) ||\n          (skipFailedRequests && res.statusCode >= 400);\n\n        if (shouldSkip && entry) {\n          entry.count = Math.max(0, entry.count - 1);\n        }\n\n        return originalSend.call(this, data);\n      };\n    }\n\n    next();\n  };\n}\n\n// Function to clear rate limit for a specific key (useful for development/testing)\nexport function clearRateLimit(key: string) {\n  requestCounts.delete(key);\n}\n\n// Function to clear all rate limits (useful for testing)\nexport function clearAllRateLimits() {\n  requestCounts.clear();\n}\n\n// Pre-configured rate limiters for different use cases\nexport const rateLimiters = {\n  // Strict limit for authentication endpoints (relaxed in test mode)\n  auth: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development' ? 100 : 5, // Allow more requests in test/dev mode\n    message: 'Too many authentication attempts. Please try again later.',\n    skipSuccessfulRequests: true, // Only count failed attempts\n  }),\n\n  // Standard API rate limit\n  api: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // 100 requests per window\n  }),\n\n  // Relaxed limit for read operations\n  read: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 200, // 200 requests per window\n  }),\n\n  // Strict limit for write operations\n  write: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 50, // 50 requests per window\n  }),\n\n  // Very strict limit for AI operations\n  ai: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 20, // 20 requests per hour\n    message: 'AI generation limit exceeded. Please try again later.',\n  }),\n\n  // File upload limit\n  upload: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 10, // 10 uploads per hour\n    message: 'File upload limit exceeded. Please try again later.',\n  }),\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "26d38f394051991b409bc37992b3e13a052fa7be"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21zt5skwsx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21zt5skwsx();
import logger from '../logger';
// Store for request counts
const requestCounts =
/* istanbul ignore next */
(cov_21zt5skwsx().s[0]++, new Map());
// Cleanup old entries periodically
/* istanbul ignore next */
cov_21zt5skwsx().s[1]++;
setInterval(() => {
  /* istanbul ignore next */
  cov_21zt5skwsx().f[0]++;
  const now =
  /* istanbul ignore next */
  (cov_21zt5skwsx().s[2]++, Date.now());
  /* istanbul ignore next */
  cov_21zt5skwsx().s[3]++;
  for (const [key, value] of requestCounts.entries()) {
    /* istanbul ignore next */
    cov_21zt5skwsx().s[4]++;
    if (value.resetTime < now) {
      /* istanbul ignore next */
      cov_21zt5skwsx().b[0][0]++;
      cov_21zt5skwsx().s[5]++;
      requestCounts.delete(key);
    } else
    /* istanbul ignore next */
    {
      cov_21zt5skwsx().b[0][1]++;
    }
  }
}, 60000); // Clean up every minute
export function createRateLimiter(options) {
  /* istanbul ignore next */
  cov_21zt5skwsx().f[1]++;
  const {
    windowMs,
    max,
    keyGenerator =
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[1][0]++, req => {
      /* istanbul ignore next */
      cov_21zt5skwsx().f[2]++;
      // Default key: IP + user ID if authenticated
      const ip =
      /* istanbul ignore next */
      (cov_21zt5skwsx().s[7]++,
      /* istanbul ignore next */
      (cov_21zt5skwsx().b[2][0]++, req.ip) ||
      /* istanbul ignore next */
      (cov_21zt5skwsx().b[2][1]++, req.connection.remoteAddress) ||
      /* istanbul ignore next */
      (cov_21zt5skwsx().b[2][2]++, 'unknown'));
      const userId =
      /* istanbul ignore next */
      (cov_21zt5skwsx().s[8]++,
      /* istanbul ignore next */
      (cov_21zt5skwsx().b[3][0]++, req.user?.userId) ||
      /* istanbul ignore next */
      (cov_21zt5skwsx().b[3][1]++, 'anonymous'));
      /* istanbul ignore next */
      cov_21zt5skwsx().s[9]++;
      return `${ip}-${userId}`;
    }),
    message =
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[4][0]++, 'Too many requests, please try again later.'),
    skipSuccessfulRequests =
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[5][0]++, false),
    skipFailedRequests =
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[6][0]++, false)
  } =
  /* istanbul ignore next */
  (cov_21zt5skwsx().s[6]++, options);
  /* istanbul ignore next */
  cov_21zt5skwsx().s[10]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_21zt5skwsx().f[3]++;
    const key =
    /* istanbul ignore next */
    (cov_21zt5skwsx().s[11]++, keyGenerator(req));
    const now =
    /* istanbul ignore next */
    (cov_21zt5skwsx().s[12]++, Date.now());
    // Get or create entry
    let entry =
    /* istanbul ignore next */
    (cov_21zt5skwsx().s[13]++, requestCounts.get(key));
    /* istanbul ignore next */
    cov_21zt5skwsx().s[14]++;
    if (
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[8][0]++, !entry) ||
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[8][1]++, entry.resetTime < now)) {
      /* istanbul ignore next */
      cov_21zt5skwsx().b[7][0]++;
      cov_21zt5skwsx().s[15]++;
      entry = {
        count: 0,
        resetTime: now + windowMs
      };
      /* istanbul ignore next */
      cov_21zt5skwsx().s[16]++;
      requestCounts.set(key, entry);
    } else
    /* istanbul ignore next */
    {
      cov_21zt5skwsx().b[7][1]++;
    }
    // Check if limit exceeded
    cov_21zt5skwsx().s[17]++;
    if (entry.count >= max) {
      /* istanbul ignore next */
      cov_21zt5skwsx().b[9][0]++;
      const retryAfter =
      /* istanbul ignore next */
      (cov_21zt5skwsx().s[18]++, Math.ceil((entry.resetTime - now) / 1000));
      /* istanbul ignore next */
      cov_21zt5skwsx().s[19]++;
      logger.warn({
        key,
        endpoint: req.path,
        method: req.method,
        count: entry.count,
        max
      }, 'Rate limit exceeded');
      /* istanbul ignore next */
      cov_21zt5skwsx().s[20]++;
      res.setHeader('Retry-After', retryAfter.toString());
      /* istanbul ignore next */
      cov_21zt5skwsx().s[21]++;
      res.setHeader('X-RateLimit-Limit', max.toString());
      /* istanbul ignore next */
      cov_21zt5skwsx().s[22]++;
      res.setHeader('X-RateLimit-Remaining', '0');
      /* istanbul ignore next */
      cov_21zt5skwsx().s[23]++;
      res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());
      /* istanbul ignore next */
      cov_21zt5skwsx().s[24]++;
      return res.status(429).json({
        error: message,
        retryAfter
      });
    } else
    /* istanbul ignore next */
    {
      cov_21zt5skwsx().b[9][1]++;
    }
    // Increment counter
    cov_21zt5skwsx().s[25]++;
    entry.count++;
    // Set headers
    /* istanbul ignore next */
    cov_21zt5skwsx().s[26]++;
    res.setHeader('X-RateLimit-Limit', max.toString());
    /* istanbul ignore next */
    cov_21zt5skwsx().s[27]++;
    res.setHeader('X-RateLimit-Remaining', Math.max(0, max - entry.count).toString());
    /* istanbul ignore next */
    cov_21zt5skwsx().s[28]++;
    res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());
    // Handle response to optionally skip counting
    /* istanbul ignore next */
    cov_21zt5skwsx().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[11][0]++, skipSuccessfulRequests) ||
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[11][1]++, skipFailedRequests)) {
      /* istanbul ignore next */
      cov_21zt5skwsx().b[10][0]++;
      const originalSend =
      /* istanbul ignore next */
      (cov_21zt5skwsx().s[30]++, res.send);
      /* istanbul ignore next */
      cov_21zt5skwsx().s[31]++;
      res.send = function (data) {
        /* istanbul ignore next */
        cov_21zt5skwsx().f[4]++;
        const shouldSkip =
        /* istanbul ignore next */
        (cov_21zt5skwsx().s[32]++,
        /* istanbul ignore next */
        (cov_21zt5skwsx().b[12][0]++, skipSuccessfulRequests) &&
        /* istanbul ignore next */
        (cov_21zt5skwsx().b[12][1]++, res.statusCode < 400) ||
        /* istanbul ignore next */
        (cov_21zt5skwsx().b[12][2]++, skipFailedRequests) &&
        /* istanbul ignore next */
        (cov_21zt5skwsx().b[12][3]++, res.statusCode >= 400));
        /* istanbul ignore next */
        cov_21zt5skwsx().s[33]++;
        if (
        /* istanbul ignore next */
        (cov_21zt5skwsx().b[14][0]++, shouldSkip) &&
        /* istanbul ignore next */
        (cov_21zt5skwsx().b[14][1]++, entry)) {
          /* istanbul ignore next */
          cov_21zt5skwsx().b[13][0]++;
          cov_21zt5skwsx().s[34]++;
          entry.count = Math.max(0, entry.count - 1);
        } else
        /* istanbul ignore next */
        {
          cov_21zt5skwsx().b[13][1]++;
        }
        cov_21zt5skwsx().s[35]++;
        return originalSend.call(this, data);
      };
    } else
    /* istanbul ignore next */
    {
      cov_21zt5skwsx().b[10][1]++;
    }
    cov_21zt5skwsx().s[36]++;
    next();
  };
}
// Function to clear rate limit for a specific key (useful for development/testing)
export function clearRateLimit(key) {
  /* istanbul ignore next */
  cov_21zt5skwsx().f[5]++;
  cov_21zt5skwsx().s[37]++;
  requestCounts.delete(key);
}
// Function to clear all rate limits (useful for testing)
export function clearAllRateLimits() {
  /* istanbul ignore next */
  cov_21zt5skwsx().f[6]++;
  cov_21zt5skwsx().s[38]++;
  requestCounts.clear();
}
// Pre-configured rate limiters for different use cases
export const rateLimiters =
/* istanbul ignore next */
(cov_21zt5skwsx().s[39]++, {
  // Strict limit for authentication endpoints (relaxed in test mode)
  auth: createRateLimiter({
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    max:
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[16][0]++, process.env.NODE_ENV === 'test') ||
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[16][1]++, process.env.NODE_ENV === 'development') ?
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[15][0]++, 100) :
    /* istanbul ignore next */
    (cov_21zt5skwsx().b[15][1]++, 5),
    // Allow more requests in test/dev mode
    message: 'Too many authentication attempts. Please try again later.',
    skipSuccessfulRequests: true // Only count failed attempts
  }),
  // Standard API rate limit
  api: createRateLimiter({
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    max: 100 // 100 requests per window
  }),
  // Relaxed limit for read operations
  read: createRateLimiter({
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    max: 200 // 200 requests per window
  }),
  // Strict limit for write operations
  write: createRateLimiter({
    windowMs: 15 * 60 * 1000,
    // 15 minutes
    max: 50 // 50 requests per window
  }),
  // Very strict limit for AI operations
  ai: createRateLimiter({
    windowMs: 60 * 60 * 1000,
    // 1 hour
    max: 20,
    // 20 requests per hour
    message: 'AI generation limit exceeded. Please try again later.'
  }),
  // File upload limit
  upload: createRateLimiter({
    windowMs: 60 * 60 * 1000,
    // 1 hour
    max: 10,
    // 10 uploads per hour
    message: 'File upload limit exceeded. Please try again later.'
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,