98a911315ca90ad2ae6b97919f369c85
/**
 * Express Application Factory
 * Creates and configures the Express application
 */
import express from 'express';
import cors from 'cors';
import { PrismaClient } from '@teaching-engine/database';
import { errorHandler } from '@/middleware/errorHandler';
import { rateLimiters } from '@/middleware/rateLimiter';
import { authRoutes } from '@/routes/auth';
import { userRoutes } from '@/routes/user';
export function createApp(prisma) {
    const app = express();
    // Middleware
    app.use(cors({
        origin: process.env.CLIENT_URL || 'http://localhost:5173',
        credentials: true,
    }));
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));
    // Rate limiting
    app.use('/api/auth', rateLimiters.auth);
    // Health check
    app.get('/health', (req, res) => {
        res.json({ status: 'ok', timestamp: new Date().toISOString() });
    });
    // Routes
    app.use('/api/auth', authRoutes(prisma));
    app.use('/api/user', userRoutes(prisma));
    // 404 handler
    app.use((req, res) => {
        res.status(404).json({ error: 'Route not found' });
    });
    // Error handler
    app.use(errorHandler);
    return app;
}
export async function createTestApp(prisma) {
    // Use provided prisma or create a mock
    const testPrisma = prisma || new PrismaClient();
    const app = createApp(testPrisma);
    // Add test-specific middleware
    if (process.env.NODE_ENV === 'test') {
        app.use((req, res, next) => {
            // Mock authentication for testing
            if (req.headers.authorization === 'Bearer valid.jwt.token') {
                req.user = { id: '123', email: 'test@example.com', role: 'USER' };
            }
            else if (req.headers.authorization === 'Bearer admin.token') {
                req.user = { id: '456', email: 'admin@example.com', role: 'ADMIN' };
            }
            next();
        });
    }
    return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9hcHAudHMiLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxPQUFxRCxNQUFNLFNBQVMsQ0FBQztBQUM1RSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBb0I7SUFDNUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFFdEIsYUFBYTtJQUNiLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ1gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLHVCQUF1QjtRQUN6RCxXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUMsQ0FBQztJQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVoRCxnQkFBZ0I7SUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXhDLGVBQWU7SUFDZixHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUM5QixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTO0lBQ1QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFekMsY0FBYztJQUNkLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsZ0JBQWdCO0lBQ2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFdEIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxhQUFhLENBQUMsTUFBcUI7SUFDdkQsdUNBQXVDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRWhELE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVsQywrQkFBK0I7SUFDL0IsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUNwQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUN6QixrQ0FBa0M7WUFDbEMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsS0FBSyx3QkFBd0IsRUFBRSxDQUFDO2dCQUMxRCxHQUFXLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQzdFLENBQUM7aUJBQU0sSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsS0FBSyxvQkFBb0IsRUFBRSxDQUFDO2dCQUM3RCxHQUFXLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO1lBQy9FLENBQUM7WUFDRCxJQUFJLEVBQUUsQ0FBQztRQUNULENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL2FwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4cHJlc3MgQXBwbGljYXRpb24gRmFjdG9yeVxuICogQ3JlYXRlcyBhbmQgY29uZmlndXJlcyB0aGUgRXhwcmVzcyBhcHBsaWNhdGlvblxuICovXG5cbmltcG9ydCBleHByZXNzLCB7IEV4cHJlc3MsIFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHRlYWNoaW5nLWVuZ2luZS9kYXRhYmFzZSc7XG5pbXBvcnQgeyBlcnJvckhhbmRsZXIgfSBmcm9tICdAL21pZGRsZXdhcmUvZXJyb3JIYW5kbGVyJztcbmltcG9ydCB7IHJhdGVMaW1pdGVycyB9IGZyb20gJ0AvbWlkZGxld2FyZS9yYXRlTGltaXRlcic7XG5pbXBvcnQgeyBhdXRoUm91dGVzIH0gZnJvbSAnQC9yb3V0ZXMvYXV0aCc7XG5pbXBvcnQgeyB1c2VyUm91dGVzIH0gZnJvbSAnQC9yb3V0ZXMvdXNlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0AvbG9nZ2VyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFwcChwcmlzbWE6IFByaXNtYUNsaWVudCk6IEV4cHJlc3Mge1xuICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbiAgLy8gTWlkZGxld2FyZVxuICBhcHAudXNlKGNvcnMoe1xuICAgIG9yaWdpbjogcHJvY2Vzcy5lbnYuQ0xJRU5UX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDo1MTczJyxcbiAgICBjcmVkZW50aWFsczogdHJ1ZSxcbiAgfSkpO1xuICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbiAgYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5cbiAgLy8gUmF0ZSBsaW1pdGluZ1xuICBhcHAudXNlKCcvYXBpL2F1dGgnLCByYXRlTGltaXRlcnMuYXV0aCk7XG5cbiAgLy8gSGVhbHRoIGNoZWNrXG4gIGFwcC5nZXQoJy9oZWFsdGgnLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMuanNvbih7IHN0YXR1czogJ29rJywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSk7XG4gIH0pO1xuXG4gIC8vIFJvdXRlc1xuICBhcHAudXNlKCcvYXBpL2F1dGgnLCBhdXRoUm91dGVzKHByaXNtYSkpO1xuICBhcHAudXNlKCcvYXBpL3VzZXInLCB1c2VyUm91dGVzKHByaXNtYSkpO1xuXG4gIC8vIDQwNCBoYW5kbGVyXG4gIGFwcC51c2UoKHJlcSwgcmVzKSA9PiB7XG4gICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1JvdXRlIG5vdCBmb3VuZCcgfSk7XG4gIH0pO1xuXG4gIC8vIEVycm9yIGhhbmRsZXJcbiAgYXBwLnVzZShlcnJvckhhbmRsZXIpO1xuXG4gIHJldHVybiBhcHA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0QXBwKHByaXNtYT86IFByaXNtYUNsaWVudCk6IFByb21pc2U8RXhwcmVzcz4ge1xuICAvLyBVc2UgcHJvdmlkZWQgcHJpc21hIG9yIGNyZWF0ZSBhIG1vY2tcbiAgY29uc3QgdGVzdFByaXNtYSA9IHByaXNtYSB8fCBuZXcgUHJpc21hQ2xpZW50KCk7XG4gIFxuICBjb25zdCBhcHAgPSBjcmVhdGVBcHAodGVzdFByaXNtYSk7XG4gIFxuICAvLyBBZGQgdGVzdC1zcGVjaWZpYyBtaWRkbGV3YXJlXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIC8vIE1vY2sgYXV0aGVudGljYXRpb24gZm9yIHRlc3RpbmdcbiAgICAgIGlmIChyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uID09PSAnQmVhcmVyIHZhbGlkLmp3dC50b2tlbicpIHtcbiAgICAgICAgKHJlcSBhcyBhbnkpLnVzZXIgPSB7IGlkOiAnMTIzJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJywgcm9sZTogJ1VTRVInIH07XG4gICAgICB9IGVsc2UgaWYgKHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24gPT09ICdCZWFyZXIgYWRtaW4udG9rZW4nKSB7XG4gICAgICAgIChyZXEgYXMgYW55KS51c2VyID0geyBpZDogJzQ1NicsIGVtYWlsOiAnYWRtaW5AZXhhbXBsZS5jb20nLCByb2xlOiAnQURNSU4nIH07XG4gICAgICB9XG4gICAgICBuZXh0KCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIHJldHVybiBhcHA7XG59Il0sInZlcnNpb24iOjN9