{"version":3,"names":["cov_21zt5skwsx","actualCoverage","logger","requestCounts","s","Map","setInterval","f","now","Date","key","value","entries","resetTime","b","delete","createRateLimiter","options","windowMs","max","keyGenerator","req","ip","connection","remoteAddress","userId","user","message","skipSuccessfulRequests","skipFailedRequests","res","next","entry","get","count","set","retryAfter","Math","ceil","warn","endpoint","path","method","setHeader","toString","toISOString","status","json","error","originalSend","send","data","shouldSkip","statusCode","call","clearRateLimit","clearAllRateLimits","clear","rateLimiters","auth","process","env","NODE_ENV","api","read","write","ai","upload"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/rateLimiter.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\ninterface RateLimitOptions {\n  windowMs: number; // Time window in milliseconds\n  max: number; // Max requests per window\n  keyGenerator?: (req: Request) => string; // Custom key generator\n  message?: string; // Error message\n  skipSuccessfulRequests?: boolean; // Don't count successful requests\n  skipFailedRequests?: boolean; // Don't count failed requests\n}\n\n// Store for request counts\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\n\n// Cleanup old entries periodically\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, value] of requestCounts.entries()) {\n    if (value.resetTime < now) {\n      requestCounts.delete(key);\n    }\n  }\n}, 60000); // Clean up every minute\n\nexport function createRateLimiter(options: RateLimitOptions) {\n  const {\n    windowMs,\n    max,\n    keyGenerator = (req) => {\n      // Default key: IP + user ID if authenticated\n      const ip = req.ip || req.connection.remoteAddress || 'unknown';\n      const userId = (req as Request & { user?: { userId?: string } }).user?.userId || 'anonymous';\n      return `${ip}-${userId}`;\n    },\n    message = 'Too many requests, please try again later.',\n    skipSuccessfulRequests = false,\n    skipFailedRequests = false,\n  } = options;\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    const key = keyGenerator(req);\n    const now = Date.now();\n\n    // Get or create entry\n    let entry = requestCounts.get(key);\n    if (!entry || entry.resetTime < now) {\n      entry = { count: 0, resetTime: now + windowMs };\n      requestCounts.set(key, entry);\n    }\n\n    // Check if limit exceeded\n    if (entry.count >= max) {\n      const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n\n      logger.warn(\n        {\n          key,\n          endpoint: req.path,\n          method: req.method,\n          count: entry.count,\n          max,\n        },\n        'Rate limit exceeded',\n      );\n\n      res.setHeader('Retry-After', retryAfter.toString());\n      res.setHeader('X-RateLimit-Limit', max.toString());\n      res.setHeader('X-RateLimit-Remaining', '0');\n      res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());\n\n      return res.status(429).json({\n        error: message,\n        retryAfter,\n      });\n    }\n\n    // Increment counter\n    entry.count++;\n\n    // Set headers\n    res.setHeader('X-RateLimit-Limit', max.toString());\n    res.setHeader('X-RateLimit-Remaining', Math.max(0, max - entry.count).toString());\n    res.setHeader('X-RateLimit-Reset', new Date(entry.resetTime).toISOString());\n\n    // Handle response to optionally skip counting\n    if (skipSuccessfulRequests || skipFailedRequests) {\n      const originalSend = res.send;\n      res.send = function (data) {\n        const shouldSkip =\n          (skipSuccessfulRequests && res.statusCode < 400) ||\n          (skipFailedRequests && res.statusCode >= 400);\n\n        if (shouldSkip && entry) {\n          entry.count = Math.max(0, entry.count - 1);\n        }\n\n        return originalSend.call(this, data);\n      };\n    }\n\n    next();\n  };\n}\n\n// Function to clear rate limit for a specific key (useful for development/testing)\nexport function clearRateLimit(key: string) {\n  requestCounts.delete(key);\n}\n\n// Function to clear all rate limits (useful for testing)\nexport function clearAllRateLimits() {\n  requestCounts.clear();\n}\n\n// Pre-configured rate limiters for different use cases\nexport const rateLimiters = {\n  // Strict limit for authentication endpoints (relaxed in test mode)\n  auth: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development' ? 100 : 5, // Allow more requests in test/dev mode\n    message: 'Too many authentication attempts. Please try again later.',\n    skipSuccessfulRequests: true, // Only count failed attempts\n  }),\n\n  // Standard API rate limit\n  api: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // 100 requests per window\n  }),\n\n  // Relaxed limit for read operations\n  read: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 200, // 200 requests per window\n  }),\n\n  // Strict limit for write operations\n  write: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 50, // 50 requests per window\n  }),\n\n  // Very strict limit for AI operations\n  ai: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 20, // 20 requests per hour\n    message: 'AI generation limit exceeded. Please try again later.',\n  }),\n\n  // File upload limit\n  upload: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 10, // 10 uploads per hour\n    message: 'File upload limit exceeded. Please try again later.',\n  }),\n};\n"],"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","ignoreList":[]}