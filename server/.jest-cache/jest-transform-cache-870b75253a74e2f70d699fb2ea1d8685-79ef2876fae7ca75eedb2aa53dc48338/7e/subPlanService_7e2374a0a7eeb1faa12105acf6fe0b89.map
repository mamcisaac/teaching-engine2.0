{"version":3,"names":["cov_1ulyxmsrrx","actualCoverage","prisma","PDFDocument","generateSubPlanPDF","minToTime","min","f","h","s","String","Math","floor","padStart","m","buildSubPlanData","date","options","b","dayStart","Date","setUTCHours","dayEnd","setUTCDate","getUTCDate","includeGoals","includeRoutines","includePlans","anonymize","userId","plan","events","blocks","prefs","routines","studentGoals","Promise","all","resolve","calendarEvent","findMany","where","start","lte","end","gte","unavailableBlock","classRoutine","isActive","orderBy","priority","category","studentGoal","status","student","include","take","schedule","item","items","_subjectId","slot","subjectId","activity","milestone","act","push","time","startMin","title","forEach","e","getUTCHours","getUTCMinutes","note","filter","blockType","reason","sort","a","localeCompare","pullOuts","map","contacts","subPlanContacts","uniqueOutcomes","Map","outcomes","outcomeRelation","outcome","set","id","code","description","subject","formattedGoals","goal","text","studentName","undefined","firstName","lastName","formattedRoutines","routine","timeOfDay","fallbackPlan","subPlanProcedures","toISOString","split","procedures","Array","from","values","goals","generateSubPlan","days","doc","chunks","on","c","_info","i","addPage","d","data","slice","today","upcoming","studentNotes","pullOutsText","emergencyContacts","formatContacts","curriculumOutcomes","Buffer","concat","p","join","Object","entries","k","v"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/subPlanService.ts"],"sourcesContent":["import { prisma, Prisma } from '../prisma';\nimport PDFDocument from 'pdfkit';\nimport { generateSubPlanPDF } from './subPlanGenerator';\n\nexport interface ScheduleEntry {\n  time: string;\n  activity?: string;\n  note?: string;\n}\n\nexport interface SubPlanData {\n  date: string;\n  schedule: ScheduleEntry[];\n  pullOuts: { time: string; reason: string }[];\n  contacts: Record<string, string>;\n  procedures?: string;\n  outcomes?: Array<{\n    code: string;\n    description: string;\n    subject: string;\n  }>;\n  goals?: Array<{\n    id: number;\n    text: string;\n    status: string;\n    studentName?: string;\n  }>;\n  routines?: Array<{\n    id: number;\n    title: string;\n    description: string;\n    category: string;\n    timeOfDay?: string;\n  }>;\n  fallbackPlan?: string;\n}\n\nfunction minToTime(min: number): string {\n  const h = String(Math.floor(min / 60)).padStart(2, '0');\n  const m = String(min % 60).padStart(2, '0');\n  return `${h}:${m}`;\n}\n\nexport interface SubPlanOptions {\n  includeGoals?: boolean;\n  includeRoutines?: boolean;\n  includePlans?: boolean;\n  anonymize?: boolean;\n  userId?: number;\n}\n\nexport async function buildSubPlanData(\n  date: string,\n  options: SubPlanOptions = {},\n): Promise<SubPlanData> {\n  const dayStart = new Date(date);\n  dayStart.setUTCHours(0, 0, 0, 0);\n  const dayEnd = new Date(dayStart);\n  dayEnd.setUTCDate(dayStart.getUTCDate() + 1);\n\n  const {\n    includeGoals = true,\n    includeRoutines = true,\n    includePlans = true,\n    anonymize = false,\n    userId = 1,\n  } = options;\n\n  const [plan, events, blocks, prefs, routines, studentGoals] = await Promise.all([\n    // DISABLED: Legacy dailyPlan model removed in ETFO migration\n    includePlans ? Promise.resolve(null) : Promise.resolve(null), // Legacy dailyPlan query disabled\n    prisma.calendarEvent.findMany({\n      where: { start: { lte: dayEnd }, end: { gte: dayStart } },\n    }),\n    prisma.unavailableBlock.findMany({ where: { date: dayStart } }),\n    null, // teacherPreferences archived - preferences now in User and ClassRoutine\n    includeRoutines\n      ? prisma.classRoutine.findMany({\n          where: { userId, isActive: true },\n          orderBy: [{ priority: 'desc' }, { category: 'asc' }],\n        })\n      : [],\n    includeGoals\n      ? prisma.studentGoal.findMany({\n          where: {\n            status: 'active',\n            student: { userId },\n          },\n          include: {\n            student: true,\n          },\n          take: 10, // Limit to most relevant goals\n        })\n      : [],\n  ]);\n\n  const schedule: ScheduleEntry[] = [];\n  if (plan) {\n    for (const item of plan.items) {\n      const _subjectId = item.slot?.subjectId ?? item.activity?.milestone.subjectId;\n      // DISABLED: Legacy activity model removed in ETFO migration\n      // const act = null; // Legacy activity queries disabled\n      const act = null;\n      schedule.push({ time: minToTime(item.startMin), activity: act?.title ?? '' });\n    }\n  }\n  events.forEach((e) =>\n    schedule.push({\n      time: minToTime(new Date(e.start).getUTCHours() * 60 + new Date(e.start).getUTCMinutes()),\n      note: e.title,\n    }),\n  );\n  blocks\n    .filter((b) => b.blockType === 'TEACHER_ABSENCE')\n    .forEach((b) => schedule.push({ time: minToTime(b.startMin), note: b.reason }));\n\n  schedule.sort((a, b) => a.time.localeCompare(b.time));\n\n  const pullOuts = blocks\n    .filter((b) => b.blockType === 'STUDENT_PULL_OUT')\n    .map((b) => ({ time: minToTime(b.startMin), reason: b.reason }));\n\n  const contacts = prefs?.subPlanContacts as Prisma.JsonValue | null as\n    | Record<string, string>\n    | undefined;\n\n  // Extract all unique outcomes from activities\n  const uniqueOutcomes = new Map<\n    string,\n    {\n      code: string;\n      description: string;\n      subject: string;\n    }\n  >();\n\n  if (plan) {\n    for (const item of plan.items) {\n      if (item.activity?.outcomes) {\n        for (const outcomeRelation of item.activity.outcomes) {\n          const outcome = outcomeRelation.outcome;\n          uniqueOutcomes.set(outcome.id, {\n            code: outcome.code,\n            description: outcome.description,\n            subject: outcome.subject,\n          });\n        }\n      }\n    }\n  }\n\n  // Format goals with optional anonymization\n  const formattedGoals = studentGoals.map((goal) => ({\n    id: goal.id,\n    text: goal.text,\n    status: goal.status,\n    studentName: anonymize ? undefined : `${goal.student.firstName} ${goal.student.lastName}`,\n  }));\n\n  // Format routines\n  const formattedRoutines = routines.map((routine) => ({\n    id: routine.id,\n    title: routine.title,\n    description: routine.description,\n    category: routine.category,\n    timeOfDay: routine.timeOfDay || undefined,\n  }));\n\n  // Generate fallback plan\n  const fallbackPlan = prefs?.subPlanProcedures\n    ? `Emergency Fallback: ${prefs.subPlanProcedures}\\n\\nIf technology fails or activities cannot be completed, use print materials from the substitute folder and engage students in quiet reading or journaling activities.`\n    : 'If technology fails or activities cannot be completed, use print materials from the substitute folder and engage students in quiet reading or journaling activities.';\n\n  return {\n    date: dayStart.toISOString().split('T')[0],\n    schedule,\n    pullOuts,\n    contacts: contacts || {},\n    procedures: prefs?.subPlanProcedures || undefined,\n    outcomes: includePlans ? Array.from(uniqueOutcomes.values()) : undefined,\n    goals: includeGoals ? formattedGoals : undefined,\n    routines: includeRoutines ? formattedRoutines : undefined,\n    fallbackPlan,\n  };\n}\n\nexport async function generateSubPlan(\n  date: string,\n  days = 1,\n  options: SubPlanOptions = {},\n): Promise<Buffer> {\n  const doc = new PDFDocument();\n  const chunks: Buffer[] = [];\n  doc.on('data', (c) => chunks.push(c));\n  // SubstituteInfo model archived - substitute information now managed in User and ClassRoutine models\n  const _info = null;\n\n  for (let i = 0; i < days; i++) {\n    if (i > 0) doc.addPage();\n    const d = new Date(date);\n    d.setUTCDate(d.getUTCDate() + i);\n    const data = await buildSubPlanData(d.toISOString().slice(0, 10), options);\n\n    await generateSubPlanPDF(\n      {\n        today: data.schedule.map((s) => ({ time: s.time, activity: s.activity ?? s.note ?? '' })),\n        upcoming: [],\n        procedures: data.procedures || '',\n        studentNotes:\n          pullOutsText(data.pullOuts), // Allergies now managed in Student model\n        emergencyContacts: formatContacts(data.contacts),\n        curriculumOutcomes: data.outcomes,\n        goals: data.goals,\n        routines: data.routines,\n        fallbackPlan: data.fallbackPlan,\n      },\n      doc,\n    );\n  }\n  doc.end();\n  return new Promise((resolve) => doc.on('end', () => resolve(Buffer.concat(chunks))));\n}\n\nfunction pullOutsText(pullOuts: { time: string; reason: string }[]): string {\n  return pullOuts.map((p) => `${p.time} - ${p.reason}`).join('\\n');\n}\n\nfunction formatContacts(c: Record<string, string>): string {\n  return Object.entries(c)\n    .map(([k, v]) => `${k}: ${v}`)\n    .join('\\n');\n}\n"],"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","ignoreList":[]}