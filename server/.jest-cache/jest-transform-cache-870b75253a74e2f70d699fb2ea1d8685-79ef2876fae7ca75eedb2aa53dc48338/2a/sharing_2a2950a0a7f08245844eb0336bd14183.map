{"version":3,"names":["cov_1ttlaepih9","actualCoverage","Router","z","authenticate","asyncHandler","logger","addDays","sharePlanSchema","s","object","planType","enum","planId","string","shareWith","union","type","literal","email","teamId","expiresInDays","number","int","min","max","optional","permissions","canEdit","boolean","canCopy","canComment","canReshare","message","updateSharePermissionsSchema","sharingRoutes","prisma","f","router","use","checkPlanOwnership","userId","b","lrPlan","longRangePlan","findUnique","where","id","unitPlan","lessonPlan","eTFOLessonPlan","daybookEntry","get","req","res","user","direction","query","whereClause","sharedById","sharedWithId","OR","sharedPlans","sharedPlan","findMany","include","sharedBy","select","name","sharedWith","orderBy","sharedAt","plansWithDetails","Promise","all","map","share","planDetails","title","academicYear","grade","subject","startDate","endDate","date","json","post","parse","body","isOwner","status","error","targetUser","existingShare","findFirst","create","data","team","isMember","teamMember","teamId_userId","expiresAt","Date","undefined","isPublicLink","linkExpiresAt","info","shareCode","params","hasAccess","update","viewCount","increment","lastViewedAt","expectations","expectation","unitPlans","lessonPlans","resources","plan","patch","shareId","updates","updated","delete","send","copiedPlan","originalLesson","userUnitPlans","take","length","unitPlanId","language","duration","mindsOn","action","consolidation","learningGoals","materials","grouping","titleFr","mindsOnFr","actionFr","consolidationFr","learningGoalsFr","accommodations","modifications","extensions","assessmentType","assessmentNotes","isSubFriendly","subNotes","e","expectationId","copyCount"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/sharing.ts"],"sourcesContent":["/**\n * Plan Sharing Routes\n * Handles sharing of lesson plans, units, and other planning resources\n */\n\nimport { Router } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport { authenticate } from '@/middleware/authenticate';\nimport { asyncHandler } from '@/middleware/errorHandler';\nimport logger from '@/logger';\nimport { addDays } from 'date-fns';\n\n// Validation schemas\nconst sharePlanSchema = z.object({\n  planType: z.enum(['long-range', 'unit', 'lesson', 'daybook']),\n  planId: z.string(),\n  shareWith: z.union([\n    z.object({\n      type: z.literal('user'),\n      email: z.string().email(),\n    }),\n    z.object({\n      type: z.literal('team'),\n      teamId: z.string(),\n    }),\n    z.object({\n      type: z.literal('link'),\n      expiresInDays: z.number().int().min(1).max(365).optional(),\n    }),\n  ]),\n  permissions: z\n    .object({\n      canEdit: z.boolean().optional(),\n      canCopy: z.boolean().optional(),\n      canComment: z.boolean().optional(),\n      canReshare: z.boolean().optional(),\n    })\n    .optional(),\n  message: z.string().optional(),\n});\n\nconst updateSharePermissionsSchema = z.object({\n  canEdit: z.boolean().optional(),\n  canCopy: z.boolean().optional(),\n  canComment: z.boolean().optional(),\n  canReshare: z.boolean().optional(),\n});\n\nexport function sharingRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Apply authentication to all routes\n  router.use(authenticate);\n\n  // Helper function to check plan ownership\n  async function checkPlanOwnership(\n    planType: string,\n    planId: string,\n    userId: number,\n  ): Promise<boolean> {\n    switch (planType) {\n      case 'long-range': {\n        const lrPlan = await prisma.longRangePlan.findUnique({\n          where: { id: planId },\n        });\n        return lrPlan?.userId === userId;\n      }\n\n      case 'unit': {\n        const unitPlan = await prisma.unitPlan.findUnique({\n          where: { id: planId },\n        });\n        return unitPlan?.userId === userId;\n      }\n\n      case 'lesson': {\n        const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n          where: { id: planId },\n        });\n        return lessonPlan?.userId === userId;\n      }\n\n      case 'daybook': {\n        const daybookEntry = await prisma.daybookEntry.findUnique({\n          where: { id: planId },\n        });\n        return daybookEntry?.userId === userId;\n      }\n\n      default:\n        return false;\n    }\n  }\n\n  // Get all shared plans (both sent and received)\n  router.get(\n    '/plans',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { type, direction } = req.query;\n\n      const whereClause: Record<string, unknown> = {};\n\n      if (direction === 'sent') {\n        whereClause.sharedById = userId;\n      } else if (direction === 'received') {\n        whereClause.sharedWithId = userId;\n      } else {\n        whereClause.OR = [{ sharedById: userId }, { sharedWithId: userId }];\n      }\n\n      if (type) {\n        whereClause.planType = type;\n      }\n\n      const sharedPlans = await prisma.sharedPlan.findMany({\n        where: whereClause,\n        include: {\n          sharedBy: {\n            select: { id: true, name: true, email: true },\n          },\n          sharedWith: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n        orderBy: { sharedAt: 'desc' },\n      });\n\n      // Fetch plan details for each shared plan\n      const plansWithDetails = await Promise.all(\n        sharedPlans.map(async (share) => {\n          let planDetails = null;\n\n          switch (share.planType) {\n            case 'long-range':\n              planDetails = await prisma.longRangePlan.findUnique({\n                where: { id: share.planId },\n                select: { id: true, title: true, academicYear: true, grade: true, subject: true },\n              });\n              break;\n\n            case 'unit':\n              planDetails = await prisma.unitPlan.findUnique({\n                where: { id: share.planId },\n                select: { id: true, title: true, startDate: true, endDate: true },\n              });\n              break;\n\n            case 'lesson':\n              planDetails = await prisma.eTFOLessonPlan.findUnique({\n                where: { id: share.planId },\n                select: { id: true, title: true, date: true, grade: true, subject: true },\n              });\n              break;\n\n            case 'daybook':\n              planDetails = await prisma.daybookEntry.findUnique({\n                where: { id: share.planId },\n                select: { id: true, date: true },\n              });\n              break;\n          }\n\n          return {\n            ...share,\n            planDetails,\n          };\n        }),\n      );\n\n      res.json(plansWithDetails);\n    }),\n  );\n\n  // Share a plan\n  router.post(\n    '/plans',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const {\n        planType,\n        planId,\n        shareWith,\n        permissions = {},\n        message,\n      } = sharePlanSchema.parse(req.body);\n\n      // Check if user owns the plan\n      const isOwner = await checkPlanOwnership(planType, planId, userId);\n      if (!isOwner) {\n        return res.status(403).json({ error: 'You do not have permission to share this plan' });\n      }\n\n      let sharedPlan;\n\n      if (shareWith.type === 'user') {\n        // Share with specific user\n        const targetUser = await prisma.user.findUnique({\n          where: { email: shareWith.email },\n        });\n\n        if (!targetUser) {\n          return res.status(404).json({ error: 'User not found' });\n        }\n\n        if (targetUser.id === userId) {\n          return res.status(400).json({ error: 'Cannot share with yourself' });\n        }\n\n        // Check if already shared\n        const existingShare = await prisma.sharedPlan.findFirst({\n          where: {\n            planType,\n            planId,\n            sharedById: userId,\n            sharedWithId: targetUser.id,\n          },\n        });\n\n        if (existingShare) {\n          return res.status(409).json({ error: 'Plan is already shared with this user' });\n        }\n\n        sharedPlan = await prisma.sharedPlan.create({\n          data: {\n            planType,\n            planId,\n            sharedById: userId,\n            sharedWithId: targetUser.id,\n            ...permissions,\n            message,\n          },\n          include: {\n            sharedBy: {\n              select: { id: true, name: true, email: true },\n            },\n            sharedWith: {\n              select: { id: true, name: true, email: true },\n            },\n          },\n        });\n\n        // TODO: Send email notification\n      } else if (shareWith.type === 'team') {\n        // Share with team\n        const team = await prisma.team.findUnique({\n          where: { id: shareWith.teamId },\n        });\n\n        if (!team) {\n          return res.status(404).json({ error: 'Team not found' });\n        }\n\n        // Check if user is a member of the team\n        const isMember = await prisma.teamMember.findUnique({\n          where: { teamId_userId: { teamId: shareWith.teamId, userId } },\n        });\n\n        if (!isMember) {\n          return res\n            .status(403)\n            .json({ error: 'You must be a team member to share with the team' });\n        }\n\n        sharedPlan = await prisma.sharedPlan.create({\n          data: {\n            planType,\n            planId,\n            sharedById: userId,\n            teamId: shareWith.teamId,\n            ...permissions,\n            message,\n          },\n          include: {\n            sharedBy: {\n              select: { id: true, name: true, email: true },\n            },\n          },\n        });\n      } else {\n        // Create public sharing link\n        const expiresAt = shareWith.expiresInDays\n          ? addDays(new Date(), shareWith.expiresInDays)\n          : undefined;\n\n        sharedPlan = await prisma.sharedPlan.create({\n          data: {\n            planType,\n            planId,\n            sharedById: userId,\n            isPublicLink: true,\n            linkExpiresAt: expiresAt,\n            ...permissions,\n            message,\n          },\n          include: {\n            sharedBy: {\n              select: { id: true, name: true, email: true },\n            },\n          },\n        });\n      }\n\n      logger.info(`Plan shared: ${planType}/${planId} by user ${userId}`);\n      res.status(201).json(sharedPlan);\n    }),\n  );\n\n  // Get shared plan by share code\n  router.get(\n    '/plans/:shareCode',\n    asyncHandler(async (req, res) => {\n      const { shareCode } = req.params;\n      const userId = req.user!.id;\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { shareCode },\n        include: {\n          sharedBy: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Check access permissions\n      const hasAccess =\n        sharedPlan.isPublicLink ||\n        sharedPlan.sharedById === userId ||\n        sharedPlan.sharedWithId === userId;\n\n      if (!hasAccess && sharedPlan.teamId) {\n        // Check team membership\n        const isMember = await prisma.teamMember.findFirst({\n          where: { teamId: sharedPlan.teamId, userId },\n        });\n        if (!isMember) {\n          return res.status(403).json({ error: 'Access denied' });\n        }\n      } else if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      // Check if link has expired\n      if (sharedPlan.linkExpiresAt && new Date() > sharedPlan.linkExpiresAt) {\n        return res.status(410).json({ error: 'Share link has expired' });\n      }\n\n      // Update view count\n      await prisma.sharedPlan.update({\n        where: { id: sharedPlan.id },\n        data: {\n          viewCount: { increment: 1 },\n          lastViewedAt: new Date(),\n        },\n      });\n\n      // Fetch plan details\n      let planDetails = null;\n\n      switch (sharedPlan.planType) {\n        case 'long-range':\n          planDetails = await prisma.longRangePlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n              unitPlans: {\n                select: { id: true, title: true, startDate: true, endDate: true },\n              },\n            },\n          });\n          break;\n\n        case 'unit':\n          planDetails = await prisma.unitPlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n              lessonPlans: {\n                select: { id: true, title: true, date: true },\n              },\n              resources: true,\n            },\n          });\n          break;\n\n        case 'lesson':\n          planDetails = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n              resources: true,\n            },\n          });\n          break;\n\n        case 'daybook':\n          planDetails = await prisma.daybookEntry.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n            },\n          });\n          break;\n      }\n\n      res.json({\n        share: sharedPlan,\n        plan: planDetails,\n      });\n    }),\n  );\n\n  // Update share permissions\n  router.patch(\n    '/plans/:shareId',\n    asyncHandler(async (req, res) => {\n      const { shareId } = req.params;\n      const userId = req.user!.id;\n      const updates = updateSharePermissionsSchema.parse(req.body);\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { id: shareId },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Only the sharer can update permissions\n      if (sharedPlan.sharedById !== userId) {\n        return res.status(403).json({ error: 'Only the plan owner can update share permissions' });\n      }\n\n      const updated = await prisma.sharedPlan.update({\n        where: { id: shareId },\n        data: updates,\n        include: {\n          sharedBy: {\n            select: { id: true, name: true, email: true },\n          },\n          sharedWith: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      res.json(updated);\n    }),\n  );\n\n  // Revoke share\n  router.delete(\n    '/plans/:shareId',\n    asyncHandler(async (req, res) => {\n      const { shareId } = req.params;\n      const userId = req.user!.id;\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { id: shareId },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Only the sharer can revoke\n      if (sharedPlan.sharedById !== userId) {\n        return res.status(403).json({ error: 'Only the plan owner can revoke sharing' });\n      }\n\n      await prisma.sharedPlan.delete({\n        where: { id: shareId },\n      });\n\n      logger.info(`Share revoked: ${shareId} by user ${userId}`);\n      res.status(204).send();\n    }),\n  );\n\n  // Copy shared plan\n  router.post(\n    '/plans/:shareCode/copy',\n    asyncHandler(async (req, res) => {\n      const { shareCode } = req.params;\n      const userId = req.user!.id;\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { shareCode },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Check if user has copy permission\n      if (!sharedPlan.canCopy) {\n        return res.status(403).json({ error: 'Copying this plan is not allowed' });\n      }\n\n      // Check access\n      const hasAccess = sharedPlan.isPublicLink || sharedPlan.sharedWithId === userId;\n\n      if (!hasAccess && sharedPlan.teamId) {\n        const isMember = await prisma.teamMember.findFirst({\n          where: { teamId: sharedPlan.teamId, userId },\n        });\n        if (!isMember) {\n          return res.status(403).json({ error: 'Access denied' });\n        }\n      } else if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      // Copy the plan based on type\n      let copiedPlan;\n\n      switch (sharedPlan.planType) {\n        case 'lesson': {\n          const originalLesson = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: true,\n              resources: true,\n            },\n          });\n\n          if (!originalLesson) {\n            return res.status(404).json({ error: 'Original plan not found' });\n          }\n\n          // Get user's unit plans to select from\n          const userUnitPlans = await prisma.unitPlan.findMany({\n            where: { userId },\n            select: { id: true },\n            take: 1,\n          });\n\n          if (userUnitPlans.length === 0) {\n            return res\n              .status(400)\n              .json({ error: 'You need at least one unit plan to copy lessons' });\n          }\n\n          copiedPlan = await prisma.eTFOLessonPlan.create({\n            data: {\n              userId,\n              title: `${originalLesson.title} (Copy)`,\n              unitPlanId: userUnitPlans[0].id, // TODO: Allow user to select unit\n              grade: originalLesson.grade,\n              subject: originalLesson.subject,\n              language: originalLesson.language,\n              date: new Date(),\n              duration: originalLesson.duration,\n              mindsOn: originalLesson.mindsOn,\n              action: originalLesson.action,\n              consolidation: originalLesson.consolidation,\n              learningGoals: originalLesson.learningGoals,\n              materials: originalLesson.materials,\n              grouping: originalLesson.grouping,\n              titleFr: originalLesson.titleFr,\n              mindsOnFr: originalLesson.mindsOnFr,\n              actionFr: originalLesson.actionFr,\n              consolidationFr: originalLesson.consolidationFr,\n              learningGoalsFr: originalLesson.learningGoalsFr,\n              accommodations: originalLesson.accommodations,\n              modifications: originalLesson.modifications,\n              extensions: originalLesson.extensions,\n              assessmentType: originalLesson.assessmentType,\n              assessmentNotes: originalLesson.assessmentNotes,\n              isSubFriendly: originalLesson.isSubFriendly,\n              subNotes: originalLesson.subNotes,\n              expectations: {\n                create: originalLesson.expectations.map((e) => ({\n                  expectationId: e.expectationId,\n                })),\n              },\n            },\n          });\n          break;\n        }\n\n        // TODO: Implement copying for other plan types\n        default:\n          return res.status(400).json({ error: 'Copying this plan type is not yet supported' });\n      }\n\n      // Update copy count\n      await prisma.sharedPlan.update({\n        where: { id: sharedPlan.id },\n        data: { copyCount: { increment: 1 } },\n      });\n\n      logger.info(`Plan copied: ${sharedPlan.planType}/${sharedPlan.planId} by user ${userId}`);\n      res.status(201).json(copiedPlan);\n    }),\n  );\n\n  return router;\n}\n"],"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","ignoreList":[]}