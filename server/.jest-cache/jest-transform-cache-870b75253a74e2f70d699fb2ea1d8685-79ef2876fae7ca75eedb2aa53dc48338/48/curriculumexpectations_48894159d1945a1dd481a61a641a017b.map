{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-expectations.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-expectations.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { EmbeddingService } from '../services/embeddingService';\n\nconst router = Router();\n\n// Initialize embedding service\nconst embeddingService = new EmbeddingService();\n\n// Semantic search helper function\nasync function semanticSearch(\n  query: string,\n  limit: number,\n  filters?: { subject?: string; grade?: number; strand?: string },\n) {\n  // Generate embedding for the search query\n  const queryEmbedding = await embeddingService.generateEmbedding('search-query', query);\n\n  // Get all expectations that match filters\n  const where: Prisma.CurriculumExpectationWhereInput = {};\n  if (filters?.subject) where.subject = filters.subject;\n  if (filters?.grade) where.grade = filters.grade;\n  if (filters?.strand) where.strand = filters.strand;\n\n  const allExpectations = await prisma.curriculumExpectation.findMany({\n    where,\n    include: {\n      embedding: true,\n    },\n  });\n\n  // Calculate similarities and sort by relevance\n  const expectationsWithSimilarity = allExpectations\n    .map((expectation) => {\n      // Find the best embedding match for this expectation\n      let maxSimilarity = 0;\n\n      if (expectation.embedding) {\n        const similarity = cosineSimilarity(\n          queryEmbedding?.embedding || [],\n          expectation.embedding.embedding as number[],\n        );\n        if (similarity > maxSimilarity) {\n          maxSimilarity = similarity;\n        }\n      }\n\n      return {\n        ...expectation,\n        similarity: maxSimilarity,\n      };\n    })\n    .filter((exp) => exp.similarity > 0.3) // Minimum similarity threshold\n    .sort((a, b) => b.similarity - a.similarity)\n    .slice(0, limit);\n\n  // Remove embeddings from response\n  return expectationsWithSimilarity.map(({ embedding: _embedding, similarity, ...exp }) => ({\n    ...exp,\n    _similarity: similarity,\n  }));\n}\n\n// Cosine similarity calculation\nfunction cosineSimilarity(a: number[], b: number[]): number {\n  if (a.length !== b.length) return 0;\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    dotProduct += a[i] * b[i];\n    normA += a[i] * a[i];\n    normB += b[i] * b[i];\n  }\n\n  if (normA === 0 || normB === 0) return 0;\n\n  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n}\n\n// Get all curriculum expectations with optional filtering\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const { subject, grade, strand, search } = req.query;\n\n    const where: Prisma.CurriculumExpectationWhereInput = {};\n\n    // Validate and sanitize input parameters\n    if (subject && typeof subject === 'string') {\n      const sanitizedSubject = String(subject).trim().slice(0, 100);\n      if (sanitizedSubject) where.subject = sanitizedSubject;\n    }\n\n    if (grade) {\n      const gradeNumber = Number(grade);\n      if (!isNaN(gradeNumber) && gradeNumber >= 1 && gradeNumber <= 12) {\n        where.grade = gradeNumber;\n      }\n    }\n\n    if (strand && typeof strand === 'string') {\n      const sanitizedStrand = String(strand).trim().slice(0, 100);\n      if (sanitizedStrand) where.strand = sanitizedStrand;\n    }\n    if (search && typeof search === 'string') {\n      const sanitizedSearch = String(search).trim().slice(0, 200);\n      if (sanitizedSearch) {\n        // Database-specific case-insensitive search\n        const mode = process.env.DATABASE_URL?.includes('postgresql')\n          ? { mode: 'insensitive' as const }\n          : {};\n\n        where.OR = [\n          { code: { contains: sanitizedSearch, ...mode } },\n          { description: { contains: sanitizedSearch, ...mode } },\n          { descriptionFr: { contains: sanitizedSearch, ...mode } },\n        ];\n      }\n    }\n\n    const expectations = await prisma.curriculumExpectation.findMany({\n      where,\n      orderBy: [{ subject: 'asc' }, { grade: 'asc' }, { strand: 'asc' }, { code: 'asc' }],\n      include: {\n        unitPlans: { select: { unitPlan: { select: { id: true, title: true } } } },\n        lessonPlans: { select: { lessonPlan: { select: { id: true, title: true } } } },\n      },\n    });\n\n    res.json(expectations);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new curriculum expectation\nrouter.post('/', async (req: Request, res, _next) => {\n  try {\n    const { code, description, strand, substrand, grade, subject, descriptionFr } = req.body;\n\n    if (!code || !description || !strand || !grade || !subject) {\n      return res.status(400).json({\n        error: 'Missing required fields: code, description, strand, grade, subject',\n      });\n    }\n\n    // Validate types and lengths\n    if (typeof code !== 'string' || code.length > 50 || code.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid code: must be a string between 1-50 characters' });\n    }\n\n    if (typeof description !== 'string' || description.length > 1000 || description.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid description: must be a string between 1-1000 characters' });\n    }\n\n    if (typeof strand !== 'string' || strand.length > 100 || strand.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid strand: must be a string between 1-100 characters' });\n    }\n\n    if (typeof subject !== 'string' || subject.length > 100 || subject.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid subject: must be a string between 1-100 characters' });\n    }\n\n    const gradeNumber = Number(grade);\n    if (isNaN(gradeNumber) || gradeNumber < 1 || gradeNumber > 12) {\n      return res.status(400).json({ error: 'Invalid grade: must be a number between 1-12' });\n    }\n\n    if (substrand && (typeof substrand !== 'string' || substrand.length > 100)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid substrand: must be a string with max 100 characters' });\n    }\n\n    if (descriptionFr && (typeof descriptionFr !== 'string' || descriptionFr.length > 1000)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid descriptionFr: must be a string with max 1000 characters' });\n    }\n\n    const expectation = await prisma.curriculumExpectation.create({\n      data: {\n        code: code.trim(),\n        description: description.trim(),\n        strand: strand.trim(),\n        substrand: substrand?.trim() || null,\n        grade: gradeNumber,\n        subject: subject.trim(),\n        descriptionFr: descriptionFr?.trim() || null,\n      },\n      include: {\n        unitPlans: { select: { unitPlan: { select: { id: true, title: true } } } },\n        lessonPlans: { select: { lessonPlan: { select: { id: true, title: true } } } },\n      },\n    });\n\n    res.status(201).json(expectation);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a curriculum expectation\nrouter.put('/:id', async (req: Request, res, _next) => {\n  try {\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(req.params.id)) {\n      return res.status(400).json({ error: 'Invalid expectation ID format' });\n    }\n\n    const { code, description, strand, substrand, grade, subject, descriptionFr } = req.body;\n\n    // Validate input types and lengths\n    if (code && (typeof code !== 'string' || code.length > 50 || code.length < 1)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid code: must be a string between 1-50 characters' });\n    }\n\n    if (\n      description &&\n      (typeof description !== 'string' || description.length > 1000 || description.length < 1)\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid description: must be a string between 1-1000 characters' });\n    }\n\n    if (strand && (typeof strand !== 'string' || strand.length > 100 || strand.length < 1)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid strand: must be a string between 1-100 characters' });\n    }\n\n    if (subject && (typeof subject !== 'string' || subject.length > 100 || subject.length < 1)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid subject: must be a string between 1-100 characters' });\n    }\n\n    let gradeNumber: number | undefined;\n    if (grade !== undefined) {\n      gradeNumber = Number(grade);\n      if (isNaN(gradeNumber) || gradeNumber < 1 || gradeNumber > 12) {\n        return res.status(400).json({ error: 'Invalid grade: must be a number between 1-12' });\n      }\n    }\n\n    if (\n      substrand !== undefined &&\n      substrand !== null &&\n      (typeof substrand !== 'string' || substrand.length > 100)\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid substrand: must be a string with max 100 characters' });\n    }\n\n    if (\n      descriptionFr !== undefined &&\n      descriptionFr !== null &&\n      (typeof descriptionFr !== 'string' || descriptionFr.length > 1000)\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid descriptionFr: must be a string with max 1000 characters' });\n    }\n\n    const expectation = await prisma.curriculumExpectation.update({\n      where: { id: req.params.id },\n      data: {\n        ...(code && { code: code.trim() }),\n        ...(description && { description: description.trim() }),\n        ...(strand && { strand: strand.trim() }),\n        ...(substrand !== undefined && { substrand: substrand?.trim() || null }),\n        ...(gradeNumber !== undefined && { grade: gradeNumber }),\n        ...(subject && { subject: subject.trim() }),\n        ...(descriptionFr !== undefined && { descriptionFr: descriptionFr?.trim() || null }),\n      },\n      include: {\n        unitPlans: { select: { unitPlan: { select: { id: true, title: true } } } },\n        lessonPlans: { select: { lessonPlan: { select: { id: true, title: true } } } },\n      },\n    });\n\n    res.json(expectation);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a curriculum expectation\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(req.params.id)) {\n      return res.status(400).json({ error: 'Invalid expectation ID format' });\n    }\n\n    await prisma.curriculumExpectation.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).send();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single curriculum expectation\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(req.params.id)) {\n      return res.status(400).json({ error: 'Invalid expectation ID format' });\n    }\n\n    const expectation = await prisma.curriculumExpectation.findUnique({\n      where: { id: req.params.id },\n      include: {\n        unitPlans: {\n          include: {\n            unitPlan: {\n              include: {\n                longRangePlan: true,\n                _count: { select: { lessonPlans: true } },\n              },\n            },\n          },\n        },\n        lessonPlans: {\n          include: {\n            lessonPlan: {\n              include: {\n                unitPlan: { select: { id: true, title: true } },\n                daybookEntry: true,\n              },\n            },\n          },\n        },\n        embedding: true,\n      },\n    });\n\n    if (!expectation) {\n      return res.status(404).json({ error: 'Curriculum expectation not found' });\n    }\n\n    res.json(expectation);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Search curriculum expectations with semantic similarity (AI-powered)\nrouter.post('/search', async (req: Request, res, _next) => {\n  try {\n    const { query, limit = 10, filters } = req.body;\n\n    if (!query) {\n      return res.status(400).json({ error: 'Query is required' });\n    }\n\n    // Try semantic search first, fallback to text search if no embeddings\n    let results;\n\n    try {\n      // Attempt semantic search using embeddings\n      results = await semanticSearch(query, limit, filters);\n    } catch (error) {\n      console.log('Semantic search failed, falling back to text search:', error);\n\n      // Fallback to text-based search with proper case-insensitive handling\n      const mode = process.env.DATABASE_URL?.includes('postgresql')\n        ? { mode: 'insensitive' as const }\n        : {};\n\n      const where: Prisma.CurriculumExpectationWhereInput = {\n        OR: [\n          { code: { contains: query, ...mode } },\n          { description: { contains: query, ...mode } },\n          { descriptionFr: { contains: query, ...mode } },\n          { strand: { contains: query, ...mode } },\n        ],\n      };\n\n      if (filters?.subject && typeof filters.subject === 'string') {\n        const sanitizedSubject = filters.subject.trim().slice(0, 100);\n        if (sanitizedSubject) where.subject = sanitizedSubject;\n      }\n      if (filters?.grade) {\n        const gradeNumber = Number(filters.grade);\n        if (!isNaN(gradeNumber) && gradeNumber >= 1 && gradeNumber <= 12) {\n          where.grade = gradeNumber;\n        }\n      }\n\n      results = await prisma.curriculumExpectation.findMany({\n        where,\n        take: limit,\n        orderBy: { code: 'asc' },\n      });\n    }\n\n    res.json(results);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Cluster curriculum expectations by similarity (AI-powered)\nrouter.post('/cluster', async (req: Request, res, _next) => {\n  try {\n    const { expectationIds, clusterCount = 5 } = req.body;\n\n    if (!expectationIds || !Array.isArray(expectationIds)) {\n      return res.status(400).json({ error: 'expectationIds array is required' });\n    }\n\n    // Clustering is implemented through the curriculum import system\n    // This endpoint provides manual clustering for ad-hoc analysis\n    const clusters = {\n      message:\n        'Manual clustering endpoint - automated clustering available through curriculum import',\n      expectationIds,\n      clusterCount,\n    };\n\n    res.json(clusters);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get curriculum coverage report\nrouter.get('/coverage/report', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { startDate, endDate, subject, grade } = req.query;\n\n    // Get all expectations for the filters\n    const expectationsWhere: Prisma.CurriculumExpectationWhereInput = {};\n    if (subject) expectationsWhere.subject = String(subject);\n    if (grade) expectationsWhere.grade = Number(grade);\n\n    const allExpectations = await prisma.curriculumExpectation.findMany({\n      where: expectationsWhere,\n      select: {\n        id: true,\n        code: true,\n        description: true,\n        strand: true,\n      },\n    });\n\n    // Get covered expectations through lesson plans\n    const lessonPlansWhere: Prisma.ETFOLessonPlanWhereInput = {\n      userId,\n    };\n\n    if (startDate || endDate) {\n      lessonPlansWhere.date = {};\n      if (startDate) lessonPlansWhere.date.gte = new Date(String(startDate));\n      if (endDate) lessonPlansWhere.date.lte = new Date(String(endDate));\n    }\n\n    const coveredExpectations = await prisma.eTFOLessonPlanExpectation.findMany({\n      where: {\n        lessonPlan: lessonPlansWhere,\n        expectation: expectationsWhere,\n      },\n      select: {\n        expectationId: true,\n        expectation: {\n          select: {\n            id: true,\n            code: true,\n            description: true,\n            strand: true,\n          },\n        },\n        lessonPlan: {\n          select: {\n            id: true,\n            title: true,\n            date: true,\n          },\n        },\n      },\n    });\n\n    // Calculate coverage statistics\n    const coveredIds = new Set(coveredExpectations.map((ce) => ce.expectationId));\n    const coverage = {\n      total: allExpectations.length,\n      covered: coveredIds.size,\n      percentage:\n        allExpectations.length > 0\n          ? Math.round((coveredIds.size / allExpectations.length) * 100)\n          : 0,\n      byStrand: {} as Record<string, { total: number; covered: number }>,\n      uncovered: allExpectations.filter((e) => !coveredIds.has(e.id)),\n      details: coveredExpectations,\n    };\n\n    // Calculate coverage by strand\n    for (const exp of allExpectations) {\n      if (!coverage.byStrand[exp.strand]) {\n        coverage.byStrand[exp.strand] = { total: 0, covered: 0 };\n      }\n      coverage.byStrand[exp.strand].total++;\n      if (coveredIds.has(exp.id)) {\n        coverage.byStrand[exp.strand].covered++;\n      }\n    }\n\n    res.json(coverage);\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],"version":3}