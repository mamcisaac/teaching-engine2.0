{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/setup/integration.setup.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/setup/integration.setup.ts"],"sourcesContent":["/**\n * Integration Test Setup\n *\n * Configures the test environment for integration tests\n * with real database connections and minimal mocking.\n */\n\nimport { jest } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\nimport { TextEncoder, TextDecoder } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// ES module compatibility\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Polyfill for Node.js environment\nglobal.TextEncoder = TextEncoder;\nglobal.TextDecoder = TextDecoder as any;\n\n// Set test environment\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'integration-test-secret';\nprocess.env.OPENAI_API_KEY = 'test-api-key';\n\n// Use unique test database per worker and session to avoid conflicts\nconst workerId = process.env.JEST_WORKER_ID || '1';\nconst sessionId = Date.now();\nconst testDbPath = path.join(process.cwd(), 'tests', `test-integration-${workerId}-${sessionId}.db`);\nprocess.env.DATABASE_URL = `file:${testDbPath}`;\n\n// Configure Jest for integration tests\njest.setTimeout(15000); // 15 second timeout for integration tests\n\n// Still mock expensive external services\njest.mock('openai');\njest.mock('@aws-sdk/client-s3');\njest.mock('node-cron', () => ({\n  schedule: jest.fn(),\n}));\n\n// Create test database connection pool\nlet prismaClient: PrismaClient | null = null;\n\n/**\n * Get or create Prisma client for tests\n */\nexport function getTestPrismaClient(): PrismaClient {\n  if (!prismaClient) {\n    prismaClient = new PrismaClient({\n      datasources: {\n        db: {\n          url: process.env.DATABASE_URL,\n        },\n      },\n      log: process.env.DEBUG_TESTS === 'true' ? ['query', 'error', 'warn'] : ['error'],\n    });\n  }\n  return prismaClient;\n}\n\n/**\n * Setup test database\n */\nasync function setupTestDatabase() {\n  const prisma = getTestPrismaClient();\n\n  try {\n    // Ensure database directory exists\n    const dbDir = path.dirname(testDbPath);\n    await fs.mkdir(dbDir, { recursive: true });\n\n    // Push Prisma schema to database with retry logic\n    const { execSync } = await import('child_process');\n    \n    let retries = 3;\n    while (retries > 0) {\n      try {\n        execSync('npx prisma db push --force-reset', {\n          env: { ...process.env, DATABASE_URL: process.env.DATABASE_URL },\n          cwd: path.resolve(__dirname, '../../../packages/database'),\n          stdio: 'pipe', // Capture output instead of showing it\n        });\n        break; // Success, exit retry loop\n      } catch (error) {\n        retries--;\n        if (retries === 0) {\n          console.error('Failed to setup test database after retries:', error);\n          throw error;\n        }\n        // Wait a bit before retrying to avoid conflicts\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  } catch (error) {\n    console.error('Failed to setup test database:', error);\n    throw error;\n  }\n}\n\n/**\n * Clean test database\n */\nasync function cleanTestDatabase() {\n  const prisma = getTestPrismaClient();\n\n  try {\n    // Use Prisma's deleteMany for proper cleanup\n    const tables = [\n      'calendarEvent',\n      'etfoLessonPlanActivity',\n      'etfoLessonPlan',\n      'etfoUnitPlan',\n      'daybook',\n      'unitPlan',\n      'lessonPlan',\n      'student',\n      'curriculumExpectation',\n      'longRangePlan',\n      'user',\n    ];\n\n    for (const table of tables) {\n      try {\n        await (prisma as any)[table].deleteMany();\n      } catch {\n        // Table might not exist or have dependencies\n      }\n    }\n  } catch (error) {\n    console.error('Failed to clean test database:', error);\n  }\n}\n\n// Global setup - run once before all tests\nbeforeAll(async () => {\n  await setupTestDatabase();\n});\n\n// Optional database cleanup - tests can call this manually if needed\n// Note: Removed global beforeEach cleanup to prevent conflicts with test data setup\nexport async function cleanTestDatabaseForTest() {\n  await cleanTestDatabase();\n}\n\n// Global teardown - run once after all tests\nafterAll(async () => {\n  if (prismaClient) {\n    await prismaClient.$disconnect();\n  }\n\n  // Remove test database file\n  try {\n    await fs.unlink(testDbPath);\n    await fs.unlink(`${testDbPath}-journal`);\n  } catch {\n    // Ignore errors - file might not exist\n  }\n});\n\n// Integration test helpers\nglobal.integrationTestHelpers = {\n  /**\n   * Create a test app instance\n   */\n  createTestApp: async () => {\n    // Import app without starting the server\n    const { app } = await import('../../src/app');\n    return app;\n  },\n\n  /**\n   * Seed basic test data\n   */\n  seedTestData: async () => {\n    const prisma = getTestPrismaClient();\n    const bcrypt = await import('bcryptjs');\n\n    // Create test user\n    const user = await prisma.user.create({\n      data: {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        password: await bcrypt.hash('password123', 10),\n        name: 'Test Teacher',\n        role: 'TEACHER',\n        preferredLanguage: 'en',\n      },\n    });\n\n    // Create test students\n    const students = await Promise.all([\n      prisma.student.create({\n        data: {\n          id: 'student-1',\n          name: 'Alice Johnson',\n          gradeLevel: '3',\n          userId: user.id,\n        },\n      }),\n      prisma.student.create({\n        data: {\n          id: 'student-2',\n          name: 'Bob Smith',\n          gradeLevel: '3',\n          userId: user.id,\n        },\n      }),\n    ]);\n\n    // Create test curriculum expectations\n    const expectations = await Promise.all([\n      prisma.curriculumExpectation.create({\n        data: {\n          id: 'expect-1',\n          code: 'MATH-3-NS-1',\n          description: 'Read, represent, compare, and order whole numbers to 1000',\n          subject: 'Math',\n          gradeLevel: '3',\n          strand: 'Number Sense',\n        },\n      }),\n      prisma.curriculumExpectation.create({\n        data: {\n          id: 'expect-2',\n          code: 'SCI-3-UE-1',\n          description: 'Investigate the physical properties of soil',\n          subject: 'Science',\n          gradeLevel: '3',\n          strand: 'Understanding Earth',\n        },\n      }),\n    ]);\n\n    return { user, students, expectations };\n  },\n\n  /**\n   * Wait for async operations\n   */\n  waitForAsync: async (ms: number = 100) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  },\n};\n\n// Export test configuration\nexport const integrationTestConfig = {\n  timeout: 15000,\n  retries: 1,\n  bail: false,\n};\n"],"version":3}