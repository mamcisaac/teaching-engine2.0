{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/urlValidator.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/urlValidator.ts"],"sourcesContent":["/**\n * URL Validation Utilities for Security\n * Prevents SSRF attacks and validates external URLs\n */\n\nexport interface URLValidationOptions {\n  allowedDomains?: string[];\n  allowedProtocols?: string[];\n  allowPrivateIPs?: boolean;\n  maxRedirects?: number;\n}\n\n// Default safe configuration\nconst DEFAULT_OPTIONS: Required<URLValidationOptions> = {\n  allowedDomains: [\n    'curriculum.gov.bc.ca',\n    'www.princeedwardisland.ca',\n    'www.dcp.edu.gov.on.ca',\n    'edu.gov.on.ca',\n    'oercommons.org',\n    'www.khanacademy.org',\n    'www.readworks.org',\n  ],\n  allowedProtocols: ['https:', 'http:'],\n  allowPrivateIPs: false,\n  maxRedirects: 3,\n};\n\n/**\n * Validate if a URL is safe for external requests\n * Prevents SSRF attacks by checking domain whitelist and blocking private IPs\n */\nexport function isValidExternalURL(\n  urlString: string,\n  options: URLValidationOptions = {}\n): { valid: boolean; error?: string; url?: URL } {\n  const config = { ...DEFAULT_OPTIONS, ...options };\n\n  try {\n    const url = new URL(urlString);\n\n    // Check protocol\n    if (!config.allowedProtocols.includes(url.protocol)) {\n      return {\n        valid: false,\n        error: `Protocol ${url.protocol} not allowed. Only ${config.allowedProtocols.join(', ')} are permitted.`,\n      };\n    }\n\n    // Check if domain is in allowlist\n    const isAllowedDomain = config.allowedDomains.some((domain) => {\n      return url.hostname === domain || url.hostname.endsWith('.' + domain);\n    });\n\n    if (!isAllowedDomain) {\n      return {\n        valid: false,\n        error: `Domain ${url.hostname} not in allowlist. Only trusted educational domains are permitted.`,\n      };\n    }\n\n    // Check for private IP addresses if not allowed\n    if (!config.allowPrivateIPs && isPrivateIP(url.hostname)) {\n      return {\n        valid: false,\n        error: 'Private IP addresses are not allowed for security reasons.',\n      };\n    }\n\n    // Check for localhost/loopback\n    if (isLocalhost(url.hostname)) {\n      return {\n        valid: false,\n        error: 'Localhost and loopback addresses are not allowed for security reasons.',\n      };\n    }\n\n    return { valid: true, url };\n  } catch (error) {\n    return {\n      valid: false,\n      error: `Invalid URL format: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n\n/**\n * Check if hostname is a private IP address\n */\nfunction isPrivateIP(hostname: string): boolean {\n  // IPv4 private ranges\n  const ipv4PrivateRanges = [\n    /^10\\./,                    // 10.0.0.0/8\n    /^172\\.(1[6-9]|2[0-9]|3[0-1])\\./, // 172.16.0.0/12\n    /^192\\.168\\./,              // 192.168.0.0/16\n    /^169\\.254\\./,              // 169.254.0.0/16 (link-local)\n  ];\n\n  // IPv6 private ranges (simplified)\n  const ipv6PrivateRanges = [\n    /^fc00:/,                   // fc00::/7\n    /^fe80:/,                   // fe80::/10 (link-local)\n    /^::1$/,                    // ::1 (loopback)\n  ];\n\n  // Check IPv4\n  for (const range of ipv4PrivateRanges) {\n    if (range.test(hostname)) {\n      return true;\n    }\n  }\n\n  // Check IPv6\n  for (const range of ipv6PrivateRanges) {\n    if (range.test(hostname)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Check if hostname is localhost/loopback\n */\nfunction isLocalhost(hostname: string): boolean {\n  const localhostPatterns = [\n    'localhost',\n    '127.0.0.1',\n    '0.0.0.0',\n    '::1',\n    '0:0:0:0:0:0:0:1',\n  ];\n\n  return localhostPatterns.includes(hostname.toLowerCase());\n}\n\n/**\n * Sanitize URL input by removing dangerous characters\n */\nexport function sanitizeURL(url: string): string {\n  return url\n    .trim()\n    // eslint-disable-next-line no-control-regex\n    .replace(/[\\x00-\\x1f\\x7f-\\x9f]/g, '') // Remove control characters\n    .replace(/[<>\"'{}|\\\\^`]/g, '')        // Remove dangerous characters\n    .slice(0, 2048);                      // Limit length\n}\n\n/**\n * Safe fetch wrapper that validates URLs before making requests\n */\nexport async function safeFetch(\n  urlString: string,\n  init?: RequestInit,\n  options?: URLValidationOptions\n): Promise<Response> {\n  const sanitizedUrl = sanitizeURL(urlString);\n  const validation = isValidExternalURL(sanitizedUrl, options);\n\n  if (!validation.valid) {\n    throw new Error(`URL validation failed: ${validation.error}`);\n  }\n\n  // Add security headers\n  const headers = new Headers(init?.headers);\n  headers.set('User-Agent', 'Teaching Engine 2.0 Educational Bot (+https://teaching-engine.ca/bot)');\n  \n  // Set timeouts to prevent hanging requests\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n  try {\n    const response = await fetch(validation.url!, {\n      ...init,\n      headers,\n      signal: controller.signal,\n      // Prevent following redirects automatically for security\n      redirect: 'manual',\n    });\n\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    throw error;\n  }\n}\n\n/**\n * Validate file size from response headers before downloading\n */\nexport function validateFileSize(response: Response, maxSizeBytes: number = 50 * 1024 * 1024): boolean {\n  const contentLength = response.headers.get('content-length');\n  if (contentLength) {\n    const size = parseInt(contentLength, 10);\n    return size <= maxSizeBytes;\n  }\n  // If no content-length header, we'll need to check during download\n  return true;\n}\n\n/**\n * Get allowed domains for configuration display\n */\nexport function getAllowedDomains(): string[] {\n  return [...DEFAULT_OPTIONS.allowedDomains];\n}\n\n/**\n * Add allowed domain (for admin configuration)\n */\nexport function addAllowedDomain(domain: string): void {\n  if (!DEFAULT_OPTIONS.allowedDomains.includes(domain)) {\n    DEFAULT_OPTIONS.allowedDomains.push(domain);\n  }\n}\n\n/**\n * Remove allowed domain (for admin configuration)\n */\nexport function removeAllowedDomain(domain: string): void {\n  const index = DEFAULT_OPTIONS.allowedDomains.indexOf(domain);\n  if (index > -1) {\n    DEFAULT_OPTIONS.allowedDomains.splice(index, 1);\n  }\n}"],"version":3}