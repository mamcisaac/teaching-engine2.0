86d3d395fc392a3728dd24d2eb1eda3a
/* istanbul ignore next */
function cov_1a8b6g7ic1() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-expectations.ts";
  var hash = "be87e9d4bc2dba58f3935c243e0a77e267539778";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-expectations.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 23
        }
      },
      "1": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 47
        }
      },
      "2": {
        start: {
          line: 10,
          column: 27
        },
        end: {
          line: 10,
          column: 90
        }
      },
      "3": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 20
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 14,
          column: 40
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 40
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "10": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "11": {
        start: {
          line: 26,
          column: 39
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "12": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 29
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 31,
          column: 113
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "16": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 43
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "18": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 45
        }
      },
      "19": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 51
        }
      },
      "20": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 48,
          column: 8
        }
      },
      "21": {
        start: {
          line: 45,
          column: 94
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "22": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "24": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 22
        }
      },
      "25": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 17
        }
      },
      "26": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "27": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "28": {
        start: {
          line: 57,
          column: 17
        },
        end: {
          line: 57,
          column: 18
        }
      },
      "29": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 34
        }
      },
      "30": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 29
        }
      },
      "31": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 29
        }
      },
      "32": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 63,
          column: 17
        }
      },
      "33": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 17
        }
      },
      "34": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 62
        }
      },
      "35": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "36": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "37": {
        start: {
          line: 69,
          column: 51
        },
        end: {
          line: 69,
          column: 60
        }
      },
      "38": {
        start: {
          line: 70,
          column: 22
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "39": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "40": {
        start: {
          line: 73,
          column: 37
        },
        end: {
          line: 73,
          column: 73
        }
      },
      "41": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 75,
          column: 49
        }
      },
      "42": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 49
        }
      },
      "43": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "44": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 78,
          column: 45
        }
      },
      "45": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "46": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 42
        }
      },
      "47": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "48": {
        start: {
          line: 84,
          column: 36
        },
        end: {
          line: 84,
          column: 71
        }
      },
      "49": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 86,
          column: 47
        }
      },
      "50": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 47
        }
      },
      "51": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "52": {
        start: {
          line: 89,
          column: 36
        },
        end: {
          line: 89,
          column: 71
        }
      },
      "53": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "54": {
        start: {
          line: 92,
          column: 29
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "55": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 99,
          column: 18
        }
      },
      "56": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 109,
          column: 10
        }
      },
      "57": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 31
        }
      },
      "58": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "59": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 180,
          column: 3
        }
      },
      "60": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "61": {
        start: {
          line: 119,
          column: 88
        },
        end: {
          line: 119,
          column: 96
        }
      },
      "62": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "63": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "64": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "65": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 129,
          column: 91
        }
      },
      "66": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "67": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 100
        }
      },
      "68": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "69": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 94
        }
      },
      "70": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "71": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 144,
          column: 95
        }
      },
      "72": {
        start: {
          line: 146,
          column: 28
        },
        end: {
          line: 146,
          column: 41
        }
      },
      "73": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "74": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 99
        }
      },
      "75": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "76": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 96
        }
      },
      "77": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "78": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 101
        }
      },
      "79": {
        start: {
          line: 160,
          column: 28
        },
        end: {
          line: 174,
          column: 10
        }
      },
      "80": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 42
        }
      },
      "81": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "82": {
        start: {
          line: 182,
          column: 0
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "83": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "84": {
        start: {
          line: 185,
          column: 26
        },
        end: {
          line: 185,
          column: 91
        }
      },
      "85": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "86": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 84
        }
      },
      "87": {
        start: {
          line: 189,
          column: 88
        },
        end: {
          line: 189,
          column: 96
        }
      },
      "88": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "89": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 194,
          column: 91
        }
      },
      "90": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "91": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 200,
          column: 100
        }
      },
      "92": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "93": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 205,
          column: 94
        }
      },
      "94": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "95": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 210,
          column: 95
        }
      },
      "96": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "97": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 40
        }
      },
      "98": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "99": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 103
        }
      },
      "100": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "101": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 224,
          column: 96
        }
      },
      "102": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "103": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 231,
          column: 101
        }
      },
      "104": {
        start: {
          line: 233,
          column: 28
        },
        end: {
          line: 248,
          column: 10
        }
      },
      "105": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 30
        }
      },
      "106": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 19
        }
      },
      "107": {
        start: {
          line: 256,
          column: 0
        },
        end: {
          line: 271,
          column: 3
        }
      },
      "108": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 270,
          column: 5
        }
      },
      "109": {
        start: {
          line: 259,
          column: 26
        },
        end: {
          line: 259,
          column: 91
        }
      },
      "110": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "111": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 84
        }
      },
      "112": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "113": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 31
        }
      },
      "114": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 19
        }
      },
      "115": {
        start: {
          line: 273,
          column: 0
        },
        end: {
          line: 314,
          column: 3
        }
      },
      "116": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "117": {
        start: {
          line: 276,
          column: 26
        },
        end: {
          line: 276,
          column: 91
        }
      },
      "118": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "119": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 84
        }
      },
      "120": {
        start: {
          line: 280,
          column: 28
        },
        end: {
          line: 305,
          column: 10
        }
      },
      "121": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "122": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 87
        }
      },
      "123": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 30
        }
      },
      "124": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 19
        }
      },
      "125": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 364,
          column: 3
        }
      },
      "126": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 363,
          column: 5
        }
      },
      "127": {
        start: {
          line: 318,
          column: 47
        },
        end: {
          line: 318,
          column: 55
        }
      },
      "128": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "129": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 72
        }
      },
      "130": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "131": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 66
        }
      },
      "132": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 87
        }
      },
      "133": {
        start: {
          line: 331,
          column: 25
        },
        end: {
          line: 333,
          column: 20
        }
      },
      "134": {
        start: {
          line: 334,
          column: 26
        },
        end: {
          line: 341,
          column: 13
        }
      },
      "135": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 346,
          column: 13
        }
      },
      "136": {
        start: {
          line: 343,
          column: 41
        },
        end: {
          line: 343,
          column: 77
        }
      },
      "137": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 345,
          column: 53
        }
      },
      "138": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 53
        }
      },
      "139": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "140": {
        start: {
          line: 348,
          column: 36
        },
        end: {
          line: 348,
          column: 57
        }
      },
      "141": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 351,
          column: 17
        }
      },
      "142": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 46
        }
      },
      "143": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 357,
          column: 15
        }
      },
      "144": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 26
        }
      },
      "145": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 19
        }
      },
      "146": {
        start: {
          line: 366,
          column: 0
        },
        end: {
          line: 384,
          column: 3
        }
      },
      "147": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 383,
          column: 5
        }
      },
      "148": {
        start: {
          line: 368,
          column: 53
        },
        end: {
          line: 368,
          column: 61
        }
      },
      "149": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "150": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 87
        }
      },
      "151": {
        start: {
          line: 374,
          column: 25
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "152": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 27
        }
      },
      "153": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 19
        }
      },
      "154": {
        start: {
          line: 386,
          column: 0
        },
        end: {
          line: 470,
          column: 3
        }
      },
      "155": {
        start: {
          line: 387,
          column: 4
        },
        end: {
          line: 469,
          column: 5
        }
      },
      "156": {
        start: {
          line: 388,
          column: 23
        },
        end: {
          line: 388,
          column: 40
        }
      },
      "157": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "158": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 67
        }
      },
      "159": {
        start: {
          line: 392,
          column: 55
        },
        end: {
          line: 392,
          column: 64
        }
      },
      "160": {
        start: {
          line: 394,
          column: 34
        },
        end: {
          line: 394,
          column: 36
        }
      },
      "161": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 396,
          column: 56
        }
      },
      "162": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 56
        }
      },
      "163": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 398,
          column: 52
        }
      },
      "164": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 52
        }
      },
      "165": {
        start: {
          line: 399,
          column: 32
        },
        end: {
          line: 407,
          column: 10
        }
      },
      "166": {
        start: {
          line: 409,
          column: 33
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "167": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "168": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 413,
          column: 39
        }
      },
      "169": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 415,
          column: 72
        }
      },
      "170": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 72
        }
      },
      "171": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 417,
          column: 70
        }
      },
      "172": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 70
        }
      },
      "173": {
        start: {
          line: 419,
          column: 36
        },
        end: {
          line: 442,
          column: 10
        }
      },
      "174": {
        start: {
          line: 444,
          column: 27
        },
        end: {
          line: 444,
          column: 85
        }
      },
      "175": {
        start: {
          line: 444,
          column: 67
        },
        end: {
          line: 444,
          column: 83
        }
      },
      "176": {
        start: {
          line: 445,
          column: 25
        },
        end: {
          line: 454,
          column: 9
        }
      },
      "177": {
        start: {
          line: 452,
          column: 53
        },
        end: {
          line: 452,
          column: 74
        }
      },
      "178": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "179": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 459,
          column: 13
        }
      },
      "180": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 73
        }
      },
      "181": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 50
        }
      },
      "182": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 463,
          column: 13
        }
      },
      "183": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 56
        }
      },
      "184": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 27
        }
      },
      "185": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "semanticSearch",
        decl: {
          start: {
            line: 8,
            column: 15
          },
          end: {
            line: 8,
            column: 29
          }
        },
        loc: {
          start: {
            line: 8,
            column: 53
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 13
          },
          end: {
            line: 27,
            column: 14
          }
        },
        loc: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        },
        loc: {
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 41,
            column: 45
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 14
          },
          end: {
            line: 42,
            column: 15
          }
        },
        loc: {
          start: {
            line: 42,
            column: 24
          },
          end: {
            line: 42,
            column: 51
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 42
          },
          end: {
            line: 45,
            column: 43
          }
        },
        loc: {
          start: {
            line: 45,
            column: 94
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 45
      },
      "5": {
        name: "cosineSimilarity",
        decl: {
          start: {
            line: 51,
            column: 9
          },
          end: {
            line: 51,
            column: 25
          }
        },
        loc: {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 51
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 17
          }
        },
        loc: {
          start: {
            line: 67,
            column: 43
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 67
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 117,
            column: 17
          },
          end: {
            line: 117,
            column: 18
          }
        },
        loc: {
          start: {
            line: 117,
            column: 44
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 117
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 182,
            column: 19
          },
          end: {
            line: 182,
            column: 20
          }
        },
        loc: {
          start: {
            line: 182,
            column: 46
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 182
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 256,
            column: 22
          },
          end: {
            line: 256,
            column: 23
          }
        },
        loc: {
          start: {
            line: 256,
            column: 49
          },
          end: {
            line: 271,
            column: 1
          }
        },
        line: 256
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 273,
            column: 19
          },
          end: {
            line: 273,
            column: 20
          }
        },
        loc: {
          start: {
            line: 273,
            column: 46
          },
          end: {
            line: 314,
            column: 1
          }
        },
        line: 273
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 316,
            column: 23
          },
          end: {
            line: 316,
            column: 24
          }
        },
        loc: {
          start: {
            line: 316,
            column: 50
          },
          end: {
            line: 364,
            column: 1
          }
        },
        line: 316
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 366,
            column: 24
          },
          end: {
            line: 366,
            column: 25
          }
        },
        loc: {
          start: {
            line: 366,
            column: 51
          },
          end: {
            line: 384,
            column: 1
          }
        },
        line: 366
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 386,
            column: 31
          },
          end: {
            line: 386,
            column: 32
          }
        },
        loc: {
          start: {
            line: 386,
            column: 58
          },
          end: {
            line: 470,
            column: 1
          }
        },
        line: 386
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 444,
            column: 59
          },
          end: {
            line: 444,
            column: 60
          }
        },
        loc: {
          start: {
            line: 444,
            column: 67
          },
          end: {
            line: 444,
            column: 83
          }
        },
        line: 444
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 452,
            column: 46
          },
          end: {
            line: 452,
            column: 47
          }
        },
        loc: {
          start: {
            line: 452,
            column: 53
          },
          end: {
            line: 452,
            column: 74
          }
        },
        line: 452
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 14,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 14,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 16,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 16,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 18,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 18,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 48
          },
          end: {
            line: 31,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 48
          },
          end: {
            line: 31,
            column: 73
          }
        }, {
          start: {
            line: 31,
            column: 77
          },
          end: {
            line: 31,
            column: 79
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 53,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 53,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 63,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 63,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 19
          }
        }, {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 34
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "10": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 19
          }
        }, {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 50
          }
        }],
        line: 72
      },
      "11": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 75,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 75,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "12": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "13": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "14": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 35
          }
        }, {
          start: {
            line: 79,
            column: 39
          },
          end: {
            line: 79,
            column: 55
          }
        }, {
          start: {
            line: 79,
            column: 59
          },
          end: {
            line: 79,
            column: 76
          }
        }],
        line: 79
      },
      "15": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "16": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 18
          }
        }, {
          start: {
            line: 83,
            column: 22
          },
          end: {
            line: 83,
            column: 48
          }
        }],
        line: 83
      },
      "17": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "18": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "19": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 18
          }
        }, {
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 48
          }
        }],
        line: 88
      },
      "20": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "21": {
        loc: {
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 94,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 22
          },
          end: {
            line: 93,
            column: 45
          }
        }, {
          start: {
            line: 94,
            column: 22
          },
          end: {
            line: 94,
            column: 24
          }
        }],
        line: 92
      },
      "22": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "23": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 17
          }
        }, {
          start: {
            line: 120,
            column: 21
          },
          end: {
            line: 120,
            column: 33
          }
        }, {
          start: {
            line: 120,
            column: 37
          },
          end: {
            line: 120,
            column: 44
          }
        }, {
          start: {
            line: 120,
            column: 48
          },
          end: {
            line: 120,
            column: 54
          }
        }, {
          start: {
            line: 120,
            column: 58
          },
          end: {
            line: 120,
            column: 66
          }
        }],
        line: 120
      },
      "24": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "25": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 126,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 126,
            column: 36
          }
        }, {
          start: {
            line: 126,
            column: 40
          },
          end: {
            line: 126,
            column: 56
          }
        }, {
          start: {
            line: 126,
            column: 60
          },
          end: {
            line: 126,
            column: 75
          }
        }],
        line: 126
      },
      "26": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "27": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 43
          }
        }, {
          start: {
            line: 131,
            column: 47
          },
          end: {
            line: 131,
            column: 72
          }
        }, {
          start: {
            line: 131,
            column: 76
          },
          end: {
            line: 131,
            column: 98
          }
        }],
        line: 131
      },
      "28": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "29": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 38
          }
        }, {
          start: {
            line: 136,
            column: 42
          },
          end: {
            line: 136,
            column: 61
          }
        }, {
          start: {
            line: 136,
            column: 65
          },
          end: {
            line: 136,
            column: 82
          }
        }],
        line: 136
      },
      "30": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "31": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 39
          }
        }, {
          start: {
            line: 141,
            column: 43
          },
          end: {
            line: 141,
            column: 63
          }
        }, {
          start: {
            line: 141,
            column: 67
          },
          end: {
            line: 141,
            column: 85
          }
        }],
        line: 141
      },
      "32": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "33": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 30
          }
        }, {
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 49
          }
        }, {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 147,
            column: 69
          }
        }],
        line: 147
      },
      "34": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "35": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 21
          }
        }, {
          start: {
            line: 150,
            column: 26
          },
          end: {
            line: 150,
            column: 55
          }
        }, {
          start: {
            line: 150,
            column: 59
          },
          end: {
            line: 150,
            column: 81
          }
        }],
        line: 150
      },
      "36": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "37": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 25
          }
        }, {
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 63
          }
        }, {
          start: {
            line: 155,
            column: 67
          },
          end: {
            line: 155,
            column: 94
          }
        }],
        line: 155
      },
      "38": {
        loc: {
          start: {
            line: 165,
            column: 27
          },
          end: {
            line: 165,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 27
          },
          end: {
            line: 165,
            column: 44
          }
        }, {
          start: {
            line: 165,
            column: 48
          },
          end: {
            line: 165,
            column: 52
          }
        }],
        line: 165
      },
      "39": {
        loc: {
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 168,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 31
          },
          end: {
            line: 168,
            column: 52
          }
        }, {
          start: {
            line: 168,
            column: 56
          },
          end: {
            line: 168,
            column: 60
          }
        }],
        line: 168
      },
      "40": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "41": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "42": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 16
          }
        }, {
          start: {
            line: 191,
            column: 21
          },
          end: {
            line: 191,
            column: 45
          }
        }, {
          start: {
            line: 191,
            column: 49
          },
          end: {
            line: 191,
            column: 65
          }
        }, {
          start: {
            line: 191,
            column: 69
          },
          end: {
            line: 191,
            column: 84
          }
        }],
        line: 191
      },
      "43": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "44": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 197,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 196,
            column: 23
          }
        }, {
          start: {
            line: 197,
            column: 13
          },
          end: {
            line: 197,
            column: 44
          }
        }, {
          start: {
            line: 197,
            column: 48
          },
          end: {
            line: 197,
            column: 73
          }
        }, {
          start: {
            line: 197,
            column: 77
          },
          end: {
            line: 197,
            column: 99
          }
        }],
        line: 196
      },
      "45": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "46": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 202,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 202,
            column: 18
          }
        }, {
          start: {
            line: 202,
            column: 23
          },
          end: {
            line: 202,
            column: 49
          }
        }, {
          start: {
            line: 202,
            column: 53
          },
          end: {
            line: 202,
            column: 72
          }
        }, {
          start: {
            line: 202,
            column: 76
          },
          end: {
            line: 202,
            column: 93
          }
        }],
        line: 202
      },
      "47": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "48": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 19
          }
        }, {
          start: {
            line: 207,
            column: 24
          },
          end: {
            line: 207,
            column: 51
          }
        }, {
          start: {
            line: 207,
            column: 55
          },
          end: {
            line: 207,
            column: 75
          }
        }, {
          start: {
            line: 207,
            column: 79
          },
          end: {
            line: 207,
            column: 97
          }
        }],
        line: 207
      },
      "49": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "50": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "51": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 34
          }
        }, {
          start: {
            line: 215,
            column: 38
          },
          end: {
            line: 215,
            column: 53
          }
        }, {
          start: {
            line: 215,
            column: 57
          },
          end: {
            line: 215,
            column: 73
          }
        }],
        line: 215
      },
      "52": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "53": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 35
          }
        }, {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 220,
            column: 30
          }
        }, {
          start: {
            line: 221,
            column: 13
          },
          end: {
            line: 221,
            column: 42
          }
        }, {
          start: {
            line: 221,
            column: 46
          },
          end: {
            line: 221,
            column: 68
          }
        }],
        line: 219
      },
      "54": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "55": {
        loc: {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 228,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 226,
            column: 39
          }
        }, {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 34
          }
        }, {
          start: {
            line: 228,
            column: 13
          },
          end: {
            line: 228,
            column: 46
          }
        }, {
          start: {
            line: 228,
            column: 50
          },
          end: {
            line: 228,
            column: 77
          }
        }],
        line: 226
      },
      "56": {
        loc: {
          start: {
            line: 236,
            column: 20
          },
          end: {
            line: 236,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 20
          },
          end: {
            line: 236,
            column: 24
          }
        }, {
          start: {
            line: 236,
            column: 28
          },
          end: {
            line: 236,
            column: 49
          }
        }],
        line: 236
      },
      "57": {
        loc: {
          start: {
            line: 237,
            column: 20
          },
          end: {
            line: 237,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 20
          },
          end: {
            line: 237,
            column: 31
          }
        }, {
          start: {
            line: 237,
            column: 35
          },
          end: {
            line: 237,
            column: 70
          }
        }],
        line: 237
      },
      "58": {
        loc: {
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 26
          }
        }, {
          start: {
            line: 238,
            column: 30
          },
          end: {
            line: 238,
            column: 55
          }
        }],
        line: 238
      },
      "59": {
        loc: {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 239,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 239,
            column: 43
          }
        }, {
          start: {
            line: 239,
            column: 47
          },
          end: {
            line: 239,
            column: 87
          }
        }],
        line: 239
      },
      "60": {
        loc: {
          start: {
            line: 239,
            column: 60
          },
          end: {
            line: 239,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 60
          },
          end: {
            line: 239,
            column: 77
          }
        }, {
          start: {
            line: 239,
            column: 81
          },
          end: {
            line: 239,
            column: 85
          }
        }],
        line: 239
      },
      "61": {
        loc: {
          start: {
            line: 240,
            column: 20
          },
          end: {
            line: 240,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 20
          },
          end: {
            line: 240,
            column: 45
          }
        }, {
          start: {
            line: 240,
            column: 49
          },
          end: {
            line: 240,
            column: 71
          }
        }],
        line: 240
      },
      "62": {
        loc: {
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 241,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 241,
            column: 27
          }
        }, {
          start: {
            line: 241,
            column: 31
          },
          end: {
            line: 241,
            column: 58
          }
        }],
        line: 241
      },
      "63": {
        loc: {
          start: {
            line: 242,
            column: 20
          },
          end: {
            line: 242,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 20
          },
          end: {
            line: 242,
            column: 47
          }
        }, {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 242,
            column: 99
          }
        }],
        line: 242
      },
      "64": {
        loc: {
          start: {
            line: 242,
            column: 68
          },
          end: {
            line: 242,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 68
          },
          end: {
            line: 242,
            column: 89
          }
        }, {
          start: {
            line: 242,
            column: 93
          },
          end: {
            line: 242,
            column: 97
          }
        }],
        line: 242
      },
      "65": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "66": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "67": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "68": {
        loc: {
          start: {
            line: 318,
            column: 23
          },
          end: {
            line: 318,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 318,
            column: 31
          },
          end: {
            line: 318,
            column: 33
          }
        }],
        line: 318
      },
      "69": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "70": {
        loc: {
          start: {
            line: 331,
            column: 25
          },
          end: {
            line: 333,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 18
          },
          end: {
            line: 332,
            column: 41
          }
        }, {
          start: {
            line: 333,
            column: 18
          },
          end: {
            line: 333,
            column: 20
          }
        }],
        line: 331
      },
      "71": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 346,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 346,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "72": {
        loc: {
          start: {
            line: 342,
            column: 16
          },
          end: {
            line: 342,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 16
          },
          end: {
            line: 342,
            column: 32
          }
        }, {
          start: {
            line: 342,
            column: 36
          },
          end: {
            line: 342,
            column: 71
          }
        }],
        line: 342
      },
      "73": {
        loc: {
          start: {
            line: 344,
            column: 16
          },
          end: {
            line: 345,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 16
          },
          end: {
            line: 345,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "74": {
        loc: {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "75": {
        loc: {
          start: {
            line: 349,
            column: 16
          },
          end: {
            line: 351,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 16
          },
          end: {
            line: 351,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "76": {
        loc: {
          start: {
            line: 349,
            column: 20
          },
          end: {
            line: 349,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 20
          },
          end: {
            line: 349,
            column: 39
          }
        }, {
          start: {
            line: 349,
            column: 43
          },
          end: {
            line: 349,
            column: 59
          }
        }, {
          start: {
            line: 349,
            column: 63
          },
          end: {
            line: 349,
            column: 80
          }
        }],
        line: 349
      },
      "77": {
        loc: {
          start: {
            line: 368,
            column: 32
          },
          end: {
            line: 368,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 368,
            column: 47
          },
          end: {
            line: 368,
            column: 48
          }
        }],
        line: 368
      },
      "78": {
        loc: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "79": {
        loc: {
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 369,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 369,
            column: 27
          }
        }, {
          start: {
            line: 369,
            column: 31
          },
          end: {
            line: 369,
            column: 61
          }
        }],
        line: 369
      },
      "80": {
        loc: {
          start: {
            line: 388,
            column: 23
          },
          end: {
            line: 388,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 23
          },
          end: {
            line: 388,
            column: 35
          }
        }, {
          start: {
            line: 388,
            column: 39
          },
          end: {
            line: 388,
            column: 40
          }
        }],
        line: 388
      },
      "81": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "82": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 396,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 396,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "83": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 398,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 398,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "84": {
        loc: {
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 412
      },
      "85": {
        loc: {
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 412,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 412,
            column: 21
          }
        }, {
          start: {
            line: 412,
            column: 25
          },
          end: {
            line: 412,
            column: 32
          }
        }],
        line: 412
      },
      "86": {
        loc: {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 415,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 415,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "87": {
        loc: {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 417,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 417,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "88": {
        loc: {
          start: {
            line: 448,
            column: 24
          },
          end: {
            line: 450,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 449,
            column: 18
          },
          end: {
            line: 449,
            column: 78
          }
        }, {
          start: {
            line: 450,
            column: 18
          },
          end: {
            line: 450,
            column: 19
          }
        }],
        line: 448
      },
      "89": {
        loc: {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "90": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0, 0, 0],
      "24": [0, 0],
      "25": [0, 0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0, 0],
      "30": [0, 0],
      "31": [0, 0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0, 0],
      "43": [0, 0],
      "44": [0, 0, 0, 0],
      "45": [0, 0],
      "46": [0, 0, 0, 0],
      "47": [0, 0],
      "48": [0, 0, 0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0, 0],
      "52": [0, 0],
      "53": [0, 0, 0, 0],
      "54": [0, 0],
      "55": [0, 0, 0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0, 0],
      "77": [0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-expectations.ts",
      mappings: "AAAA,OAAO,EAAE,MAAM,EAAW,MAAM,SAAS,CAAC;AAE1C,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEhE,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,+BAA+B;AAC/B,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC;AAEhD,kCAAkC;AAClC,KAAK,UAAU,cAAc,CAC3B,KAAa,EACb,KAAa,EACb,OAA+D;IAE/D,0CAA0C;IAC1C,MAAM,cAAc,GAAG,MAAM,gBAAgB,CAAC,iBAAiB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAEvF,0CAA0C;IAC1C,MAAM,KAAK,GAA2C,EAAE,CAAC;IACzD,IAAI,OAAO,EAAE,OAAO;QAAE,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACtD,IAAI,OAAO,EAAE,KAAK;QAAE,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAChD,IAAI,OAAO,EAAE,MAAM;QAAE,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAEnD,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC;QAClE,KAAK;QACL,OAAO,EAAE;YACP,SAAS,EAAE,IAAI;SAChB;KACF,CAAC,CAAC;IAEH,+CAA+C;IAC/C,MAAM,0BAA0B,GAAG,eAAe;SAC/C,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;QACnB,qDAAqD;QACrD,IAAI,aAAa,GAAG,CAAC,CAAC;QAEtB,IAAI,WAAW,CAAC,SAAS,EAAE,CAAC;YAC1B,MAAM,UAAU,GAAG,gBAAgB,CACjC,cAAc,EAAE,SAAS,IAAI,EAAE,EAC/B,WAAW,CAAC,SAAS,CAAC,SAAqB,CAC5C,CAAC;YACF,IAAI,UAAU,GAAG,aAAa,EAAE,CAAC;gBAC/B,aAAa,GAAG,UAAU,CAAC;YAC7B,CAAC;QACH,CAAC;QAED,OAAO;YACL,GAAG,WAAW;YACd,UAAU,EAAE,aAAa;SAC1B,CAAC;IACJ,CAAC,CAAC;SACD,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,+BAA+B;SACrE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;SAC3C,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAEnB,kCAAkC;IAClC,OAAO,0BAA0B,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;QACxF,GAAG,GAAG;QACN,WAAW,EAAE,UAAU;KACxB,CAAC,CAAC,CAAC;AACN,CAAC;AAED,gCAAgC;AAChC,SAAS,gBAAgB,CAAC,CAAW,EAAE,CAAW;IAChD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM;QAAE,OAAO,CAAC,CAAC;IAEpC,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAClC,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrB,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IAED,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC;IAEzC,OAAO,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED,0DAA0D;AAC1D,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACjD,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAErD,MAAM,KAAK,GAA2C,EAAE,CAAC;QAEzD,yCAAyC;QACzC,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAC3C,MAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,IAAI,gBAAgB;gBAAE,KAAK,CAAC,OAAO,GAAG,gBAAgB,CAAC;QACzD,CAAC;QAED,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,WAAW,IAAI,EAAE,EAAE,CAAC;gBACjE,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YACzC,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAC5D,IAAI,eAAe;gBAAE,KAAK,CAAC,MAAM,GAAG,eAAe,CAAC;QACtD,CAAC;QACD,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YACzC,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAC5D,IAAI,eAAe,EAAE,CAAC;gBACpB,4CAA4C;gBAC5C,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC;oBAC3D,CAAC,CAAC,EAAE,IAAI,EAAE,aAAsB,EAAE;oBAClC,CAAC,CAAC,EAAE,CAAC;gBAEP,KAAK,CAAC,EAAE,GAAG;oBACT,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,IAAI,EAAE,EAAE;oBAChD,EAAE,WAAW,EAAE,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,IAAI,EAAE,EAAE;oBACvD,EAAE,aAAa,EAAE,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,IAAI,EAAE,EAAE;iBAC1D,CAAC;YACJ,CAAC;QACH,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC;YAC/D,KAAK;YACL,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;YACnF,OAAO,EAAE;gBACP,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;gBAC1E,WAAW,EAAE,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;aAC/E;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,sCAAsC;AACtC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAClD,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEzF,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,oEAAoE;aAC5E,CAAC,CAAC;QACL,CAAC;QAED,6BAA6B;QAC7B,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpE,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,wDAAwD,EAAE,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,CAAC,MAAM,GAAG,IAAI,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3F,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,iEAAiE,EAAE,CAAC,CAAC;QACxF,CAAC;QAED,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3E,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,2DAA2D,EAAE,CAAC,CAAC;QAClF,CAAC;QAED,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9E,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,4DAA4D,EAAE,CAAC,CAAC;QACnF,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,WAAW,GAAG,CAAC,IAAI,WAAW,GAAG,EAAE,EAAE,CAAC;YAC9D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8CAA8C,EAAE,CAAC,CAAC;QACzF,CAAC;QAED,IAAI,SAAS,IAAI,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE,CAAC;YAC3E,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,6DAA6D,EAAE,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,aAAa,IAAI,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;YACxF,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,kEAAkE,EAAE,CAAC,CAAC;QACzF,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC;YAC5D,IAAI,EAAE;gBACJ,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;gBACjB,WAAW,EAAE,WAAW,CAAC,IAAI,EAAE;gBAC/B,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE;gBACrB,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,IAAI;gBACpC,KAAK,EAAE,WAAW;gBAClB,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE;gBACvB,aAAa,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,IAAI;aAC7C;YACD,OAAO,EAAE;gBACP,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;gBAC1E,WAAW,EAAE,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;aAC/E;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kCAAkC;AAClC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,SAAS,GAAG,iEAAiE,CAAC;QACpF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,+BAA+B,EAAE,CAAC,CAAC;QAC1E,CAAC;QAED,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEzF,mCAAmC;QACnC,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;YAC9E,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,wDAAwD,EAAE,CAAC,CAAC;QAC/E,CAAC;QAED,IACE,WAAW;YACX,CAAC,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,CAAC,MAAM,GAAG,IAAI,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EACxF,CAAC;YACD,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,iEAAiE,EAAE,CAAC,CAAC;QACxF,CAAC;QAED,IAAI,MAAM,IAAI,CAAC,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;YACvF,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,2DAA2D,EAAE,CAAC,CAAC;QAClF,CAAC;QAED,IAAI,OAAO,IAAI,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;YAC3F,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,4DAA4D,EAAE,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,WAA+B,CAAC;QACpC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,WAAW,GAAG,CAAC,IAAI,WAAW,GAAG,EAAE,EAAE,CAAC;gBAC9D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8CAA8C,EAAE,CAAC,CAAC;YACzF,CAAC;QACH,CAAC;QAED,IACE,SAAS,KAAK,SAAS;YACvB,SAAS,KAAK,IAAI;YAClB,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,MAAM,GAAG,GAAG,CAAC,EACzD,CAAC;YACD,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,6DAA6D,EAAE,CAAC,CAAC;QACpF,CAAC;QAED,IACE,aAAa,KAAK,SAAS;YAC3B,aAAa,KAAK,IAAI;YACtB,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,EAClE,CAAC;YACD,OAAO,GAAG;iBACP,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,KAAK,EAAE,kEAAkE,EAAE,CAAC,CAAC;QACzF,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC;YAC5D,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;YAC5B,IAAI,EAAE;gBACJ,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;gBAClC,GAAG,CAAC,WAAW,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;gBACvD,GAAG,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;gBACxC,GAAG,CAAC,SAAS,KAAK,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;gBACxE,GAAG,CAAC,WAAW,KAAK,SAAS,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;gBACxD,GAAG,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;gBAC3C,GAAG,CAAC,aAAa,KAAK,SAAS,IAAI,EAAE,aAAa,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;aACrF;YACD,OAAO,EAAE;gBACP,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;gBAC1E,WAAW,EAAE,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;aAC/E;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,kCAAkC;AAClC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACvD,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,SAAS,GAAG,iEAAiE,CAAC;QACpF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,+BAA+B,EAAE,CAAC,CAAC;QAC1E,CAAC;QAED,MAAM,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC;YACxC,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;SAC7B,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,sCAAsC;AACtC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACpD,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,SAAS,GAAG,iEAAiE,CAAC;QACpF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,+BAA+B,EAAE,CAAC,CAAC;QAC1E,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,UAAU,CAAC;YAChE,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;YAC5B,OAAO,EAAE;gBACP,SAAS,EAAE;oBACT,OAAO,EAAE;wBACP,QAAQ,EAAE;4BACR,OAAO,EAAE;gCACP,aAAa,EAAE,IAAI;gCACnB,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE;6BAC1C;yBACF;qBACF;iBACF;gBACD,WAAW,EAAE;oBACX,OAAO,EAAE;wBACP,UAAU,EAAE;4BACV,OAAO,EAAE;gCACP,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;gCAC/C,YAAY,EAAE,IAAI;6BACnB;yBACF;qBACF;iBACF;gBACD,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,CAAC,CAAC;QAC7E,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,uEAAuE;AACvE,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACxD,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,KAAK,GAAG,EAAE,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEhD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,CAAC;QAC9D,CAAC;QAED,sEAAsE;QACtE,IAAI,OAAO,CAAC;QAEZ,IAAI,CAAC;YACH,2CAA2C;YAC3C,OAAO,GAAG,MAAM,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,sDAAsD,EAAE,KAAK,CAAC,CAAC;YAE3E,sEAAsE;YACtE,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC;gBAC3D,CAAC,CAAC,EAAE,IAAI,EAAE,aAAsB,EAAE;gBAClC,CAAC,CAAC,EAAE,CAAC;YAEP,MAAM,KAAK,GAA2C;gBACpD,EAAE,EAAE;oBACF,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;oBACtC,EAAE,WAAW,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;oBAC7C,EAAE,aAAa,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;oBAC/C,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;iBACzC;aACF,CAAC;YAEF,IAAI,OAAO,EAAE,OAAO,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;gBAC5D,MAAM,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC9D,IAAI,gBAAgB;oBAAE,KAAK,CAAC,OAAO,GAAG,gBAAgB,CAAC;YACzD,CAAC;YACD,IAAI,OAAO,EAAE,KAAK,EAAE,CAAC;gBACnB,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,WAAW,IAAI,EAAE,EAAE,CAAC;oBACjE,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,OAAO,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC;gBACpD,KAAK;gBACL,IAAI,EAAE,KAAK;gBACX,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;aACzB,CAAC,CAAC;QACL,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,6DAA6D;AAC7D,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACzD,IAAI,CAAC;QACH,MAAM,EAAE,cAAc,EAAE,YAAY,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEtD,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC;YACtD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,CAAC,CAAC;QAC7E,CAAC;QAED,iEAAiE;QACjE,+DAA+D;QAC/D,MAAM,QAAQ,GAAG;YACf,OAAO,EACL,uFAAuF;YACzF,cAAc;YACd,YAAY;SACb,CAAC;QAEF,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,iCAAiC;AACjC,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAChE,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAEzD,uCAAuC;QACvC,MAAM,iBAAiB,GAA2C,EAAE,CAAC;QACrE,IAAI,OAAO;YAAE,iBAAiB,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;QACzD,IAAI,KAAK;YAAE,iBAAiB,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAEnD,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,QAAQ,CAAC;YAClE,KAAK,EAAE,iBAAiB;YACxB,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,IAAI,EAAE,IAAI;gBACV,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,IAAI;aACb;SACF,CAAC,CAAC;QAEH,gDAAgD;QAChD,MAAM,gBAAgB,GAAoC;YACxD,MAAM;SACP,CAAC;QAEF,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;YACzB,gBAAgB,CAAC,IAAI,GAAG,EAAE,CAAC;YAC3B,IAAI,SAAS;gBAAE,gBAAgB,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACvE,IAAI,OAAO;gBAAE,gBAAgB,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,mBAAmB,GAAG,MAAM,MAAM,CAAC,yBAAyB,CAAC,QAAQ,CAAC;YAC1E,KAAK,EAAE;gBACL,UAAU,EAAE,gBAAgB;gBAC5B,WAAW,EAAE,iBAAiB;aAC/B;YACD,MAAM,EAAE;gBACN,aAAa,EAAE,IAAI;gBACnB,WAAW,EAAE;oBACX,MAAM,EAAE;wBACN,EAAE,EAAE,IAAI;wBACR,IAAI,EAAE,IAAI;wBACV,WAAW,EAAE,IAAI;wBACjB,MAAM,EAAE,IAAI;qBACb;iBACF;gBACD,UAAU,EAAE;oBACV,MAAM,EAAE;wBACN,EAAE,EAAE,IAAI;wBACR,KAAK,EAAE,IAAI;wBACX,IAAI,EAAE,IAAI;qBACX;iBACF;aACF;SACF,CAAC,CAAC;QAEH,gCAAgC;QAChC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QAC9E,MAAM,QAAQ,GAAG;YACf,KAAK,EAAE,eAAe,CAAC,MAAM;YAC7B,OAAO,EAAE,UAAU,CAAC,IAAI;YACxB,UAAU,EACR,eAAe,CAAC,MAAM,GAAG,CAAC;gBACxB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;gBAC9D,CAAC,CAAC,CAAC;YACP,QAAQ,EAAE,EAAwD;YAClE,SAAS,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC/D,OAAO,EAAE,mBAAmB;SAC7B,CAAC;QAEF,+BAA+B;QAC/B,KAAK,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBACnC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;YAC3D,CAAC;YACD,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;YACtC,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;gBAC3B,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAC1C,CAAC;QACH,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,eAAe,MAAM,CAAC",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculum-expectations.ts"],
      sourcesContent: ["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { EmbeddingService } from '../services/embeddingService';\n\nconst router = Router();\n\n// Initialize embedding service\nconst embeddingService = new EmbeddingService();\n\n// Semantic search helper function\nasync function semanticSearch(\n  query: string,\n  limit: number,\n  filters?: { subject?: string; grade?: number; strand?: string },\n) {\n  // Generate embedding for the search query\n  const queryEmbedding = await embeddingService.generateEmbedding('search-query', query);\n\n  // Get all expectations that match filters\n  const where: Prisma.CurriculumExpectationWhereInput = {};\n  if (filters?.subject) where.subject = filters.subject;\n  if (filters?.grade) where.grade = filters.grade;\n  if (filters?.strand) where.strand = filters.strand;\n\n  const allExpectations = await prisma.curriculumExpectation.findMany({\n    where,\n    include: {\n      embedding: true,\n    },\n  });\n\n  // Calculate similarities and sort by relevance\n  const expectationsWithSimilarity = allExpectations\n    .map((expectation) => {\n      // Find the best embedding match for this expectation\n      let maxSimilarity = 0;\n\n      if (expectation.embedding) {\n        const similarity = cosineSimilarity(\n          queryEmbedding?.embedding || [],\n          expectation.embedding.embedding as number[],\n        );\n        if (similarity > maxSimilarity) {\n          maxSimilarity = similarity;\n        }\n      }\n\n      return {\n        ...expectation,\n        similarity: maxSimilarity,\n      };\n    })\n    .filter((exp) => exp.similarity > 0.3) // Minimum similarity threshold\n    .sort((a, b) => b.similarity - a.similarity)\n    .slice(0, limit);\n\n  // Remove embeddings from response\n  return expectationsWithSimilarity.map(({ embedding: _embedding, similarity, ...exp }) => ({\n    ...exp,\n    _similarity: similarity,\n  }));\n}\n\n// Cosine similarity calculation\nfunction cosineSimilarity(a: number[], b: number[]): number {\n  if (a.length !== b.length) return 0;\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    dotProduct += a[i] * b[i];\n    normA += a[i] * a[i];\n    normB += b[i] * b[i];\n  }\n\n  if (normA === 0 || normB === 0) return 0;\n\n  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n}\n\n// Get all curriculum expectations with optional filtering\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const { subject, grade, strand, search } = req.query;\n\n    const where: Prisma.CurriculumExpectationWhereInput = {};\n\n    // Validate and sanitize input parameters\n    if (subject && typeof subject === 'string') {\n      const sanitizedSubject = String(subject).trim().slice(0, 100);\n      if (sanitizedSubject) where.subject = sanitizedSubject;\n    }\n\n    if (grade) {\n      const gradeNumber = Number(grade);\n      if (!isNaN(gradeNumber) && gradeNumber >= 1 && gradeNumber <= 12) {\n        where.grade = gradeNumber;\n      }\n    }\n\n    if (strand && typeof strand === 'string') {\n      const sanitizedStrand = String(strand).trim().slice(0, 100);\n      if (sanitizedStrand) where.strand = sanitizedStrand;\n    }\n    if (search && typeof search === 'string') {\n      const sanitizedSearch = String(search).trim().slice(0, 200);\n      if (sanitizedSearch) {\n        // Database-specific case-insensitive search\n        const mode = process.env.DATABASE_URL?.includes('postgresql')\n          ? { mode: 'insensitive' as const }\n          : {};\n\n        where.OR = [\n          { code: { contains: sanitizedSearch, ...mode } },\n          { description: { contains: sanitizedSearch, ...mode } },\n          { descriptionFr: { contains: sanitizedSearch, ...mode } },\n        ];\n      }\n    }\n\n    const expectations = await prisma.curriculumExpectation.findMany({\n      where,\n      orderBy: [{ subject: 'asc' }, { grade: 'asc' }, { strand: 'asc' }, { code: 'asc' }],\n      include: {\n        unitPlans: { select: { unitPlan: { select: { id: true, title: true } } } },\n        lessonPlans: { select: { lessonPlan: { select: { id: true, title: true } } } },\n      },\n    });\n\n    res.json(expectations);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new curriculum expectation\nrouter.post('/', async (req: Request, res, _next) => {\n  try {\n    const { code, description, strand, substrand, grade, subject, descriptionFr } = req.body;\n\n    if (!code || !description || !strand || !grade || !subject) {\n      return res.status(400).json({\n        error: 'Missing required fields: code, description, strand, grade, subject',\n      });\n    }\n\n    // Validate types and lengths\n    if (typeof code !== 'string' || code.length > 50 || code.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid code: must be a string between 1-50 characters' });\n    }\n\n    if (typeof description !== 'string' || description.length > 1000 || description.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid description: must be a string between 1-1000 characters' });\n    }\n\n    if (typeof strand !== 'string' || strand.length > 100 || strand.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid strand: must be a string between 1-100 characters' });\n    }\n\n    if (typeof subject !== 'string' || subject.length > 100 || subject.length < 1) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid subject: must be a string between 1-100 characters' });\n    }\n\n    const gradeNumber = Number(grade);\n    if (isNaN(gradeNumber) || gradeNumber < 1 || gradeNumber > 12) {\n      return res.status(400).json({ error: 'Invalid grade: must be a number between 1-12' });\n    }\n\n    if (substrand && (typeof substrand !== 'string' || substrand.length > 100)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid substrand: must be a string with max 100 characters' });\n    }\n\n    if (descriptionFr && (typeof descriptionFr !== 'string' || descriptionFr.length > 1000)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid descriptionFr: must be a string with max 1000 characters' });\n    }\n\n    const expectation = await prisma.curriculumExpectation.create({\n      data: {\n        code: code.trim(),\n        description: description.trim(),\n        strand: strand.trim(),\n        substrand: substrand?.trim() || null,\n        grade: gradeNumber,\n        subject: subject.trim(),\n        descriptionFr: descriptionFr?.trim() || null,\n      },\n      include: {\n        unitPlans: { select: { unitPlan: { select: { id: true, title: true } } } },\n        lessonPlans: { select: { lessonPlan: { select: { id: true, title: true } } } },\n      },\n    });\n\n    res.status(201).json(expectation);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a curriculum expectation\nrouter.put('/:id', async (req: Request, res, _next) => {\n  try {\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(req.params.id)) {\n      return res.status(400).json({ error: 'Invalid expectation ID format' });\n    }\n\n    const { code, description, strand, substrand, grade, subject, descriptionFr } = req.body;\n\n    // Validate input types and lengths\n    if (code && (typeof code !== 'string' || code.length > 50 || code.length < 1)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid code: must be a string between 1-50 characters' });\n    }\n\n    if (\n      description &&\n      (typeof description !== 'string' || description.length > 1000 || description.length < 1)\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid description: must be a string between 1-1000 characters' });\n    }\n\n    if (strand && (typeof strand !== 'string' || strand.length > 100 || strand.length < 1)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid strand: must be a string between 1-100 characters' });\n    }\n\n    if (subject && (typeof subject !== 'string' || subject.length > 100 || subject.length < 1)) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid subject: must be a string between 1-100 characters' });\n    }\n\n    let gradeNumber: number | undefined;\n    if (grade !== undefined) {\n      gradeNumber = Number(grade);\n      if (isNaN(gradeNumber) || gradeNumber < 1 || gradeNumber > 12) {\n        return res.status(400).json({ error: 'Invalid grade: must be a number between 1-12' });\n      }\n    }\n\n    if (\n      substrand !== undefined &&\n      substrand !== null &&\n      (typeof substrand !== 'string' || substrand.length > 100)\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid substrand: must be a string with max 100 characters' });\n    }\n\n    if (\n      descriptionFr !== undefined &&\n      descriptionFr !== null &&\n      (typeof descriptionFr !== 'string' || descriptionFr.length > 1000)\n    ) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid descriptionFr: must be a string with max 1000 characters' });\n    }\n\n    const expectation = await prisma.curriculumExpectation.update({\n      where: { id: req.params.id },\n      data: {\n        ...(code && { code: code.trim() }),\n        ...(description && { description: description.trim() }),\n        ...(strand && { strand: strand.trim() }),\n        ...(substrand !== undefined && { substrand: substrand?.trim() || null }),\n        ...(gradeNumber !== undefined && { grade: gradeNumber }),\n        ...(subject && { subject: subject.trim() }),\n        ...(descriptionFr !== undefined && { descriptionFr: descriptionFr?.trim() || null }),\n      },\n      include: {\n        unitPlans: { select: { unitPlan: { select: { id: true, title: true } } } },\n        lessonPlans: { select: { lessonPlan: { select: { id: true, title: true } } } },\n      },\n    });\n\n    res.json(expectation);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a curriculum expectation\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(req.params.id)) {\n      return res.status(400).json({ error: 'Invalid expectation ID format' });\n    }\n\n    await prisma.curriculumExpectation.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).send();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single curriculum expectation\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    // Validate UUID format\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(req.params.id)) {\n      return res.status(400).json({ error: 'Invalid expectation ID format' });\n    }\n\n    const expectation = await prisma.curriculumExpectation.findUnique({\n      where: { id: req.params.id },\n      include: {\n        unitPlans: {\n          include: {\n            unitPlan: {\n              include: {\n                longRangePlan: true,\n                _count: { select: { lessonPlans: true } },\n              },\n            },\n          },\n        },\n        lessonPlans: {\n          include: {\n            lessonPlan: {\n              include: {\n                unitPlan: { select: { id: true, title: true } },\n                daybookEntry: true,\n              },\n            },\n          },\n        },\n        embedding: true,\n      },\n    });\n\n    if (!expectation) {\n      return res.status(404).json({ error: 'Curriculum expectation not found' });\n    }\n\n    res.json(expectation);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Search curriculum expectations with semantic similarity (AI-powered)\nrouter.post('/search', async (req: Request, res, _next) => {\n  try {\n    const { query, limit = 10, filters } = req.body;\n\n    if (!query) {\n      return res.status(400).json({ error: 'Query is required' });\n    }\n\n    // Try semantic search first, fallback to text search if no embeddings\n    let results;\n\n    try {\n      // Attempt semantic search using embeddings\n      results = await semanticSearch(query, limit, filters);\n    } catch (error) {\n      console.log('Semantic search failed, falling back to text search:', error);\n\n      // Fallback to text-based search with proper case-insensitive handling\n      const mode = process.env.DATABASE_URL?.includes('postgresql')\n        ? { mode: 'insensitive' as const }\n        : {};\n\n      const where: Prisma.CurriculumExpectationWhereInput = {\n        OR: [\n          { code: { contains: query, ...mode } },\n          { description: { contains: query, ...mode } },\n          { descriptionFr: { contains: query, ...mode } },\n          { strand: { contains: query, ...mode } },\n        ],\n      };\n\n      if (filters?.subject && typeof filters.subject === 'string') {\n        const sanitizedSubject = filters.subject.trim().slice(0, 100);\n        if (sanitizedSubject) where.subject = sanitizedSubject;\n      }\n      if (filters?.grade) {\n        const gradeNumber = Number(filters.grade);\n        if (!isNaN(gradeNumber) && gradeNumber >= 1 && gradeNumber <= 12) {\n          where.grade = gradeNumber;\n        }\n      }\n\n      results = await prisma.curriculumExpectation.findMany({\n        where,\n        take: limit,\n        orderBy: { code: 'asc' },\n      });\n    }\n\n    res.json(results);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Cluster curriculum expectations by similarity (AI-powered)\nrouter.post('/cluster', async (req: Request, res, _next) => {\n  try {\n    const { expectationIds, clusterCount = 5 } = req.body;\n\n    if (!expectationIds || !Array.isArray(expectationIds)) {\n      return res.status(400).json({ error: 'expectationIds array is required' });\n    }\n\n    // Clustering is implemented through the curriculum import system\n    // This endpoint provides manual clustering for ad-hoc analysis\n    const clusters = {\n      message:\n        'Manual clustering endpoint - automated clustering available through curriculum import',\n      expectationIds,\n      clusterCount,\n    };\n\n    res.json(clusters);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get curriculum coverage report\nrouter.get('/coverage/report', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { startDate, endDate, subject, grade } = req.query;\n\n    // Get all expectations for the filters\n    const expectationsWhere: Prisma.CurriculumExpectationWhereInput = {};\n    if (subject) expectationsWhere.subject = String(subject);\n    if (grade) expectationsWhere.grade = Number(grade);\n\n    const allExpectations = await prisma.curriculumExpectation.findMany({\n      where: expectationsWhere,\n      select: {\n        id: true,\n        code: true,\n        description: true,\n        strand: true,\n      },\n    });\n\n    // Get covered expectations through lesson plans\n    const lessonPlansWhere: Prisma.ETFOLessonPlanWhereInput = {\n      userId,\n    };\n\n    if (startDate || endDate) {\n      lessonPlansWhere.date = {};\n      if (startDate) lessonPlansWhere.date.gte = new Date(String(startDate));\n      if (endDate) lessonPlansWhere.date.lte = new Date(String(endDate));\n    }\n\n    const coveredExpectations = await prisma.eTFOLessonPlanExpectation.findMany({\n      where: {\n        lessonPlan: lessonPlansWhere,\n        expectation: expectationsWhere,\n      },\n      select: {\n        expectationId: true,\n        expectation: {\n          select: {\n            id: true,\n            code: true,\n            description: true,\n            strand: true,\n          },\n        },\n        lessonPlan: {\n          select: {\n            id: true,\n            title: true,\n            date: true,\n          },\n        },\n      },\n    });\n\n    // Calculate coverage statistics\n    const coveredIds = new Set(coveredExpectations.map((ce) => ce.expectationId));\n    const coverage = {\n      total: allExpectations.length,\n      covered: coveredIds.size,\n      percentage:\n        allExpectations.length > 0\n          ? Math.round((coveredIds.size / allExpectations.length) * 100)\n          : 0,\n      byStrand: {} as Record<string, { total: number; covered: number }>,\n      uncovered: allExpectations.filter((e) => !coveredIds.has(e.id)),\n      details: coveredExpectations,\n    };\n\n    // Calculate coverage by strand\n    for (const exp of allExpectations) {\n      if (!coverage.byStrand[exp.strand]) {\n        coverage.byStrand[exp.strand] = { total: 0, covered: 0 };\n      }\n      coverage.byStrand[exp.strand].total++;\n      if (coveredIds.has(exp.id)) {\n        coverage.byStrand[exp.strand].covered++;\n      }\n    }\n\n    res.json(coverage);\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "be87e9d4bc2dba58f3935c243e0a77e267539778"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a8b6g7ic1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a8b6g7ic1();
import { Router } from 'express';
import { prisma } from '../prisma';
import { EmbeddingService } from '../services/embeddingService';
const router =
/* istanbul ignore next */
(cov_1a8b6g7ic1().s[0]++, Router());
// Initialize embedding service
const embeddingService =
/* istanbul ignore next */
(cov_1a8b6g7ic1().s[1]++, new EmbeddingService());
// Semantic search helper function
async function semanticSearch(query, limit, filters) {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[0]++;
  // Generate embedding for the search query
  const queryEmbedding =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[2]++, await embeddingService.generateEmbedding('search-query', query));
  // Get all expectations that match filters
  const where =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[3]++, {});
  /* istanbul ignore next */
  cov_1a8b6g7ic1().s[4]++;
  if (filters?.subject) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().b[0][0]++;
    cov_1a8b6g7ic1().s[5]++;
    where.subject = filters.subject;
  } else
  /* istanbul ignore next */
  {
    cov_1a8b6g7ic1().b[0][1]++;
  }
  cov_1a8b6g7ic1().s[6]++;
  if (filters?.grade) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().b[1][0]++;
    cov_1a8b6g7ic1().s[7]++;
    where.grade = filters.grade;
  } else
  /* istanbul ignore next */
  {
    cov_1a8b6g7ic1().b[1][1]++;
  }
  cov_1a8b6g7ic1().s[8]++;
  if (filters?.strand) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().b[2][0]++;
    cov_1a8b6g7ic1().s[9]++;
    where.strand = filters.strand;
  } else
  /* istanbul ignore next */
  {
    cov_1a8b6g7ic1().b[2][1]++;
  }
  const allExpectations =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[10]++, await prisma.curriculumExpectation.findMany({
    where,
    include: {
      embedding: true
    }
  }));
  // Calculate similarities and sort by relevance
  const expectationsWithSimilarity =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[11]++, allExpectations.map(expectation => {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().f[1]++;
    // Find the best embedding match for this expectation
    let maxSimilarity =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[12]++, 0);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[13]++;
    if (expectation.embedding) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[3][0]++;
      const similarity =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[14]++, cosineSimilarity(
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[4][0]++, queryEmbedding?.embedding) ||
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[4][1]++, []), expectation.embedding.embedding));
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[15]++;
      if (similarity > maxSimilarity) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[5][0]++;
        cov_1a8b6g7ic1().s[16]++;
        maxSimilarity = similarity;
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[5][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[3][1]++;
    }
    cov_1a8b6g7ic1().s[17]++;
    return {
      ...expectation,
      similarity: maxSimilarity
    };
  }).filter(exp => {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().f[2]++;
    cov_1a8b6g7ic1().s[18]++;
    return exp.similarity > 0.3;
  }) // Minimum similarity threshold
  .sort((a, b) => {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().f[3]++;
    cov_1a8b6g7ic1().s[19]++;
    return b.similarity - a.similarity;
  }).slice(0, limit));
  // Remove embeddings from response
  /* istanbul ignore next */
  cov_1a8b6g7ic1().s[20]++;
  return expectationsWithSimilarity.map(({
    embedding: _embedding,
    similarity,
    ...exp
  }) => {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().f[4]++;
    cov_1a8b6g7ic1().s[21]++;
    return {
      ...exp,
      _similarity: similarity
    };
  });
}
// Cosine similarity calculation
function cosineSimilarity(a, b) {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[5]++;
  cov_1a8b6g7ic1().s[22]++;
  if (a.length !== b.length) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().b[6][0]++;
    cov_1a8b6g7ic1().s[23]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_1a8b6g7ic1().b[6][1]++;
  }
  let dotProduct =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[24]++, 0);
  let normA =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[25]++, 0);
  let normB =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[26]++, 0);
  /* istanbul ignore next */
  cov_1a8b6g7ic1().s[27]++;
  for (let i =
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().s[28]++, 0); i < a.length; i++) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[29]++;
    dotProduct += a[i] * b[i];
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[30]++;
    normA += a[i] * a[i];
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[31]++;
    normB += b[i] * b[i];
  }
  /* istanbul ignore next */
  cov_1a8b6g7ic1().s[32]++;
  if (
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().b[8][0]++, normA === 0) ||
  /* istanbul ignore next */
  (cov_1a8b6g7ic1().b[8][1]++, normB === 0)) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().b[7][0]++;
    cov_1a8b6g7ic1().s[33]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_1a8b6g7ic1().b[7][1]++;
  }
  cov_1a8b6g7ic1().s[34]++;
  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
}
// Get all curriculum expectations with optional filtering
/* istanbul ignore next */
cov_1a8b6g7ic1().s[35]++;
router.get('/', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[6]++;
  cov_1a8b6g7ic1().s[36]++;
  try {
    const {
      subject,
      grade,
      strand,
      search
    } =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[37]++, req.query);
    const where =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[38]++, {});
    // Validate and sanitize input parameters
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[10][0]++, subject) &&
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[10][1]++, typeof subject === 'string')) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[9][0]++;
      const sanitizedSubject =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[40]++, String(subject).trim().slice(0, 100));
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[41]++;
      if (sanitizedSubject) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[11][0]++;
        cov_1a8b6g7ic1().s[42]++;
        where.subject = sanitizedSubject;
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[11][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[9][1]++;
    }
    cov_1a8b6g7ic1().s[43]++;
    if (grade) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[12][0]++;
      const gradeNumber =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[44]++, Number(grade));
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[45]++;
      if (
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[14][0]++, !isNaN(gradeNumber)) &&
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[14][1]++, gradeNumber >= 1) &&
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[14][2]++, gradeNumber <= 12)) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[13][0]++;
        cov_1a8b6g7ic1().s[46]++;
        where.grade = gradeNumber;
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[13][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[12][1]++;
    }
    cov_1a8b6g7ic1().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[16][0]++, strand) &&
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[16][1]++, typeof strand === 'string')) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[15][0]++;
      const sanitizedStrand =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[48]++, String(strand).trim().slice(0, 100));
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[49]++;
      if (sanitizedStrand) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[17][0]++;
        cov_1a8b6g7ic1().s[50]++;
        where.strand = sanitizedStrand;
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[17][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[15][1]++;
    }
    cov_1a8b6g7ic1().s[51]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[19][0]++, search) &&
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[19][1]++, typeof search === 'string')) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[18][0]++;
      const sanitizedSearch =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[52]++, String(search).trim().slice(0, 200));
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[53]++;
      if (sanitizedSearch) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[20][0]++;
        // Database-specific case-insensitive search
        const mode =
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().s[54]++, process.env.DATABASE_URL?.includes('postgresql') ?
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[21][0]++, {
          mode: 'insensitive'
        }) :
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[21][1]++, {}));
        /* istanbul ignore next */
        cov_1a8b6g7ic1().s[55]++;
        where.OR = [{
          code: {
            contains: sanitizedSearch,
            ...mode
          }
        }, {
          description: {
            contains: sanitizedSearch,
            ...mode
          }
        }, {
          descriptionFr: {
            contains: sanitizedSearch,
            ...mode
          }
        }];
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[20][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[18][1]++;
    }
    const expectations =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[56]++, await prisma.curriculumExpectation.findMany({
      where,
      orderBy: [{
        subject: 'asc'
      }, {
        grade: 'asc'
      }, {
        strand: 'asc'
      }, {
        code: 'asc'
      }],
      include: {
        unitPlans: {
          select: {
            unitPlan: {
              select: {
                id: true,
                title: true
              }
            }
          }
        },
        lessonPlans: {
          select: {
            lessonPlan: {
              select: {
                id: true,
                title: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[57]++;
    res.json(expectations);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[58]++;
    _next(err);
  }
});
// Create a new curriculum expectation
/* istanbul ignore next */
cov_1a8b6g7ic1().s[59]++;
router.post('/', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[7]++;
  cov_1a8b6g7ic1().s[60]++;
  try {
    const {
      code,
      description,
      strand,
      substrand,
      grade,
      subject,
      descriptionFr
    } =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[61]++, req.body);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[23][0]++, !code) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[23][1]++, !description) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[23][2]++, !strand) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[23][3]++, !grade) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[23][4]++, !subject)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[22][0]++;
      cov_1a8b6g7ic1().s[63]++;
      return res.status(400).json({
        error: 'Missing required fields: code, description, strand, grade, subject'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[22][1]++;
    }
    // Validate types and lengths
    cov_1a8b6g7ic1().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[25][0]++, typeof code !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[25][1]++, code.length > 50) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[25][2]++, code.length < 1)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[24][0]++;
      cov_1a8b6g7ic1().s[65]++;
      return res.status(400).json({
        error: 'Invalid code: must be a string between 1-50 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[24][1]++;
    }
    cov_1a8b6g7ic1().s[66]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[27][0]++, typeof description !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[27][1]++, description.length > 1000) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[27][2]++, description.length < 1)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[26][0]++;
      cov_1a8b6g7ic1().s[67]++;
      return res.status(400).json({
        error: 'Invalid description: must be a string between 1-1000 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[26][1]++;
    }
    cov_1a8b6g7ic1().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[29][0]++, typeof strand !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[29][1]++, strand.length > 100) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[29][2]++, strand.length < 1)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[28][0]++;
      cov_1a8b6g7ic1().s[69]++;
      return res.status(400).json({
        error: 'Invalid strand: must be a string between 1-100 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[28][1]++;
    }
    cov_1a8b6g7ic1().s[70]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[31][0]++, typeof subject !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[31][1]++, subject.length > 100) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[31][2]++, subject.length < 1)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[30][0]++;
      cov_1a8b6g7ic1().s[71]++;
      return res.status(400).json({
        error: 'Invalid subject: must be a string between 1-100 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[30][1]++;
    }
    const gradeNumber =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[72]++, Number(grade));
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[73]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[33][0]++, isNaN(gradeNumber)) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[33][1]++, gradeNumber < 1) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[33][2]++, gradeNumber > 12)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[32][0]++;
      cov_1a8b6g7ic1().s[74]++;
      return res.status(400).json({
        error: 'Invalid grade: must be a number between 1-12'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[32][1]++;
    }
    cov_1a8b6g7ic1().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[35][0]++, substrand) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[35][1]++, typeof substrand !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[35][2]++, substrand.length > 100))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[34][0]++;
      cov_1a8b6g7ic1().s[76]++;
      return res.status(400).json({
        error: 'Invalid substrand: must be a string with max 100 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[34][1]++;
    }
    cov_1a8b6g7ic1().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[37][0]++, descriptionFr) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[37][1]++, typeof descriptionFr !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[37][2]++, descriptionFr.length > 1000))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[36][0]++;
      cov_1a8b6g7ic1().s[78]++;
      return res.status(400).json({
        error: 'Invalid descriptionFr: must be a string with max 1000 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[36][1]++;
    }
    const expectation =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[79]++, await prisma.curriculumExpectation.create({
      data: {
        code: code.trim(),
        description: description.trim(),
        strand: strand.trim(),
        substrand:
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[38][0]++, substrand?.trim()) ||
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[38][1]++, null),
        grade: gradeNumber,
        subject: subject.trim(),
        descriptionFr:
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[39][0]++, descriptionFr?.trim()) ||
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[39][1]++, null)
      },
      include: {
        unitPlans: {
          select: {
            unitPlan: {
              select: {
                id: true,
                title: true
              }
            }
          }
        },
        lessonPlans: {
          select: {
            lessonPlan: {
              select: {
                id: true,
                title: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[80]++;
    res.status(201).json(expectation);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[81]++;
    _next(err);
  }
});
// Update a curriculum expectation
/* istanbul ignore next */
cov_1a8b6g7ic1().s[82]++;
router.put('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[8]++;
  cov_1a8b6g7ic1().s[83]++;
  try {
    // Validate UUID format
    const uuidRegex =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[84]++, /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[85]++;
    if (!uuidRegex.test(req.params.id)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[40][0]++;
      cov_1a8b6g7ic1().s[86]++;
      return res.status(400).json({
        error: 'Invalid expectation ID format'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[40][1]++;
    }
    const {
      code,
      description,
      strand,
      substrand,
      grade,
      subject,
      descriptionFr
    } =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[87]++, req.body);
    // Validate input types and lengths
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[88]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[42][0]++, code) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[42][1]++, typeof code !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[42][2]++, code.length > 50) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[42][3]++, code.length < 1))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[41][0]++;
      cov_1a8b6g7ic1().s[89]++;
      return res.status(400).json({
        error: 'Invalid code: must be a string between 1-50 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[41][1]++;
    }
    cov_1a8b6g7ic1().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[44][0]++, description) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[44][1]++, typeof description !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[44][2]++, description.length > 1000) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[44][3]++, description.length < 1))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[43][0]++;
      cov_1a8b6g7ic1().s[91]++;
      return res.status(400).json({
        error: 'Invalid description: must be a string between 1-1000 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[43][1]++;
    }
    cov_1a8b6g7ic1().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[46][0]++, strand) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[46][1]++, typeof strand !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[46][2]++, strand.length > 100) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[46][3]++, strand.length < 1))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[45][0]++;
      cov_1a8b6g7ic1().s[93]++;
      return res.status(400).json({
        error: 'Invalid strand: must be a string between 1-100 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[45][1]++;
    }
    cov_1a8b6g7ic1().s[94]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[48][0]++, subject) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[48][1]++, typeof subject !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[48][2]++, subject.length > 100) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[48][3]++, subject.length < 1))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[47][0]++;
      cov_1a8b6g7ic1().s[95]++;
      return res.status(400).json({
        error: 'Invalid subject: must be a string between 1-100 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[47][1]++;
    }
    let gradeNumber;
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[96]++;
    if (grade !== undefined) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[49][0]++;
      cov_1a8b6g7ic1().s[97]++;
      gradeNumber = Number(grade);
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[98]++;
      if (
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[51][0]++, isNaN(gradeNumber)) ||
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[51][1]++, gradeNumber < 1) ||
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[51][2]++, gradeNumber > 12)) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[50][0]++;
        cov_1a8b6g7ic1().s[99]++;
        return res.status(400).json({
          error: 'Invalid grade: must be a number between 1-12'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[50][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[49][1]++;
    }
    cov_1a8b6g7ic1().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[53][0]++, substrand !== undefined) &&
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[53][1]++, substrand !== null) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[53][2]++, typeof substrand !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[53][3]++, substrand.length > 100))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[52][0]++;
      cov_1a8b6g7ic1().s[101]++;
      return res.status(400).json({
        error: 'Invalid substrand: must be a string with max 100 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[52][1]++;
    }
    cov_1a8b6g7ic1().s[102]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[55][0]++, descriptionFr !== undefined) &&
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[55][1]++, descriptionFr !== null) && (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[55][2]++, typeof descriptionFr !== 'string') ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[55][3]++, descriptionFr.length > 1000))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[54][0]++;
      cov_1a8b6g7ic1().s[103]++;
      return res.status(400).json({
        error: 'Invalid descriptionFr: must be a string with max 1000 characters'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[54][1]++;
    }
    const expectation =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[104]++, await prisma.curriculumExpectation.update({
      where: {
        id: req.params.id
      },
      data: {
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[56][0]++, code) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[56][1]++, {
          code: code.trim()
        })),
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[57][0]++, description) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[57][1]++, {
          description: description.trim()
        })),
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[58][0]++, strand) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[58][1]++, {
          strand: strand.trim()
        })),
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[59][0]++, substrand !== undefined) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[59][1]++, {
          substrand:
          /* istanbul ignore next */
          (cov_1a8b6g7ic1().b[60][0]++, substrand?.trim()) ||
          /* istanbul ignore next */
          (cov_1a8b6g7ic1().b[60][1]++, null)
        })),
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[61][0]++, gradeNumber !== undefined) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[61][1]++, {
          grade: gradeNumber
        })),
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[62][0]++, subject) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[62][1]++, {
          subject: subject.trim()
        })),
        ...(
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[63][0]++, descriptionFr !== undefined) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[63][1]++, {
          descriptionFr:
          /* istanbul ignore next */
          (cov_1a8b6g7ic1().b[64][0]++, descriptionFr?.trim()) ||
          /* istanbul ignore next */
          (cov_1a8b6g7ic1().b[64][1]++, null)
        }))
      },
      include: {
        unitPlans: {
          select: {
            unitPlan: {
              select: {
                id: true,
                title: true
              }
            }
          }
        },
        lessonPlans: {
          select: {
            lessonPlan: {
              select: {
                id: true,
                title: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[105]++;
    res.json(expectation);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[106]++;
    _next(err);
  }
});
// Delete a curriculum expectation
/* istanbul ignore next */
cov_1a8b6g7ic1().s[107]++;
router.delete('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[9]++;
  cov_1a8b6g7ic1().s[108]++;
  try {
    // Validate UUID format
    const uuidRegex =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[109]++, /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[110]++;
    if (!uuidRegex.test(req.params.id)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[65][0]++;
      cov_1a8b6g7ic1().s[111]++;
      return res.status(400).json({
        error: 'Invalid expectation ID format'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[65][1]++;
    }
    cov_1a8b6g7ic1().s[112]++;
    await prisma.curriculumExpectation.delete({
      where: {
        id: req.params.id
      }
    });
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[113]++;
    res.status(204).send();
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[114]++;
    _next(err);
  }
});
// Get a single curriculum expectation
/* istanbul ignore next */
cov_1a8b6g7ic1().s[115]++;
router.get('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[10]++;
  cov_1a8b6g7ic1().s[116]++;
  try {
    // Validate UUID format
    const uuidRegex =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[117]++, /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[118]++;
    if (!uuidRegex.test(req.params.id)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[66][0]++;
      cov_1a8b6g7ic1().s[119]++;
      return res.status(400).json({
        error: 'Invalid expectation ID format'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[66][1]++;
    }
    const expectation =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[120]++, await prisma.curriculumExpectation.findUnique({
      where: {
        id: req.params.id
      },
      include: {
        unitPlans: {
          include: {
            unitPlan: {
              include: {
                longRangePlan: true,
                _count: {
                  select: {
                    lessonPlans: true
                  }
                }
              }
            }
          }
        },
        lessonPlans: {
          include: {
            lessonPlan: {
              include: {
                unitPlan: {
                  select: {
                    id: true,
                    title: true
                  }
                },
                daybookEntry: true
              }
            }
          }
        },
        embedding: true
      }
    }));
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[121]++;
    if (!expectation) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[67][0]++;
      cov_1a8b6g7ic1().s[122]++;
      return res.status(404).json({
        error: 'Curriculum expectation not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[67][1]++;
    }
    cov_1a8b6g7ic1().s[123]++;
    res.json(expectation);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[124]++;
    _next(err);
  }
});
// Search curriculum expectations with semantic similarity (AI-powered)
/* istanbul ignore next */
cov_1a8b6g7ic1().s[125]++;
router.post('/search', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[11]++;
  cov_1a8b6g7ic1().s[126]++;
  try {
    const {
      query,
      limit =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[68][0]++, 10),
      filters
    } =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[127]++, req.body);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[128]++;
    if (!query) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[69][0]++;
      cov_1a8b6g7ic1().s[129]++;
      return res.status(400).json({
        error: 'Query is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[69][1]++;
    }
    // Try semantic search first, fallback to text search if no embeddings
    let results;
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[130]++;
    try {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[131]++;
      // Attempt semantic search using embeddings
      results = await semanticSearch(query, limit, filters);
    } catch (error) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[132]++;
      console.log('Semantic search failed, falling back to text search:', error);
      // Fallback to text-based search with proper case-insensitive handling
      const mode =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[133]++, process.env.DATABASE_URL?.includes('postgresql') ?
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[70][0]++, {
        mode: 'insensitive'
      }) :
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[70][1]++, {}));
      const where =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().s[134]++, {
        OR: [{
          code: {
            contains: query,
            ...mode
          }
        }, {
          description: {
            contains: query,
            ...mode
          }
        }, {
          descriptionFr: {
            contains: query,
            ...mode
          }
        }, {
          strand: {
            contains: query,
            ...mode
          }
        }]
      });
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[135]++;
      if (
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[72][0]++, filters?.subject) &&
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[72][1]++, typeof filters.subject === 'string')) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[71][0]++;
        const sanitizedSubject =
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().s[136]++, filters.subject.trim().slice(0, 100));
        /* istanbul ignore next */
        cov_1a8b6g7ic1().s[137]++;
        if (sanitizedSubject) {
          /* istanbul ignore next */
          cov_1a8b6g7ic1().b[73][0]++;
          cov_1a8b6g7ic1().s[138]++;
          where.subject = sanitizedSubject;
        } else
        /* istanbul ignore next */
        {
          cov_1a8b6g7ic1().b[73][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[71][1]++;
      }
      cov_1a8b6g7ic1().s[139]++;
      if (filters?.grade) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[74][0]++;
        const gradeNumber =
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().s[140]++, Number(filters.grade));
        /* istanbul ignore next */
        cov_1a8b6g7ic1().s[141]++;
        if (
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[76][0]++, !isNaN(gradeNumber)) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[76][1]++, gradeNumber >= 1) &&
        /* istanbul ignore next */
        (cov_1a8b6g7ic1().b[76][2]++, gradeNumber <= 12)) {
          /* istanbul ignore next */
          cov_1a8b6g7ic1().b[75][0]++;
          cov_1a8b6g7ic1().s[142]++;
          where.grade = gradeNumber;
        } else
        /* istanbul ignore next */
        {
          cov_1a8b6g7ic1().b[75][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[74][1]++;
      }
      cov_1a8b6g7ic1().s[143]++;
      results = await prisma.curriculumExpectation.findMany({
        where,
        take: limit,
        orderBy: {
          code: 'asc'
        }
      });
    }
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[144]++;
    res.json(results);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[145]++;
    _next(err);
  }
});
// Cluster curriculum expectations by similarity (AI-powered)
/* istanbul ignore next */
cov_1a8b6g7ic1().s[146]++;
router.post('/cluster', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[12]++;
  cov_1a8b6g7ic1().s[147]++;
  try {
    const {
      expectationIds,
      clusterCount =
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[77][0]++, 5)
    } =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[148]++, req.body);
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[149]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[79][0]++, !expectationIds) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[79][1]++, !Array.isArray(expectationIds))) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[78][0]++;
      cov_1a8b6g7ic1().s[150]++;
      return res.status(400).json({
        error: 'expectationIds array is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[78][1]++;
    }
    // Clustering is implemented through the curriculum import system
    // This endpoint provides manual clustering for ad-hoc analysis
    const clusters =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[151]++, {
      message: 'Manual clustering endpoint - automated clustering available through curriculum import',
      expectationIds,
      clusterCount
    });
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[152]++;
    res.json(clusters);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[153]++;
    _next(err);
  }
});
// Get curriculum coverage report
/* istanbul ignore next */
cov_1a8b6g7ic1().s[154]++;
router.get('/coverage/report', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_1a8b6g7ic1().f[13]++;
  cov_1a8b6g7ic1().s[155]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[156]++,
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[80][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[80][1]++, 0));
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[157]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[81][0]++;
      cov_1a8b6g7ic1().s[158]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[81][1]++;
    }
    const {
      startDate,
      endDate,
      subject,
      grade
    } =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[159]++, req.query);
    // Get all expectations for the filters
    const expectationsWhere =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[160]++, {});
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[161]++;
    if (subject) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[82][0]++;
      cov_1a8b6g7ic1().s[162]++;
      expectationsWhere.subject = String(subject);
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[82][1]++;
    }
    cov_1a8b6g7ic1().s[163]++;
    if (grade) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[83][0]++;
      cov_1a8b6g7ic1().s[164]++;
      expectationsWhere.grade = Number(grade);
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[83][1]++;
    }
    const allExpectations =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[165]++, await prisma.curriculumExpectation.findMany({
      where: expectationsWhere,
      select: {
        id: true,
        code: true,
        description: true,
        strand: true
      }
    }));
    // Get covered expectations through lesson plans
    const lessonPlansWhere =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[166]++, {
      userId
    });
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[167]++;
    if (
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[85][0]++, startDate) ||
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().b[85][1]++, endDate)) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().b[84][0]++;
      cov_1a8b6g7ic1().s[168]++;
      lessonPlansWhere.date = {};
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[169]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[86][0]++;
        cov_1a8b6g7ic1().s[170]++;
        lessonPlansWhere.date.gte = new Date(String(startDate));
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[86][1]++;
      }
      cov_1a8b6g7ic1().s[171]++;
      if (endDate) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[87][0]++;
        cov_1a8b6g7ic1().s[172]++;
        lessonPlansWhere.date.lte = new Date(String(endDate));
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[87][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a8b6g7ic1().b[84][1]++;
    }
    const coveredExpectations =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[173]++, await prisma.eTFOLessonPlanExpectation.findMany({
      where: {
        lessonPlan: lessonPlansWhere,
        expectation: expectationsWhere
      },
      select: {
        expectationId: true,
        expectation: {
          select: {
            id: true,
            code: true,
            description: true,
            strand: true
          }
        },
        lessonPlan: {
          select: {
            id: true,
            title: true,
            date: true
          }
        }
      }
    }));
    // Calculate coverage statistics
    const coveredIds =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[174]++, new Set(coveredExpectations.map(ce => {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().f[14]++;
      cov_1a8b6g7ic1().s[175]++;
      return ce.expectationId;
    })));
    const coverage =
    /* istanbul ignore next */
    (cov_1a8b6g7ic1().s[176]++, {
      total: allExpectations.length,
      covered: coveredIds.size,
      percentage: allExpectations.length > 0 ?
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[88][0]++, Math.round(coveredIds.size / allExpectations.length * 100)) :
      /* istanbul ignore next */
      (cov_1a8b6g7ic1().b[88][1]++, 0),
      byStrand: {},
      uncovered: allExpectations.filter(e => {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().f[15]++;
        cov_1a8b6g7ic1().s[177]++;
        return !coveredIds.has(e.id);
      }),
      details: coveredExpectations
    });
    // Calculate coverage by strand
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[178]++;
    for (const exp of allExpectations) {
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[179]++;
      if (!coverage.byStrand[exp.strand]) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[89][0]++;
        cov_1a8b6g7ic1().s[180]++;
        coverage.byStrand[exp.strand] = {
          total: 0,
          covered: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[89][1]++;
      }
      cov_1a8b6g7ic1().s[181]++;
      coverage.byStrand[exp.strand].total++;
      /* istanbul ignore next */
      cov_1a8b6g7ic1().s[182]++;
      if (coveredIds.has(exp.id)) {
        /* istanbul ignore next */
        cov_1a8b6g7ic1().b[90][0]++;
        cov_1a8b6g7ic1().s[183]++;
        coverage.byStrand[exp.strand].covered++;
      } else
      /* istanbul ignore next */
      {
        cov_1a8b6g7ic1().b[90][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[184]++;
    res.json(coverage);
  } catch (err) {
    /* istanbul ignore next */
    cov_1a8b6g7ic1().s[185]++;
    _next(err);
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,