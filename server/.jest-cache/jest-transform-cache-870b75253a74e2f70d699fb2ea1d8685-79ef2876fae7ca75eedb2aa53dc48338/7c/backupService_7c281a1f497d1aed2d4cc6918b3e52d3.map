{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/backupService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/backupService.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport archiver from 'archiver';\nimport unzipper from 'unzipper';\nimport { S3Client, PutObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';\nimport cron from 'node-cron';\n\n// Get directory name in ES module\nconst __filename_backup = fileURLToPath(import.meta.url);\nconst __dirname_backup = path.dirname(__filename_backup);\n\nlet s3: S3Client | null = null;\nconst bucket = process.env.BACKUP_BUCKET;\nif (process.env.BACKUP_PROVIDER === 's3' && bucket) {\n  s3 = new S3Client({ region: process.env.AWS_REGION || 'us-east-1' });\n}\n\nfunction getDbPath() {\n  const url = process.env.DATABASE_URL || '';\n  const match = url.match(/file:(.*)/);\n  if (!match) {\n    throw new Error('DATABASE_URL must be sqlite');\n  }\n  return path.resolve(process.cwd(), match[1]);\n}\n\nfunction getUploadsPath() {\n  return path.join(__dirname_backup, '../uploads');\n}\n\n/** Create zip archive containing database and uploads */\nexport async function createBackup(): Promise<Buffer> {\n  const archive = archiver('zip');\n  const chunks: Buffer[] = [];\n  archive.on('data', (d: Buffer) => chunks.push(d));\n  const db = getDbPath();\n  archive.file(db, { name: path.basename(db) });\n  const uploads = getUploadsPath();\n  if (fs.existsSync(uploads)) {\n    archive.directory(uploads, 'uploads');\n  }\n  await archive.finalize();\n  return Buffer.concat(chunks);\n}\n\n/** Restore database and uploads from provided zip buffer */\nexport async function restoreBackup(data: Buffer): Promise<void> {\n  const dir = await unzipper.Open.buffer(data);\n  const db = getDbPath();\n  for (const entry of dir.files) {\n    const dest =\n      entry.path === path.basename(db)\n        ? db\n        : path.join(getUploadsPath(), entry.path.replace(/^uploads\\/?/, ''));\n    await fs.promises.mkdir(path.dirname(dest), { recursive: true });\n    await new Promise<void>((res, rej) => {\n      entry.stream().pipe(fs.createWriteStream(dest)).on('finish', res).on('error', rej);\n    });\n  }\n}\n\n/** Save backup buffer to configured provider */\nexport async function saveBackup(data: Buffer): Promise<string> {\n  const key = `backup-${Date.now()}.zip`;\n  if (s3 && bucket) {\n    await s3.send(new PutObjectCommand({ Bucket: bucket, Key: key, Body: data }));\n    return `s3://${bucket}/${key}`;\n  }\n  const backupDir = path.join(__dirname_backup, '../backups');\n  await fs.promises.mkdir(backupDir, { recursive: true });\n  const file = path.join(backupDir, key);\n  await fs.promises.writeFile(file, data);\n  return file;\n}\n\n/** Load backup buffer from provider */\nexport async function loadBackup(key: string): Promise<Buffer> {\n  if (s3 && bucket && key.startsWith('s3://')) {\n    const realKey = key.slice(`s3://${bucket}/`.length);\n    const res = await s3.send(new GetObjectCommand({ Bucket: bucket, Key: realKey }));\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const stream = res.Body as unknown as NodeJS.ReadableStream;\n    const chunks: Buffer[] = [];\n    for await (const chunk of stream) chunks.push(Buffer.from(chunk));\n    return Buffer.concat(chunks);\n  }\n  return fs.promises.readFile(key);\n}\n\n/** Create backup and store using provider */\nexport async function runBackupJob(): Promise<string> {\n  const data = await createBackup();\n  return saveBackup(data);\n}\n\n/** Schedule automatic backups using cron */\nexport function scheduleBackups() {\n  const cronExpr = process.env.BACKUP_CRON || '0 2 * * *';\n  cron.schedule(cronExpr, runBackupJob);\n}\n"],"version":3}