{"version":3,"names":["cov_1ut12bppxy","actualCoverage","logger","ServiceRegistry","services","s","Map","healthStatus","healthCheckIntervals","register","registration","f","has","name","b","warn","serviceName","set","healthCheckInterval","startHealthMonitoring","info","dependencies","singleton","get","instance","getAll","Array","from","values","unregister","interval","clearInterval","delete","initializeAll","initialized","failed","remaining","Set","keys","size","progress","dependenciesMet","every","dep","includes","healthCheck","push","error","Error","message","remainingServices","getHealthStatus","healthChecks","map","health","status","healthy","lastCheck","Date","details","Promise","all","getDependencyGraph","nodes","reg","id","label","edges","dependency","to","resetAllMetrics","resetMetrics","getAllMetrics","metrics","getMetrics","shutdown","clear","intervalMs","setInterval","serviceRegistry"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport logger from '../logger';\n\nexport interface ServiceHealth {\n  serviceName: string;\n  healthy: boolean;\n  lastCheck: Date;\n  details: unknown;\n}\n\nexport interface ServiceRegistration {\n  name: string;\n  instance: BaseService;\n  dependencies: string[];\n  singleton: boolean;\n  healthCheckInterval?: number;\n}\n\nexport class ServiceRegistry {\n  private services = new Map<string, ServiceRegistration>();\n  private healthStatus = new Map<string, ServiceHealth>();\n  private healthCheckIntervals = new Map<string, NodeJS.Timeout>();\n\n  /**\n   * Register a service instance\n   */\n  register(registration: ServiceRegistration): void {\n    if (this.services.has(registration.name)) {\n      logger.warn({ serviceName: registration.name }, 'Service already registered, replacing');\n    }\n\n    this.services.set(registration.name, registration);\n\n    // Start health monitoring if interval specified\n    if (registration.healthCheckInterval) {\n      this.startHealthMonitoring(registration.name, registration.healthCheckInterval);\n    }\n\n    logger.info(\n      {\n        serviceName: registration.name,\n        dependencies: registration.dependencies,\n        singleton: registration.singleton,\n      },\n      'Service registered',\n    );\n  }\n\n  /**\n   * Get a service instance\n   */\n  get<T extends BaseService>(serviceName: string): T | null {\n    const registration = this.services.get(serviceName);\n    if (!registration) {\n      logger.warn({ serviceName }, 'Service not found in registry');\n      return null;\n    }\n\n    return registration.instance as T;\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  has(serviceName: string): boolean {\n    return this.services.has(serviceName);\n  }\n\n  /**\n   * Get all registered services\n   */\n  getAll(): ServiceRegistration[] {\n    return Array.from(this.services.values());\n  }\n\n  /**\n   * Unregister a service\n   */\n  unregister(serviceName: string): boolean {\n    const registration = this.services.get(serviceName);\n    if (!registration) {\n      return false;\n    }\n\n    // Stop health monitoring\n    const interval = this.healthCheckIntervals.get(serviceName);\n    if (interval) {\n      clearInterval(interval);\n      this.healthCheckIntervals.delete(serviceName);\n    }\n\n    this.services.delete(serviceName);\n    this.healthStatus.delete(serviceName);\n\n    logger.info({ serviceName }, 'Service unregistered');\n    return true;\n  }\n\n  /**\n   * Initialize all services in dependency order\n   */\n  async initializeAll(): Promise<{\n    initialized: string[];\n    failed: { serviceName: string; error: string }[];\n  }> {\n    const initialized: string[] = [];\n    const failed: { serviceName: string; error: string }[] = [];\n    const remaining = new Set(this.services.keys());\n\n    // Initialize services in dependency order\n    while (remaining.size > 0) {\n      let progress = false;\n\n      for (const serviceName of remaining) {\n        const registration = this.services.get(serviceName)!;\n\n        // Check if all dependencies are initialized\n        const dependenciesMet = registration.dependencies.every((dep) => initialized.includes(dep));\n\n        if (dependenciesMet) {\n          try {\n            // Services extending BaseService have built-in health checks\n            await registration.instance.healthCheck();\n            initialized.push(serviceName);\n            remaining.delete(serviceName);\n            progress = true;\n\n            logger.info({ serviceName }, 'Service initialized successfully');\n          } catch (error) {\n            failed.push({\n              serviceName,\n              error: error instanceof Error ? error.message : 'Unknown error',\n            });\n            remaining.delete(serviceName);\n            progress = true;\n\n            logger.error({ serviceName, error }, 'Service initialization failed');\n          }\n        }\n      }\n\n      // Detect circular dependencies\n      if (!progress) {\n        const remainingServices = Array.from(remaining);\n        logger.error({ remainingServices }, 'Circular dependency detected or missing dependencies');\n\n        for (const serviceName of remaining) {\n          failed.push({\n            serviceName,\n            error: 'Circular dependency or missing dependencies',\n          });\n        }\n        break;\n      }\n    }\n\n    return { initialized, failed };\n  }\n\n  /**\n   * Get health status of all services\n   */\n  async getHealthStatus(): Promise<ServiceHealth[]> {\n    const healthChecks = Array.from(this.services.values()).map(async (registration) => {\n      try {\n        const health = await registration.instance.healthCheck();\n        const status: ServiceHealth = {\n          serviceName: registration.name,\n          healthy: health.healthy,\n          lastCheck: new Date(),\n          details: health.details,\n        };\n\n        this.healthStatus.set(registration.name, status);\n        return status;\n      } catch (error) {\n        const status: ServiceHealth = {\n          serviceName: registration.name,\n          healthy: false,\n          lastCheck: new Date(),\n          details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        };\n\n        this.healthStatus.set(registration.name, status);\n        return status;\n      }\n    });\n\n    return await Promise.all(healthChecks);\n  }\n\n  /**\n   * Get dependency graph of all services\n   */\n  getDependencyGraph(): {\n    nodes: { id: string; label: string }[];\n    edges: { from: string; to: string }[];\n  } {\n    const nodes = Array.from(this.services.values()).map((reg) => ({\n      id: reg.name,\n      label: reg.name,\n    }));\n\n    const edges: { from: string; to: string }[] = [];\n\n    for (const registration of this.services.values()) {\n      for (const dependency of registration.dependencies) {\n        edges.push({\n          from: dependency,\n          to: registration.name,\n        });\n      }\n    }\n\n    return { nodes, edges };\n  }\n\n  /**\n   * Reset all service metrics\n   */\n  resetAllMetrics(): void {\n    for (const registration of this.services.values()) {\n      registration.instance.resetMetrics();\n    }\n\n    logger.info('All service metrics reset');\n  }\n\n  /**\n   * Get performance metrics for all services\n   */\n  getAllMetrics(): { serviceName: string; metrics: unknown }[] {\n    return Array.from(this.services.values()).map((registration) => ({\n      serviceName: registration.name,\n      metrics: registration.instance.getMetrics(),\n    }));\n  }\n\n  /**\n   * Gracefully shutdown all services\n   */\n  async shutdown(): Promise<void> {\n    logger.info('Starting service registry shutdown');\n\n    // Stop all health check intervals\n    for (const interval of this.healthCheckIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.healthCheckIntervals.clear();\n\n    // Services don't have explicit shutdown methods in BaseService\n    // But we can clear the registry\n    this.services.clear();\n    this.healthStatus.clear();\n\n    logger.info('Service registry shutdown complete');\n  }\n\n  // Private methods\n\n  private startHealthMonitoring(serviceName: string, intervalMs: number): void {\n    const interval = setInterval(async () => {\n      const registration = this.services.get(serviceName);\n      if (!registration) {\n        clearInterval(interval);\n        this.healthCheckIntervals.delete(serviceName);\n        return;\n      }\n\n      try {\n        const health = await registration.instance.healthCheck();\n        const status: ServiceHealth = {\n          serviceName,\n          healthy: health.healthy,\n          lastCheck: new Date(),\n          details: health.details,\n        };\n\n        this.healthStatus.set(serviceName, status);\n\n        if (!health.healthy) {\n          logger.warn({ serviceName, details: health.details }, 'Service health check failed');\n        }\n      } catch (error) {\n        logger.error({ serviceName, error }, 'Health check error');\n\n        this.healthStatus.set(serviceName, {\n          serviceName,\n          healthy: false,\n          lastCheck: new Date(),\n          details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        });\n      }\n    }, intervalMs);\n\n    this.healthCheckIntervals.set(serviceName, interval);\n  }\n}\n\n// Export singleton instance\nexport const serviceRegistry = new ServiceRegistry();\n"],"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","ignoreList":[]}