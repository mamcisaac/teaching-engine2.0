91c35ad5ad71f04e18428fa7e05a786e
/* istanbul ignore next */
function cov_1ut12bppxy() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts";
  var hash = "dfa51f2b25a90d528b4b8eb06cceda9dc3d9ef8e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 15
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "1": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "2": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "3": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "4": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 101
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 59
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "7": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 92
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "9": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 59
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "11": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "12": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 24
        }
      },
      "13": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 46
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 50
        }
      },
      "16": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 59
        }
      },
      "17": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "18": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 25
        }
      },
      "19": {
        start: {
          line: 56,
          column: 25
        },
        end: {
          line: 56,
          column: 67
        }
      },
      "20": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "21": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "22": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 58
        }
      },
      "23": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 42
        }
      },
      "24": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 61
        }
      },
      "26": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "27": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 30
        }
      },
      "28": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 71,
          column: 25
        }
      },
      "29": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 55
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "31": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 75,
          column: 32
        }
      },
      "32": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "33": {
        start: {
          line: 77,
          column: 37
        },
        end: {
          line: 77,
          column: 67
        }
      },
      "34": {
        start: {
          line: 79,
          column: 40
        },
        end: {
          line: 79,
          column: 107
        }
      },
      "35": {
        start: {
          line: 79,
          column: 81
        },
        end: {
          line: 79,
          column: 106
        }
      },
      "36": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "37": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "38": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 66
        }
      },
      "39": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 54
        }
      },
      "40": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 54
        }
      },
      "41": {
        start: {
          line: 86,
          column: 24
        },
        end: {
          line: 86,
          column: 40
        }
      },
      "42": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 87,
          column: 89
        }
      },
      "43": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 93,
          column: 27
        }
      },
      "44": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 54
        }
      },
      "45": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 95,
          column: 40
        }
      },
      "46": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 94
        }
      },
      "47": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "48": {
        start: {
          line: 102,
          column: 42
        },
        end: {
          line: 102,
          column: 63
        }
      },
      "49": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 108
        }
      },
      "50": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "51": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "52": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 22
        }
      },
      "53": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 39
        }
      },
      "54": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 141,
          column: 10
        }
      },
      "55": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "56": {
        start: {
          line: 121,
          column: 31
        },
        end: {
          line: 121,
          column: 72
        }
      },
      "57": {
        start: {
          line: 122,
          column: 31
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "58": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 65
        }
      },
      "59": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 30
        }
      },
      "60": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 137,
          column: 17
        }
      },
      "61": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "62": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 30
        }
      },
      "63": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 47
        }
      },
      "64": {
        start: {
          line: 148,
          column: 22
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "65": {
        start: {
          line: 148,
          column: 71
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "66": {
        start: {
          line: 152,
          column: 22
        },
        end: {
          line: 152,
          column: 24
        }
      },
      "67": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "68": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "69": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 158,
          column: 19
        }
      },
      "70": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 32
        }
      },
      "71": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "72": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 49
        }
      },
      "73": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 49
        }
      },
      "74": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 12
        }
      },
      "75": {
        start: {
          line: 176,
          column: 73
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "76": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 58
        }
      },
      "77": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "78": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "79": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 42
        }
      },
      "80": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 30
        }
      },
      "81": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 34
        }
      },
      "82": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 58
        }
      },
      "83": {
        start: {
          line: 199,
          column: 25
        },
        end: {
          line: 228,
          column: 22
        }
      },
      "84": {
        start: {
          line: 200,
          column: 33
        },
        end: {
          line: 200,
          column: 63
        }
      },
      "85": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "86": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 40
        }
      },
      "87": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 62
        }
      },
      "88": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 23
        }
      },
      "89": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "90": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 72
        }
      },
      "91": {
        start: {
          line: 208,
          column: 31
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "92": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 59
        }
      },
      "93": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 217,
          column: 17
        }
      },
      "94": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 105
        }
      },
      "95": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 75
        }
      },
      "96": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "97": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 61
        }
      },
      "98": {
        start: {
          line: 233,
          column: 31
        },
        end: {
          line: 233,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 27
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 21
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 13
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 26
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 69
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 72
          },
          end: {
            line: 79,
            column: 73
          }
        },
        loc: {
          start: {
            line: 79,
            column: 81
          },
          end: {
            line: 79,
            column: 106
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 28
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 118
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 119,
            column: 68
          },
          end: {
            line: 119,
            column: 69
          }
        },
        loc: {
          start: {
            line: 119,
            column: 92
          },
          end: {
            line: 141,
            column: 9
          }
        },
        line: 119
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 25
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 148,
            column: 61
          },
          end: {
            line: 148,
            column: 62
          }
        },
        loc: {
          start: {
            line: 148,
            column: 71
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 148
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 22
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 166
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 175
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 176,
            column: 54
          },
          end: {
            line: 176,
            column: 55
          }
        },
        loc: {
          start: {
            line: 176,
            column: 73
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 176
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 21
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 184
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 51
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 198
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 199,
            column: 37
          },
          end: {
            line: 199,
            column: 38
          }
        },
        loc: {
          start: {
            line: 199,
            column: 49
          },
          end: {
            line: 228,
            column: 9
          }
        },
        line: 199
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 98,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 98,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 35
          },
          end: {
            line: 92,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 60
          },
          end: {
            line: 92,
            column: 73
          }
        }, {
          start: {
            line: 92,
            column: 76
          },
          end: {
            line: 92,
            column: 91
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 136,
            column: 38
          },
          end: {
            line: 136,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 63
          },
          end: {
            line: 136,
            column: 76
          }
        }, {
          start: {
            line: 136,
            column: 79
          },
          end: {
            line: 136,
            column: 94
          }
        }],
        line: 136
      },
      "9": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "10": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "11": {
        loc: {
          start: {
            line: 225,
            column: 38
          },
          end: {
            line: 225,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 63
          },
          end: {
            line: 225,
            column: 76
          }
        }, {
          start: {
            line: 225,
            column: 79
          },
          end: {
            line: 225,
            column: 94
          }
        }],
        line: 225
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts"],
      sourcesContent: ["import BaseService from './base/BaseService';\nimport logger from '../logger';\n\nexport interface ServiceHealth {\n  serviceName: string;\n  healthy: boolean;\n  lastCheck: Date;\n  details: unknown;\n}\n\nexport interface ServiceRegistration {\n  name: string;\n  instance: BaseService;\n  dependencies: string[];\n  singleton: boolean;\n  healthCheckInterval?: number;\n}\n\nexport class ServiceRegistry {\n  private services = new Map<string, ServiceRegistration>();\n  private healthStatus = new Map<string, ServiceHealth>();\n  private healthCheckIntervals = new Map<string, NodeJS.Timeout>();\n\n  /**\n   * Register a service instance\n   */\n  register(registration: ServiceRegistration): void {\n    if (this.services.has(registration.name)) {\n      logger.warn({ serviceName: registration.name }, 'Service already registered, replacing');\n    }\n\n    this.services.set(registration.name, registration);\n\n    // Start health monitoring if interval specified\n    if (registration.healthCheckInterval) {\n      this.startHealthMonitoring(registration.name, registration.healthCheckInterval);\n    }\n\n    logger.info(\n      {\n        serviceName: registration.name,\n        dependencies: registration.dependencies,\n        singleton: registration.singleton,\n      },\n      'Service registered',\n    );\n  }\n\n  /**\n   * Get a service instance\n   */\n  get<T extends BaseService>(serviceName: string): T | null {\n    const registration = this.services.get(serviceName);\n    if (!registration) {\n      logger.warn({ serviceName }, 'Service not found in registry');\n      return null;\n    }\n\n    return registration.instance as T;\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  has(serviceName: string): boolean {\n    return this.services.has(serviceName);\n  }\n\n  /**\n   * Get all registered services\n   */\n  getAll(): ServiceRegistration[] {\n    return Array.from(this.services.values());\n  }\n\n  /**\n   * Unregister a service\n   */\n  unregister(serviceName: string): boolean {\n    const registration = this.services.get(serviceName);\n    if (!registration) {\n      return false;\n    }\n\n    // Stop health monitoring\n    const interval = this.healthCheckIntervals.get(serviceName);\n    if (interval) {\n      clearInterval(interval);\n      this.healthCheckIntervals.delete(serviceName);\n    }\n\n    this.services.delete(serviceName);\n    this.healthStatus.delete(serviceName);\n\n    logger.info({ serviceName }, 'Service unregistered');\n    return true;\n  }\n\n  /**\n   * Initialize all services in dependency order\n   */\n  async initializeAll(): Promise<{\n    initialized: string[];\n    failed: { serviceName: string; error: string }[];\n  }> {\n    const initialized: string[] = [];\n    const failed: { serviceName: string; error: string }[] = [];\n    const remaining = new Set(this.services.keys());\n\n    // Initialize services in dependency order\n    while (remaining.size > 0) {\n      let progress = false;\n\n      for (const serviceName of remaining) {\n        const registration = this.services.get(serviceName)!;\n\n        // Check if all dependencies are initialized\n        const dependenciesMet = registration.dependencies.every((dep) => initialized.includes(dep));\n\n        if (dependenciesMet) {\n          try {\n            // Services extending BaseService have built-in health checks\n            await registration.instance.healthCheck();\n            initialized.push(serviceName);\n            remaining.delete(serviceName);\n            progress = true;\n\n            logger.info({ serviceName }, 'Service initialized successfully');\n          } catch (error) {\n            failed.push({\n              serviceName,\n              error: error instanceof Error ? error.message : 'Unknown error',\n            });\n            remaining.delete(serviceName);\n            progress = true;\n\n            logger.error({ serviceName, error }, 'Service initialization failed');\n          }\n        }\n      }\n\n      // Detect circular dependencies\n      if (!progress) {\n        const remainingServices = Array.from(remaining);\n        logger.error({ remainingServices }, 'Circular dependency detected or missing dependencies');\n\n        for (const serviceName of remaining) {\n          failed.push({\n            serviceName,\n            error: 'Circular dependency or missing dependencies',\n          });\n        }\n        break;\n      }\n    }\n\n    return { initialized, failed };\n  }\n\n  /**\n   * Get health status of all services\n   */\n  async getHealthStatus(): Promise<ServiceHealth[]> {\n    const healthChecks = Array.from(this.services.values()).map(async (registration) => {\n      try {\n        const health = await registration.instance.healthCheck();\n        const status: ServiceHealth = {\n          serviceName: registration.name,\n          healthy: health.healthy,\n          lastCheck: new Date(),\n          details: health.details,\n        };\n\n        this.healthStatus.set(registration.name, status);\n        return status;\n      } catch (error) {\n        const status: ServiceHealth = {\n          serviceName: registration.name,\n          healthy: false,\n          lastCheck: new Date(),\n          details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        };\n\n        this.healthStatus.set(registration.name, status);\n        return status;\n      }\n    });\n\n    return await Promise.all(healthChecks);\n  }\n\n  /**\n   * Get dependency graph of all services\n   */\n  getDependencyGraph(): {\n    nodes: { id: string; label: string }[];\n    edges: { from: string; to: string }[];\n  } {\n    const nodes = Array.from(this.services.values()).map((reg) => ({\n      id: reg.name,\n      label: reg.name,\n    }));\n\n    const edges: { from: string; to: string }[] = [];\n\n    for (const registration of this.services.values()) {\n      for (const dependency of registration.dependencies) {\n        edges.push({\n          from: dependency,\n          to: registration.name,\n        });\n      }\n    }\n\n    return { nodes, edges };\n  }\n\n  /**\n   * Reset all service metrics\n   */\n  resetAllMetrics(): void {\n    for (const registration of this.services.values()) {\n      registration.instance.resetMetrics();\n    }\n\n    logger.info('All service metrics reset');\n  }\n\n  /**\n   * Get performance metrics for all services\n   */\n  getAllMetrics(): { serviceName: string; metrics: unknown }[] {\n    return Array.from(this.services.values()).map((registration) => ({\n      serviceName: registration.name,\n      metrics: registration.instance.getMetrics(),\n    }));\n  }\n\n  /**\n   * Gracefully shutdown all services\n   */\n  async shutdown(): Promise<void> {\n    logger.info('Starting service registry shutdown');\n\n    // Stop all health check intervals\n    for (const interval of this.healthCheckIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.healthCheckIntervals.clear();\n\n    // Services don't have explicit shutdown methods in BaseService\n    // But we can clear the registry\n    this.services.clear();\n    this.healthStatus.clear();\n\n    logger.info('Service registry shutdown complete');\n  }\n\n  // Private methods\n\n  private startHealthMonitoring(serviceName: string, intervalMs: number): void {\n    const interval = setInterval(async () => {\n      const registration = this.services.get(serviceName);\n      if (!registration) {\n        clearInterval(interval);\n        this.healthCheckIntervals.delete(serviceName);\n        return;\n      }\n\n      try {\n        const health = await registration.instance.healthCheck();\n        const status: ServiceHealth = {\n          serviceName,\n          healthy: health.healthy,\n          lastCheck: new Date(),\n          details: health.details,\n        };\n\n        this.healthStatus.set(serviceName, status);\n\n        if (!health.healthy) {\n          logger.warn({ serviceName, details: health.details }, 'Service health check failed');\n        }\n      } catch (error) {\n        logger.error({ serviceName, error }, 'Health check error');\n\n        this.healthStatus.set(serviceName, {\n          serviceName,\n          healthy: false,\n          lastCheck: new Date(),\n          details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        });\n      }\n    }, intervalMs);\n\n    this.healthCheckIntervals.set(serviceName, interval);\n  }\n}\n\n// Export singleton instance\nexport const serviceRegistry = new ServiceRegistry();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dfa51f2b25a90d528b4b8eb06cceda9dc3d9ef8e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ut12bppxy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ut12bppxy();
import logger from '../logger';
export class ServiceRegistry {
  services =
  /* istanbul ignore next */
  (cov_1ut12bppxy().s[0]++, new Map());
  healthStatus =
  /* istanbul ignore next */
  (cov_1ut12bppxy().s[1]++, new Map());
  healthCheckIntervals =
  /* istanbul ignore next */
  (cov_1ut12bppxy().s[2]++, new Map());
  /**
   * Register a service instance
   */
  register(registration) {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[0]++;
    cov_1ut12bppxy().s[3]++;
    if (this.services.has(registration.name)) {
      /* istanbul ignore next */
      cov_1ut12bppxy().b[0][0]++;
      cov_1ut12bppxy().s[4]++;
      logger.warn({
        serviceName: registration.name
      }, 'Service already registered, replacing');
    } else
    /* istanbul ignore next */
    {
      cov_1ut12bppxy().b[0][1]++;
    }
    cov_1ut12bppxy().s[5]++;
    this.services.set(registration.name, registration);
    // Start health monitoring if interval specified
    /* istanbul ignore next */
    cov_1ut12bppxy().s[6]++;
    if (registration.healthCheckInterval) {
      /* istanbul ignore next */
      cov_1ut12bppxy().b[1][0]++;
      cov_1ut12bppxy().s[7]++;
      this.startHealthMonitoring(registration.name, registration.healthCheckInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1ut12bppxy().b[1][1]++;
    }
    cov_1ut12bppxy().s[8]++;
    logger.info({
      serviceName: registration.name,
      dependencies: registration.dependencies,
      singleton: registration.singleton
    }, 'Service registered');
  }
  /**
   * Get a service instance
   */
  get(serviceName) {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[1]++;
    const registration =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[9]++, this.services.get(serviceName));
    /* istanbul ignore next */
    cov_1ut12bppxy().s[10]++;
    if (!registration) {
      /* istanbul ignore next */
      cov_1ut12bppxy().b[2][0]++;
      cov_1ut12bppxy().s[11]++;
      logger.warn({
        serviceName
      }, 'Service not found in registry');
      /* istanbul ignore next */
      cov_1ut12bppxy().s[12]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1ut12bppxy().b[2][1]++;
    }
    cov_1ut12bppxy().s[13]++;
    return registration.instance;
  }
  /**
   * Check if a service is registered
   */
  has(serviceName) {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[2]++;
    cov_1ut12bppxy().s[14]++;
    return this.services.has(serviceName);
  }
  /**
   * Get all registered services
   */
  getAll() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[3]++;
    cov_1ut12bppxy().s[15]++;
    return Array.from(this.services.values());
  }
  /**
   * Unregister a service
   */
  unregister(serviceName) {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[4]++;
    const registration =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[16]++, this.services.get(serviceName));
    /* istanbul ignore next */
    cov_1ut12bppxy().s[17]++;
    if (!registration) {
      /* istanbul ignore next */
      cov_1ut12bppxy().b[3][0]++;
      cov_1ut12bppxy().s[18]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1ut12bppxy().b[3][1]++;
    }
    // Stop health monitoring
    const interval =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[19]++, this.healthCheckIntervals.get(serviceName));
    /* istanbul ignore next */
    cov_1ut12bppxy().s[20]++;
    if (interval) {
      /* istanbul ignore next */
      cov_1ut12bppxy().b[4][0]++;
      cov_1ut12bppxy().s[21]++;
      clearInterval(interval);
      /* istanbul ignore next */
      cov_1ut12bppxy().s[22]++;
      this.healthCheckIntervals.delete(serviceName);
    } else
    /* istanbul ignore next */
    {
      cov_1ut12bppxy().b[4][1]++;
    }
    cov_1ut12bppxy().s[23]++;
    this.services.delete(serviceName);
    /* istanbul ignore next */
    cov_1ut12bppxy().s[24]++;
    this.healthStatus.delete(serviceName);
    /* istanbul ignore next */
    cov_1ut12bppxy().s[25]++;
    logger.info({
      serviceName
    }, 'Service unregistered');
    /* istanbul ignore next */
    cov_1ut12bppxy().s[26]++;
    return true;
  }
  /**
   * Initialize all services in dependency order
   */
  async initializeAll() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[5]++;
    const initialized =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[27]++, []);
    const failed =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[28]++, []);
    const remaining =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[29]++, new Set(this.services.keys()));
    // Initialize services in dependency order
    /* istanbul ignore next */
    cov_1ut12bppxy().s[30]++;
    while (remaining.size > 0) {
      let progress =
      /* istanbul ignore next */
      (cov_1ut12bppxy().s[31]++, false);
      /* istanbul ignore next */
      cov_1ut12bppxy().s[32]++;
      for (const serviceName of remaining) {
        const registration =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[33]++, this.services.get(serviceName));
        // Check if all dependencies are initialized
        const dependenciesMet =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[34]++, registration.dependencies.every(dep => {
          /* istanbul ignore next */
          cov_1ut12bppxy().f[6]++;
          cov_1ut12bppxy().s[35]++;
          return initialized.includes(dep);
        }));
        /* istanbul ignore next */
        cov_1ut12bppxy().s[36]++;
        if (dependenciesMet) {
          /* istanbul ignore next */
          cov_1ut12bppxy().b[5][0]++;
          cov_1ut12bppxy().s[37]++;
          try {
            /* istanbul ignore next */
            cov_1ut12bppxy().s[38]++;
            // Services extending BaseService have built-in health checks
            await registration.instance.healthCheck();
            /* istanbul ignore next */
            cov_1ut12bppxy().s[39]++;
            initialized.push(serviceName);
            /* istanbul ignore next */
            cov_1ut12bppxy().s[40]++;
            remaining.delete(serviceName);
            /* istanbul ignore next */
            cov_1ut12bppxy().s[41]++;
            progress = true;
            /* istanbul ignore next */
            cov_1ut12bppxy().s[42]++;
            logger.info({
              serviceName
            }, 'Service initialized successfully');
          } catch (error) {
            /* istanbul ignore next */
            cov_1ut12bppxy().s[43]++;
            failed.push({
              serviceName,
              error: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1ut12bppxy().b[6][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1ut12bppxy().b[6][1]++, 'Unknown error')
            });
            /* istanbul ignore next */
            cov_1ut12bppxy().s[44]++;
            remaining.delete(serviceName);
            /* istanbul ignore next */
            cov_1ut12bppxy().s[45]++;
            progress = true;
            /* istanbul ignore next */
            cov_1ut12bppxy().s[46]++;
            logger.error({
              serviceName,
              error
            }, 'Service initialization failed');
          }
        } else
        /* istanbul ignore next */
        {
          cov_1ut12bppxy().b[5][1]++;
        }
      }
      // Detect circular dependencies
      /* istanbul ignore next */
      cov_1ut12bppxy().s[47]++;
      if (!progress) {
        /* istanbul ignore next */
        cov_1ut12bppxy().b[7][0]++;
        const remainingServices =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[48]++, Array.from(remaining));
        /* istanbul ignore next */
        cov_1ut12bppxy().s[49]++;
        logger.error({
          remainingServices
        }, 'Circular dependency detected or missing dependencies');
        /* istanbul ignore next */
        cov_1ut12bppxy().s[50]++;
        for (const serviceName of remaining) {
          /* istanbul ignore next */
          cov_1ut12bppxy().s[51]++;
          failed.push({
            serviceName,
            error: 'Circular dependency or missing dependencies'
          });
        }
        /* istanbul ignore next */
        cov_1ut12bppxy().s[52]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_1ut12bppxy().b[7][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1ut12bppxy().s[53]++;
    return {
      initialized,
      failed
    };
  }
  /**
   * Get health status of all services
   */
  async getHealthStatus() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[7]++;
    const healthChecks =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[54]++, Array.from(this.services.values()).map(async registration => {
      /* istanbul ignore next */
      cov_1ut12bppxy().f[8]++;
      cov_1ut12bppxy().s[55]++;
      try {
        const health =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[56]++, await registration.instance.healthCheck());
        const status =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[57]++, {
          serviceName: registration.name,
          healthy: health.healthy,
          lastCheck: new Date(),
          details: health.details
        });
        /* istanbul ignore next */
        cov_1ut12bppxy().s[58]++;
        this.healthStatus.set(registration.name, status);
        /* istanbul ignore next */
        cov_1ut12bppxy().s[59]++;
        return status;
      } catch (error) {
        const status =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[60]++, {
          serviceName: registration.name,
          healthy: false,
          lastCheck: new Date(),
          details: {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_1ut12bppxy().b[8][0]++, error.message) :
            /* istanbul ignore next */
            (cov_1ut12bppxy().b[8][1]++, 'Unknown error')
          }
        });
        /* istanbul ignore next */
        cov_1ut12bppxy().s[61]++;
        this.healthStatus.set(registration.name, status);
        /* istanbul ignore next */
        cov_1ut12bppxy().s[62]++;
        return status;
      }
    }));
    /* istanbul ignore next */
    cov_1ut12bppxy().s[63]++;
    return await Promise.all(healthChecks);
  }
  /**
   * Get dependency graph of all services
   */
  getDependencyGraph() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[9]++;
    const nodes =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[64]++, Array.from(this.services.values()).map(reg => {
      /* istanbul ignore next */
      cov_1ut12bppxy().f[10]++;
      cov_1ut12bppxy().s[65]++;
      return {
        id: reg.name,
        label: reg.name
      };
    }));
    const edges =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[66]++, []);
    /* istanbul ignore next */
    cov_1ut12bppxy().s[67]++;
    for (const registration of this.services.values()) {
      /* istanbul ignore next */
      cov_1ut12bppxy().s[68]++;
      for (const dependency of registration.dependencies) {
        /* istanbul ignore next */
        cov_1ut12bppxy().s[69]++;
        edges.push({
          from: dependency,
          to: registration.name
        });
      }
    }
    /* istanbul ignore next */
    cov_1ut12bppxy().s[70]++;
    return {
      nodes,
      edges
    };
  }
  /**
   * Reset all service metrics
   */
  resetAllMetrics() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[11]++;
    cov_1ut12bppxy().s[71]++;
    for (const registration of this.services.values()) {
      /* istanbul ignore next */
      cov_1ut12bppxy().s[72]++;
      registration.instance.resetMetrics();
    }
    /* istanbul ignore next */
    cov_1ut12bppxy().s[73]++;
    logger.info('All service metrics reset');
  }
  /**
   * Get performance metrics for all services
   */
  getAllMetrics() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[12]++;
    cov_1ut12bppxy().s[74]++;
    return Array.from(this.services.values()).map(registration => {
      /* istanbul ignore next */
      cov_1ut12bppxy().f[13]++;
      cov_1ut12bppxy().s[75]++;
      return {
        serviceName: registration.name,
        metrics: registration.instance.getMetrics()
      };
    });
  }
  /**
   * Gracefully shutdown all services
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[14]++;
    cov_1ut12bppxy().s[76]++;
    logger.info('Starting service registry shutdown');
    // Stop all health check intervals
    /* istanbul ignore next */
    cov_1ut12bppxy().s[77]++;
    for (const interval of this.healthCheckIntervals.values()) {
      /* istanbul ignore next */
      cov_1ut12bppxy().s[78]++;
      clearInterval(interval);
    }
    /* istanbul ignore next */
    cov_1ut12bppxy().s[79]++;
    this.healthCheckIntervals.clear();
    // Services don't have explicit shutdown methods in BaseService
    // But we can clear the registry
    /* istanbul ignore next */
    cov_1ut12bppxy().s[80]++;
    this.services.clear();
    /* istanbul ignore next */
    cov_1ut12bppxy().s[81]++;
    this.healthStatus.clear();
    /* istanbul ignore next */
    cov_1ut12bppxy().s[82]++;
    logger.info('Service registry shutdown complete');
  }
  // Private methods
  startHealthMonitoring(serviceName, intervalMs) {
    /* istanbul ignore next */
    cov_1ut12bppxy().f[15]++;
    const interval =
    /* istanbul ignore next */
    (cov_1ut12bppxy().s[83]++, setInterval(async () => {
      /* istanbul ignore next */
      cov_1ut12bppxy().f[16]++;
      const registration =
      /* istanbul ignore next */
      (cov_1ut12bppxy().s[84]++, this.services.get(serviceName));
      /* istanbul ignore next */
      cov_1ut12bppxy().s[85]++;
      if (!registration) {
        /* istanbul ignore next */
        cov_1ut12bppxy().b[9][0]++;
        cov_1ut12bppxy().s[86]++;
        clearInterval(interval);
        /* istanbul ignore next */
        cov_1ut12bppxy().s[87]++;
        this.healthCheckIntervals.delete(serviceName);
        /* istanbul ignore next */
        cov_1ut12bppxy().s[88]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1ut12bppxy().b[9][1]++;
      }
      cov_1ut12bppxy().s[89]++;
      try {
        const health =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[90]++, await registration.instance.healthCheck());
        const status =
        /* istanbul ignore next */
        (cov_1ut12bppxy().s[91]++, {
          serviceName,
          healthy: health.healthy,
          lastCheck: new Date(),
          details: health.details
        });
        /* istanbul ignore next */
        cov_1ut12bppxy().s[92]++;
        this.healthStatus.set(serviceName, status);
        /* istanbul ignore next */
        cov_1ut12bppxy().s[93]++;
        if (!health.healthy) {
          /* istanbul ignore next */
          cov_1ut12bppxy().b[10][0]++;
          cov_1ut12bppxy().s[94]++;
          logger.warn({
            serviceName,
            details: health.details
          }, 'Service health check failed');
        } else
        /* istanbul ignore next */
        {
          cov_1ut12bppxy().b[10][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1ut12bppxy().s[95]++;
        logger.error({
          serviceName,
          error
        }, 'Health check error');
        /* istanbul ignore next */
        cov_1ut12bppxy().s[96]++;
        this.healthStatus.set(serviceName, {
          serviceName,
          healthy: false,
          lastCheck: new Date(),
          details: {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_1ut12bppxy().b[11][0]++, error.message) :
            /* istanbul ignore next */
            (cov_1ut12bppxy().b[11][1]++, 'Unknown error')
          }
        });
      }
    }, intervalMs));
    /* istanbul ignore next */
    cov_1ut12bppxy().s[97]++;
    this.healthCheckIntervals.set(serviceName, interval);
  }
}
// Export singleton instance
export const serviceRegistry =
/* istanbul ignore next */
(cov_1ut12bppxy().s[98]++, new ServiceRegistry());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,