723b1cafaa5d7b15679bf9dd7e655e73
/* istanbul ignore next */
function cov_2kczl3stcs() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/activity-collections.ts";
  var hash = "657419386c1be3bc18b90e590e51a9be4af84843";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/activity-collections.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 23
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "3": {
        start: {
          line: 9,
          column: 42
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "4": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "5": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 29,
          column: 10
        }
      },
      "6": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "7": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 55
        }
      },
      "8": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "9": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 85,
          column: 3
        }
      },
      "10": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "11": {
        start: {
          line: 46,
          column: 33
        },
        end: {
          line: 46,
          column: 43
        }
      },
      "12": {
        start: {
          line: 47,
          column: 27
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "13": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "14": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "15": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "16": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 62
        }
      },
      "17": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "18": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 91,
          column: 2
        }
      },
      "19": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "20": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "21": {
        start: {
          line: 94,
          column: 21
        },
        end: {
          line: 94,
          column: 59
        }
      },
      "22": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "23": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "24": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 57
        }
      },
      "25": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "26": {
        start: {
          line: 117,
          column: 31
        },
        end: {
          line: 121,
          column: 2
        }
      },
      "27": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 155,
          column: 3
        }
      },
      "28": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "29": {
        start: {
          line: 124,
          column: 33
        },
        end: {
          line: 124,
          column: 43
        }
      },
      "30": {
        start: {
          line: 125,
          column: 21
        },
        end: {
          line: 125,
          column: 59
        }
      },
      "31": {
        start: {
          line: 127,
          column: 25
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "32": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "33": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "34": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "35": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "36": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 57
        }
      },
      "37": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "38": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 188,
          column: 3
        }
      },
      "39": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "40": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 159,
          column: 43
        }
      },
      "41": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 166,
          column: 10
        }
      },
      "42": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "43": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "44": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "45": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "46": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 57
        }
      },
      "47": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "48": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 192,
          column: 2
        }
      },
      "49": {
        start: {
          line: 193,
          column: 0
        },
        end: {
          line: 251,
          column: 3
        }
      },
      "50": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "51": {
        start: {
          line: 195,
          column: 33
        },
        end: {
          line: 195,
          column: 43
        }
      },
      "52": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 196,
          column: 64
        }
      },
      "53": {
        start: {
          line: 198,
          column: 27
        },
        end: {
          line: 203,
          column: 10
        }
      },
      "54": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "55": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "56": {
        start: {
          line: 211,
          column: 25
        },
        end: {
          line: 213,
          column: 10
        }
      },
      "57": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "58": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "59": {
        start: {
          line: 221,
          column: 21
        },
        end: {
          line: 238,
          column: 10
        }
      },
      "60": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 242,
          column: 11
        }
      },
      "61": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 66
        }
      },
      "62": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "63": {
        start: {
          line: 253,
          column: 0
        },
        end: {
          line: 289,
          column: 3
        }
      },
      "64": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 288,
          column: 5
        }
      },
      "65": {
        start: {
          line: 255,
          column: 45
        },
        end: {
          line: 255,
          column: 55
        }
      },
      "66": {
        start: {
          line: 257,
          column: 27
        },
        end: {
          line: 262,
          column: 10
        }
      },
      "67": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "68": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "69": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      },
      "70": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "71": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 71
        }
      },
      "72": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "73": {
        start: {
          line: 291,
          column: 0
        },
        end: {
          line: 322,
          column: 3
        }
      },
      "74": {
        start: {
          line: 292,
          column: 4
        },
        end: {
          line: 321,
          column: 5
        }
      },
      "75": {
        start: {
          line: 293,
          column: 31
        },
        end: {
          line: 293,
          column: 40
        }
      },
      "76": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 309,
          column: 10
        }
      },
      "77": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 313,
          column: 11
        }
      },
      "78": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 64
        }
      },
      "79": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 320,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 33
          }
        },
        loc: {
          start: {
            line: 7,
            column: 52
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 44,
            column: 46
          }
        },
        loc: {
          start: {
            line: 44,
            column: 65
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 92,
            column: 33
          },
          end: {
            line: 92,
            column: 34
          }
        },
        loc: {
          start: {
            line: 92,
            column: 53
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 92
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 122,
            column: 45
          },
          end: {
            line: 122,
            column: 46
          }
        },
        loc: {
          start: {
            line: 122,
            column: 65
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 122
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 157,
            column: 48
          },
          end: {
            line: 157,
            column: 49
          }
        },
        loc: {
          start: {
            line: 157,
            column: 68
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 157
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 193,
            column: 57
          },
          end: {
            line: 193,
            column: 58
          }
        },
        loc: {
          start: {
            line: 193,
            column: 77
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 193
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 253,
            column: 71
          },
          end: {
            line: 253,
            column: 72
          }
        },
        loc: {
          start: {
            line: 253,
            column: 91
          },
          end: {
            line: 289,
            column: 1
          }
        },
        line: 253
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 291,
            column: 47
          },
          end: {
            line: 291,
            column: 48
          }
        },
        loc: {
          start: {
            line: 291,
            column: 67
          },
          end: {
            line: 322,
            column: 1
          }
        },
        line: 291
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 9,
            column: 37
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 14,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 13,
            column: 13
          }
        }, {
          start: {
            line: 14,
            column: 14
          },
          end: {
            line: 14,
            column: 37
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 39
          }
        }, {
          start: {
            line: 99,
            column: 43
          },
          end: {
            line: 99,
            column: 48
          }
        }],
        line: 99
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 19
          },
          end: {
            line: 112,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 49
          },
          end: {
            line: 112,
            column: 61
          }
        }, {
          start: {
            line: 112,
            column: 64
          },
          end: {
            line: 112,
            column: 93
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 152,
            column: 19
          },
          end: {
            line: 152,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 49
          },
          end: {
            line: 152,
            column: 61
          }
        }, {
          start: {
            line: 152,
            column: 64
          },
          end: {
            line: 152,
            column: 93
          }
        }],
        line: 152
      },
      "7": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "8": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "9": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "10": {
        loc: {
          start: {
            line: 248,
            column: 19
          },
          end: {
            line: 248,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 49
          },
          end: {
            line: 248,
            column: 61
          }
        }, {
          start: {
            line: 248,
            column: 64
          },
          end: {
            line: 248,
            column: 102
          }
        }],
        line: 248
      },
      "11": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "12": {
        loc: {
          start: {
            line: 293,
            column: 16
          },
          end: {
            line: 293,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 293,
            column: 24
          },
          end: {
            line: 293,
            column: 26
          }
        }],
        line: 293
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/activity-collections.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/activity-collections.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { authMiddleware } from '../middleware/auth';\nimport { z } from 'zod';\nimport { prisma } from '../prisma';\n\nconst router = Router();\n\n// Get user's collections\nrouter.get('/', authMiddleware, async (req, res) => {\n  try {\n    const { includePublic = false } = req.query;\n\n    const where = includePublic\n      ? {\n          OR: [{ userId: req.user!.id }, { isPublic: true }],\n        }\n      : { userId: req.user!.id };\n\n    const collections = await prisma.activityCollection.findMany({\n      where,\n      include: {\n        _count: {\n          select: { items: true },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n      orderBy: { updatedAt: 'desc' },\n    });\n\n    res.json({\n      success: true,\n      data: collections,\n    });\n  } catch (error) {\n    console.error('Get collections error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get collections',\n    });\n  }\n});\n\n// Get collection details with activities\nrouter.get('/:collectionId', authMiddleware, async (req, res) => {\n  try {\n    const { collectionId } = req.params;\n\n    const collection = await prisma.activityCollection.findFirst({\n      where: {\n        id: collectionId,\n        OR: [{ userId: req.user!.id }, { isPublic: true }],\n      },\n      include: {\n        items: {\n          include: {\n            activity: true,\n          },\n          orderBy: { addedAt: 'desc' },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!collection) {\n      return res.status(404).json({\n        success: false,\n        error: 'Collection not found',\n      });\n    }\n\n    res.json({\n      success: true,\n      data: collection,\n    });\n  } catch (error) {\n    console.error('Get collection details error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get collection details',\n    });\n  }\n});\n\n// Create a new collection\nconst createCollectionSchema = z.object({\n  name: z.string().min(1).max(100),\n  description: z.string().optional(),\n  isPublic: z.boolean().optional().default(false),\n});\n\nrouter.post('/', authMiddleware, async (req, res) => {\n  try {\n    const data = createCollectionSchema.parse(req.body);\n\n    const collection = await prisma.activityCollection.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        isPublic: data.isPublic || false,\n        userId: req.user!.id,\n      },\n    });\n\n    res.json({\n      success: true,\n      data: collection,\n    });\n  } catch (error) {\n    console.error('Create collection error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to create collection',\n    });\n  }\n});\n\n// Update collection\nconst updateCollectionSchema = z.object({\n  name: z.string().min(1).max(100).optional(),\n  description: z.string().optional(),\n  isPublic: z.boolean().optional(),\n});\n\nrouter.put('/:collectionId', authMiddleware, async (req, res) => {\n  try {\n    const { collectionId } = req.params;\n    const data = updateCollectionSchema.parse(req.body);\n\n    // Check ownership\n    const existing = await prisma.activityCollection.findFirst({\n      where: {\n        id: collectionId,\n        userId: req.user!.id,\n      },\n    });\n\n    if (!existing) {\n      return res.status(404).json({\n        success: false,\n        error: 'Collection not found or you do not have permission to edit it',\n      });\n    }\n\n    const updated = await prisma.activityCollection.update({\n      where: { id: collectionId },\n      data,\n    });\n\n    res.json({\n      success: true,\n      data: updated,\n    });\n  } catch (error) {\n    console.error('Update collection error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to update collection',\n    });\n  }\n});\n\n// Delete collection\nrouter.delete('/:collectionId', authMiddleware, async (req, res) => {\n  try {\n    const { collectionId } = req.params;\n\n    // Check ownership\n    const existing = await prisma.activityCollection.findFirst({\n      where: {\n        id: collectionId,\n        userId: req.user!.id,\n      },\n    });\n\n    if (!existing) {\n      return res.status(404).json({\n        success: false,\n        error: 'Collection not found or you do not have permission to delete it',\n      });\n    }\n\n    await prisma.activityCollection.delete({\n      where: { id: collectionId },\n    });\n\n    res.json({\n      success: true,\n      message: 'Collection deleted successfully',\n    });\n  } catch (error) {\n    console.error('Delete collection error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete collection',\n    });\n  }\n});\n\n// Add activity to collection\nconst addActivitySchema = z.object({\n  activityId: z.string(),\n});\n\nrouter.post('/:collectionId/activities', authMiddleware, async (req, res) => {\n  try {\n    const { collectionId } = req.params;\n    const { activityId } = addActivitySchema.parse(req.body);\n\n    // Check collection ownership\n    const collection = await prisma.activityCollection.findFirst({\n      where: {\n        id: collectionId,\n        userId: req.user!.id,\n      },\n    });\n\n    if (!collection) {\n      return res.status(404).json({\n        success: false,\n        error: 'Collection not found or you do not have permission to modify it',\n      });\n    }\n\n    // Check if activity exists\n    const activity = await prisma.externalActivity.findUnique({\n      where: { id: activityId },\n    });\n\n    if (!activity) {\n      return res.status(404).json({\n        success: false,\n        error: 'Activity not found',\n      });\n    }\n\n    // Add to collection (upsert to avoid duplicates)\n    const item = await prisma.activityCollectionItem.upsert({\n      where: {\n        collectionId_activityId: {\n          collectionId,\n          activityId,\n        },\n      },\n      update: {\n        addedAt: new Date(), // Update timestamp if re-adding\n      },\n      create: {\n        collectionId,\n        activityId,\n      },\n      include: {\n        activity: true,\n      },\n    });\n\n    res.json({\n      success: true,\n      data: item,\n    });\n  } catch (error) {\n    console.error('Add activity to collection error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to add activity to collection',\n    });\n  }\n});\n\n// Remove activity from collection\nrouter.delete('/:collectionId/activities/:activityId', authMiddleware, async (req, res) => {\n  try {\n    const { collectionId, activityId } = req.params;\n\n    // Check collection ownership\n    const collection = await prisma.activityCollection.findFirst({\n      where: {\n        id: collectionId,\n        userId: req.user!.id,\n      },\n    });\n\n    if (!collection) {\n      return res.status(404).json({\n        success: false,\n        error: 'Collection not found or you do not have permission to modify it',\n      });\n    }\n\n    await prisma.activityCollectionItem.delete({\n      where: {\n        collectionId_activityId: {\n          collectionId,\n          activityId,\n        },\n      },\n    });\n\n    res.json({\n      success: true,\n      message: 'Activity removed from collection',\n    });\n  } catch (error) {\n    console.error('Remove activity from collection error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to remove activity from collection',\n    });\n  }\n});\n\n// Get popular/trending collections\nrouter.get('/trending/public', authMiddleware, async (req, res) => {\n  try {\n    const { limit = 10 } = req.query;\n\n    const collections = await prisma.activityCollection.findMany({\n      where: { isPublic: true },\n      include: {\n        _count: {\n          select: { items: true },\n        },\n        user: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n      orderBy: [{ items: { _count: 'desc' } }, { updatedAt: 'desc' }],\n      take: Number(limit),\n    });\n\n    res.json({\n      success: true,\n      data: collections,\n    });\n  } catch (error) {\n    console.error('Get trending collections error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get trending collections',\n    });\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "657419386c1be3bc18b90e590e51a9be4af84843"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kczl3stcs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kczl3stcs();
import { Router } from 'express';
import { authMiddleware } from '../middleware/auth';
import { z } from 'zod';
import { prisma } from '../prisma';
const router =
/* istanbul ignore next */
(cov_2kczl3stcs().s[0]++, Router());
// Get user's collections
/* istanbul ignore next */
cov_2kczl3stcs().s[1]++;
router.get('/', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[0]++;
  cov_2kczl3stcs().s[2]++;
  try {
    const {
      includePublic =
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[0][0]++, false)
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[3]++, req.query);
    const where =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[4]++, includePublic ?
    /* istanbul ignore next */
    (cov_2kczl3stcs().b[1][0]++, {
      OR: [{
        userId: req.user.id
      }, {
        isPublic: true
      }]
    }) :
    /* istanbul ignore next */
    (cov_2kczl3stcs().b[1][1]++, {
      userId: req.user.id
    }));
    const collections =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[5]++, await prisma.activityCollection.findMany({
      where,
      include: {
        _count: {
          select: {
            items: true
          }
        },
        user: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: {
        updatedAt: 'desc'
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[6]++;
    res.json({
      success: true,
      data: collections
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[7]++;
    console.error('Get collections error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[8]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get collections'
    });
  }
});
// Get collection details with activities
/* istanbul ignore next */
cov_2kczl3stcs().s[9]++;
router.get('/:collectionId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[1]++;
  cov_2kczl3stcs().s[10]++;
  try {
    const {
      collectionId
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[11]++, req.params);
    const collection =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[12]++, await prisma.activityCollection.findFirst({
      where: {
        id: collectionId,
        OR: [{
          userId: req.user.id
        }, {
          isPublic: true
        }]
      },
      include: {
        items: {
          include: {
            activity: true
          },
          orderBy: {
            addedAt: 'desc'
          }
        },
        user: {
          select: {
            id: true,
            name: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[13]++;
    if (!collection) {
      /* istanbul ignore next */
      cov_2kczl3stcs().b[2][0]++;
      cov_2kczl3stcs().s[14]++;
      return res.status(404).json({
        success: false,
        error: 'Collection not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kczl3stcs().b[2][1]++;
    }
    cov_2kczl3stcs().s[15]++;
    res.json({
      success: true,
      data: collection
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[16]++;
    console.error('Get collection details error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[17]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get collection details'
    });
  }
});
// Create a new collection
const createCollectionSchema =
/* istanbul ignore next */
(cov_2kczl3stcs().s[18]++, z.object({
  name: z.string().min(1).max(100),
  description: z.string().optional(),
  isPublic: z.boolean().optional().default(false)
}));
/* istanbul ignore next */
cov_2kczl3stcs().s[19]++;
router.post('/', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[2]++;
  cov_2kczl3stcs().s[20]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[21]++, createCollectionSchema.parse(req.body));
    const collection =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[22]++, await prisma.activityCollection.create({
      data: {
        name: data.name,
        description: data.description,
        isPublic:
        /* istanbul ignore next */
        (cov_2kczl3stcs().b[3][0]++, data.isPublic) ||
        /* istanbul ignore next */
        (cov_2kczl3stcs().b[3][1]++, false),
        userId: req.user.id
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[23]++;
    res.json({
      success: true,
      data: collection
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[24]++;
    console.error('Create collection error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[25]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[4][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[4][1]++, 'Failed to create collection')
    });
  }
});
// Update collection
const updateCollectionSchema =
/* istanbul ignore next */
(cov_2kczl3stcs().s[26]++, z.object({
  name: z.string().min(1).max(100).optional(),
  description: z.string().optional(),
  isPublic: z.boolean().optional()
}));
/* istanbul ignore next */
cov_2kczl3stcs().s[27]++;
router.put('/:collectionId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[3]++;
  cov_2kczl3stcs().s[28]++;
  try {
    const {
      collectionId
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[29]++, req.params);
    const data =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[30]++, updateCollectionSchema.parse(req.body));
    // Check ownership
    const existing =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[31]++, await prisma.activityCollection.findFirst({
      where: {
        id: collectionId,
        userId: req.user.id
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[32]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_2kczl3stcs().b[5][0]++;
      cov_2kczl3stcs().s[33]++;
      return res.status(404).json({
        success: false,
        error: 'Collection not found or you do not have permission to edit it'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kczl3stcs().b[5][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[34]++, await prisma.activityCollection.update({
      where: {
        id: collectionId
      },
      data
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[35]++;
    res.json({
      success: true,
      data: updated
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[36]++;
    console.error('Update collection error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[37]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[6][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[6][1]++, 'Failed to update collection')
    });
  }
});
// Delete collection
/* istanbul ignore next */
cov_2kczl3stcs().s[38]++;
router.delete('/:collectionId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[4]++;
  cov_2kczl3stcs().s[39]++;
  try {
    const {
      collectionId
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[40]++, req.params);
    // Check ownership
    const existing =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[41]++, await prisma.activityCollection.findFirst({
      where: {
        id: collectionId,
        userId: req.user.id
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[42]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_2kczl3stcs().b[7][0]++;
      cov_2kczl3stcs().s[43]++;
      return res.status(404).json({
        success: false,
        error: 'Collection not found or you do not have permission to delete it'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kczl3stcs().b[7][1]++;
    }
    cov_2kczl3stcs().s[44]++;
    await prisma.activityCollection.delete({
      where: {
        id: collectionId
      }
    });
    /* istanbul ignore next */
    cov_2kczl3stcs().s[45]++;
    res.json({
      success: true,
      message: 'Collection deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[46]++;
    console.error('Delete collection error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[47]++;
    res.status(500).json({
      success: false,
      error: 'Failed to delete collection'
    });
  }
});
// Add activity to collection
const addActivitySchema =
/* istanbul ignore next */
(cov_2kczl3stcs().s[48]++, z.object({
  activityId: z.string()
}));
/* istanbul ignore next */
cov_2kczl3stcs().s[49]++;
router.post('/:collectionId/activities', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[5]++;
  cov_2kczl3stcs().s[50]++;
  try {
    const {
      collectionId
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[51]++, req.params);
    const {
      activityId
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[52]++, addActivitySchema.parse(req.body));
    // Check collection ownership
    const collection =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[53]++, await prisma.activityCollection.findFirst({
      where: {
        id: collectionId,
        userId: req.user.id
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[54]++;
    if (!collection) {
      /* istanbul ignore next */
      cov_2kczl3stcs().b[8][0]++;
      cov_2kczl3stcs().s[55]++;
      return res.status(404).json({
        success: false,
        error: 'Collection not found or you do not have permission to modify it'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kczl3stcs().b[8][1]++;
    }
    // Check if activity exists
    const activity =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[56]++, await prisma.externalActivity.findUnique({
      where: {
        id: activityId
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[57]++;
    if (!activity) {
      /* istanbul ignore next */
      cov_2kczl3stcs().b[9][0]++;
      cov_2kczl3stcs().s[58]++;
      return res.status(404).json({
        success: false,
        error: 'Activity not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kczl3stcs().b[9][1]++;
    }
    // Add to collection (upsert to avoid duplicates)
    const item =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[59]++, await prisma.activityCollectionItem.upsert({
      where: {
        collectionId_activityId: {
          collectionId,
          activityId
        }
      },
      update: {
        addedAt: new Date() // Update timestamp if re-adding
      },
      create: {
        collectionId,
        activityId
      },
      include: {
        activity: true
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[60]++;
    res.json({
      success: true,
      data: item
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[61]++;
    console.error('Add activity to collection error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[62]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[10][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[10][1]++, 'Failed to add activity to collection')
    });
  }
});
// Remove activity from collection
/* istanbul ignore next */
cov_2kczl3stcs().s[63]++;
router.delete('/:collectionId/activities/:activityId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[6]++;
  cov_2kczl3stcs().s[64]++;
  try {
    const {
      collectionId,
      activityId
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[65]++, req.params);
    // Check collection ownership
    const collection =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[66]++, await prisma.activityCollection.findFirst({
      where: {
        id: collectionId,
        userId: req.user.id
      }
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[67]++;
    if (!collection) {
      /* istanbul ignore next */
      cov_2kczl3stcs().b[11][0]++;
      cov_2kczl3stcs().s[68]++;
      return res.status(404).json({
        success: false,
        error: 'Collection not found or you do not have permission to modify it'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kczl3stcs().b[11][1]++;
    }
    cov_2kczl3stcs().s[69]++;
    await prisma.activityCollectionItem.delete({
      where: {
        collectionId_activityId: {
          collectionId,
          activityId
        }
      }
    });
    /* istanbul ignore next */
    cov_2kczl3stcs().s[70]++;
    res.json({
      success: true,
      message: 'Activity removed from collection'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[71]++;
    console.error('Remove activity from collection error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[72]++;
    res.status(500).json({
      success: false,
      error: 'Failed to remove activity from collection'
    });
  }
});
// Get popular/trending collections
/* istanbul ignore next */
cov_2kczl3stcs().s[73]++;
router.get('/trending/public', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2kczl3stcs().f[7]++;
  cov_2kczl3stcs().s[74]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_2kczl3stcs().b[12][0]++, 10)
    } =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[75]++, req.query);
    const collections =
    /* istanbul ignore next */
    (cov_2kczl3stcs().s[76]++, await prisma.activityCollection.findMany({
      where: {
        isPublic: true
      },
      include: {
        _count: {
          select: {
            items: true
          }
        },
        user: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: [{
        items: {
          _count: 'desc'
        }
      }, {
        updatedAt: 'desc'
      }],
      take: Number(limit)
    }));
    /* istanbul ignore next */
    cov_2kczl3stcs().s[77]++;
    res.json({
      success: true,
      data: collections
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2kczl3stcs().s[78]++;
    console.error('Get trending collections error:', error);
    /* istanbul ignore next */
    cov_2kczl3stcs().s[79]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get trending collections'
    });
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,