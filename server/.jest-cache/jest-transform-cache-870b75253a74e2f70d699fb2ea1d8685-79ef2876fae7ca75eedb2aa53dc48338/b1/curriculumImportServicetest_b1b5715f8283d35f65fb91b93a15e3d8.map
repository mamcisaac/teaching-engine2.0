{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/curriculumImportService.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/curriculumImportService.test.ts"],"sourcesContent":["import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { ImportStatus } from '@teaching-engine/database';\n\n// Import services\nimport { CurriculumImportService } from '../../src/services/curriculumImportService';\n\n// Get the mocked prisma instance from the global setup\nconst mockPrismaClientClient = (globalThis as any).testPrismaClient;\n\ndescribe('CurriculumImportService', () => {\n  let curriculumImportService: CurriculumImportService;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    // Create service instance\n    curriculumImportService = new CurriculumImportService();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('startImport', () => {\n    it('should create a new import session', async () => {\n      // Mock the create method to return a valid import object\n      const mockImportRecord = {\n        id: 'cm56gp6kzjoq', // CUID-like ID\n        userId: 1,\n        grade: 5,\n        subject: 'MATH',\n        sourceFormat: 'csv',\n        sourceFile: 'file.csv',\n        status: ImportStatus.UPLOADING,\n        metadata: {},\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      mockPrismaClientClient.curriculumImport.create.mockResolvedValue(mockImportRecord);\n\n      const importId = await curriculumImportService.startImport(1, 5, 'MATH', 'csv', 'file.csv');\n\n      // The mock generates CUID-like IDs, so just verify it's a valid CUID format\n      expect(importId).toMatch(/^c[a-z0-9]{8,}$/);\n      expect(mockPrismaClientClient.curriculumImport.create).toHaveBeenCalledWith({\n        data: {\n          userId: 1,\n          grade: 5,\n          subject: 'MATH',\n          sourceFormat: 'csv',\n          sourceFile: 'file.csv',\n          status: ImportStatus.UPLOADING,\n          metadata: {},\n        },\n      });\n    });\n\n    it('should handle errors during import creation', async () => {\n      // Clear any previous mock implementations\n      mockPrismaClientClient.curriculumImport.create.mockReset();\n      // Configure the mock to reject the promise\n      mockPrismaClientClient.curriculumImport.create.mockRejectedValueOnce(new Error('Database error'));\n\n      await expect(curriculumImportService.startImport(1, 5, 'MATH', 'csv')).rejects.toThrow(\n        'Failed to start import session',\n      );\n    });\n  });\n\n  describe('parseCSV', () => {\n    it('should parse valid CSV content', () => {\n      const csvContent = `code,description,subject,grade,domain\nM1.1,Count to 100,MATH,1,Number\nM1.2,Add single digits,MATH,1,Number\nG1.1,Identify shapes,MATH,1,Geometry`;\n\n      const outcomes = curriculumImportService.parseCSV(csvContent);\n\n      expect(outcomes).toHaveLength(3);\n      expect(outcomes[0]).toEqual({\n        code: 'M1.1',\n        description: 'Count to 100',\n        subject: 'MATH',\n        grade: 1,\n        strand: 'Number',\n      });\n    });\n\n    it('should handle CSV with missing optional fields', () => {\n      const csvContent = `code,description\nM1.1,Count to 100\nM1.2,Add single digits`;\n\n      const outcomes = curriculumImportService.parseCSV(csvContent);\n\n      expect(outcomes).toHaveLength(2);\n      expect(outcomes[0]).toEqual({\n        code: 'M1.1',\n        description: 'Count to 100',\n        subject: 'Unknown',\n        grade: 0,\n        strand: 'General',\n      });\n    });\n\n    it('should handle CSV with quoted values', () => {\n      const csvContent = `code,description,subject,grade,domain\n\"M1.1\",\"Count to 100, including skip counting\",MATH,1,Number`;\n\n      const outcomes = curriculumImportService.parseCSV(csvContent);\n\n      expect(outcomes).toHaveLength(1);\n      expect(outcomes[0].description).toBe('Count to 100, including skip counting');\n    });\n\n    it('should skip invalid lines', () => {\n      const csvContent = `code,description,subject,grade,domain\nM1.1,Count to 100,MATH,1,Number\ninvalid line without enough columns\nM1.2,Add single digits,MATH,1,Number`;\n\n      const outcomes = curriculumImportService.parseCSV(csvContent);\n\n      expect(outcomes).toHaveLength(2);\n    });\n\n    it('should throw error for CSV without required columns', () => {\n      const csvContent = `name,value\nTest,123`;\n\n      expect(() => curriculumImportService.parseCSV(csvContent)).toThrow(\n        'CSV must contain \"code\" and \"description\" columns',\n      );\n    });\n  });\n\n  describe.skip('processImport', () => {\n    const importId = 'c' + Math.random().toString(36).substr(2, 24); // Generate CUID-like ID\n    const testOutcomes = [\n      { code: 'M1.1', description: 'Count to 100', subject: 'MATH', grade: 1, domain: 'Number' },\n      {\n        code: 'M1.2',\n        description: 'Add single digits',\n        subject: 'MATH',\n        grade: 1,\n        domain: 'Number',\n      },\n    ];\n\n    beforeEach(() => {\n      // Mock update status calls\n      mockPrismaClient.curriculumImport.update.mockResolvedValue({});\n\n      // Mock embedding service\n      mockEmbeddingService.generateBatchEmbeddings = jest.fn().mockResolvedValue([]);\n\n      // Mock cluster creation\n      mockPrismaClient.outcomeCluster.create.mockResolvedValue({\n        id: 'cluster-1',\n        clusterName: 'MATH-Number-Grade1',\n        outcomeIds: ['outcome-1', 'outcome-2'],\n      });\n    });\n\n    it('should process outcomes successfully', async () => {\n      // Mock no existing outcomes\n      mockPrismaClient.outcome.findUnique.mockResolvedValue(null);\n\n      // Mock outcome creation\n      mockPrismaClient.outcome.create\n        .mockResolvedValueOnce({ id: 'outcome-1', code: 'M1.1' })\n        .mockResolvedValueOnce({ id: 'outcome-2', code: 'M1.2' });\n\n      // Mock outcomes for clustering\n      mockPrismaClient.outcome.findMany.mockResolvedValue([\n        { id: 'outcome-1', code: 'M1.1', subject: 'MATH', domain: 'Number', grade: 1 },\n        { id: 'outcome-2', code: 'M1.2', subject: 'MATH', domain: 'Number', grade: 1 },\n      ]);\n\n      const result = await curriculumImportService.processImport(importId, testOutcomes);\n\n      expect(result.importId).toBe(importId);\n      expect(result.outcomes).toHaveLength(2);\n      expect(result.clusters).toHaveLength(1);\n      expect(result.errors).toHaveLength(0);\n\n      // Verify status updates\n      expect(mockPrismaClient.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: { status: ImportStatus.PROCESSING, totalOutcomes: 2 },\n      });\n\n      expect(mockPrismaClient.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: { status: ImportStatus.COMPLETED },\n      });\n\n      // Verify embeddings were generated\n      expect(mockEmbeddingService.generateBatchEmbeddings).toHaveBeenCalled();\n    });\n\n    it('should skip existing outcomes', async () => {\n      // Mock first outcome exists, second doesn't\n      mockPrismaClient.outcome.findUnique\n        .mockResolvedValueOnce({ id: 'existing-1', code: 'M1.1' })\n        .mockResolvedValueOnce(null);\n\n      mockPrismaClient.outcome.create.mockResolvedValue({\n        id: 'outcome-2',\n        code: 'M1.2',\n      });\n\n      const result = await curriculumImportService.processImport(importId, testOutcomes);\n\n      expect(result.outcomes).toHaveLength(2);\n      expect(mockPrismaClient.outcome.create).toHaveBeenCalledTimes(1); // Only called for new outcome\n    });\n\n    it('should handle errors during processing', async () => {\n      mockPrismaClient.outcome.findUnique.mockRejectedValue(new Error('Database error'));\n\n      const result = await curriculumImportService.processImport(importId, testOutcomes);\n\n      expect(result.errors).toHaveLength(2); // One error per outcome\n      expect(result.outcomes).toHaveLength(0); // No successful outcomes\n\n      // The import should complete but with errors recorded\n      expect(mockPrismaClient.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: { status: ImportStatus.COMPLETED },\n      });\n    });\n\n    it('should process outcomes in batches', async () => {\n      // Create 60 test outcomes (more than batch size of 50)\n      const manyOutcomes = Array(60)\n        .fill(null)\n        .map((_, i) => ({\n          code: `M1.${i}`,\n          description: `Outcome ${i}`,\n          subject: 'MATH',\n          grade: 1,\n          domain: 'Number',\n        }));\n\n      mockPrismaClient.outcome.findUnique.mockResolvedValue(null);\n      mockPrismaClient.outcome.create.mockImplementation(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (args: { data: { code: string } }) =>\n          Promise.resolve({ id: `outcome-${args.data.code}`, code: args.data.code }),\n      );\n\n      const result = await curriculumImportService.processImport(importId, manyOutcomes);\n\n      expect(result.outcomes).toHaveLength(60);\n      // Verify progress was updated during processing\n      expect(mockPrismaClient.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: { processedOutcomes: 50 },\n      });\n    });\n  });\n\n  describe('getImportProgress', () => {\n    it('should return import progress', async () => {\n      const importId = 'c' + Math.random().toString(36).substr(2, 24);\n      const mockImport = {\n        id: importId,\n        userId: 1,\n        grade: 5,\n        subject: 'MATH',\n        sourceFormat: 'csv',\n        status: ImportStatus.PROCESSING,\n        totalOutcomes: 100,\n        processedOutcomes: 50,\n        errorLog: ['Error 1', 'Error 2'],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        metadata: {},\n        completedAt: null,\n        sourceFile: null,\n      };\n\n      mockPrismaClient.curriculumImport.findUnique.mockResolvedValueOnce(mockImport);\n\n      const progress = await curriculumImportService.getImportProgress(importId);\n\n      expect(progress).toEqual({\n        importId: importId,\n        status: ImportStatus.PROCESSING,\n        totalOutcomes: 100,\n        processedOutcomes: 50,\n        errors: ['Error 1', 'Error 2'],\n      });\n    });\n\n    it('should return null for non-existent import', async () => {\n      mockPrismaClient.curriculumImport.findUnique.mockResolvedValue(null);\n\n      const progress = await curriculumImportService.getImportProgress('non-existent');\n\n      expect(progress).toBeNull();\n    });\n  });\n\n  describe('cancelImport', () => {\n    it('should cancel import successfully', async () => {\n      const importId = 'c' + Math.random().toString(36).substr(2, 24);\n      mockPrismaClient.curriculumImport.update.mockResolvedValueOnce({});\n\n      const success = await curriculumImportService.cancelImport(importId);\n\n      expect(success).toBe(true);\n      expect(mockPrismaClient.curriculumImport.update).toHaveBeenCalledWith({\n        where: { id: importId },\n        data: { status: ImportStatus.CANCELLED },\n      });\n    });\n\n    it('should handle cancellation errors', async () => {\n      mockPrismaClient.curriculumImport.update.mockRejectedValue(new Error('Not found'));\n\n      const success = await curriculumImportService.cancelImport('non-existent');\n\n      expect(success).toBe(false);\n    });\n  });\n\n  describe('getImportHistory', () => {\n    it('should return import history for user', async () => {\n      const mockImports = [\n        {\n          id: 'c' + Math.random().toString(36).substr(2, 24),\n          userId: 1,\n          createdAt: new Date('2024-01-01'),\n          updatedAt: new Date('2024-01-01'),\n          status: ImportStatus.COMPLETED,\n          grade: 5,\n          subject: 'MATH',\n          sourceFormat: 'csv',\n          sourceFile: null,\n          metadata: {},\n          totalOutcomes: 10,\n          processedOutcomes: 10,\n          errorLog: [],\n          completedAt: new Date('2024-01-01'),\n          clusters: [{ id: 'cluster-1', clusterName: 'Test', clusterType: 'theme' }],\n          _count: { curriculumExpectations: 10 },\n        },\n        {\n          id: 'c' + Math.random().toString(36).substr(2, 24),\n          userId: 1,\n          createdAt: new Date('2024-01-02'),\n          updatedAt: new Date('2024-01-02'),\n          status: ImportStatus.FAILED,\n          grade: 5,\n          subject: 'MATH',\n          sourceFormat: 'csv',\n          sourceFile: null,\n          metadata: {},\n          totalOutcomes: 0,\n          processedOutcomes: 0,\n          errorLog: ['Error occurred'],\n          completedAt: null,\n          clusters: [],\n          _count: { curriculumExpectations: 0 },\n        },\n      ];\n\n      mockPrismaClient.curriculumImport.findMany.mockResolvedValueOnce(mockImports);\n\n      const history = await curriculumImportService.getImportHistory(1, 10);\n\n      expect(history).toHaveLength(2);\n      expect(history[0]).toHaveProperty('id');\n      expect(history[0]).toHaveProperty('clusters');\n      expect(history[0]).toHaveProperty('_count');\n      expect(mockPrismaClient.curriculumImport.findMany).toHaveBeenCalledWith({\n        where: { userId: 1 },\n        orderBy: { createdAt: 'desc' },\n        take: 10,\n        include: {\n          clusters: {\n            select: {\n              id: true,\n              clusterName: true,\n              clusterType: true,\n            },\n          },\n          _count: {\n            select: {\n              curriculumExpectations: true,\n            },\n          },\n        },\n      });\n    });\n\n    it('should handle empty history', async () => {\n      mockPrismaClient.curriculumImport.findMany.mockResolvedValue([]);\n\n      const history = await curriculumImportService.getImportHistory(1);\n\n      expect(history).toEqual([]);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it.skip('should handle empty outcome array', async () => {\n      const importId = 'c' + Math.random().toString(36).substr(2, 24);\n      const result = await curriculumImportService.processImport(importId, []);\n\n      expect(result.outcomes).toHaveLength(0);\n      expect(result.clusters).toHaveLength(0);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should handle CSV with special characters', () => {\n      const csvContent = `code,description,subject,grade,domain\nM1.1,\"Count to 100, with émphasis on français\",MATH,1,Nombre\nM1.2,\"Add & subtract (with symbols)\",MATH,1,Number`;\n\n      const outcomes = curriculumImportService.parseCSV(csvContent);\n\n      expect(outcomes).toHaveLength(2);\n      expect(outcomes[0].description).toContain('émphasis on français');\n      expect(outcomes[1].description).toContain('& subtract (with symbols)');\n    });\n\n    it('should handle very large CSV files', () => {\n      // Generate CSV with 1000 rows\n      const headers = 'code,description,subject,grade,domain\\n';\n      const rows = Array(1000)\n        .fill(null)\n        .map((_, i) => `M${i}.1,Description ${i},MATH,${(i % 12) + 1},Domain`)\n        .join('\\n');\n      const csvContent = headers + rows;\n\n      const outcomes = curriculumImportService.parseCSV(csvContent);\n\n      expect(outcomes).toHaveLength(1000);\n    });\n  });\n});\n"],"version":3}