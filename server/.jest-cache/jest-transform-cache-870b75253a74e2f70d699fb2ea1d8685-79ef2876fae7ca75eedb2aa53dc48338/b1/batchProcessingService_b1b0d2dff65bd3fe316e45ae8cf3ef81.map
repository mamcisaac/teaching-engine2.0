{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/batchProcessingService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/batchProcessingService.ts"],"sourcesContent":["import { BaseService } from './base/BaseService';\n\nexport interface BatchOperation<T = unknown> {\n  id: string;\n  type: 'unit' | 'lesson' | 'expectation' | 'resource';\n  data: T;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress?: number;\n  errors?: string[];\n  retryCount?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Type definitions for operation data\ninterface UnitPlanData {\n  title: string;\n  longRangePlanId: string;\n  startDate: string | Date;\n  endDate: string | Date;\n  expectationIds?: string[];\n  [key: string]: unknown;\n}\n\ninterface LessonPlanData {\n  title: string;\n  unitPlanId: string;\n  date: string | Date;\n  duration?: number;\n  expectationIds?: string[];\n  [key: string]: unknown;\n}\n\ninterface ExpectationData {\n  code: string;\n  description: string;\n  strand: string;\n  subject: string;\n  grade?: number;\n  [key: string]: unknown;\n}\n\ninterface ResourceData {\n  title: string;\n  type: string;\n  unitPlanId?: string;\n  lessonPlanId?: string;\n  [key: string]: unknown;\n}\n\nexport interface BatchProcessingOptions {\n  batchSize: number;\n  maxRetries: number;\n  retryDelay: number;\n  onProgress?: (operation: BatchOperation, progress: number) => void;\n  onComplete?: (operation: BatchOperation) => void;\n  onError?: (operation: BatchOperation, error: Error) => void;\n}\n\nexport interface BatchValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nclass BatchProcessingService extends BaseService {\n  private readonly operations = new Map<string, BatchOperation>();\n  private readonly queues = new Map<string, BatchOperation[]>();\n  private readonly activeProcesses = new Set<string>();\n\n  constructor() {\n    super('BatchProcessingService');\n  }\n\n  /**\n   * Add operations to the batch processing queue\n   */\n  async addOperations<T>(\n    operations: Omit<BatchOperation<T>, 'id' | 'status' | 'createdAt' | 'updatedAt'>[],\n    userId: string,\n  ): Promise<string[]> {\n    return this.withRetry(async () => {\n      const operationIds: string[] = [];\n      const now = new Date();\n\n      for (const op of operations) {\n        const operationId = `${op.type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const batchOperation: BatchOperation<T> = {\n          ...op,\n          id: operationId,\n          status: 'pending',\n          progress: 0,\n          retryCount: 0,\n          createdAt: now,\n          updatedAt: now,\n        };\n\n        this.operations.set(operationId, batchOperation);\n\n        // Add to user-specific queue\n        const userQueue = this.queues.get(userId) || [];\n        userQueue.push(batchOperation);\n        this.queues.set(userId, userQueue);\n\n        operationIds.push(operationId);\n      }\n\n      this.logger.info(\n        { operationCount: operations.length, userId },\n        'Added operations to batch queue',\n      );\n\n      return operationIds;\n    });\n  }\n\n  /**\n   * Process batch operations for a specific user\n   */\n  async processBatch(\n    userId: string,\n    options: Partial<BatchProcessingOptions> = {},\n  ): Promise<{\n    successful: number;\n    failed: number;\n    operations: BatchOperation[];\n  }> {\n    const opts: BatchProcessingOptions = {\n      batchSize: 10,\n      maxRetries: 3,\n      retryDelay: 1000,\n      ...options,\n    };\n\n    const processId = `${userId}_${Date.now()}`;\n\n    if (this.activeProcesses.has(userId)) {\n      throw new Error('Batch processing already in progress for this user');\n    }\n\n    this.activeProcesses.add(userId);\n\n    try {\n      const queue = this.queues.get(userId) || [];\n      const pendingOperations = queue.filter((op) => op.status === 'pending');\n\n      if (pendingOperations.length === 0) {\n        return { successful: 0, failed: 0, operations: [] };\n      }\n\n      this.logger.info(\n        { userId, pendingCount: pendingOperations.length, processId },\n        'Starting batch processing',\n      );\n\n      const results = await this.withParallel(\n        pendingOperations.map((operation) => () => this.processOperation(operation, userId, opts)),\n        {\n          maxConcurrency: opts.batchSize,\n          failFast: false,\n        },\n      );\n\n      const successful = results.successCount;\n      const failed = results.errors.filter((e) => e !== null).length;\n\n      this.logger.info({ userId, successful, failed, processId }, 'Batch processing completed');\n\n      return {\n        successful,\n        failed,\n        operations: pendingOperations,\n      };\n    } finally {\n      this.activeProcesses.delete(userId);\n    }\n  }\n\n  /**\n   * Validate batch operations before processing\n   */\n  async validateBatch(operations: BatchOperation[]): Promise<BatchValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    for (const operation of operations) {\n      try {\n        // Type-specific validation\n        switch (operation.type) {\n          case 'unit':\n            await this.validateUnitPlanOperation(operation);\n            break;\n          case 'lesson':\n            await this.validateLessonPlanOperation(operation);\n            break;\n          case 'expectation':\n            await this.validateExpectationOperation(operation);\n            break;\n          case 'resource':\n            await this.validateResourceOperation(operation);\n            break;\n          default:\n            errors.push(`Unknown operation type: ${operation.type}`);\n        }\n      } catch (error) {\n        errors.push(`Validation failed for operation ${operation.id}: ${error.message}`);\n      }\n    }\n\n    // Check for duplicates\n    const duplicates = this.findDuplicateOperations(operations);\n    if (duplicates.length > 0) {\n      warnings.push(`Found ${duplicates.length} duplicate operations`);\n    }\n\n    // Check batch size limits\n    if (operations.length > 100) {\n      warnings.push('Large batch size may impact performance');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Get batch processing status for a user\n   */\n  getBatchStatus(userId: string): {\n    isProcessing: boolean;\n    queueLength: number;\n    operations: BatchOperation[];\n  } {\n    const queue = this.queues.get(userId) || [];\n\n    return {\n      isProcessing: this.activeProcesses.has(userId),\n      queueLength: queue.length,\n      operations: queue.map((op) => ({ ...op })), // Return copies\n    };\n  }\n\n  /**\n   * Clear completed operations from queue\n   */\n  clearCompletedOperations(userId: string): void {\n    const queue = this.queues.get(userId) || [];\n    const pending = queue.filter((op) => op.status === 'pending' || op.status === 'processing');\n    this.queues.set(userId, pending);\n\n    // Remove from operations map\n    queue\n      .filter((op) => op.status === 'completed' || op.status === 'error')\n      .forEach((op) => this.operations.delete(op.id));\n  }\n\n  // Private methods\n\n  private async processOperation(\n    operation: BatchOperation,\n    userId: string,\n    options: BatchProcessingOptions,\n  ): Promise<BatchOperation> {\n    operation.status = 'processing';\n    operation.updatedAt = new Date();\n\n    try {\n      let result;\n\n      switch (operation.type) {\n        case 'unit':\n          result = await this.processUnitPlanOperation(operation, userId);\n          break;\n        case 'lesson':\n          result = await this.processLessonPlanOperation(operation, userId);\n          break;\n        case 'expectation':\n          result = await this.processExpectationOperation(operation, userId);\n          break;\n        case 'resource':\n          result = await this.processResourceOperation(operation, userId);\n          break;\n        default:\n          throw new Error(`Unknown operation type: ${operation.type}`);\n      }\n\n      operation.status = 'completed';\n      operation.progress = 100;\n      operation.data = result;\n\n      if (options.onComplete) {\n        options.onComplete(operation);\n      }\n\n      return operation;\n    } catch (error) {\n      operation.retryCount = (operation.retryCount || 0) + 1;\n      operation.errors = operation.errors || [];\n      operation.errors.push(error.message);\n\n      if (operation.retryCount < options.maxRetries) {\n        // Retry the operation\n        await this.batchSleep(options.retryDelay * operation.retryCount);\n        return this.processOperation(operation, userId, options);\n      } else {\n        operation.status = 'error';\n\n        if (options.onError) {\n          options.onError(operation, error);\n        }\n\n        this.logger.error(\n          { operationId: operation.id, error: error.message, retryCount: operation.retryCount },\n          'Operation failed after max retries',\n        );\n\n        throw error;\n      }\n    } finally {\n      operation.updatedAt = new Date();\n      this.operations.set(operation.id, operation);\n    }\n  }\n\n  private async processUnitPlanOperation(\n    operation: BatchOperation,\n    userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as UnitPlanData;\n\n    return await this.withTransaction(async (tx) => {\n      const { expectationIds: _expectationIds, ...unitData } = data;\n      const unitPlan = await tx.unitPlan.create({\n        data: {\n          title: unitData.title,\n          longRangePlanId: unitData.longRangePlanId,\n          userId: parseInt(userId),\n          startDate: new Date(data.startDate),\n          endDate: new Date(data.endDate),\n        },\n      });\n\n      if (data.expectationIds && data.expectationIds.length > 0) {\n        await tx.unitPlanExpectation.createMany({\n          data: data.expectationIds.map((expectationId: string) => ({\n            unitPlanId: unitPlan.id,\n            expectationId,\n          })),\n        });\n      }\n\n      return unitPlan;\n    });\n  }\n\n  private async processLessonPlanOperation(\n    operation: BatchOperation,\n    userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as LessonPlanData;\n\n    return await this.withTransaction(async (tx) => {\n      const { expectationIds: _expectationIds, ...lessonData } = data;\n      const lessonPlan = await tx.eTFOLessonPlan.create({\n        data: {\n          title: lessonData.title,\n          unitPlanId: lessonData.unitPlanId,\n          userId: parseInt(userId),\n          date: new Date(data.date),\n          duration: lessonData.duration,\n        },\n      });\n\n      if (data.expectationIds && data.expectationIds.length > 0) {\n        await tx.eTFOLessonPlanExpectation.createMany({\n          data: data.expectationIds.map((expectationId: string) => ({\n            lessonPlanId: lessonPlan.id,\n            expectationId,\n          })),\n        });\n      }\n\n      return lessonPlan;\n    });\n  }\n\n  private async processExpectationOperation(\n    operation: BatchOperation,\n    _userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as ExpectationData;\n\n    return await this.withTransaction(async (tx) => {\n      return await tx.curriculumExpectation.create({\n        data: {\n          code: data.code,\n          description: data.description,\n          strand: data.strand,\n          subject: data.subject,\n          grade: data.grade || 0,\n        },\n      });\n    });\n  }\n\n  private async processResourceOperation(\n    operation: BatchOperation,\n    _userId: string,\n  ): Promise<Record<string, unknown>> {\n    const data = operation.data as ResourceData;\n\n    return await this.withTransaction(async (tx) => {\n      if (data.unitPlanId) {\n        return await tx.unitPlanResource.create({\n          data: {\n            title: data.title as string,\n            type: data.type as string,\n            url: data.url as string,\n            unitPlan: { connect: { id: data.unitPlanId as string } }\n          },\n        });\n      } else if (data.lessonPlanId) {\n        return await tx.eTFOLessonPlanResource.create({\n          data: {\n            title: data.title as string,\n            type: data.type as string,\n            url: data.url as string,\n            lessonPlan: { connect: { id: data.lessonPlanId as string } }\n          },\n        });\n      } else {\n        throw new Error('Resource must be associated with either a unit plan or lesson plan');\n      }\n    });\n  }\n\n  private async validateUnitPlanOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as UnitPlanData;\n\n    if (!data.title || !data.longRangePlanId || !data.startDate || !data.endDate) {\n      throw new Error('Missing required fields for unit plan');\n    }\n\n    if (!data.expectationIds || data.expectationIds.length === 0) {\n      throw new Error('At least one curriculum expectation must be selected');\n    }\n\n    const startDate = new Date(data.startDate);\n    const endDate = new Date(data.endDate);\n\n    if (endDate <= startDate) {\n      throw new Error('End date must be after start date');\n    }\n  }\n\n  private async validateLessonPlanOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as LessonPlanData;\n\n    if (!data.title || !data.unitPlanId || !data.date) {\n      throw new Error('Missing required fields for lesson plan');\n    }\n\n    if (data.duration && (data.duration < 5 || data.duration > 480)) {\n      throw new Error('Lesson duration must be between 5 and 480 minutes');\n    }\n  }\n\n  private async validateExpectationOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as ExpectationData;\n\n    if (!data.code || !data.description || !data.strand || !data.subject) {\n      throw new Error('Missing required fields for curriculum expectation');\n    }\n  }\n\n  private async validateResourceOperation(operation: BatchOperation): Promise<void> {\n    const data = operation.data as ResourceData;\n\n    if (!data.title || !data.type) {\n      throw new Error('Missing required fields for resource');\n    }\n\n    if (!data.unitPlanId && !data.lessonPlanId) {\n      throw new Error('Resource must be associated with either a unit plan or lesson plan');\n    }\n  }\n\n  private findDuplicateOperations(operations: BatchOperation[]): BatchOperation[] {\n    const seen = new Set<string>();\n    const duplicates: BatchOperation[] = [];\n\n    for (const operation of operations) {\n      const key = this.getOperationKey(operation);\n      if (seen.has(key)) {\n        duplicates.push(operation);\n      } else {\n        seen.add(key);\n      }\n    }\n\n    return duplicates;\n  }\n\n  private getOperationKey(operation: BatchOperation): string {\n    switch (operation.type) {\n      case 'unit': {\n        const data = operation.data as UnitPlanData;\n        return `unit_${data.title}_${data.longRangePlanId}`;\n      }\n      case 'lesson': {\n        const data = operation.data as LessonPlanData;\n        return `lesson_${data.title}_${data.unitPlanId}_${data.date}`;\n      }\n      case 'expectation': {\n        const data = operation.data as ExpectationData;\n        return `expectation_${data.code}_${data.subject}_${data.grade}`;\n      }\n      case 'resource': {\n        const data = operation.data as ResourceData;\n        return `resource_${data.title}_${data.unitPlanId || data.lessonPlanId}`;\n      }\n      default:\n        return operation.id;\n    }\n  }\n\n  private batchSleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\nexport const batchProcessingService = new BatchProcessingService();\n"],"version":3}