{"version":3,"names":["cov_1nfay9lzre","actualCoverage","BaseService","prisma","ETFOLevel","s","f","b","ETFO_LEVEL_SEQUENCE","CURRICULUM_EXPECTATIONS","LONG_RANGE_PLANS","UNIT_PLANS","LESSON_PLANS","DAYBOOK_ENTRIES","ETFO_LEVEL_METADATA","name","description","requiredFields","completionCriteria","WorkflowStateService","constructor","getUserWorkflowState","userId","progress","calculateAllLevelProgress","completedLevels","getCompletedLevels","currentLevel","getCurrentLevel","accessibleLevels","getAccessibleLevels","blockedLevels","getBlockedLevels","error","logger","canAccessLevel","level","levelIndex","indexOf","canAccess","i","previousLevel","isComplete","isLevelComplete","reason","levelProgress","calculateLevelProgress","push","calculateCurriculumProgress","calculateLongRangeProgress","calculateUnitProgress","calculateLessonProgress","calculateDaybookProgress","Error","total","curriculumExpectation","count","where","import","isAccessible","progressPercentage","completedItems","totalItems","Math","max","longRangePlan","completed","goals","not","blockedReason","undefined","unitPlan","bigIdeas","expectations","some","eTFOLessonPlan","learningGoals","materials","daybookEntry","whatWorked","filter","p","map","current","find","lastCompleted","pop","validateLevelCompletion","entityId","_metadata","missingFields","expectation","findUnique","id","isValid","code","strand","lrp","title","unit","include","length","lesson","daybook","date","whatDidntWork","workflowStateService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/workflowStateService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { prisma } from '../prisma';\n\nexport interface WorkflowState {\n  userId: number;\n  currentLevel: ETFOLevel;\n  completedLevels: ETFOLevel[];\n  accessibleLevels: ETFOLevel[];\n  blockedLevels: ETFOLevel[];\n  progress: LevelProgress[];\n}\n\nexport interface LevelProgress {\n  level: ETFOLevel;\n  isComplete: boolean;\n  isAccessible: boolean;\n  progressPercentage: number;\n  completedItems: number;\n  totalItems: number;\n  blockedReason?: string;\n}\n\nexport enum ETFOLevel {\n  CURRICULUM_EXPECTATIONS = 'CURRICULUM_EXPECTATIONS',\n  LONG_RANGE_PLANS = 'LONG_RANGE_PLANS',\n  UNIT_PLANS = 'UNIT_PLANS',\n  LESSON_PLANS = 'LESSON_PLANS',\n  DAYBOOK_ENTRIES = 'DAYBOOK_ENTRIES',\n}\n\nexport const ETFO_LEVEL_SEQUENCE = [\n  ETFOLevel.CURRICULUM_EXPECTATIONS,\n  ETFOLevel.LONG_RANGE_PLANS,\n  ETFOLevel.UNIT_PLANS,\n  ETFOLevel.LESSON_PLANS,\n  ETFOLevel.DAYBOOK_ENTRIES,\n];\n\nexport const ETFO_LEVEL_METADATA = {\n  [ETFOLevel.CURRICULUM_EXPECTATIONS]: {\n    name: 'Curriculum Expectations',\n    description: 'Import and organize curriculum standards',\n    requiredFields: ['code', 'description', 'strand'],\n    completionCriteria: 'At least one curriculum expectation imported',\n  },\n  [ETFOLevel.LONG_RANGE_PLANS]: {\n    name: 'Long-Range Plans',\n    description: 'Create year/term overview with major units',\n    requiredFields: ['title', 'startDate', 'endDate', 'goals'],\n    completionCriteria: 'At least one long-range plan with goals defined',\n  },\n  [ETFOLevel.UNIT_PLANS]: {\n    name: 'Unit Plans',\n    description: 'Develop detailed instructional units',\n    requiredFields: ['title', 'bigIdeas', 'learningGoals', 'curriculumExpectations'],\n    completionCriteria: 'At least one unit plan with big ideas and linked expectations',\n  },\n  [ETFOLevel.LESSON_PLANS]: {\n    name: 'Lesson Plans',\n    description: 'Plan individual teaching sessions',\n    requiredFields: ['title', 'learningGoals', 'materials', 'activities'],\n    completionCriteria: 'At least one lesson plan with complete details',\n  },\n  [ETFOLevel.DAYBOOK_ENTRIES]: {\n    name: 'Daybook Entries',\n    description: 'Maintain daily planning records',\n    requiredFields: ['date', 'activities', 'reflections'],\n    completionCriteria: 'At least one daybook entry with reflections',\n  },\n};\n\nexport class WorkflowStateService extends BaseService {\n  constructor() {\n    super('WorkflowStateService');\n  }\n\n  /**\n   * Get the current workflow state for a user\n   */\n  async getUserWorkflowState(userId: number): Promise<WorkflowState> {\n    try {\n      const progress = await this.calculateAllLevelProgress(userId);\n      const completedLevels = this.getCompletedLevels(progress);\n      const currentLevel = this.getCurrentLevel(progress);\n      const accessibleLevels = this.getAccessibleLevels(progress);\n      const blockedLevels = this.getBlockedLevels(progress);\n\n      return {\n        userId,\n        currentLevel,\n        completedLevels,\n        accessibleLevels,\n        blockedLevels,\n        progress,\n      };\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user workflow state');\n      throw error;\n    }\n  }\n\n  /**\n   * Check if a user can access a specific level\n   */\n  async canAccessLevel(\n    userId: number,\n    level: ETFOLevel,\n  ): Promise<{ canAccess: boolean; reason?: string }> {\n    try {\n      const levelIndex = ETFO_LEVEL_SEQUENCE.indexOf(level);\n\n      // First level is always accessible\n      if (levelIndex === 0) {\n        return { canAccess: true };\n      }\n\n      // Check if all previous levels are complete\n      for (let i = 0; i < levelIndex; i++) {\n        const previousLevel = ETFO_LEVEL_SEQUENCE[i];\n        const isComplete = await this.isLevelComplete(userId, previousLevel);\n\n        if (!isComplete) {\n          return {\n            canAccess: false,\n            reason: `Must complete ${ETFO_LEVEL_METADATA[previousLevel].name} first`,\n          };\n        }\n      }\n\n      return { canAccess: true };\n    } catch (error) {\n      this.logger.error({ error, userId, level }, 'Failed to check level access');\n      return { canAccess: false, reason: 'Error checking access permissions' };\n    }\n  }\n\n  /**\n   * Calculate progress for all levels\n   */\n  private async calculateAllLevelProgress(userId: number): Promise<LevelProgress[]> {\n    const progress: LevelProgress[] = [];\n\n    for (const level of ETFO_LEVEL_SEQUENCE) {\n      const levelProgress = await this.calculateLevelProgress(userId, level);\n      progress.push(levelProgress);\n    }\n\n    return progress;\n  }\n\n  /**\n   * Calculate progress for a specific level\n   */\n  private async calculateLevelProgress(userId: number, level: ETFOLevel): Promise<LevelProgress> {\n    switch (level) {\n      case ETFOLevel.CURRICULUM_EXPECTATIONS:\n        return this.calculateCurriculumProgress(userId);\n      case ETFOLevel.LONG_RANGE_PLANS:\n        return this.calculateLongRangeProgress(userId);\n      case ETFOLevel.UNIT_PLANS:\n        return this.calculateUnitProgress(userId);\n      case ETFOLevel.LESSON_PLANS:\n        return this.calculateLessonProgress(userId);\n      case ETFOLevel.DAYBOOK_ENTRIES:\n        return this.calculateDaybookProgress(userId);\n      default:\n        throw new Error(`Unknown level: ${level}`);\n    }\n  }\n\n  private async calculateCurriculumProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.curriculumExpectation.count({\n      where: {\n        import: { userId },\n      },\n    });\n\n    return {\n      level: ETFOLevel.CURRICULUM_EXPECTATIONS,\n      isComplete: total > 0,\n      isAccessible: true,\n      progressPercentage: total > 0 ? 100 : 0,\n      completedItems: total,\n      totalItems: Math.max(total, 1), // At least 1 to avoid division by zero\n    };\n  }\n\n  private async calculateLongRangeProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.longRangePlan.count({ where: { userId } });\n    const completed = await prisma.longRangePlan.count({\n      where: {\n        userId,\n        goals: { not: null },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.CURRICULUM_EXPECTATIONS);\n\n    return {\n      level: ETFOLevel.LONG_RANGE_PLANS,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Curriculum Expectations first' : undefined,\n    };\n  }\n\n  private async calculateUnitProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.unitPlan.count({ where: { userId } });\n    const completed = await prisma.unitPlan.count({\n      where: {\n        userId,\n        bigIdeas: { not: null },\n        expectations: {\n          some: {},\n        },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.LONG_RANGE_PLANS);\n\n    return {\n      level: ETFOLevel.UNIT_PLANS,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Long-Range Plans first' : undefined,\n    };\n  }\n\n  private async calculateLessonProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.eTFOLessonPlan.count({ where: { userId } });\n    const completed = await prisma.eTFOLessonPlan.count({\n      where: {\n        userId,\n        learningGoals: { not: null },\n        materials: { not: null },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.UNIT_PLANS);\n\n    return {\n      level: ETFOLevel.LESSON_PLANS,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Unit Plans first' : undefined,\n    };\n  }\n\n  private async calculateDaybookProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.daybookEntry.count({ where: { userId } });\n    const completed = await prisma.daybookEntry.count({\n      where: {\n        userId,\n        whatWorked: { not: null },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.LESSON_PLANS);\n\n    return {\n      level: ETFOLevel.DAYBOOK_ENTRIES,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Lesson Plans first' : undefined,\n    };\n  }\n\n  private async isLevelComplete(userId: number, level: ETFOLevel): Promise<boolean> {\n    const progress = await this.calculateLevelProgress(userId, level);\n    return progress.isComplete;\n  }\n\n  private getCompletedLevels(progress: LevelProgress[]): ETFOLevel[] {\n    return progress.filter((p) => p.isComplete).map((p) => p.level);\n  }\n\n  private getCurrentLevel(progress: LevelProgress[]): ETFOLevel {\n    // Find the first incomplete but accessible level\n    const current = progress.find((p) => !p.isComplete && p.isAccessible);\n    if (current) return current.level;\n\n    // If all accessible levels are complete, return the last completed level\n    const lastCompleted = progress.filter((p) => p.isComplete).pop();\n    if (lastCompleted) return lastCompleted.level;\n\n    // Default to first level\n    return ETFOLevel.CURRICULUM_EXPECTATIONS;\n  }\n\n  private getAccessibleLevels(progress: LevelProgress[]): ETFOLevel[] {\n    return progress.filter((p) => p.isAccessible).map((p) => p.level);\n  }\n\n  private getBlockedLevels(progress: LevelProgress[]): ETFOLevel[] {\n    return progress.filter((p) => !p.isAccessible).map((p) => p.level);\n  }\n\n  /**\n   * Validate that a level has all required fields completed\n   */\n  async validateLevelCompletion(\n    userId: number,\n    level: ETFOLevel,\n    entityId: string,\n  ): Promise<{ isValid: boolean; missingFields: string[] }> {\n    const _metadata = ETFO_LEVEL_METADATA[level];\n    const missingFields: string[] = [];\n\n    try {\n      switch (level) {\n        case ETFOLevel.CURRICULUM_EXPECTATIONS: {\n          const expectation = await prisma.curriculumExpectation.findUnique({\n            where: { id: entityId },\n          });\n          if (!expectation) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!expectation.code) missingFields.push('code');\n          if (!expectation.description) missingFields.push('description');\n          if (!expectation.strand) missingFields.push('strand');\n          break;\n        }\n\n        case ETFOLevel.LONG_RANGE_PLANS: {\n          const lrp = await prisma.longRangePlan.findUnique({\n            where: { id: entityId },\n          });\n          if (!lrp) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!lrp.title) missingFields.push('title');\n          // Long-range plans don't have specific start/end dates, they span the academic year\n          if (!lrp.goals) missingFields.push('goals');\n          break;\n        }\n\n        case ETFOLevel.UNIT_PLANS: {\n          const unit = await prisma.unitPlan.findUnique({\n            where: { id: entityId },\n            include: { expectations: true },\n          });\n          if (!unit) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!unit.title) missingFields.push('title');\n          if (!unit.bigIdeas) missingFields.push('bigIdeas');\n          // learningGoals is not a field on UnitPlan, it's on ETFOLessonPlan\n          if (unit.expectations.length === 0) missingFields.push('expectations');\n          break;\n        }\n\n        case ETFOLevel.LESSON_PLANS: {\n          const lesson = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: entityId },\n          });\n          if (!lesson) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!lesson.title) missingFields.push('title');\n          if (!lesson.learningGoals) missingFields.push('learningGoals');\n          if (!lesson.materials) missingFields.push('materials');\n          // activities is not a field on ETFOLessonPlan\n          break;\n        }\n\n        case ETFOLevel.DAYBOOK_ENTRIES: {\n          const daybook = await prisma.daybookEntry.findUnique({\n            where: { id: entityId },\n          });\n          if (!daybook) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!daybook.date) missingFields.push('date');\n          // activities is not a field on DaybookEntry\n          if (!daybook.whatWorked && !daybook.whatDidntWork) missingFields.push('reflections');\n          break;\n        }\n      }\n\n      return {\n        isValid: missingFields.length === 0,\n        missingFields,\n      };\n    } catch (error) {\n      this.logger.error({ error, userId, level, entityId }, 'Failed to validate level completion');\n      return { isValid: false, missingFields: ['validation error'] };\n    }\n  }\n}\n\nexport const workflowStateService = new WorkflowStateService();\n"],"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","ignoreList":[]}