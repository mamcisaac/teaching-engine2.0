{"version":3,"names":["cov_y5iyvpzeo","actualCoverage","createEmptyMaterialList","f","s","byTimeSlot","byCategory","physical","digital","printable","supplies","equipment","setupInstructions","alternatives","summary","totalItems","prepTime","missingItems","extractDayMaterials","date","_userId","b","console","warn","extractWeeklyMaterials","startDate","numDays","userId","weeklyMaterials","startDateObj","Date","i","currentDate","setUTCDate","getUTCDate","dateStr","toISOString","split","dayMaterials","push","materials","extractActivityMaterials","activity","_startMin","setupTime","resources","length","resource","materialItem","convertResourceToMaterial","inferredMaterials","parseActivityDescription","title","publicNote","privateNote","milestone","subject","name","materialsText","parsedMaterials","parseMaterialsText","subjectMaterials","getSubjectBasicMaterials","estimateSetupTime","removeDuplicateMaterials","notes","generateActivityNotes","category","determineResourceCategory","type","filename","id","now","location","url","priority","source","description","_subject","text","toLowerCase","materialPatterns","pattern","forEach","test","replace","items","map","item","trim","filter","index","determineMaterialCategory","combined","includes","nameLower","basicMaterials","subjectLower","categorizeMaterials","m","seen","Set","material","key","has","add","generateSetupInstructions","timeSlots","instructions","morningMaterials","slot","parseInt","time","flatMap","nextSlot","generateMaterialAlternatives","techItems","original","backup","reason","specificAlts","alt","find","a","some","existing","Math","max","round","duration","join","undefined","identifyPotentialMissingItems","missing","essentialCategories","categoryItems","formatTime","minutes","hours","floor","mins","toString","padStart"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/materialExtractor.ts"],"sourcesContent":["// import { prisma } from '../prisma'; // Currently unused\n\nexport interface MaterialItem {\n  id: string;\n  name: string;\n  category: 'physical' | 'digital' | 'printable' | 'supplies' | 'equipment';\n  quantity?: number;\n  location?: string;\n  preparation?: string;\n  alternatives?: string[];\n  priority: 'essential' | 'recommended' | 'optional';\n  source: 'activity' | 'resource' | 'inferred';\n}\n\nexport interface TimedMaterialList {\n  time: string;\n  activity: string;\n  materials: MaterialItem[];\n  setupTime?: number; // minutes needed for setup\n  notes?: string;\n}\n\nexport interface ExtractedMaterials {\n  byTimeSlot: TimedMaterialList[];\n  byCategory: {\n    physical: MaterialItem[];\n    digital: MaterialItem[];\n    printable: MaterialItem[];\n    supplies: MaterialItem[];\n    equipment: MaterialItem[];\n  };\n  setupInstructions: string[];\n  alternatives: Array<{\n    original: string;\n    backup: string;\n    reason: string;\n  }>;\n  summary: {\n    totalItems: number;\n    prepTime: number;\n    missingItems: string[];\n  };\n}\n\n/**\n * Create an empty material list\n */\nfunction createEmptyMaterialList(): ExtractedMaterials {\n  return {\n    byTimeSlot: [],\n    byCategory: {\n      physical: [],\n      digital: [],\n      printable: [],\n      supplies: [],\n      equipment: [],\n    },\n    setupInstructions: [],\n    alternatives: [],\n    summary: {\n      totalItems: 0,\n      prepTime: 0,\n      missingItems: [],\n    },\n  };\n}\n\n/**\n * Extract all materials needed for a day's activities\n */\nexport async function extractDayMaterials(\n  date: string,\n  _userId: number = 1,\n): Promise<ExtractedMaterials> {\n  // DISABLED: Legacy function that used dailyPlan/Activity models\n  // TODO: Reimplement using ETFO lesson plans and daybook entries\n  console.warn('extractDayMaterials is disabled - legacy models removed');\n  return createEmptyMaterialList();\n}\n\n/**\n * Extract materials for multiple days (weekly planning)\n */\nexport async function extractWeeklyMaterials(\n  startDate: string,\n  numDays: number = 5,\n  userId: number = 1,\n): Promise<Array<{ date: string; materials: ExtractedMaterials }>> {\n  const weeklyMaterials = [];\n  const startDateObj = new Date(startDate);\n\n  for (let i = 0; i < numDays; i++) {\n    const currentDate = new Date(startDateObj);\n    currentDate.setUTCDate(startDateObj.getUTCDate() + i);\n    const dateStr = currentDate.toISOString().split('T')[0];\n\n    const dayMaterials = await extractDayMaterials(dateStr, userId);\n    weeklyMaterials.push({\n      date: dateStr,\n      materials: dayMaterials,\n    });\n  }\n\n  return weeklyMaterials;\n}\n\n/**\n * Extract materials for a specific activity\n */\n// Unused legacy function\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nasync function extractActivityMaterials(\n  activity: {\n    materials?: string[];\n    title?: string;\n    resources?: Array<{\n      id?: string;\n      type?: string;\n      filename?: string;\n      title?: string;\n      url?: string;\n    }>;\n    publicNote?: string;\n    privateNote?: string;\n    milestone?: { subject?: { name?: string } };\n    materialsText?: string;\n  },\n  _startMin: number,\n): Promise<{\n  materials: MaterialItem[];\n  setupTime?: number;\n  notes?: string;\n}> {\n  if (!activity) {\n    return { materials: [] };\n  }\n\n  const materials: MaterialItem[] = [];\n  let setupTime = 0;\n\n  // Extract from linked resources\n  if (activity.resources && activity.resources.length > 0) {\n    for (const resource of activity.resources) {\n      const materialItem = convertResourceToMaterial(resource);\n      if (materialItem) {\n        materials.push(materialItem);\n      }\n    }\n  }\n\n  // Parse activity description and materials text for material mentions\n  const inferredMaterials = parseActivityDescription(\n    activity.title || '',\n    activity.publicNote || activity.privateNote || '',\n    activity.milestone?.subject?.name,\n  );\n  materials.push(...inferredMaterials);\n\n  // Parse materials text if available\n  if (activity.materialsText) {\n    const parsedMaterials = parseMaterialsText(activity.materialsText);\n    materials.push(...parsedMaterials);\n  }\n\n  // Add subject-specific materials\n  const subjectMaterials = getSubjectBasicMaterials(activity.milestone?.subject?.name);\n  materials.push(...subjectMaterials);\n\n  // Estimate setup time based on materials\n  setupTime = estimateSetupTime(materials);\n\n  return {\n    materials: removeDuplicateMaterials(materials),\n    setupTime,\n    notes: generateActivityNotes(activity, materials),\n  };\n}\n\n/**\n * Convert a resource to a material item\n */\nfunction convertResourceToMaterial(resource: {\n  id?: string;\n  type?: string;\n  filename?: string;\n  title?: string;\n  url?: string;\n}): MaterialItem | null {\n  if (!resource) return null;\n\n  const category = determineResourceCategory(resource.type, resource.filename);\n\n  return {\n    id: `resource-${resource.id || Date.now()}`,\n    name: resource.filename || 'Unknown Resource',\n    category,\n    location: resource.url ? 'Digital file' : 'File location unknown',\n    priority: 'recommended',\n    source: 'resource',\n  };\n}\n\n/**\n * Parse activity description to find material mentions\n */\nfunction parseActivityDescription(\n  title: string,\n  description: string,\n  _subject?: string,\n): MaterialItem[] {\n  const text = `${title} ${description}`.toLowerCase();\n  const materials: MaterialItem[] = [];\n\n  // Common material patterns\n  const materialPatterns = [\n    // Physical materials\n    {\n      pattern: /\\b(paper|worksheet|handout)s?\\b/g,\n      name: 'Paper/Worksheets',\n      category: 'printable' as const,\n    },\n    {\n      pattern: /\\b(pencil|pen|marker|crayon)s?\\b/g,\n      name: 'Writing tools',\n      category: 'supplies' as const,\n    },\n    {\n      pattern: /\\b(calculator|ruler|compass)s?\\b/g,\n      name: 'Math tools',\n      category: 'equipment' as const,\n    },\n    { pattern: /\\b(book|textbook|novel)s?\\b/g, name: 'Books', category: 'physical' as const },\n    { pattern: /\\b(scissors|glue|tape)\\b/g, name: 'Art supplies', category: 'supplies' as const },\n    {\n      pattern: /\\b(computer|tablet|laptop)s?\\b/g,\n      name: 'Technology',\n      category: 'equipment' as const,\n    },\n    {\n      pattern: /\\b(whiteboard|smartboard|projector)\\b/g,\n      name: 'Display equipment',\n      category: 'equipment' as const,\n    },\n\n    // Digital materials\n    {\n      pattern: /\\b(video|movie|presentation|slideshow)\\b/g,\n      name: 'Digital media',\n      category: 'digital' as const,\n    },\n    {\n      pattern: /\\b(website|online|internet)\\b/g,\n      name: 'Online resources',\n      category: 'digital' as const,\n    },\n\n    // Subject-specific\n    {\n      pattern: /\\b(manipulative|counter|block)s?\\b/g,\n      name: 'Math manipulatives',\n      category: 'equipment' as const,\n    },\n    {\n      pattern: /\\b(microscope|magnet|beaker)s?\\b/g,\n      name: 'Science equipment',\n      category: 'equipment' as const,\n    },\n    {\n      pattern: /\\b(map|globe|chart)s?\\b/g,\n      name: 'Reference materials',\n      category: 'physical' as const,\n    },\n  ];\n\n  materialPatterns.forEach(({ pattern, name, category }) => {\n    if (pattern.test(text)) {\n      materials.push({\n        id: `inferred-${name.replace(/\\s+/g, '-').toLowerCase()}`,\n        name,\n        category,\n        priority: 'recommended',\n        source: 'inferred',\n      });\n    }\n  });\n\n  return materials;\n}\n\n/**\n * Parse comma-separated materials text into material items\n */\nfunction parseMaterialsText(materialsText: string): MaterialItem[] {\n  if (!materialsText) return [];\n\n  const materials: MaterialItem[] = [];\n  const items = materialsText\n    .split(',')\n    .map((item) => item.trim())\n    .filter((item) => item.length > 0);\n\n  items.forEach((item, index) => {\n    const category = determineMaterialCategory(item);\n    materials.push({\n      id: `material-text-${index}`,\n      name: item,\n      category,\n      priority: 'essential', // Materials explicitly listed are likely essential\n      source: 'activity',\n    });\n  });\n\n  return materials;\n}\n\n/**\n * Determine resource category based on type and filename\n */\nfunction determineResourceCategory(type?: string, filename?: string): MaterialItem['category'] {\n  const combined = `${type || ''} ${filename || ''}`.toLowerCase();\n\n  if (combined.includes('pdf') || combined.includes('worksheet') || combined.includes('handout')) {\n    return 'printable';\n  }\n  if (combined.includes('video') || combined.includes('online') || combined.includes('website')) {\n    return 'digital';\n  }\n  if (combined.includes('book') || combined.includes('card')) {\n    return 'physical';\n  }\n  if (combined.includes('equipment') || combined.includes('tool')) {\n    return 'equipment';\n  }\n\n  return 'supplies';\n}\n\n/**\n * Determine category based on material name\n */\nfunction determineMaterialCategory(name: string): MaterialItem['category'] {\n  const nameLower = name.toLowerCase();\n\n  if (\n    nameLower.includes('worksheet') ||\n    nameLower.includes('handout') ||\n    nameLower.includes('paper')\n  ) {\n    return 'printable';\n  }\n  if (\n    nameLower.includes('computer') ||\n    nameLower.includes('tablet') ||\n    nameLower.includes('online') ||\n    nameLower.includes('digital')\n  ) {\n    return 'digital';\n  }\n  if (nameLower.includes('book') || nameLower.includes('card') || nameLower.includes('poster')) {\n    return 'physical';\n  }\n  if (\n    nameLower.includes('calculator') ||\n    nameLower.includes('projector') ||\n    nameLower.includes('equipment')\n  ) {\n    return 'equipment';\n  }\n\n  // Default to supplies for things like pencils, markers, etc.\n  return 'supplies';\n}\n\n/**\n * Get basic materials every subject typically needs\n */\nfunction getSubjectBasicMaterials(subject?: string): MaterialItem[] {\n  const basicMaterials: MaterialItem[] = [\n    {\n      id: 'basic-writing',\n      name: 'Pencils/Pens',\n      category: 'supplies',\n      priority: 'essential',\n      source: 'inferred',\n    },\n    {\n      id: 'basic-paper',\n      name: 'Paper',\n      category: 'supplies',\n      priority: 'essential',\n      source: 'inferred',\n    },\n  ];\n\n  if (!subject) return basicMaterials;\n\n  const subjectLower = subject.toLowerCase();\n\n  if (subjectLower.includes('math')) {\n    basicMaterials.push(\n      {\n        id: 'math-manipulatives',\n        name: 'Math manipulatives',\n        category: 'equipment',\n        priority: 'recommended',\n        source: 'inferred',\n      },\n      {\n        id: 'math-calculator',\n        name: 'Calculator',\n        category: 'equipment',\n        priority: 'optional',\n        source: 'inferred',\n      },\n    );\n  }\n\n  if (subjectLower.includes('science')) {\n    basicMaterials.push({\n      id: 'science-notebook',\n      name: 'Science notebook',\n      category: 'supplies',\n      priority: 'recommended',\n      source: 'inferred',\n    });\n  }\n\n  if (subjectLower.includes('art')) {\n    basicMaterials.push({\n      id: 'art-supplies',\n      name: 'Art supplies (crayons, markers)',\n      category: 'supplies',\n      priority: 'essential',\n      source: 'inferred',\n    });\n  }\n\n  if (subjectLower.includes('language') || subjectLower.includes('english')) {\n    basicMaterials.push({\n      id: 'reading-books',\n      name: 'Reading books',\n      category: 'physical',\n      priority: 'recommended',\n      source: 'inferred',\n    });\n  }\n\n  return basicMaterials;\n}\n\n/**\n * Categorize materials by type\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction categorizeMaterials(materials: MaterialItem[]) {\n  return {\n    physical: materials.filter((m) => m.category === 'physical'),\n    digital: materials.filter((m) => m.category === 'digital'),\n    printable: materials.filter((m) => m.category === 'printable'),\n    supplies: materials.filter((m) => m.category === 'supplies'),\n    equipment: materials.filter((m) => m.category === 'equipment'),\n  };\n}\n\n/**\n * Remove duplicate materials based on name similarity\n */\nfunction removeDuplicateMaterials(materials: MaterialItem[]): MaterialItem[] {\n  const seen = new Set<string>();\n  return materials.filter((material) => {\n    const key = material.name.toLowerCase().replace(/[^a-z0-9]/g, '');\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n}\n\n/**\n * Generate setup instructions for the day\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction generateSetupInstructions(timeSlots: TimedMaterialList[]): string[] {\n  const instructions: string[] = [];\n\n  // Morning setup\n  const morningMaterials = timeSlots\n    .filter((slot) => parseInt(slot.time.split(':')[0]) < 10)\n    .flatMap((slot) => slot.materials);\n\n  if (morningMaterials.length > 0) {\n    instructions.push('Morning Setup:');\n    instructions.push('- Arrive 15 minutes early to set up materials');\n    instructions.push('- Check that all technology is working');\n    instructions.push('- Prepare first activity materials at student desks');\n  }\n\n  // Special equipment setup\n  const equipment = timeSlots.flatMap((slot) =>\n    slot.materials.filter((m) => m.category === 'equipment'),\n  );\n\n  if (equipment.length > 0) {\n    instructions.push('Equipment Setup:');\n    equipment.forEach((item) => {\n      instructions.push(`- Test ${item.name} before students arrive`);\n    });\n  }\n\n  // Transition preparations\n  timeSlots.forEach((slot, index) => {\n    if (slot.setupTime && slot.setupTime > 5) {\n      const nextSlot = timeSlots[index + 1];\n      if (nextSlot) {\n        instructions.push(\n          `Before ${slot.time}: Allow ${slot.setupTime} minutes to prepare materials for \"${slot.activity}\"`,\n        );\n      }\n    }\n  });\n\n  return instructions;\n}\n\n/**\n * Generate alternative materials for common scenarios\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction generateMaterialAlternatives(materials: MaterialItem[]) {\n  const alternatives = [];\n\n  // Technology alternatives\n  const techItems = materials.filter((m) => m.category === 'digital' || m.category === 'equipment');\n  if (techItems.length > 0) {\n    alternatives.push({\n      original: 'Digital/Technology materials',\n      backup: 'Paper-based worksheets and hands-on activities',\n      reason: 'Technology failure or unavailability',\n    });\n  }\n\n  // Specific alternatives\n  const specificAlts = [\n    { original: 'Smartboard', backup: 'Whiteboard and markers', reason: 'Technology issues' },\n    { original: 'Computers', backup: 'Worksheets and group work', reason: 'No computer access' },\n    { original: 'Art supplies', backup: 'Basic drawing materials', reason: 'Missing art supplies' },\n    {\n      original: 'Science equipment',\n      backup: 'Demonstration or video',\n      reason: 'Safety or missing equipment',\n    },\n    { original: 'Books', backup: 'Shared reading or audio books', reason: 'Insufficient copies' },\n  ];\n\n  materials.forEach((material) => {\n    const alt = specificAlts.find((a) =>\n      material.name.toLowerCase().includes(a.original.toLowerCase()),\n    );\n    if (alt && !alternatives.some((existing) => existing.original === alt.original)) {\n      alternatives.push(alt);\n    }\n  });\n\n  return alternatives;\n}\n\n/**\n * Estimate setup time based on materials complexity\n */\nfunction estimateSetupTime(materials: MaterialItem[]): number {\n  let time = 0;\n\n  materials.forEach((material) => {\n    switch (material.category) {\n      case 'equipment':\n        time += 3; // 3 minutes per equipment item\n        break;\n      case 'digital':\n        time += 2; // 2 minutes for digital setup\n        break;\n      case 'supplies':\n        time += 1; // 1 minute for supplies distribution\n        break;\n      default:\n        time += 0.5; // Basic items\n    }\n  });\n\n  return Math.max(0, Math.round(time));\n}\n\n/**\n * Generate activity-specific notes\n */\nfunction generateActivityNotes(\n  activity: {\n    materials?: string[];\n    title?: string;\n    resources?: Array<{\n      id?: string;\n      type?: string;\n      filename?: string;\n      title?: string;\n      url?: string;\n    }>;\n    publicNote?: string;\n    privateNote?: string;\n    milestone?: { subject?: { name?: string } };\n    materialsText?: string;\n    type?: string;\n    duration?: number;\n  },\n  materials: MaterialItem[],\n): string | undefined {\n  const notes = [];\n\n  if (materials.some((m) => m.category === 'equipment')) {\n    notes.push('Test all equipment before activity begins');\n  }\n\n  if (materials.some((m) => m.category === 'digital')) {\n    notes.push('Have backup plan ready in case of technology issues');\n  }\n\n  if (activity.duration && activity.duration > 60) {\n    notes.push('Long activity - prepare materials for smooth transitions');\n  }\n\n  return notes.length > 0 ? notes.join('; ') : undefined;\n}\n\n/**\n * Identify potentially missing items that should be checked\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction identifyPotentialMissingItems(materials: MaterialItem[]): string[] {\n  const missing = [];\n\n  const essentialCategories = ['supplies', 'equipment'];\n  essentialCategories.forEach((category) => {\n    const categoryItems = materials.filter((m) => m.category === category);\n    if (categoryItems.length === 0) {\n      missing.push(`No ${category} identified - check if any are needed`);\n    }\n  });\n\n  return missing;\n}\n\n/**\n * Format time from minutes to HH:MM\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction formatTime(minutes: number): string {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n}\n"],"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","ignoreList":[]}