{"version":3,"names":["cov_lwd8drey9","actualCoverage","Router","z","notificationService","router","s","markAsReadSchema","object","notificationId","string","min","updatePreferencesSchema","emailEnabled","boolean","optional","pushEnabled","quietHours","start","regex","end","categories","record","enabled","channels","array","enum","get","req","res","next","f","userId","user","id","b","status","json","error","limit","Math","parseInt","query","offset","max","unreadOnly","unread","result","getUserNotifications","err","console","post","validation","safeParse","body","success","details","flatten","data","markAsRead","markedCount","markAllAsRead","delete","params","deleteNotification","send","preferences","getUserPreferences","put","updatePreferences","updatedPreferences","process","env","NODE_ENV","sendNotification","type","title","message","priority"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/notifications.ts"],"sourcesContent":["/**\n * Notifications Routes\n * Handles user notification management\n */\n\nimport { Router, Request } from 'express';\nimport { z } from 'zod';\nimport { notificationService, NotificationPreferences } from '../services/notificationService';\n\nconst router = Router();\n\n// Validation schemas\nconst markAsReadSchema = z.object({\n  notificationId: z.string().min(1),\n});\n\nconst updatePreferencesSchema = z.object({\n  emailEnabled: z.boolean().optional(),\n  pushEnabled: z.boolean().optional(),\n  quietHours: z\n    .object({\n      start: z.string().regex(/^\\d{2}:\\d{2}$/),\n      end: z.string().regex(/^\\d{2}:\\d{2}$/),\n    })\n    .optional(),\n  categories: z\n    .record(\n      z.object({\n        enabled: z.boolean(),\n        channels: z.array(z.enum(['in_app', 'email', 'push'])),\n      }),\n    )\n    .optional(),\n});\n\n// Get user's notifications\nrouter.get('/', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const limit = Math.min(parseInt(req.query.limit as string) || 50, 100);\n    const offset = Math.max(parseInt(req.query.offset as string) || 0, 0);\n    const unreadOnly = req.query.unread === 'true';\n\n    const result = await notificationService.getUserNotifications(userId, {\n      limit,\n      offset,\n      unreadOnly,\n    });\n\n    res.json(result);\n  } catch (err) {\n    console.error('Error getting notifications:', err);\n    next(err);\n  }\n});\n\n// Mark notification as read\nrouter.post('/mark-read', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const validation = markAsReadSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validation.error.flatten(),\n      });\n    }\n\n    const { notificationId } = validation.data;\n\n    const success = await notificationService.markAsRead(notificationId, userId);\n    if (!success) {\n      return res.status(404).json({ error: 'Notification not found' });\n    }\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error marking notification as read:', err);\n    next(err);\n  }\n});\n\n// Mark all notifications as read\nrouter.post('/mark-all-read', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const markedCount = await notificationService.markAllAsRead(userId);\n\n    res.json({ success: true, markedCount });\n  } catch (err) {\n    console.error('Error marking all notifications as read:', err);\n    next(err);\n  }\n});\n\n// Delete a notification\nrouter.delete('/:id', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const notificationId = req.params.id;\n    const success = await notificationService.deleteNotification(notificationId, userId);\n\n    if (!success) {\n      return res.status(404).json({ error: 'Notification not found' });\n    }\n\n    res.status(204).send();\n  } catch (err) {\n    console.error('Error deleting notification:', err);\n    next(err);\n  }\n});\n\n// Get user's notification preferences\nrouter.get('/preferences', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const preferences = await notificationService.getUserPreferences(userId);\n    res.json(preferences);\n  } catch (err) {\n    console.error('Error getting notification preferences:', err);\n    next(err);\n  }\n});\n\n// Update user's notification preferences\nrouter.put('/preferences', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const validation = updatePreferencesSchema.safeParse(req.body);\n    if (!validation.success) {\n      return res.status(400).json({\n        error: 'Invalid request data',\n        details: validation.error.flatten(),\n      });\n    }\n\n    await notificationService.updatePreferences(\n      userId,\n      validation.data as Partial<NotificationPreferences>,\n    );\n\n    const updatedPreferences = await notificationService.getUserPreferences(userId);\n    res.json(updatedPreferences);\n  } catch (err) {\n    console.error('Error updating notification preferences:', err);\n    next(err);\n  }\n});\n\n// Send a test notification (for development/testing)\nrouter.post('/test', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Only allow in development or test environments\n    if (process.env.NODE_ENV === 'production') {\n      return res.status(403).json({ error: 'Test notifications not available in production' });\n    }\n\n    const notificationId = await notificationService.sendNotification(userId, {\n      type: 'info',\n      title: 'Test Notification',\n      message: 'This is a test notification from Teaching Engine 2.0.',\n      priority: 'low',\n      channels: ['in_app'],\n    });\n\n    res.json({ success: true, notificationId });\n  } catch (err) {\n    console.error('Error sending test notification:', err);\n    next(err);\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}