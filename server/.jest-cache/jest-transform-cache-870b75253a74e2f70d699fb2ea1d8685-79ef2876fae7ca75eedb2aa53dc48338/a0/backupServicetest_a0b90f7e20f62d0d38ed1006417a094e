dca2c97e7692907071cc622d5823eba9
import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';
import fs from 'fs/promises';
import path from 'path';
import { createBackup, restoreBackup } from '../../src/services/backupService';
describe('backup service', () => {
    const dbPath = path.resolve('test-backup.sqlite');
    // Use the same uploads path that the service uses: src/uploads
    const uploads = path.join(process.cwd(), 'server/src/uploads');
    beforeAll(async () => {
        process.env.DATABASE_URL = `file:${dbPath}`;
        await fs.writeFile(dbPath, 'data');
        await fs.mkdir(uploads, { recursive: true });
        await fs.writeFile(path.join(uploads, 'file.txt'), 'hi');
    });
    afterAll(async () => {
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
    });
    it('creates and restores backup', async () => {
        console.log('Test uploads path:', uploads);
        console.log('Working directory:', process.cwd());
        const buf = await createBackup();
        console.log('Backup created, size:', buf.length);
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
        await restoreBackup(buf);
        console.log('Backup restored');
        const fileExists = async (p) => !!(await fs.stat(p).catch(() => false));
        const dbExists = await fileExists(dbPath);
        const fileInUploadsExists = await fileExists(path.join(uploads, 'file.txt'));
        console.log('DB exists:', dbExists);
        console.log('File in uploads exists:', fileInUploadsExists);
        console.log('Expected file path:', path.join(uploads, 'file.txt'));
        expect(dbExists).toBe(true);
        expect(fileInUploadsExists).toBe(true);
    }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2JhY2t1cFNlcnZpY2UudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUYxRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0UsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEQsK0RBQStEO0lBQy9ELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFFL0QsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLFFBQVEsTUFBTSxFQUFFLENBQUM7UUFDNUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDN0MsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFakQsTUFBTSxHQUFHLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQztRQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRCxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFdkQsTUFBTSxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRS9CLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNoRixNQUFNLFFBQVEsR0FBRyxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQyxNQUFNLG1CQUFtQixHQUFHLE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUVuRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvdGVzdHMvaW50ZWdyYXRpb24vYmFja3VwU2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGFmdGVyQWxsIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBjcmVhdGVCYWNrdXAsIHJlc3RvcmVCYWNrdXAgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYmFja3VwU2VydmljZSc7XG5cbmRlc2NyaWJlKCdiYWNrdXAgc2VydmljZScsICgpID0+IHtcbiAgY29uc3QgZGJQYXRoID0gcGF0aC5yZXNvbHZlKCd0ZXN0LWJhY2t1cC5zcWxpdGUnKTtcbiAgLy8gVXNlIHRoZSBzYW1lIHVwbG9hZHMgcGF0aCB0aGF0IHRoZSBzZXJ2aWNlIHVzZXM6IHNyYy91cGxvYWRzXG4gIGNvbnN0IHVwbG9hZHMgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3NlcnZlci9zcmMvdXBsb2FkcycpO1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gYGZpbGU6JHtkYlBhdGh9YDtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoZGJQYXRoLCAnZGF0YScpO1xuICAgIGF3YWl0IGZzLm1rZGlyKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLmpvaW4odXBsb2FkcywgJ2ZpbGUudHh0JyksICdoaScpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZnMucm0oZGJQYXRoLCB7IGZvcmNlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLnJtKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgaXQoJ2NyZWF0ZXMgYW5kIHJlc3RvcmVzIGJhY2t1cCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnVGVzdCB1cGxvYWRzIHBhdGg6JywgdXBsb2Fkcyk7XG4gICAgY29uc29sZS5sb2coJ1dvcmtpbmcgZGlyZWN0b3J5OicsIHByb2Nlc3MuY3dkKCkpO1xuXG4gICAgY29uc3QgYnVmID0gYXdhaXQgY3JlYXRlQmFja3VwKCk7XG4gICAgY29uc29sZS5sb2coJ0JhY2t1cCBjcmVhdGVkLCBzaXplOicsIGJ1Zi5sZW5ndGgpO1xuXG4gICAgYXdhaXQgZnMucm0oZGJQYXRoLCB7IGZvcmNlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLnJtKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcblxuICAgIGF3YWl0IHJlc3RvcmVCYWNrdXAoYnVmKTtcbiAgICBjb25zb2xlLmxvZygnQmFja3VwIHJlc3RvcmVkJyk7XG5cbiAgICBjb25zdCBmaWxlRXhpc3RzID0gYXN5bmMgKHA6IHN0cmluZykgPT4gISEoYXdhaXQgZnMuc3RhdChwKS5jYXRjaCgoKSA9PiBmYWxzZSkpO1xuICAgIGNvbnN0IGRiRXhpc3RzID0gYXdhaXQgZmlsZUV4aXN0cyhkYlBhdGgpO1xuICAgIGNvbnN0IGZpbGVJblVwbG9hZHNFeGlzdHMgPSBhd2FpdCBmaWxlRXhpc3RzKHBhdGguam9pbih1cGxvYWRzLCAnZmlsZS50eHQnKSk7XG5cbiAgICBjb25zb2xlLmxvZygnREIgZXhpc3RzOicsIGRiRXhpc3RzKTtcbiAgICBjb25zb2xlLmxvZygnRmlsZSBpbiB1cGxvYWRzIGV4aXN0czonLCBmaWxlSW5VcGxvYWRzRXhpc3RzKTtcbiAgICBjb25zb2xlLmxvZygnRXhwZWN0ZWQgZmlsZSBwYXRoOicsIHBhdGguam9pbih1cGxvYWRzLCAnZmlsZS50eHQnKSk7XG5cbiAgICBleHBlY3QoZGJFeGlzdHMpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGZpbGVJblVwbG9hZHNFeGlzdHMpLnRvQmUodHJ1ZSk7XG4gIH0sIDEwMDAwKTtcbn0pO1xuIl0sInZlcnNpb24iOjN9