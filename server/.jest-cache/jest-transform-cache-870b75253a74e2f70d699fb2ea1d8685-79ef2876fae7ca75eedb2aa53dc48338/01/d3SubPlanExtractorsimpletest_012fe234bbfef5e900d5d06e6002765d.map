{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/d3SubPlanExtractor.simple.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/d3SubPlanExtractor.simple.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { extractScenarioTemplates, autoDetectScenario } from '../../src/services/scenarioTemplateExtractor';\nimport { formatContactsForSubPlan, getEmergencyContactsList, generateEmergencyContactCard, ExtractedContacts } from '../../src/services/contactExtractor';\n\ndescribe('D3 Sub Plan Extractor - Simple Integration Tests', () => {\n  describe('Scenario Template Extraction', () => {\n    it('should extract scenario templates without conditions', async () => {\n      const scenarios = await extractScenarioTemplates();\n\n      expect(scenarios).toHaveProperty('scenarios');\n      expect(scenarios).toHaveProperty('triggers');\n      expect(scenarios).toHaveProperty('recommendedScenario');\n      expect(scenarios.scenarios.length).toBeGreaterThan(0);\n\n      // Check scenario structure\n      const scenario = scenarios.scenarios[0];\n      expect(scenario).toHaveProperty('id');\n      expect(scenario).toHaveProperty('name');\n      expect(scenario).toHaveProperty('procedures');\n      expect(scenario).toHaveProperty('materials');\n      expect(scenario).toHaveProperty('contacts');\n      expect(scenario).toHaveProperty('template');\n    });\n\n    it('should detect weather scenario with conditions', async () => {\n      const scenarios = await extractScenarioTemplates({\n        weather: 'severe',\n        technology: 'working',\n        staffing: 'full',\n        building: 'normal'\n      });\n\n      expect(scenarios.triggers).toContain('severe_weather');\n      expect(scenarios.recommendedScenario?.id).toBe('severe_weather');\n    });\n\n    it('should detect technology failure scenario', async () => {\n      const scenarios = await extractScenarioTemplates({\n        weather: 'normal',\n        technology: 'down',\n        staffing: 'full',\n        building: 'normal'\n      });\n\n      expect(scenarios.triggers).toContain('technology_failure');\n      expect(scenarios.recommendedScenario?.id).toBe('technology_failure');\n    });\n\n    it('should prioritize lockdown scenario over others', async () => {\n      const scenarios = await extractScenarioTemplates({\n        weather: 'severe',\n        technology: 'down',\n        staffing: 'emergency',\n        building: 'emergency'\n      });\n\n      expect(scenarios.triggers).toContain('severe_weather');\n      expect(scenarios.triggers).toContain('technology_failure');\n      expect(scenarios.triggers).toContain('staff_shortage');\n      expect(scenarios.triggers).toContain('lockdown');\n      // Lockdown should override other scenarios\n      expect(scenarios.recommendedScenario?.id).toBe('lockdown');\n    });\n  });\n\n  describe('Contact Extraction - Pure Functions', () => {\n    const mockContacts: ExtractedContacts = {\n      emergency: [\n        {\n          id: 'emergency-911',\n          name: 'Emergency Services',\n          role: 'Emergency',\n          phone: '911',\n          availability: '24/7',\n          priority: 'emergency',\n          category: 'safety'\n        }\n      ],\n      administration: [\n        {\n          id: 'admin-principal',\n          name: 'Dr. Smith',\n          role: 'Principal',\n          phone: '555-1234',\n          extension: '100',\n          availability: 'School hours',\n          priority: 'urgent',\n          category: 'administration'\n        }\n      ],\n      support: [],\n      technical: [],\n      medical: [],\n      transportation: [],\n      custom: []\n    };\n\n    it('should format contacts for substitute plan', () => {\n      const formatted = formatContactsForSubPlan(mockContacts);\n\n      expect(formatted).toContain('🚨 EMERGENCY CONTACTS:');\n      expect(formatted).toContain('Emergency: Emergency Services - 911');\n      expect(formatted).toContain('👥 ADMINISTRATION:');\n      expect(formatted).toContain('Principal: Dr. Smith - 555-1234 ext. 100');\n    });\n\n    it('should get emergency contacts list', () => {\n      const emergencyList = getEmergencyContactsList(mockContacts);\n\n      expect(emergencyList).toContain('Emergency: 911');\n      expect(emergencyList).toContain('Principal: 555-1234 ext. 100');\n    });\n\n    it('should generate emergency contact card', () => {\n      const card = generateEmergencyContactCard(mockContacts);\n\n      expect(card).toContain('┌─────────────────────────────────────┐');\n      expect(card).toContain('│         EMERGENCY CONTACTS          │');\n      expect(card).toContain('│ Emergency: 911');\n      expect(card).toContain('│ FOR IMMEDIATE EMERGENCIES CALL 911  │');\n      expect(card).toContain('└─────────────────────────────────────┘');\n    });\n  });\n});"],"version":3}