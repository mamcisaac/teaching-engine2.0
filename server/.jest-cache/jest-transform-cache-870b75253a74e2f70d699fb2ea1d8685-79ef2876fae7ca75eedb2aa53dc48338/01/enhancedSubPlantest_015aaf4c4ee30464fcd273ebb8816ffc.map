{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/enhancedSubPlan.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/enhancedSubPlan.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport request from 'supertest';\nimport { app } from '../../src/index';\nimport { prisma } from '../../src/prisma';\n\n// Sub plan routes have been implemented\ndescribe('Enhanced Sub Plan API', () => {\n  let authToken: string;\n  let testUserId: number;\n\n  beforeAll(async () => {\n    // Create test user for authentication\n    const bcrypt = (await import('bcryptjs')).default;\n    const hashedPassword = await bcrypt.hash('testpassword123', 10);\n    const timestamp = Date.now();\n    const testEmail = `subplan-test-${timestamp}@example.com`;\n\n    const user = await prisma.user.create({\n      data: {\n        email: testEmail,\n        password: hashedPassword,\n        name: 'Sub Plan Tester',\n        role: 'teacher',\n        preferredLanguage: 'en',\n      },\n    });\n\n    testUserId = user.id;\n\n    // Disconnect and reconnect to ensure transaction is committed\n    await prisma.$disconnect();\n    await prisma.$connect();\n\n    // Login to get proper auth token\n    const loginResponse = await request(app).post('/api/login').send({\n      email: testEmail,\n      password: 'testpassword123',\n    });\n\n    if (loginResponse.status !== 200) {\n      throw new Error(\n        `Login failed: ${loginResponse.status} ${JSON.stringify(loginResponse.body)}`,\n      );\n    }\n\n    authToken = loginResponse.body.token;\n\n    if (!authToken) {\n      throw new Error('No auth token received from login');\n    }\n  });\n\n  beforeEach(async () => {\n    // Clean up test data before each test to prevent contamination\n    await prisma.studentGoal.deleteMany({\n      where: {\n        student: {\n          userId: testUserId,\n        },\n      },\n    });\n    await prisma.student.deleteMany({\n      where: {\n        userId: testUserId,\n      },\n    });\n    await prisma.classRoutine.deleteMany({\n      where: {\n        userId: testUserId,\n      },\n    });\n    await prisma.subPlanRecord.deleteMany({\n      where: {\n        userId: testUserId,\n      },\n    });\n  });\n\n  afterAll(async () => {\n    // No explicit cleanup needed - global setup handles it\n  });\n\n  const createTestData = async () => {\n    // Use the existing test user created in beforeAll\n    const testUser = { id: testUserId };\n\n    // Create test class routines\n    await prisma.classRoutine.createMany({\n      data: [\n        {\n          userId: testUser.id,\n          title: 'Morning Circle',\n          description: 'Students gather in a circle for morning greeting and calendar time',\n          category: 'morning',\n          timeOfDay: '9:00 AM',\n          priority: 10,\n          isActive: true,\n        },\n        {\n          userId: testUser.id,\n          title: 'Line Up Procedure',\n          description: 'Students line up by door 3 after recess',\n          category: 'transition',\n          priority: 5,\n          isActive: true,\n        },\n        {\n          userId: testUser.id,\n          title: 'Emergency Evacuation',\n          description: 'Exit through west door, meet at flag pole',\n          category: 'emergency',\n          priority: 15,\n          isActive: true,\n        },\n      ],\n    });\n\n    // Create test students with goals\n    const student1 = await prisma.student.create({\n      data: {\n        userId: testUser.id,\n        firstName: 'Emma',\n        lastName: 'Johnson',\n        grade: 2,\n      },\n    });\n\n    const student2 = await prisma.student.create({\n      data: {\n        userId: testUser.id,\n        firstName: 'Liam',\n        lastName: 'Smith',\n        grade: 2,\n      },\n    });\n\n    // Create test goals\n    await prisma.studentGoal.createMany({\n      data: [\n        {\n          studentId: student1.id,\n          text: 'Identify character feelings in stories',\n          status: 'active',\n        },\n        {\n          studentId: student2.id,\n          text: 'Use doubles strategies for addition',\n          status: 'active',\n        },\n      ],\n    });\n\n    return testUser;\n  };\n\n  describe('POST /api/sub-plan/generate', () => {\n    it('should generate sub plan with all features included', async () => {\n      const testUser = await createTestData();\n\n      const options = {\n        date: '2025-04-12',\n        days: 1,\n        includeGoals: true,\n        includeRoutines: true,\n        includePlans: true,\n        anonymize: false,\n        userId: testUser.id,\n      };\n\n      const response = await request(app)\n        .post('/api/sub-plan/generate')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(options)\n        .expect(200);\n\n      expect(response.headers['content-type']).toBe('application/pdf');\n      expect(response.body).toBeDefined();\n    });\n\n    it('should generate anonymized sub plan', async () => {\n      const testUser = await createTestData();\n\n      const options = {\n        date: '2025-04-12',\n        days: 1,\n        includeGoals: true,\n        includeRoutines: true,\n        includePlans: true,\n        anonymize: true,\n        userId: testUser.id,\n      };\n\n      const response = await request(app)\n        .post('/api/sub-plan/generate')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(options)\n        .expect(200);\n\n      expect(response.headers['content-type']).toBe('application/pdf');\n    });\n\n    it('should save sub plan record when requested', async () => {\n      const testUser = await createTestData();\n\n      const options = {\n        date: '2025-04-12',\n        days: 1,\n        includeGoals: true,\n        includeRoutines: true,\n        includePlans: true,\n        anonymize: false,\n        saveRecord: true,\n        emailTo: 'substitute@school.com',\n        notes: 'Watch for peanut allergies',\n        userId: testUser.id,\n      };\n\n      await request(app)\n        .post('/api/sub-plan/generate')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(options)\n        .expect(200);\n\n      const record = await prisma.subPlanRecord.findFirst({\n        where: { userId: testUser.id },\n      });\n\n      expect(record).toBeDefined();\n      expect((record?.content as any)?.emailedTo).toBe('substitute@school.com');\n      expect(record?.notes).toBe('Watch for peanut allergies');\n    });\n  });\n\n  describe('Class Routine Management', () => {\n    it('should get all routines for user', async () => {\n      const testUser = await createTestData();\n\n      const response = await request(app)\n        .get('/api/sub-plan/routines')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ userId: testUser.id })\n        .expect(200);\n\n      expect(response.body).toHaveLength(3);\n      expect(response.body[0].title).toBe('Emergency Evacuation'); // Highest priority\n    });\n\n    it('should create new routine', async () => {\n      const testUser = await createTestData();\n\n      const newRoutine = {\n        userId: testUser.id,\n        title: 'Quiet Signal',\n        description: 'Raise hand for quiet, students copy',\n        category: 'behavior',\n        priority: 8,\n      };\n\n      const response = await request(app)\n        .post('/api/sub-plan/routines')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(newRoutine)\n        .expect(200);\n\n      expect(response.body.id).toBeDefined();\n      expect(response.body.title).toBe('Quiet Signal');\n    });\n\n    it('should update existing routine', async () => {\n      const testUser = await createTestData();\n\n      const routine = await prisma.classRoutine.findFirst({\n        where: { title: 'Morning Circle', userId: testUser.id },\n      });\n\n      const updateData = {\n        id: routine!.id,\n        title: 'Morning Meeting',\n        description: 'Updated morning routine',\n        category: 'morning',\n        priority: 12,\n      };\n\n      const response = await request(app)\n        .post('/api/sub-plan/routines')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(updateData)\n        .expect(200);\n\n      expect(response.body.title).toBe('Morning Meeting');\n      expect(response.body.priority).toBe(12);\n    });\n\n    it('should delete routine', async () => {\n      const testUser = await createTestData();\n\n      const routine = await prisma.classRoutine.findFirst({\n        where: { title: 'Line Up Procedure', userId: testUser.id },\n      });\n\n      await request(app)\n        .delete(`/api/sub-plan/routines/${routine!.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      const deleted = await prisma.classRoutine.findUnique({\n        where: { id: routine!.id },\n      });\n\n      expect(deleted).toBeNull();\n    });\n  });\n\n  describe('Sub Plan Records', () => {\n    it('should retrieve saved sub plan records', async () => {\n      const testUser = await createTestData();\n\n      // Create some test records\n      await prisma.subPlanRecord.createMany({\n        data: [\n          {\n            userId: testUser.id,\n            date: new Date('2025-04-10'),\n            daysCount: 1,\n            content: {},\n            includeGoals: true,\n            includeRoutines: true,\n            includePlans: true,\n            anonymized: false,\n          },\n          {\n            userId: testUser.id,\n            date: new Date('2025-04-08'),\n            daysCount: 2,\n            content: {},\n            includeGoals: false,\n            includeRoutines: true,\n            includePlans: true,\n            anonymized: true,\n          },\n        ],\n      });\n\n      const response = await request(app)\n        .get('/api/sub-plan/records')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ userId: testUser.id })\n        .expect(200);\n\n      expect(response.body).toHaveLength(2);\n      // Records should be sorted by date, most recent first\n      const firstRecordDate = new Date(response.body[0].date);\n      const secondRecordDate = new Date(response.body[1].date);\n      expect(firstRecordDate.getTime()).toBeGreaterThan(secondRecordDate.getTime());\n    });\n  });\n});\n"],"version":3}