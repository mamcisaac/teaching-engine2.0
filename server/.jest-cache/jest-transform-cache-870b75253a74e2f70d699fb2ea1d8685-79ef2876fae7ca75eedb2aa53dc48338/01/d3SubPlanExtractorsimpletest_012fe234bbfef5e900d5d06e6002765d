ce50d53dd6f768901a7b3f164099d613
import { describe, it, expect } from '@jest/globals';
import { extractScenarioTemplates } from '../../src/services/scenarioTemplateExtractor';
import { formatContactsForSubPlan, getEmergencyContactsList, generateEmergencyContactCard } from '../../src/services/contactExtractor';
describe('D3 Sub Plan Extractor - Simple Integration Tests', () => {
    describe('Scenario Template Extraction', () => {
        it('should extract scenario templates without conditions', async () => {
            const scenarios = await extractScenarioTemplates();
            expect(scenarios).toHaveProperty('scenarios');
            expect(scenarios).toHaveProperty('triggers');
            expect(scenarios).toHaveProperty('recommendedScenario');
            expect(scenarios.scenarios.length).toBeGreaterThan(0);
            // Check scenario structure
            const scenario = scenarios.scenarios[0];
            expect(scenario).toHaveProperty('id');
            expect(scenario).toHaveProperty('name');
            expect(scenario).toHaveProperty('procedures');
            expect(scenario).toHaveProperty('materials');
            expect(scenario).toHaveProperty('contacts');
            expect(scenario).toHaveProperty('template');
        });
        it('should detect weather scenario with conditions', async () => {
            const scenarios = await extractScenarioTemplates({
                weather: 'severe',
                technology: 'working',
                staffing: 'full',
                building: 'normal'
            });
            expect(scenarios.triggers).toContain('severe_weather');
            expect(scenarios.recommendedScenario?.id).toBe('severe_weather');
        });
        it('should detect technology failure scenario', async () => {
            const scenarios = await extractScenarioTemplates({
                weather: 'normal',
                technology: 'down',
                staffing: 'full',
                building: 'normal'
            });
            expect(scenarios.triggers).toContain('technology_failure');
            expect(scenarios.recommendedScenario?.id).toBe('technology_failure');
        });
        it('should prioritize lockdown scenario over others', async () => {
            const scenarios = await extractScenarioTemplates({
                weather: 'severe',
                technology: 'down',
                staffing: 'emergency',
                building: 'emergency'
            });
            expect(scenarios.triggers).toContain('severe_weather');
            expect(scenarios.triggers).toContain('technology_failure');
            expect(scenarios.triggers).toContain('staff_shortage');
            expect(scenarios.triggers).toContain('lockdown');
            // Lockdown should override other scenarios
            expect(scenarios.recommendedScenario?.id).toBe('lockdown');
        });
    });
    describe('Contact Extraction - Pure Functions', () => {
        const mockContacts = {
            emergency: [
                {
                    id: 'emergency-911',
                    name: 'Emergency Services',
                    role: 'Emergency',
                    phone: '911',
                    availability: '24/7',
                    priority: 'emergency',
                    category: 'safety'
                }
            ],
            administration: [
                {
                    id: 'admin-principal',
                    name: 'Dr. Smith',
                    role: 'Principal',
                    phone: '555-1234',
                    extension: '100',
                    availability: 'School hours',
                    priority: 'urgent',
                    category: 'administration'
                }
            ],
            support: [],
            technical: [],
            medical: [],
            transportation: [],
            custom: []
        };
        it('should format contacts for substitute plan', () => {
            const formatted = formatContactsForSubPlan(mockContacts);
            expect(formatted).toContain('üö® EMERGENCY CONTACTS:');
            expect(formatted).toContain('Emergency: Emergency Services - 911');
            expect(formatted).toContain('üë• ADMINISTRATION:');
            expect(formatted).toContain('Principal: Dr. Smith - 555-1234 ext. 100');
        });
        it('should get emergency contacts list', () => {
            const emergencyList = getEmergencyContactsList(mockContacts);
            expect(emergencyList).toContain('Emergency: 911');
            expect(emergencyList).toContain('Principal: 555-1234 ext. 100');
        });
        it('should generate emergency contact card', () => {
            const card = generateEmergencyContactCard(mockContacts);
            expect(card).toContain('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
            expect(card).toContain('‚îÇ         EMERGENCY CONTACTS          ‚îÇ');
            expect(card).toContain('‚îÇ Emergency: 911');
            expect(card).toContain('‚îÇ FOR IMMEDIATE EMERGENCIES CALL 911  ‚îÇ');
            expect(card).toContain('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,