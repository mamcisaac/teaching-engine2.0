{"version":3,"names":["cov_lwwiu19dt","actualCoverage","prisma","logger","BaseService","serviceName","metrics","constructor","f","s","b","name","child","service","operationCount","errorCount","averageResponseTime","lastOperation","Date","withRetry","operation","options","opts","maxRetries","baseDelay","maxDelay","exponentialBackoff","startTime","now","lastError","attempt","result","updateMetrics","info","error","delay","Math","min","pow","warn","message","nextRetryIn","sleep","attempts","withTransaction","$transaction","withParallel","operations","failFast","maxConcurrency","results","errors","successCount","batches","createBatches","globalIndex","batch","batchStartIndex","promises","map","batchIndex","operationIndex","Promise","all","length","handleError","context","errorMessage","Error","errorStack","stack","undefined","validateRequired","params","required","missing","filter","key","join","sanitizeInput","input","schema","sanitized","expectedType","Object","entries","value","String","trim","slice","parsed","Number","isNaN","Boolean","Array","isArray","getMetrics","resetMetrics","healthCheck","$queryRaw","healthy","details","database","uptime","getTime","responseTime","isError","totalTime","ms","resolve","setTimeout","items","batchSize","i","push"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/base/BaseService.ts"],"sourcesContent":["import { PrismaClient, Prisma } from '@teaching-engine/database';\nimport { prisma } from '../../prisma';\nimport logger from '../../logger';\nimport type { Logger } from 'pino';\n\nexport interface ServiceMetrics {\n  operationCount: number;\n  errorCount: number;\n  averageResponseTime: number;\n  lastOperation: Date;\n}\n\nexport interface RetryOptions {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  exponentialBackoff: boolean;\n}\n\nexport abstract class BaseService {\n  protected readonly prisma: PrismaClient;\n  protected readonly logger: Logger;\n  protected readonly serviceName: string;\n  private metrics: ServiceMetrics;\n\n  constructor(serviceName?: string) {\n    this.prisma = prisma;\n    this.serviceName = serviceName || this.constructor.name;\n    this.logger = logger.child({ service: this.serviceName });\n    this.metrics = {\n      operationCount: 0,\n      errorCount: 0,\n      averageResponseTime: 0,\n      lastOperation: new Date(),\n    };\n  }\n\n  /**\n   * Execute a function with retry logic and metrics tracking\n   */\n  protected async withRetry<T>(\n    operation: () => Promise<T>,\n    options: Partial<RetryOptions> = {},\n  ): Promise<T> {\n    const opts: RetryOptions = {\n      maxRetries: 3,\n      baseDelay: 1000,\n      maxDelay: 10000,\n      exponentialBackoff: true,\n      ...options,\n    };\n\n    const startTime = Date.now();\n    let lastError: unknown;\n\n    for (let attempt = 1; attempt <= opts.maxRetries + 1; attempt++) {\n      try {\n        const result = await operation();\n\n        // Update metrics on success\n        this.updateMetrics(Date.now() - startTime, false);\n\n        if (attempt > 1) {\n          this.logger.info(\n            { attempt, serviceName: this.serviceName },\n            'Operation succeeded after retry',\n          );\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        if (attempt <= opts.maxRetries) {\n          const delay = opts.exponentialBackoff\n            ? Math.min(opts.baseDelay * Math.pow(2, attempt - 1), opts.maxDelay)\n            : opts.baseDelay;\n\n          this.logger.warn(\n            {\n              error: error.message,\n              attempt,\n              maxRetries: opts.maxRetries,\n              nextRetryIn: delay,\n              serviceName: this.serviceName,\n            },\n            'Operation failed, retrying',\n          );\n\n          await this.sleep(delay);\n        }\n      }\n    }\n\n    // Update metrics on final failure\n    this.updateMetrics(Date.now() - startTime, true);\n\n    this.logger.error(\n      {\n        error: lastError,\n        attempts: opts.maxRetries + 1,\n        serviceName: this.serviceName,\n      },\n      'All retry attempts failed',\n    );\n\n    throw lastError;\n  }\n\n  /**\n   * Execute a function within a database transaction\n   */\n  protected async withTransaction<T>(\n    operation: (tx: Prisma.TransactionClient) => Promise<T>,\n  ): Promise<T> {\n    return await this.withRetry(async () => {\n      return await this.prisma.$transaction(operation);\n    });\n  }\n\n  /**\n   * Execute multiple operations in parallel with error handling\n   */\n  protected async withParallel<T>(\n    operations: (() => Promise<T>)[],\n    options: {\n      failFast?: boolean;\n      maxConcurrency?: number;\n    } = {},\n  ): Promise<{\n    results: (T | null)[];\n    errors: (Error | null)[];\n    successCount: number;\n  }> {\n    const { failFast = false, maxConcurrency = 10 } = options;\n    const results: (T | null)[] = [];\n    const errors: (Error | null)[] = [];\n    let successCount = 0;\n\n    // Process operations in batches if max concurrency is set\n    const batches = this.createBatches(operations, maxConcurrency);\n    let globalIndex = 0;\n\n    for (const batch of batches) {\n      const batchStartIndex = globalIndex;\n      const promises = batch.map(async (operation, batchIndex) => {\n        const operationIndex = batchStartIndex + batchIndex;\n        try {\n          const result = await operation();\n          results[operationIndex] = result;\n          errors[operationIndex] = null;\n          successCount++;\n          return result;\n        } catch (error) {\n          results[operationIndex] = null;\n          errors[operationIndex] = error as Error;\n\n          if (failFast) {\n            throw error;\n          }\n\n          this.logger.warn(\n            {\n              error: (error as Error).message,\n              operationIndex: operationIndex,\n              serviceName: this.serviceName,\n            },\n            'Parallel operation failed',\n          );\n\n          return null;\n        }\n      });\n\n      if (failFast) {\n        try {\n          await Promise.all(promises);\n        } catch (error) {\n          // When failFast is true, stop processing remaining batches\n          break;\n        }\n      } else {\n        await Promise.all(promises);\n      }\n      globalIndex += batch.length;\n    }\n\n    return { results, errors, successCount };\n  }\n\n  /**\n   * Standardized error handling\n   */\n  protected handleError(error: unknown, context?: Record<string, unknown>): never {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorStack = error instanceof Error ? error.stack : undefined;\n\n    this.logger.error(\n      {\n        error: errorMessage,\n        stack: errorStack,\n        context,\n        serviceName: this.serviceName,\n      },\n      'Service operation failed',\n    );\n\n    // Re-throw with service context\n    if (error instanceof Error) {\n      error.message = `${this.serviceName}: ${error.message}`;\n      throw error;\n    }\n\n    throw new Error(`${this.serviceName}: ${errorMessage}`);\n  }\n\n  /**\n   * Validate required parameters\n   */\n  protected validateRequired(params: Record<string, unknown>, required: string[]): void {\n    const missing = required.filter(\n      (key) => params[key] === undefined || params[key] === null || params[key] === '',\n    );\n\n    if (missing.length > 0) {\n      throw new Error(`Missing required parameters: ${missing.join(', ')}`);\n    }\n  }\n\n  /**\n   * Sanitize and validate input data\n   */\n  protected sanitizeInput<T extends Record<string, unknown>>(\n    input: T,\n    schema: Record<keyof T, 'string' | 'number' | 'boolean' | 'object' | 'array'>,\n  ): T {\n    const sanitized = { ...input };\n\n    for (const [key, expectedType] of Object.entries(schema)) {\n      const value = sanitized[key as keyof T];\n\n      if (value === undefined || value === null) continue;\n\n      switch (expectedType) {\n        case 'string':\n          if (typeof value !== 'string') {\n            (sanitized as Record<string, unknown>)[key] = String(value);\n          }\n          // Trim whitespace and limit length\n          (sanitized as Record<string, unknown>)[key] = String(value).trim().slice(0, 1000);\n          break;\n\n        case 'number':\n          if (typeof value !== 'number') {\n            const parsed = Number(value);\n            if (isNaN(parsed)) {\n              throw new Error(`Invalid number value for ${key}: ${value}`);\n            }\n            (sanitized as Record<string, unknown>)[key] = parsed;\n          }\n          break;\n\n        case 'boolean':\n          if (typeof value !== 'boolean') {\n            (sanitized as Record<string, unknown>)[key] = Boolean(value);\n          }\n          break;\n\n        case 'object':\n          if (typeof value !== 'object' || Array.isArray(value)) {\n            throw new Error(`Expected object for ${key}, got ${typeof value}`);\n          }\n          break;\n\n        case 'array':\n          if (!Array.isArray(value)) {\n            throw new Error(`Expected array for ${key}, got ${typeof value}`);\n          }\n          break;\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Get service performance metrics\n   */\n  getMetrics(): ServiceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset service metrics\n   */\n  resetMetrics(): void {\n    this.metrics = {\n      operationCount: 0,\n      errorCount: 0,\n      averageResponseTime: 0,\n      lastOperation: new Date(),\n    };\n  }\n\n  /**\n   * Check service health\n   */\n  async healthCheck(): Promise<{\n    healthy: boolean;\n    details: {\n      database: boolean;\n      metrics: ServiceMetrics;\n      uptime: number;\n    };\n  }> {\n    try {\n      // Test database connection\n      await this.prisma.$queryRaw`SELECT 1`;\n\n      return {\n        healthy: true,\n        details: {\n          database: true,\n          metrics: this.getMetrics(),\n          uptime: Date.now() - this.metrics.lastOperation.getTime(),\n        },\n      };\n    } catch (error) {\n      this.logger.error({ error }, 'Health check failed');\n\n      return {\n        healthy: false,\n        details: {\n          database: false,\n          metrics: this.getMetrics(),\n          uptime: Date.now() - this.metrics.lastOperation.getTime(),\n        },\n      };\n    }\n  }\n\n  // Private helper methods\n\n  private updateMetrics(responseTime: number, isError: boolean): void {\n    this.metrics.operationCount++;\n    this.metrics.lastOperation = new Date();\n\n    if (isError) {\n      this.metrics.errorCount++;\n    }\n\n    // Update rolling average response time\n    const totalTime = this.metrics.averageResponseTime * (this.metrics.operationCount - 1);\n    this.metrics.averageResponseTime = (totalTime + responseTime) / this.metrics.operationCount;\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  private createBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n}\n\nexport default BaseService;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}