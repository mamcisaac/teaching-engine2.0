f270e5cb64e3c5d9e44b081a92336458
/* istanbul ignore next */
function cov_frisg9hfe() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts";
  var hash = "fc8011912d5e52a19523a866562c4280e729f3d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 21
        }
      },
      "1": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "2": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 48
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 75
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "8": {
        start: {
          line: 24,
          column: 28
        },
        end: {
          line: 24,
          column: 65
        }
      },
      "9": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 54
        }
      },
      "10": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "11": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "12": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "13": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 43
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 69
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 54
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "18": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 51,
          column: 65
        }
      },
      "19": {
        start: {
          line: 52,
          column: 26
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "20": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "21": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 36
        }
      },
      "22": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "23": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 28
        }
      },
      "24": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 34
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "26": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 43
        }
      },
      "27": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 36
        }
      },
      "28": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 75
        }
      },
      "29": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "30": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 32
        }
      },
      "31": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 37
        }
      },
      "32": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 30
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 93
        }
      },
      "34": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 31
        }
      },
      "35": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 75
        }
      },
      "36": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 24
        }
      },
      "37": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "38": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 55
        }
      },
      "39": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "40": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 30
        }
      },
      "41": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 41
        }
      },
      "42": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 48
        }
      },
      "43": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 68
        }
      },
      "44": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 25
        }
      },
      "45": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 54
        }
      },
      "46": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "47": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 65
        }
      },
      "48": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 54
        }
      },
      "49": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "50": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 75
        }
      },
      "51": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 27
        }
      },
      "52": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 78
        }
      },
      "53": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 25
        }
      },
      "54": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "55": {
        start: {
          line: 118,
          column: 31
        },
        end: {
          line: 118,
          column: 32
        }
      },
      "56": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "57": {
        start: {
          line: 120,
          column: 31
        },
        end: {
          line: 120,
          column: 46
        }
      },
      "58": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 126,
          column: 17
        }
      },
      "59": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 125,
          column: 21
        }
      },
      "60": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 123,
          column: 47
        }
      },
      "61": {
        start: {
          line: 124,
          column: 24
        },
        end: {
          line: 124,
          column: 39
        }
      },
      "62": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 83
        }
      },
      "63": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "64": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 35
        }
      },
      "65": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 36
        }
      },
      "66": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "67": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 68
        }
      },
      "68": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 32
        }
      },
      "69": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 77
        }
      },
      "70": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 21
        }
      },
      "71": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "72": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 148,
          column: 65
        }
      },
      "73": {
        start: {
          line: 149,
          column: 26
        },
        end: {
          line: 149,
          column: 49
        }
      },
      "74": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 151,
          column: 29
        }
      },
      "75": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 29
        }
      },
      "76": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "77": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "78": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 43
        }
      },
      "79": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "80": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 24
        }
      },
      "81": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 85
        }
      },
      "82": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 25
        }
      },
      "83": {
        start: {
          line: 169,
          column: 30
        },
        end: {
          line: 169,
          column: 65
        }
      },
      "84": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 170,
          column: 79
        }
      },
      "85": {
        start: {
          line: 172,
          column: 26
        },
        end: {
          line: 172,
          column: 27
        }
      },
      "86": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "87": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 57
        }
      },
      "88": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "89": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "90": {
        start: {
          line: 190,
          column: 32
        },
        end: {
          line: 190,
          column: 79
        }
      },
      "91": {
        start: {
          line: 191,
          column: 26
        },
        end: {
          line: 191,
          column: 102
        }
      },
      "92": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 35
        }
      },
      "93": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "94": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "95": {
        start: {
          line: 196,
          column: 37
        },
        end: {
          line: 196,
          column: 90
        }
      },
      "96": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 48
        }
      },
      "97": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 32
        }
      },
      "98": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 92
        }
      },
      "99": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 22
        }
      },
      "100": {
        start: {
          line: 211,
          column: 27
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "101": {
        start: {
          line: 211,
          column: 50
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "102": {
        start: {
          line: 211,
          column: 56
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "103": {
        start: {
          line: 215,
          column: 41
        },
        end: {
          line: 217,
          column: 10
        }
      },
      "104": {
        start: {
          line: 218,
          column: 23
        },
        end: {
          line: 218,
          column: 101
        }
      },
      "105": {
        start: {
          line: 218,
          column: 52
        },
        end: {
          line: 218,
          column: 74
        }
      },
      "106": {
        start: {
          line: 218,
          column: 91
        },
        end: {
          line: 218,
          column: 100
        }
      },
      "107": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 223,
          column: 40
        }
      },
      "108": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 52
        }
      },
      "109": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 74
        }
      },
      "110": {
        start: {
          line: 230,
          column: 45
        },
        end: {
          line: 230,
          column: 73
        }
      },
      "111": {
        start: {
          line: 230,
          column: 51
        },
        end: {
          line: 230,
          column: 73
        }
      },
      "112": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 233,
          column: 10
        }
      },
      "113": {
        start: {
          line: 234,
          column: 23
        },
        end: {
          line: 234,
          column: 25
        }
      },
      "114": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "115": {
        start: {
          line: 235,
          column: 21
        },
        end: {
          line: 235,
          column: 22
        }
      },
      "116": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 41
        }
      },
      "117": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 22
        }
      },
      "118": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "119": {
        start: {
          line: 245,
          column: 28
        },
        end: {
          line: 245,
          column: 65
        }
      },
      "120": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 246,
          column: 49
        }
      },
      "121": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 248,
          column: 29
        }
      },
      "122": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 29
        }
      },
      "123": {
        start: {
          line: 250,
          column: 24
        },
        end: {
          line: 250,
          column: 34
        }
      },
      "124": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "125": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 43
        }
      },
      "126": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 29
        }
      },
      "127": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 31
        }
      },
      "128": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 34
        }
      },
      "129": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 37
        }
      },
      "130": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 83
        }
      },
      "131": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 24
        }
      },
      "132": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 82
        }
      },
      "133": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 25
        }
      },
      "134": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 295,
          column: 11
        }
      },
      "135": {
        start: {
          line: 271,
          column: 33
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "136": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "137": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 57
        }
      },
      "138": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 59
        }
      },
      "139": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 284,
          column: 53
        }
      },
      "140": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 29
        }
      },
      "141": {
        start: {
          line: 290,
          column: 29
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "142": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 23
        }
      },
      "143": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 55
        }
      },
      "144": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 304,
          column: 19
        }
      },
      "145": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 19
        }
      },
      "146": {
        start: {
          line: 306,
          column: 21
        },
        end: {
          line: 306,
          column: 25
        }
      },
      "147": {
        start: {
          line: 307,
          column: 27
        },
        end: {
          line: 307,
          column: 37
        }
      },
      "148": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "149": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "150": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 50
        }
      },
      "151": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 29
        }
      },
      "152": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "153": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 38
        }
      },
      "154": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 320,
          column: 42
        }
      },
      "155": {
        start: {
          line: 325,
          column: 24
        },
        end: {
          line: 325,
          column: 44
        }
      },
      "156": {
        start: {
          line: 326,
          column: 26
        },
        end: {
          line: 326,
          column: 61
        }
      },
      "157": {
        start: {
          line: 327,
          column: 25
        },
        end: {
          line: 327,
          column: 28
        }
      },
      "158": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 46
        }
      },
      "159": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "160": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "161": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "162": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 36
        }
      },
      "163": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "164": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 21
        }
      },
      "165": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "166": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 21
        }
      },
      "167": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "168": {
        start: {
          line: 344,
          column: 31
        },
        end: {
          line: 344,
          column: 52
        }
      },
      "169": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 41
        }
      },
      "170": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 19
        }
      },
      "171": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 363,
          column: 35
        }
      },
      "172": {
        start: {
          line: 352,
          column: 24
        },
        end: {
          line: 352,
          column: 34
        }
      },
      "173": {
        start: {
          line: 353,
          column: 31
        },
        end: {
          line: 353,
          column: 32
        }
      },
      "174": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "175": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "176": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 356,
          column: 43
        }
      },
      "177": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 35
        }
      },
      "178": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "179": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 87
        }
      },
      "180": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "181": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 48
        }
      },
      "182": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 27
        }
      },
      "183": {
        start: {
          line: 376,
          column: 28
        },
        end: {
          line: 376,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 40
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 33
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 47
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 36
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 27
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 116
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 33
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 15
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 168
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 38
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 45
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 210
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 211,
            column: 39
          },
          end: {
            line: 211,
            column: 40
          }
        },
        loc: {
          start: {
            line: 211,
            column: 50
          },
          end: {
            line: 214,
            column: 10
          }
        },
        line: 211
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 211,
            column: 50
          },
          end: {
            line: 211,
            column: 51
          }
        },
        loc: {
          start: {
            line: 211,
            column: 56
          },
          end: {
            line: 214,
            column: 10
          }
        },
        line: 211
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 218,
            column: 38
          },
          end: {
            line: 218,
            column: 39
          }
        },
        loc: {
          start: {
            line: 218,
            column: 52
          },
          end: {
            line: 218,
            column: 74
          }
        },
        line: 218
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 218,
            column: 80
          },
          end: {
            line: 218,
            column: 81
          }
        },
        loc: {
          start: {
            line: 218,
            column: 91
          },
          end: {
            line: 218,
            column: 100
          }
        },
        line: 218
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 42
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 229
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 230,
            column: 36
          },
          end: {
            line: 230,
            column: 37
          }
        },
        loc: {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 230,
            column: 73
          }
        },
        line: 230
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 230,
            column: 46
          }
        },
        loc: {
          start: {
            line: 230,
            column: 51
          },
          end: {
            line: 230,
            column: 73
          }
        },
        line: 230
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 43
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 243
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 54
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 269
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 271,
            column: 17
          },
          end: {
            line: 271,
            column: 18
          }
        },
        loc: {
          start: {
            line: 271,
            column: 33
          },
          end: {
            line: 276,
            column: 9
          }
        },
        line: 271
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 277,
            column: 18
          },
          end: {
            line: 277,
            column: 19
          }
        },
        loc: {
          start: {
            line: 277,
            column: 28
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 277
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 290,
            column: 17
          },
          end: {
            line: 290,
            column: 18
          }
        },
        loc: {
          start: {
            line: 290,
            column: 29
          },
          end: {
            line: 295,
            column: 9
          }
        },
        line: 290
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 29
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 299
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 27
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 302
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 29
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 323
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 330
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 349
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 351,
            column: 43
          },
          end: {
            line: 351,
            column: 44
          }
        },
        loc: {
          start: {
            line: 351,
            column: 49
          },
          end: {
            line: 363,
            column: 9
          }
        },
        line: 351
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 14
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 368
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 12,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 28
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 44
          }
        }, {
          start: {
            line: 14,
            column: 48
          },
          end: {
            line: 14,
            column: 61
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 15,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 42
          },
          end: {
            line: 15,
            column: 47
          }
        }],
        line: 15
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 16,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 16,
            column: 56
          }
        }, {
          start: {
            line: 16,
            column: 60
          },
          end: {
            line: 16,
            column: 74
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 26
          },
          end: {
            line: 22,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 36
          },
          end: {
            line: 22,
            column: 38
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 35
          }
        }, {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 25,
            column: 54
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 49,
            column: 29
          },
          end: {
            line: 49,
            column: 31
          }
        }],
        line: 49
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "10": {
        loc: {
          start: {
            line: 81,
            column: 33
          },
          end: {
            line: 81,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 43
          },
          end: {
            line: 81,
            column: 45
          }
        }],
        line: 81
      },
      "11": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "12": {
        loc: {
          start: {
            line: 99,
            column: 22
          },
          end: {
            line: 99,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 32
          },
          end: {
            line: 99,
            column: 34
          }
        }],
        line: 99
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: 129,
            column: 17
          },
          end: {
            line: 135,
            column: 13
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 125,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 125,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 146,
            column: 19
          },
          end: {
            line: 146,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 146,
            column: 29
          },
          end: {
            line: 146,
            column: 31
          }
        }],
        line: 146
      },
      "17": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 151,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 151,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "18": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "19": {
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 44
          },
          end: {
            line: 170,
            column: 75
          }
        }, {
          start: {
            line: 170,
            column: 78
          },
          end: {
            line: 170,
            column: 79
          }
        }],
        line: 170
      },
      "20": {
        loc: {
          start: {
            line: 190,
            column: 32
          },
          end: {
            line: 190,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 44
          },
          end: {
            line: 190,
            column: 69
          }
        }, {
          start: {
            line: 190,
            column: 72
          },
          end: {
            line: 190,
            column: 79
          }
        }],
        line: 190
      },
      "21": {
        loc: {
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "22": {
        loc: {
          start: {
            line: 196,
            column: 37
          },
          end: {
            line: 196,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 49
          },
          end: {
            line: 196,
            column: 84
          }
        }, {
          start: {
            line: 196,
            column: 87
          },
          end: {
            line: 196,
            column: 90
          }
        }],
        line: 196
      },
      "23": {
        loc: {
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 210,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 210,
            column: 43
          }
        }],
        line: 210
      },
      "24": {
        loc: {
          start: {
            line: 229,
            column: 28
          },
          end: {
            line: 229,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 38
          },
          end: {
            line: 229,
            column: 40
          }
        }],
        line: 229
      },
      "25": {
        loc: {
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 243,
            column: 41
          }
        }],
        line: 243
      },
      "26": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 248,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 248,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "27": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "28": {
        loc: {
          start: {
            line: 269,
            column: 18
          },
          end: {
            line: 269,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 269,
            column: 27
          },
          end: {
            line: 269,
            column: 40
          }
        }],
        line: 269
      },
      "29": {
        loc: {
          start: {
            line: 269,
            column: 42
          },
          end: {
            line: 269,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 269,
            column: 50
          },
          end: {
            line: 269,
            column: 52
          }
        }],
        line: 269
      },
      "30": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 280,
            column: 57
          }
        }, {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 282,
            column: 59
          }
        }, {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 284,
            column: 53
          }
        }, {
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 286,
            column: 29
          }
        }],
        line: 278
      },
      "31": {
        loc: {
          start: {
            line: 300,
            column: 15
          },
          end: {
            line: 300,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 300,
            column: 27
          },
          end: {
            line: 300,
            column: 48
          }
        }, {
          start: {
            line: 300,
            column: 51
          },
          end: {
            line: 300,
            column: 54
          }
        }],
        line: 300
      },
      "32": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "33": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "34": {
        loc: {
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "35": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 332,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 332,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "36": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 331,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 331,
            column: 26
          }
        }, {
          start: {
            line: 331,
            column: 30
          },
          end: {
            line: 331,
            column: 49
          }
        }],
        line: 331
      },
      "37": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "38": {
        loc: {
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "39": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "40": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "41": {
        loc: {
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "42": {
        loc: {
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "43": {
        loc: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0],
      "30": [0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts"],
      sourcesContent: ["import BaseService from './base/BaseService';\n\nexport interface CacheEntry<T = unknown> {\n  key: string;\n  value: T;\n  ttl: number; // Time to live in milliseconds\n  createdAt: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface CacheOptions {\n  defaultTTL?: number; // Default TTL in milliseconds\n  cleanupInterval?: number; // Cleanup interval in milliseconds\n  maxSize?: number; // Maximum number of entries\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  size: number;\n  maxSize: number;\n  memoryUsage: number; // Approximate memory usage in bytes\n}\n\nexport class CacheService extends BaseService {\n  private cache = new Map<string, CacheEntry>();\n  private stats = {\n    hits: 0,\n    misses: 0,\n  };\n  private cleanupInterval: NodeJS.Timeout;\n  private readonly defaultTTL: number;\n  private readonly maxSize: number;\n  private readonly cleanupIntervalMs: number;\n\n  constructor(options: CacheOptions = {}) {\n    super('CacheService');\n\n    this.defaultTTL = options.defaultTTL || 5 * 60 * 1000; // 5 minutes\n    this.maxSize = options.maxSize || 10000; // Maximum cache entries\n    this.cleanupIntervalMs = options.cleanupInterval || 10 * 60 * 1000; // 10 minutes\n\n    this.startCleanupTask();\n  }\n\n  /**\n   * Store a value in the cache\n   */\n  async set<T>(\n    key: string,\n    value: T,\n    options: { ttl?: number; namespace?: string } = {},\n  ): Promise<void> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const ttl = options.ttl || this.defaultTTL;\n      const now = Date.now();\n\n      const entry: CacheEntry<T> = {\n        key: key, // Store original key, not fullKey\n        value,\n        ttl,\n        createdAt: now,\n        accessCount: 0,\n        lastAccessed: now,\n      };\n\n      // Check if we need to evict entries to make room\n      if (this.cache.size >= this.maxSize) {\n        await this.evictLeastUsed();\n      }\n\n      this.cache.set(fullKey, entry);\n\n      this.logger.debug({ key: fullKey, ttl }, 'Value cached');\n    } catch (error) {\n      this.handleError(error, { key, options });\n    }\n  }\n\n  /**\n   * Retrieve a value from the cache\n   */\n  async get<T>(key: string, options: { namespace?: string } = {}): Promise<T | null> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey) as CacheEntry<T> | undefined;\n\n      if (!entry) {\n        this.stats.misses++;\n        this.logger.debug({ key: fullKey }, 'Cache miss');\n        return null;\n      }\n\n      // Check if entry has expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        this.stats.misses++;\n        this.logger.debug({ key: fullKey }, 'Cache entry expired');\n        return null;\n      }\n\n      // Update access stats\n      entry.accessCount++;\n      entry.lastAccessed = now;\n      this.stats.hits++;\n\n      this.logger.debug({ key: fullKey, accessCount: entry.accessCount }, 'Cache hit');\n      return entry.value;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to get cache value');\n      return null;\n    }\n  }\n\n  /**\n   * Get or set a value using a factory function\n   */\n  async getOrSet<T>(\n    key: string,\n    factory: () => Promise<T>,\n    options: { ttl?: number; namespace?: string } = {},\n  ): Promise<T> {\n    try {\n      const cached = await this.get<T>(key, options);\n      if (cached !== null) {\n        return cached;\n      }\n\n      const value = await factory();\n      await this.set(key, value, options);\n\n      this.logger.debug({ key }, 'Value computed and cached');\n      return value;\n    } catch (error) {\n      this.handleError(error, { key, options });\n    }\n  }\n\n  /**\n   * Delete a value from the cache\n   */\n  async delete(key: string, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const deleted = this.cache.delete(fullKey);\n\n      if (deleted) {\n        this.logger.debug({ key: fullKey }, 'Cache entry deleted');\n      }\n\n      return deleted;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to delete cache entry');\n      return false;\n    }\n  }\n\n  /**\n   * Clear all entries in a namespace (or entire cache if no namespace)\n   */\n  async clear(namespace?: string): Promise<number> {\n    try {\n      let deletedCount = 0;\n\n      if (namespace) {\n        const prefix = `${namespace}:`;\n        for (const key of this.cache.keys()) {\n          if (key.startsWith(prefix)) {\n            this.cache.delete(key);\n            deletedCount++;\n          }\n        }\n        this.logger.info({ namespace, deletedCount }, 'Namespace cleared');\n      } else {\n        deletedCount = this.cache.size;\n        this.cache.clear();\n        this.stats.hits = 0;\n        this.stats.misses = 0;\n        this.logger.info({ deletedCount }, 'Cache cleared');\n      }\n\n      return deletedCount;\n    } catch (error) {\n      this.logger.error({ error, namespace }, 'Failed to clear cache');\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a key exists in the cache\n   */\n  async has(key: string, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey);\n\n      if (!entry) return false;\n\n      // Check if expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to check cache key existence');\n      return false;\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    const totalRequests = this.stats.hits + this.stats.misses;\n    const hitRate = totalRequests > 0 ? this.stats.hits / totalRequests : 0;\n\n    // Approximate memory usage calculation\n    let memoryUsage = 0;\n    for (const entry of this.cache.values()) {\n      memoryUsage += this.estimateEntrySize(entry);\n    }\n\n    return {\n      hits: this.stats.hits,\n      misses: this.stats.misses,\n      hitRate: Math.round(hitRate * 10000) / 100, // Percentage with 2 decimal places\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      memoryUsage,\n    };\n  }\n\n  /**\n   * Get keys matching a pattern (supports wildcards)\n   */\n  async getKeys(pattern: string, namespace?: string): Promise<string[]> {\n    try {\n      const fullPattern = namespace ? `${namespace}:${pattern}` : pattern;\n      const regex = new RegExp('^' + fullPattern.replace(/\\*/g, '.*').replace(/\\?/g, '.') + '$');\n\n      const matchingKeys: string[] = [];\n      for (const key of this.cache.keys()) {\n        if (regex.test(key)) {\n          // Remove namespace prefix if present\n          const cleanKey = namespace ? key.substring(namespace.length + 1) : key;\n          matchingKeys.push(cleanKey);\n        }\n      }\n\n      return matchingKeys;\n    } catch (error) {\n      this.logger.error({ error, pattern, namespace }, 'Failed to get matching keys');\n      return [];\n    }\n  }\n\n  /**\n   * Set multiple values at once\n   */\n  async setMultiple<T>(\n    entries: { key: string; value: T; ttl?: number }[],\n    options: { namespace?: string } = {},\n  ): Promise<{ successful: number; failed: string[] }> {\n    const operations = entries.map(\n      (entry) => () =>\n        this.set(entry.key, entry.value, {\n          ttl: entry.ttl,\n          namespace: options.namespace,\n        }),\n    );\n\n    const { successCount, errors } = await this.withParallel(operations, {\n      failFast: false,\n    });\n\n    const failed = entries.filter((_, index) => errors[index] !== null).map((entry) => entry.key);\n\n    this.logger.info(\n      {\n        total: entries.length,\n        successful: successCount,\n        failed: failed.length,\n      },\n      'Batch cache set completed',\n    );\n\n    return { successful: successCount, failed };\n  }\n\n  /**\n   * Get multiple values at once\n   */\n  async getMultiple<T>(\n    keys: string[],\n    options: { namespace?: string } = {},\n  ): Promise<{ [key: string]: T | null }> {\n    const operations = keys.map((key) => () => this.get<T>(key, options));\n\n    const { results } = await this.withParallel(operations, {\n      failFast: false,\n    });\n\n    const result: { [key: string]: T | null } = {};\n    for (let i = 0; i < keys.length; i++) {\n      result[keys[i]] = results[i] as T | null;\n    }\n\n    return result;\n  }\n\n  /**\n   * Extend the TTL of an existing cache entry\n   */\n  async touch(key: string, newTTL: number, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey);\n\n      if (!entry) return false;\n\n      // Check if expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        return false;\n      }\n\n      entry.ttl = newTTL;\n      entry.createdAt = now; // Reset creation time\n      entry.lastAccessed = now;\n\n      this.logger.debug({ key: fullKey, newTTL }, 'Cache entry TTL updated');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to update cache entry TTL');\n      return false;\n    }\n  }\n\n  /**\n   * Get cache entries sorted by various criteria\n   */\n  getTopEntries(\n    sortBy: 'accessCount' | 'lastAccessed' | 'createdAt' = 'accessCount',\n    limit: number = 10,\n  ): Array<{ key: string; accessCount: number; lastAccessed: Date; createdAt: Date }> {\n    const entries = Array.from(this.cache.entries())\n      .map(([, entry]) => ({\n        key: entry.key, // Use the original key stored in the entry\n        accessCount: entry.accessCount,\n        lastAccessed: entry.lastAccessed,\n        createdAt: entry.createdAt,\n      }))\n      .sort((a, b) => {\n        switch (sortBy) {\n          case 'accessCount':\n            return b.accessCount - a.accessCount;\n          case 'lastAccessed':\n            return b.lastAccessed - a.lastAccessed;\n          case 'createdAt':\n            return b.createdAt - a.createdAt;\n          default:\n            return 0;\n        }\n      })\n      .slice(0, limit)\n      .map((entry) => ({\n        key: entry.key,\n        accessCount: entry.accessCount,\n        lastAccessed: new Date(entry.lastAccessed),\n        createdAt: new Date(entry.createdAt),\n      }));\n\n    return entries;\n  }\n\n  // Private methods\n\n  private buildKey(key: string, namespace?: string): string {\n    return namespace ? `${namespace}:${key}` : key;\n  }\n\n  private async evictLeastUsed(): Promise<void> {\n    if (this.cache.size === 0) return;\n\n    // Find the least recently used entry\n    let lruKey: string | null = null;\n    let oldestAccess = Date.now();\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < oldestAccess) {\n        oldestAccess = entry.lastAccessed;\n        lruKey = key;\n      }\n    }\n\n    if (lruKey) {\n      this.cache.delete(lruKey);\n      this.logger.info(\n        {\n          evictedKey: lruKey,\n          cacheSize: this.cache.size,\n          oldestAccess,\n        },\n        'Evicted LRU cache entry',\n      );\n    }\n  }\n\n  private estimateEntrySize(entry: CacheEntry): number {\n    // Rough estimation of memory usage\n    const keySize = entry.key.length * 2; // 2 bytes per character (UTF-16)\n    const valueSize = this.estimateValueSize(entry.value);\n    const overhead = 100; // Approximate overhead for entry metadata\n\n    return keySize + valueSize + overhead;\n  }\n\n  private estimateValueSize(value: unknown): number {\n    if (value === null || value === undefined) return 0;\n\n    if (typeof value === 'string') {\n      return value.length * 2; // 2 bytes per character\n    }\n\n    if (typeof value === 'number') {\n      return 8; // 64-bit number\n    }\n\n    if (typeof value === 'boolean') {\n      return 1;\n    }\n\n    if (typeof value === 'object') {\n      // Rough estimation for objects\n      const jsonString = JSON.stringify(value);\n      return jsonString.length * 2;\n    }\n\n    return 100; // Default estimation\n  }\n\n  private startCleanupTask(): void {\n    // Clean up expired entries at configured interval\n    this.cleanupInterval = setInterval(() => {\n      const now = Date.now();\n      let cleanedCount = 0;\n\n      for (const [key, entry] of this.cache.entries()) {\n        if (now - entry.createdAt > entry.ttl) {\n          this.cache.delete(key);\n          cleanedCount++;\n        }\n      }\n\n      if (cleanedCount > 0) {\n        this.logger.info({ cleanedCount }, 'Cleaned up expired cache entries');\n      }\n    }, this.cleanupIntervalMs);\n  }\n\n  /**\n   * Cleanup resources on service shutdown\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nexport const cacheService = new CacheService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fc8011912d5e52a19523a866562c4280e729f3d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_frisg9hfe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_frisg9hfe();
import BaseService from './base/BaseService';
export class CacheService extends BaseService {
  cache =
  /* istanbul ignore next */
  (cov_frisg9hfe().s[0]++, new Map());
  stats =
  /* istanbul ignore next */
  (cov_frisg9hfe().s[1]++, {
    hits: 0,
    misses: 0
  });
  cleanupInterval;
  defaultTTL;
  maxSize;
  cleanupIntervalMs;
  constructor(options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[0]++;
    cov_frisg9hfe().s[2]++;
    super('CacheService');
    /* istanbul ignore next */
    cov_frisg9hfe().s[3]++;
    this.defaultTTL =
    /* istanbul ignore next */
    (cov_frisg9hfe().b[1][0]++, options.defaultTTL) ||
    /* istanbul ignore next */
    (cov_frisg9hfe().b[1][1]++, 5 * 60 * 1000); // 5 minutes
    /* istanbul ignore next */
    cov_frisg9hfe().s[4]++;
    this.maxSize =
    /* istanbul ignore next */
    (cov_frisg9hfe().b[2][0]++, options.maxSize) ||
    /* istanbul ignore next */
    (cov_frisg9hfe().b[2][1]++, 10000); // Maximum cache entries
    /* istanbul ignore next */
    cov_frisg9hfe().s[5]++;
    this.cleanupIntervalMs =
    /* istanbul ignore next */
    (cov_frisg9hfe().b[3][0]++, options.cleanupInterval) ||
    /* istanbul ignore next */
    (cov_frisg9hfe().b[3][1]++, 10 * 60 * 1000); // 10 minutes
    /* istanbul ignore next */
    cov_frisg9hfe().s[6]++;
    this.startCleanupTask();
  }
  /**
   * Store a value in the cache
   */
  async set(key, value, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[4][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[1]++;
    cov_frisg9hfe().s[7]++;
    try {
      const fullKey =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[8]++, this.buildKey(key, options.namespace));
      const ttl =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[9]++,
      /* istanbul ignore next */
      (cov_frisg9hfe().b[5][0]++, options.ttl) ||
      /* istanbul ignore next */
      (cov_frisg9hfe().b[5][1]++, this.defaultTTL));
      const now =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[10]++, Date.now());
      const entry =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[11]++, {
        key: key,
        // Store original key, not fullKey
        value,
        ttl,
        createdAt: now,
        accessCount: 0,
        lastAccessed: now
      });
      // Check if we need to evict entries to make room
      /* istanbul ignore next */
      cov_frisg9hfe().s[12]++;
      if (this.cache.size >= this.maxSize) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[6][0]++;
        cov_frisg9hfe().s[13]++;
        await this.evictLeastUsed();
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[6][1]++;
      }
      cov_frisg9hfe().s[14]++;
      this.cache.set(fullKey, entry);
      /* istanbul ignore next */
      cov_frisg9hfe().s[15]++;
      this.logger.debug({
        key: fullKey,
        ttl
      }, 'Value cached');
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[16]++;
      this.handleError(error, {
        key,
        options
      });
    }
  }
  /**
   * Retrieve a value from the cache
   */
  async get(key, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[2]++;
    cov_frisg9hfe().s[17]++;
    try {
      const fullKey =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[18]++, this.buildKey(key, options.namespace));
      const entry =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[19]++, this.cache.get(fullKey));
      /* istanbul ignore next */
      cov_frisg9hfe().s[20]++;
      if (!entry) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[8][0]++;
        cov_frisg9hfe().s[21]++;
        this.stats.misses++;
        /* istanbul ignore next */
        cov_frisg9hfe().s[22]++;
        this.logger.debug({
          key: fullKey
        }, 'Cache miss');
        /* istanbul ignore next */
        cov_frisg9hfe().s[23]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[8][1]++;
      }
      // Check if entry has expired
      const now =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[24]++, Date.now());
      /* istanbul ignore next */
      cov_frisg9hfe().s[25]++;
      if (now - entry.createdAt > entry.ttl) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[9][0]++;
        cov_frisg9hfe().s[26]++;
        this.cache.delete(fullKey);
        /* istanbul ignore next */
        cov_frisg9hfe().s[27]++;
        this.stats.misses++;
        /* istanbul ignore next */
        cov_frisg9hfe().s[28]++;
        this.logger.debug({
          key: fullKey
        }, 'Cache entry expired');
        /* istanbul ignore next */
        cov_frisg9hfe().s[29]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[9][1]++;
      }
      // Update access stats
      cov_frisg9hfe().s[30]++;
      entry.accessCount++;
      /* istanbul ignore next */
      cov_frisg9hfe().s[31]++;
      entry.lastAccessed = now;
      /* istanbul ignore next */
      cov_frisg9hfe().s[32]++;
      this.stats.hits++;
      /* istanbul ignore next */
      cov_frisg9hfe().s[33]++;
      this.logger.debug({
        key: fullKey,
        accessCount: entry.accessCount
      }, 'Cache hit');
      /* istanbul ignore next */
      cov_frisg9hfe().s[34]++;
      return entry.value;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[35]++;
      this.logger.error({
        error,
        key
      }, 'Failed to get cache value');
      /* istanbul ignore next */
      cov_frisg9hfe().s[36]++;
      return null;
    }
  }
  /**
   * Get or set a value using a factory function
   */
  async getOrSet(key, factory, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[10][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[3]++;
    cov_frisg9hfe().s[37]++;
    try {
      const cached =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[38]++, await this.get(key, options));
      /* istanbul ignore next */
      cov_frisg9hfe().s[39]++;
      if (cached !== null) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[11][0]++;
        cov_frisg9hfe().s[40]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[11][1]++;
      }
      const value =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[41]++, await factory());
      /* istanbul ignore next */
      cov_frisg9hfe().s[42]++;
      await this.set(key, value, options);
      /* istanbul ignore next */
      cov_frisg9hfe().s[43]++;
      this.logger.debug({
        key
      }, 'Value computed and cached');
      /* istanbul ignore next */
      cov_frisg9hfe().s[44]++;
      return value;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[45]++;
      this.handleError(error, {
        key,
        options
      });
    }
  }
  /**
   * Delete a value from the cache
   */
  async delete(key, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[12][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[4]++;
    cov_frisg9hfe().s[46]++;
    try {
      const fullKey =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[47]++, this.buildKey(key, options.namespace));
      const deleted =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[48]++, this.cache.delete(fullKey));
      /* istanbul ignore next */
      cov_frisg9hfe().s[49]++;
      if (deleted) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[13][0]++;
        cov_frisg9hfe().s[50]++;
        this.logger.debug({
          key: fullKey
        }, 'Cache entry deleted');
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[13][1]++;
      }
      cov_frisg9hfe().s[51]++;
      return deleted;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[52]++;
      this.logger.error({
        error,
        key
      }, 'Failed to delete cache entry');
      /* istanbul ignore next */
      cov_frisg9hfe().s[53]++;
      return false;
    }
  }
  /**
   * Clear all entries in a namespace (or entire cache if no namespace)
   */
  async clear(namespace) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[5]++;
    cov_frisg9hfe().s[54]++;
    try {
      let deletedCount =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[55]++, 0);
      /* istanbul ignore next */
      cov_frisg9hfe().s[56]++;
      if (namespace) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[14][0]++;
        const prefix =
        /* istanbul ignore next */
        (cov_frisg9hfe().s[57]++, `${namespace}:`);
        /* istanbul ignore next */
        cov_frisg9hfe().s[58]++;
        for (const key of this.cache.keys()) {
          /* istanbul ignore next */
          cov_frisg9hfe().s[59]++;
          if (key.startsWith(prefix)) {
            /* istanbul ignore next */
            cov_frisg9hfe().b[15][0]++;
            cov_frisg9hfe().s[60]++;
            this.cache.delete(key);
            /* istanbul ignore next */
            cov_frisg9hfe().s[61]++;
            deletedCount++;
          } else
          /* istanbul ignore next */
          {
            cov_frisg9hfe().b[15][1]++;
          }
        }
        /* istanbul ignore next */
        cov_frisg9hfe().s[62]++;
        this.logger.info({
          namespace,
          deletedCount
        }, 'Namespace cleared');
      } else {
        /* istanbul ignore next */
        cov_frisg9hfe().b[14][1]++;
        cov_frisg9hfe().s[63]++;
        deletedCount = this.cache.size;
        /* istanbul ignore next */
        cov_frisg9hfe().s[64]++;
        this.cache.clear();
        /* istanbul ignore next */
        cov_frisg9hfe().s[65]++;
        this.stats.hits = 0;
        /* istanbul ignore next */
        cov_frisg9hfe().s[66]++;
        this.stats.misses = 0;
        /* istanbul ignore next */
        cov_frisg9hfe().s[67]++;
        this.logger.info({
          deletedCount
        }, 'Cache cleared');
      }
      /* istanbul ignore next */
      cov_frisg9hfe().s[68]++;
      return deletedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[69]++;
      this.logger.error({
        error,
        namespace
      }, 'Failed to clear cache');
      /* istanbul ignore next */
      cov_frisg9hfe().s[70]++;
      return 0;
    }
  }
  /**
   * Check if a key exists in the cache
   */
  async has(key, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[16][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[6]++;
    cov_frisg9hfe().s[71]++;
    try {
      const fullKey =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[72]++, this.buildKey(key, options.namespace));
      const entry =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[73]++, this.cache.get(fullKey));
      /* istanbul ignore next */
      cov_frisg9hfe().s[74]++;
      if (!entry) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[17][0]++;
        cov_frisg9hfe().s[75]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[17][1]++;
      }
      // Check if expired
      const now =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[76]++, Date.now());
      /* istanbul ignore next */
      cov_frisg9hfe().s[77]++;
      if (now - entry.createdAt > entry.ttl) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[18][0]++;
        cov_frisg9hfe().s[78]++;
        this.cache.delete(fullKey);
        /* istanbul ignore next */
        cov_frisg9hfe().s[79]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[18][1]++;
      }
      cov_frisg9hfe().s[80]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[81]++;
      this.logger.error({
        error,
        key
      }, 'Failed to check cache key existence');
      /* istanbul ignore next */
      cov_frisg9hfe().s[82]++;
      return false;
    }
  }
  /**
   * Get cache statistics
   */
  getStats() {
    /* istanbul ignore next */
    cov_frisg9hfe().f[7]++;
    const totalRequests =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[83]++, this.stats.hits + this.stats.misses);
    const hitRate =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[84]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_frisg9hfe().b[19][0]++, this.stats.hits / totalRequests) :
    /* istanbul ignore next */
    (cov_frisg9hfe().b[19][1]++, 0));
    // Approximate memory usage calculation
    let memoryUsage =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[85]++, 0);
    /* istanbul ignore next */
    cov_frisg9hfe().s[86]++;
    for (const entry of this.cache.values()) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[87]++;
      memoryUsage += this.estimateEntrySize(entry);
    }
    /* istanbul ignore next */
    cov_frisg9hfe().s[88]++;
    return {
      hits: this.stats.hits,
      misses: this.stats.misses,
      hitRate: Math.round(hitRate * 10000) / 100,
      // Percentage with 2 decimal places
      size: this.cache.size,
      maxSize: this.maxSize,
      memoryUsage
    };
  }
  /**
   * Get keys matching a pattern (supports wildcards)
   */
  async getKeys(pattern, namespace) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[8]++;
    cov_frisg9hfe().s[89]++;
    try {
      const fullPattern =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[90]++, namespace ?
      /* istanbul ignore next */
      (cov_frisg9hfe().b[20][0]++, `${namespace}:${pattern}`) :
      /* istanbul ignore next */
      (cov_frisg9hfe().b[20][1]++, pattern));
      const regex =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[91]++, new RegExp('^' + fullPattern.replace(/\*/g, '.*').replace(/\?/g, '.') + '$'));
      const matchingKeys =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[92]++, []);
      /* istanbul ignore next */
      cov_frisg9hfe().s[93]++;
      for (const key of this.cache.keys()) {
        /* istanbul ignore next */
        cov_frisg9hfe().s[94]++;
        if (regex.test(key)) {
          /* istanbul ignore next */
          cov_frisg9hfe().b[21][0]++;
          // Remove namespace prefix if present
          const cleanKey =
          /* istanbul ignore next */
          (cov_frisg9hfe().s[95]++, namespace ?
          /* istanbul ignore next */
          (cov_frisg9hfe().b[22][0]++, key.substring(namespace.length + 1)) :
          /* istanbul ignore next */
          (cov_frisg9hfe().b[22][1]++, key));
          /* istanbul ignore next */
          cov_frisg9hfe().s[96]++;
          matchingKeys.push(cleanKey);
        } else
        /* istanbul ignore next */
        {
          cov_frisg9hfe().b[21][1]++;
        }
      }
      /* istanbul ignore next */
      cov_frisg9hfe().s[97]++;
      return matchingKeys;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[98]++;
      this.logger.error({
        error,
        pattern,
        namespace
      }, 'Failed to get matching keys');
      /* istanbul ignore next */
      cov_frisg9hfe().s[99]++;
      return [];
    }
  }
  /**
   * Set multiple values at once
   */
  async setMultiple(entries, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[23][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[9]++;
    const operations =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[100]++, entries.map(entry => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[10]++;
      cov_frisg9hfe().s[101]++;
      return () => {
        /* istanbul ignore next */
        cov_frisg9hfe().f[11]++;
        cov_frisg9hfe().s[102]++;
        return this.set(entry.key, entry.value, {
          ttl: entry.ttl,
          namespace: options.namespace
        });
      };
    }));
    const {
      successCount,
      errors
    } =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[103]++, await this.withParallel(operations, {
      failFast: false
    }));
    const failed =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[104]++, entries.filter((_, index) => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[12]++;
      cov_frisg9hfe().s[105]++;
      return errors[index] !== null;
    }).map(entry => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[13]++;
      cov_frisg9hfe().s[106]++;
      return entry.key;
    }));
    /* istanbul ignore next */
    cov_frisg9hfe().s[107]++;
    this.logger.info({
      total: entries.length,
      successful: successCount,
      failed: failed.length
    }, 'Batch cache set completed');
    /* istanbul ignore next */
    cov_frisg9hfe().s[108]++;
    return {
      successful: successCount,
      failed
    };
  }
  /**
   * Get multiple values at once
   */
  async getMultiple(keys, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[24][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[14]++;
    const operations =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[109]++, keys.map(key => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[15]++;
      cov_frisg9hfe().s[110]++;
      return () => {
        /* istanbul ignore next */
        cov_frisg9hfe().f[16]++;
        cov_frisg9hfe().s[111]++;
        return this.get(key, options);
      };
    }));
    const {
      results
    } =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[112]++, await this.withParallel(operations, {
      failFast: false
    }));
    const result =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[113]++, {});
    /* istanbul ignore next */
    cov_frisg9hfe().s[114]++;
    for (let i =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[115]++, 0); i < keys.length; i++) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[116]++;
      result[keys[i]] = results[i];
    }
    /* istanbul ignore next */
    cov_frisg9hfe().s[117]++;
    return result;
  }
  /**
   * Extend the TTL of an existing cache entry
   */
  async touch(key, newTTL, options =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[25][0]++, {})) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[17]++;
    cov_frisg9hfe().s[118]++;
    try {
      const fullKey =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[119]++, this.buildKey(key, options.namespace));
      const entry =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[120]++, this.cache.get(fullKey));
      /* istanbul ignore next */
      cov_frisg9hfe().s[121]++;
      if (!entry) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[26][0]++;
        cov_frisg9hfe().s[122]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[26][1]++;
      }
      // Check if expired
      const now =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[123]++, Date.now());
      /* istanbul ignore next */
      cov_frisg9hfe().s[124]++;
      if (now - entry.createdAt > entry.ttl) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[27][0]++;
        cov_frisg9hfe().s[125]++;
        this.cache.delete(fullKey);
        /* istanbul ignore next */
        cov_frisg9hfe().s[126]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[27][1]++;
      }
      cov_frisg9hfe().s[127]++;
      entry.ttl = newTTL;
      /* istanbul ignore next */
      cov_frisg9hfe().s[128]++;
      entry.createdAt = now; // Reset creation time
      /* istanbul ignore next */
      cov_frisg9hfe().s[129]++;
      entry.lastAccessed = now;
      /* istanbul ignore next */
      cov_frisg9hfe().s[130]++;
      this.logger.debug({
        key: fullKey,
        newTTL
      }, 'Cache entry TTL updated');
      /* istanbul ignore next */
      cov_frisg9hfe().s[131]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[132]++;
      this.logger.error({
        error,
        key
      }, 'Failed to update cache entry TTL');
      /* istanbul ignore next */
      cov_frisg9hfe().s[133]++;
      return false;
    }
  }
  /**
   * Get cache entries sorted by various criteria
   */
  getTopEntries(sortBy =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[28][0]++, 'accessCount'), limit =
  /* istanbul ignore next */
  (cov_frisg9hfe().b[29][0]++, 10)) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[18]++;
    const entries =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[134]++, Array.from(this.cache.entries()).map(([, entry]) => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[19]++;
      cov_frisg9hfe().s[135]++;
      return {
        key: entry.key,
        // Use the original key stored in the entry
        accessCount: entry.accessCount,
        lastAccessed: entry.lastAccessed,
        createdAt: entry.createdAt
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[20]++;
      cov_frisg9hfe().s[136]++;
      switch (sortBy) {
        case 'accessCount':
          /* istanbul ignore next */
          cov_frisg9hfe().b[30][0]++;
          cov_frisg9hfe().s[137]++;
          return b.accessCount - a.accessCount;
        case 'lastAccessed':
          /* istanbul ignore next */
          cov_frisg9hfe().b[30][1]++;
          cov_frisg9hfe().s[138]++;
          return b.lastAccessed - a.lastAccessed;
        case 'createdAt':
          /* istanbul ignore next */
          cov_frisg9hfe().b[30][2]++;
          cov_frisg9hfe().s[139]++;
          return b.createdAt - a.createdAt;
        default:
          /* istanbul ignore next */
          cov_frisg9hfe().b[30][3]++;
          cov_frisg9hfe().s[140]++;
          return 0;
      }
    }).slice(0, limit).map(entry => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[21]++;
      cov_frisg9hfe().s[141]++;
      return {
        key: entry.key,
        accessCount: entry.accessCount,
        lastAccessed: new Date(entry.lastAccessed),
        createdAt: new Date(entry.createdAt)
      };
    }));
    /* istanbul ignore next */
    cov_frisg9hfe().s[142]++;
    return entries;
  }
  // Private methods
  buildKey(key, namespace) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[22]++;
    cov_frisg9hfe().s[143]++;
    return namespace ?
    /* istanbul ignore next */
    (cov_frisg9hfe().b[31][0]++, `${namespace}:${key}`) :
    /* istanbul ignore next */
    (cov_frisg9hfe().b[31][1]++, key);
  }
  async evictLeastUsed() {
    /* istanbul ignore next */
    cov_frisg9hfe().f[23]++;
    cov_frisg9hfe().s[144]++;
    if (this.cache.size === 0) {
      /* istanbul ignore next */
      cov_frisg9hfe().b[32][0]++;
      cov_frisg9hfe().s[145]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[32][1]++;
    }
    // Find the least recently used entry
    let lruKey =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[146]++, null);
    let oldestAccess =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[147]++, Date.now());
    /* istanbul ignore next */
    cov_frisg9hfe().s[148]++;
    for (const [key, entry] of this.cache.entries()) {
      /* istanbul ignore next */
      cov_frisg9hfe().s[149]++;
      if (entry.lastAccessed < oldestAccess) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[33][0]++;
        cov_frisg9hfe().s[150]++;
        oldestAccess = entry.lastAccessed;
        /* istanbul ignore next */
        cov_frisg9hfe().s[151]++;
        lruKey = key;
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[33][1]++;
      }
    }
    /* istanbul ignore next */
    cov_frisg9hfe().s[152]++;
    if (lruKey) {
      /* istanbul ignore next */
      cov_frisg9hfe().b[34][0]++;
      cov_frisg9hfe().s[153]++;
      this.cache.delete(lruKey);
      /* istanbul ignore next */
      cov_frisg9hfe().s[154]++;
      this.logger.info({
        evictedKey: lruKey,
        cacheSize: this.cache.size,
        oldestAccess
      }, 'Evicted LRU cache entry');
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[34][1]++;
    }
  }
  estimateEntrySize(entry) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[24]++;
    // Rough estimation of memory usage
    const keySize =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[155]++, entry.key.length * 2); // 2 bytes per character (UTF-16)
    const valueSize =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[156]++, this.estimateValueSize(entry.value));
    const overhead =
    /* istanbul ignore next */
    (cov_frisg9hfe().s[157]++, 100); // Approximate overhead for entry metadata
    /* istanbul ignore next */
    cov_frisg9hfe().s[158]++;
    return keySize + valueSize + overhead;
  }
  estimateValueSize(value) {
    /* istanbul ignore next */
    cov_frisg9hfe().f[25]++;
    cov_frisg9hfe().s[159]++;
    if (
    /* istanbul ignore next */
    (cov_frisg9hfe().b[36][0]++, value === null) ||
    /* istanbul ignore next */
    (cov_frisg9hfe().b[36][1]++, value === undefined)) {
      /* istanbul ignore next */
      cov_frisg9hfe().b[35][0]++;
      cov_frisg9hfe().s[160]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[35][1]++;
    }
    cov_frisg9hfe().s[161]++;
    if (typeof value === 'string') {
      /* istanbul ignore next */
      cov_frisg9hfe().b[37][0]++;
      cov_frisg9hfe().s[162]++;
      return value.length * 2; // 2 bytes per character
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[37][1]++;
    }
    cov_frisg9hfe().s[163]++;
    if (typeof value === 'number') {
      /* istanbul ignore next */
      cov_frisg9hfe().b[38][0]++;
      cov_frisg9hfe().s[164]++;
      return 8; // 64-bit number
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[38][1]++;
    }
    cov_frisg9hfe().s[165]++;
    if (typeof value === 'boolean') {
      /* istanbul ignore next */
      cov_frisg9hfe().b[39][0]++;
      cov_frisg9hfe().s[166]++;
      return 1;
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[39][1]++;
    }
    cov_frisg9hfe().s[167]++;
    if (typeof value === 'object') {
      /* istanbul ignore next */
      cov_frisg9hfe().b[40][0]++;
      // Rough estimation for objects
      const jsonString =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[168]++, JSON.stringify(value));
      /* istanbul ignore next */
      cov_frisg9hfe().s[169]++;
      return jsonString.length * 2;
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[40][1]++;
    }
    cov_frisg9hfe().s[170]++;
    return 100; // Default estimation
  }
  startCleanupTask() {
    /* istanbul ignore next */
    cov_frisg9hfe().f[26]++;
    cov_frisg9hfe().s[171]++;
    // Clean up expired entries at configured interval
    this.cleanupInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_frisg9hfe().f[27]++;
      const now =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[172]++, Date.now());
      let cleanedCount =
      /* istanbul ignore next */
      (cov_frisg9hfe().s[173]++, 0);
      /* istanbul ignore next */
      cov_frisg9hfe().s[174]++;
      for (const [key, entry] of this.cache.entries()) {
        /* istanbul ignore next */
        cov_frisg9hfe().s[175]++;
        if (now - entry.createdAt > entry.ttl) {
          /* istanbul ignore next */
          cov_frisg9hfe().b[41][0]++;
          cov_frisg9hfe().s[176]++;
          this.cache.delete(key);
          /* istanbul ignore next */
          cov_frisg9hfe().s[177]++;
          cleanedCount++;
        } else
        /* istanbul ignore next */
        {
          cov_frisg9hfe().b[41][1]++;
        }
      }
      /* istanbul ignore next */
      cov_frisg9hfe().s[178]++;
      if (cleanedCount > 0) {
        /* istanbul ignore next */
        cov_frisg9hfe().b[42][0]++;
        cov_frisg9hfe().s[179]++;
        this.logger.info({
          cleanedCount
        }, 'Cleaned up expired cache entries');
      } else
      /* istanbul ignore next */
      {
        cov_frisg9hfe().b[42][1]++;
      }
    }, this.cleanupIntervalMs);
  }
  /**
   * Cleanup resources on service shutdown
   */
  destroy() {
    /* istanbul ignore next */
    cov_frisg9hfe().f[28]++;
    cov_frisg9hfe().s[180]++;
    if (this.cleanupInterval) {
      /* istanbul ignore next */
      cov_frisg9hfe().b[43][0]++;
      cov_frisg9hfe().s[181]++;
      clearInterval(this.cleanupInterval);
    } else
    /* istanbul ignore next */
    {
      cov_frisg9hfe().b[43][1]++;
    }
    cov_frisg9hfe().s[182]++;
    this.cache.clear();
  }
}
// Export singleton instance
export const cacheService =
/* istanbul ignore next */
(cov_frisg9hfe().s[183]++, new CacheService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,