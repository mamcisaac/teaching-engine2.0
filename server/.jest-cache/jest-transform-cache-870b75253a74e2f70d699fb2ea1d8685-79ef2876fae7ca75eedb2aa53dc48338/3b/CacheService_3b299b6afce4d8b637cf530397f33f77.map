{"version":3,"names":["cov_frisg9hfe","actualCoverage","BaseService","CacheService","cache","s","Map","stats","hits","misses","cleanupInterval","defaultTTL","maxSize","cleanupIntervalMs","constructor","options","b","f","startCleanupTask","set","key","value","fullKey","buildKey","namespace","ttl","now","Date","entry","createdAt","accessCount","lastAccessed","size","evictLeastUsed","logger","debug","error","handleError","get","delete","getOrSet","factory","cached","deleted","clear","deletedCount","prefix","keys","startsWith","info","has","getStats","totalRequests","hitRate","memoryUsage","values","estimateEntrySize","Math","round","getKeys","pattern","fullPattern","regex","RegExp","replace","matchingKeys","test","cleanKey","substring","length","push","setMultiple","entries","operations","map","successCount","errors","withParallel","failFast","failed","filter","_","index","total","successful","getMultiple","results","result","i","touch","newTTL","getTopEntries","sortBy","limit","Array","from","sort","a","slice","lruKey","oldestAccess","evictedKey","cacheSize","keySize","valueSize","estimateValueSize","overhead","undefined","jsonString","JSON","stringify","setInterval","cleanedCount","destroy","clearInterval","cacheService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/CacheService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\n\nexport interface CacheEntry<T = unknown> {\n  key: string;\n  value: T;\n  ttl: number; // Time to live in milliseconds\n  createdAt: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface CacheOptions {\n  defaultTTL?: number; // Default TTL in milliseconds\n  cleanupInterval?: number; // Cleanup interval in milliseconds\n  maxSize?: number; // Maximum number of entries\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  size: number;\n  maxSize: number;\n  memoryUsage: number; // Approximate memory usage in bytes\n}\n\nexport class CacheService extends BaseService {\n  private cache = new Map<string, CacheEntry>();\n  private stats = {\n    hits: 0,\n    misses: 0,\n  };\n  private cleanupInterval: NodeJS.Timeout;\n  private readonly defaultTTL: number;\n  private readonly maxSize: number;\n  private readonly cleanupIntervalMs: number;\n\n  constructor(options: CacheOptions = {}) {\n    super('CacheService');\n\n    this.defaultTTL = options.defaultTTL || 5 * 60 * 1000; // 5 minutes\n    this.maxSize = options.maxSize || 10000; // Maximum cache entries\n    this.cleanupIntervalMs = options.cleanupInterval || 10 * 60 * 1000; // 10 minutes\n\n    this.startCleanupTask();\n  }\n\n  /**\n   * Store a value in the cache\n   */\n  async set<T>(\n    key: string,\n    value: T,\n    options: { ttl?: number; namespace?: string } = {},\n  ): Promise<void> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const ttl = options.ttl || this.defaultTTL;\n      const now = Date.now();\n\n      const entry: CacheEntry<T> = {\n        key: key, // Store original key, not fullKey\n        value,\n        ttl,\n        createdAt: now,\n        accessCount: 0,\n        lastAccessed: now,\n      };\n\n      // Check if we need to evict entries to make room\n      if (this.cache.size >= this.maxSize) {\n        await this.evictLeastUsed();\n      }\n\n      this.cache.set(fullKey, entry);\n\n      this.logger.debug({ key: fullKey, ttl }, 'Value cached');\n    } catch (error) {\n      this.handleError(error, { key, options });\n    }\n  }\n\n  /**\n   * Retrieve a value from the cache\n   */\n  async get<T>(key: string, options: { namespace?: string } = {}): Promise<T | null> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey) as CacheEntry<T> | undefined;\n\n      if (!entry) {\n        this.stats.misses++;\n        this.logger.debug({ key: fullKey }, 'Cache miss');\n        return null;\n      }\n\n      // Check if entry has expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        this.stats.misses++;\n        this.logger.debug({ key: fullKey }, 'Cache entry expired');\n        return null;\n      }\n\n      // Update access stats\n      entry.accessCount++;\n      entry.lastAccessed = now;\n      this.stats.hits++;\n\n      this.logger.debug({ key: fullKey, accessCount: entry.accessCount }, 'Cache hit');\n      return entry.value;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to get cache value');\n      return null;\n    }\n  }\n\n  /**\n   * Get or set a value using a factory function\n   */\n  async getOrSet<T>(\n    key: string,\n    factory: () => Promise<T>,\n    options: { ttl?: number; namespace?: string } = {},\n  ): Promise<T> {\n    try {\n      const cached = await this.get<T>(key, options);\n      if (cached !== null) {\n        return cached;\n      }\n\n      const value = await factory();\n      await this.set(key, value, options);\n\n      this.logger.debug({ key }, 'Value computed and cached');\n      return value;\n    } catch (error) {\n      this.handleError(error, { key, options });\n    }\n  }\n\n  /**\n   * Delete a value from the cache\n   */\n  async delete(key: string, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const deleted = this.cache.delete(fullKey);\n\n      if (deleted) {\n        this.logger.debug({ key: fullKey }, 'Cache entry deleted');\n      }\n\n      return deleted;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to delete cache entry');\n      return false;\n    }\n  }\n\n  /**\n   * Clear all entries in a namespace (or entire cache if no namespace)\n   */\n  async clear(namespace?: string): Promise<number> {\n    try {\n      let deletedCount = 0;\n\n      if (namespace) {\n        const prefix = `${namespace}:`;\n        for (const key of this.cache.keys()) {\n          if (key.startsWith(prefix)) {\n            this.cache.delete(key);\n            deletedCount++;\n          }\n        }\n        this.logger.info({ namespace, deletedCount }, 'Namespace cleared');\n      } else {\n        deletedCount = this.cache.size;\n        this.cache.clear();\n        this.stats.hits = 0;\n        this.stats.misses = 0;\n        this.logger.info({ deletedCount }, 'Cache cleared');\n      }\n\n      return deletedCount;\n    } catch (error) {\n      this.logger.error({ error, namespace }, 'Failed to clear cache');\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a key exists in the cache\n   */\n  async has(key: string, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey);\n\n      if (!entry) return false;\n\n      // Check if expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to check cache key existence');\n      return false;\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    const totalRequests = this.stats.hits + this.stats.misses;\n    const hitRate = totalRequests > 0 ? this.stats.hits / totalRequests : 0;\n\n    // Approximate memory usage calculation\n    let memoryUsage = 0;\n    for (const entry of this.cache.values()) {\n      memoryUsage += this.estimateEntrySize(entry);\n    }\n\n    return {\n      hits: this.stats.hits,\n      misses: this.stats.misses,\n      hitRate: Math.round(hitRate * 10000) / 100, // Percentage with 2 decimal places\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      memoryUsage,\n    };\n  }\n\n  /**\n   * Get keys matching a pattern (supports wildcards)\n   */\n  async getKeys(pattern: string, namespace?: string): Promise<string[]> {\n    try {\n      const fullPattern = namespace ? `${namespace}:${pattern}` : pattern;\n      const regex = new RegExp('^' + fullPattern.replace(/\\*/g, '.*').replace(/\\?/g, '.') + '$');\n\n      const matchingKeys: string[] = [];\n      for (const key of this.cache.keys()) {\n        if (regex.test(key)) {\n          // Remove namespace prefix if present\n          const cleanKey = namespace ? key.substring(namespace.length + 1) : key;\n          matchingKeys.push(cleanKey);\n        }\n      }\n\n      return matchingKeys;\n    } catch (error) {\n      this.logger.error({ error, pattern, namespace }, 'Failed to get matching keys');\n      return [];\n    }\n  }\n\n  /**\n   * Set multiple values at once\n   */\n  async setMultiple<T>(\n    entries: { key: string; value: T; ttl?: number }[],\n    options: { namespace?: string } = {},\n  ): Promise<{ successful: number; failed: string[] }> {\n    const operations = entries.map(\n      (entry) => () =>\n        this.set(entry.key, entry.value, {\n          ttl: entry.ttl,\n          namespace: options.namespace,\n        }),\n    );\n\n    const { successCount, errors } = await this.withParallel(operations, {\n      failFast: false,\n    });\n\n    const failed = entries.filter((_, index) => errors[index] !== null).map((entry) => entry.key);\n\n    this.logger.info(\n      {\n        total: entries.length,\n        successful: successCount,\n        failed: failed.length,\n      },\n      'Batch cache set completed',\n    );\n\n    return { successful: successCount, failed };\n  }\n\n  /**\n   * Get multiple values at once\n   */\n  async getMultiple<T>(\n    keys: string[],\n    options: { namespace?: string } = {},\n  ): Promise<{ [key: string]: T | null }> {\n    const operations = keys.map((key) => () => this.get<T>(key, options));\n\n    const { results } = await this.withParallel(operations, {\n      failFast: false,\n    });\n\n    const result: { [key: string]: T | null } = {};\n    for (let i = 0; i < keys.length; i++) {\n      result[keys[i]] = results[i] as T | null;\n    }\n\n    return result;\n  }\n\n  /**\n   * Extend the TTL of an existing cache entry\n   */\n  async touch(key: string, newTTL: number, options: { namespace?: string } = {}): Promise<boolean> {\n    try {\n      const fullKey = this.buildKey(key, options.namespace);\n      const entry = this.cache.get(fullKey);\n\n      if (!entry) return false;\n\n      // Check if expired\n      const now = Date.now();\n      if (now - entry.createdAt > entry.ttl) {\n        this.cache.delete(fullKey);\n        return false;\n      }\n\n      entry.ttl = newTTL;\n      entry.createdAt = now; // Reset creation time\n      entry.lastAccessed = now;\n\n      this.logger.debug({ key: fullKey, newTTL }, 'Cache entry TTL updated');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, key }, 'Failed to update cache entry TTL');\n      return false;\n    }\n  }\n\n  /**\n   * Get cache entries sorted by various criteria\n   */\n  getTopEntries(\n    sortBy: 'accessCount' | 'lastAccessed' | 'createdAt' = 'accessCount',\n    limit: number = 10,\n  ): Array<{ key: string; accessCount: number; lastAccessed: Date; createdAt: Date }> {\n    const entries = Array.from(this.cache.entries())\n      .map(([, entry]) => ({\n        key: entry.key, // Use the original key stored in the entry\n        accessCount: entry.accessCount,\n        lastAccessed: entry.lastAccessed,\n        createdAt: entry.createdAt,\n      }))\n      .sort((a, b) => {\n        switch (sortBy) {\n          case 'accessCount':\n            return b.accessCount - a.accessCount;\n          case 'lastAccessed':\n            return b.lastAccessed - a.lastAccessed;\n          case 'createdAt':\n            return b.createdAt - a.createdAt;\n          default:\n            return 0;\n        }\n      })\n      .slice(0, limit)\n      .map((entry) => ({\n        key: entry.key,\n        accessCount: entry.accessCount,\n        lastAccessed: new Date(entry.lastAccessed),\n        createdAt: new Date(entry.createdAt),\n      }));\n\n    return entries;\n  }\n\n  // Private methods\n\n  private buildKey(key: string, namespace?: string): string {\n    return namespace ? `${namespace}:${key}` : key;\n  }\n\n  private async evictLeastUsed(): Promise<void> {\n    if (this.cache.size === 0) return;\n\n    // Find the least recently used entry\n    let lruKey: string | null = null;\n    let oldestAccess = Date.now();\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < oldestAccess) {\n        oldestAccess = entry.lastAccessed;\n        lruKey = key;\n      }\n    }\n\n    if (lruKey) {\n      this.cache.delete(lruKey);\n      this.logger.info(\n        {\n          evictedKey: lruKey,\n          cacheSize: this.cache.size,\n          oldestAccess,\n        },\n        'Evicted LRU cache entry',\n      );\n    }\n  }\n\n  private estimateEntrySize(entry: CacheEntry): number {\n    // Rough estimation of memory usage\n    const keySize = entry.key.length * 2; // 2 bytes per character (UTF-16)\n    const valueSize = this.estimateValueSize(entry.value);\n    const overhead = 100; // Approximate overhead for entry metadata\n\n    return keySize + valueSize + overhead;\n  }\n\n  private estimateValueSize(value: unknown): number {\n    if (value === null || value === undefined) return 0;\n\n    if (typeof value === 'string') {\n      return value.length * 2; // 2 bytes per character\n    }\n\n    if (typeof value === 'number') {\n      return 8; // 64-bit number\n    }\n\n    if (typeof value === 'boolean') {\n      return 1;\n    }\n\n    if (typeof value === 'object') {\n      // Rough estimation for objects\n      const jsonString = JSON.stringify(value);\n      return jsonString.length * 2;\n    }\n\n    return 100; // Default estimation\n  }\n\n  private startCleanupTask(): void {\n    // Clean up expired entries at configured interval\n    this.cleanupInterval = setInterval(() => {\n      const now = Date.now();\n      let cleanedCount = 0;\n\n      for (const [key, entry] of this.cache.entries()) {\n        if (now - entry.createdAt > entry.ttl) {\n          this.cache.delete(key);\n          cleanedCount++;\n        }\n      }\n\n      if (cleanedCount > 0) {\n        this.logger.info({ cleanedCount }, 'Cleaned up expired cache entries');\n      }\n    }, this.cleanupIntervalMs);\n  }\n\n  /**\n   * Cleanup resources on service shutdown\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nexport const cacheService = new CacheService();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}