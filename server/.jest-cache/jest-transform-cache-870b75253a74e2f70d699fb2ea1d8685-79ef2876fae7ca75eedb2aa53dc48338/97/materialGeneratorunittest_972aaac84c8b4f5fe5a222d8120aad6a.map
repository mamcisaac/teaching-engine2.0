{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/materialGenerator.unit.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/materialGenerator.unit.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport { extractMaterials } from '../../src/services/materialGenerator';\n\ndescribe('MaterialGenerator Unit Tests', () => {\n  describe('extractMaterials', () => {\n    it('should extract materials from simple header format', () => {\n      const note = `\n        Today we will learn about fractions.\n        Materials: paper, pencils, fraction blocks\n        Remember to bring your notebooks.\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('paper');\n      expect(result).toContain('pencils');\n      expect(result).toContain('fraction blocks');\n    });\n\n    it('should extract materials from list format', () => {\n      const note = `\n        Materials:\n        - Whiteboard markers\n        - Chart paper\n        - Sticky notes\n        - Timer\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('Whiteboard markers');\n      expect(result).toContain('Chart paper');\n      expect(result).toContain('Sticky notes');\n      expect(result).toContain('Timer');\n    });\n\n    it('should handle materials with asterisk bullets', () => {\n      const note = `\n        Materials needed:\n        * Colored pencils\n        * Ruler\n        * Construction paper\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('Colored pencils');\n      expect(result).toContain('Ruler');\n      expect(result).toContain('Construction paper');\n    });\n\n    it('should handle comma-separated materials in header', () => {\n      const note = `\n        Materials: glue sticks, scissors, colored paper, markers\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('glue sticks');\n      expect(result).toContain('scissors');\n      expect(result).toContain('colored paper');\n      expect(result).toContain('markers');\n    });\n\n    it('should handle semicolon-separated materials', () => {\n      const note = `\n        Materials: calculator; graph paper; protractor; compass\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('calculator');\n      expect(result).toContain('graph paper');\n      expect(result).toContain('protractor');\n      expect(result).toContain('compass');\n    });\n\n    it('should handle case-insensitive materials header', () => {\n      const testCases = [\n        'Materials: paper',\n        'MATERIALS: paper',\n        'materials: paper',\n        'Material: paper',\n        'MATERIAL: paper',\n      ];\n\n      testCases.forEach((testCase) => {\n        const result = extractMaterials(testCase);\n        expect(result).toContain('paper');\n      });\n    });\n\n    it('should handle materials header with colon variations', () => {\n      const testCases = [\n        'Materials: paper',\n        'Materials paper', // No colon\n        'Materials needed: paper',\n      ];\n\n      testCases.forEach((testCase) => {\n        const result = extractMaterials(testCase);\n        expect(result).toContain('paper');\n      });\n    });\n\n    it('should remove duplicates', () => {\n      const note = `\n        Materials: paper, pencils, paper\n        Additional materials:\n        - paper\n        - pencils\n        - eraser\n      `;\n\n      const result = extractMaterials(note);\n      const paperCount = result.filter((item) => item === 'paper').length;\n      const pencilsCount = result.filter((item) => item === 'pencils').length;\n\n      expect(paperCount).toBe(1);\n      expect(pencilsCount).toBe(1);\n      expect(result).toContain('eraser');\n    });\n\n    it('should trim whitespace from extracted materials', () => {\n      const note = `\n        Materials:   paper  ,  pencils   , markers  \n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('paper');\n      expect(result).toContain('pencils');\n      expect(result).toContain('markers');\n\n      // Should not contain items with extra whitespace\n      expect(result).not.toContain(' paper ');\n      expect(result).not.toContain('  pencils  ');\n    });\n\n    it('should handle empty notes', () => {\n      const result = extractMaterials('');\n      expect(result).toEqual([]);\n    });\n\n    it('should handle notes without materials section', () => {\n      const note = `\n        Today we will learn about photosynthesis.\n        Students should take notes on the process.\n        Homework is chapter 4.\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toEqual([]);\n    });\n\n    it('should handle mixed format with multiple materials sections', () => {\n      const note = `\n        Materials: paper, pencils\n        \n        Today's lesson plan...\n        \n        Additional materials needed:\n        - Calculators\n        - Graph paper\n        \n        Extra supplies: rulers, erasers\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('paper');\n      expect(result).toContain('pencils');\n      expect(result).toContain('Calculators');\n      expect(result).toContain('Graph paper');\n      expect(result).toContain('rulers');\n      expect(result).toContain('erasers');\n    });\n\n    it('should handle materials with numbers and special characters', () => {\n      const note = `\n        Materials:\n        - 30 cm ruler\n        - #2 pencils\n        - 8.5x11 paper\n        - 3-ring binder\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('30 cm ruler');\n      expect(result).toContain('#2 pencils');\n      expect(result).toContain('8.5x11 paper');\n      expect(result).toContain('3-ring binder');\n    });\n\n    it('should handle materials with parenthetical information', () => {\n      const note = `\n        Materials:\n        - Markers (various colors)\n        - Paper plates (small size)\n        - Glue (washable)\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toContain('Markers (various colors)');\n      expect(result).toContain('Paper plates (small size)');\n      expect(result).toContain('Glue (washable)');\n    });\n\n    it('should filter out empty items', () => {\n      const note = `\n        Materials: paper,  , pencils, , markers\n      `;\n\n      const result = extractMaterials(note);\n      expect(result).toEqual(['paper', 'pencils', 'markers']);\n      expect(result).not.toContain('');\n      expect(result).not.toContain(' ');\n    });\n\n    it('should handle notes with Windows line endings', () => {\n      const note = 'Materials:\\r\\n- paper\\r\\n- pencils';\n\n      const result = extractMaterials(note);\n      expect(result).toContain('paper');\n      expect(result).toContain('pencils');\n    });\n\n    it('should handle French materials section', () => {\n      const note = `\n        Matériel: papier, crayons, règle\n        Aujourd'hui nous allons étudier...\n      `;\n\n      // The function might not handle French, but let's test behavior\n      const result = extractMaterials(note);\n      // This test documents current behavior - may need updating if French support is added\n      expect(Array.isArray(result)).toBe(true);\n    });\n\n    it('should handle very long material lists', () => {\n      const materials = Array.from({ length: 50 }, (_, i) => `item${i + 1}`);\n      const note = `Materials: ${materials.join(', ')}`;\n\n      const result = extractMaterials(note);\n      expect(result.length).toBe(50);\n      expect(result).toContain('item1');\n      expect(result).toContain('item25');\n      expect(result).toContain('item50');\n    });\n\n    it('should handle materials with nested lists', () => {\n      const note = `\n        Materials:\n        - Art supplies:\n          - Crayons\n          - Markers\n        - Paper\n      `;\n\n      const result = extractMaterials(note);\n      // Should handle the primary list items\n      expect(result).toContain('Art supplies:');\n      expect(result).toContain('Paper');\n\n      // Nested items might not be captured (depends on implementation)\n      // This test documents the current behavior\n    });\n  });\n});\n"],"version":3}