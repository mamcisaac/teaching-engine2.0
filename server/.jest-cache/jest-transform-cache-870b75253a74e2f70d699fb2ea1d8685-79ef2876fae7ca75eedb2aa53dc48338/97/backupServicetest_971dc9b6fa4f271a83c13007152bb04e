19cb33fd6fca7e221a93ebaaf136fe14
import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';
import fs from 'fs/promises';
import path from 'path';
import { createBackup, restoreBackup } from '../../src/services/backupService';
describe('backup service', () => {
    const dbPath = path.resolve('test-backup.sqlite');
    // Use the same uploads path that the service uses: src/uploads
    const uploads = path.join(process.cwd(), 'src/uploads');
    beforeAll(async () => {
        process.env.DATABASE_URL = `file:${dbPath}`;
        await fs.writeFile(dbPath, 'data');
        await fs.mkdir(uploads, { recursive: true });
        await fs.writeFile(path.join(uploads, 'file.txt'), 'hi');
    });
    afterAll(async () => {
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
    });
    it('creates and restores backup', async () => {
        console.log('Test uploads path:', uploads);
        console.log('Working directory:', process.cwd());
        const buf = await createBackup();
        console.log('Backup created, size:', buf.length);
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
        await restoreBackup(buf);
        console.log('Backup restored');
        const fileExists = async (p) => !!(await fs.stat(p).catch(() => false));
        const dbExists = await fileExists(dbPath);
        const fileInUploadsExists = await fileExists(path.join(uploads, 'file.txt'));
        console.log('DB exists:', dbExists);
        console.log('File in uploads exists:', fileInUploadsExists);
        console.log('Expected file path:', path.join(uploads, 'file.txt'));
        expect(dbExists).toBe(true);
        expect(fileInUploadsExists).toBe(true);
    }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2JhY2t1cFNlcnZpY2UudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUYxRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0UsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEQsK0RBQStEO0lBQy9ELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRXhELFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxRQUFRLE1BQU0sRUFBRSxDQUFDO1FBQzVDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRWpELE1BQU0sR0FBRyxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUUvQixNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEYsTUFBTSxRQUFRLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBRTdFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFbkUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2JhY2t1cFNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlQWxsLCBhZnRlckFsbCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IHsgY3JlYXRlQmFja3VwLCByZXN0b3JlQmFja3VwIH0gZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL2JhY2t1cFNlcnZpY2UnO1xuXG5kZXNjcmliZSgnYmFja3VwIHNlcnZpY2UnLCAoKSA9PiB7XG4gIGNvbnN0IGRiUGF0aCA9IHBhdGgucmVzb2x2ZSgndGVzdC1iYWNrdXAuc3FsaXRlJyk7XG4gIC8vIFVzZSB0aGUgc2FtZSB1cGxvYWRzIHBhdGggdGhhdCB0aGUgc2VydmljZSB1c2VzOiBzcmMvdXBsb2Fkc1xuICBjb25zdCB1cGxvYWRzID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdzcmMvdXBsb2FkcycpO1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gYGZpbGU6JHtkYlBhdGh9YDtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoZGJQYXRoLCAnZGF0YScpO1xuICAgIGF3YWl0IGZzLm1rZGlyKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLmpvaW4odXBsb2FkcywgJ2ZpbGUudHh0JyksICdoaScpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZnMucm0oZGJQYXRoLCB7IGZvcmNlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLnJtKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgaXQoJ2NyZWF0ZXMgYW5kIHJlc3RvcmVzIGJhY2t1cCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnVGVzdCB1cGxvYWRzIHBhdGg6JywgdXBsb2Fkcyk7XG4gICAgY29uc29sZS5sb2coJ1dvcmtpbmcgZGlyZWN0b3J5OicsIHByb2Nlc3MuY3dkKCkpO1xuXG4gICAgY29uc3QgYnVmID0gYXdhaXQgY3JlYXRlQmFja3VwKCk7XG4gICAgY29uc29sZS5sb2coJ0JhY2t1cCBjcmVhdGVkLCBzaXplOicsIGJ1Zi5sZW5ndGgpO1xuXG4gICAgYXdhaXQgZnMucm0oZGJQYXRoLCB7IGZvcmNlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLnJtKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcblxuICAgIGF3YWl0IHJlc3RvcmVCYWNrdXAoYnVmKTtcbiAgICBjb25zb2xlLmxvZygnQmFja3VwIHJlc3RvcmVkJyk7XG5cbiAgICBjb25zdCBmaWxlRXhpc3RzID0gYXN5bmMgKHA6IHN0cmluZykgPT4gISEoYXdhaXQgZnMuc3RhdChwKS5jYXRjaCgoKSA9PiBmYWxzZSkpO1xuICAgIGNvbnN0IGRiRXhpc3RzID0gYXdhaXQgZmlsZUV4aXN0cyhkYlBhdGgpO1xuICAgIGNvbnN0IGZpbGVJblVwbG9hZHNFeGlzdHMgPSBhd2FpdCBmaWxlRXhpc3RzKHBhdGguam9pbih1cGxvYWRzLCAnZmlsZS50eHQnKSk7XG5cbiAgICBjb25zb2xlLmxvZygnREIgZXhpc3RzOicsIGRiRXhpc3RzKTtcbiAgICBjb25zb2xlLmxvZygnRmlsZSBpbiB1cGxvYWRzIGV4aXN0czonLCBmaWxlSW5VcGxvYWRzRXhpc3RzKTtcbiAgICBjb25zb2xlLmxvZygnRXhwZWN0ZWQgZmlsZSBwYXRoOicsIHBhdGguam9pbih1cGxvYWRzLCAnZmlsZS50eHQnKSk7XG5cbiAgICBleHBlY3QoZGJFeGlzdHMpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGZpbGVJblVwbG9hZHNFeGlzdHMpLnRvQmUodHJ1ZSk7XG4gIH0sIDEwMDAwKTtcbn0pO1xuIl0sInZlcnNpb24iOjN9