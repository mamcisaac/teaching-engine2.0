{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/jest.setup.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/jest.setup.ts"],"sourcesContent":["import { beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';\nimport { testDb } from './setup-test-db';\nimport { randomBytes } from 'crypto';\nimport { PrismaClient } from '@teaching-engine/database';\n\n// Store current test context\nlet currentTestId: string | null = null;\nlet currentTransactionClient: PrismaClient | null = null;\n\n/**\n * Global setup for all tests\n */\nbeforeAll(async () => {\n  const workerId = process.env.JEST_WORKER_ID || 'default';\n\n  try {\n    // Create a unique test database for this worker\n    await testDb.createTestDatabase(workerId);\n\n    // Verify database is healthy\n    const isHealthy = await testDb.isDatabaseHealthy(workerId);\n    if (!isHealthy) {\n      throw new Error('Test database is not healthy after creation');\n    }\n\n    // Set the test client globally so the prisma module can use it\n    const globalForPrisma = globalThis as unknown as {\n      testPrismaClient: PrismaClient | undefined;\n    };\n    globalForPrisma.testPrismaClient = testDb.getPrismaClient(workerId);\n  } catch (error) {\n    console.error('Failed to setup test database:', error);\n    throw error;\n  }\n});\n\n/**\n * Setup before each test - start transaction\n */\nbeforeEach(async () => {\n  // Generate unique test ID\n  currentTestId = randomBytes(8).toString('hex');\n\n  try {\n    // Start a real transaction for this test\n    currentTransactionClient = await testDb.startTransaction(currentTestId);\n\n    // Update the global test client so services use the transaction\n    const globalForPrisma = globalThis as unknown as {\n      testPrismaClient: PrismaClient | undefined;\n    };\n    globalForPrisma.testPrismaClient = currentTransactionClient;\n  } catch (error) {\n    console.error('Failed to start transaction for test:', error);\n    throw error;\n  }\n});\n\n/**\n * Cleanup after each test - reset database\n */\nafterEach(async () => {\n  if (currentTestId) {\n    try {\n      // Reset the database after each test\n      const workerId = process.env.JEST_WORKER_ID || 'default';\n      await testDb.resetDatabase(workerId);\n\n      // Reset the global test client\n      const globalForPrisma = globalThis as unknown as {\n        testPrismaClient: PrismaClient | undefined;\n      };\n      globalForPrisma.testPrismaClient = testDb.getPrismaClient(workerId);\n    } catch (error) {\n      console.error('Failed to reset database:', error);\n    } finally {\n      currentTestId = null;\n      currentTransactionClient = null;\n    }\n  }\n});\n\n/**\n * Global cleanup after all tests\n */\nafterAll(async () => {\n  try {\n    // Get connection stats for debugging if tests are in debug mode\n    if (process.env.DEBUG_TESTS === 'true') {\n      const workerId = process.env.JEST_WORKER_ID || 'default';\n      const stats = await testDb.getConnectionStats(workerId);\n      console.log('Final connection stats:', stats);\n    }\n\n    await testDb.cleanup();\n  } catch (error) {\n    console.warn('Failed to cleanup test database:', error);\n  }\n});\n\n/**\n * Get the current test's Prisma client\n * This will return the transaction client if available, otherwise the base client\n */\nexport function getTestPrismaClient(): PrismaClient {\n  // If we have an active transaction, use that client\n  if (currentTransactionClient && currentTestId) {\n    return currentTransactionClient;\n  }\n\n  // Otherwise, return the base client for the worker\n  const workerId = process.env.JEST_WORKER_ID || 'default';\n  return testDb.getPrismaClient(workerId);\n}\n\n/**\n * Execute a database operation with retry logic\n * Useful for operations that might fail due to busy database\n */\nexport async function executeWithRetry<T>(fn: () => Promise<T>, retries = 3): Promise<T> {\n  return testDb.executeWithRetry(fn, retries);\n}\n\n/**\n * Clean test database (for legacy compatibility)\n */\nexport async function cleanTestDatabase() {\n  const workerId = process.env.JEST_WORKER_ID || 'default';\n  await testDb.resetDatabase(workerId);\n}\n\n/**\n * Get current test ID (useful for debugging)\n */\nexport function getCurrentTestId(): string | null {\n  return currentTestId;\n}\n\n/**\n * Check if we're in a transaction\n */\nexport function isInTransaction(): boolean {\n  return currentTestId !== null && currentTransactionClient !== null;\n}\n\n/**\n * Create test data with automatic cleanup\n * The data will be automatically rolled back after the test\n */\nexport async function createTestData<T>(\n  createFn: (prisma: PrismaClient) => Promise<T>,\n): Promise<T> {\n  const client = getTestPrismaClient();\n\n  if (!isInTransaction()) {\n    throw new Error('createTestData must be called within a test (transaction)');\n  }\n\n  return executeWithRetry(() => createFn(client));\n}\n\n/**\n * Seed test data for the current test\n * This is a helper for common test data patterns\n */\ninterface TestData {\n  users?: Array<{ email: string; password: string; name: string; role?: string }>;\n  subjects?: Array<{ name: string; code?: string }>;\n  outcomes?: Array<{\n    code: string;\n    description: string;\n    subject: string;\n    grade: number;\n    domain?: string;\n  }>;\n  activities?: Array<{\n    title: string;\n    milestoneId: number;\n    description?: string;\n    duration?: number;\n  }>;\n}\n\nexport async function seedTestData(data: TestData) {\n  const client = getTestPrismaClient();\n\n  if (!isInTransaction()) {\n    throw new Error('seedTestData must be called within a test (transaction)');\n  }\n\n  return executeWithRetry(async () => {\n    const created = {\n      users: [] as Array<{ id: number; email: string; name: string }>,\n      subjects: [] as Array<{ id: number; name: string; code?: string }>,\n      outcomes: [] as Array<{ id: number; code: string; description: string }>,\n      activities: [] as Array<{ id: number; title: string; milestoneId: number }>,\n    };\n\n    // Create users\n    if (data.users) {\n      for (const userData of data.users) {\n        const user = await client.user.create({ data: userData });\n        created.users.push(user);\n      }\n    }\n\n    // Create subjects\n    if (data.subjects) {\n      for (const subjectData of data.subjects) {\n        const subject = await client.subject.create({ data: subjectData });\n        created.subjects.push(subject);\n      }\n    }\n\n    // Create outcomes\n    if (data.outcomes) {\n      for (const outcomeData of data.outcomes) {\n        const outcome = await client.outcome.create({ data: outcomeData });\n        created.outcomes.push(outcome);\n      }\n    }\n\n    // Create activities\n    if (data.activities) {\n      for (const activityData of data.activities) {\n        const activity = await client.activity.create({ data: activityData });\n        created.activities.push(activity);\n      }\n    }\n\n    return created;\n  });\n}\n"],"version":3}