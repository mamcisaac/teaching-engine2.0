9293b2fa3c593fbd832cac77ee74eefc
/**
 * Authentication Middleware
 * Extracts and validates JWT tokens from requests
 */
import jwt from 'jsonwebtoken';
import logger from '@/logger';
// Express Request type is extended in types/express.d.ts
export function authenticate(req, res, next) {
    try {
        // First try to get token from httpOnly cookie
        let token = req.cookies?.authToken;
        // Fallback to Authorization header for backward compatibility
        if (!token) {
            const authHeader = req.headers['authorization'];
            if (authHeader && authHeader.startsWith('Bearer ')) {
                token = authHeader.split(' ')[1];
            }
        }
        if (!token) {
            res.status(401).json({ error: 'Authentication required' });
            return;
        }
        if (token.length > 1000) {
            // Prevent extremely long tokens
            res.status(401).json({ error: 'Invalid token format' });
            return;
        }
        const secret = process.env.JWT_SECRET;
        if (!secret) {
            logger.error('CRITICAL: JWT_SECRET environment variable not configured');
            res.status(500).json({ error: 'Server configuration error' });
            return;
        }
        const decoded = jwt.verify(token, secret, {
            algorithms: ['HS256'], // Explicitly specify allowed algorithms
            maxAge: '7d', // Maximum token age
        });
        if (!decoded?.userId || !decoded?.email || !decoded?.iat) {
            res.status(403).json({ error: 'Invalid token payload' });
            return;
        }
        // Check token age (extra protection)
        const now = Math.floor(Date.now() / 1000);
        const maxAge = 7 * 24 * 60 * 60; // 7 days in seconds
        if (now - decoded.iat > maxAge) {
            res.status(403).json({ error: 'Token expired' });
            return;
        }
        // Attach user information to request
        req.user = {
            id: Number(decoded.userId),
            email: decoded.email,
        };
        next();
    }
    catch (err) {
        if (err instanceof jwt.TokenExpiredError) {
            res.status(403).json({ error: 'Token expired' });
        }
        else if (err instanceof jwt.JsonWebTokenError) {
            res.status(403).json({ error: 'Invalid token' });
        }
        else {
            logger.error('JWT verification error:', err);
            res.status(403).json({ error: 'Token verification failed' });
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9taWRkbGV3YXJlL2F1dGhlbnRpY2F0ZS50cyIsIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFHSCxPQUFPLEdBQW1CLE1BQU0sY0FBYyxDQUFDO0FBQy9DLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUU5Qix5REFBeUQ7QUFFekQsTUFBTSxVQUFVLFlBQVksQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO0lBQzFFLElBQUksQ0FBQztRQUNILDhDQUE4QztRQUM5QyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQztRQUVuQyw4REFBOEQ7UUFDOUQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ1gsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNoRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7Z0JBQ25ELEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLENBQUM7UUFDSCxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ1gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1lBQzNELE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDO1lBQ3hCLGdDQUFnQztZQUNoQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7WUFDeEQsT0FBTztRQUNULENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUN0QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDWixNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7WUFDekUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsQ0FBQyxDQUFDO1lBQzlELE9BQU87UUFDVCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1lBQ3hDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLHdDQUF3QztZQUMvRCxNQUFNLEVBQUUsSUFBSSxFQUFFLG9CQUFvQjtTQUNuQyxDQUFlLENBQUM7UUFFakIsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ3pELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztZQUN6RCxPQUFPO1FBQ1QsQ0FBQztRQUVELHFDQUFxQztRQUNyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7UUFDckQsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztZQUMvQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1lBQ2pELE9BQU87UUFDVCxDQUFDO1FBRUQscUNBQXFDO1FBQ3JDLEdBQUcsQ0FBQyxJQUFJLEdBQUc7WUFDVCxFQUFFLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDMUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3JCLENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQztJQUNULENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxHQUFHLFlBQVksR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDekMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDO2FBQU0sSUFBSSxHQUFHLFlBQVksR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDaEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDO2FBQU0sQ0FBQztZQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDN0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL21pZGRsZXdhcmUvYXV0aGVudGljYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXV0aGVudGljYXRpb24gTWlkZGxld2FyZVxuICogRXh0cmFjdHMgYW5kIHZhbGlkYXRlcyBKV1QgdG9rZW5zIGZyb20gcmVxdWVzdHNcbiAqL1xuXG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgand0LCB7IEp3dFBheWxvYWQgfSBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IGxvZ2dlciBmcm9tICdAL2xvZ2dlcic7XG5cbi8vIEV4cHJlc3MgUmVxdWVzdCB0eXBlIGlzIGV4dGVuZGVkIGluIHR5cGVzL2V4cHJlc3MuZC50c1xuXG5leHBvcnQgZnVuY3Rpb24gYXV0aGVudGljYXRlKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgLy8gRmlyc3QgdHJ5IHRvIGdldCB0b2tlbiBmcm9tIGh0dHBPbmx5IGNvb2tpZVxuICAgIGxldCB0b2tlbiA9IHJlcS5jb29raWVzPy5hdXRoVG9rZW47XG5cbiAgICAvLyBGYWxsYmFjayB0byBBdXRob3JpemF0aW9uIGhlYWRlciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXEuaGVhZGVyc1snYXV0aG9yaXphdGlvbiddO1xuICAgICAgaWYgKGF1dGhIZWFkZXIgJiYgYXV0aEhlYWRlci5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcbiAgICAgICAgdG9rZW4gPSBhdXRoSGVhZGVyLnNwbGl0KCcgJylbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4ubGVuZ3RoID4gMTAwMCkge1xuICAgICAgLy8gUHJldmVudCBleHRyZW1lbHkgbG9uZyB0b2tlbnNcbiAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHRva2VuIGZvcm1hdCcgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2VjcmV0ID0gcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVDtcbiAgICBpZiAoIXNlY3JldCkge1xuICAgICAgbG9nZ2VyLmVycm9yKCdDUklUSUNBTDogSldUX1NFQ1JFVCBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3QgY29uZmlndXJlZCcpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NlcnZlciBjb25maWd1cmF0aW9uIGVycm9yJyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZWNvZGVkID0gand0LnZlcmlmeSh0b2tlbiwgc2VjcmV0LCB7XG4gICAgICBhbGdvcml0aG1zOiBbJ0hTMjU2J10sIC8vIEV4cGxpY2l0bHkgc3BlY2lmeSBhbGxvd2VkIGFsZ29yaXRobXNcbiAgICAgIG1heEFnZTogJzdkJywgLy8gTWF4aW11bSB0b2tlbiBhZ2VcbiAgICB9KSBhcyBKd3RQYXlsb2FkO1xuXG4gICAgaWYgKCFkZWNvZGVkPy51c2VySWQgfHwgIWRlY29kZWQ/LmVtYWlsIHx8ICFkZWNvZGVkPy5pYXQpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHRva2VuIHBheWxvYWQnIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHRva2VuIGFnZSAoZXh0cmEgcHJvdGVjdGlvbilcbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICBjb25zdCBtYXhBZ2UgPSA3ICogMjQgKiA2MCAqIDYwOyAvLyA3IGRheXMgaW4gc2Vjb25kc1xuICAgIGlmIChub3cgLSBkZWNvZGVkLmlhdCA+IG1heEFnZSkge1xuICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ1Rva2VuIGV4cGlyZWQnIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCB1c2VyIGluZm9ybWF0aW9uIHRvIHJlcXVlc3RcbiAgICByZXEudXNlciA9IHtcbiAgICAgIGlkOiBOdW1iZXIoZGVjb2RlZC51c2VySWQpLFxuICAgICAgZW1haWw6IGRlY29kZWQuZW1haWwsXG4gICAgfTtcblxuICAgIG5leHQoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIGp3dC5Ub2tlbkV4cGlyZWRFcnJvcikge1xuICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ1Rva2VuIGV4cGlyZWQnIH0pO1xuICAgIH0gZWxzZSBpZiAoZXJyIGluc3RhbmNlb2Ygand0Lkpzb25XZWJUb2tlbkVycm9yKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnSW52YWxpZCB0b2tlbicgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5lcnJvcignSldUIHZlcmlmaWNhdGlvbiBlcnJvcjonLCBlcnIpO1xuICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ1Rva2VuIHZlcmlmaWNhdGlvbiBmYWlsZWQnIH0pO1xuICAgIH1cbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==