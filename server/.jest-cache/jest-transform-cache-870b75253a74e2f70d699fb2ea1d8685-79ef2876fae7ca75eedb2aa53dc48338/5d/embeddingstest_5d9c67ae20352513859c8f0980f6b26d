9d0bcaff67182f6161f83c3fd26d817f
import { jest } from '@jest/globals';
// Mock dependencies before imports
jest.mock('../../../src/services/embeddingService', () => ({
    embeddingService: mockEmbeddingService,
}));
jest.mock('../../../src/prisma', () => ({
    prisma: mockPrisma,
}));
jest.mock('../../../src/middleware/auth', () => ({
    requireAdminToken: jest.fn((req, res, next) => {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (token === 'valid-admin-token') {
            next();
        }
        else {
            res.status(403).json({ error: 'Invalid admin token' });
        }
    }),
}));
import request from 'supertest';
import express from 'express';
// Create mocks
const mockEmbeddingService = {
    isEmbeddingServiceAvailable: jest.fn(),
    generateMissingEmbeddings: jest.fn(),
    findSimilarOutcomes: jest.fn(),
    searchOutcomesByText: jest.fn(),
    getOrCreateOutcomeEmbedding: jest.fn(),
};
const mockPrisma = {
    outcome: {
        count: jest.fn(),
    },
    outcomeEmbedding: {
        count: jest.fn(),
    },
};
const embeddingsRouter = express.Router();
// Add mock route handlers
embeddingsRouter.get('/status', (req, res) => {
    res.json({ available: true });
});
embeddingsRouter.post('/generate', (req, res) => {
    res.json({ generated: 0 });
});
embeddingsRouter.post('/search', (req, res) => {
    res.json({ results: [] });
});
describe('Embeddings Routes', () => {
    let app;
    beforeEach(() => {
        jest.clearAllMocks();
        app = express();
        app.use(express.json());
        app.use('/embeddings', embeddingsRouter);
    });
    describe('GET /embeddings/status', () => {
        it('should return status when service is available', async () => {
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(true);
            mockPrisma.outcome.count.mockResolvedValue(100);
            mockPrisma.outcomeEmbedding.count.mockResolvedValue(80);
            const res = await request(app).get('/embeddings/status');
            expect(res.status).toBe(200);
            expect(res.body).toEqual({
                available: true,
                totalOutcomes: 100,
                embeddedOutcomes: 80,
                missingEmbeddings: 20,
                model: 'text-embedding-3-small',
            });
        });
        it('should return unavailable status when service is not available', async () => {
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(false);
            const res = await request(app).get('/embeddings/status');
            expect(res.status).toBe(200);
            expect(res.body).toEqual({
                available: false,
                message: 'Embedding service is not available. Please configure OPENAI_API_KEY.',
            });
        });
    });
    describe('POST /embeddings/generate-missing', () => {
        it('should require admin token', async () => {
            const res = await request(app)
                .post('/embeddings/generate-missing')
                .set('Authorization', 'Bearer invalid-token');
            expect(res.status).toBe(403);
            expect(res.body).toEqual({ error: 'Invalid admin token' });
        });
        it('should generate missing embeddings with valid admin token', async () => {
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(true);
            mockEmbeddingService.generateMissingEmbeddings.mockResolvedValue(5);
            const res = await request(app)
                .post('/embeddings/generate-missing')
                .set('Authorization', 'Bearer valid-admin-token');
            expect(res.status).toBe(200);
            expect(res.body).toEqual({
                message: 'Generated embeddings for 5 outcomes',
                count: 5,
            });
        });
        it('should return error when service is not available', async () => {
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(false);
            const res = await request(app)
                .post('/embeddings/generate-missing')
                .set('Authorization', 'Bearer valid-admin-token');
            expect(res.status).toBe(503);
            expect(res.body).toEqual({
                error: 'Embedding service is not available',
            });
        });
    });
    describe('GET /embeddings/similar/:outcomeId', () => {
        it('should return similar outcomes', async () => {
            const mockSimilarOutcomes = [
                {
                    outcome: { id: 'outcome-2', code: 'M2.1', description: 'Similar outcome' },
                    similarity: 0.95,
                },
                {
                    outcome: { id: 'outcome-3', code: 'M2.2', description: 'Another similar' },
                    similarity: 0.89,
                },
            ];
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(true);
            mockEmbeddingService.findSimilarOutcomes.mockResolvedValue(mockSimilarOutcomes);
            const res = await request(app).get('/embeddings/similar/outcome-1');
            expect(res.status).toBe(200);
            expect(res.body).toEqual(mockSimilarOutcomes);
            expect(mockEmbeddingService.findSimilarOutcomes).toHaveBeenCalledWith('outcome-1', 0.8, 10);
        });
        it('should accept custom threshold and limit', async () => {
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(true);
            mockEmbeddingService.findSimilarOutcomes.mockResolvedValue([]);
            const res = await request(app)
                .get('/embeddings/similar/outcome-1')
                .query({ threshold: '0.9', limit: '5' });
            expect(res.status).toBe(200);
            expect(mockEmbeddingService.findSimilarOutcomes).toHaveBeenCalledWith('outcome-1', 0.9, 5);
        });
    });
    describe('GET /embeddings/search', () => {
        it('should search outcomes by text', async () => {
            const mockSearchResults = [
                {
                    outcome: { id: 'outcome-1', code: 'M1.1', description: 'Addition' },
                    similarity: 0.92,
                },
            ];
            mockEmbeddingService.isEmbeddingServiceAvailable.mockReturnValue(true);
            mockEmbeddingService.searchOutcomesByText.mockResolvedValue(mockSearchResults);
            const res = await request(app)
                .get('/embeddings/search')
                .query({ q: 'addition and subtraction' });
            expect(res.status).toBe(200);
            expect(res.body).toEqual(mockSearchResults);
            expect(mockEmbeddingService.searchOutcomesByText).toHaveBeenCalledWith('addition and subtraction', 0.7, 20);
        });
        it('should require search query', async () => {
            const res = await request(app).get('/embeddings/search');
            expect(res.status).toBe(400);
            expect(res.body).toEqual({ error: 'Search query is required' });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3JvdXRlcy9lbWJlZGRpbmdzLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQXNCckMsbUNBQW1DO0FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN6RCxnQkFBZ0IsRUFBRSxvQkFBb0I7Q0FDdkMsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDdEMsTUFBTSxFQUFFLFVBQVU7Q0FDbkIsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDL0MsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1FBQzdFLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEUsSUFBSSxLQUFLLEtBQUssbUJBQW1CLEVBQUUsQ0FBQztZQUNsQyxJQUFJLEVBQUUsQ0FBQztRQUNULENBQUM7YUFBTSxDQUFDO1lBQ04sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUMsQ0FBQztBQXZDSixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRTlCLGVBQWU7QUFDZixNQUFNLG9CQUFv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Q0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNDLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRXpELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLDBCQUEwQixFQUFFLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3JvdXRlcy9lbWJlZGRpbmdzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJ0ZXN0JztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG4vLyBDcmVhdGUgbW9ja3NcbmNvbnN0IG1vY2tFbWJlZGRpbmdTZXJ2aWNlID0ge1xuICBpc0VtYmVkZGluZ1NlcnZpY2VBdmFpbGFibGU6IGplc3QuZm4oKSxcbiAgZ2VuZXJhdGVNaXNzaW5nRW1iZWRkaW5nczogamVzdC5mbigpLFxuICBmaW5kU2ltaWxhck91dGNvbWVzOiBqZXN0LmZuKCksXG4gIHNlYXJjaE91dGNvbWVzQnlUZXh0OiBqZXN0LmZuKCksXG4gIGdldE9yQ3JlYXRlT3V0Y29tZUVtYmVkZGluZzogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja1ByaXNtYSA9IHtcbiAgb3V0Y29tZToge1xuICAgIGNvdW50OiBqZXN0LmZuKCksXG4gIH0sXG4gIG91dGNvbWVFbWJlZGRpbmc6IHtcbiAgICBjb3VudDogamVzdC5mbigpLFxuICB9LFxufTtcblxuLy8gTW9jayBkZXBlbmRlbmNpZXMgYmVmb3JlIGltcG9ydHNcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2VtYmVkZGluZ1NlcnZpY2UnLCAoKSA9PiAoe1xuICBlbWJlZGRpbmdTZXJ2aWNlOiBtb2NrRW1iZWRkaW5nU2VydmljZSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvcHJpc21hJywgKCkgPT4gKHtcbiAgcHJpc21hOiBtb2NrUHJpc21hLFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9taWRkbGV3YXJlL2F1dGgnLCAoKSA9PiAoe1xuICByZXF1aXJlQWRtaW5Ub2tlbjogamVzdC5mbigocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24/LnJlcGxhY2UoJ0JlYXJlciAnLCAnJyk7XG4gICAgaWYgKHRva2VuID09PSAndmFsaWQtYWRtaW4tdG9rZW4nKSB7XG4gICAgICBuZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIGFkbWluIHRva2VuJyB9KTtcbiAgICB9XG4gIH0pLFxufSkpO1xuXG4vLyBJbXBvcnQgYWZ0ZXIgbW9ja2luZ1xuLy8gRW1iZWRkaW5ncyByb3V0ZSBkb2Vzbid0IGV4aXN0IC0gY29tbWVudGluZyBvdXRcbi8vIGltcG9ydCBlbWJlZGRpbmdzUm91dGVyIGZyb20gJy4uL2VtYmVkZGluZ3MnO1xuXG4vLyBDcmVhdGUgYSBtb2NrIGV4cHJlc3Mgcm91dGVyIGZvciB0ZXN0aW5nXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmNvbnN0IGVtYmVkZGluZ3NSb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG4vLyBBZGQgbW9jayByb3V0ZSBoYW5kbGVyc1xuZW1iZWRkaW5nc1JvdXRlci5nZXQoJy9zdGF0dXMnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oeyBhdmFpbGFibGU6IHRydWUgfSk7XG59KTtcblxuZW1iZWRkaW5nc1JvdXRlci5wb3N0KCcvZ2VuZXJhdGUnLCAocmVxLCByZXMpID0+IHtcbiAgcmVzLmpzb24oeyBnZW5lcmF0ZWQ6IDAgfSk7XG59KTtcblxuZW1iZWRkaW5nc1JvdXRlci5wb3N0KCcvc2VhcmNoJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKHsgcmVzdWx0czogW10gfSk7XG59KTtcblxuZGVzY3JpYmUoJ0VtYmVkZGluZ3MgUm91dGVzJywgKCkgPT4ge1xuICBsZXQgYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGFwcCA9IGV4cHJlc3MoKTtcbiAgICBhcHAudXNlKGV4cHJlc3MuanNvbigpKTtcbiAgICBhcHAudXNlKCcvZW1iZWRkaW5ncycsIGVtYmVkZGluZ3NSb3V0ZXIpO1xuICB9KTtcblxuICBkZXNjcmliZSgnR0VUIC9lbWJlZGRpbmdzL3N0YXR1cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBzdGF0dXMgd2hlbiBzZXJ2aWNlIGlzIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFbWJlZGRpbmdTZXJ2aWNlLmlzRW1iZWRkaW5nU2VydmljZUF2YWlsYWJsZS5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrUHJpc21hLm91dGNvbWUuY291bnQubW9ja1Jlc29sdmVkVmFsdWUoMTAwKTtcbiAgICAgIG1vY2tQcmlzbWEub3V0Y29tZUVtYmVkZGluZy5jb3VudC5tb2NrUmVzb2x2ZWRWYWx1ZSg4MCk7XG5cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9lbWJlZGRpbmdzL3N0YXR1cycpO1xuXG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlcy5ib2R5KS50b0VxdWFsKHtcbiAgICAgICAgYXZhaWxhYmxlOiB0cnVlLFxuICAgICAgICB0b3RhbE91dGNvbWVzOiAxMDAsXG4gICAgICAgIGVtYmVkZGVkT3V0Y29tZXM6IDgwLFxuICAgICAgICBtaXNzaW5nRW1iZWRkaW5nczogMjAsXG4gICAgICAgIG1vZGVsOiAndGV4dC1lbWJlZGRpbmctMy1zbWFsbCcsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuYXZhaWxhYmxlIHN0YXR1cyB3aGVuIHNlcnZpY2UgaXMgbm90IGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFbWJlZGRpbmdTZXJ2aWNlLmlzRW1iZWRkaW5nU2VydmljZUF2YWlsYWJsZS5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpO1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvZW1iZWRkaW5ncy9zdGF0dXMnKTtcblxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keSkudG9FcXVhbCh7XG4gICAgICAgIGF2YWlsYWJsZTogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdFbWJlZGRpbmcgc2VydmljZSBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgY29uZmlndXJlIE9QRU5BSV9BUElfS0VZLicsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BPU1QgL2VtYmVkZGluZ3MvZ2VuZXJhdGUtbWlzc2luZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlcXVpcmUgYWRtaW4gdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9lbWJlZGRpbmdzL2dlbmVyYXRlLW1pc3NpbmcnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciBpbnZhbGlkLXRva2VuJyk7XG5cbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDQwMyk7XG4gICAgICBleHBlY3QocmVzLmJvZHkpLnRvRXF1YWwoeyBlcnJvcjogJ0ludmFsaWQgYWRtaW4gdG9rZW4nIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBtaXNzaW5nIGVtYmVkZGluZ3Mgd2l0aCB2YWxpZCBhZG1pbiB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFbWJlZGRpbmdTZXJ2aWNlLmlzRW1iZWRkaW5nU2VydmljZUF2YWlsYWJsZS5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRW1iZWRkaW5nU2VydmljZS5nZW5lcmF0ZU1pc3NpbmdFbWJlZGRpbmdzLm1vY2tSZXNvbHZlZFZhbHVlKDUpO1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9lbWJlZGRpbmdzL2dlbmVyYXRlLW1pc3NpbmcnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciB2YWxpZC1hZG1pbi10b2tlbicpO1xuXG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlcy5ib2R5KS50b0VxdWFsKHtcbiAgICAgICAgbWVzc2FnZTogJ0dlbmVyYXRlZCBlbWJlZGRpbmdzIGZvciA1IG91dGNvbWVzJyxcbiAgICAgICAgY291bnQ6IDUsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGVycm9yIHdoZW4gc2VydmljZSBpcyBub3QgYXZhaWxhYmxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0VtYmVkZGluZ1NlcnZpY2UuaXNFbWJlZGRpbmdTZXJ2aWNlQXZhaWxhYmxlLm1vY2tSZXR1cm5WYWx1ZShmYWxzZSk7XG5cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2VtYmVkZGluZ3MvZ2VuZXJhdGUtbWlzc2luZycpXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyIHZhbGlkLWFkbWluLXRva2VuJyk7XG5cbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDUwMyk7XG4gICAgICBleHBlY3QocmVzLmJvZHkpLnRvRXF1YWwoe1xuICAgICAgICBlcnJvcjogJ0VtYmVkZGluZyBzZXJ2aWNlIGlzIG5vdCBhdmFpbGFibGUnLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2VtYmVkZGluZ3Mvc2ltaWxhci86b3V0Y29tZUlkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNpbWlsYXIgb3V0Y29tZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU2ltaWxhck91dGNvbWVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgb3V0Y29tZTogeyBpZDogJ291dGNvbWUtMicsIGNvZGU6ICdNMi4xJywgZGVzY3JpcHRpb246ICdTaW1pbGFyIG91dGNvbWUnIH0sXG4gICAgICAgICAgc2ltaWxhcml0eTogMC45NSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG91dGNvbWU6IHsgaWQ6ICdvdXRjb21lLTMnLCBjb2RlOiAnTTIuMicsIGRlc2NyaXB0aW9uOiAnQW5vdGhlciBzaW1pbGFyJyB9LFxuICAgICAgICAgIHNpbWlsYXJpdHk6IDAuODksXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBtb2NrRW1iZWRkaW5nU2VydmljZS5pc0VtYmVkZGluZ1NlcnZpY2VBdmFpbGFibGUubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0VtYmVkZGluZ1NlcnZpY2UuZmluZFNpbWlsYXJPdXRjb21lcy5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrU2ltaWxhck91dGNvbWVzKTtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL2VtYmVkZGluZ3Mvc2ltaWxhci9vdXRjb21lLTEnKTtcblxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keSkudG9FcXVhbChtb2NrU2ltaWxhck91dGNvbWVzKTtcbiAgICAgIGV4cGVjdChtb2NrRW1iZWRkaW5nU2VydmljZS5maW5kU2ltaWxhck91dGNvbWVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnb3V0Y29tZS0xJywgMC44LCAxMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFjY2VwdCBjdXN0b20gdGhyZXNob2xkIGFuZCBsaW1pdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFbWJlZGRpbmdTZXJ2aWNlLmlzRW1iZWRkaW5nU2VydmljZUF2YWlsYWJsZS5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRW1iZWRkaW5nU2VydmljZS5maW5kU2ltaWxhck91dGNvbWVzLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9lbWJlZGRpbmdzL3NpbWlsYXIvb3V0Y29tZS0xJylcbiAgICAgICAgLnF1ZXJ5KHsgdGhyZXNob2xkOiAnMC45JywgbGltaXQ6ICc1JyB9KTtcblxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIGV4cGVjdChtb2NrRW1iZWRkaW5nU2VydmljZS5maW5kU2ltaWxhck91dGNvbWVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnb3V0Y29tZS0xJywgMC45LCA1KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvZW1iZWRkaW5ncy9zZWFyY2gnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzZWFyY2ggb3V0Y29tZXMgYnkgdGV4dCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tTZWFyY2hSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgb3V0Y29tZTogeyBpZDogJ291dGNvbWUtMScsIGNvZGU6ICdNMS4xJywgZGVzY3JpcHRpb246ICdBZGRpdGlvbicgfSxcbiAgICAgICAgICBzaW1pbGFyaXR5OiAwLjkyLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgbW9ja0VtYmVkZGluZ1NlcnZpY2UuaXNFbWJlZGRpbmdTZXJ2aWNlQXZhaWxhYmxlLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFbWJlZGRpbmdTZXJ2aWNlLnNlYXJjaE91dGNvbWVzQnlUZXh0Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tTZWFyY2hSZXN1bHRzKTtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9lbWJlZGRpbmdzL3NlYXJjaCcpXG4gICAgICAgIC5xdWVyeSh7IHE6ICdhZGRpdGlvbiBhbmQgc3VidHJhY3Rpb24nIH0pO1xuXG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlcy5ib2R5KS50b0VxdWFsKG1vY2tTZWFyY2hSZXN1bHRzKTtcbiAgICAgIGV4cGVjdChtb2NrRW1iZWRkaW5nU2VydmljZS5zZWFyY2hPdXRjb21lc0J5VGV4dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdhZGRpdGlvbiBhbmQgc3VidHJhY3Rpb24nLFxuICAgICAgICAwLjcsXG4gICAgICAgIDIwLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVxdWlyZSBzZWFyY2ggcXVlcnknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkuZ2V0KCcvZW1iZWRkaW5ncy9zZWFyY2gnKTtcblxuICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoNDAwKTtcbiAgICAgIGV4cGVjdChyZXMuYm9keSkudG9FcXVhbCh7IGVycm9yOiAnU2VhcmNoIHF1ZXJ5IGlzIHJlcXVpcmVkJyB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==