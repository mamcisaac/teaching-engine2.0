{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/validation.unit.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/validation.unit.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport {\n  subjectSchema,\n  milestoneCreateSchema,\n  milestoneUpdateSchema,\n  activityCreateSchema,\n} from '../../src/validation';\n\ndescribe('Validation Schemas Unit Tests', () => {\n  describe('subjectSchema', () => {\n    it('should validate valid subject data', () => {\n      const validSubject = {\n        name: 'Mathematics',\n        nameEn: 'Mathematics',\n        nameFr: 'Mathématiques',\n      };\n\n      const result = subjectSchema.safeParse(validSubject);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual(validSubject);\n      }\n    });\n\n    it('should require name field', () => {\n      const invalidSubject = {\n        nameEn: 'Mathematics',\n        nameFr: 'Mathématiques',\n      };\n\n      const result = subjectSchema.safeParse(invalidSubject);\n      expect(result.success).toBe(false);\n    });\n\n    it('should reject empty name', () => {\n      const invalidSubject = {\n        name: '',\n        nameEn: 'Mathematics',\n      };\n\n      const result = subjectSchema.safeParse(invalidSubject);\n      expect(result.success).toBe(false);\n    });\n\n    it('should allow optional language fields', () => {\n      const minimalSubject = {\n        name: 'Science',\n      };\n\n      const result = subjectSchema.safeParse(minimalSubject);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle only English translation', () => {\n      const subjectWithEn = {\n        name: 'Science',\n        nameEn: 'Science',\n      };\n\n      const result = subjectSchema.safeParse(subjectWithEn);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.nameEn).toBe('Science');\n        expect(result.data.nameFr).toBeUndefined();\n      }\n    });\n\n    it('should handle only French translation', () => {\n      const subjectWithFr = {\n        name: 'Sciences',\n        nameFr: 'Sciences',\n      };\n\n      const result = subjectSchema.safeParse(subjectWithFr);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.nameFr).toBe('Sciences');\n        expect(result.data.nameEn).toBeUndefined();\n      }\n    });\n  });\n\n  describe('milestoneCreateSchema', () => {\n    const validMilestone = {\n      title: 'Unit 1: Numbers',\n      subjectId: 1,\n      startDate: '2024-01-01T00:00:00.000Z',\n      endDate: '2024-01-31T23:59:59.000Z',\n      estHours: 20,\n    };\n\n    it('should validate valid milestone data', () => {\n      const result = milestoneCreateSchema.safeParse(validMilestone);\n      expect(result.success).toBe(true);\n    });\n\n    it('should require title and subjectId', () => {\n      const invalidMilestone = {\n        startDate: '2024-01-01T00:00:00.000Z',\n        endDate: '2024-01-31T23:59:59.000Z',\n      };\n\n      const result = milestoneCreateSchema.safeParse(invalidMilestone);\n      expect(result.success).toBe(false);\n    });\n\n    it('should validate that end date is after start date', () => {\n      const invalidMilestone = {\n        ...validMilestone,\n        startDate: '2024-01-31T00:00:00.000Z',\n        endDate: '2024-01-01T23:59:59.000Z', // Before start date\n      };\n\n      const result = milestoneCreateSchema.safeParse(invalidMilestone);\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.error.issues.some((issue) => issue.path.includes('endDate'))).toBe(true);\n      }\n    });\n\n    it('should allow equal start and end dates', () => {\n      const sameDayMilestone = {\n        ...validMilestone,\n        startDate: '2024-01-15T09:00:00.000Z',\n        endDate: '2024-01-15T17:00:00.000Z',\n      };\n\n      const result = milestoneCreateSchema.safeParse(sameDayMilestone);\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate datetime format', () => {\n      const invalidDateMilestone = {\n        ...validMilestone,\n        startDate: '2024-01-01', // Invalid datetime format\n      };\n\n      const result = milestoneCreateSchema.safeParse(invalidDateMilestone);\n      expect(result.success).toBe(false);\n    });\n\n    it('should handle optional fields', () => {\n      const minimalMilestone = {\n        title: 'Basic Milestone',\n        subjectId: 1,\n      };\n\n      const result = milestoneCreateSchema.safeParse(minimalMilestone);\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate estHours is integer', () => {\n      const invalidHoursMilestone = {\n        ...validMilestone,\n        estHours: 20.5, // Should be integer\n      };\n\n      const result = milestoneCreateSchema.safeParse(invalidHoursMilestone);\n      expect(result.success).toBe(false);\n    });\n\n    it('should limit description length', () => {\n      const longDescription = 'a'.repeat(10001); // Exceeds 10000 character limit\n      const invalidMilestone = {\n        ...validMilestone,\n        description: longDescription,\n      };\n\n      const result = milestoneCreateSchema.safeParse(invalidMilestone);\n      expect(result.success).toBe(false);\n    });\n\n    it('should allow bilingual titles and descriptions', () => {\n      const bilingualMilestone = {\n        title: 'Unité 1 : Les nombres',\n        titleEn: 'Unit 1: Numbers',\n        titleFr: 'Unité 1 : Les nombres',\n        subjectId: 1,\n        description: 'Description en français',\n        descriptionEn: 'Description in English',\n        descriptionFr: 'Description en français',\n      };\n\n      const result = milestoneCreateSchema.safeParse(bilingualMilestone);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle expectations array', () => {\n      const milestoneWithExpectations = {\n        ...validMilestone,\n        expectations: ['MAT-1-N-1', 'MAT-1-N-2', 'MAT-1-PS-1'],\n      };\n\n      const result = milestoneCreateSchema.safeParse(milestoneWithExpectations);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.expectations).toEqual(['MAT-1-N-1', 'MAT-1-N-2', 'MAT-1-PS-1']);\n      }\n    });\n  });\n\n  describe('milestoneUpdateSchema', () => {\n    it('should not require subjectId for updates', () => {\n      const updateData = {\n        title: 'Updated Title',\n        startDate: '2024-02-01T00:00:00.000Z',\n        endDate: '2024-02-28T23:59:59.000Z',\n      };\n\n      const result = milestoneUpdateSchema.safeParse(updateData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should still validate date constraints', () => {\n      const invalidUpdate = {\n        title: 'Updated Title',\n        startDate: '2024-02-28T00:00:00.000Z',\n        endDate: '2024-02-01T23:59:59.000Z', // Before start date\n      };\n\n      const result = milestoneUpdateSchema.safeParse(invalidUpdate);\n      expect(result.success).toBe(false);\n    });\n\n    it('should allow partial updates', () => {\n      const partialUpdate = {\n        estHours: 30,\n      };\n\n      const result = milestoneUpdateSchema.safeParse(partialUpdate);\n      if (!result.success) {\n        console.error('Validation failed:', result.error);\n      }\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('activityCreateSchema', () => {\n    it('should validate required fields', () => {\n      const validActivity = {\n        title: 'Introduction to Fractions',\n        milestoneId: 1,\n      };\n\n      const result = activityCreateSchema.safeParse(validActivity);\n      expect(result.success).toBe(true);\n    });\n\n    it('should require title and milestoneId', () => {\n      const invalidActivity = {\n        title: 'Activity without milestone',\n        // Missing milestoneId\n      };\n\n      const result = activityCreateSchema.safeParse(invalidActivity);\n      expect(result.success).toBe(false);\n    });\n\n    it('should handle bilingual titles', () => {\n      const bilingualActivity = {\n        title: 'Les fractions',\n        titleEn: 'Fractions',\n        titleFr: 'Les fractions',\n        milestoneId: 1,\n      };\n\n      const result = activityCreateSchema.safeParse(bilingualActivity);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject empty title', () => {\n      const invalidActivity = {\n        title: '',\n        milestoneId: 1,\n      };\n\n      const result = activityCreateSchema.safeParse(invalidActivity);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('Cross-field validation edge cases', () => {\n    it('should handle timezone-aware date comparisons', () => {\n      const milestone = {\n        title: 'Timezone Test',\n        subjectId: 1,\n        startDate: '2024-01-01T23:59:59.000Z',\n        endDate: '2024-01-02T00:00:00.000Z',\n      };\n\n      const result = milestoneCreateSchema.safeParse(milestone);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle millisecond precision in dates', () => {\n      const milestone = {\n        title: 'Precision Test',\n        subjectId: 1,\n        startDate: '2024-01-01T12:00:00.123Z',\n        endDate: '2024-01-01T12:00:00.124Z',\n      };\n\n      const result = milestoneCreateSchema.safeParse(milestone);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle year boundaries correctly', () => {\n      const milestone = {\n        title: 'Year Boundary Test',\n        subjectId: 1,\n        startDate: '2023-12-31T23:59:59.999Z',\n        endDate: '2024-01-01T00:00:00.000Z',\n      };\n\n      const result = milestoneCreateSchema.safeParse(milestone);\n      expect(result.success).toBe(true);\n    });\n  });\n});\n"],"version":3}