{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/reportGeneratorService.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/reportGeneratorService.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach, jest } from '@jest/globals';\n\n// Mock dependencies before importing the service\njest.unstable_mockModule('../../src/logger', () => ({\n  default: {\n    error: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  },\n}));\n\njest.unstable_mockModule('../../src/services/llmService', () => ({\n  generateContent: jest.fn().mockResolvedValue('Generated content'),\n}));\n\nconst { reportGeneratorService } = await import('../../src/services/reportGeneratorService');\nconst { prisma } = await import('../../src/prisma');\n\ndescribe('Report Generator Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('generateCurriculumCoverageReport', () => {\n    test('should generate coverage report for user', async () => {\n      const userId = 1;\n      const mockExpectations = [\n        {\n          id: 'exp1',\n          code: 'A1.1',\n          description: 'Test expectation 1',\n          strand: 'Number Sense',\n          subject: 'Mathematics',\n          grade: 1,\n        },\n        {\n          id: 'exp2', \n          code: 'A1.2',\n          description: 'Test expectation 2',\n          strand: 'Number Sense',\n          subject: 'Mathematics',\n          grade: 1,\n        },\n      ];\n\n      const mockLongRangePlans = [\n        {\n          id: 'lrp1',\n          title: 'Grade 1 Math',\n          expectations: [{ expectationId: 'exp1' }],\n        },\n      ];\n\n      const mockUnitPlans = [\n        {\n          id: 'unit1',\n          title: 'Numbers Unit',\n          expectations: [{ expectationId: 'exp1' }],\n        },\n      ];\n\n      const mockLessonPlans = [\n        {\n          id: 'lesson1',\n          title: 'Counting Lesson',\n          expectations: [{ expectationId: 'exp1' }],\n        },\n      ];\n\n      (prisma.curriculumExpectation.findMany as jest.Mock).mockResolvedValue(mockExpectations);\n      (prisma.longRangePlan.findMany as jest.Mock).mockResolvedValue(mockLongRangePlans);\n      (prisma.unitPlan.findMany as jest.Mock).mockResolvedValue(mockUnitPlans);\n      (prisma.eTFOLessonPlan.findMany as jest.Mock).mockResolvedValue(mockLessonPlans);\n\n      const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);\n      \n      // Check if mocks were called\n      expect(prisma.curriculumExpectation.findMany).toHaveBeenCalledWith({ where: { userId } });\n\n      expect(report).toBeDefined();\n      expect(report.totalExpectations).toBe(2);\n      expect(report.coveredExpectations).toBe(1);\n      expect(report.coveragePercentage).toBe(50);\n      expect(report.uncoveredExpectations).toHaveLength(1);\n      expect(report.uncoveredExpectations[0].code).toBe('A1.2');\n      expect(report.coverageByStrand['Number Sense']).toEqual({\n        total: 2,\n        covered: 1,\n        percentage: 50,\n      });\n    });\n\n    test('should handle no expectations', async () => {\n      const userId = 1;\n      (prisma.curriculumExpectation.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.longRangePlan.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.unitPlan.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.eTFOLessonPlan.findMany as jest.Mock).mockResolvedValue([]);\n\n      const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);\n\n      expect(report.totalExpectations).toBe(0);\n      expect(report.coveredExpectations).toBe(0);\n      expect(report.coveragePercentage).toBe(0);\n    });\n  });\n\n  describe('generatePlanningProgressReport', () => {\n    test('should generate progress report across all ETFO levels', async () => {\n      const userId = 1;\n\n      const mockLongRangePlans = [\n        {\n          id: 'lrp1',\n          title: 'Complete LRP',\n          goals: 'Test goals',\n          createdAt: new Date(),\n        },\n        {\n          id: 'lrp2',\n          title: 'Incomplete LRP',\n          goals: null,\n          createdAt: new Date(),\n        },\n      ];\n\n      const mockUnitPlans = [\n        {\n          id: 'unit1',\n          title: 'Complete Unit',\n          bigIdeas: 'Test big ideas',\n          createdAt: new Date(),\n        },\n      ];\n\n      const mockLessonPlans = [\n        {\n          id: 'lesson1',\n          title: 'Complete Lesson',\n          learningGoals: 'Test learning goals',\n          date: new Date(),\n        },\n      ];\n\n      const mockDaybookEntries = [\n        {\n          id: 'daybook1',\n          date: new Date(),\n          whatWorked: 'Test reflection',\n        },\n      ];\n\n      (prisma.longRangePlan.findMany as jest.Mock).mockResolvedValue(mockLongRangePlans);\n      (prisma.unitPlan.findMany as jest.Mock).mockResolvedValue(mockUnitPlans);\n      (prisma.eTFOLessonPlan.findMany as jest.Mock).mockResolvedValue(mockLessonPlans);\n      (prisma.daybookEntry.findMany as jest.Mock).mockResolvedValue(mockDaybookEntries);\n\n      const report = await reportGeneratorService.generatePlanningProgressReport(userId);\n\n      expect(report).toBeDefined();\n      expect(report.longRangePlans.total).toBe(2);\n      expect(report.longRangePlans.completed).toBe(1);\n      expect(report.longRangePlans.completionRate).toBe(50);\n\n      expect(report.unitPlans.total).toBe(1);\n      expect(report.unitPlans.completed).toBe(1);\n      expect(report.unitPlans.completionRate).toBe(100);\n\n      expect(report.lessonPlans.total).toBe(1);\n      expect(report.lessonPlans.completed).toBe(1);\n      expect(report.lessonPlans.completionRate).toBe(100);\n\n      expect(report.daybookEntries.total).toBe(1);\n      expect(report.daybookEntries.completed).toBe(1);\n      expect(report.daybookEntries.completionRate).toBe(100);\n    });\n  });\n\n  describe('generateLessonPlanReport', () => {\n    test('should generate detailed lesson plan report', async () => {\n      const lessonId = 'lesson1';\n      const mockLesson = {\n        id: 'lesson1',\n        title: 'Test Lesson',\n        date: new Date('2024-09-15'),\n        duration: 45,\n        mindsOn: 'Test minds-on',\n        action: 'Test action',\n        consolidation: 'Test consolidation',\n        learningGoals: 'Test learning goals',\n        materials: ['material1', 'material2'],\n        isSubFriendly: true,\n        unitPlan: {\n          id: 'unit1',\n          title: 'Test Unit',\n          longRangePlan: {\n            id: 'lrp1',\n            title: 'Test LRP',\n            subject: 'Mathematics',\n            grade: 1,\n          },\n        },\n        expectations: [\n          {\n            expectation: {\n              id: 'exp1',\n              code: 'A1.1',\n              description: 'Test expectation',\n              strand: 'Number Sense',\n            },\n          },\n        ],\n        daybookEntry: {\n          id: 'daybook1',\n          whatWorked: 'Test reflection',\n          overallRating: 4,\n          wouldReuseLesson: true,\n        },\n        resources: [\n          {\n            id: 'res1',\n            title: 'Test Resource',\n            type: 'handout',\n            url: 'https://example.com/resource.pdf',\n          },\n        ],\n      };\n\n      (prisma.eTFOLessonPlan.findUnique as jest.Mock).mockResolvedValue(mockLesson);\n\n      const report = await reportGeneratorService.generateLessonPlanReport(lessonId);\n\n      expect(report).toBeDefined();\n      expect(report.lesson.title).toBe('Test Lesson');\n      expect(report.lesson.duration).toBe(45);\n      expect(report.hierarchy.longRangePlan.title).toBe('Test LRP');\n      expect(report.hierarchy.unitPlan.title).toBe('Test Unit');\n      expect(report.curriculumAlignment).toHaveLength(1);\n      expect(report.curriculumAlignment[0].code).toBe('A1.1');\n      expect(report.reflection?.whatWorked).toBe('Test reflection');\n      expect(report.resources).toHaveLength(1);\n      expect(report.resources[0].title).toBe('Test Resource');\n    });\n\n    test('should handle lesson not found', async () => {\n      const lessonId = 'nonexistent';\n      (prisma.eTFOLessonPlan.findUnique as jest.Mock).mockResolvedValue(null);\n\n      await expect(\n        reportGeneratorService.generateLessonPlanReport(lessonId)\n      ).rejects.toThrow('Lesson plan not found');\n    });\n  });\n\n  describe('generateSubstitutePlanReport', () => {\n    test('should generate substitute-friendly lesson report', async () => {\n      const lessonId = 'lesson1';\n      const mockLesson = {\n        id: 'lesson1',\n        title: 'Sub-Friendly Lesson',\n        date: new Date('2024-09-15'),\n        duration: 45,\n        mindsOn: 'Easy start activity',\n        action: 'Main activity with clear instructions',\n        consolidation: 'Simple wrap-up',\n        materials: ['worksheets', 'pencils'],\n        grouping: 'whole class',\n        isSubFriendly: true,\n        subNotes: 'Materials are in the cupboard',\n        unitPlan: {\n          longRangePlan: {\n            subject: 'Mathematics',\n            grade: 1,\n          },\n        },\n        resources: [\n          {\n            id: 'res1',\n            title: 'Student Worksheet',\n            type: 'handout',\n            content: 'Worksheet content',\n          },\n        ],\n      };\n\n      (prisma.eTFOLessonPlan.findUnique as jest.Mock).mockResolvedValue(mockLesson);\n\n      const report = await reportGeneratorService.generateSubstitutePlanReport(lessonId);\n\n      expect(report).toBeDefined();\n      expect(report.title).toBe('Sub-Friendly Lesson');\n      expect(report.basicInfo.subject).toBe('Mathematics');\n      expect(report.basicInfo.grade).toBe(1);\n      expect(report.basicInfo.duration).toBe(45);\n      expect(report.materials).toEqual(['worksheets', 'pencils']);\n      expect(report.activities.opening).toBe('Easy start activity');\n      expect(report.activities.main).toBe('Main activity with clear instructions');\n      expect(report.activities.closing).toBe('Simple wrap-up');\n      expect(report.specialNotes).toBe('Materials are in the cupboard');\n      expect(report.resources).toHaveLength(1);\n    });\n\n    test('should handle non-sub-friendly lesson', async () => {\n      const lessonId = 'lesson1';\n      const mockLesson = {\n        id: 'lesson1',\n        title: 'Complex Lesson',\n        isSubFriendly: false,\n        unitPlan: {\n          longRangePlan: {\n            subject: 'Mathematics',\n            grade: 1,\n          },\n        },\n      };\n\n      (prisma.eTFOLessonPlan.findUnique as jest.Mock).mockResolvedValue(mockLesson);\n\n      await expect(\n        reportGeneratorService.generateSubstitutePlanReport(lessonId)\n      ).rejects.toThrow('Lesson plan is not marked as substitute-friendly');\n    });\n  });\n\n  describe('generateUnitOverviewReport', () => {\n    test('should generate comprehensive unit overview', async () => {\n      const unitId = 'unit1';\n      const mockUnit = {\n        id: 'unit1',\n        title: 'Test Unit',\n        description: 'Test description',\n        bigIdeas: 'Test big ideas',\n        startDate: new Date('2024-09-01'),\n        endDate: new Date('2024-09-30'),\n        estimatedHours: 20,\n        longRangePlan: {\n          id: 'lrp1',\n          title: 'Test LRP',\n          subject: 'Mathematics',\n          grade: 1,\n        },\n        expectations: [\n          {\n            expectation: {\n              id: 'exp1',\n              code: 'A1.1',\n              description: 'Test expectation',\n              strand: 'Number Sense',\n            },\n          },\n        ],\n        lessonPlans: [\n          {\n            id: 'lesson1',\n            title: 'Lesson 1',\n            date: new Date('2024-09-15'),\n            duration: 45,\n          },\n          {\n            id: 'lesson2',\n            title: 'Lesson 2',\n            date: new Date('2024-09-20'),\n            duration: 30,\n          },\n        ],\n        resources: [\n          {\n            id: 'res1',\n            title: 'Unit Resource',\n            type: 'document',\n          },\n        ],\n      };\n\n      (prisma.unitPlan.findUnique as jest.Mock).mockResolvedValue(mockUnit);\n\n      const report = await reportGeneratorService.generateUnitOverviewReport(unitId);\n\n      expect(report).toBeDefined();\n      expect(report.unit.title).toBe('Test Unit');\n      expect(report.unit.estimatedHours).toBe(20);\n      expect(report.hierarchy.longRangePlan.title).toBe('Test LRP');\n      expect(report.curriculumAlignment).toHaveLength(1);\n      expect(report.lessonSummary.totalLessons).toBe(2);\n      expect(report.lessonSummary.totalDuration).toBe(75);\n      expect(report.lessonSummary.lessons).toHaveLength(2);\n      expect(report.resources).toHaveLength(1);\n    });\n  });\n\n  describe('error handling', () => {\n    test('should handle database errors gracefully', async () => {\n      const userId = 1;\n      (prisma.curriculumExpectation.findMany as jest.Mock).mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      await expect(\n        reportGeneratorService.generateCurriculumCoverageReport(userId)\n      ).rejects.toThrow('Database connection failed');\n    });\n\n    test('should handle invalid user IDs', async () => {\n      const userId = -1;\n      (prisma.curriculumExpectation.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.longRangePlan.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.unitPlan.findMany as jest.Mock).mockResolvedValue([]);\n      (prisma.eTFOLessonPlan.findMany as jest.Mock).mockResolvedValue([]);\n\n      const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);\n\n      expect(report.totalExpectations).toBe(0);\n    });\n  });\n});"],"version":3}