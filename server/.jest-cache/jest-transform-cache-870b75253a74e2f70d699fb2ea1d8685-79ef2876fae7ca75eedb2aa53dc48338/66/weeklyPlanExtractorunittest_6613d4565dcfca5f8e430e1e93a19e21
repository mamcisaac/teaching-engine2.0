96d5486dddf6e4e6fd892c5b2411c975
import { jest, describe, it, beforeEach, expect } from '@jest/globals';
jest.mock('../../src/services/subPlanService', () => ({
    buildSubPlanData: mockBuildSubPlanData,
}));
// Mock all the helper functions that weeklyPlanExtractor uses
jest.mock('../../src/services/weeklyPlanExtractor', () => {
    const actual = jest.requireActual('../../src/services/weeklyPlanExtractor');
    return {
        ...actual,
        extractWeeklyOverview: jest.fn().mockResolvedValue({
            subjects: [],
            unitPlans: [],
            assessments: [],
            specialEvents: []
        }),
        generateContinuityNotes: jest.fn().mockReturnValue([]),
        generateEmergencyBackupPlans: jest.fn().mockResolvedValue([])
    };
});
import { extractWeeklyPlan } from '../../src/services/weeklyPlanExtractor';
// Mock the subPlanService
const mockBuildSubPlanData = jest.fn();
describe('WeeklyPlanExtractor', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('extractWeeklyPlan', () => {
        it('should extract weekly plan data for multiple days', async () => {
            // Mock data
            const mockSubject = {
                id: 1,
                name: 'Mathematics',
                nameEn: 'Mathematics',
                nameFr: 'MathÃ©matiques',
            };
            const mockMilestone = {
                id: 1,
                title: 'Number Operations',
                targetDate: new Date('2024-01-31'),
                subject: mockSubject,
                activities: [],
            };
            const mockActivity = {
                id: 1,
                title: 'Addition Practice',
                milestone: { subject: mockSubject },
                outcomes: [],
            };
            const mockDailyPlan = {
                id: 1,
                date: new Date('2024-01-15'),
                items: [
                    {
                        id: 1,
                        startMin: 540, // 9:00 AM
                        activity: mockActivity,
                        slot: { subject: mockSubject },
                    },
                ],
            };
            // Setup mocks
            const mockSubPlanData = {
                date: '2024-01-15',
                schedule: [
                    { time: '09:00', activity: 'Mathematics - Addition Practice', note: 'Use manipulatives' }
                ],
                pullOuts: [],
                contacts: { 'Principal': 'Ext. 100', 'Office': 'Ext. 101' },
                outcomes: [
                    { code: 'M1.1', description: 'Add numbers to 20', subject: 'Mathematics' }
                ]
            };
            mockBuildSubPlanData.mockResolvedValue(mockSubPlanData);
            const result = await extractWeeklyPlan('2024-01-15', 3, { userId: 1 });
            expect(result).toHaveProperty('startDate', '2024-01-15');
            expect(result).toHaveProperty('days');
            expect(result.days).toHaveLength(3);
            expect(result).toHaveProperty('weeklyOverview');
            expect(result.weeklyOverview).toHaveProperty('subjects');
            expect(result.weeklyOverview).toHaveProperty('milestones');
            expect(result).toHaveProperty('continuityNotes');
            expect(result).toHaveProperty('emergencyBackupPlans');
        });
        it('should generate continuity notes between days', async () => {
            // Setup mock data for consecutive days with related activities
            const mockSubject = { id: 1, name: 'Mathematics' };
            const mockPlans = [
                {
                    id: 1,
                    date: new Date('2024-01-15'),
                    items: [
                        {
                            id: 1,
                            startMin: 540,
                            activity: {
                                id: 1,
                                title: 'Introduction to Fractions',
                                milestone: { subject: mockSubject },
                            },
                            slot: { subject: mockSubject },
                        },
                    ],
                },
                {
                    id: 2,
                    date: new Date('2024-01-16'),
                    items: [
                        {
                            id: 2,
                            startMin: 540,
                            activity: {
                                id: 2,
                                title: 'Fraction Operations',
                                milestone: { subject: mockSubject },
                            },
                            slot: { subject: mockSubject },
                        },
                    ],
                },
            ];
            // Mock different data for each day to test continuity
            mockBuildSubPlanData
                .mockResolvedValueOnce({
                date: '2024-01-15',
                schedule: [{ time: '09:00', activity: 'Addition Practice' }],
                pullOuts: [],
                contacts: {},
            })
                .mockResolvedValueOnce({
                date: '2024-01-16',
                schedule: [{ time: '09:00', activity: 'Fraction Operations' }],
                pullOuts: [],
                contacts: {},
            });
            const result = await extractWeeklyPlan('2024-01-15', 2, { userId: 1 });
            expect(result.continuityNotes).toHaveLength(2);
            const day2Notes = result.continuityNotes[1];
            expect(day2Notes.connections.length).toBeGreaterThan(0);
            expect(day2Notes.connections[0]).toContain('Mathematics');
            expect(day2Notes.connections[0]).toContain('Introduction to Fractions');
            expect(day2Notes.connections[0]).toContain('Fraction Operations');
        });
        it('should generate emergency backup plans by subject', async () => {
            const mockSubjects = [
                {
                    id: 1,
                    name: 'Mathematics',
                    activities: [
                        { id: 1, title: 'Math Review Worksheets', isFallback: true },
                        { id: 2, title: 'Number Games', isFallback: true },
                    ],
                },
                {
                    id: 2,
                    name: 'Language Arts',
                    activities: [{ id: 3, title: 'Silent Reading', isFallback: true }],
                },
            ];
            // Mock empty day data
            mockBuildSubPlanData.mockResolvedValue({
                date: '2024-01-15',
                schedule: [],
                pullOuts: [],
                contacts: {},
            });
            const result = await extractWeeklyPlan('2024-01-15', 1, { userId: 1 });
            expect(result.emergencyBackupPlans).toHaveLength(2);
            const mathPlan = result.emergencyBackupPlans.find((p) => p.subject === 'Mathematics');
            expect(mathPlan).toBeDefined();
            expect(mathPlan?.activities).toContain('Math Review Worksheets');
            expect(mathPlan?.activities).toContain('Number Games');
            expect(mathPlan?.materials).toContain('Math manipulatives');
            const langPlan = result.emergencyBackupPlans.find((p) => p.subject === 'Language Arts');
            expect(langPlan).toBeDefined();
            expect(langPlan?.activities).toContain('Silent Reading');
            expect(langPlan?.materials).toContain('Reading books');
        });
        it('should calculate subject hours and topics correctly', async () => {
            const mockSubject = { id: 1, name: 'Mathematics' };
            const mockDailyPlan = {
                id: 1,
                date: new Date('2024-01-15'),
                items: [
                    {
                        id: 1,
                        startMin: 540, // 9:00 AM - assuming 15-minute slots
                        activity: {
                            id: 1,
                            title: 'Addition',
                            milestone: { subject: mockSubject },
                            outcomes: [],
                        },
                        slot: { subject: mockSubject },
                    },
                    {
                        id: 2,
                        startMin: 555, // 9:15 AM
                        activity: {
                            id: 2,
                            title: 'Subtraction',
                            milestone: { subject: mockSubject },
                            outcomes: [],
                        },
                        slot: { subject: mockSubject },
                    },
                    {
                        id: 3,
                        startMin: 570, // 9:30 AM
                        activity: {
                            id: 3,
                            title: 'Word Problems',
                            milestone: { subject: mockSubject },
                            outcomes: [],
                        },
                        slot: { subject: mockSubject },
                    },
                ],
            };
            // Mock calculation data for testing subject hours
            mockBuildSubPlanData.mockResolvedValue({
                date: '2024-01-15',
                schedule: [
                    { time: '09:00', activity: 'Mathematics - Addition' },
                    { time: '09:15', activity: 'Mathematics - Subtraction' },
                    { time: '09:30', activity: 'Mathematics - Word Problems' }
                ],
                pullOuts: [],
                contacts: {},
                outcomes: [
                    { code: 'M1.1', description: 'Add and subtract', subject: 'Mathematics' }
                ]
            });
            const result = await extractWeeklyPlan('2024-01-15', 1, { userId: 1 });
            const mathSubject = result.weeklyOverview.subjects.find((s) => s.name === 'Mathematics');
            expect(mathSubject).toBeDefined();
            expect(mathSubject?.totalHours).toBe(0.75); // 3 slots Ã 0.25 hours each
            expect(mathSubject?.keyTopics).toContain('Addition');
            expect(mathSubject?.keyTopics).toContain('Subtraction');
            expect(mathSubject?.keyTopics).toContain('Word Problems');
        });
        it('should handle empty days gracefully', async () => {
            // Mock empty day
            mockBuildSubPlanData.mockResolvedValue({
                date: '2024-01-15',
                schedule: [],
                pullOuts: [],
                contacts: {},
            });
            const result = await extractWeeklyPlan('2024-01-15', 3, { userId: 1 });
            expect(result.startDate).toBe('2024-01-15');
            expect(result.days).toHaveLength(3);
            expect(result.weeklyOverview.subjects).toHaveLength(0);
            expect(result.weeklyOverview.milestones).toHaveLength(0);
            expect(result.continuityNotes).toHaveLength(3);
            expect(result.emergencyBackupPlans).toHaveLength(0);
        });
        it('should respect user options for data inclusion', async () => {
            const mockDailyPlan = {
                id: 1,
                date: new Date('2024-01-15'),
                items: [],
            };
            // Mock for user options test
            mockBuildSubPlanData.mockResolvedValue({
                date: '2024-01-15',
                schedule: [{ time: '09:00', activity: 'Test Activity' }],
                pullOuts: [],
                contacts: {},
                goals: [{ id: 1, text: 'Test goal', status: 'active' }],
                routines: [{ id: 1, title: 'Morning routine', description: 'Test', category: 'morning' }]
            });
            // Test with includeGoals: false
            const result = await extractWeeklyPlan('2024-01-15', 1, {
                userId: 1,
                includeGoals: false,
                includeRoutines: false,
                includePlans: false,
            });
            expect(result.days[0].goals).toBeUndefined();
            expect(result.days[0].routines).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,