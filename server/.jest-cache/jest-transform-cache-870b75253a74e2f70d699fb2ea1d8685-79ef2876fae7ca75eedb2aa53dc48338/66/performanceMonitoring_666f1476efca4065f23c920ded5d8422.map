{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/performanceMonitoring.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/performanceMonitoring.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\ninterface PerformanceMetrics {\n  totalRequests: number;\n  averageResponseTime: number;\n  slowRequests: number;\n  errorRate: number;\n  requestsPerMinute: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  lastReset: Date;\n}\n\ninterface RequestTiming {\n  method: string;\n  route: string;\n  duration: number;\n  statusCode: number;\n  timestamp: Date;\n  memoryBefore: number;\n  memoryAfter: number;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetrics;\n  private requestTimings: RequestTiming[] = [];\n  private readonly maxTimings = 1000; // Keep last 1000 requests\n  private readonly slowRequestThreshold = 1000; // 1 second\n\n  constructor() {\n    this.metrics = {\n      totalRequests: 0,\n      averageResponseTime: 0,\n      slowRequests: 0,\n      errorRate: 0,\n      requestsPerMinute: 0,\n      memoryUsage: process.memoryUsage(),\n      lastReset: new Date()\n    };\n\n    // Update metrics every minute\n    setInterval(() => this.updateMetrics(), 60000);\n  }\n\n  middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const startTime = process.hrtime.bigint();\n      const memoryBefore = process.memoryUsage().heapUsed;\n\n      // Override res.end to capture response time\n      const originalEnd = res.end;\n      res.end = function(this: Response, ...args: unknown[]): Response {\n        const endTime = process.hrtime.bigint();\n        const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n        const memoryAfter = process.memoryUsage().heapUsed;\n\n        // Record the request timing\n        const timing: RequestTiming = {\n          method: req.method,\n          route: req.route?.path || req.path,\n          duration,\n          statusCode: res.statusCode,\n          timestamp: new Date(),\n          memoryBefore,\n          memoryAfter\n        };\n\n        performanceMonitor.recordRequest(timing);\n\n        // Log slow requests\n        if (duration > performanceMonitor.slowRequestThreshold) {\n          logger.warn({\n            method: req.method,\n            route: timing.route,\n            duration: `${duration.toFixed(2)}ms`,\n            statusCode: res.statusCode,\n            memoryDelta: `${((memoryAfter - memoryBefore) / 1024 / 1024).toFixed(2)}MB`\n          }, 'Slow request detected');\n        }\n\n        // Call original end method and return the response\n        return originalEnd.apply(this, args) as Response;\n      };\n\n      next();\n    };\n  }\n\n  recordRequest(timing: RequestTiming): void {\n    this.requestTimings.push(timing);\n    \n    // Keep only the most recent timings\n    if (this.requestTimings.length > this.maxTimings) {\n      this.requestTimings = this.requestTimings.slice(-this.maxTimings);\n    }\n\n    this.metrics.totalRequests++;\n    \n    // Update average response time (rolling average)\n    const totalTime = this.metrics.averageResponseTime * (this.metrics.totalRequests - 1);\n    this.metrics.averageResponseTime = (totalTime + timing.duration) / this.metrics.totalRequests;\n\n    // Count slow requests\n    if (timing.duration > this.slowRequestThreshold) {\n      this.metrics.slowRequests++;\n    }\n\n    // Update error rate\n    if (timing.statusCode >= 400) {\n      const totalErrors = this.requestTimings.filter(t => t.statusCode >= 400).length;\n      this.metrics.errorRate = (totalErrors / this.requestTimings.length) * 100;\n    }\n  }\n\n  private updateMetrics(): void {\n    const now = new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 60000);\n    \n    // Calculate requests per minute\n    const recentRequests = this.requestTimings.filter(t => t.timestamp > oneMinuteAgo);\n    this.metrics.requestsPerMinute = recentRequests.length;\n    \n    // Update memory usage\n    this.metrics.memoryUsage = process.memoryUsage();\n\n    // Log performance summary every 5 minutes\n    const minutesSinceReset = (now.getTime() - this.metrics.lastReset.getTime()) / (1000 * 60);\n    if (minutesSinceReset >= 5) {\n      this.logPerformanceSummary();\n      this.resetCounters();\n    }\n  }\n\n  private logPerformanceSummary(): void {\n    const summary = this.getPerformanceSummary();\n    \n    logger.info({\n      performance: summary,\n      memoryUsage: {\n        heapUsed: `${(this.metrics.memoryUsage.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n        heapTotal: `${(this.metrics.memoryUsage.heapTotal / 1024 / 1024).toFixed(2)}MB`,\n        external: `${(this.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB`,\n        rss: `${(this.metrics.memoryUsage.rss / 1024 / 1024).toFixed(2)}MB`\n      }\n    }, 'Performance summary');\n\n    // Warn about performance issues\n    if (summary.averageResponseTime > 500) {\n      logger.warn('High average response time detected');\n    }\n    \n    if (summary.errorRate > 5) {\n      logger.warn('High error rate detected');\n    }\n\n    if (summary.slowRequestPercentage > 10) {\n      logger.warn('High percentage of slow requests detected');\n    }\n  }\n\n  private resetCounters(): void {\n    this.metrics.lastReset = new Date();\n    // Keep running totals but reset some metrics\n    this.metrics.slowRequests = 0;\n  }\n\n  getPerformanceSummary() {\n    const slowRequestPercentage = this.metrics.totalRequests > 0 \n      ? (this.metrics.slowRequests / this.metrics.totalRequests) * 100 \n      : 0;\n\n    const recentTimings = this.requestTimings.slice(-100); // Last 100 requests\n    const routeStats = this.getRouteStatistics(recentTimings);\n\n    return {\n      totalRequests: this.metrics.totalRequests,\n      averageResponseTime: Math.round(this.metrics.averageResponseTime * 100) / 100,\n      requestsPerMinute: this.metrics.requestsPerMinute,\n      errorRate: Math.round(this.metrics.errorRate * 100) / 100,\n      slowRequestPercentage: Math.round(slowRequestPercentage * 100) / 100,\n      slowRequestThreshold: this.slowRequestThreshold,\n      uptimeMinutes: Math.round((Date.now() - this.metrics.lastReset.getTime()) / (1000 * 60)),\n      routeStats\n    };\n  }\n\n  private getRouteStatistics(timings: RequestTiming[]) {\n    const routeMap = new Map<string, { count: number; totalTime: number; errors: number }>();\n    \n    for (const timing of timings) {\n      const key = `${timing.method} ${timing.route}`;\n      const stats = routeMap.get(key) || { count: 0, totalTime: 0, errors: 0 };\n      \n      stats.count++;\n      stats.totalTime += timing.duration;\n      if (timing.statusCode >= 400) {\n        stats.errors++;\n      }\n      \n      routeMap.set(key, stats);\n    }\n\n    const routeStats: Array<{\n      route: string;\n      requestCount: number;\n      averageResponseTime: number;\n      errorRate: number;\n    }> = [];\n    for (const [route, stats] of routeMap.entries()) {\n      routeStats.push({\n        route,\n        requestCount: stats.count,\n        averageResponseTime: Math.round((stats.totalTime / stats.count) * 100) / 100,\n        errorRate: Math.round((stats.errors / stats.count) * 100 * 100) / 100\n      });\n    }\n\n    // Sort by request count descending\n    return routeStats.sort((a, b) => b.requestCount - a.requestCount).slice(0, 10);\n  }\n\n  getSlowestEndpoints(limit: number = 10) {\n    const routeMap = new Map<string, { times: number[]; errors: number }>();\n    \n    for (const timing of this.requestTimings) {\n      const key = `${timing.method} ${timing.route}`;\n      const stats = routeMap.get(key) || { times: [], errors: 0 };\n      \n      stats.times.push(timing.duration);\n      if (timing.statusCode >= 400) {\n        stats.errors++;\n      }\n      \n      routeMap.set(key, stats);\n    }\n\n    const endpointStats: Array<{\n      route: string;\n      requestCount: number;\n      averageTime: number;\n      maxTime: number;\n      p95Time: number;\n      errorCount: number;\n    }> = [];\n    for (const [route, stats] of routeMap.entries()) {\n      const avgTime = stats.times.reduce((a, b) => a + b, 0) / stats.times.length;\n      const maxTime = Math.max(...stats.times);\n      const p95Time = this.percentile(stats.times, 0.95);\n      \n      endpointStats.push({\n        route,\n        requestCount: stats.times.length,\n        averageTime: Math.round(avgTime * 100) / 100,\n        maxTime: Math.round(maxTime * 100) / 100,\n        p95Time: Math.round(p95Time * 100) / 100,\n        errorCount: stats.errors\n      });\n    }\n\n    return endpointStats\n      .sort((a, b) => b.averageTime - a.averageTime)\n      .slice(0, limit);\n  }\n\n  private percentile(arr: number[], p: number): number {\n    const sorted = [...arr].sort((a, b) => a - b);\n    const index = Math.ceil(sorted.length * p) - 1;\n    return sorted[index] || 0;\n  }\n\n  getHealthStatus() {\n    const summary = this.getPerformanceSummary();\n    const memUsageMB = this.metrics.memoryUsage.heapUsed / 1024 / 1024;\n    \n    const isHealthy = \n      summary.averageResponseTime < 1000 &&\n      summary.errorRate < 10 &&\n      summary.slowRequestPercentage < 20 &&\n      memUsageMB < 512; // 512MB threshold\n\n    return {\n      healthy: isHealthy,\n      details: {\n        responseTime: summary.averageResponseTime < 1000 ? 'good' : 'slow',\n        errorRate: summary.errorRate < 5 ? 'good' : summary.errorRate < 10 ? 'warning' : 'critical',\n        memoryUsage: memUsageMB < 256 ? 'good' : memUsageMB < 512 ? 'warning' : 'critical',\n        performance: summary\n      }\n    };\n  }\n}\n\n// Global instance\nconst performanceMonitor = new PerformanceMonitor();\n\nexport { performanceMonitor };\nexport default performanceMonitor.middleware();"],"version":3}