{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n// import { embeddingService } from './embeddingService'; // Currently unused\nimport BaseService from './base/BaseService';\nimport { ImportStatus } from '@teaching-engine/database';\n// Import pdf-parse dynamically to avoid loading test files during module initialization\nlet pdf: any;\nimport mammoth from 'mammoth';\nimport OpenAI from 'openai';\n\nexport interface ImportProgress {\n  importId: string;\n  status: ImportStatus;\n  totalOutcomes: number;\n  processedOutcomes: number;\n  errors: string[];\n}\n\nexport class CurriculumImportService extends BaseService {\n  private openai: OpenAI | null = null;\n\n  constructor() {\n    super('CurriculumImportService');\n    // Only initialize OpenAI if we have an API key\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (apiKey) {\n      this.openai = new OpenAI({ apiKey });\n    } else {\n      this.logger.warn('OpenAI API key not found - AI features will be disabled');\n    }\n  }\n\n  /**\n   * Confirm import and create curriculum expectations\n   */\n  async confirmImport(importId: string): Promise<{ created: number }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      if (importRecord.status !== ImportStatus.READY_FOR_REVIEW) {\n        throw new Error('Import is not ready for confirmation');\n      }\n\n      // Get parsed subjects from metadata\n      const metadata = importRecord.metadata as any;\n      const subjects = metadata?.parsedSubjects || [];\n\n      let createdCount = 0;\n\n      // Create curriculum expectations\n      for (const subject of subjects) {\n        for (const expectation of subject.expectations) {\n          try {\n            // Check if expectation already exists\n            const existing = await this.prisma.curriculumExpectation.findUnique({\n              where: { code: expectation.code },\n            });\n\n            if (!existing) {\n              await this.prisma.curriculumExpectation.create({\n                data: {\n                  code: expectation.code,\n                  description: expectation.description,\n                  descriptionFr: expectation.descriptionFr || null,\n                  strand: expectation.strand,\n                  substrand: expectation.substrand || null,\n                  grade: expectation.grade,\n                  subject: expectation.subject,\n                },\n              });\n              createdCount++;\n            }\n          } catch (error) {\n            this.logger.warn(\n              { error, code: expectation.code },\n              'Failed to create expectation, skipping',\n            );\n          }\n        }\n      }\n\n      // Update import status\n      await this.updateImportStatus(importId, ImportStatus.COMPLETED);\n      await this.setCompletionTime(importId);\n\n      this.logger.info(\n        { importId, created: createdCount },\n        'Import confirmed and expectations created',\n      );\n\n      return { created: createdCount };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to confirm import');\n      throw error;\n    }\n  }\n\n  /**\n   * Start a new curriculum import session\n   */\n  async startImport(\n    userId: number,\n    grade: number,\n    subject: string,\n    sourceFormat: 'csv' | 'pdf' | 'docx' | 'manual',\n    sourceFile?: string,\n    metadata?: Record<string, unknown>,\n  ): Promise<string> {\n    try {\n      const curriculumImport = await this.prisma.curriculumImport.create({\n        data: {\n          userId,\n          grade,\n          subject,\n          sourceFormat,\n          sourceFile,\n          status: ImportStatus.UPLOADING,\n          metadata: (metadata || {}) as any,\n        },\n      });\n\n      this.logger.info(\n        { importId: curriculumImport.id, userId, grade, subject, sourceFormat },\n        'Started curriculum import session',\n      );\n\n      return curriculumImport.id;\n    } catch (error) {\n      this.logger.error({ error, userId, grade, subject }, 'Failed to start curriculum import');\n      throw new Error('Failed to start import session');\n    }\n  }\n\n  /**\n   * Parse CSV content into curriculum expectations\n   */\n  parseCSV(csvContent: string): Array<{\n    code: string;\n    description: string;\n    subject: string;\n    grade: number;\n    strand?: string;\n    substrand?: string;\n  }> {\n    try {\n      const lines = csvContent.split('\\n');\n      // Parse header line handling quoted values\n      const headerLine = lines[0].toLowerCase();\n      const headers: string[] = [];\n      let current = '';\n      let inQuotes = false;\n\n      for (let j = 0; j < headerLine.length; j++) {\n        const char = headerLine[j];\n\n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === ',' && !inQuotes) {\n          headers.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n          current = '';\n        } else {\n          current += char;\n        }\n      }\n      headers.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n\n      const codeIndex = headers.indexOf('code');\n      const descriptionIndex = headers.indexOf('description');\n      const subjectIndex = headers.indexOf('subject');\n      const gradeIndex = headers.indexOf('grade');\n      const domainIndex = headers.indexOf('domain');\n\n      if (codeIndex === -1 || descriptionIndex === -1) {\n        throw new Error('CSV must contain \"code\" and \"description\" columns');\n      }\n\n      const expectations: Array<{\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        substrand?: string;\n      }> = [];\n\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        // Parse CSV line handling quoted values properly\n        const columns: string[] = [];\n        let current = '';\n        let inQuotes = false;\n\n        for (let j = 0; j < line.length; j++) {\n          const char = line[j];\n\n          if (char === '\"') {\n            inQuotes = !inQuotes;\n          } else if (char === ',' && !inQuotes) {\n            columns.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n            current = '';\n          } else {\n            current += char;\n          }\n        }\n\n        // Don't forget the last column\n        columns.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n\n        if (columns.length < Math.max(codeIndex, descriptionIndex) + 1) {\n          this.logger.warn({ lineNumber: i + 1, line }, 'Skipping invalid CSV line');\n          continue;\n        }\n\n        const expectation = {\n          code: columns[codeIndex],\n          description: columns[descriptionIndex],\n          subject: subjectIndex >= 0 ? columns[subjectIndex] : 'Unknown',\n          grade: gradeIndex >= 0 ? parseInt(columns[gradeIndex]) || 0 : 0,\n          strand: domainIndex >= 0 ? columns[domainIndex] : 'General',\n        };\n\n        expectations.push(expectation);\n      }\n\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse CSV content');\n      throw new Error(`CSV parsing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Extract curriculum expectations from PDF using pdf-parse and AI\n   */\n  async parsePDF(fileBuffer: Buffer): Promise<\n    Array<{\n      code: string;\n      description: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      substrand?: string;\n    }>\n  > {\n    try {\n      this.logger.info('Starting PDF parsing');\n\n      // Lazy load pdf-parse to avoid initialization issues\n      if (!pdf) {\n        pdf = (await import('pdf-parse')).default;\n      }\n\n      // Extract text from PDF\n      const pdfData = await pdf(fileBuffer);\n      const text = pdfData.text;\n\n      if (!text || text.length < 100) {\n        throw new Error('PDF appears to be empty or too short');\n      }\n\n      this.logger.info(`Extracted ${text.length} characters from PDF`);\n\n      // Use AI to parse the curriculum text\n      const expectations = await this.parseTextWithAI(text);\n\n      this.logger.info(`Parsed ${expectations.length} expectations from PDF`);\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse PDF');\n      throw new Error(\n        `PDF parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Extract curriculum expectations from DOCX using mammoth and AI\n   */\n  async parseDOCX(fileBuffer: Buffer): Promise<\n    Array<{\n      code: string;\n      description: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      substrand?: string;\n    }>\n  > {\n    try {\n      this.logger.info('Starting DOCX parsing');\n\n      // Extract text from DOCX\n      const result = await mammoth.extractRawText({ buffer: fileBuffer });\n      const text = result.value;\n\n      if (!text || text.length < 100) {\n        throw new Error('DOCX appears to be empty or too short');\n      }\n\n      this.logger.info(`Extracted ${text.length} characters from DOCX`);\n\n      // Use AI to parse the curriculum text\n      const expectations = await this.parseTextWithAI(text);\n\n      this.logger.info(`Parsed ${expectations.length} expectations from DOCX`);\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse DOCX');\n      throw new Error(\n        `DOCX parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Get import progress\n   */\n  async getImportProgress(importId: string): Promise<ImportProgress | null> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) return null;\n\n      return {\n        importId,\n        status: importRecord.status,\n        totalOutcomes: importRecord.totalOutcomes,\n        processedOutcomes: importRecord.processedOutcomes,\n        errors: (importRecord.errorLog as string[]) || [],\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to get import progress');\n      return null;\n    }\n  }\n\n  /**\n   * Cancel an import session\n   */\n  async cancelImport(importId: string): Promise<boolean> {\n    try {\n      await this.updateImportStatus(importId, ImportStatus.CANCELLED);\n      this.logger.info({ importId }, 'Cancelled curriculum import');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to cancel import');\n      return false;\n    }\n  }\n\n  /**\n   * Get import history for a user\n   */\n  async getImportHistory(userId: number, limit: number = 20): Promise<unknown[]> {\n    try {\n      const imports = await this.prisma.curriculumImport.findMany({\n        where: { userId },\n        orderBy: { createdAt: 'desc' },\n        take: limit,\n        include: {\n          clusters: {\n            select: {\n              id: true,\n              clusterName: true,\n              clusterType: true,\n            },\n          },\n          _count: {\n            select: {\n              curriculumExpectations: true,\n            },\n          },\n        },\n      });\n\n      return imports;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get import history');\n      return [];\n    }\n  }\n\n  // Private helper methods\n\n  private async updateImportStatus(\n    importId: string,\n    status: ImportStatus,\n    totalOutcomes?: number,\n  ): Promise<void> {\n    const updateData: any = { status };\n    if (totalOutcomes !== undefined) {\n      updateData.totalOutcomes = totalOutcomes;\n    }\n\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: updateData,\n    });\n  }\n\n  private async updateProgress(importId: string, processedOutcomes: number): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { processedOutcomes },\n    });\n  }\n\n  private async setCompletionTime(importId: string): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { completedAt: new Date() },\n    });\n  }\n\n  private async logErrors(importId: string, errors: string[]): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { errorLog: errors },\n    });\n  }\n\n  /**\n   * Parse curriculum text using AI to extract expectations\n   */\n  private async parseTextWithAI(text: string): Promise<\n    Array<{\n      code: string;\n      description: string;\n      descriptionFr?: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      strandFr?: string;\n      substrand?: string;\n      substrandFr?: string;\n    }>\n  > {\n    try {\n      // Detect if document is in French or bilingual\n      const isFrench = this.detectLanguage(text);\n      const isBilingual = this.detectBilingual(text);\n      \n      // Split text into chunks if it's too long (GPT-4 has token limits)\n      const chunks = this.chunkText(text, 3000); // ~750 words per chunk\n      const allExpectations: Array<{\n        code: string;\n        description: string;\n        descriptionFr?: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        strandFr?: string;\n        substrand?: string;\n        substrandFr?: string;\n      }> = [];\n\n      for (let i = 0; i < chunks.length; i++) {\n        this.logger.info(`Processing chunk ${i + 1} of ${chunks.length}`);\n\n        const languageInfo = isFrench ? 'French' : isBilingual ? 'bilingual (English and French)' : 'English';\n        const prompt = `You are an expert in curriculum design for elementary education. Extract curriculum expectations from the following ${languageInfo} text.\n\nPlease extract and return in JSON format:\n- Subject name\n- Grade level\n- For each expectation:\n  - Code (e.g., \"A1.1\", \"B2.3\")\n  - Type (\"overall\" or \"specific\")\n  - Description (the full text of the expectation)\n  - Strand (major category like \"Oral Communication\", \"Reading\", etc.)\n  - Domain (if applicable)\n\nReturn ONLY a JSON object with this structure:\n{\n  \"subject\": \"Subject Name\",\n  \"grade\": 1,\n  \"expectations\": [\n    {\n      \"code\": \"A1.1\",\n      \"type\": \"overall\",\n      \"description\": \"Full expectation text\",\n      \"strand\": \"Strand Name\",\n      \"domain\": \"Domain Name (optional)\"\n    }\n  ]\n}\n\nOnly include data you are confident about. Do not invent or hallucinate expectations.\n\nText to parse:\n\"\"\"\n${chunks[i]}\n\"\"\"`;\n\n        if (!this.openai) {\n          throw new Error('OpenAI API key not configured');\n        }\n\n        const response = await this.openai.chat.completions.create({\n          model: 'gpt-4',\n          messages: [\n            {\n              role: 'system',\n              content:\n                'You are an expert curriculum analyst. Extract curriculum expectations accurately.',\n            },\n            { role: 'user', content: prompt },\n          ],\n          temperature: 0.1, // Low temperature for accuracy\n          max_tokens: 2000,\n        });\n\n        const content = response.choices[0]?.message?.content;\n        if (!content) {\n          this.logger.warn(`No content returned for chunk ${i + 1}`);\n          continue;\n        }\n\n        try {\n          const parsed = JSON.parse(content);\n          if (parsed.expectations && Array.isArray(parsed.expectations)) {\n            const expectations = parsed.expectations.map((exp: any) => ({\n              code: exp.code || `AUTO_${i}_${allExpectations.length}`,\n              description: exp.description || '',\n              descriptionFr: exp.descriptionFr,\n              subject: parsed.subject || 'Unknown',\n              grade: parsed.grade || 1,\n              strand: exp.strand || exp.domain || 'General',\n              strandFr: exp.strandFr,\n              substrand: exp.substrand,\n              substrandFr: exp.substrandFr,\n            }));\n\n            allExpectations.push(...expectations);\n          }\n        } catch (parseError) {\n          this.logger.error({ parseError, chunk: i }, 'Failed to parse AI response');\n        }\n      }\n\n      return allExpectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse text with AI');\n      throw new Error('AI parsing failed');\n    }\n  }\n\n  /**\n   * Detect if text is primarily in French\n   */\n  private detectLanguage(text: string): boolean {\n    const frenchIndicators = [\n      'attentes', 'domaine', 'année', 'élève', 'apprentissage',\n      'français', 'mathématiques', 'sciences', 'études sociales',\n      'contenus d\\'apprentissage', 'pistes de réflexion'\n    ];\n    \n    const textLower = text.toLowerCase();\n    const frenchCount = frenchIndicators.filter(indicator => \n      textLower.includes(indicator)\n    ).length;\n    \n    return frenchCount >= 3;\n  }\n  \n  /**\n   * Detect if text contains both English and French\n   */\n  private detectBilingual(text: string): boolean {\n    const englishIndicators = ['expectations', 'strand', 'grade', 'student', 'learning'];\n    const frenchIndicators = ['attentes', 'domaine', 'année', 'élève', 'apprentissage'];\n    \n    const textLower = text.toLowerCase();\n    const hasEnglish = englishIndicators.some(indicator => textLower.includes(indicator));\n    const hasFrench = frenchIndicators.some(indicator => textLower.includes(indicator));\n    \n    return hasEnglish && hasFrench;\n  }\n\n  /**\n   * Split text into manageable chunks for AI processing\n   */\n  private chunkText(text: string, maxCharsPerChunk: number): string[] {\n    const chunks: string[] = [];\n    const paragraphs = text.split(/\\n\\n+/);\n    let currentChunk = '';\n\n    for (const paragraph of paragraphs) {\n      if (currentChunk.length + paragraph.length > maxCharsPerChunk && currentChunk.length > 0) {\n        chunks.push(currentChunk.trim());\n        currentChunk = paragraph;\n      } else {\n        currentChunk += (currentChunk ? '\\n\\n' : '') + paragraph;\n      }\n    }\n\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim());\n    }\n\n    return chunks;\n  }\n\n  /**\n   * Determine if an expectation is overall or specific based on code pattern\n   */\n  private determineExpectationType(code: string, description: string): 'overall' | 'specific' {\n    // Common patterns for overall expectations:\n    // - Single letter or number (e.g., \"A\", \"1\")\n    // - Ends with .0 (e.g., \"A1.0\")\n    // - Contains \"overall\" in description\n\n    if (code.length === 1) return 'overall';\n    if (code.endsWith('.0')) return 'overall';\n    if (description.toLowerCase().includes('overall')) return 'overall';\n    if (code.match(/^[A-Z]\\d*$/)) return 'overall'; // e.g., \"A1\", \"B2\"\n\n    // Everything else is specific\n    return 'specific';\n  }\n\n  /**\n   * Store uploaded file content for parsing\n   */\n  async storeUploadedFile(importId: string, file: Express.Multer.File): Promise<void> {\n    try {\n      // Store file metadata and content\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          sourceFile: file.originalname,\n          metadata: {\n            filename: file.originalname,\n            mimetype: file.mimetype,\n            size: file.size,\n            uploadedAt: new Date().toISOString(),\n          },\n          // Store file content as base64 for now (in production, would use cloud storage)\n          rawText: file.buffer.toString('base64'),\n        },\n      });\n\n      this.logger.info(`File stored for import ${importId}: ${file.originalname}`);\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to store uploaded file');\n      throw error;\n    }\n  }\n\n  /**\n   * Parse uploaded file and extract curriculum expectations\n   */\n  async parseUploadedFile(\n    importId: string,\n    _options: { useAI?: boolean } = {},\n  ): Promise<{\n    subjects: Array<{\n      name: string;\n      expectations: Array<{\n        code: string;\n        type: 'overall' | 'specific';\n        description: string;\n        strand: string;\n        substrand?: string;\n        subject: string;\n        grade: number;\n      }>;\n    }>;\n    errors?: string[];\n  }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      if (!importRecord.rawText) {\n        throw new Error('No file content found for parsing');\n      }\n\n      // Update status to processing\n      await this.updateImportStatus(importId, ImportStatus.PROCESSING);\n\n      // Decode the file content from base64\n      const fileBuffer = Buffer.from(importRecord.rawText, 'base64');\n\n      // Parse based on file format\n      let expectations: Array<{\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        substrand?: string;\n      }> = [];\n\n      if (importRecord.sourceFormat === 'pdf') {\n        expectations = await this.parsePDF(fileBuffer);\n      } else if (importRecord.sourceFormat === 'docx') {\n        expectations = await this.parseDOCX(fileBuffer);\n      } else if (importRecord.sourceFormat === 'csv') {\n        // Convert buffer to string for CSV\n        const csvContent = fileBuffer.toString('utf-8');\n        expectations = this.parseCSV(csvContent);\n      } else {\n        throw new Error(`Unsupported file format: ${importRecord.sourceFormat}`);\n      }\n\n      // Group expectations by subject\n      const subjectMap = new Map<string, any>();\n\n      for (const expectation of expectations) {\n        const subjectName = expectation.subject || 'Unknown';\n\n        if (!subjectMap.has(subjectName)) {\n          subjectMap.set(subjectName, {\n            name: subjectName,\n            expectations: [],\n          });\n        }\n\n        const subject = subjectMap.get(subjectName);\n        subject.expectations.push({\n          code: expectation.code,\n          type: this.determineExpectationType(expectation.code, expectation.description),\n          description: expectation.description,\n          strand: expectation.strand || 'General',\n          substrand: expectation.substrand,\n          subject: subjectName,\n          grade: expectation.grade || importRecord.grade,\n        });\n      }\n\n      const subjects = Array.from(subjectMap.values());\n\n      // Store parsed subjects in metadata for later use\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          metadata: {\n            ...((importRecord.metadata as any) || {}),\n            parsedSubjects: subjects,\n          },\n        },\n      });\n\n      // Update status to ready for review\n      await this.updateImportStatus(importId, ImportStatus.READY_FOR_REVIEW);\n\n      this.logger.info(`File parsed for import ${importId}: ${subjects.length} subjects`);\n\n      return {\n        subjects: subjects,\n        errors: [],\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to parse uploaded file');\n      await this.updateImportStatus(importId, ImportStatus.FAILED);\n      throw error;\n    }\n  }\n\n  /**\n   * Load preset curriculum data\n   */\n  async loadPresetCurriculum(\n    userId: number,\n    presetId: string,\n  ): Promise<{\n    sessionId: string;\n    subjects: Array<{\n      name: string;\n      expectations: Array<{\n        code: string;\n        type: 'overall' | 'specific';\n        description: string;\n        strand: string;\n        substrand?: string;\n        subject: string;\n        grade: number;\n      }>;\n    }>;\n  }> {\n    try {\n      // Create new import session for preset\n      const sessionId = await this.startImport(\n        userId,\n        1, // Default grade for presets\n        'Multi-Subject',\n        'manual',\n        `Preset: ${presetId}`,\n      );\n\n      // Mock preset data based on presetId\n      let subjects: Array<{\n        name: string;\n        expectations: Array<{\n          code: string;\n          type: 'overall' | 'specific';\n          description: string;\n          strand: string;\n          substrand?: string;\n          subject: string;\n          grade: number;\n        }>;\n      }> = [];\n\n      switch (presetId) {\n        case 'pei-grade1-french':\n          subjects = [\n            {\n              name: 'Français Langue Première',\n              expectations: [\n                {\n                  code: 'CO1',\n                  type: 'overall',\n                  description: 'Comprendre des messages oraux en français',\n                  strand: 'Communication orale',\n                  subject: 'Français Langue Première',\n                  grade: 1,\n                },\n                {\n                  code: 'CO1.1',\n                  type: 'specific',\n                  description: 'Suivre des instructions orales simples',\n                  strand: 'Communication orale',\n                  substrand: 'Écoute',\n                  subject: 'Français Langue Première',\n                  grade: 1,\n                },\n              ],\n            },\n            {\n              name: 'Mathématiques',\n              expectations: [\n                {\n                  code: 'N1',\n                  type: 'overall',\n                  description: 'Comprendre les nombres de 0 à 20',\n                  strand: 'Nombre',\n                  subject: 'Mathématiques',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        case 'ontario-grade1-english':\n          subjects = [\n            {\n              name: 'Language',\n              expectations: [\n                {\n                  code: '1.O1',\n                  type: 'overall',\n                  description: 'Listen in order to understand and respond appropriately',\n                  strand: 'Oral Communication',\n                  subject: 'Language',\n                  grade: 1,\n                },\n              ],\n            },\n            {\n              name: 'Mathematics',\n              expectations: [\n                {\n                  code: '1.N1',\n                  type: 'overall',\n                  description: 'Count to 50 and represent numbers to 20',\n                  strand: 'Number Sense and Numeration',\n                  subject: 'Mathematics',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        case 'bc-grade1-core':\n          subjects = [\n            {\n              name: 'English Language Arts',\n              expectations: [\n                {\n                  code: 'ELA1-O1',\n                  type: 'overall',\n                  description: 'Use speaking and listening to interact with others',\n                  strand: 'Oral Language',\n                  subject: 'English Language Arts',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        default:\n          throw new Error(`Unknown preset: ${presetId}`);\n      }\n\n      // Store parsed subjects in metadata for later use\n      await this.prisma.curriculumImport.update({\n        where: { id: sessionId },\n        data: {\n          metadata: {\n            presetId,\n            parsedSubjects: subjects,\n            loadedAt: new Date().toISOString(),\n          },\n        },\n      });\n\n      // Update import status\n      await this.updateImportStatus(sessionId, 'READY_FOR_REVIEW');\n\n      this.logger.info(`Preset curriculum loaded: ${presetId} for user ${userId}`);\n\n      return {\n        sessionId,\n        subjects,\n      };\n    } catch (error) {\n      this.logger.error({ error, presetId, userId }, 'Failed to load preset curriculum');\n      throw error;\n    }\n  }\n\n  /**\n   * Finalize import and create actual curriculum expectations in the ETFO system\n   */\n  async finalizeImport(\n    importId: string,\n    _userId: number,\n  ): Promise<{\n    totalExpectations: number;\n    subjects: string[];\n  }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n        include: {\n          curriculumExpectations: true,\n        },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      // Get the parsed subjects from the import metadata\n      const parsedSubjects = (importRecord.metadata as any)?.parsedSubjects || [];\n\n      let totalExpectations = 0;\n      const subjects: string[] = [];\n\n      // Create curriculum expectations for each subject\n      for (const subject of parsedSubjects) {\n        subjects.push(subject.name);\n\n        for (const expectation of subject.expectations) {\n          await this.prisma.curriculumExpectation.create({\n            data: {\n              code: expectation.code,\n              description: expectation.description,\n              strand: expectation.strand,\n              substrand: expectation.substrand,\n              grade: expectation.grade,\n              subject: expectation.subject,\n              importId,\n            },\n          });\n          totalExpectations++;\n        }\n      }\n\n      // Update import status to completed\n      await this.updateImportStatus(importId, 'COMPLETED');\n      await this.setCompletionTime(importId);\n\n      // Store final results in metadata\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          metadata: {\n            ...((importRecord.metadata as any) || {}),\n            finalResults: {\n              totalExpectations,\n              subjects,\n              completedAt: new Date().toISOString(),\n            },\n          },\n        },\n      });\n\n      this.logger.info(`Import finalized: ${importId}, created ${totalExpectations} expectations`);\n\n      return {\n        totalExpectations,\n        subjects,\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to finalize import');\n      await this.updateImportStatus(importId, 'FAILED');\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const curriculumImportService = new CurriculumImportService();\n"],"version":3}