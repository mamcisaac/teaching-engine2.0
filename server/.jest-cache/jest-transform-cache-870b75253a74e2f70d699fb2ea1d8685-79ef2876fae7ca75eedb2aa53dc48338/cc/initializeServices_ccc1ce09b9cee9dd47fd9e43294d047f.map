{"version":3,"names":["cov_1wzx36qi0r","actualCoverage","serviceRegistry","embeddingService","curriculumImportService","clusteringService","cacheService","logger","initializeServices","f","s","info","register","name","instance","dependencies","singleton","healthCheckInterval","initialized","failed","initializeAll","length","b","error","Error","map","serviceName","join","healthStatus","getHealthStatus","unhealthy","filter","healthy","warn","shutdownServices","shutdown","destroy","getServiceHealth","metrics","getAllMetrics","every","services"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts"],"sourcesContent":["import { serviceRegistry } from './ServiceRegistry';\nimport { embeddingService } from './embeddingService';\nimport { curriculumImportService } from './curriculumImportService';\nimport { clusteringService } from './clusteringService';\nimport { cacheService } from './CacheService';\nimport logger from '../logger';\n\n/**\n * Initialize and register all services with the service registry\n */\nexport async function initializeServices(): Promise<void> {\n  try {\n    logger.info('Initializing services...');\n\n    // Register core services\n    serviceRegistry.register({\n      name: 'CacheService',\n      instance: cacheService,\n      dependencies: [],\n      singleton: true,\n      healthCheckInterval: 5 * 60 * 1000, // 5 minutes\n    });\n\n    serviceRegistry.register({\n      name: 'EmbeddingService',\n      instance: embeddingService,\n      dependencies: ['CacheService'],\n      singleton: true,\n      healthCheckInterval: 10 * 60 * 1000, // 10 minutes\n    });\n\n    serviceRegistry.register({\n      name: 'CurriculumImportService',\n      instance: curriculumImportService,\n      dependencies: ['EmbeddingService'],\n      singleton: true,\n    });\n\n    serviceRegistry.register({\n      name: 'ClusteringService',\n      instance: clusteringService,\n      dependencies: ['EmbeddingService'],\n      singleton: true,\n    });\n\n\n\n    // Initialize all services in dependency order\n    const { initialized, failed } = await serviceRegistry.initializeAll();\n\n    if (failed.length > 0) {\n      logger.error({ failed }, 'Some services failed to initialize');\n      throw new Error(\n        `Failed to initialize services: ${failed.map((f) => f.serviceName).join(', ')}`,\n      );\n    }\n\n    logger.info({ initialized }, 'All services initialized successfully');\n\n    // Log initial health status\n    const healthStatus = await serviceRegistry.getHealthStatus();\n    const unhealthy = healthStatus.filter((s) => !s.healthy);\n\n    if (unhealthy.length > 0) {\n      logger.warn(\n        { unhealthy: unhealthy.map((s) => s.serviceName) },\n        'Some services are unhealthy at startup',\n      );\n    }\n  } catch (error) {\n    logger.error({ error }, 'Failed to initialize services');\n    throw error;\n  }\n}\n\n/**\n * Gracefully shutdown all services\n */\nexport async function shutdownServices(): Promise<void> {\n  try {\n    logger.info('Shutting down services...');\n\n    await serviceRegistry.shutdown();\n\n    // Cleanup any resources specific to services\n    cacheService.destroy();\n\n    logger.info('All services shut down successfully');\n  } catch (error) {\n    logger.error({ error }, 'Error during service shutdown');\n  }\n}\n\n/**\n * Get service health status for monitoring\n */\nexport async function getServiceHealth(): Promise<{\n  healthy: boolean;\n  services: unknown[];\n  metrics: unknown[];\n}> {\n  const healthStatus = await serviceRegistry.getHealthStatus();\n  const metrics = serviceRegistry.getAllMetrics();\n\n  const healthy = healthStatus.every((s) => s.healthy);\n\n  return {\n    healthy,\n    services: healthStatus,\n    metrics,\n  };\n}\n"],"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","ignoreList":[]}