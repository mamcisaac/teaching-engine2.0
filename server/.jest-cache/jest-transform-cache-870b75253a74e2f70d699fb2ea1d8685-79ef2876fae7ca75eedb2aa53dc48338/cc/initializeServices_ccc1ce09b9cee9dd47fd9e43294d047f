166743e2206f37c4db35d3ff2c67f5dd
/* istanbul ignore next */
function cov_1wzx36qi0r() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts";
  var hash = "eb308d3dcacfcbfec9e1667febb5c86e195b592a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "1": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "2": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "3": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "4": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "5": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "6": {
        start: {
          line: 41,
          column: 40
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "7": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "8": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 75
        }
      },
      "9": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 109
        }
      },
      "10": {
        start: {
          line: 44,
          column: 80
        },
        end: {
          line: 44,
          column: 93
        }
      },
      "11": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 78
        }
      },
      "12": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 68
        }
      },
      "13": {
        start: {
          line: 49,
          column: 26
        },
        end: {
          line: 49,
          column: 64
        }
      },
      "14": {
        start: {
          line: 49,
          column: 53
        },
        end: {
          line: 49,
          column: 63
        }
      },
      "15": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "16": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 118
        }
      },
      "17": {
        start: {
          line: 51,
          column: 58
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "18": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 65
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 20
        }
      },
      "20": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "21": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 49
        }
      },
      "22": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 41
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 31
        }
      },
      "24": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 59
        }
      },
      "25": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 65
        }
      },
      "26": {
        start: {
          line: 78,
          column: 25
        },
        end: {
          line: 78,
          column: 64
        }
      },
      "27": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 51
        }
      },
      "28": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 56
        }
      },
      "29": {
        start: {
          line: 80,
          column: 46
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "30": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 85,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "initializeServices",
        decl: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 10,
            column: 40
          }
        },
        loc: {
          start: {
            line: 10,
            column: 43
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 73
          },
          end: {
            line: 44,
            column: 74
          }
        },
        loc: {
          start: {
            line: 44,
            column: 80
          },
          end: {
            line: 44,
            column: 93
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 47
          }
        },
        loc: {
          start: {
            line: 49,
            column: 53
          },
          end: {
            line: 49,
            column: 63
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 51,
            column: 51
          },
          end: {
            line: 51,
            column: 52
          }
        },
        loc: {
          start: {
            line: 51,
            column: 58
          },
          end: {
            line: 51,
            column: 71
          }
        },
        line: 51
      },
      "4": {
        name: "shutdownServices",
        decl: {
          start: {
            line: 62,
            column: 22
          },
          end: {
            line: 62,
            column: 38
          }
        },
        loc: {
          start: {
            line: 62,
            column: 41
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 62
      },
      "5": {
        name: "getServiceHealth",
        decl: {
          start: {
            line: 77,
            column: 22
          },
          end: {
            line: 77,
            column: 38
          }
        },
        loc: {
          start: {
            line: 77,
            column: 41
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 80,
            column: 39
          },
          end: {
            line: 80,
            column: 40
          }
        },
        loc: {
          start: {
            line: 80,
            column: 46
          },
          end: {
            line: 80,
            column: 55
          }
        },
        line: 80
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts"],
      sourcesContent: ["import { serviceRegistry } from './ServiceRegistry';\nimport { embeddingService } from './embeddingService';\nimport { curriculumImportService } from './curriculumImportService';\nimport { clusteringService } from './clusteringService';\nimport { cacheService } from './CacheService';\nimport logger from '../logger';\n\n/**\n * Initialize and register all services with the service registry\n */\nexport async function initializeServices(): Promise<void> {\n  try {\n    logger.info('Initializing services...');\n\n    // Register core services\n    serviceRegistry.register({\n      name: 'CacheService',\n      instance: cacheService,\n      dependencies: [],\n      singleton: true,\n      healthCheckInterval: 5 * 60 * 1000, // 5 minutes\n    });\n\n    serviceRegistry.register({\n      name: 'EmbeddingService',\n      instance: embeddingService,\n      dependencies: ['CacheService'],\n      singleton: true,\n      healthCheckInterval: 10 * 60 * 1000, // 10 minutes\n    });\n\n    serviceRegistry.register({\n      name: 'CurriculumImportService',\n      instance: curriculumImportService,\n      dependencies: ['EmbeddingService'],\n      singleton: true,\n    });\n\n    serviceRegistry.register({\n      name: 'ClusteringService',\n      instance: clusteringService,\n      dependencies: ['EmbeddingService'],\n      singleton: true,\n    });\n\n\n\n    // Initialize all services in dependency order\n    const { initialized, failed } = await serviceRegistry.initializeAll();\n\n    if (failed.length > 0) {\n      logger.error({ failed }, 'Some services failed to initialize');\n      throw new Error(\n        `Failed to initialize services: ${failed.map((f) => f.serviceName).join(', ')}`,\n      );\n    }\n\n    logger.info({ initialized }, 'All services initialized successfully');\n\n    // Log initial health status\n    const healthStatus = await serviceRegistry.getHealthStatus();\n    const unhealthy = healthStatus.filter((s) => !s.healthy);\n\n    if (unhealthy.length > 0) {\n      logger.warn(\n        { unhealthy: unhealthy.map((s) => s.serviceName) },\n        'Some services are unhealthy at startup',\n      );\n    }\n  } catch (error) {\n    logger.error({ error }, 'Failed to initialize services');\n    throw error;\n  }\n}\n\n/**\n * Gracefully shutdown all services\n */\nexport async function shutdownServices(): Promise<void> {\n  try {\n    logger.info('Shutting down services...');\n\n    await serviceRegistry.shutdown();\n\n    // Cleanup any resources specific to services\n    cacheService.destroy();\n\n    logger.info('All services shut down successfully');\n  } catch (error) {\n    logger.error({ error }, 'Error during service shutdown');\n  }\n}\n\n/**\n * Get service health status for monitoring\n */\nexport async function getServiceHealth(): Promise<{\n  healthy: boolean;\n  services: unknown[];\n  metrics: unknown[];\n}> {\n  const healthStatus = await serviceRegistry.getHealthStatus();\n  const metrics = serviceRegistry.getAllMetrics();\n\n  const healthy = healthStatus.every((s) => s.healthy);\n\n  return {\n    healthy,\n    services: healthStatus,\n    metrics,\n  };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eb308d3dcacfcbfec9e1667febb5c86e195b592a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wzx36qi0r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wzx36qi0r();
import { serviceRegistry } from './ServiceRegistry';
import { embeddingService } from './embeddingService';
import { curriculumImportService } from './curriculumImportService';
import { clusteringService } from './clusteringService';
import { cacheService } from './CacheService';
import logger from '../logger';
/**
 * Initialize and register all services with the service registry
 */
export async function initializeServices() {
  /* istanbul ignore next */
  cov_1wzx36qi0r().f[0]++;
  cov_1wzx36qi0r().s[0]++;
  try {
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[1]++;
    logger.info('Initializing services...');
    // Register core services
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[2]++;
    serviceRegistry.register({
      name: 'CacheService',
      instance: cacheService,
      dependencies: [],
      singleton: true,
      healthCheckInterval: 5 * 60 * 1000 // 5 minutes
    });
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[3]++;
    serviceRegistry.register({
      name: 'EmbeddingService',
      instance: embeddingService,
      dependencies: ['CacheService'],
      singleton: true,
      healthCheckInterval: 10 * 60 * 1000 // 10 minutes
    });
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[4]++;
    serviceRegistry.register({
      name: 'CurriculumImportService',
      instance: curriculumImportService,
      dependencies: ['EmbeddingService'],
      singleton: true
    });
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[5]++;
    serviceRegistry.register({
      name: 'ClusteringService',
      instance: clusteringService,
      dependencies: ['EmbeddingService'],
      singleton: true
    });
    // Initialize all services in dependency order
    const {
      initialized,
      failed
    } =
    /* istanbul ignore next */
    (cov_1wzx36qi0r().s[6]++, await serviceRegistry.initializeAll());
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[7]++;
    if (failed.length > 0) {
      /* istanbul ignore next */
      cov_1wzx36qi0r().b[0][0]++;
      cov_1wzx36qi0r().s[8]++;
      logger.error({
        failed
      }, 'Some services failed to initialize');
      /* istanbul ignore next */
      cov_1wzx36qi0r().s[9]++;
      throw new Error(`Failed to initialize services: ${failed.map(f => {
        /* istanbul ignore next */
        cov_1wzx36qi0r().f[1]++;
        cov_1wzx36qi0r().s[10]++;
        return f.serviceName;
      }).join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1wzx36qi0r().b[0][1]++;
    }
    cov_1wzx36qi0r().s[11]++;
    logger.info({
      initialized
    }, 'All services initialized successfully');
    // Log initial health status
    const healthStatus =
    /* istanbul ignore next */
    (cov_1wzx36qi0r().s[12]++, await serviceRegistry.getHealthStatus());
    const unhealthy =
    /* istanbul ignore next */
    (cov_1wzx36qi0r().s[13]++, healthStatus.filter(s => {
      /* istanbul ignore next */
      cov_1wzx36qi0r().f[2]++;
      cov_1wzx36qi0r().s[14]++;
      return !s.healthy;
    }));
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[15]++;
    if (unhealthy.length > 0) {
      /* istanbul ignore next */
      cov_1wzx36qi0r().b[1][0]++;
      cov_1wzx36qi0r().s[16]++;
      logger.warn({
        unhealthy: unhealthy.map(s => {
          /* istanbul ignore next */
          cov_1wzx36qi0r().f[3]++;
          cov_1wzx36qi0r().s[17]++;
          return s.serviceName;
        })
      }, 'Some services are unhealthy at startup');
    } else
    /* istanbul ignore next */
    {
      cov_1wzx36qi0r().b[1][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[18]++;
    logger.error({
      error
    }, 'Failed to initialize services');
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[19]++;
    throw error;
  }
}
/**
 * Gracefully shutdown all services
 */
export async function shutdownServices() {
  /* istanbul ignore next */
  cov_1wzx36qi0r().f[4]++;
  cov_1wzx36qi0r().s[20]++;
  try {
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[21]++;
    logger.info('Shutting down services...');
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[22]++;
    await serviceRegistry.shutdown();
    // Cleanup any resources specific to services
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[23]++;
    cacheService.destroy();
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[24]++;
    logger.info('All services shut down successfully');
  } catch (error) {
    /* istanbul ignore next */
    cov_1wzx36qi0r().s[25]++;
    logger.error({
      error
    }, 'Error during service shutdown');
  }
}
/**
 * Get service health status for monitoring
 */
export async function getServiceHealth() {
  /* istanbul ignore next */
  cov_1wzx36qi0r().f[5]++;
  const healthStatus =
  /* istanbul ignore next */
  (cov_1wzx36qi0r().s[26]++, await serviceRegistry.getHealthStatus());
  const metrics =
  /* istanbul ignore next */
  (cov_1wzx36qi0r().s[27]++, serviceRegistry.getAllMetrics());
  const healthy =
  /* istanbul ignore next */
  (cov_1wzx36qi0r().s[28]++, healthStatus.every(s => {
    /* istanbul ignore next */
    cov_1wzx36qi0r().f[6]++;
    cov_1wzx36qi0r().s[29]++;
    return s.healthy;
  }));
  /* istanbul ignore next */
  cov_1wzx36qi0r().s[30]++;
  return {
    healthy,
    services: healthStatus,
    metrics
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,