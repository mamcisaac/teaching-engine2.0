9123408345d4b3c03af22b18d833af48
import { describe, test, expect, beforeEach, jest } from '@jest/globals';
// Mock dependencies before importing the service
jest.unstable_mockModule('../../src/logger', () => ({
    default: {
        error: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        debug: jest.fn(),
    },
}));
jest.unstable_mockModule('../../src/services/llmService', () => ({
    generateContent: jest.fn().mockResolvedValue('Generated content'),
}));
const { reportGeneratorService } = await import('../../src/services/reportGeneratorService');
const { prisma } = await import('../../src/prisma');
describe('Report Generator Service', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('generateCurriculumCoverageReport', () => {
        test('should generate coverage report for user', async () => {
            const userId = 1;
            const mockExpectations = [
                {
                    id: 'exp1',
                    code: 'A1.1',
                    description: 'Test expectation 1',
                    strand: 'Number Sense',
                    subject: 'Mathematics',
                    grade: 1,
                },
                {
                    id: 'exp2',
                    code: 'A1.2',
                    description: 'Test expectation 2',
                    strand: 'Number Sense',
                    subject: 'Mathematics',
                    grade: 1,
                },
            ];
            const mockLongRangePlans = [
                {
                    id: 'lrp1',
                    title: 'Grade 1 Math',
                    expectations: [{ expectationId: 'exp1' }],
                },
            ];
            const mockUnitPlans = [
                {
                    id: 'unit1',
                    title: 'Numbers Unit',
                    expectations: [{ expectationId: 'exp1' }],
                },
            ];
            const mockLessonPlans = [
                {
                    id: 'lesson1',
                    title: 'Counting Lesson',
                    expectations: [{ expectationId: 'exp1' }],
                },
            ];
            prisma.curriculumExpectation.findMany.mockResolvedValue(mockExpectations);
            prisma.longRangePlan.findMany.mockResolvedValue(mockLongRangePlans);
            prisma.unitPlan.findMany.mockResolvedValue(mockUnitPlans);
            prisma.eTFOLessonPlan.findMany.mockResolvedValue(mockLessonPlans);
            const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);
            expect(report).toBeDefined();
            expect(report.totalExpectations).toBe(2);
            expect(report.coveredExpectations).toBe(1);
            expect(report.coveragePercentage).toBe(50);
            expect(report.uncoveredExpectations).toHaveLength(1);
            expect(report.uncoveredExpectations[0].code).toBe('A1.2');
            expect(report.coverageByStrand['Number Sense']).toEqual({
                total: 2,
                covered: 1,
                percentage: 50,
            });
        });
        test('should handle no expectations', async () => {
            const userId = 1;
            prisma.curriculumExpectation.findMany.mockResolvedValue([]);
            prisma.longRangePlan.findMany.mockResolvedValue([]);
            prisma.unitPlan.findMany.mockResolvedValue([]);
            prisma.eTFOLessonPlan.findMany.mockResolvedValue([]);
            const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);
            expect(report.totalExpectations).toBe(0);
            expect(report.coveredExpectations).toBe(0);
            expect(report.coveragePercentage).toBe(0);
        });
    });
    describe('generatePlanningProgressReport', () => {
        test('should generate progress report across all ETFO levels', async () => {
            const userId = 1;
            const mockLongRangePlans = [
                {
                    id: 'lrp1',
                    title: 'Complete LRP',
                    goals: 'Test goals',
                    createdAt: new Date(),
                },
                {
                    id: 'lrp2',
                    title: 'Incomplete LRP',
                    goals: null,
                    createdAt: new Date(),
                },
            ];
            const mockUnitPlans = [
                {
                    id: 'unit1',
                    title: 'Complete Unit',
                    bigIdeas: 'Test big ideas',
                    createdAt: new Date(),
                },
            ];
            const mockLessonPlans = [
                {
                    id: 'lesson1',
                    title: 'Complete Lesson',
                    learningGoals: 'Test learning goals',
                    date: new Date(),
                },
            ];
            const mockDaybookEntries = [
                {
                    id: 'daybook1',
                    date: new Date(),
                    whatWorked: 'Test reflection',
                },
            ];
            prisma.longRangePlan.findMany.mockResolvedValue(mockLongRangePlans);
            prisma.unitPlan.findMany.mockResolvedValue(mockUnitPlans);
            prisma.eTFOLessonPlan.findMany.mockResolvedValue(mockLessonPlans);
            prisma.daybookEntry.findMany.mockResolvedValue(mockDaybookEntries);
            const report = await reportGeneratorService.generatePlanningProgressReport(userId);
            expect(report).toBeDefined();
            expect(report.longRangePlans.total).toBe(2);
            expect(report.longRangePlans.completed).toBe(1);
            expect(report.longRangePlans.completionRate).toBe(50);
            expect(report.unitPlans.total).toBe(1);
            expect(report.unitPlans.completed).toBe(1);
            expect(report.unitPlans.completionRate).toBe(100);
            expect(report.lessonPlans.total).toBe(1);
            expect(report.lessonPlans.completed).toBe(1);
            expect(report.lessonPlans.completionRate).toBe(100);
            expect(report.daybookEntries.total).toBe(1);
            expect(report.daybookEntries.completed).toBe(1);
            expect(report.daybookEntries.completionRate).toBe(100);
        });
    });
    describe('generateLessonPlanReport', () => {
        test('should generate detailed lesson plan report', async () => {
            const lessonId = 'lesson1';
            const mockLesson = {
                id: 'lesson1',
                title: 'Test Lesson',
                date: new Date('2024-09-15'),
                duration: 45,
                mindsOn: 'Test minds-on',
                action: 'Test action',
                consolidation: 'Test consolidation',
                learningGoals: 'Test learning goals',
                materials: ['material1', 'material2'],
                isSubFriendly: true,
                unitPlan: {
                    id: 'unit1',
                    title: 'Test Unit',
                    longRangePlan: {
                        id: 'lrp1',
                        title: 'Test LRP',
                        subject: 'Mathematics',
                        grade: 1,
                    },
                },
                expectations: [
                    {
                        expectation: {
                            id: 'exp1',
                            code: 'A1.1',
                            description: 'Test expectation',
                            strand: 'Number Sense',
                        },
                    },
                ],
                daybookEntry: {
                    id: 'daybook1',
                    whatWorked: 'Test reflection',
                    overallRating: 4,
                    wouldReuseLesson: true,
                },
                resources: [
                    {
                        id: 'res1',
                        title: 'Test Resource',
                        type: 'handout',
                        url: 'https://example.com/resource.pdf',
                    },
                ],
            };
            prisma.eTFOLessonPlan.findUnique.mockResolvedValue(mockLesson);
            const report = await reportGeneratorService.generateLessonPlanReport(lessonId);
            expect(report).toBeDefined();
            expect(report.lesson.title).toBe('Test Lesson');
            expect(report.lesson.duration).toBe(45);
            expect(report.hierarchy.longRangePlan.title).toBe('Test LRP');
            expect(report.hierarchy.unitPlan.title).toBe('Test Unit');
            expect(report.curriculumAlignment).toHaveLength(1);
            expect(report.curriculumAlignment[0].code).toBe('A1.1');
            expect(report.reflection?.whatWorked).toBe('Test reflection');
            expect(report.resources).toHaveLength(1);
            expect(report.resources[0].title).toBe('Test Resource');
        });
        test('should handle lesson not found', async () => {
            const lessonId = 'nonexistent';
            prisma.eTFOLessonPlan.findUnique.mockResolvedValue(null);
            await expect(reportGeneratorService.generateLessonPlanReport(lessonId)).rejects.toThrow('Lesson plan not found');
        });
    });
    describe('generateSubstitutePlanReport', () => {
        test('should generate substitute-friendly lesson report', async () => {
            const lessonId = 'lesson1';
            const mockLesson = {
                id: 'lesson1',
                title: 'Sub-Friendly Lesson',
                date: new Date('2024-09-15'),
                duration: 45,
                mindsOn: 'Easy start activity',
                action: 'Main activity with clear instructions',
                consolidation: 'Simple wrap-up',
                materials: ['worksheets', 'pencils'],
                grouping: 'whole class',
                isSubFriendly: true,
                subNotes: 'Materials are in the cupboard',
                unitPlan: {
                    longRangePlan: {
                        subject: 'Mathematics',
                        grade: 1,
                    },
                },
                resources: [
                    {
                        id: 'res1',
                        title: 'Student Worksheet',
                        type: 'handout',
                        content: 'Worksheet content',
                    },
                ],
            };
            prisma.eTFOLessonPlan.findUnique.mockResolvedValue(mockLesson);
            const report = await reportGeneratorService.generateSubstitutePlanReport(lessonId);
            expect(report).toBeDefined();
            expect(report.title).toBe('Sub-Friendly Lesson');
            expect(report.basicInfo.subject).toBe('Mathematics');
            expect(report.basicInfo.grade).toBe(1);
            expect(report.basicInfo.duration).toBe(45);
            expect(report.materials).toEqual(['worksheets', 'pencils']);
            expect(report.activities.opening).toBe('Easy start activity');
            expect(report.activities.main).toBe('Main activity with clear instructions');
            expect(report.activities.closing).toBe('Simple wrap-up');
            expect(report.specialNotes).toBe('Materials are in the cupboard');
            expect(report.resources).toHaveLength(1);
        });
        test('should handle non-sub-friendly lesson', async () => {
            const lessonId = 'lesson1';
            const mockLesson = {
                id: 'lesson1',
                title: 'Complex Lesson',
                isSubFriendly: false,
                unitPlan: {
                    longRangePlan: {
                        subject: 'Mathematics',
                        grade: 1,
                    },
                },
            };
            prisma.eTFOLessonPlan.findUnique.mockResolvedValue(mockLesson);
            await expect(reportGeneratorService.generateSubstitutePlanReport(lessonId)).rejects.toThrow('Lesson plan is not marked as substitute-friendly');
        });
    });
    describe('generateUnitOverviewReport', () => {
        test('should generate comprehensive unit overview', async () => {
            const unitId = 'unit1';
            const mockUnit = {
                id: 'unit1',
                title: 'Test Unit',
                description: 'Test description',
                bigIdeas: 'Test big ideas',
                startDate: new Date('2024-09-01'),
                endDate: new Date('2024-09-30'),
                estimatedHours: 20,
                longRangePlan: {
                    id: 'lrp1',
                    title: 'Test LRP',
                    subject: 'Mathematics',
                    grade: 1,
                },
                expectations: [
                    {
                        expectation: {
                            id: 'exp1',
                            code: 'A1.1',
                            description: 'Test expectation',
                            strand: 'Number Sense',
                        },
                    },
                ],
                lessonPlans: [
                    {
                        id: 'lesson1',
                        title: 'Lesson 1',
                        date: new Date('2024-09-15'),
                        duration: 45,
                    },
                    {
                        id: 'lesson2',
                        title: 'Lesson 2',
                        date: new Date('2024-09-20'),
                        duration: 30,
                    },
                ],
                resources: [
                    {
                        id: 'res1',
                        title: 'Unit Resource',
                        type: 'document',
                    },
                ],
            };
            prisma.unitPlan.findUnique.mockResolvedValue(mockUnit);
            const report = await reportGeneratorService.generateUnitOverviewReport(unitId);
            expect(report).toBeDefined();
            expect(report.unit.title).toBe('Test Unit');
            expect(report.unit.estimatedHours).toBe(20);
            expect(report.hierarchy.longRangePlan.title).toBe('Test LRP');
            expect(report.curriculumAlignment).toHaveLength(1);
            expect(report.lessonSummary.totalLessons).toBe(2);
            expect(report.lessonSummary.totalDuration).toBe(75);
            expect(report.lessonSummary.lessons).toHaveLength(2);
            expect(report.resources).toHaveLength(1);
        });
    });
    describe('error handling', () => {
        test('should handle database errors gracefully', async () => {
            const userId = 1;
            prisma.curriculumExpectation.findMany.mockRejectedValue(new Error('Database connection failed'));
            await expect(reportGeneratorService.generateCurriculumCoverageReport(userId)).rejects.toThrow('Database connection failed');
        });
        test('should handle invalid user IDs', async () => {
            const userId = -1;
            prisma.curriculumExpectation.findMany.mockResolvedValue([]);
            prisma.longRangePlan.findMany.mockResolvedValue([]);
            prisma.unitPlan.findMany.mockResolvedValue([]);
            prisma.eTFOLessonPlan.findMany.mockResolvedValue([]);
            const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);
            expect(report.totalExpectations).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL3VuaXQvcmVwb3J0R2VuZXJhdG9yU2VydmljZS50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpFLGlEQUFpRDtBQUNqRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsRCxPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDakI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLElBQUksQ0FBQyxtQkFBbUIsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELGVBQWUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7Q0FDbEUsQ0FBQyxDQUFDLENBQUM7QUFFSixNQUFNLEVBQUUsc0JBQXNCLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXBELFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsSUFBSSxDQUFDLDBDQUEw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QUFDO1lBQ2pCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxRQUFzQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQXNCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFzQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXBFLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsZ0NBQWdDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFckYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL3VuaXQvcmVwb3J0R2VuZXJhdG9yU2VydmljZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCB0ZXN0LCBleHBlY3QsIGJlZm9yZUVhY2gsIGplc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcblxuLy8gTW9jayBkZXBlbmRlbmNpZXMgYmVmb3JlIGltcG9ydGluZyB0aGUgc2VydmljZVxuamVzdC51bnN0YWJsZV9tb2NrTW9kdWxlKCcuLi8uLi9zcmMvbG9nZ2VyJywgKCkgPT4gKHtcbiAgZGVmYXVsdDoge1xuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgaW5mbzogamVzdC5mbigpLFxuICAgIHdhcm46IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICB9LFxufSkpO1xuXG5qZXN0LnVuc3RhYmxlX21vY2tNb2R1bGUoJy4uLy4uL3NyYy9zZXJ2aWNlcy9sbG1TZXJ2aWNlJywgKCkgPT4gKHtcbiAgZ2VuZXJhdGVDb250ZW50OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ0dlbmVyYXRlZCBjb250ZW50JyksXG59KSk7XG5cbmNvbnN0IHsgcmVwb3J0R2VuZXJhdG9yU2VydmljZSB9ID0gYXdhaXQgaW1wb3J0KCcuLi8uLi9zcmMvc2VydmljZXMvcmVwb3J0R2VuZXJhdG9yU2VydmljZScpO1xuY29uc3QgeyBwcmlzbWEgfSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vc3JjL3ByaXNtYScpO1xuXG5kZXNjcmliZSgnUmVwb3J0IEdlbmVyYXRvciBTZXJ2aWNlJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlQ3VycmljdWx1bUNvdmVyYWdlUmVwb3J0JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBjb3ZlcmFnZSByZXBvcnQgZm9yIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VySWQgPSAxO1xuICAgICAgY29uc3QgbW9ja0V4cGVjdGF0aW9ucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnZXhwMScsXG4gICAgICAgICAgY29kZTogJ0ExLjEnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGVzdCBleHBlY3RhdGlvbiAxJyxcbiAgICAgICAgICBzdHJhbmQ6ICdOdW1iZXIgU2Vuc2UnLFxuICAgICAgICAgIHN1YmplY3Q6ICdNYXRoZW1hdGljcycsXG4gICAgICAgICAgZ3JhZGU6IDEsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2V4cDInLCBcbiAgICAgICAgICBjb2RlOiAnQTEuMicsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdUZXN0IGV4cGVjdGF0aW9uIDInLFxuICAgICAgICAgIHN0cmFuZDogJ051bWJlciBTZW5zZScsXG4gICAgICAgICAgc3ViamVjdDogJ01hdGhlbWF0aWNzJyxcbiAgICAgICAgICBncmFkZTogMSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IG1vY2tMb25nUmFuZ2VQbGFucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbHJwMScsXG4gICAgICAgICAgdGl0bGU6ICdHcmFkZSAxIE1hdGgnLFxuICAgICAgICAgIGV4cGVjdGF0aW9uczogW3sgZXhwZWN0YXRpb25JZDogJ2V4cDEnIH1dLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgbW9ja1VuaXRQbGFucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndW5pdDEnLFxuICAgICAgICAgIHRpdGxlOiAnTnVtYmVycyBVbml0JyxcbiAgICAgICAgICBleHBlY3RhdGlvbnM6IFt7IGV4cGVjdGF0aW9uSWQ6ICdleHAxJyB9XSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IG1vY2tMZXNzb25QbGFucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbGVzc29uMScsXG4gICAgICAgICAgdGl0bGU6ICdDb3VudGluZyBMZXNzb24nLFxuICAgICAgICAgIGV4cGVjdGF0aW9uczogW3sgZXhwZWN0YXRpb25JZDogJ2V4cDEnIH1dLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgKHByaXNtYS5jdXJyaWN1bHVtRXhwZWN0YXRpb24uZmluZE1hbnkgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRXhwZWN0YXRpb25zKTtcbiAgICAgIChwcmlzbWEubG9uZ1JhbmdlUGxhbi5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tMb25nUmFuZ2VQbGFucyk7XG4gICAgICAocHJpc21hLnVuaXRQbGFuLmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VuaXRQbGFucyk7XG4gICAgICAocHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja0xlc3NvblBsYW5zKTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgcmVwb3J0R2VuZXJhdG9yU2VydmljZS5nZW5lcmF0ZUN1cnJpY3VsdW1Db3ZlcmFnZVJlcG9ydCh1c2VySWQpO1xuXG4gICAgICBleHBlY3QocmVwb3J0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC50b3RhbEV4cGVjdGF0aW9ucykudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXBvcnQuY292ZXJlZEV4cGVjdGF0aW9ucykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXBvcnQuY292ZXJhZ2VQZXJjZW50YWdlKS50b0JlKDUwKTtcbiAgICAgIGV4cGVjdChyZXBvcnQudW5jb3ZlcmVkRXhwZWN0YXRpb25zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVwb3J0LnVuY292ZXJlZEV4cGVjdGF0aW9uc1swXS5jb2RlKS50b0JlKCdBMS4yJyk7XG4gICAgICBleHBlY3QocmVwb3J0LmNvdmVyYWdlQnlTdHJhbmRbJ051bWJlciBTZW5zZSddKS50b0VxdWFsKHtcbiAgICAgICAgdG90YWw6IDIsXG4gICAgICAgIGNvdmVyZWQ6IDEsXG4gICAgICAgIHBlcmNlbnRhZ2U6IDUwLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG5vIGV4cGVjdGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IDE7XG4gICAgICAocHJpc21hLmN1cnJpY3VsdW1FeHBlY3RhdGlvbi5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIChwcmlzbWEubG9uZ1JhbmdlUGxhbi5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIChwcmlzbWEudW5pdFBsYW4uZmluZE1hbnkgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICAocHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlQ3VycmljdWx1bUNvdmVyYWdlUmVwb3J0KHVzZXJJZCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQudG90YWxFeHBlY3RhdGlvbnMpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVwb3J0LmNvdmVyZWRFeHBlY3RhdGlvbnMpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVwb3J0LmNvdmVyYWdlUGVyY2VudGFnZSkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlUGxhbm5pbmdQcm9ncmVzc1JlcG9ydCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgcHJvZ3Jlc3MgcmVwb3J0IGFjcm9zcyBhbGwgRVRGTyBsZXZlbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VySWQgPSAxO1xuXG4gICAgICBjb25zdCBtb2NrTG9uZ1JhbmdlUGxhbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2xycDEnLFxuICAgICAgICAgIHRpdGxlOiAnQ29tcGxldGUgTFJQJyxcbiAgICAgICAgICBnb2FsczogJ1Rlc3QgZ29hbHMnLFxuICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbHJwMicsXG4gICAgICAgICAgdGl0bGU6ICdJbmNvbXBsZXRlIExSUCcsXG4gICAgICAgICAgZ29hbHM6IG51bGwsXG4gICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgbW9ja1VuaXRQbGFucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndW5pdDEnLFxuICAgICAgICAgIHRpdGxlOiAnQ29tcGxldGUgVW5pdCcsXG4gICAgICAgICAgYmlnSWRlYXM6ICdUZXN0IGJpZyBpZGVhcycsXG4gICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgbW9ja0xlc3NvblBsYW5zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdsZXNzb24xJyxcbiAgICAgICAgICB0aXRsZTogJ0NvbXBsZXRlIExlc3NvbicsXG4gICAgICAgICAgbGVhcm5pbmdHb2FsczogJ1Rlc3QgbGVhcm5pbmcgZ29hbHMnLFxuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBtb2NrRGF5Ym9va0VudHJpZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2RheWJvb2sxJyxcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHdoYXRXb3JrZWQ6ICdUZXN0IHJlZmxlY3Rpb24nLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgKHByaXNtYS5sb25nUmFuZ2VQbGFuLmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja0xvbmdSYW5nZVBsYW5zKTtcbiAgICAgIChwcmlzbWEudW5pdFBsYW4uZmluZE1hbnkgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVW5pdFBsYW5zKTtcbiAgICAgIChwcmlzbWEuZVRGT0xlc3NvblBsYW4uZmluZE1hbnkgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrTGVzc29uUGxhbnMpO1xuICAgICAgKHByaXNtYS5kYXlib29rRW50cnkuZmluZE1hbnkgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRGF5Ym9va0VudHJpZXMpO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlUGxhbm5pbmdQcm9ncmVzc1JlcG9ydCh1c2VySWQpO1xuXG4gICAgICBleHBlY3QocmVwb3J0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5sb25nUmFuZ2VQbGFucy50b3RhbCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChyZXBvcnQubG9uZ1JhbmdlUGxhbnMuY29tcGxldGVkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5sb25nUmFuZ2VQbGFucy5jb21wbGV0aW9uUmF0ZSkudG9CZSg1MCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQudW5pdFBsYW5zLnRvdGFsKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlcG9ydC51bml0UGxhbnMuY29tcGxldGVkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlcG9ydC51bml0UGxhbnMuY29tcGxldGlvblJhdGUpLnRvQmUoMTAwKTtcblxuICAgICAgZXhwZWN0KHJlcG9ydC5sZXNzb25QbGFucy50b3RhbCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXBvcnQubGVzc29uUGxhbnMuY29tcGxldGVkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5sZXNzb25QbGFucy5jb21wbGV0aW9uUmF0ZSkudG9CZSgxMDApO1xuXG4gICAgICBleHBlY3QocmVwb3J0LmRheWJvb2tFbnRyaWVzLnRvdGFsKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5kYXlib29rRW50cmllcy5jb21wbGV0ZWQpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocmVwb3J0LmRheWJvb2tFbnRyaWVzLmNvbXBsZXRpb25SYXRlKS50b0JlKDEwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZUxlc3NvblBsYW5SZXBvcnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIGRldGFpbGVkIGxlc3NvbiBwbGFuIHJlcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxlc3NvbklkID0gJ2xlc3NvbjEnO1xuICAgICAgY29uc3QgbW9ja0xlc3NvbiA9IHtcbiAgICAgICAgaWQ6ICdsZXNzb24xJyxcbiAgICAgICAgdGl0bGU6ICdUZXN0IExlc3NvbicsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCcyMDI0LTA5LTE1JyksXG4gICAgICAgIGR1cmF0aW9uOiA0NSxcbiAgICAgICAgbWluZHNPbjogJ1Rlc3QgbWluZHMtb24nLFxuICAgICAgICBhY3Rpb246ICdUZXN0IGFjdGlvbicsXG4gICAgICAgIGNvbnNvbGlkYXRpb246ICdUZXN0IGNvbnNvbGlkYXRpb24nLFxuICAgICAgICBsZWFybmluZ0dvYWxzOiAnVGVzdCBsZWFybmluZyBnb2FscycsXG4gICAgICAgIG1hdGVyaWFsczogWydtYXRlcmlhbDEnLCAnbWF0ZXJpYWwyJ10sXG4gICAgICAgIGlzU3ViRnJpZW5kbHk6IHRydWUsXG4gICAgICAgIHVuaXRQbGFuOiB7XG4gICAgICAgICAgaWQ6ICd1bml0MScsXG4gICAgICAgICAgdGl0bGU6ICdUZXN0IFVuaXQnLFxuICAgICAgICAgIGxvbmdSYW5nZVBsYW46IHtcbiAgICAgICAgICAgIGlkOiAnbHJwMScsXG4gICAgICAgICAgICB0aXRsZTogJ1Rlc3QgTFJQJyxcbiAgICAgICAgICAgIHN1YmplY3Q6ICdNYXRoZW1hdGljcycsXG4gICAgICAgICAgICBncmFkZTogMSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBleHBlY3RhdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBleHBlY3RhdGlvbjoge1xuICAgICAgICAgICAgICBpZDogJ2V4cDEnLFxuICAgICAgICAgICAgICBjb2RlOiAnQTEuMScsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGVzdCBleHBlY3RhdGlvbicsXG4gICAgICAgICAgICAgIHN0cmFuZDogJ051bWJlciBTZW5zZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRheWJvb2tFbnRyeToge1xuICAgICAgICAgIGlkOiAnZGF5Ym9vazEnLFxuICAgICAgICAgIHdoYXRXb3JrZWQ6ICdUZXN0IHJlZmxlY3Rpb24nLFxuICAgICAgICAgIG92ZXJhbGxSYXRpbmc6IDQsXG4gICAgICAgICAgd291bGRSZXVzZUxlc3NvbjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdyZXMxJyxcbiAgICAgICAgICAgIHRpdGxlOiAnVGVzdCBSZXNvdXJjZScsXG4gICAgICAgICAgICB0eXBlOiAnaGFuZG91dCcsXG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL3Jlc291cmNlLnBkZicsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIChwcmlzbWEuZVRGT0xlc3NvblBsYW4uZmluZFVuaXF1ZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tMZXNzb24pO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlTGVzc29uUGxhblJlcG9ydChsZXNzb25JZCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVwb3J0Lmxlc3Nvbi50aXRsZSkudG9CZSgnVGVzdCBMZXNzb24nKTtcbiAgICAgIGV4cGVjdChyZXBvcnQubGVzc29uLmR1cmF0aW9uKS50b0JlKDQ1KTtcbiAgICAgIGV4cGVjdChyZXBvcnQuaGllcmFyY2h5LmxvbmdSYW5nZVBsYW4udGl0bGUpLnRvQmUoJ1Rlc3QgTFJQJyk7XG4gICAgICBleHBlY3QocmVwb3J0LmhpZXJhcmNoeS51bml0UGxhbi50aXRsZSkudG9CZSgnVGVzdCBVbml0Jyk7XG4gICAgICBleHBlY3QocmVwb3J0LmN1cnJpY3VsdW1BbGlnbm1lbnQpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXBvcnQuY3VycmljdWx1bUFsaWdubWVudFswXS5jb2RlKS50b0JlKCdBMS4xJyk7XG4gICAgICBleHBlY3QocmVwb3J0LnJlZmxlY3Rpb24/LndoYXRXb3JrZWQpLnRvQmUoJ1Rlc3QgcmVmbGVjdGlvbicpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5yZXNvdXJjZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXBvcnQucmVzb3VyY2VzWzBdLnRpdGxlKS50b0JlKCdUZXN0IFJlc291cmNlJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGxlc3NvbiBub3QgZm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBsZXNzb25JZCA9ICdub25leGlzdGVudCc7XG4gICAgICAocHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRVbmlxdWUgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlTGVzc29uUGxhblJlcG9ydChsZXNzb25JZClcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdMZXNzb24gcGxhbiBub3QgZm91bmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlU3Vic3RpdHV0ZVBsYW5SZXBvcnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIHN1YnN0aXR1dGUtZnJpZW5kbHkgbGVzc29uIHJlcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxlc3NvbklkID0gJ2xlc3NvbjEnO1xuICAgICAgY29uc3QgbW9ja0xlc3NvbiA9IHtcbiAgICAgICAgaWQ6ICdsZXNzb24xJyxcbiAgICAgICAgdGl0bGU6ICdTdWItRnJpZW5kbHkgTGVzc29uJyxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoJzIwMjQtMDktMTUnKSxcbiAgICAgICAgZHVyYXRpb246IDQ1LFxuICAgICAgICBtaW5kc09uOiAnRWFzeSBzdGFydCBhY3Rpdml0eScsXG4gICAgICAgIGFjdGlvbjogJ01haW4gYWN0aXZpdHkgd2l0aCBjbGVhciBpbnN0cnVjdGlvbnMnLFxuICAgICAgICBjb25zb2xpZGF0aW9uOiAnU2ltcGxlIHdyYXAtdXAnLFxuICAgICAgICBtYXRlcmlhbHM6IFsnd29ya3NoZWV0cycsICdwZW5jaWxzJ10sXG4gICAgICAgIGdyb3VwaW5nOiAnd2hvbGUgY2xhc3MnLFxuICAgICAgICBpc1N1YkZyaWVuZGx5OiB0cnVlLFxuICAgICAgICBzdWJOb3RlczogJ01hdGVyaWFscyBhcmUgaW4gdGhlIGN1cGJvYXJkJyxcbiAgICAgICAgdW5pdFBsYW46IHtcbiAgICAgICAgICBsb25nUmFuZ2VQbGFuOiB7XG4gICAgICAgICAgICBzdWJqZWN0OiAnTWF0aGVtYXRpY3MnLFxuICAgICAgICAgICAgZ3JhZGU6IDEsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdyZXMxJyxcbiAgICAgICAgICAgIHRpdGxlOiAnU3R1ZGVudCBXb3Jrc2hlZXQnLFxuICAgICAgICAgICAgdHlwZTogJ2hhbmRvdXQnLFxuICAgICAgICAgICAgY29udGVudDogJ1dvcmtzaGVldCBjb250ZW50JyxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgKHByaXNtYS5lVEZPTGVzc29uUGxhbi5maW5kVW5pcXVlIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUobW9ja0xlc3Nvbik7XG5cbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHJlcG9ydEdlbmVyYXRvclNlcnZpY2UuZ2VuZXJhdGVTdWJzdGl0dXRlUGxhblJlcG9ydChsZXNzb25JZCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVwb3J0LnRpdGxlKS50b0JlKCdTdWItRnJpZW5kbHkgTGVzc29uJyk7XG4gICAgICBleHBlY3QocmVwb3J0LmJhc2ljSW5mby5zdWJqZWN0KS50b0JlKCdNYXRoZW1hdGljcycpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5iYXNpY0luZm8uZ3JhZGUpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocmVwb3J0LmJhc2ljSW5mby5kdXJhdGlvbikudG9CZSg0NSk7XG4gICAgICBleHBlY3QocmVwb3J0Lm1hdGVyaWFscykudG9FcXVhbChbJ3dvcmtzaGVldHMnLCAncGVuY2lscyddKTtcbiAgICAgIGV4cGVjdChyZXBvcnQuYWN0aXZpdGllcy5vcGVuaW5nKS50b0JlKCdFYXN5IHN0YXJ0IGFjdGl2aXR5Jyk7XG4gICAgICBleHBlY3QocmVwb3J0LmFjdGl2aXRpZXMubWFpbikudG9CZSgnTWFpbiBhY3Rpdml0eSB3aXRoIGNsZWFyIGluc3RydWN0aW9ucycpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5hY3Rpdml0aWVzLmNsb3NpbmcpLnRvQmUoJ1NpbXBsZSB3cmFwLXVwJyk7XG4gICAgICBleHBlY3QocmVwb3J0LnNwZWNpYWxOb3RlcykudG9CZSgnTWF0ZXJpYWxzIGFyZSBpbiB0aGUgY3VwYm9hcmQnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQucmVzb3VyY2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG5vbi1zdWItZnJpZW5kbHkgbGVzc29uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGVzc29uSWQgPSAnbGVzc29uMSc7XG4gICAgICBjb25zdCBtb2NrTGVzc29uID0ge1xuICAgICAgICBpZDogJ2xlc3NvbjEnLFxuICAgICAgICB0aXRsZTogJ0NvbXBsZXggTGVzc29uJyxcbiAgICAgICAgaXNTdWJGcmllbmRseTogZmFsc2UsXG4gICAgICAgIHVuaXRQbGFuOiB7XG4gICAgICAgICAgbG9uZ1JhbmdlUGxhbjoge1xuICAgICAgICAgICAgc3ViamVjdDogJ01hdGhlbWF0aWNzJyxcbiAgICAgICAgICAgIGdyYWRlOiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICAocHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRVbmlxdWUgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrTGVzc29uKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlU3Vic3RpdHV0ZVBsYW5SZXBvcnQobGVzc29uSWQpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnTGVzc29uIHBsYW4gaXMgbm90IG1hcmtlZCBhcyBzdWJzdGl0dXRlLWZyaWVuZGx5Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZVVuaXRPdmVydmlld1JlcG9ydCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgY29tcHJlaGVuc2l2ZSB1bml0IG92ZXJ2aWV3JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdW5pdElkID0gJ3VuaXQxJztcbiAgICAgIGNvbnN0IG1vY2tVbml0ID0ge1xuICAgICAgICBpZDogJ3VuaXQxJyxcbiAgICAgICAgdGl0bGU6ICdUZXN0IFVuaXQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgZGVzY3JpcHRpb24nLFxuICAgICAgICBiaWdJZGVhczogJ1Rlc3QgYmlnIGlkZWFzJyxcbiAgICAgICAgc3RhcnREYXRlOiBuZXcgRGF0ZSgnMjAyNC0wOS0wMScpLFxuICAgICAgICBlbmREYXRlOiBuZXcgRGF0ZSgnMjAyNC0wOS0zMCcpLFxuICAgICAgICBlc3RpbWF0ZWRIb3VyczogMjAsXG4gICAgICAgIGxvbmdSYW5nZVBsYW46IHtcbiAgICAgICAgICBpZDogJ2xycDEnLFxuICAgICAgICAgIHRpdGxlOiAnVGVzdCBMUlAnLFxuICAgICAgICAgIHN1YmplY3Q6ICdNYXRoZW1hdGljcycsXG4gICAgICAgICAgZ3JhZGU6IDEsXG4gICAgICAgIH0sXG4gICAgICAgIGV4cGVjdGF0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGV4cGVjdGF0aW9uOiB7XG4gICAgICAgICAgICAgIGlkOiAnZXhwMScsXG4gICAgICAgICAgICAgIGNvZGU6ICdBMS4xJyxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUZXN0IGV4cGVjdGF0aW9uJyxcbiAgICAgICAgICAgICAgc3RyYW5kOiAnTnVtYmVyIFNlbnNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbGVzc29uUGxhbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2xlc3NvbjEnLFxuICAgICAgICAgICAgdGl0bGU6ICdMZXNzb24gMScsXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgnMjAyNC0wOS0xNScpLFxuICAgICAgICAgICAgZHVyYXRpb246IDQ1LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdsZXNzb24yJyxcbiAgICAgICAgICAgIHRpdGxlOiAnTGVzc29uIDInLFxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoJzIwMjQtMDktMjAnKSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAzMCxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICByZXNvdXJjZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3JlczEnLFxuICAgICAgICAgICAgdGl0bGU6ICdVbml0IFJlc291cmNlJyxcbiAgICAgICAgICAgIHR5cGU6ICdkb2N1bWVudCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIChwcmlzbWEudW5pdFBsYW4uZmluZFVuaXF1ZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVbml0KTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgcmVwb3J0R2VuZXJhdG9yU2VydmljZS5nZW5lcmF0ZVVuaXRPdmVydmlld1JlcG9ydCh1bml0SWQpO1xuXG4gICAgICBleHBlY3QocmVwb3J0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC51bml0LnRpdGxlKS50b0JlKCdUZXN0IFVuaXQnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQudW5pdC5lc3RpbWF0ZWRIb3VycykudG9CZSgyMCk7XG4gICAgICBleHBlY3QocmVwb3J0LmhpZXJhcmNoeS5sb25nUmFuZ2VQbGFuLnRpdGxlKS50b0JlKCdUZXN0IExSUCcpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5jdXJyaWN1bHVtQWxpZ25tZW50KS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVwb3J0Lmxlc3NvblN1bW1hcnkudG90YWxMZXNzb25zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5sZXNzb25TdW1tYXJ5LnRvdGFsRHVyYXRpb24pLnRvQmUoNzUpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5sZXNzb25TdW1tYXJ5Lmxlc3NvbnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXBvcnQucmVzb3VyY2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlcnJvciBoYW5kbGluZycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGRhdGFiYXNlIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlcklkID0gMTtcbiAgICAgIChwcmlzbWEuY3VycmljdWx1bUV4cGVjdGF0aW9uLmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBFcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKVxuICAgICAgKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlQ3VycmljdWx1bUNvdmVyYWdlUmVwb3J0KHVzZXJJZClcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIHVzZXIgSURzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlcklkID0gLTE7XG4gICAgICAocHJpc21hLmN1cnJpY3VsdW1FeHBlY3RhdGlvbi5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIChwcmlzbWEubG9uZ1JhbmdlUGxhbi5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIChwcmlzbWEudW5pdFBsYW4uZmluZE1hbnkgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICAocHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLmdlbmVyYXRlQ3VycmljdWx1bUNvdmVyYWdlUmVwb3J0KHVzZXJJZCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQudG90YWxFeHBlY3RhdGlvbnMpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9