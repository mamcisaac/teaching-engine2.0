2542f4c95fbbe3c9d824f53bd67dd9c1
/* istanbul ignore next */
function cov_yriw8j805() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/discovery-scheduler.ts";
  var hash = "1cb6c3ad276d5b2dd8a08285e2c8020d0aa151f3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/discovery-scheduler.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 23
        }
      },
      "1": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "2": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "3": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "4": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "5": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 58
        }
      },
      "6": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 72
        }
      },
      "7": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 67
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "9": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "11": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 69,
          column: 3
        }
      },
      "12": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "13": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 49,
          column: 37
        }
      },
      "14": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 62
        }
      },
      "15": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "16": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "17": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "18": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 48
        }
      },
      "19": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "20": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 101,
          column: 3
        }
      },
      "21": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "22": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 51
        }
      },
      "23": {
        start: {
          line: 77,
          column: 23
        },
        end: {
          line: 84,
          column: 10
        }
      },
      "24": {
        start: {
          line: 85,
          column: 21
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "25": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "26": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 51
        }
      },
      "27": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "28": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 133,
          column: 3
        }
      },
      "29": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "30": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 37
        }
      },
      "31": {
        start: {
          line: 109,
          column: 29
        },
        end: {
          line: 109,
          column: 61
        }
      },
      "32": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 110,
          column: 81
        }
      },
      "33": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "34": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "35": {
        start: {
          line: 117,
          column: 21
        },
        end: {
          line: 117,
          column: 62
        }
      },
      "36": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "37": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 58
        }
      },
      "38": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "39": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "40": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "41": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 37
        }
      },
      "42": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 149,
          column: 11
        }
      },
      "43": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 65
        }
      },
      "44": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 59
        }
      },
      "45": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "46": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 52
        }
      },
      "47": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "48": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 196,
          column: 3
        }
      },
      "49": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "50": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 37
        }
      },
      "51": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "52": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "53": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "54": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "55": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 51
        }
      },
      "56": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "57": {
        start: {
          line: 201,
          column: 0
        },
        end: {
          line: 220,
          column: 3
        }
      },
      "58": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 219,
          column: 5
        }
      },
      "59": {
        start: {
          line: 203,
          column: 22
        },
        end: {
          line: 203,
          column: 67
        }
      },
      "60": {
        start: {
          line: 204,
          column: 29
        },
        end: {
          line: 204,
          column: 72
        }
      },
      "61": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "62": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 59
        }
      },
      "63": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 218,
          column: 11
        }
      },
      "64": {
        start: {
          line: 225,
          column: 0
        },
        end: {
          line: 243,
          column: 3
        }
      },
      "65": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 242,
          column: 5
        }
      },
      "66": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 53
        }
      },
      "67": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "68": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 60
        }
      },
      "69": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "70": {
        start: {
          line: 248,
          column: 0
        },
        end: {
          line: 265,
          column: 3
        }
      },
      "71": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 264,
          column: 5
        }
      },
      "72": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 51
        }
      },
      "73": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 256,
          column: 11
        }
      },
      "74": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 58
        }
      },
      "75": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "76": {
        start: {
          line: 270,
          column: 0
        },
        end: {
          line: 288,
          column: 3
        }
      },
      "77": {
        start: {
          line: 271,
          column: 4
        },
        end: {
          line: 287,
          column: 5
        }
      },
      "78": {
        start: {
          line: 272,
          column: 29
        },
        end: {
          line: 272,
          column: 72
        }
      },
      "79": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 279,
          column: 11
        }
      },
      "80": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 57
        }
      },
      "81": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 286,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 21,
            column: 38
          }
        },
        loc: {
          start: {
            line: 21,
            column: 57
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 45
          },
          end: {
            line: 47,
            column: 46
          }
        },
        loc: {
          start: {
            line: 47,
            column: 65
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 74,
            column: 39
          }
        },
        loc: {
          start: {
            line: 74,
            column: 58
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 74
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 106,
            column: 54
          },
          end: {
            line: 106,
            column: 55
          }
        },
        loc: {
          start: {
            line: 106,
            column: 74
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 106
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 138,
            column: 54
          },
          end: {
            line: 138,
            column: 55
          }
        },
        loc: {
          start: {
            line: 138,
            column: 74
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 138
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 144,
            column: 18
          },
          end: {
            line: 144,
            column: 19
          }
        },
        loc: {
          start: {
            line: 144,
            column: 24
          },
          end: {
            line: 146,
            column: 9
          }
        },
        line: 144
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 19
          },
          end: {
            line: 147,
            column: 20
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 149,
            column: 9
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 171,
            column: 48
          },
          end: {
            line: 171,
            column: 49
          }
        },
        loc: {
          start: {
            line: 171,
            column: 68
          },
          end: {
            line: 196,
            column: 1
          }
        },
        line: 171
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 201,
            column: 37
          },
          end: {
            line: 201,
            column: 38
          }
        },
        loc: {
          start: {
            line: 201,
            column: 57
          },
          end: {
            line: 220,
            column: 1
          }
        },
        line: 201
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 225,
            column: 43
          },
          end: {
            line: 225,
            column: 44
          }
        },
        loc: {
          start: {
            line: 225,
            column: 63
          },
          end: {
            line: 243,
            column: 1
          }
        },
        line: 225
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 248,
            column: 41
          },
          end: {
            line: 248,
            column: 42
          }
        },
        loc: {
          start: {
            line: 248,
            column: 61
          },
          end: {
            line: 265,
            column: 1
          }
        },
        line: 248
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 270,
            column: 39
          },
          end: {
            line: 270,
            column: 40
          }
        },
        loc: {
          start: {
            line: 270,
            column: 59
          },
          end: {
            line: 288,
            column: 1
          }
        },
        line: 270
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 49
          },
          end: {
            line: 98,
            column: 61
          }
        }, {
          start: {
            line: 98,
            column: 64
          },
          end: {
            line: 98,
            column: 87
          }
        }],
        line: 98
      },
      "2": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "3": {
        loc: {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 44
          },
          end: {
            line: 122,
            column: 53
          }
        }, {
          start: {
            line: 122,
            column: 56
          },
          end: {
            line: 122,
            column: 66
          }
        }],
        line: 122
      },
      "4": {
        loc: {
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 130,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 49
          },
          end: {
            line: 130,
            column: 61
          }
        }, {
          start: {
            line: 130,
            column: 64
          },
          end: {
            line: 130,
            column: 94
          }
        }],
        line: 130
      },
      "5": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/discovery-scheduler.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/discovery-scheduler.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { z } from 'zod';\nimport { authMiddleware } from '../middleware/auth';\nimport { discoverySchedulerService } from '../services/discoverySchedulerService';\n\nconst router = Router();\n\n// Validation schemas\nconst TaskSchema = z.object({\n  name: z.string().min(1).max(100),\n  type: z.enum(['discovery', 'verification', 'cleanup']),\n  frequency: z.enum(['daily', 'weekly', 'monthly']),\n  isActive: z.boolean().optional().default(true),\n  config: z.record(z.unknown()).optional().default({}),\n});\n\nconst TaskStatusSchema = z.object({\n  isActive: z.boolean(),\n});\n\n/**\n * Get all scheduled tasks\n * GET /api/discovery-scheduler/tasks\n */\nrouter.get('/tasks', authMiddleware, async (req, res) => {\n  try {\n    const tasks = discoverySchedulerService.getTasks();\n    const runningTasks = discoverySchedulerService.getRunningTasks();\n    const stats = discoverySchedulerService.getSchedulerStats();\n\n    res.json({\n      success: true,\n      data: {\n        tasks,\n        runningTasks,\n        stats,\n      },\n    });\n  } catch (error) {\n    console.error('Get tasks error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve scheduled tasks',\n    });\n  }\n});\n\n/**\n * Get a specific task\n * GET /api/discovery-scheduler/tasks/:taskId\n */\nrouter.get('/tasks/:taskId', authMiddleware, async (req, res) => {\n  try {\n    const { taskId } = req.params;\n    const task = discoverySchedulerService.getTask(taskId);\n\n    if (!task) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found',\n      });\n    }\n\n    res.json({\n      success: true,\n      data: { task },\n    });\n  } catch (error) {\n    console.error('Get task error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve task',\n    });\n  }\n});\n\n/**\n * Create a new scheduled task\n * POST /api/discovery-scheduler/tasks\n */\nrouter.post('/tasks', authMiddleware, async (req, res) => {\n  try {\n    const taskData = TaskSchema.parse(req.body);\n    \n    const taskId = discoverySchedulerService.addTask({\n      name: taskData.name,\n      type: taskData.type,\n      frequency: taskData.frequency,\n      isActive: taskData.isActive,\n      config: taskData.config,\n      nextRun: new Date(Date.now() + 60000), // Start in 1 minute\n    });\n\n    const task = discoverySchedulerService.getTask(taskId);\n\n    res.status(201).json({\n      success: true,\n      data: {\n        task,\n        message: 'Task created successfully',\n      },\n    });\n  } catch (error) {\n    console.error('Create task error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to create task',\n    });\n  }\n});\n\n/**\n * Update task status (enable/disable)\n * PATCH /api/discovery-scheduler/tasks/:taskId/status\n */\nrouter.patch('/tasks/:taskId/status', authMiddleware, async (req, res) => {\n  try {\n    const { taskId } = req.params;\n    const { isActive } = TaskStatusSchema.parse(req.body);\n\n    const updated = discoverySchedulerService.setTaskStatus(taskId, isActive);\n\n    if (!updated) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found',\n      });\n    }\n\n    const task = discoverySchedulerService.getTask(taskId);\n\n    res.json({\n      success: true,\n      data: {\n        task,\n        message: `Task ${isActive ? 'enabled' : 'disabled'} successfully`,\n      },\n    });\n  } catch (error) {\n    console.error('Update task status error:', error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof z.ZodError ? error.errors : 'Failed to update task status',\n    });\n  }\n});\n\n/**\n * Manually trigger a task\n * POST /api/discovery-scheduler/tasks/:taskId/trigger\n */\nrouter.post('/tasks/:taskId/trigger', authMiddleware, async (req, res) => {\n  try {\n    const { taskId } = req.params;\n\n    // Start task execution in background\n    discoverySchedulerService\n      .triggerTask(taskId)\n      .then(() => {\n        console.log(`Task ${taskId} completed successfully`);\n      })\n      .catch((error) => {\n        console.error(`Task ${taskId} failed:`, error);\n      });\n\n    res.json({\n      success: true,\n      data: {\n        taskId,\n        message: 'Task triggered successfully',\n        status: 'started',\n      },\n    });\n  } catch (error) {\n    console.error('Trigger task error:', error);\n    res.status(400).json({\n      success: false,\n      error: 'Failed to trigger task',\n    });\n  }\n});\n\n/**\n * Delete a scheduled task\n * DELETE /api/discovery-scheduler/tasks/:taskId\n */\nrouter.delete('/tasks/:taskId', authMiddleware, async (req, res) => {\n  try {\n    const { taskId } = req.params;\n\n    const removed = discoverySchedulerService.removeTask(taskId);\n\n    if (!removed) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found',\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        taskId,\n        message: 'Task deleted successfully',\n      },\n    });\n  } catch (error) {\n    console.error('Delete task error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete task',\n    });\n  }\n});\n\n/**\n * Get scheduler statistics\n * GET /api/discovery-scheduler/stats\n */\nrouter.get('/stats', authMiddleware, async (req, res) => {\n  try {\n    const stats = discoverySchedulerService.getSchedulerStats();\n    const runningTasks = discoverySchedulerService.getRunningTasks();\n\n    res.json({\n      success: true,\n      data: {\n        ...stats,\n        runningTasksDetail: runningTasks,\n      },\n    });\n  } catch (error) {\n    console.error('Get scheduler stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve scheduler statistics',\n    });\n  }\n});\n\n/**\n * Initialize the scheduler (admin only)\n * POST /api/discovery-scheduler/initialize\n */\nrouter.post('/initialize', authMiddleware, async (req, res) => {\n  try {\n    await discoverySchedulerService.initialize();\n\n    res.json({\n      success: true,\n      data: {\n        message: 'Scheduler initialized successfully',\n        stats: discoverySchedulerService.getSchedulerStats(),\n      },\n    });\n  } catch (error) {\n    console.error('Initialize scheduler error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to initialize scheduler',\n    });\n  }\n});\n\n/**\n * Shutdown the scheduler (admin only)\n * POST /api/discovery-scheduler/shutdown\n */\nrouter.post('/shutdown', authMiddleware, async (req, res) => {\n  try {\n    await discoverySchedulerService.shutdown();\n\n    res.json({\n      success: true,\n      data: {\n        message: 'Scheduler shutdown successfully',\n      },\n    });\n  } catch (error) {\n    console.error('Shutdown scheduler error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to shutdown scheduler',\n    });\n  }\n});\n\n/**\n * Get running tasks with details\n * GET /api/discovery-scheduler/running\n */\nrouter.get('/running', authMiddleware, async (req, res) => {\n  try {\n    const runningTasks = discoverySchedulerService.getRunningTasks();\n\n    res.json({\n      success: true,\n      data: {\n        runningTasks,\n        count: runningTasks.length,\n      },\n    });\n  } catch (error) {\n    console.error('Get running tasks error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve running tasks',\n    });\n  }\n});\n\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1cb6c3ad276d5b2dd8a08285e2c8020d0aa151f3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yriw8j805 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yriw8j805();
import { Router } from 'express';
import { z } from 'zod';
import { authMiddleware } from '../middleware/auth';
import { discoverySchedulerService } from '../services/discoverySchedulerService';
const router =
/* istanbul ignore next */
(cov_yriw8j805().s[0]++, Router());
// Validation schemas
const TaskSchema =
/* istanbul ignore next */
(cov_yriw8j805().s[1]++, z.object({
  name: z.string().min(1).max(100),
  type: z.enum(['discovery', 'verification', 'cleanup']),
  frequency: z.enum(['daily', 'weekly', 'monthly']),
  isActive: z.boolean().optional().default(true),
  config: z.record(z.unknown()).optional().default({})
}));
const TaskStatusSchema =
/* istanbul ignore next */
(cov_yriw8j805().s[2]++, z.object({
  isActive: z.boolean()
}));
/**
 * Get all scheduled tasks
 * GET /api/discovery-scheduler/tasks
 */
/* istanbul ignore next */
cov_yriw8j805().s[3]++;
router.get('/tasks', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[0]++;
  cov_yriw8j805().s[4]++;
  try {
    const tasks =
    /* istanbul ignore next */
    (cov_yriw8j805().s[5]++, discoverySchedulerService.getTasks());
    const runningTasks =
    /* istanbul ignore next */
    (cov_yriw8j805().s[6]++, discoverySchedulerService.getRunningTasks());
    const stats =
    /* istanbul ignore next */
    (cov_yriw8j805().s[7]++, discoverySchedulerService.getSchedulerStats());
    /* istanbul ignore next */
    cov_yriw8j805().s[8]++;
    res.json({
      success: true,
      data: {
        tasks,
        runningTasks,
        stats
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[9]++;
    console.error('Get tasks error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[10]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve scheduled tasks'
    });
  }
});
/**
 * Get a specific task
 * GET /api/discovery-scheduler/tasks/:taskId
 */
/* istanbul ignore next */
cov_yriw8j805().s[11]++;
router.get('/tasks/:taskId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[1]++;
  cov_yriw8j805().s[12]++;
  try {
    const {
      taskId
    } =
    /* istanbul ignore next */
    (cov_yriw8j805().s[13]++, req.params);
    const task =
    /* istanbul ignore next */
    (cov_yriw8j805().s[14]++, discoverySchedulerService.getTask(taskId));
    /* istanbul ignore next */
    cov_yriw8j805().s[15]++;
    if (!task) {
      /* istanbul ignore next */
      cov_yriw8j805().b[0][0]++;
      cov_yriw8j805().s[16]++;
      return res.status(404).json({
        success: false,
        error: 'Task not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_yriw8j805().b[0][1]++;
    }
    cov_yriw8j805().s[17]++;
    res.json({
      success: true,
      data: {
        task
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[18]++;
    console.error('Get task error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[19]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve task'
    });
  }
});
/**
 * Create a new scheduled task
 * POST /api/discovery-scheduler/tasks
 */
/* istanbul ignore next */
cov_yriw8j805().s[20]++;
router.post('/tasks', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[2]++;
  cov_yriw8j805().s[21]++;
  try {
    const taskData =
    /* istanbul ignore next */
    (cov_yriw8j805().s[22]++, TaskSchema.parse(req.body));
    const taskId =
    /* istanbul ignore next */
    (cov_yriw8j805().s[23]++, discoverySchedulerService.addTask({
      name: taskData.name,
      type: taskData.type,
      frequency: taskData.frequency,
      isActive: taskData.isActive,
      config: taskData.config,
      nextRun: new Date(Date.now() + 60000) // Start in 1 minute
    }));
    const task =
    /* istanbul ignore next */
    (cov_yriw8j805().s[24]++, discoverySchedulerService.getTask(taskId));
    /* istanbul ignore next */
    cov_yriw8j805().s[25]++;
    res.status(201).json({
      success: true,
      data: {
        task,
        message: 'Task created successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[26]++;
    console.error('Create task error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[27]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_yriw8j805().b[1][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_yriw8j805().b[1][1]++, 'Failed to create task')
    });
  }
});
/**
 * Update task status (enable/disable)
 * PATCH /api/discovery-scheduler/tasks/:taskId/status
 */
/* istanbul ignore next */
cov_yriw8j805().s[28]++;
router.patch('/tasks/:taskId/status', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[3]++;
  cov_yriw8j805().s[29]++;
  try {
    const {
      taskId
    } =
    /* istanbul ignore next */
    (cov_yriw8j805().s[30]++, req.params);
    const {
      isActive
    } =
    /* istanbul ignore next */
    (cov_yriw8j805().s[31]++, TaskStatusSchema.parse(req.body));
    const updated =
    /* istanbul ignore next */
    (cov_yriw8j805().s[32]++, discoverySchedulerService.setTaskStatus(taskId, isActive));
    /* istanbul ignore next */
    cov_yriw8j805().s[33]++;
    if (!updated) {
      /* istanbul ignore next */
      cov_yriw8j805().b[2][0]++;
      cov_yriw8j805().s[34]++;
      return res.status(404).json({
        success: false,
        error: 'Task not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_yriw8j805().b[2][1]++;
    }
    const task =
    /* istanbul ignore next */
    (cov_yriw8j805().s[35]++, discoverySchedulerService.getTask(taskId));
    /* istanbul ignore next */
    cov_yriw8j805().s[36]++;
    res.json({
      success: true,
      data: {
        task,
        message: `Task ${isActive ?
        /* istanbul ignore next */
        (cov_yriw8j805().b[3][0]++, 'enabled') :
        /* istanbul ignore next */
        (cov_yriw8j805().b[3][1]++, 'disabled')} successfully`
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[37]++;
    console.error('Update task status error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[38]++;
    res.status(400).json({
      success: false,
      error: error instanceof z.ZodError ?
      /* istanbul ignore next */
      (cov_yriw8j805().b[4][0]++, error.errors) :
      /* istanbul ignore next */
      (cov_yriw8j805().b[4][1]++, 'Failed to update task status')
    });
  }
});
/**
 * Manually trigger a task
 * POST /api/discovery-scheduler/tasks/:taskId/trigger
 */
/* istanbul ignore next */
cov_yriw8j805().s[39]++;
router.post('/tasks/:taskId/trigger', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[4]++;
  cov_yriw8j805().s[40]++;
  try {
    const {
      taskId
    } =
    /* istanbul ignore next */
    (cov_yriw8j805().s[41]++, req.params);
    // Start task execution in background
    /* istanbul ignore next */
    cov_yriw8j805().s[42]++;
    discoverySchedulerService.triggerTask(taskId).then(() => {
      /* istanbul ignore next */
      cov_yriw8j805().f[5]++;
      cov_yriw8j805().s[43]++;
      console.log(`Task ${taskId} completed successfully`);
    }).catch(error => {
      /* istanbul ignore next */
      cov_yriw8j805().f[6]++;
      cov_yriw8j805().s[44]++;
      console.error(`Task ${taskId} failed:`, error);
    });
    /* istanbul ignore next */
    cov_yriw8j805().s[45]++;
    res.json({
      success: true,
      data: {
        taskId,
        message: 'Task triggered successfully',
        status: 'started'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[46]++;
    console.error('Trigger task error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[47]++;
    res.status(400).json({
      success: false,
      error: 'Failed to trigger task'
    });
  }
});
/**
 * Delete a scheduled task
 * DELETE /api/discovery-scheduler/tasks/:taskId
 */
/* istanbul ignore next */
cov_yriw8j805().s[48]++;
router.delete('/tasks/:taskId', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[7]++;
  cov_yriw8j805().s[49]++;
  try {
    const {
      taskId
    } =
    /* istanbul ignore next */
    (cov_yriw8j805().s[50]++, req.params);
    const removed =
    /* istanbul ignore next */
    (cov_yriw8j805().s[51]++, discoverySchedulerService.removeTask(taskId));
    /* istanbul ignore next */
    cov_yriw8j805().s[52]++;
    if (!removed) {
      /* istanbul ignore next */
      cov_yriw8j805().b[5][0]++;
      cov_yriw8j805().s[53]++;
      return res.status(404).json({
        success: false,
        error: 'Task not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_yriw8j805().b[5][1]++;
    }
    cov_yriw8j805().s[54]++;
    res.json({
      success: true,
      data: {
        taskId,
        message: 'Task deleted successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[55]++;
    console.error('Delete task error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[56]++;
    res.status(500).json({
      success: false,
      error: 'Failed to delete task'
    });
  }
});
/**
 * Get scheduler statistics
 * GET /api/discovery-scheduler/stats
 */
/* istanbul ignore next */
cov_yriw8j805().s[57]++;
router.get('/stats', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[8]++;
  cov_yriw8j805().s[58]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_yriw8j805().s[59]++, discoverySchedulerService.getSchedulerStats());
    const runningTasks =
    /* istanbul ignore next */
    (cov_yriw8j805().s[60]++, discoverySchedulerService.getRunningTasks());
    /* istanbul ignore next */
    cov_yriw8j805().s[61]++;
    res.json({
      success: true,
      data: {
        ...stats,
        runningTasksDetail: runningTasks
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[62]++;
    console.error('Get scheduler stats error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[63]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve scheduler statistics'
    });
  }
});
/**
 * Initialize the scheduler (admin only)
 * POST /api/discovery-scheduler/initialize
 */
/* istanbul ignore next */
cov_yriw8j805().s[64]++;
router.post('/initialize', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[9]++;
  cov_yriw8j805().s[65]++;
  try {
    /* istanbul ignore next */
    cov_yriw8j805().s[66]++;
    await discoverySchedulerService.initialize();
    /* istanbul ignore next */
    cov_yriw8j805().s[67]++;
    res.json({
      success: true,
      data: {
        message: 'Scheduler initialized successfully',
        stats: discoverySchedulerService.getSchedulerStats()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[68]++;
    console.error('Initialize scheduler error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[69]++;
    res.status(500).json({
      success: false,
      error: 'Failed to initialize scheduler'
    });
  }
});
/**
 * Shutdown the scheduler (admin only)
 * POST /api/discovery-scheduler/shutdown
 */
/* istanbul ignore next */
cov_yriw8j805().s[70]++;
router.post('/shutdown', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[10]++;
  cov_yriw8j805().s[71]++;
  try {
    /* istanbul ignore next */
    cov_yriw8j805().s[72]++;
    await discoverySchedulerService.shutdown();
    /* istanbul ignore next */
    cov_yriw8j805().s[73]++;
    res.json({
      success: true,
      data: {
        message: 'Scheduler shutdown successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[74]++;
    console.error('Shutdown scheduler error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[75]++;
    res.status(500).json({
      success: false,
      error: 'Failed to shutdown scheduler'
    });
  }
});
/**
 * Get running tasks with details
 * GET /api/discovery-scheduler/running
 */
/* istanbul ignore next */
cov_yriw8j805().s[76]++;
router.get('/running', authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_yriw8j805().f[11]++;
  cov_yriw8j805().s[77]++;
  try {
    const runningTasks =
    /* istanbul ignore next */
    (cov_yriw8j805().s[78]++, discoverySchedulerService.getRunningTasks());
    /* istanbul ignore next */
    cov_yriw8j805().s[79]++;
    res.json({
      success: true,
      data: {
        runningTasks,
        count: runningTasks.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_yriw8j805().s[80]++;
    console.error('Get running tasks error:', error);
    /* istanbul ignore next */
    cov_yriw8j805().s[81]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve running tasks'
    });
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,