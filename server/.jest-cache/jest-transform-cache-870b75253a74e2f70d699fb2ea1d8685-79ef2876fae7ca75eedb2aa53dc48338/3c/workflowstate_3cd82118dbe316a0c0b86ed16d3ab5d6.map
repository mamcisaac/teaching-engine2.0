{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/workflow-state.ts","mappings":"AAAA,OAAO,EAAE,MAAM,EAAW,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,oBAAoB,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;AAGnF,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,EAAE;IAC/C,IAAI,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAClB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,MAAM,aAAa,GAAG,MAAM,oBAAoB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAE9E,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gCAAgC,EAAE,CAAC,CAAC;IACpE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,EAAE;IACvD,IAAI,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAClB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAe,CAAC;QAE1D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACxE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8BAA8B,EAAE,CAAC,CAAC;IAClE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,EAAE;IACnD,IAAI,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAClB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAErC,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,0CAA0C,EAAE,CAAC,CAAC;QACrF,CAAC;QAED,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,EAAe,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YAClD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,MAAM,UAAU,GAAG,MAAM,oBAAoB,CAAC,uBAAuB,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEnG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;QAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qCAAqC,EAAE,CAAC,CAAC;IACzE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,EAAE,GAAY,EAAE,GAAG,EAAE,EAAE;IAClD,IAAI,CAAC;QACH,MAAM,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,GAAG,MAAM,MAAM,CAAC,kCAAkC,CAAC,CAAC;QAEtG,GAAG,CAAC,IAAI,CAAC;YACP,MAAM,EAAE,mBAAmB;YAC3B,QAAQ,EAAE,mBAAmB;SAC9B,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;QAC1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mCAAmC,EAAE,CAAC,CAAC;IACvE,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,eAAe,MAAM,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/workflow-state.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { workflowStateService, ETFOLevel } from '../services/workflowStateService';\n\n\nconst router = Router();\n\n/**\n * GET /api/workflow/state\n * Get the current workflow state for the authenticated user\n */\nrouter.get('/state', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const userId = req.user.id;\n    const workflowState = await workflowStateService.getUserWorkflowState(userId);\n\n    res.json(workflowState);\n  } catch (error) {\n    console.error('Error fetching workflow state:', error);\n    res.status(500).json({ error: 'Failed to fetch workflow state' });\n  }\n});\n\n/**\n * GET /api/workflow/access/:level\n * Check if user can access a specific level\n */\nrouter.get('/access/:level', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const userId = req.user.id;\n    const level = req.params.level.toUpperCase() as ETFOLevel;\n\n    if (!Object.values(ETFOLevel).includes(level)) {\n      return res.status(400).json({ error: 'Invalid level' });\n    }\n\n    const access = await workflowStateService.canAccessLevel(userId, level);\n    res.json(access);\n  } catch (error) {\n    console.error('Error checking level access:', error);\n    res.status(500).json({ error: 'Failed to check level access' });\n  }\n});\n\n/**\n * POST /api/workflow/validate\n * Validate that an entity has all required fields for its level\n */\nrouter.post('/validate', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const { level, entityId } = req.body;\n\n    if (!level || !entityId) {\n      return res.status(400).json({ error: 'Missing required fields: level, entityId' });\n    }\n\n    const levelEnum = level.toUpperCase() as ETFOLevel;\n    if (!Object.values(ETFOLevel).includes(levelEnum)) {\n      return res.status(400).json({ error: 'Invalid level' });\n    }\n\n    const userId = req.user.id;\n    const validation = await workflowStateService.validateLevelCompletion(userId, levelEnum, entityId);\n\n    res.json(validation);\n  } catch (error) {\n    console.error('Error validating level completion:', error);\n    res.status(500).json({ error: 'Failed to validate level completion' });\n  }\n});\n\n/**\n * GET /api/workflow/metadata\n * Get metadata for all workflow levels\n */\nrouter.get('/metadata', async (req: Request, res) => {\n  try {\n    const { ETFO_LEVEL_METADATA, ETFO_LEVEL_SEQUENCE } = await import('../services/workflowStateService');\n    \n    res.json({\n      levels: ETFO_LEVEL_METADATA,\n      sequence: ETFO_LEVEL_SEQUENCE,\n    });\n  } catch (error) {\n    console.error('Error fetching workflow metadata:', error);\n    res.status(500).json({ error: 'Failed to fetch workflow metadata' });\n  }\n});\n\nexport default router;"],"version":3}