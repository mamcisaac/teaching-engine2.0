{"version":3,"names":["cov_1qxx2hr2zs","actualCoverage","BaseService","OERConnector","CurriculumWebConnector","EducationWebConnector","ActivityDiscoveryService","connectors","s","Map","cache","CACHE_TTL","constructor","f","initializeConnectors","set","logger","info","size","error","search","params","userId","startTime","Date","now","cacheKey","generateCacheKey","cached","getFromCache","b","debug","normalizedParams","normalizeSearchParams","sourcesToSearch","sources","filter","has","Array","from","keys","searchPromises","map","sourceId","connector","get","results","length","allResults","Promise","all","flatResults","flat","filteredResults","filterAndRankResults","paginatedResults","applyPagination","result","activities","total","hasMore","offset","searchParams","executionTime","setCache","resultsCount","totalFound","Error","getActivity","source","externalId","warn","activity","getActivityDetails","getActivityById","id","externalIdParts","split","join","importActivity","prisma","activityId","activityDetails","externalActivity","findUnique","where","source_externalId","create","data","activityImport","lessonPlanId","lessonSection","customizations","notes","include","lessonPlan","select","title","date","rateActivity","rating","review","details","activityRating","upsert","userId_activityId","update","wouldRecommend","gradeUsed","subjectUsed","workedWell","challenges","getUserCollections","collections","activityCollection","findMany","items","orderBy","updatedAt","createCollection","collection","name","description","isPublic","collectionName","addToCollection","collectionId","findFirst","activityCollectionItem","success","removeFromCollection","delete","collectionId_activityId","getRecommendedActivities","limit","eTFOLessonPlan","unitPlan","longRangePlan","expectations","expectation","grade","subject","language","searchResult","basedOn","criteria","gradeLevel","Math","min","max","filtered","gradeMin","gradeMax","onlyFree","isFree","activityType","includes","materials","activityMaterials","isArray","requireAllMaterials","every","material","some","am","toLowerCase","sort","a","sourceRating","lastVerified","getTime","slice","type","JSON","stringify","key","expiry","cleanupCache","value","entries","getAvailableSources","isSourceAvailable","serviceInstance","getActivityDiscoveryService","activityDiscoveryService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { ExternalActivity, Prisma } from '@teaching-engine/database';\nimport { BaseConnector } from './connectors/baseConnector';\nimport { OERConnector } from './connectors/oerConnector';\nimport { CurriculumWebConnector } from './connectors/curriculumWebConnector';\nimport { EducationWebConnector } from './connectors/educationWebConnector';\n\nexport interface SearchParams {\n  query?: string;\n  grade?: number;\n  subject?: string;\n  gradeLevel?: number;\n  language?: string;\n  duration?: {\n    min?: number;\n    max?: number;\n  };\n  materials?: string[];\n  requireAllMaterials?: boolean;\n  activityType?: string[];\n  curriculumAlignment?: string[];\n  sources?: string[];\n  onlyFree?: boolean;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface ActivitySearchResult {\n  activities: ExternalActivity[];\n  total: number;\n  hasMore: boolean;\n  searchParams: SearchParams;\n  sources: string[];\n  executionTime: number;\n}\n\nexport interface ActivityRecommendations {\n  activities: ExternalActivity[];\n  basedOn: 'lessonPlan' | 'userHistory' | 'similarTeachers';\n  lessonPlanId?: string;\n  limit: number;\n  criteria: string[];\n}\n\n/**\n * Enhanced Activity Discovery Service\n * Manages multiple connectors to search educational activities from various sources\n */\nexport class ActivityDiscoveryService extends BaseService {\n  private connectors: Map<string, BaseConnector> = new Map();\n  private cache: Map<string, { data: unknown; expiry: number }> = new Map();\n  private readonly CACHE_TTL = 1000 * 60 * 30; // 30 minutes\n\n  constructor() {\n    super('ActivityDiscoveryService');\n    this.initializeConnectors();\n  }\n\n  /**\n   * Initialize available connectors\n   */\n  private initializeConnectors(): void {\n    try {\n      // Add OER Commons connector\n      this.connectors.set('oer', new OERConnector());\n\n      // Add Curriculum Web connector (government resources)\n      this.connectors.set('curriculum', new CurriculumWebConnector());\n\n      // Add Educational Websites connector (Khan Academy, ReadWorks, etc.)\n      this.connectors.set('education', new EducationWebConnector());\n\n      this.logger.info(`Initialized ${this.connectors.size} activity discovery connectors`);\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to initialize connectors');\n    }\n  }\n\n  /**\n   * Search for activities across all available sources\n   */\n  async search(params: SearchParams, userId: number): Promise<ActivitySearchResult> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info({ params, userId }, 'Starting activity search');\n\n      // Check cache first\n      const cacheKey = this.generateCacheKey('search', params);\n      const cached = this.getFromCache<ActivitySearchResult>(cacheKey);\n      if (cached) {\n        this.logger.debug('Returning cached search results');\n        return cached;\n      }\n\n      // Normalize and validate parameters\n      const normalizedParams = this.normalizeSearchParams(params);\n\n      // Determine which sources to search\n      const sourcesToSearch = normalizedParams.sources\n        ? normalizedParams.sources.filter((s) => this.connectors.has(s))\n        : Array.from(this.connectors.keys());\n\n      // Search each connector in parallel\n      const searchPromises = sourcesToSearch.map(async (sourceId) => {\n        const connector = this.connectors.get(sourceId);\n        if (!connector) return [];\n\n        try {\n          this.logger.debug(`Searching ${sourceId} connector`);\n          const results = await connector.search(normalizedParams);\n          this.logger.debug(`${sourceId} returned ${results.length} results`);\n          return results;\n        } catch (error) {\n          this.logger.error({ error, sourceId }, `Search failed for ${sourceId}`);\n          return [];\n        }\n      });\n\n      const allResults = await Promise.all(searchPromises);\n      const flatResults = allResults.flat() as ExternalActivity[];\n\n      // Apply additional filtering and ranking\n      const filteredResults = this.filterAndRankResults(flatResults, normalizedParams);\n\n      // Apply pagination\n      const paginatedResults = this.applyPagination(filteredResults, normalizedParams);\n\n      const result: ActivitySearchResult = {\n        activities: paginatedResults,\n        total: filteredResults.length,\n        hasMore: (normalizedParams.offset || 0) + paginatedResults.length < filteredResults.length,\n        searchParams: normalizedParams,\n        sources: sourcesToSearch,\n        executionTime: Date.now() - startTime,\n      };\n\n      // Cache the result\n      this.setCache(cacheKey, result);\n\n      this.logger.info(\n        {\n          resultsCount: paginatedResults.length,\n          totalFound: filteredResults.length,\n          executionTime: result.executionTime,\n          sources: sourcesToSearch,\n        },\n        'Activity search completed',\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error({ error, params, userId }, 'Activity search failed');\n      throw new Error('Activity search failed');\n    }\n  }\n\n  /**\n   * Get activity details from a specific source\n   */\n  async getActivity(source: string, externalId: string): Promise<ExternalActivity | null> {\n    try {\n      const cacheKey = this.generateCacheKey('activity', { source, externalId });\n      const cached = this.getFromCache<ExternalActivity>(cacheKey);\n      if (cached) {\n        return cached;\n      }\n\n      const connector = this.connectors.get(source);\n      if (!connector) {\n        this.logger.warn({ source }, 'Unknown activity source');\n        return null;\n      }\n\n      const activity = await connector.getActivityDetails(externalId);\n      if (activity) {\n        this.setCache(cacheKey, activity);\n      }\n\n      return activity as ExternalActivity | null;\n    } catch (error) {\n      this.logger.error({ error, source, externalId }, 'Failed to get activity details');\n      return null;\n    }\n  }\n\n  /**\n   * Get activity by composite ID (source-externalId)\n   */\n  async getActivityById(id: string): Promise<ExternalActivity | null> {\n    const [source, ...externalIdParts] = id.split('-');\n    const externalId = externalIdParts.join('-');\n    return this.getActivity(source || 'unknown', externalId || id);\n  }\n\n  /**\n   * Alias for getActivityById for backward compatibility\n   */\n  async getActivityDetails(id: string): Promise<ExternalActivity | null> {\n    return this.getActivityById(id);\n  }\n\n  /**\n   * Import an activity into user's collection or lesson plan\n   */\n  async importActivity(\n    params: {\n      activityId: string;\n      lessonPlanId?: string;\n      lessonSection?: string;\n      customizations?: Record<string, unknown>;\n      notes?: string;\n    },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Ensure the activity exists in our database\n      const [source, ...externalIdParts] = params.activityId.split('-');\n      const externalId = externalIdParts.join('-');\n\n      // Get activity details to store in our database if needed\n      const activityDetails = await this.getActivity(source, externalId);\n      if (!activityDetails) {\n        throw new Error('Activity not found');\n      }\n\n      // Create or find the external activity record\n      let externalActivity = await prisma.externalActivity.findUnique({\n        where: {\n          source_externalId: {\n            source: activityDetails.source,\n            externalId: activityDetails.externalId,\n          },\n        },\n      });\n\n      if (!externalActivity) {\n        externalActivity = await prisma.externalActivity.create({\n          data: activityDetails,\n        });\n      }\n\n      // Create the activity import record\n      const activityImport = await prisma.activityImport.create({\n        data: {\n          userId,\n          activityId: externalActivity.id,\n          lessonPlanId: params.lessonPlanId || null,\n          lessonSection: params.lessonSection || null,\n          customizations: (params.customizations || null) as Prisma.InputJsonValue,\n          notes: params.notes || null,\n        },\n        include: {\n          activity: true,\n          lessonPlan: {\n            select: {\n              id: true,\n              title: true,\n              date: true,\n            },\n          },\n        },\n      });\n\n      this.logger.info(\n        { userId, activityId: params.activityId, lessonPlanId: params.lessonPlanId },\n        'Activity imported successfully',\n      );\n\n      return activityImport;\n    } catch (error) {\n      this.logger.error({ error, params, userId }, 'Failed to import activity');\n      throw error;\n    }\n  }\n\n  /**\n   * Rate an activity\n   */\n  async rateActivity(\n    activityId: string,\n    rating: number,\n    review: string | null,\n    details: {\n      gradeUsed?: number;\n      subjectUsed?: string;\n      workedWell?: string;\n      challenges?: string;\n      wouldRecommend?: boolean;\n    },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Ensure the activity exists\n      const activity = await prisma.externalActivity.findUnique({\n        where: { id: activityId },\n      });\n\n      if (!activity) {\n        throw new Error('Activity not found');\n      }\n\n      // Create or update the rating\n      const activityRating = await prisma.activityRating.upsert({\n        where: {\n          userId_activityId: {\n            userId,\n            activityId,\n          },\n        },\n        update: {\n          rating,\n          review,\n          wouldRecommend: details.wouldRecommend,\n          gradeUsed: details.gradeUsed,\n          subjectUsed: details.subjectUsed,\n          workedWell: details.workedWell,\n          challenges: details.challenges,\n        },\n        create: {\n          userId,\n          activityId,\n          rating,\n          review,\n          wouldRecommend: details.wouldRecommend,\n          gradeUsed: details.gradeUsed,\n          subjectUsed: details.subjectUsed,\n          workedWell: details.workedWell,\n          challenges: details.challenges,\n        },\n        include: {\n          activity: true,\n        },\n      });\n\n      this.logger.info({ userId, activityId, rating }, 'Activity rated successfully');\n\n      return activityRating;\n    } catch (error) {\n      this.logger.error({ error, activityId, userId }, 'Failed to rate activity');\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's activity collections\n   */\n  async getUserCollections(userId: number): Promise<Record<string, unknown>[]> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      const collections = await prisma.activityCollection.findMany({\n        where: { userId },\n        include: {\n          items: {\n            include: {\n              activity: true,\n            },\n          },\n        },\n        orderBy: { updatedAt: 'desc' },\n      });\n\n      return collections;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user collections');\n      return [];\n    }\n  }\n\n  /**\n   * Create a new activity collection\n   */\n  async createCollection(\n    data: { name: string; description?: string; isPublic?: boolean },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      const collection = await prisma.activityCollection.create({\n        data: {\n          userId,\n          name: data.name,\n          description: data.description || null,\n          isPublic: data.isPublic || false,\n        },\n        include: {\n          items: true,\n        },\n      });\n\n      this.logger.info({ userId, collectionName: data.name }, 'Activity collection created');\n\n      return collection;\n    } catch (error) {\n      this.logger.error({ error, data, userId }, 'Failed to create collection');\n      throw error;\n    }\n  }\n\n  /**\n   * Add activity to collection\n   */\n  async addToCollection(\n    collectionId: string,\n    activityId: string,\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Verify the collection belongs to the user\n      const collection = await prisma.activityCollection.findFirst({\n        where: {\n          id: collectionId,\n          userId,\n        },\n      });\n\n      if (!collection) {\n        throw new Error('Collection not found or access denied');\n      }\n\n      // Add to collection\n      await prisma.activityCollectionItem.create({\n        data: {\n          collectionId,\n          activityId,\n        },\n      });\n\n      return {\n        success: true,\n        collectionId,\n        activityId,\n      };\n    } catch (error) {\n      this.logger.error({ error, collectionId, activityId, userId }, 'Failed to add to collection');\n      throw error;\n    }\n  }\n\n  /**\n   * Remove activity from collection\n   */\n  async removeFromCollection(\n    collectionId: string,\n    activityId: string,\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Verify the collection belongs to the user\n      const collection = await prisma.activityCollection.findFirst({\n        where: {\n          id: collectionId,\n          userId,\n        },\n      });\n\n      if (!collection) {\n        throw new Error('Collection not found or access denied');\n      }\n\n      // Remove from collection\n      await prisma.activityCollectionItem.delete({\n        where: {\n          collectionId_activityId: {\n            collectionId,\n            activityId,\n          },\n        },\n      });\n\n      return {\n        success: true,\n        collectionId,\n        activityId,\n      };\n    } catch (error) {\n      this.logger.error(\n        { error, collectionId, activityId, userId },\n        'Failed to remove from collection',\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get recommended activities for a lesson plan\n   */\n  async getRecommendedActivities(\n    lessonPlanId: string,\n    userId: number,\n    limit: number = 5,\n  ): Promise<ActivityRecommendations> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Get lesson plan details\n      const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonPlanId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n        },\n      });\n\n      if (!lessonPlan) {\n        throw new Error('Lesson plan not found');\n      }\n\n      // Build search criteria based on lesson plan\n      const searchParams: SearchParams = {\n        grade: lessonPlan.unitPlan.longRangePlan.grade,\n        subject: lessonPlan.unitPlan.longRangePlan.subject,\n        language: 'en', // Default to English for now\n        limit,\n      };\n\n      // Search for relevant activities\n      const searchResult = await this.search(searchParams, userId);\n\n      return {\n        activities: searchResult.activities,\n        basedOn: 'lessonPlan',\n        lessonPlanId,\n        limit,\n        criteria: [\n          `Grade ${lessonPlan.unitPlan.longRangePlan.grade}`,\n          lessonPlan.unitPlan.longRangePlan.subject,\n          'English',\n        ],\n      };\n    } catch (error) {\n      this.logger.error({ error, lessonPlanId, userId }, 'Failed to get recommended activities');\n      return {\n        activities: [],\n        basedOn: 'lessonPlan',\n        lessonPlanId,\n        limit,\n        criteria: [],\n      };\n    }\n  }\n\n  // Private helper methods\n\n  private normalizeSearchParams(params: SearchParams): SearchParams {\n    return {\n      ...params,\n      grade: params.grade || params.gradeLevel,\n      limit: Math.min(params.limit || 20, 100),\n      offset: Math.max(params.offset || 0, 0),\n    };\n  }\n\n  private filterAndRankResults(\n    results: ExternalActivity[],\n    params: SearchParams,\n  ): ExternalActivity[] {\n    let filtered = results;\n\n    // Filter by grade if specified\n    if (params.grade) {\n      filtered = filtered.filter(\n        (activity) => activity.gradeMin <= params.grade! && activity.gradeMax >= params.grade!,\n      );\n    }\n\n    // Filter by free only if specified\n    if (params.onlyFree) {\n      filtered = filtered.filter((activity) => activity.isFree);\n    }\n\n    // Filter by activity type if specified\n    if (params.activityType && params.activityType.length > 0) {\n      filtered = filtered.filter((activity) =>\n        params.activityType!.includes(activity.activityType),\n      );\n    }\n\n    // Filter by materials if specified\n    if (params.materials && params.materials.length > 0) {\n      filtered = filtered.filter((activity) => {\n        const activityMaterials = Array.isArray(activity.materials)\n          ? (activity.materials as string[])\n          : [];\n        if (params.requireAllMaterials) {\n          return params.materials!.every((material) =>\n            activityMaterials.some(\n              (am) => typeof am === 'string' && am.toLowerCase().includes(material.toLowerCase()),\n            ),\n          );\n        } else {\n          return params.materials!.some((material) =>\n            activityMaterials.some(\n              (am) => typeof am === 'string' && am.toLowerCase().includes(material.toLowerCase()),\n            ),\n          );\n        }\n      });\n    }\n\n    // Sort by relevance (this could be enhanced with more sophisticated ranking)\n    filtered.sort((a, b) => {\n      // Prioritize activities with ratings\n      if (a.sourceRating && !b.sourceRating) return -1;\n      if (!a.sourceRating && b.sourceRating) return 1;\n\n      // Sort by rating if both have ratings\n      if (a.sourceRating && b.sourceRating) {\n        return b.sourceRating - a.sourceRating;\n      }\n\n      // Sort by last verified date\n      return new Date(b.lastVerified).getTime() - new Date(a.lastVerified).getTime();\n    });\n\n    return filtered;\n  }\n\n  private applyPagination(results: ExternalActivity[], params: SearchParams): ExternalActivity[] {\n    const offset = params.offset || 0;\n    const limit = params.limit || 20;\n    return results.slice(offset, offset + limit);\n  }\n\n  private generateCacheKey(type: string, params: Record<string, unknown> | SearchParams): string {\n    return `${type}:${JSON.stringify(params)}`;\n  }\n\n  private getFromCache<T = unknown>(key: string): T | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expiry > Date.now()) {\n      return cached.data as T;\n    }\n    this.cache.delete(key);\n    return null;\n  }\n\n  private setCache(key: string, data: unknown): void {\n    this.cache.set(key, {\n      data,\n      expiry: Date.now() + this.CACHE_TTL,\n    });\n  }\n\n  /**\n   * Clear expired cache entries\n   */\n  private cleanupCache(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (value.expiry <= now) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get available activity sources\n   */\n  getAvailableSources(): string[] {\n    return Array.from(this.connectors.keys());\n  }\n\n  /**\n   * Check if a source is available\n   */\n  isSourceAvailable(source: string): boolean {\n    return this.connectors.has(source);\n  }\n}\n\n// Export singleton instance getter\nlet serviceInstance: ActivityDiscoveryService | null = null;\n\nexport function getActivityDiscoveryService(): ActivityDiscoveryService {\n  if (!serviceInstance) {\n    serviceInstance = new ActivityDiscoveryService();\n  }\n  return serviceInstance;\n}\n\n// Export singleton instance\nexport const activityDiscoveryService = getActivityDiscoveryService();\n"],"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","ignoreList":[]}