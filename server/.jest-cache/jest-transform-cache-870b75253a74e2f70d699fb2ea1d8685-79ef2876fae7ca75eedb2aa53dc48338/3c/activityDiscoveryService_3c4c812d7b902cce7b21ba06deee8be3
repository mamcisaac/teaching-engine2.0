b8c692cc5bf526eb888e02b27e04f44c
/* istanbul ignore next */
function cov_1qxx2hr2zs() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts";
  var hash = "660030a3a9f7684349559d23e8093868e16be6ff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 26
        }
      },
      "1": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 21
        }
      },
      "2": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 30
        }
      },
      "3": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 36
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "6": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 59
        }
      },
      "7": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 76
        }
      },
      "8": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 74
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 98
        }
      },
      "10": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 76
        }
      },
      "11": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "12": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 77
        }
      },
      "14": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 42,
          column: 68
        }
      },
      "15": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 54
        }
      },
      "16": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "17": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 69
        }
      },
      "18": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 30
        }
      },
      "19": {
        start: {
          line: 49,
          column: 37
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "20": {
        start: {
          line: 51,
          column: 36
        },
        end: {
          line: 53,
          column: 52
        }
      },
      "21": {
        start: {
          line: 52,
          column: 57
        },
        end: {
          line: 52,
          column: 79
        }
      },
      "22": {
        start: {
          line: 55,
          column: 35
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "23": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 56,
          column: 63
        }
      },
      "24": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "25": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "26": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 68,
          column: 17
        }
      },
      "27": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 73
        }
      },
      "28": {
        start: {
          line: 61,
          column: 36
        },
        end: {
          line: 61,
          column: 76
        }
      },
      "29": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 88
        }
      },
      "30": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 63,
          column: 35
        }
      },
      "31": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 66,
          column: 92
        }
      },
      "32": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 67,
          column: 30
        }
      },
      "33": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 70,
          column: 64
        }
      },
      "34": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 49
        }
      },
      "35": {
        start: {
          line: 73,
          column: 36
        },
        end: {
          line: 73,
          column: 92
        }
      },
      "36": {
        start: {
          line: 75,
          column: 37
        },
        end: {
          line: 75,
          column: 92
        }
      },
      "37": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "38": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 44
        }
      },
      "39": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 44
        }
      },
      "40": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 26
        }
      },
      "41": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 83
        }
      },
      "42": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 54
        }
      },
      "43": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "44": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 86
        }
      },
      "45": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 105,
          column: 54
        }
      },
      "46": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "47": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 30
        }
      },
      "48": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 109,
          column: 57
        }
      },
      "49": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "50": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 72
        }
      },
      "51": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 28
        }
      },
      "52": {
        start: {
          line: 114,
          column: 29
        },
        end: {
          line: 114,
          column: 75
        }
      },
      "53": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "54": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 50
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 28
        }
      },
      "56": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 95
        }
      },
      "57": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 24
        }
      },
      "58": {
        start: {
          line: 129,
          column: 45
        },
        end: {
          line: 129,
          column: 58
        }
      },
      "59": {
        start: {
          line: 130,
          column: 27
        },
        end: {
          line: 130,
          column: 52
        }
      },
      "60": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 71
        }
      },
      "61": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 40
        }
      },
      "62": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "63": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 144,
          column: 56
        }
      },
      "64": {
        start: {
          line: 146,
          column: 49
        },
        end: {
          line: 146,
          column: 77
        }
      },
      "65": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 147,
          column: 56
        }
      },
      "66": {
        start: {
          line: 149,
          column: 36
        },
        end: {
          line: 149,
          column: 78
        }
      },
      "67": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "68": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 54
        }
      },
      "69": {
        start: {
          line: 154,
          column: 35
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "70": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "71": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 165,
          column: 19
        }
      },
      "72": {
        start: {
          line: 168,
          column: 35
        },
        end: {
          line: 187,
          column: 14
        }
      },
      "73": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 141
        }
      },
      "74": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 34
        }
      },
      "75": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 86
        }
      },
      "76": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 24
        }
      },
      "77": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "78": {
        start: {
          line: 201,
          column: 31
        },
        end: {
          line: 201,
          column: 56
        }
      },
      "79": {
        start: {
          line: 203,
          column: 29
        },
        end: {
          line: 205,
          column: 14
        }
      },
      "80": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "81": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 54
        }
      },
      "82": {
        start: {
          line: 210,
          column: 35
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "83": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 92
        }
      },
      "84": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 34
        }
      },
      "85": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 88
        }
      },
      "86": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 24
        }
      },
      "87": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "88": {
        start: {
          line: 254,
          column: 31
        },
        end: {
          line: 254,
          column: 56
        }
      },
      "89": {
        start: {
          line: 255,
          column: 32
        },
        end: {
          line: 265,
          column: 14
        }
      },
      "90": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 31
        }
      },
      "91": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 83
        }
      },
      "92": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 22
        }
      },
      "93": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "94": {
        start: {
          line: 278,
          column: 31
        },
        end: {
          line: 278,
          column: 56
        }
      },
      "95": {
        start: {
          line: 279,
          column: 31
        },
        end: {
          line: 289,
          column: 14
        }
      },
      "96": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 99
        }
      },
      "97": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 30
        }
      },
      "98": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 86
        }
      },
      "99": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 24
        }
      },
      "100": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "101": {
        start: {
          line: 303,
          column: 31
        },
        end: {
          line: 303,
          column: 56
        }
      },
      "102": {
        start: {
          line: 305,
          column: 31
        },
        end: {
          line: 310,
          column: 14
        }
      },
      "103": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "104": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 73
        }
      },
      "105": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 320,
          column: 15
        }
      },
      "106": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 325,
          column: 14
        }
      },
      "107": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 106
        }
      },
      "108": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 24
        }
      },
      "109": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "110": {
        start: {
          line: 337,
          column: 31
        },
        end: {
          line: 337,
          column: 56
        }
      },
      "111": {
        start: {
          line: 339,
          column: 31
        },
        end: {
          line: 344,
          column: 14
        }
      },
      "112": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "113": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 73
        }
      },
      "114": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 356,
          column: 15
        }
      },
      "115": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 361,
          column: 14
        }
      },
      "116": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 111
        }
      },
      "117": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 24
        }
      },
      "118": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "119": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 373,
          column: 56
        }
      },
      "120": {
        start: {
          line: 375,
          column: 31
        },
        end: {
          line: 389,
          column: 14
        }
      },
      "121": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "122": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 57
        }
      },
      "123": {
        start: {
          line: 394,
          column: 33
        },
        end: {
          line: 399,
          column: 13
        }
      },
      "124": {
        start: {
          line: 401,
          column: 33
        },
        end: {
          line: 401,
          column: 72
        }
      },
      "125": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 412,
          column: 14
        }
      },
      "126": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 103
        }
      },
      "127": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 422,
          column: 14
        }
      },
      "128": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 432,
          column: 10
        }
      },
      "129": {
        start: {
          line: 435,
          column: 23
        },
        end: {
          line: 435,
          column: 30
        }
      },
      "130": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 439,
          column: 9
        }
      },
      "131": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 125
        }
      },
      "132": {
        start: {
          line: 438,
          column: 53
        },
        end: {
          line: 438,
          column: 123
        }
      },
      "133": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "134": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 70
        }
      },
      "135": {
        start: {
          line: 442,
          column: 53
        },
        end: {
          line: 442,
          column: 68
        }
      },
      "136": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "137": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 106
        }
      },
      "138": {
        start: {
          line: 446,
          column: 53
        },
        end: {
          line: 446,
          column: 104
        }
      },
      "139": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "140": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 460,
          column: 15
        }
      },
      "141": {
        start: {
          line: 451,
          column: 42
        },
        end: {
          line: 453,
          column: 24
        }
      },
      "142": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 459,
          column: 17
        }
      },
      "143": {
        start: {
          line: 455,
          column: 20
        },
        end: {
          line: 455,
          column: 173
        }
      },
      "144": {
        start: {
          line: 455,
          column: 64
        },
        end: {
          line: 455,
          column: 171
        }
      },
      "145": {
        start: {
          line: 455,
          column: 95
        },
        end: {
          line: 455,
          column: 170
        }
      },
      "146": {
        start: {
          line: 458,
          column: 20
        },
        end: {
          line: 458,
          column: 172
        }
      },
      "147": {
        start: {
          line: 458,
          column: 63
        },
        end: {
          line: 458,
          column: 170
        }
      },
      "148": {
        start: {
          line: 458,
          column: 94
        },
        end: {
          line: 458,
          column: 169
        }
      },
      "149": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 475,
          column: 11
        }
      },
      "150": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 466,
          column: 26
        }
      },
      "151": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 26
        }
      },
      "152": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 468,
          column: 25
        }
      },
      "153": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 468,
          column: 25
        }
      },
      "154": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 472,
          column: 13
        }
      },
      "155": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 471,
          column: 55
        }
      },
      "156": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 91
        }
      },
      "157": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 476,
          column: 24
        }
      },
      "158": {
        start: {
          line: 479,
          column: 23
        },
        end: {
          line: 479,
          column: 41
        }
      },
      "159": {
        start: {
          line: 480,
          column: 22
        },
        end: {
          line: 480,
          column: 40
        }
      },
      "160": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 53
        }
      },
      "161": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 51
        }
      },
      "162": {
        start: {
          line: 487,
          column: 23
        },
        end: {
          line: 487,
          column: 42
        }
      },
      "163": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "164": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 31
        }
      },
      "165": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 31
        }
      },
      "166": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 20
        }
      },
      "167": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 498,
          column: 11
        }
      },
      "168": {
        start: {
          line: 504,
          column: 20
        },
        end: {
          line: 504,
          column: 30
        }
      },
      "169": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 509,
          column: 9
        }
      },
      "170": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "171": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 507,
          column: 39
        }
      },
      "172": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 515,
          column: 50
        }
      },
      "173": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 521,
          column: 43
        }
      },
      "174": {
        start: {
          line: 525,
          column: 22
        },
        end: {
          line: 525,
          column: 26
        }
      },
      "175": {
        start: {
          line: 527,
          column: 4
        },
        end: {
          line: 529,
          column: 5
        }
      },
      "176": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 528,
          column: 57
        }
      },
      "177": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 530,
          column: 27
        }
      },
      "178": {
        start: {
          line: 533,
          column: 40
        },
        end: {
          line: 533,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 33
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 50
          },
          end: {
            line: 52,
            column: 51
          }
        },
        loc: {
          start: {
            line: 52,
            column: 57
          },
          end: {
            line: 52,
            column: 79
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 55
          },
          end: {
            line: 55,
            column: 56
          }
        },
        loc: {
          start: {
            line: 55,
            column: 75
          },
          end: {
            line: 69,
            column: 13
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 42
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 102
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 30
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 128
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 136
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 41
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 68
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 199
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 37
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 252
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 276,
            column: 41
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 276
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 60
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 301
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 65
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 335
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 68
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 371
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 34
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 426
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 42
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 434
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 438,
            column: 39
          },
          end: {
            line: 438,
            column: 40
          }
        },
        loc: {
          start: {
            line: 438,
            column: 53
          },
          end: {
            line: 438,
            column: 123
          }
        },
        line: 438
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 442,
            column: 39
          },
          end: {
            line: 442,
            column: 40
          }
        },
        loc: {
          start: {
            line: 442,
            column: 53
          },
          end: {
            line: 442,
            column: 68
          }
        },
        line: 442
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 446,
            column: 39
          },
          end: {
            line: 446,
            column: 40
          }
        },
        loc: {
          start: {
            line: 446,
            column: 53
          },
          end: {
            line: 446,
            column: 104
          }
        },
        line: 446
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 450,
            column: 39
          },
          end: {
            line: 450,
            column: 40
          }
        },
        loc: {
          start: {
            line: 450,
            column: 53
          },
          end: {
            line: 460,
            column: 13
          }
        },
        line: 450
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 455,
            column: 50
          },
          end: {
            line: 455,
            column: 51
          }
        },
        loc: {
          start: {
            line: 455,
            column: 64
          },
          end: {
            line: 455,
            column: 171
          }
        },
        line: 455
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 455,
            column: 87
          },
          end: {
            line: 455,
            column: 88
          }
        },
        loc: {
          start: {
            line: 455,
            column: 95
          },
          end: {
            line: 455,
            column: 170
          }
        },
        line: 455
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 458,
            column: 49
          },
          end: {
            line: 458,
            column: 50
          }
        },
        loc: {
          start: {
            line: 458,
            column: 63
          },
          end: {
            line: 458,
            column: 170
          }
        },
        line: 458
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 458,
            column: 86
          },
          end: {
            line: 458,
            column: 87
          }
        },
        loc: {
          start: {
            line: 458,
            column: 94
          },
          end: {
            line: 458,
            column: 169
          }
        },
        line: 458
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 463,
            column: 22
          },
          end: {
            line: 463,
            column: 23
          }
        },
        loc: {
          start: {
            line: 463,
            column: 32
          },
          end: {
            line: 475,
            column: 9
          }
        },
        line: 463
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 478,
            column: 4
          },
          end: {
            line: 478,
            column: 5
          }
        },
        loc: {
          start: {
            line: 478,
            column: 37
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 478
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 35
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 483
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 22
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 486
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 24
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 494
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 19
          },
          end: {
            line: 510,
            column: 5
          }
        },
        line: 503
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 514,
            column: 5
          }
        },
        loc: {
          start: {
            line: 514,
            column: 26
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 514
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 520,
            column: 4
          },
          end: {
            line: 520,
            column: 5
          }
        },
        loc: {
          start: {
            line: 520,
            column: 30
          },
          end: {
            line: 522,
            column: 5
          }
        },
        line: 520
      },
      "33": {
        name: "getActivityDiscoveryService",
        decl: {
          start: {
            line: 526,
            column: 16
          },
          end: {
            line: 526,
            column: 43
          }
        },
        loc: {
          start: {
            line: 526,
            column: 46
          },
          end: {
            line: 531,
            column: 1
          }
        },
        line: 526
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 36
          },
          end: {
            line: 53,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 18
          },
          end: {
            line: 52,
            column: 80
          }
        }, {
          start: {
            line: 53,
            column: 18
          },
          end: {
            line: 53,
            column: 52
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 58,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 58,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 26
          },
          end: {
            line: 79,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 26
          },
          end: {
            line: 79,
            column: 49
          }
        }, {
          start: {
            line: 79,
            column: 53
          },
          end: {
            line: 79,
            column: 54
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "5": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "6": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "7": {
        loc: {
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 131,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 131,
            column: 38
          }
        }, {
          start: {
            line: 131,
            column: 42
          },
          end: {
            line: 131,
            column: 51
          }
        }],
        line: 131
      },
      "8": {
        loc: {
          start: {
            line: 131,
            column: 53
          },
          end: {
            line: 131,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 53
          },
          end: {
            line: 131,
            column: 63
          }
        }, {
          start: {
            line: 131,
            column: 67
          },
          end: {
            line: 131,
            column: 69
          }
        }],
        line: 131
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "11": {
        loc: {
          start: {
            line: 172,
            column: 34
          },
          end: {
            line: 172,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 34
          },
          end: {
            line: 172,
            column: 53
          }
        }, {
          start: {
            line: 172,
            column: 57
          },
          end: {
            line: 172,
            column: 61
          }
        }],
        line: 172
      },
      "12": {
        loc: {
          start: {
            line: 173,
            column: 35
          },
          end: {
            line: 173,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 35
          },
          end: {
            line: 173,
            column: 55
          }
        }, {
          start: {
            line: 173,
            column: 59
          },
          end: {
            line: 173,
            column: 63
          }
        }],
        line: 173
      },
      "13": {
        loc: {
          start: {
            line: 174,
            column: 37
          },
          end: {
            line: 174,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 37
          },
          end: {
            line: 174,
            column: 58
          }
        }, {
          start: {
            line: 174,
            column: 62
          },
          end: {
            line: 174,
            column: 66
          }
        }],
        line: 174
      },
      "14": {
        loc: {
          start: {
            line: 175,
            column: 27
          },
          end: {
            line: 175,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 27
          },
          end: {
            line: 175,
            column: 39
          }
        }, {
          start: {
            line: 175,
            column: 43
          },
          end: {
            line: 175,
            column: 47
          }
        }],
        line: 175
      },
      "15": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "16": {
        loc: {
          start: {
            line: 283,
            column: 33
          },
          end: {
            line: 283,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 33
          },
          end: {
            line: 283,
            column: 49
          }
        }, {
          start: {
            line: 283,
            column: 53
          },
          end: {
            line: 283,
            column: 57
          }
        }],
        line: 283
      },
      "17": {
        loc: {
          start: {
            line: 284,
            column: 30
          },
          end: {
            line: 284,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 30
          },
          end: {
            line: 284,
            column: 43
          }
        }, {
          start: {
            line: 284,
            column: 47
          },
          end: {
            line: 284,
            column: 52
          }
        }],
        line: 284
      },
      "18": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "19": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 347,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "20": {
        loc: {
          start: {
            line: 371,
            column: 57
          },
          end: {
            line: 371,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 371,
            column: 65
          },
          end: {
            line: 371,
            column: 66
          }
        }],
        line: 371
      },
      "21": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "22": {
        loc: {
          start: {
            line: 429,
            column: 19
          },
          end: {
            line: 429,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 19
          },
          end: {
            line: 429,
            column: 31
          }
        }, {
          start: {
            line: 429,
            column: 35
          },
          end: {
            line: 429,
            column: 52
          }
        }],
        line: 429
      },
      "23": {
        loc: {
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 430,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 430,
            column: 40
          }
        }, {
          start: {
            line: 430,
            column: 44
          },
          end: {
            line: 430,
            column: 46
          }
        }],
        line: 430
      },
      "24": {
        loc: {
          start: {
            line: 431,
            column: 29
          },
          end: {
            line: 431,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 29
          },
          end: {
            line: 431,
            column: 42
          }
        }, {
          start: {
            line: 431,
            column: 46
          },
          end: {
            line: 431,
            column: 47
          }
        }],
        line: 431
      },
      "25": {
        loc: {
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 439,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 439,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "26": {
        loc: {
          start: {
            line: 438,
            column: 53
          },
          end: {
            line: 438,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 53
          },
          end: {
            line: 438,
            column: 86
          }
        }, {
          start: {
            line: 438,
            column: 90
          },
          end: {
            line: 438,
            column: 123
          }
        }],
        line: 438
      },
      "27": {
        loc: {
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "28": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "29": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 445,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 445,
            column: 31
          }
        }, {
          start: {
            line: 445,
            column: 35
          },
          end: {
            line: 445,
            column: 65
          }
        }],
        line: 445
      },
      "30": {
        loc: {
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "31": {
        loc: {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 449,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 449,
            column: 28
          }
        }, {
          start: {
            line: 449,
            column: 32
          },
          end: {
            line: 449,
            column: 59
          }
        }],
        line: 449
      },
      "32": {
        loc: {
          start: {
            line: 451,
            column: 42
          },
          end: {
            line: 453,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 452,
            column: 22
          },
          end: {
            line: 452,
            column: 40
          }
        }, {
          start: {
            line: 453,
            column: 22
          },
          end: {
            line: 453,
            column: 24
          }
        }],
        line: 451
      },
      "33": {
        loc: {
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 459,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 459,
            column: 17
          }
        }, {
          start: {
            line: 457,
            column: 21
          },
          end: {
            line: 459,
            column: 17
          }
        }],
        line: 454
      },
      "34": {
        loc: {
          start: {
            line: 455,
            column: 95
          },
          end: {
            line: 455,
            column: 170
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 455,
            column: 95
          },
          end: {
            line: 455,
            column: 117
          }
        }, {
          start: {
            line: 455,
            column: 121
          },
          end: {
            line: 455,
            column: 170
          }
        }],
        line: 455
      },
      "35": {
        loc: {
          start: {
            line: 458,
            column: 94
          },
          end: {
            line: 458,
            column: 169
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 94
          },
          end: {
            line: 458,
            column: 116
          }
        }, {
          start: {
            line: 458,
            column: 120
          },
          end: {
            line: 458,
            column: 169
          }
        }],
        line: 458
      },
      "36": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 466,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 466,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "37": {
        loc: {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 30
          }
        }, {
          start: {
            line: 465,
            column: 34
          },
          end: {
            line: 465,
            column: 49
          }
        }],
        line: 465
      },
      "38": {
        loc: {
          start: {
            line: 467,
            column: 12
          },
          end: {
            line: 468,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 12
          },
          end: {
            line: 468,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "39": {
        loc: {
          start: {
            line: 467,
            column: 16
          },
          end: {
            line: 467,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 16
          },
          end: {
            line: 467,
            column: 31
          }
        }, {
          start: {
            line: 467,
            column: 35
          },
          end: {
            line: 467,
            column: 49
          }
        }],
        line: 467
      },
      "40": {
        loc: {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "41": {
        loc: {
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 470,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 16
          },
          end: {
            line: 470,
            column: 30
          }
        }, {
          start: {
            line: 470,
            column: 34
          },
          end: {
            line: 470,
            column: 48
          }
        }],
        line: 470
      },
      "42": {
        loc: {
          start: {
            line: 479,
            column: 23
          },
          end: {
            line: 479,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 479,
            column: 23
          },
          end: {
            line: 479,
            column: 36
          }
        }, {
          start: {
            line: 479,
            column: 40
          },
          end: {
            line: 479,
            column: 41
          }
        }],
        line: 479
      },
      "43": {
        loc: {
          start: {
            line: 480,
            column: 22
          },
          end: {
            line: 480,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 480,
            column: 22
          },
          end: {
            line: 480,
            column: 34
          }
        }, {
          start: {
            line: 480,
            column: 38
          },
          end: {
            line: 480,
            column: 40
          }
        }],
        line: 480
      },
      "44": {
        loc: {
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 488
      },
      "45": {
        loc: {
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 488,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 488,
            column: 18
          }
        }, {
          start: {
            line: 488,
            column: 22
          },
          end: {
            line: 488,
            column: 48
          }
        }],
        line: 488
      },
      "46": {
        loc: {
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "47": {
        loc: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts",
      mappings: "AAAA,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAG7C,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAuC3E;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,WAAW;IAC/C,UAAU,GAA+B,IAAI,GAAG,EAAE,CAAC;IACnD,KAAK,GAAmD,IAAI,GAAG,EAAE,CAAC;IACzD,SAAS,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,aAAa;IAE1D;QACE,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAClC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED;;OAEG;IACK,oBAAoB;QAC1B,IAAI,CAAC;YACH,4BAA4B;YAC5B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,YAAY,EAAE,CAAC,CAAC;YAE/C,sDAAsD;YACtD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,sBAAsB,EAAE,CAAC,CAAC;YAEhE,qEAAqE;YACrE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,qBAAqB,EAAE,CAAC,CAAC;YAE9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,UAAU,CAAC,IAAI,gCAAgC,CAAC,CAAC;QACxF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,iCAAiC,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,MAAoB,EAAE,MAAc;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,0BAA0B,CAAC,CAAC;YAEjE,oBAAoB;YACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAuB,QAAQ,CAAC,CAAC;YACjE,IAAI,MAAM,EAAE,CAAC;gBACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;gBACrD,OAAO,MAAM,CAAC;YAChB,CAAC;YAED,oCAAoC;YACpC,MAAM,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAE5D,oCAAoC;YACpC,MAAM,eAAe,GAAG,gBAAgB,CAAC,OAAO;gBAC9C,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAEvC,oCAAoC;YACpC,MAAM,cAAc,GAAG,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAChD,IAAI,CAAC,SAAS;oBAAE,OAAO,EAAE,CAAC;gBAE1B,IAAI,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,QAAQ,YAAY,CAAC,CAAC;oBACrD,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;oBACzD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,aAAa,OAAO,CAAC,MAAM,UAAU,CAAC,CAAC;oBACpE,OAAO,OAAO,CAAC;gBACjB,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,qBAAqB,QAAQ,EAAE,CAAC,CAAC;oBACxE,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACrD,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,EAAwB,CAAC;YAE5D,yCAAyC;YACzC,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;YAEjF,mBAAmB;YACnB,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;YAEjF,MAAM,MAAM,GAAyB;gBACnC,UAAU,EAAE,gBAAgB;gBAC5B,KAAK,EAAE,eAAe,CAAC,MAAM;gBAC7B,OAAO,EAAE,CAAC,gBAAgB,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM;gBAC1F,YAAY,EAAE,gBAAgB;gBAC9B,OAAO,EAAE,eAAe;gBACxB,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;aACtC,CAAC;YAEF,mBAAmB;YACnB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAEhC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd;gBACE,YAAY,EAAE,gBAAgB,CAAC,MAAM;gBACrC,UAAU,EAAE,eAAe,CAAC,MAAM;gBAClC,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,OAAO,EAAE,eAAe;aACzB,EACD,2BAA2B,CAC5B,CAAC;YAEF,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,wBAAwB,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,UAAkB;QAClD,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;YAC3E,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAmB,QAAQ,CAAC,CAAC;YAC7D,IAAI,MAAM,EAAE,CAAC;gBACX,OAAO,MAAM,CAAC;YAChB,CAAC;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,yBAAyB,CAAC,CAAC;gBACxD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAChE,IAAI,QAAQ,EAAE,CAAC;gBACb,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACpC,CAAC;YAED,OAAO,QAAmC,CAAC;QAC7C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,gCAAgC,CAAC,CAAC;YACnF,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,EAAU;QAC9B,MAAM,CAAC,MAAM,EAAE,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,SAAS,EAAE,UAAU,IAAI,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,EAAU;QACjC,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAClB,MAMC,EACD,MAAc;QAEd,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,6CAA6C;YAC7C,MAAM,CAAC,MAAM,EAAE,GAAG,eAAe,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClE,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAE7C,0DAA0D;YAC1D,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACnE,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACxC,CAAC;YAED,8CAA8C;YAC9C,IAAI,gBAAgB,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC;gBAC9D,KAAK,EAAE;oBACL,iBAAiB,EAAE;wBACjB,MAAM,EAAE,eAAe,CAAC,MAAM;wBAC9B,UAAU,EAAE,eAAe,CAAC,UAAU;qBACvC;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACtB,gBAAgB,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC;oBACtD,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,oCAAoC;YACpC,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;gBACxD,IAAI,EAAE;oBACJ,MAAM;oBACN,UAAU,EAAE,gBAAgB,CAAC,EAAE;oBAC/B,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,IAAI;oBACzC,aAAa,EAAE,MAAM,CAAC,aAAa,IAAI,IAAI;oBAC3C,cAAc,EAAE,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI,CAA0B;oBACxE,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,IAAI;iBAC5B;gBACD,OAAO,EAAE;oBACP,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE;wBACV,MAAM,EAAE;4BACN,EAAE,EAAE,IAAI;4BACR,KAAK,EAAE,IAAI;4BACX,IAAI,EAAE,IAAI;yBACX;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,YAAY,EAAE,MAAM,CAAC,YAAY,EAAE,EAC5E,gCAAgC,CACjC,CAAC;YAEF,OAAO,cAAc,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,2BAA2B,CAAC,CAAC;YAC1E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAChB,UAAkB,EAClB,MAAc,EACd,MAAqB,EACrB,OAMC,EACD,MAAc;QAEd,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,6BAA6B;YAC7B,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC;gBACxD,KAAK,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE;aAC1B,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACxC,CAAC;YAED,8BAA8B;YAC9B,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;gBACxD,KAAK,EAAE;oBACL,iBAAiB,EAAE;wBACjB,MAAM;wBACN,UAAU;qBACX;iBACF;gBACD,MAAM,EAAE;oBACN,MAAM;oBACN,MAAM;oBACN,cAAc,EAAE,OAAO,CAAC,cAAc;oBACtC,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,UAAU,EAAE,OAAO,CAAC,UAAU;oBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;iBAC/B;gBACD,MAAM,EAAE;oBACN,MAAM;oBACN,UAAU;oBACV,MAAM;oBACN,MAAM;oBACN,cAAc,EAAE,OAAO,CAAC,cAAc;oBACtC,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,UAAU,EAAE,OAAO,CAAC,UAAU;oBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;iBAC/B;gBACD,OAAO,EAAE;oBACP,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,6BAA6B,CAAC,CAAC;YAEhF,OAAO,cAAc,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,yBAAyB,CAAC,CAAC;YAC5E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,MAAc;QACrC,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC;gBAC3D,KAAK,EAAE,EAAE,MAAM,EAAE;gBACjB,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,OAAO,EAAE;4BACP,QAAQ,EAAE,IAAI;yBACf;qBACF;iBACF;gBACD,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;aAC/B,CAAC,CAAC;YAEH,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,gCAAgC,CAAC,CAAC;YACvE,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CACpB,IAAgE,EAChE,MAAc;QAEd,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC;gBACxD,IAAI,EAAE;oBACJ,MAAM;oBACN,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,IAAI;oBACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK;iBACjC;gBACD,OAAO,EAAE;oBACP,KAAK,EAAE,IAAI;iBACZ;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,6BAA6B,CAAC,CAAC;YAEvF,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,6BAA6B,CAAC,CAAC;YAC1E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CACnB,YAAoB,EACpB,UAAkB,EAClB,MAAc;QAEd,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,4CAA4C;YAC5C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC;gBAC3D,KAAK,EAAE;oBACL,EAAE,EAAE,YAAY;oBAChB,MAAM;iBACP;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,oBAAoB;YACpB,MAAM,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC;gBACzC,IAAI,EAAE;oBACJ,YAAY;oBACZ,UAAU;iBACX;aACF,CAAC,CAAC;YAEH,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,YAAY;gBACZ,UAAU;aACX,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,6BAA6B,CAAC,CAAC;YAC9F,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CACxB,YAAoB,EACpB,UAAkB,EAClB,MAAc;QAEd,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,4CAA4C;YAC5C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC;gBAC3D,KAAK,EAAE;oBACL,EAAE,EAAE,YAAY;oBAChB,MAAM;iBACP;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,yBAAyB;YACzB,MAAM,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC;gBACzC,KAAK,EAAE;oBACL,uBAAuB,EAAE;wBACvB,YAAY;wBACZ,UAAU;qBACX;iBACF;aACF,CAAC,CAAC;YAEH,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,YAAY;gBACZ,UAAU;aACX,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,EAAE,KAAK,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,EAC3C,kCAAkC,CACnC,CAAC;YACF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,wBAAwB,CAC5B,YAAoB,EACpB,MAAc,EACd,QAAgB,CAAC;QAEjB,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;YAE7C,0BAA0B;YAC1B,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC;gBACxD,KAAK,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE;gBAC3B,OAAO,EAAE;oBACP,QAAQ,EAAE;wBACR,OAAO,EAAE;4BACP,aAAa,EAAE,IAAI;yBACpB;qBACF;oBACD,YAAY,EAAE;wBACZ,OAAO,EAAE;4BACP,WAAW,EAAE,IAAI;yBAClB;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;YAC3C,CAAC;YAED,6CAA6C;YAC7C,MAAM,YAAY,GAAiB;gBACjC,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK;gBAC9C,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO;gBAClD,QAAQ,EAAE,IAAI,EAAE,6BAA6B;gBAC7C,KAAK;aACN,CAAC;YAEF,iCAAiC;YACjC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAE7D,OAAO;gBACL,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,OAAO,EAAE,YAAY;gBACrB,YAAY;gBACZ,KAAK;gBACL,QAAQ,EAAE;oBACR,SAAS,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE;oBAClD,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO;oBACzC,SAAS;iBACV;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE,sCAAsC,CAAC,CAAC;YAC3F,OAAO;gBACL,UAAU,EAAE,EAAE;gBACd,OAAO,EAAE,YAAY;gBACrB,YAAY;gBACZ,KAAK;gBACL,QAAQ,EAAE,EAAE;aACb,CAAC;QACJ,CAAC;IACH,CAAC;IAED,yBAAyB;IAEjB,qBAAqB,CAAC,MAAoB;QAChD,OAAO;YACL,GAAG,MAAM;YACT,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,UAAU;YACxC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC;YACxC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;SACxC,CAAC;IACJ,CAAC;IAEO,oBAAoB,CAC1B,OAA2B,EAC3B,MAAoB;QAEpB,IAAI,QAAQ,GAAG,OAAO,CAAC;QAEvB,+BAA+B;QAC/B,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CACxB,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,IAAI,MAAM,CAAC,KAAM,IAAI,QAAQ,CAAC,QAAQ,IAAI,MAAM,CAAC,KAAM,CACvF,CAAC;QACJ,CAAC;QAED,mCAAmC;QACnC,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5D,CAAC;QAED,uCAAuC;QACvC,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1D,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CACtC,MAAM,CAAC,YAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CACrD,CAAC;QACJ,CAAC;QAED,mCAAmC;QACnC,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACtC,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;oBACzD,CAAC,CAAE,QAAQ,CAAC,SAAsB;oBAClC,CAAC,CAAC,EAAE,CAAC;gBACP,IAAI,MAAM,CAAC,mBAAmB,EAAE,CAAC;oBAC/B,OAAO,MAAM,CAAC,SAAU,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC1C,iBAAiB,CAAC,IAAI,CACpB,CAAC,EAAE,EAAE,EAAE,CAAC,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CACpF,CACF,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,OAAO,MAAM,CAAC,SAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CACzC,iBAAiB,CAAC,IAAI,CACpB,CAAC,EAAE,EAAE,EAAE,CAAC,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CACpF,CACF,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,6EAA6E;QAC7E,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACrB,qCAAqC;YACrC,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,YAAY;gBAAE,OAAO,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,YAAY;gBAAE,OAAO,CAAC,CAAC;YAEhD,sCAAsC;YACtC,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,YAAY,EAAE,CAAC;gBACrC,OAAO,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;YACzC,CAAC;YAED,6BAA6B;YAC7B,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,eAAe,CAAC,OAA2B,EAAE,MAAoB;QACvE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC;QAClC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;QACjC,OAAO,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,KAAK,CAAC,CAAC;IAC/C,CAAC;IAEO,gBAAgB,CAAC,IAAY,EAAE,MAA8C;QACnF,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;IAC7C,CAAC;IAEO,YAAY,CAAc,GAAW;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YACzC,OAAO,MAAM,CAAC,IAAS,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,QAAQ,CAAC,GAAW,EAAE,IAAa;QACzC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YAClB,IAAI;YACJ,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS;SACpC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;YAChD,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,EAAE,CAAC;gBACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,mBAAmB;QACjB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,MAAc;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;CACF;AAED,mCAAmC;AACnC,IAAI,eAAe,GAAoC,IAAI,CAAC;AAE5D,MAAM,UAAU,2BAA2B;IACzC,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,eAAe,GAAG,IAAI,wBAAwB,EAAE,CAAC;IACnD,CAAC;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,4BAA4B;AAC5B,MAAM,CAAC,MAAM,wBAAwB,GAAG,2BAA2B,EAAE,CAAC",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts"],
      sourcesContent: ["import BaseService from './base/BaseService';\nimport { ExternalActivity, Prisma } from '@teaching-engine/database';\nimport { BaseConnector } from './connectors/baseConnector';\nimport { OERConnector } from './connectors/oerConnector';\nimport { CurriculumWebConnector } from './connectors/curriculumWebConnector';\nimport { EducationWebConnector } from './connectors/educationWebConnector';\n\nexport interface SearchParams {\n  query?: string;\n  grade?: number;\n  subject?: string;\n  gradeLevel?: number;\n  language?: string;\n  duration?: {\n    min?: number;\n    max?: number;\n  };\n  materials?: string[];\n  requireAllMaterials?: boolean;\n  activityType?: string[];\n  curriculumAlignment?: string[];\n  sources?: string[];\n  onlyFree?: boolean;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface ActivitySearchResult {\n  activities: ExternalActivity[];\n  total: number;\n  hasMore: boolean;\n  searchParams: SearchParams;\n  sources: string[];\n  executionTime: number;\n}\n\nexport interface ActivityRecommendations {\n  activities: ExternalActivity[];\n  basedOn: 'lessonPlan' | 'userHistory' | 'similarTeachers';\n  lessonPlanId?: string;\n  limit: number;\n  criteria: string[];\n}\n\n/**\n * Enhanced Activity Discovery Service\n * Manages multiple connectors to search educational activities from various sources\n */\nexport class ActivityDiscoveryService extends BaseService {\n  private connectors: Map<string, BaseConnector> = new Map();\n  private cache: Map<string, { data: unknown; expiry: number }> = new Map();\n  private readonly CACHE_TTL = 1000 * 60 * 30; // 30 minutes\n\n  constructor() {\n    super('ActivityDiscoveryService');\n    this.initializeConnectors();\n  }\n\n  /**\n   * Initialize available connectors\n   */\n  private initializeConnectors(): void {\n    try {\n      // Add OER Commons connector\n      this.connectors.set('oer', new OERConnector());\n\n      // Add Curriculum Web connector (government resources)\n      this.connectors.set('curriculum', new CurriculumWebConnector());\n\n      // Add Educational Websites connector (Khan Academy, ReadWorks, etc.)\n      this.connectors.set('education', new EducationWebConnector());\n\n      this.logger.info(`Initialized ${this.connectors.size} activity discovery connectors`);\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to initialize connectors');\n    }\n  }\n\n  /**\n   * Search for activities across all available sources\n   */\n  async search(params: SearchParams, userId: number): Promise<ActivitySearchResult> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info({ params, userId }, 'Starting activity search');\n\n      // Check cache first\n      const cacheKey = this.generateCacheKey('search', params);\n      const cached = this.getFromCache<ActivitySearchResult>(cacheKey);\n      if (cached) {\n        this.logger.debug('Returning cached search results');\n        return cached;\n      }\n\n      // Normalize and validate parameters\n      const normalizedParams = this.normalizeSearchParams(params);\n\n      // Determine which sources to search\n      const sourcesToSearch = normalizedParams.sources\n        ? normalizedParams.sources.filter((s) => this.connectors.has(s))\n        : Array.from(this.connectors.keys());\n\n      // Search each connector in parallel\n      const searchPromises = sourcesToSearch.map(async (sourceId) => {\n        const connector = this.connectors.get(sourceId);\n        if (!connector) return [];\n\n        try {\n          this.logger.debug(`Searching ${sourceId} connector`);\n          const results = await connector.search(normalizedParams);\n          this.logger.debug(`${sourceId} returned ${results.length} results`);\n          return results;\n        } catch (error) {\n          this.logger.error({ error, sourceId }, `Search failed for ${sourceId}`);\n          return [];\n        }\n      });\n\n      const allResults = await Promise.all(searchPromises);\n      const flatResults = allResults.flat() as ExternalActivity[];\n\n      // Apply additional filtering and ranking\n      const filteredResults = this.filterAndRankResults(flatResults, normalizedParams);\n\n      // Apply pagination\n      const paginatedResults = this.applyPagination(filteredResults, normalizedParams);\n\n      const result: ActivitySearchResult = {\n        activities: paginatedResults,\n        total: filteredResults.length,\n        hasMore: (normalizedParams.offset || 0) + paginatedResults.length < filteredResults.length,\n        searchParams: normalizedParams,\n        sources: sourcesToSearch,\n        executionTime: Date.now() - startTime,\n      };\n\n      // Cache the result\n      this.setCache(cacheKey, result);\n\n      this.logger.info(\n        {\n          resultsCount: paginatedResults.length,\n          totalFound: filteredResults.length,\n          executionTime: result.executionTime,\n          sources: sourcesToSearch,\n        },\n        'Activity search completed',\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error({ error, params, userId }, 'Activity search failed');\n      throw new Error('Activity search failed');\n    }\n  }\n\n  /**\n   * Get activity details from a specific source\n   */\n  async getActivity(source: string, externalId: string): Promise<ExternalActivity | null> {\n    try {\n      const cacheKey = this.generateCacheKey('activity', { source, externalId });\n      const cached = this.getFromCache<ExternalActivity>(cacheKey);\n      if (cached) {\n        return cached;\n      }\n\n      const connector = this.connectors.get(source);\n      if (!connector) {\n        this.logger.warn({ source }, 'Unknown activity source');\n        return null;\n      }\n\n      const activity = await connector.getActivityDetails(externalId);\n      if (activity) {\n        this.setCache(cacheKey, activity);\n      }\n\n      return activity as ExternalActivity | null;\n    } catch (error) {\n      this.logger.error({ error, source, externalId }, 'Failed to get activity details');\n      return null;\n    }\n  }\n\n  /**\n   * Get activity by composite ID (source-externalId)\n   */\n  async getActivityById(id: string): Promise<ExternalActivity | null> {\n    const [source, ...externalIdParts] = id.split('-');\n    const externalId = externalIdParts.join('-');\n    return this.getActivity(source || 'unknown', externalId || id);\n  }\n\n  /**\n   * Alias for getActivityById for backward compatibility\n   */\n  async getActivityDetails(id: string): Promise<ExternalActivity | null> {\n    return this.getActivityById(id);\n  }\n\n  /**\n   * Import an activity into user's collection or lesson plan\n   */\n  async importActivity(\n    params: {\n      activityId: string;\n      lessonPlanId?: string;\n      lessonSection?: string;\n      customizations?: Record<string, unknown>;\n      notes?: string;\n    },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Ensure the activity exists in our database\n      const [source, ...externalIdParts] = params.activityId.split('-');\n      const externalId = externalIdParts.join('-');\n\n      // Get activity details to store in our database if needed\n      const activityDetails = await this.getActivity(source, externalId);\n      if (!activityDetails) {\n        throw new Error('Activity not found');\n      }\n\n      // Create or find the external activity record\n      let externalActivity = await prisma.externalActivity.findUnique({\n        where: {\n          source_externalId: {\n            source: activityDetails.source,\n            externalId: activityDetails.externalId,\n          },\n        },\n      });\n\n      if (!externalActivity) {\n        externalActivity = await prisma.externalActivity.create({\n          data: activityDetails,\n        });\n      }\n\n      // Create the activity import record\n      const activityImport = await prisma.activityImport.create({\n        data: {\n          userId,\n          activityId: externalActivity.id,\n          lessonPlanId: params.lessonPlanId || null,\n          lessonSection: params.lessonSection || null,\n          customizations: (params.customizations || null) as Prisma.InputJsonValue,\n          notes: params.notes || null,\n        },\n        include: {\n          activity: true,\n          lessonPlan: {\n            select: {\n              id: true,\n              title: true,\n              date: true,\n            },\n          },\n        },\n      });\n\n      this.logger.info(\n        { userId, activityId: params.activityId, lessonPlanId: params.lessonPlanId },\n        'Activity imported successfully',\n      );\n\n      return activityImport;\n    } catch (error) {\n      this.logger.error({ error, params, userId }, 'Failed to import activity');\n      throw error;\n    }\n  }\n\n  /**\n   * Rate an activity\n   */\n  async rateActivity(\n    activityId: string,\n    rating: number,\n    review: string | null,\n    details: {\n      gradeUsed?: number;\n      subjectUsed?: string;\n      workedWell?: string;\n      challenges?: string;\n      wouldRecommend?: boolean;\n    },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Ensure the activity exists\n      const activity = await prisma.externalActivity.findUnique({\n        where: { id: activityId },\n      });\n\n      if (!activity) {\n        throw new Error('Activity not found');\n      }\n\n      // Create or update the rating\n      const activityRating = await prisma.activityRating.upsert({\n        where: {\n          userId_activityId: {\n            userId,\n            activityId,\n          },\n        },\n        update: {\n          rating,\n          review,\n          wouldRecommend: details.wouldRecommend,\n          gradeUsed: details.gradeUsed,\n          subjectUsed: details.subjectUsed,\n          workedWell: details.workedWell,\n          challenges: details.challenges,\n        },\n        create: {\n          userId,\n          activityId,\n          rating,\n          review,\n          wouldRecommend: details.wouldRecommend,\n          gradeUsed: details.gradeUsed,\n          subjectUsed: details.subjectUsed,\n          workedWell: details.workedWell,\n          challenges: details.challenges,\n        },\n        include: {\n          activity: true,\n        },\n      });\n\n      this.logger.info({ userId, activityId, rating }, 'Activity rated successfully');\n\n      return activityRating;\n    } catch (error) {\n      this.logger.error({ error, activityId, userId }, 'Failed to rate activity');\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's activity collections\n   */\n  async getUserCollections(userId: number): Promise<Record<string, unknown>[]> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      const collections = await prisma.activityCollection.findMany({\n        where: { userId },\n        include: {\n          items: {\n            include: {\n              activity: true,\n            },\n          },\n        },\n        orderBy: { updatedAt: 'desc' },\n      });\n\n      return collections;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user collections');\n      return [];\n    }\n  }\n\n  /**\n   * Create a new activity collection\n   */\n  async createCollection(\n    data: { name: string; description?: string; isPublic?: boolean },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      const collection = await prisma.activityCollection.create({\n        data: {\n          userId,\n          name: data.name,\n          description: data.description || null,\n          isPublic: data.isPublic || false,\n        },\n        include: {\n          items: true,\n        },\n      });\n\n      this.logger.info({ userId, collectionName: data.name }, 'Activity collection created');\n\n      return collection;\n    } catch (error) {\n      this.logger.error({ error, data, userId }, 'Failed to create collection');\n      throw error;\n    }\n  }\n\n  /**\n   * Add activity to collection\n   */\n  async addToCollection(\n    collectionId: string,\n    activityId: string,\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Verify the collection belongs to the user\n      const collection = await prisma.activityCollection.findFirst({\n        where: {\n          id: collectionId,\n          userId,\n        },\n      });\n\n      if (!collection) {\n        throw new Error('Collection not found or access denied');\n      }\n\n      // Add to collection\n      await prisma.activityCollectionItem.create({\n        data: {\n          collectionId,\n          activityId,\n        },\n      });\n\n      return {\n        success: true,\n        collectionId,\n        activityId,\n      };\n    } catch (error) {\n      this.logger.error({ error, collectionId, activityId, userId }, 'Failed to add to collection');\n      throw error;\n    }\n  }\n\n  /**\n   * Remove activity from collection\n   */\n  async removeFromCollection(\n    collectionId: string,\n    activityId: string,\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Verify the collection belongs to the user\n      const collection = await prisma.activityCollection.findFirst({\n        where: {\n          id: collectionId,\n          userId,\n        },\n      });\n\n      if (!collection) {\n        throw new Error('Collection not found or access denied');\n      }\n\n      // Remove from collection\n      await prisma.activityCollectionItem.delete({\n        where: {\n          collectionId_activityId: {\n            collectionId,\n            activityId,\n          },\n        },\n      });\n\n      return {\n        success: true,\n        collectionId,\n        activityId,\n      };\n    } catch (error) {\n      this.logger.error(\n        { error, collectionId, activityId, userId },\n        'Failed to remove from collection',\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get recommended activities for a lesson plan\n   */\n  async getRecommendedActivities(\n    lessonPlanId: string,\n    userId: number,\n    limit: number = 5,\n  ): Promise<ActivityRecommendations> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Get lesson plan details\n      const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonPlanId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n        },\n      });\n\n      if (!lessonPlan) {\n        throw new Error('Lesson plan not found');\n      }\n\n      // Build search criteria based on lesson plan\n      const searchParams: SearchParams = {\n        grade: lessonPlan.unitPlan.longRangePlan.grade,\n        subject: lessonPlan.unitPlan.longRangePlan.subject,\n        language: 'en', // Default to English for now\n        limit,\n      };\n\n      // Search for relevant activities\n      const searchResult = await this.search(searchParams, userId);\n\n      return {\n        activities: searchResult.activities,\n        basedOn: 'lessonPlan',\n        lessonPlanId,\n        limit,\n        criteria: [\n          `Grade ${lessonPlan.unitPlan.longRangePlan.grade}`,\n          lessonPlan.unitPlan.longRangePlan.subject,\n          'English',\n        ],\n      };\n    } catch (error) {\n      this.logger.error({ error, lessonPlanId, userId }, 'Failed to get recommended activities');\n      return {\n        activities: [],\n        basedOn: 'lessonPlan',\n        lessonPlanId,\n        limit,\n        criteria: [],\n      };\n    }\n  }\n\n  // Private helper methods\n\n  private normalizeSearchParams(params: SearchParams): SearchParams {\n    return {\n      ...params,\n      grade: params.grade || params.gradeLevel,\n      limit: Math.min(params.limit || 20, 100),\n      offset: Math.max(params.offset || 0, 0),\n    };\n  }\n\n  private filterAndRankResults(\n    results: ExternalActivity[],\n    params: SearchParams,\n  ): ExternalActivity[] {\n    let filtered = results;\n\n    // Filter by grade if specified\n    if (params.grade) {\n      filtered = filtered.filter(\n        (activity) => activity.gradeMin <= params.grade! && activity.gradeMax >= params.grade!,\n      );\n    }\n\n    // Filter by free only if specified\n    if (params.onlyFree) {\n      filtered = filtered.filter((activity) => activity.isFree);\n    }\n\n    // Filter by activity type if specified\n    if (params.activityType && params.activityType.length > 0) {\n      filtered = filtered.filter((activity) =>\n        params.activityType!.includes(activity.activityType),\n      );\n    }\n\n    // Filter by materials if specified\n    if (params.materials && params.materials.length > 0) {\n      filtered = filtered.filter((activity) => {\n        const activityMaterials = Array.isArray(activity.materials)\n          ? (activity.materials as string[])\n          : [];\n        if (params.requireAllMaterials) {\n          return params.materials!.every((material) =>\n            activityMaterials.some(\n              (am) => typeof am === 'string' && am.toLowerCase().includes(material.toLowerCase()),\n            ),\n          );\n        } else {\n          return params.materials!.some((material) =>\n            activityMaterials.some(\n              (am) => typeof am === 'string' && am.toLowerCase().includes(material.toLowerCase()),\n            ),\n          );\n        }\n      });\n    }\n\n    // Sort by relevance (this could be enhanced with more sophisticated ranking)\n    filtered.sort((a, b) => {\n      // Prioritize activities with ratings\n      if (a.sourceRating && !b.sourceRating) return -1;\n      if (!a.sourceRating && b.sourceRating) return 1;\n\n      // Sort by rating if both have ratings\n      if (a.sourceRating && b.sourceRating) {\n        return b.sourceRating - a.sourceRating;\n      }\n\n      // Sort by last verified date\n      return new Date(b.lastVerified).getTime() - new Date(a.lastVerified).getTime();\n    });\n\n    return filtered;\n  }\n\n  private applyPagination(results: ExternalActivity[], params: SearchParams): ExternalActivity[] {\n    const offset = params.offset || 0;\n    const limit = params.limit || 20;\n    return results.slice(offset, offset + limit);\n  }\n\n  private generateCacheKey(type: string, params: Record<string, unknown> | SearchParams): string {\n    return `${type}:${JSON.stringify(params)}`;\n  }\n\n  private getFromCache<T = unknown>(key: string): T | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expiry > Date.now()) {\n      return cached.data as T;\n    }\n    this.cache.delete(key);\n    return null;\n  }\n\n  private setCache(key: string, data: unknown): void {\n    this.cache.set(key, {\n      data,\n      expiry: Date.now() + this.CACHE_TTL,\n    });\n  }\n\n  /**\n   * Clear expired cache entries\n   */\n  private cleanupCache(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (value.expiry <= now) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get available activity sources\n   */\n  getAvailableSources(): string[] {\n    return Array.from(this.connectors.keys());\n  }\n\n  /**\n   * Check if a source is available\n   */\n  isSourceAvailable(source: string): boolean {\n    return this.connectors.has(source);\n  }\n}\n\n// Export singleton instance getter\nlet serviceInstance: ActivityDiscoveryService | null = null;\n\nexport function getActivityDiscoveryService(): ActivityDiscoveryService {\n  if (!serviceInstance) {\n    serviceInstance = new ActivityDiscoveryService();\n  }\n  return serviceInstance;\n}\n\n// Export singleton instance\nexport const activityDiscoveryService = getActivityDiscoveryService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "660030a3a9f7684349559d23e8093868e16be6ff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1qxx2hr2zs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1qxx2hr2zs();
import BaseService from './base/BaseService';
import { OERConnector } from './connectors/oerConnector';
import { CurriculumWebConnector } from './connectors/curriculumWebConnector';
import { EducationWebConnector } from './connectors/educationWebConnector';
/**
 * Enhanced Activity Discovery Service
 * Manages multiple connectors to search educational activities from various sources
 */
export class ActivityDiscoveryService extends BaseService {
  connectors =
  /* istanbul ignore next */
  (cov_1qxx2hr2zs().s[0]++, new Map());
  cache =
  /* istanbul ignore next */
  (cov_1qxx2hr2zs().s[1]++, new Map());
  CACHE_TTL =
  /* istanbul ignore next */
  (cov_1qxx2hr2zs().s[2]++, 1000 * 60 * 30); // 30 minutes
  constructor() {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[0]++;
    cov_1qxx2hr2zs().s[3]++;
    super('ActivityDiscoveryService');
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[4]++;
    this.initializeConnectors();
  }
  /**
   * Initialize available connectors
   */
  initializeConnectors() {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[1]++;
    cov_1qxx2hr2zs().s[5]++;
    try {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[6]++;
      // Add OER Commons connector
      this.connectors.set('oer', new OERConnector());
      // Add Curriculum Web connector (government resources)
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[7]++;
      this.connectors.set('curriculum', new CurriculumWebConnector());
      // Add Educational Websites connector (Khan Academy, ReadWorks, etc.)
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[8]++;
      this.connectors.set('education', new EducationWebConnector());
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[9]++;
      this.logger.info(`Initialized ${this.connectors.size} activity discovery connectors`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[10]++;
      this.logger.error({
        error
      }, 'Failed to initialize connectors');
    }
  }
  /**
   * Search for activities across all available sources
   */
  async search(params, userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[11]++, Date.now());
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[12]++;
    try {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[13]++;
      this.logger.info({
        params,
        userId
      }, 'Starting activity search');
      // Check cache first
      const cacheKey =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[14]++, this.generateCacheKey('search', params));
      const cached =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[15]++, this.getFromCache(cacheKey));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[16]++;
      if (cached) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[0][0]++;
        cov_1qxx2hr2zs().s[17]++;
        this.logger.debug('Returning cached search results');
        /* istanbul ignore next */
        cov_1qxx2hr2zs().s[18]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[0][1]++;
      }
      // Normalize and validate parameters
      const normalizedParams =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[19]++, this.normalizeSearchParams(params));
      // Determine which sources to search
      const sourcesToSearch =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[20]++, normalizedParams.sources ?
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[1][0]++, normalizedParams.sources.filter(s => {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().f[3]++;
        cov_1qxx2hr2zs().s[21]++;
        return this.connectors.has(s);
      })) :
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[1][1]++, Array.from(this.connectors.keys())));
      // Search each connector in parallel
      const searchPromises =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[22]++, sourcesToSearch.map(async sourceId => {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().f[4]++;
        const connector =
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().s[23]++, this.connectors.get(sourceId));
        /* istanbul ignore next */
        cov_1qxx2hr2zs().s[24]++;
        if (!connector) {
          /* istanbul ignore next */
          cov_1qxx2hr2zs().b[2][0]++;
          cov_1qxx2hr2zs().s[25]++;
          return [];
        } else
        /* istanbul ignore next */
        {
          cov_1qxx2hr2zs().b[2][1]++;
        }
        cov_1qxx2hr2zs().s[26]++;
        try {
          /* istanbul ignore next */
          cov_1qxx2hr2zs().s[27]++;
          this.logger.debug(`Searching ${sourceId} connector`);
          const results =
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().s[28]++, await connector.search(normalizedParams));
          /* istanbul ignore next */
          cov_1qxx2hr2zs().s[29]++;
          this.logger.debug(`${sourceId} returned ${results.length} results`);
          /* istanbul ignore next */
          cov_1qxx2hr2zs().s[30]++;
          return results;
        } catch (error) {
          /* istanbul ignore next */
          cov_1qxx2hr2zs().s[31]++;
          this.logger.error({
            error,
            sourceId
          }, `Search failed for ${sourceId}`);
          /* istanbul ignore next */
          cov_1qxx2hr2zs().s[32]++;
          return [];
        }
      }));
      const allResults =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[33]++, await Promise.all(searchPromises));
      const flatResults =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[34]++, allResults.flat());
      // Apply additional filtering and ranking
      const filteredResults =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[35]++, this.filterAndRankResults(flatResults, normalizedParams));
      // Apply pagination
      const paginatedResults =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[36]++, this.applyPagination(filteredResults, normalizedParams));
      const result =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[37]++, {
        activities: paginatedResults,
        total: filteredResults.length,
        hasMore: (
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().b[3][0]++, normalizedParams.offset) ||
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().b[3][1]++, 0)) + paginatedResults.length < filteredResults.length,
        searchParams: normalizedParams,
        sources: sourcesToSearch,
        executionTime: Date.now() - startTime
      });
      // Cache the result
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[38]++;
      this.setCache(cacheKey, result);
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[39]++;
      this.logger.info({
        resultsCount: paginatedResults.length,
        totalFound: filteredResults.length,
        executionTime: result.executionTime,
        sources: sourcesToSearch
      }, 'Activity search completed');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[40]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[41]++;
      this.logger.error({
        error,
        params,
        userId
      }, 'Activity search failed');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[42]++;
      throw new Error('Activity search failed');
    }
  }
  /**
   * Get activity details from a specific source
   */
  async getActivity(source, externalId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[5]++;
    cov_1qxx2hr2zs().s[43]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[44]++, this.generateCacheKey('activity', {
        source,
        externalId
      }));
      const cached =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[45]++, this.getFromCache(cacheKey));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[46]++;
      if (cached) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[4][0]++;
        cov_1qxx2hr2zs().s[47]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[4][1]++;
      }
      const connector =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[48]++, this.connectors.get(source));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[49]++;
      if (!connector) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[5][0]++;
        cov_1qxx2hr2zs().s[50]++;
        this.logger.warn({
          source
        }, 'Unknown activity source');
        /* istanbul ignore next */
        cov_1qxx2hr2zs().s[51]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[5][1]++;
      }
      const activity =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[52]++, await connector.getActivityDetails(externalId));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[53]++;
      if (activity) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[6][0]++;
        cov_1qxx2hr2zs().s[54]++;
        this.setCache(cacheKey, activity);
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[6][1]++;
      }
      cov_1qxx2hr2zs().s[55]++;
      return activity;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[56]++;
      this.logger.error({
        error,
        source,
        externalId
      }, 'Failed to get activity details');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[57]++;
      return null;
    }
  }
  /**
   * Get activity by composite ID (source-externalId)
   */
  async getActivityById(id) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[6]++;
    const [source, ...externalIdParts] =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[58]++, id.split('-'));
    const externalId =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[59]++, externalIdParts.join('-'));
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[60]++;
    return this.getActivity(
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[7][0]++, source) ||
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[7][1]++, 'unknown'),
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[8][0]++, externalId) ||
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[8][1]++, id));
  }
  /**
   * Alias for getActivityById for backward compatibility
   */
  async getActivityDetails(id) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[7]++;
    cov_1qxx2hr2zs().s[61]++;
    return this.getActivityById(id);
  }
  /**
   * Import an activity into user's collection or lesson plan
   */
  async importActivity(params, userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[8]++;
    cov_1qxx2hr2zs().s[62]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[63]++, await import('../prisma'));
      // Ensure the activity exists in our database
      const [source, ...externalIdParts] =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[64]++, params.activityId.split('-'));
      const externalId =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[65]++, externalIdParts.join('-'));
      // Get activity details to store in our database if needed
      const activityDetails =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[66]++, await this.getActivity(source, externalId));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[67]++;
      if (!activityDetails) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[9][0]++;
        cov_1qxx2hr2zs().s[68]++;
        throw new Error('Activity not found');
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[9][1]++;
      }
      // Create or find the external activity record
      let externalActivity =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[69]++, await prisma.externalActivity.findUnique({
        where: {
          source_externalId: {
            source: activityDetails.source,
            externalId: activityDetails.externalId
          }
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[70]++;
      if (!externalActivity) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[10][0]++;
        cov_1qxx2hr2zs().s[71]++;
        externalActivity = await prisma.externalActivity.create({
          data: activityDetails
        });
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[10][1]++;
      }
      // Create the activity import record
      const activityImport =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[72]++, await prisma.activityImport.create({
        data: {
          userId,
          activityId: externalActivity.id,
          lessonPlanId:
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[11][0]++, params.lessonPlanId) ||
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[11][1]++, null),
          lessonSection:
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[12][0]++, params.lessonSection) ||
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[12][1]++, null),
          customizations:
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[13][0]++, params.customizations) ||
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[13][1]++, null),
          notes:
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[14][0]++, params.notes) ||
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[14][1]++, null)
        },
        include: {
          activity: true,
          lessonPlan: {
            select: {
              id: true,
              title: true,
              date: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[73]++;
      this.logger.info({
        userId,
        activityId: params.activityId,
        lessonPlanId: params.lessonPlanId
      }, 'Activity imported successfully');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[74]++;
      return activityImport;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[75]++;
      this.logger.error({
        error,
        params,
        userId
      }, 'Failed to import activity');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[76]++;
      throw error;
    }
  }
  /**
   * Rate an activity
   */
  async rateActivity(activityId, rating, review, details, userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[9]++;
    cov_1qxx2hr2zs().s[77]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[78]++, await import('../prisma'));
      // Ensure the activity exists
      const activity =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[79]++, await prisma.externalActivity.findUnique({
        where: {
          id: activityId
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[80]++;
      if (!activity) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[15][0]++;
        cov_1qxx2hr2zs().s[81]++;
        throw new Error('Activity not found');
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[15][1]++;
      }
      // Create or update the rating
      const activityRating =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[82]++, await prisma.activityRating.upsert({
        where: {
          userId_activityId: {
            userId,
            activityId
          }
        },
        update: {
          rating,
          review,
          wouldRecommend: details.wouldRecommend,
          gradeUsed: details.gradeUsed,
          subjectUsed: details.subjectUsed,
          workedWell: details.workedWell,
          challenges: details.challenges
        },
        create: {
          userId,
          activityId,
          rating,
          review,
          wouldRecommend: details.wouldRecommend,
          gradeUsed: details.gradeUsed,
          subjectUsed: details.subjectUsed,
          workedWell: details.workedWell,
          challenges: details.challenges
        },
        include: {
          activity: true
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[83]++;
      this.logger.info({
        userId,
        activityId,
        rating
      }, 'Activity rated successfully');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[84]++;
      return activityRating;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[85]++;
      this.logger.error({
        error,
        activityId,
        userId
      }, 'Failed to rate activity');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[86]++;
      throw error;
    }
  }
  /**
   * Get user's activity collections
   */
  async getUserCollections(userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[10]++;
    cov_1qxx2hr2zs().s[87]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[88]++, await import('../prisma'));
      const collections =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[89]++, await prisma.activityCollection.findMany({
        where: {
          userId
        },
        include: {
          items: {
            include: {
              activity: true
            }
          }
        },
        orderBy: {
          updatedAt: 'desc'
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[90]++;
      return collections;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[91]++;
      this.logger.error({
        error,
        userId
      }, 'Failed to get user collections');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[92]++;
      return [];
    }
  }
  /**
   * Create a new activity collection
   */
  async createCollection(data, userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[11]++;
    cov_1qxx2hr2zs().s[93]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[94]++, await import('../prisma'));
      const collection =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[95]++, await prisma.activityCollection.create({
        data: {
          userId,
          name: data.name,
          description:
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[16][0]++, data.description) ||
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[16][1]++, null),
          isPublic:
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[17][0]++, data.isPublic) ||
          /* istanbul ignore next */
          (cov_1qxx2hr2zs().b[17][1]++, false)
        },
        include: {
          items: true
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[96]++;
      this.logger.info({
        userId,
        collectionName: data.name
      }, 'Activity collection created');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[97]++;
      return collection;
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[98]++;
      this.logger.error({
        error,
        data,
        userId
      }, 'Failed to create collection');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[99]++;
      throw error;
    }
  }
  /**
   * Add activity to collection
   */
  async addToCollection(collectionId, activityId, userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[12]++;
    cov_1qxx2hr2zs().s[100]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[101]++, await import('../prisma'));
      // Verify the collection belongs to the user
      const collection =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[102]++, await prisma.activityCollection.findFirst({
        where: {
          id: collectionId,
          userId
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[103]++;
      if (!collection) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[18][0]++;
        cov_1qxx2hr2zs().s[104]++;
        throw new Error('Collection not found or access denied');
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[18][1]++;
      }
      // Add to collection
      cov_1qxx2hr2zs().s[105]++;
      await prisma.activityCollectionItem.create({
        data: {
          collectionId,
          activityId
        }
      });
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[106]++;
      return {
        success: true,
        collectionId,
        activityId
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[107]++;
      this.logger.error({
        error,
        collectionId,
        activityId,
        userId
      }, 'Failed to add to collection');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[108]++;
      throw error;
    }
  }
  /**
   * Remove activity from collection
   */
  async removeFromCollection(collectionId, activityId, userId) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[13]++;
    cov_1qxx2hr2zs().s[109]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[110]++, await import('../prisma'));
      // Verify the collection belongs to the user
      const collection =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[111]++, await prisma.activityCollection.findFirst({
        where: {
          id: collectionId,
          userId
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[112]++;
      if (!collection) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[19][0]++;
        cov_1qxx2hr2zs().s[113]++;
        throw new Error('Collection not found or access denied');
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[19][1]++;
      }
      // Remove from collection
      cov_1qxx2hr2zs().s[114]++;
      await prisma.activityCollectionItem.delete({
        where: {
          collectionId_activityId: {
            collectionId,
            activityId
          }
        }
      });
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[115]++;
      return {
        success: true,
        collectionId,
        activityId
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[116]++;
      this.logger.error({
        error,
        collectionId,
        activityId,
        userId
      }, 'Failed to remove from collection');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[117]++;
      throw error;
    }
  }
  /**
   * Get recommended activities for a lesson plan
   */
  async getRecommendedActivities(lessonPlanId, userId, limit =
  /* istanbul ignore next */
  (cov_1qxx2hr2zs().b[20][0]++, 5)) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[14]++;
    cov_1qxx2hr2zs().s[118]++;
    try {
      const {
        prisma
      } =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[119]++, await import('../prisma'));
      // Get lesson plan details
      const lessonPlan =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[120]++, await prisma.eTFOLessonPlan.findUnique({
        where: {
          id: lessonPlanId
        },
        include: {
          unitPlan: {
            include: {
              longRangePlan: true
            }
          },
          expectations: {
            include: {
              expectation: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[121]++;
      if (!lessonPlan) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[21][0]++;
        cov_1qxx2hr2zs().s[122]++;
        throw new Error('Lesson plan not found');
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[21][1]++;
      }
      // Build search criteria based on lesson plan
      const searchParams =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[123]++, {
        grade: lessonPlan.unitPlan.longRangePlan.grade,
        subject: lessonPlan.unitPlan.longRangePlan.subject,
        language: 'en',
        // Default to English for now
        limit
      });
      // Search for relevant activities
      const searchResult =
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().s[124]++, await this.search(searchParams, userId));
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[125]++;
      return {
        activities: searchResult.activities,
        basedOn: 'lessonPlan',
        lessonPlanId,
        limit,
        criteria: [`Grade ${lessonPlan.unitPlan.longRangePlan.grade}`, lessonPlan.unitPlan.longRangePlan.subject, 'English']
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[126]++;
      this.logger.error({
        error,
        lessonPlanId,
        userId
      }, 'Failed to get recommended activities');
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[127]++;
      return {
        activities: [],
        basedOn: 'lessonPlan',
        lessonPlanId,
        limit,
        criteria: []
      };
    }
  }
  // Private helper methods
  normalizeSearchParams(params) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[15]++;
    cov_1qxx2hr2zs().s[128]++;
    return {
      ...params,
      grade:
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[22][0]++, params.grade) ||
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[22][1]++, params.gradeLevel),
      limit: Math.min(
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[23][0]++, params.limit) ||
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[23][1]++, 20), 100),
      offset: Math.max(
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[24][0]++, params.offset) ||
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[24][1]++, 0), 0)
    };
  }
  filterAndRankResults(results, params) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[16]++;
    let filtered =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[129]++, results);
    // Filter by grade if specified
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[130]++;
    if (params.grade) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().b[25][0]++;
      cov_1qxx2hr2zs().s[131]++;
      filtered = filtered.filter(activity => {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().f[17]++;
        cov_1qxx2hr2zs().s[132]++;
        return /* istanbul ignore next */(cov_1qxx2hr2zs().b[26][0]++, activity.gradeMin <= params.grade) &&
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().b[26][1]++, activity.gradeMax >= params.grade);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qxx2hr2zs().b[25][1]++;
    }
    // Filter by free only if specified
    cov_1qxx2hr2zs().s[133]++;
    if (params.onlyFree) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().b[27][0]++;
      cov_1qxx2hr2zs().s[134]++;
      filtered = filtered.filter(activity => {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().f[18]++;
        cov_1qxx2hr2zs().s[135]++;
        return activity.isFree;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qxx2hr2zs().b[27][1]++;
    }
    // Filter by activity type if specified
    cov_1qxx2hr2zs().s[136]++;
    if (
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[29][0]++, params.activityType) &&
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[29][1]++, params.activityType.length > 0)) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().b[28][0]++;
      cov_1qxx2hr2zs().s[137]++;
      filtered = filtered.filter(activity => {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().f[19]++;
        cov_1qxx2hr2zs().s[138]++;
        return params.activityType.includes(activity.activityType);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qxx2hr2zs().b[28][1]++;
    }
    // Filter by materials if specified
    cov_1qxx2hr2zs().s[139]++;
    if (
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[31][0]++, params.materials) &&
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[31][1]++, params.materials.length > 0)) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().b[30][0]++;
      cov_1qxx2hr2zs().s[140]++;
      filtered = filtered.filter(activity => {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().f[20]++;
        const activityMaterials =
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().s[141]++, Array.isArray(activity.materials) ?
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().b[32][0]++, activity.materials) :
        /* istanbul ignore next */
        (cov_1qxx2hr2zs().b[32][1]++, []));
        /* istanbul ignore next */
        cov_1qxx2hr2zs().s[142]++;
        if (params.requireAllMaterials) {
          /* istanbul ignore next */
          cov_1qxx2hr2zs().b[33][0]++;
          cov_1qxx2hr2zs().s[143]++;
          return params.materials.every(material => {
            /* istanbul ignore next */
            cov_1qxx2hr2zs().f[21]++;
            cov_1qxx2hr2zs().s[144]++;
            return activityMaterials.some(am => {
              /* istanbul ignore next */
              cov_1qxx2hr2zs().f[22]++;
              cov_1qxx2hr2zs().s[145]++;
              return /* istanbul ignore next */(cov_1qxx2hr2zs().b[34][0]++, typeof am === 'string') &&
              /* istanbul ignore next */
              (cov_1qxx2hr2zs().b[34][1]++, am.toLowerCase().includes(material.toLowerCase()));
            });
          });
        } else {
          /* istanbul ignore next */
          cov_1qxx2hr2zs().b[33][1]++;
          cov_1qxx2hr2zs().s[146]++;
          return params.materials.some(material => {
            /* istanbul ignore next */
            cov_1qxx2hr2zs().f[23]++;
            cov_1qxx2hr2zs().s[147]++;
            return activityMaterials.some(am => {
              /* istanbul ignore next */
              cov_1qxx2hr2zs().f[24]++;
              cov_1qxx2hr2zs().s[148]++;
              return /* istanbul ignore next */(cov_1qxx2hr2zs().b[35][0]++, typeof am === 'string') &&
              /* istanbul ignore next */
              (cov_1qxx2hr2zs().b[35][1]++, am.toLowerCase().includes(material.toLowerCase()));
            });
          });
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qxx2hr2zs().b[30][1]++;
    }
    // Sort by relevance (this could be enhanced with more sophisticated ranking)
    cov_1qxx2hr2zs().s[149]++;
    filtered.sort((a, b) => {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().f[25]++;
      cov_1qxx2hr2zs().s[150]++;
      // Prioritize activities with ratings
      if (
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[37][0]++, a.sourceRating) &&
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[37][1]++, !b.sourceRating)) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[36][0]++;
        cov_1qxx2hr2zs().s[151]++;
        return -1;
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[36][1]++;
      }
      cov_1qxx2hr2zs().s[152]++;
      if (
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[39][0]++, !a.sourceRating) &&
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[39][1]++, b.sourceRating)) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[38][0]++;
        cov_1qxx2hr2zs().s[153]++;
        return 1;
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[38][1]++;
      }
      // Sort by rating if both have ratings
      cov_1qxx2hr2zs().s[154]++;
      if (
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[41][0]++, a.sourceRating) &&
      /* istanbul ignore next */
      (cov_1qxx2hr2zs().b[41][1]++, b.sourceRating)) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[40][0]++;
        cov_1qxx2hr2zs().s[155]++;
        return b.sourceRating - a.sourceRating;
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[40][1]++;
      }
      // Sort by last verified date
      cov_1qxx2hr2zs().s[156]++;
      return new Date(b.lastVerified).getTime() - new Date(a.lastVerified).getTime();
    });
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[157]++;
    return filtered;
  }
  applyPagination(results, params) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[26]++;
    const offset =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[158]++,
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[42][0]++, params.offset) ||
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[42][1]++, 0));
    const limit =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[159]++,
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[43][0]++, params.limit) ||
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[43][1]++, 20));
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[160]++;
    return results.slice(offset, offset + limit);
  }
  generateCacheKey(type, params) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[27]++;
    cov_1qxx2hr2zs().s[161]++;
    return `${type}:${JSON.stringify(params)}`;
  }
  getFromCache(key) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[28]++;
    const cached =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[162]++, this.cache.get(key));
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[163]++;
    if (
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[45][0]++, cached) &&
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().b[45][1]++, cached.expiry > Date.now())) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().b[44][0]++;
      cov_1qxx2hr2zs().s[164]++;
      return cached.data;
    } else
    /* istanbul ignore next */
    {
      cov_1qxx2hr2zs().b[44][1]++;
    }
    cov_1qxx2hr2zs().s[165]++;
    this.cache.delete(key);
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[166]++;
    return null;
  }
  setCache(key, data) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[29]++;
    cov_1qxx2hr2zs().s[167]++;
    this.cache.set(key, {
      data,
      expiry: Date.now() + this.CACHE_TTL
    });
  }
  /**
   * Clear expired cache entries
   */
  cleanupCache() {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[30]++;
    const now =
    /* istanbul ignore next */
    (cov_1qxx2hr2zs().s[168]++, Date.now());
    /* istanbul ignore next */
    cov_1qxx2hr2zs().s[169]++;
    for (const [key, value] of this.cache.entries()) {
      /* istanbul ignore next */
      cov_1qxx2hr2zs().s[170]++;
      if (value.expiry <= now) {
        /* istanbul ignore next */
        cov_1qxx2hr2zs().b[46][0]++;
        cov_1qxx2hr2zs().s[171]++;
        this.cache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_1qxx2hr2zs().b[46][1]++;
      }
    }
  }
  /**
   * Get available activity sources
   */
  getAvailableSources() {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[31]++;
    cov_1qxx2hr2zs().s[172]++;
    return Array.from(this.connectors.keys());
  }
  /**
   * Check if a source is available
   */
  isSourceAvailable(source) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().f[32]++;
    cov_1qxx2hr2zs().s[173]++;
    return this.connectors.has(source);
  }
}
// Export singleton instance getter
let serviceInstance =
/* istanbul ignore next */
(cov_1qxx2hr2zs().s[174]++, null);
export function getActivityDiscoveryService() {
  /* istanbul ignore next */
  cov_1qxx2hr2zs().f[33]++;
  cov_1qxx2hr2zs().s[175]++;
  if (!serviceInstance) {
    /* istanbul ignore next */
    cov_1qxx2hr2zs().b[47][0]++;
    cov_1qxx2hr2zs().s[176]++;
    serviceInstance = new ActivityDiscoveryService();
  } else
  /* istanbul ignore next */
  {
    cov_1qxx2hr2zs().b[47][1]++;
  }
  cov_1qxx2hr2zs().s[177]++;
  return serviceInstance;
}
// Export singleton instance
export const activityDiscoveryService =
/* istanbul ignore next */
(cov_1qxx2hr2zs().s[178]++, getActivityDiscoveryService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,