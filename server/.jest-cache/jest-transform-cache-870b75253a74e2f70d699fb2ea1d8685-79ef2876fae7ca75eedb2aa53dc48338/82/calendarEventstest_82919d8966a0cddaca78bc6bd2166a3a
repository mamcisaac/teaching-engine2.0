d2d65d1fe4a2d74e338d18110233118d
import { describe, it, expect, beforeAll, beforeEach } from '@jest/globals';
import { app } from '../../src/index';
import { authRequest } from '../test-auth-helper';
import { prisma } from '../../src/prisma';
import { setupAuthenticatedTest } from '../test-setup-helpers';
describe('calendar events', () => {
    const auth = authRequest(app);
    beforeAll(async () => {
        // prisma is imported directly
    });
    beforeEach(async () => {
        // Clean up calendar events before each test to prevent contamination
        await prisma.calendarEvent.deleteMany({});
        // Setup auth for each test to handle database resets
        await setupAuthenticatedTest(prisma, auth);
    });
    it('creates and lists events', async () => {
        const res = await auth.post('/api/calendar-events').send({
            title: 'PD Day',
            start: '2025-01-02T00:00:00.000Z',
            end: '2025-01-02T23:59:59.000Z',
            allDay: true,
            eventType: 'PD_DAY',
        });
        expect(res.status).toBe(201);
        const list = await auth.get('/api/calendar-events?start=2025-01-01&end=2025-01-03');
        expect(list.status).toBe(200);
        expect(list.body.length).toBe(1);
        expect(list.body[0].title).toBe('PD Day');
    });
    it('handles date range queries', async () => {
        // Create events in different date ranges with distinct dates
        await auth.post('/api/calendar-events').send({
            title: 'Event 1',
            start: '2025-03-05T00:00:00.000Z',
            end: '2025-03-05T23:59:59.000Z',
            allDay: true,
            eventType: 'HOLIDAY',
        });
        await auth.post('/api/calendar-events').send({
            title: 'Event 2',
            start: '2025-03-15T00:00:00.000Z',
            end: '2025-03-15T23:59:59.000Z',
            allDay: true,
            eventType: 'HOLIDAY',
        });
        // Query for specific date range that should only include Event 2
        const list = await auth.get('/api/calendar-events?start=2025-03-10&end=2025-03-20');
        expect(list.status).toBe(200);
        expect(list.body.length).toBe(1);
        expect(list.body[0].title).toBe('Event 2');
    });
    it('updates calendar events', async () => {
        // Create an event
        const createRes = await auth.post('/api/calendar-events').send({
            title: 'Original Title',
            start: '2025-02-01T00:00:00.000Z',
            end: '2025-02-01T23:59:59.000Z',
            allDay: true,
            eventType: 'HOLIDAY',
        });
        expect(createRes.status).toBe(201);
        const eventId = createRes.body.id;
        // Update the event
        const updateRes = await auth.patch(`/api/calendar-events/${eventId}`).send({
            title: 'Updated Title',
            eventType: 'PD_DAY',
        });
        expect(updateRes.status).toBe(200);
        expect(updateRes.body.title).toBe('Updated Title');
        expect(updateRes.body.eventType).toBe('PD_DAY');
    });
    it('deletes calendar events', async () => {
        // Create an event
        const createRes = await auth.post('/api/calendar-events').send({
            title: 'To Delete',
            start: '2025-03-01T00:00:00.000Z',
            end: '2025-03-01T23:59:59.000Z',
            allDay: true,
            eventType: 'HOLIDAY',
        });
        expect(createRes.status).toBe(201);
        const eventId = createRes.body.id;
        // Delete the event
        const deleteRes = await auth.delete(`/api/calendar-events/${eventId}`);
        expect(deleteRes.status).toBe(204);
        // Verify it's deleted
        const list = await auth.get('/api/calendar-events?start=2025-03-01&end=2025-03-01');
        expect(list.status).toBe(200);
        expect(list.body.length).toBe(0);
    });
    describe('Edge Cases', () => {
        it('should handle empty data scenarios gracefully', async () => {
            // Query with no events
            const list = await auth.get('/api/calendar-events?start=2030-01-01&end=2030-12-31');
            expect(list.status).toBe(200);
            expect(list.body).toEqual([]);
        });
        it('should handle invalid date formats', async () => {
            const res = await auth.post('/api/calendar-events').send({
                title: 'Invalid Date Event',
                start: 'invalid-date',
                end: '2025-01-01T00:00:00.000Z',
                eventType: 'HOLIDAY',
            });
            expect(res.status).toBe(400);
        });
        it('should handle overlapping events', async () => {
            // Create first event
            await auth.post('/api/calendar-events').send({
                title: 'Event A',
                start: '2025-04-01T10:00:00.000Z',
                end: '2025-04-01T12:00:00.000Z',
                eventType: 'CUSTOM',
            });
            // Create overlapping event - should succeed
            const res = await auth.post('/api/calendar-events').send({
                title: 'Event B',
                start: '2025-04-01T11:00:00.000Z',
                end: '2025-04-01T13:00:00.000Z',
                eventType: 'CUSTOM',
            });
            expect(res.status).toBe(201);
        });
        it('should validate required fields', async () => {
            const res = await auth.post('/api/calendar-events').send({
                // Missing required fields
                eventType: 'HOLIDAY',
            });
            expect(res.status).toBe(400);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2NhbGVuZGFyRXZlbnRzLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0QsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLDhCQUE4QjtJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixxRUFBcUU7UUFDckUsTUFBTSxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxQyxxREFBcUQ7UUFDckQsTUFBTSxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZELEtBQUssRUFBRSxRQUFRO1lBQ2YsS0FBSyxFQUFFLDBCQUEwQjtZQUNqQyxHQUFHLEVBQUUsMEJBQTBCO1lBQy9CLE1BQU0sRUFBRSxJ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QyxJQUFJLENBQUM7Z0JBQ3ZELEtBQUssRUFBRSxTQUFTO2dCQUNoQixLQUFLLEVBQUUsMEJBQTBCO2dCQUNqQyxHQUFHLEVBQUUsMEJBQTBCO2dCQUMvQixTQUFTLEVBQUUsUUFBUTthQUNwQixDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMvQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3ZELDBCQUEwQjtnQkFDMUIsU0FBUyxFQUFFLFNBQVM7YUFDckIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy9pbnRlZ3JhdGlvbi9jYWxlbmRhckV2ZW50cy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGJlZm9yZUVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uLy4uL3NyYy9pbmRleCc7XG5pbXBvcnQgeyBhdXRoUmVxdWVzdCB9IGZyb20gJy4uL3Rlc3QtYXV0aC1oZWxwZXInO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi4vLi4vc3JjL3ByaXNtYSc7XG5pbXBvcnQgeyBzZXR1cEF1dGhlbnRpY2F0ZWRUZXN0IH0gZnJvbSAnLi4vdGVzdC1zZXR1cC1oZWxwZXJzJztcblxuZGVzY3JpYmUoJ2NhbGVuZGFyIGV2ZW50cycsICgpID0+IHtcbiAgY29uc3QgYXV0aCA9IGF1dGhSZXF1ZXN0KGFwcCk7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgLy8gcHJpc21hIGlzIGltcG9ydGVkIGRpcmVjdGx5XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIENsZWFuIHVwIGNhbGVuZGFyIGV2ZW50cyBiZWZvcmUgZWFjaCB0ZXN0IHRvIHByZXZlbnQgY29udGFtaW5hdGlvblxuICAgIGF3YWl0IHByaXNtYS5jYWxlbmRhckV2ZW50LmRlbGV0ZU1hbnkoe30pO1xuXG4gICAgLy8gU2V0dXAgYXV0aCBmb3IgZWFjaCB0ZXN0IHRvIGhhbmRsZSBkYXRhYmFzZSByZXNldHNcbiAgICBhd2FpdCBzZXR1cEF1dGhlbnRpY2F0ZWRUZXN0KHByaXNtYSwgYXV0aCk7XG4gIH0pO1xuXG4gIGl0KCdjcmVhdGVzIGFuZCBsaXN0cyBldmVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2NhbGVuZGFyLWV2ZW50cycpLnNlbmQoe1xuICAgICAgdGl0bGU6ICdQRCBEYXknLFxuICAgICAgc3RhcnQ6ICcyMDI1LTAxLTAyVDAwOjAwOjAwLjAwMFonLFxuICAgICAgZW5kOiAnMjAyNS0wMS0wMlQyMzo1OTo1OS4wMDBaJyxcbiAgICAgIGFsbERheTogdHJ1ZSxcbiAgICAgIGV2ZW50VHlwZTogJ1BEX0RBWScsXG4gICAgfSk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAxKTtcblxuICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBhdXRoLmdldCgnL2FwaS9jYWxlbmRhci1ldmVudHM/c3RhcnQ9MjAyNS0wMS0wMSZlbmQ9MjAyNS0wMS0wMycpO1xuICAgIGV4cGVjdChsaXN0LnN0YXR1cykudG9CZSgyMDApO1xuICAgIGV4cGVjdChsaXN0LmJvZHkubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChsaXN0LmJvZHlbMF0udGl0bGUpLnRvQmUoJ1BEIERheScpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBkYXRlIHJhbmdlIHF1ZXJpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGV2ZW50cyBpbiBkaWZmZXJlbnQgZGF0ZSByYW5nZXMgd2l0aCBkaXN0aW5jdCBkYXRlc1xuICAgIGF3YWl0IGF1dGgucG9zdCgnL2FwaS9jYWxlbmRhci1ldmVudHMnKS5zZW5kKHtcbiAgICAgIHRpdGxlOiAnRXZlbnQgMScsXG4gICAgICBzdGFydDogJzIwMjUtMDMtMDVUMDA6MDA6MDAuMDAwWicsXG4gICAgICBlbmQ6ICcyMDI1LTAzLTA1VDIzOjU5OjU5LjAwMFonLFxuICAgICAgYWxsRGF5OiB0cnVlLFxuICAgICAgZXZlbnRUeXBlOiAnSE9MSURBWScsXG4gICAgfSk7XG5cbiAgICBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvY2FsZW5kYXItZXZlbnRzJykuc2VuZCh7XG4gICAgICB0aXRsZTogJ0V2ZW50IDInLFxuICAgICAgc3RhcnQ6ICcyMDI1LTAzLTE1VDAwOjAwOjAwLjAwMFonLFxuICAgICAgZW5kOiAnMjAyNS0wMy0xNVQyMzo1OTo1OS4wMDBaJyxcbiAgICAgIGFsbERheTogdHJ1ZSxcbiAgICAgIGV2ZW50VHlwZTogJ0hPTElEQVknLFxuICAgIH0pO1xuXG4gICAgLy8gUXVlcnkgZm9yIHNwZWNpZmljIGRhdGUgcmFuZ2UgdGhhdCBzaG91bGQgb25seSBpbmNsdWRlIEV2ZW50IDJcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgYXV0aC5nZXQoJy9hcGkvY2FsZW5kYXItZXZlbnRzP3N0YXJ0PTIwMjUtMDMtMTAmZW5kPTIwMjUtMDMtMjAnKTtcbiAgICBleHBlY3QobGlzdC5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICBleHBlY3QobGlzdC5ib2R5Lmxlbmd0aCkudG9CZSgxKTtcbiAgICBleHBlY3QobGlzdC5ib2R5WzBdLnRpdGxlKS50b0JlKCdFdmVudCAyJyk7XG4gIH0pO1xuXG4gIGl0KCd1cGRhdGVzIGNhbGVuZGFyIGV2ZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBDcmVhdGUgYW4gZXZlbnRcbiAgICBjb25zdCBjcmVhdGVSZXMgPSBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvY2FsZW5kYXItZXZlbnRzJykuc2VuZCh7XG4gICAgICB0aXRsZTogJ09yaWdpbmFsIFRpdGxlJyxcbiAgICAgIHN0YXJ0OiAnMjAyNS0wMi0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgIGVuZDogJzIwMjUtMDItMDFUMjM6NTk6NTkuMDAwWicsXG4gICAgICBhbGxEYXk6IHRydWUsXG4gICAgICBldmVudFR5cGU6ICdIT0xJREFZJyxcbiAgICB9KTtcbiAgICBleHBlY3QoY3JlYXRlUmVzLnN0YXR1cykudG9CZSgyMDEpO1xuICAgIGNvbnN0IGV2ZW50SWQgPSBjcmVhdGVSZXMuYm9keS5pZDtcblxuICAgIC8vIFVwZGF0ZSB0aGUgZXZlbnRcbiAgICBjb25zdCB1cGRhdGVSZXMgPSBhd2FpdCBhdXRoLnBhdGNoKGAvYXBpL2NhbGVuZGFyLWV2ZW50cy8ke2V2ZW50SWR9YCkuc2VuZCh7XG4gICAgICB0aXRsZTogJ1VwZGF0ZWQgVGl0bGUnLFxuICAgICAgZXZlbnRUeXBlOiAnUERfREFZJyxcbiAgICB9KTtcbiAgICBleHBlY3QodXBkYXRlUmVzLnN0YXR1cykudG9CZSgyMDApO1xuICAgIGV4cGVjdCh1cGRhdGVSZXMuYm9keS50aXRsZSkudG9CZSgnVXBkYXRlZCBUaXRsZScpO1xuICAgIGV4cGVjdCh1cGRhdGVSZXMuYm9keS5ldmVudFR5cGUpLnRvQmUoJ1BEX0RBWScpO1xuICB9KTtcblxuICBpdCgnZGVsZXRlcyBjYWxlbmRhciBldmVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGFuIGV2ZW50XG4gICAgY29uc3QgY3JlYXRlUmVzID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2NhbGVuZGFyLWV2ZW50cycpLnNlbmQoe1xuICAgICAgdGl0bGU6ICdUbyBEZWxldGUnLFxuICAgICAgc3RhcnQ6ICcyMDI1LTAzLTAxVDAwOjAwOjAwLjAwMFonLFxuICAgICAgZW5kOiAnMjAyNS0wMy0wMVQyMzo1OTo1OS4wMDBaJyxcbiAgICAgIGFsbERheTogdHJ1ZSxcbiAgICAgIGV2ZW50VHlwZTogJ0hPTElEQVknLFxuICAgIH0pO1xuICAgIGV4cGVjdChjcmVhdGVSZXMuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgY29uc3QgZXZlbnRJZCA9IGNyZWF0ZVJlcy5ib2R5LmlkO1xuXG4gICAgLy8gRGVsZXRlIHRoZSBldmVudFxuICAgIGNvbnN0IGRlbGV0ZVJlcyA9IGF3YWl0IGF1dGguZGVsZXRlKGAvYXBpL2NhbGVuZGFyLWV2ZW50cy8ke2V2ZW50SWR9YCk7XG4gICAgZXhwZWN0KGRlbGV0ZVJlcy5zdGF0dXMpLnRvQmUoMjA0KTtcblxuICAgIC8vIFZlcmlmeSBpdCdzIGRlbGV0ZWRcbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgYXV0aC5nZXQoJy9hcGkvY2FsZW5kYXItZXZlbnRzP3N0YXJ0PTIwMjUtMDMtMDEmZW5kPTIwMjUtMDMtMDEnKTtcbiAgICBleHBlY3QobGlzdC5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICBleHBlY3QobGlzdC5ib2R5Lmxlbmd0aCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZGF0YSBzY2VuYXJpb3MgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFF1ZXJ5IHdpdGggbm8gZXZlbnRzXG4gICAgICBjb25zdCBsaXN0ID0gYXdhaXQgYXV0aC5nZXQoJy9hcGkvY2FsZW5kYXItZXZlbnRzP3N0YXJ0PTIwMzAtMDEtMDEmZW5kPTIwMzAtMTItMzEnKTtcbiAgICAgIGV4cGVjdChsaXN0LnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KGxpc3QuYm9keSkudG9FcXVhbChbXSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGRhdGUgZm9ybWF0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9jYWxlbmRhci1ldmVudHMnKS5zZW5kKHtcbiAgICAgICAgdGl0bGU6ICdJbnZhbGlkIERhdGUgRXZlbnQnLFxuICAgICAgICBzdGFydDogJ2ludmFsaWQtZGF0ZScsXG4gICAgICAgIGVuZDogJzIwMjUtMDEtMDFUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgIGV2ZW50VHlwZTogJ0hPTElEQVknLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSg0MDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgb3ZlcmxhcHBpbmcgZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGZpcnN0IGV2ZW50XG4gICAgICBhd2FpdCBhdXRoLnBvc3QoJy9hcGkvY2FsZW5kYXItZXZlbnRzJykuc2VuZCh7XG4gICAgICAgIHRpdGxlOiAnRXZlbnQgQScsXG4gICAgICAgIHN0YXJ0OiAnMjAyNS0wNC0wMVQxMDowMDowMC4wMDBaJyxcbiAgICAgICAgZW5kOiAnMjAyNS0wNC0wMVQxMjowMDowMC4wMDBaJyxcbiAgICAgICAgZXZlbnRUeXBlOiAnQ1VTVE9NJyxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgb3ZlcmxhcHBpbmcgZXZlbnQgLSBzaG91bGQgc3VjY2VlZFxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXV0aC5wb3N0KCcvYXBpL2NhbGVuZGFyLWV2ZW50cycpLnNlbmQoe1xuICAgICAgICB0aXRsZTogJ0V2ZW50IEInLFxuICAgICAgICBzdGFydDogJzIwMjUtMDQtMDFUMTE6MDA6MDAuMDAwWicsXG4gICAgICAgIGVuZDogJzIwMjUtMDQtMDFUMTM6MDA6MDAuMDAwWicsXG4gICAgICAgIGV2ZW50VHlwZTogJ0NVU1RPTScsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF1dGgucG9zdCgnL2FwaS9jYWxlbmRhci1ldmVudHMnKS5zZW5kKHtcbiAgICAgICAgLy8gTWlzc2luZyByZXF1aXJlZCBmaWVsZHNcbiAgICAgICAgZXZlbnRUeXBlOiAnSE9MSURBWScsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDQwMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=