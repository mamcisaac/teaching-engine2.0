{"version":3,"names":["OpenAI","openai","cov_2d0fg5t1fx","s","getOpenAI","f","b","apiKey","process","env","OPENAI_API_KEY","SmartMaterialExtractor","extractMaterialsFromText","text","trim","patternMaterials","extractMaterialsPattern","length","aiMaterials","extractMaterialsWithAI","mergeMaterialLists","error","console","warn","materials","lines","split","materialKeywords","i","line","headerMatch","match","RegExp","join","headerContent","parseMaterialItems","forEach","item","push","j","nextLine","test","itemText","replace","startsWith","deduplicateMaterials","prompt","response","chat","completions","create","model","messages","role","content","temperature","max_tokens","choices","message","jsonMatch","JSON","parse","filter","m","name","category","priority","map","Boolean","createBasicMaterial","toLowerCase","prepTime","estimatePrepTime","pattern","ai","merged","patternItem","similar","find","aiItem","areSimilarMaterials","name1","name2","n1","n2","includes","synonyms","group","some","seen","Set","material","key","has","add","generateWeeklyMaterialPlan","weekStart","totalPrepTime","preparation","printingNeeded","setupRequired","purchaseNeeded","byDay","_legacyCodeRemoved","autoUpdateMaterialList","materialPlan","materialItems","smartMaterialExtractor"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/smartMaterialExtractor.ts"],"sourcesContent":["// import { PrismaClient } from '@teaching-engine/database'; // Unused import\nimport OpenAI from 'openai';\n\n// const prisma = new PrismaClient(); // Unused\n\n// Lazy initialization of OpenAI to avoid startup errors\nlet openai: OpenAI | null = null;\n\nfunction getOpenAI(): OpenAI {\n  if (!openai) {\n    openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY || 'test-api-key',\n    });\n  }\n  return openai;\n}\n\nexport interface SmartMaterial {\n  name: string;\n  category: 'supplies' | 'technology' | 'books' | 'equipment' | 'printables' | 'other';\n  priority: 'essential' | 'helpful' | 'optional';\n  quantity?: string;\n  notes?: string;\n  prepTime?: number; // minutes needed for preparation\n}\n\nexport interface WeeklyMaterialPlan {\n  weekStart: string;\n  totalPrepTime: number;\n  materials: SmartMaterial[];\n  preparation: {\n    printingNeeded: SmartMaterial[];\n    setupRequired: SmartMaterial[];\n    purchaseNeeded: SmartMaterial[];\n  };\n  byDay: Array<{\n    day: number;\n    dayName: string;\n    activities: Array<{\n      activityId: number;\n      title: string;\n      timeSlot: string;\n      materials: SmartMaterial[];\n    }>;\n  }>;\n}\n\nexport class SmartMaterialExtractor {\n  /**\n   * Extract materials from activity text using AI when available,\n   * fallback to pattern matching\n   */\n  async extractMaterialsFromText(text: string): Promise<SmartMaterial[]> {\n    if (!text?.trim()) return [];\n\n    // First try pattern-based extraction (fast)\n    const patternMaterials = this.extractMaterialsPattern(text);\n\n    // If OpenAI is available and we have meaningful text, enhance with AI\n    if (process.env.OPENAI_API_KEY && text.length > 50) {\n      try {\n        const aiMaterials = await this.extractMaterialsWithAI(text);\n        // Merge AI results with pattern results, preferring AI categorization\n        return this.mergeMaterialLists(patternMaterials, aiMaterials);\n      } catch (error) {\n        console.warn('AI material extraction failed, using pattern matching:', error);\n        return patternMaterials;\n      }\n    }\n\n    return patternMaterials;\n  }\n\n  /**\n   * Pattern-based material extraction (existing logic enhanced)\n   */\n  private extractMaterialsPattern(text: string): SmartMaterial[] {\n    const materials: SmartMaterial[] = [];\n    const lines = text.split(/\\r?\\n/);\n\n    const materialKeywords = [\n      'materials?',\n      'supplies',\n      'equipment',\n      'resources',\n      'tools',\n      'needed',\n      'required',\n      'bring',\n      'prepare',\n      'setup',\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n\n      // Look for material header lines\n      const headerMatch = line.match(\n        new RegExp(\n          `^(?:additional\\\\s+|extra\\\\s+)?(?:${materialKeywords.join('|')})(?:\\\\s+needed|\\\\s+required)?:?\\\\s*(.*)`,\n          'i',\n        ),\n      );\n\n      if (headerMatch) {\n        const headerContent = headerMatch[1];\n        if (headerContent) {\n          this.parseMaterialItems(headerContent).forEach((item) => materials.push(item));\n        }\n\n        // Look for list items after the header\n        for (let j = i + 1; j < lines.length; j++) {\n          const nextLine = lines[j].trim();\n          if (/^[-*•]\\s+/.test(nextLine)) {\n            const itemText = nextLine.replace(/^[-*•]\\s+/, '');\n            this.parseMaterialItems(itemText).forEach((item) => materials.push(item));\n          } else if (!nextLine) {\n            continue; // Skip empty lines\n          } else if (!nextLine.startsWith(' ')) {\n            break; // End of list\n          }\n        }\n      }\n    }\n\n    return this.deduplicateMaterials(materials);\n  }\n\n  /**\n   * AI-powered material extraction with smart categorization\n   */\n  private async extractMaterialsWithAI(text: string): Promise<SmartMaterial[]> {\n    const prompt = `\nAnalyze the following activity description and extract all materials, supplies, equipment, and resources needed.\n\nFor each item, provide:\n- name: The material name\n- category: One of \"supplies\", \"technology\", \"books\", \"equipment\", \"printables\", \"other\"\n- priority: One of \"essential\", \"helpful\", \"optional\"\n- quantity: If mentioned (e.g., \"5 sheets\", \"1 per student\")\n- prepTime: Estimated minutes needed to prepare this item\n\nReturn a JSON array of objects with these properties.\n\nActivity text:\n${text}\n\nExample output:\n[\n  {\n    \"name\": \"construction paper\",\n    \"category\": \"supplies\",\n    \"priority\": \"essential\",\n    \"quantity\": \"1 sheet per student\",\n    \"prepTime\": 2\n  }\n]\n`;\n\n    try {\n      const response = await getOpenAI().chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [\n          {\n            role: 'system',\n            content:\n              'You are a helpful assistant that extracts materials from lesson plans. Return only valid JSON.',\n          },\n          {\n            role: 'user',\n            content: prompt,\n          },\n        ],\n        temperature: 0.1,\n        max_tokens: 1000,\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (!content) return [];\n\n      // Extract JSON from response\n      const jsonMatch = content.match(/\\[[\\s\\S]*\\]/);\n      if (!jsonMatch) return [];\n\n      const materials = JSON.parse(jsonMatch[0]) as SmartMaterial[];\n\n      // Validate and clean up the results\n      return materials.filter((m) => m.name && m.category && m.priority);\n    } catch (error) {\n      console.error('AI material extraction error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Parse individual material items from text\n   */\n  private parseMaterialItems(text: string): SmartMaterial[] {\n    return text\n      .split(/[;,]/)\n      .map((item) => item.trim())\n      .filter(Boolean)\n      .map((item) => this.createBasicMaterial(item));\n  }\n\n  /**\n   * Create a basic material object from text\n   */\n  private createBasicMaterial(text: string): SmartMaterial {\n    const name = text.toLowerCase();\n\n    // Simple categorization based on keywords\n    let category: SmartMaterial['category'] = 'other';\n    if (/paper|pencil|crayon|marker|scissors|glue|tape/i.test(name)) {\n      category = 'supplies';\n    } else if (/computer|tablet|ipad|projector|smartboard/i.test(name)) {\n      category = 'technology';\n    } else if (/book|novel|textbook|dictionary/i.test(name)) {\n      category = 'books';\n    } else if (/microscope|scale|ruler|calculator/i.test(name)) {\n      category = 'equipment';\n    } else if (/worksheet|handout|printout|template/i.test(name)) {\n      category = 'printables';\n    }\n\n    // Simple priority based on keywords\n    let priority: SmartMaterial['priority'] = 'helpful';\n    if (/essential|required|must|need/i.test(text)) {\n      priority = 'essential';\n    } else if (/optional|extra|bonus|if available/i.test(text)) {\n      priority = 'optional';\n    }\n\n    return {\n      name: text,\n      category,\n      priority,\n      prepTime: this.estimatePrepTime(name, category),\n    };\n  }\n\n  /**\n   * Estimate preparation time for materials\n   */\n  private estimatePrepTime(name: string, category: SmartMaterial['category']): number {\n    if (category === 'printables') return 5;\n    if (category === 'technology') return 10;\n    if (category === 'equipment') return 3;\n    if (/cut|organize|sort|setup/i.test(name)) return 8;\n    return 2;\n  }\n\n  /**\n   * Merge pattern-based and AI-based material lists\n   */\n  private mergeMaterialLists(pattern: SmartMaterial[], ai: SmartMaterial[]): SmartMaterial[] {\n    const merged = [...ai];\n\n    // Add pattern items that aren't covered by AI\n    for (const patternItem of pattern) {\n      const similar = ai.find((aiItem) => this.areSimilarMaterials(patternItem.name, aiItem.name));\n      if (!similar) {\n        merged.push(patternItem);\n      }\n    }\n\n    return this.deduplicateMaterials(merged);\n  }\n\n  /**\n   * Check if two material names are similar\n   */\n  private areSimilarMaterials(name1: string, name2: string): boolean {\n    const n1 = name1.toLowerCase().trim();\n    const n2 = name2.toLowerCase().trim();\n\n    if (n1 === n2) return true;\n    if (n1.includes(n2) || n2.includes(n1)) return true;\n\n    // Check for common synonyms\n    const synonyms = [\n      ['paper', 'sheets'],\n      ['pencil', 'pencils'],\n      ['marker', 'markers'],\n      ['computer', 'laptop', 'device'],\n    ];\n\n    for (const group of synonyms) {\n      if (group.some((s) => n1.includes(s)) && group.some((s) => n2.includes(s))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Remove duplicate materials\n   */\n  private deduplicateMaterials(materials: SmartMaterial[]): SmartMaterial[] {\n    const seen = new Set<string>();\n    return materials.filter((material) => {\n      const key = material.name.toLowerCase().trim();\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n\n  /**\n   * Generate comprehensive weekly material plan\n   */\n  async generateWeeklyMaterialPlan(weekStart: string): Promise<WeeklyMaterialPlan> {\n    // DISABLED: Legacy lessonPlan model removed in ETFO migration\n    // const plan = null; // Legacy lessonPlan query disabled\n\n    // Return empty plan for now\n    return {\n      weekStart,\n      totalPrepTime: 0,\n      materials: [],\n      preparation: {\n        printingNeeded: [],\n        setupRequired: [],\n        purchaseNeeded: [],\n      },\n      byDay: [],\n    };\n  }\n\n  /**\n   * Placeholder for orphaned code removal\n   */\n  private async _legacyCodeRemoved() {\n    // This method contains orphaned code from legacy implementation\n    return;\n  }\n\n  /**\n   * Auto-update material list for a week\n   */\n  async autoUpdateMaterialList(weekStart: string): Promise<void> {\n    const materialPlan = await this.generateWeeklyMaterialPlan(weekStart);\n\n    // DISABLED: MaterialList model has been archived\n    // TODO: Implement using ETFO UnitPlanResource and ETFOLessonPlanResource models\n    const materialItems = materialPlan.materials.map((m) => m.name);\n    console.warn(`autoUpdateMaterialList is disabled - MaterialList model archived. Items for ${weekStart}:`, materialItems);\n  }\n}\n\nexport const smartMaterialExtractor = new SmartMaterialExtractor();\n"],"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","ignoreList":[]}