950b6782a5431c38a603114017d50125
import { execSync } from 'child_process';
import { resolve } from 'path';
import { testDb } from './test-database-manager';
// Export testDb for use in jest.setup.ts
export { testDb };
export default async function setup() {
    // Initialize the test database manager
    const workerId = 'global-setup';
    await testDb.createTestDatabase(workerId);
    const root = resolve(process.cwd(), '..');
    try {
        // Generate Prisma client
        console.log('Generating Prisma client...');
        execSync('pnpm --filter @teaching-engine/database db:generate', {
            stdio: 'inherit',
            cwd: root,
        });
        // Reset and push the database schema
        console.log('Resetting test database...');
        execSync('pnpm --filter @teaching-engine/database prisma db push --force-reset --skip-generate', {
            stdio: 'inherit',
            cwd: root,
        });
        // Seed the test database
        console.log('Seeding test database...');
        execSync('pnpm --filter @teaching-engine/database prisma db seed', {
            stdio: 'inherit',
            cwd: root,
        });
        console.log('Test database setup completed successfully');
    }
    catch (error) {
        console.error('Error setting up test database:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL3NldHVwLXRlc3QtZGIudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVqRCx5Q0FBeUM7QUFDekMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRWxCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxVQUFVLEtBQUs7SUFDakMsdUNBQXVDO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQztJQUNoQyxNQUFNLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUxQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTFDLElBQUksQ0FBQztRQUNILHlCQUF5QjtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsUUFBUSxDQUFDLHFEQUFxRCxFQUFFO1lBQzlELEtBQUssRUFBRSxTQUFTO1lBQ2hCLEdBQUcsRUFBRSxJQUFJO1NBQ1YsQ0FBQyxDQUFDO1FBRUgscUNBQXFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUMxQyxRQUFRLENBQ04sc0ZBQXNGLEVBQ3RGO1lBQ0UsS0FBSyxFQUFFLFNBQVM7WUFDaEIsR0FBRyxFQUFFLElBQUk7U0FDVixDQUNGLENBQUM7UUFFRix5QkFBeUI7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3hDLFFBQVEsQ0FBQyx3REFBd0QsRUFBRTtZQUNqRSxLQUFLLEVBQUUsU0FBUztZQUNoQixHQUFHLEVBQUUsSUFBSTtTQUNWLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEQsTUFBTSxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvdGVzdHMvc2V0dXAtdGVzdC1kYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgdGVzdERiIH0gZnJvbSAnLi90ZXN0LWRhdGFiYXNlLW1hbmFnZXInO1xuXG4vLyBFeHBvcnQgdGVzdERiIGZvciB1c2UgaW4gamVzdC5zZXR1cC50c1xuZXhwb3J0IHsgdGVzdERiIH07XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHNldHVwKCkge1xuICAvLyBJbml0aWFsaXplIHRoZSB0ZXN0IGRhdGFiYXNlIG1hbmFnZXJcbiAgY29uc3Qgd29ya2VySWQgPSAnZ2xvYmFsLXNldHVwJztcbiAgYXdhaXQgdGVzdERiLmNyZWF0ZVRlc3REYXRhYmFzZSh3b3JrZXJJZCk7XG5cbiAgY29uc3Qgcm9vdCA9IHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJy4uJyk7XG5cbiAgdHJ5IHtcbiAgICAvLyBHZW5lcmF0ZSBQcmlzbWEgY2xpZW50XG4gICAgY29uc29sZS5sb2coJ0dlbmVyYXRpbmcgUHJpc21hIGNsaWVudC4uLicpO1xuICAgIGV4ZWNTeW5jKCdwbnBtIC0tZmlsdGVyIEB0ZWFjaGluZy1lbmdpbmUvZGF0YWJhc2UgZGI6Z2VuZXJhdGUnLCB7XG4gICAgICBzdGRpbzogJ2luaGVyaXQnLFxuICAgICAgY3dkOiByb290LFxuICAgIH0pO1xuXG4gICAgLy8gUmVzZXQgYW5kIHB1c2ggdGhlIGRhdGFiYXNlIHNjaGVtYVxuICAgIGNvbnNvbGUubG9nKCdSZXNldHRpbmcgdGVzdCBkYXRhYmFzZS4uLicpO1xuICAgIGV4ZWNTeW5jKFxuICAgICAgJ3BucG0gLS1maWx0ZXIgQHRlYWNoaW5nLWVuZ2luZS9kYXRhYmFzZSBwcmlzbWEgZGIgcHVzaCAtLWZvcmNlLXJlc2V0IC0tc2tpcC1nZW5lcmF0ZScsXG4gICAgICB7XG4gICAgICAgIHN0ZGlvOiAnaW5oZXJpdCcsXG4gICAgICAgIGN3ZDogcm9vdCxcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIC8vIFNlZWQgdGhlIHRlc3QgZGF0YWJhc2VcbiAgICBjb25zb2xlLmxvZygnU2VlZGluZyB0ZXN0IGRhdGFiYXNlLi4uJyk7XG4gICAgZXhlY1N5bmMoJ3BucG0gLS1maWx0ZXIgQHRlYWNoaW5nLWVuZ2luZS9kYXRhYmFzZSBwcmlzbWEgZGIgc2VlZCcsIHtcbiAgICAgIHN0ZGlvOiAnaW5oZXJpdCcsXG4gICAgICBjd2Q6IHJvb3QsXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZygnVGVzdCBkYXRhYmFzZSBzZXR1cCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2V0dGluZyB1cCB0ZXN0IGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9