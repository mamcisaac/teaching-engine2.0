{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/batch.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/batch.ts"],"sourcesContent":["// Batch API endpoint for handling multiple requests in a single HTTP call\n// Reduces network overhead and improves performance\n\nimport { Router, Request, Response } from 'express';\nimport { z } from 'zod';\nimport { authenticate } from '../middleware/auth';\nimport axios from 'axios';\n\nconst router = Router();\n\n// Schema for batch request\nconst batchRequestSchema = z.object({\n  requests: z.array(z.object({\n    id: z.string(),\n    method: z.enum(['GET', 'POST', 'PUT', 'DELETE']),\n    url: z.string(),\n    data: z.unknown().optional(),\n    headers: z.record(z.string()).optional(),\n  })).max(50), // Limit batch size to 50 requests\n});\n\n// Batch endpoint\nrouter.post('/batch', authenticate, async (req: Request, res: Response) => {\n  try {\n    // Validate request\n    const { requests } = batchRequestSchema.parse(req.body);\n    \n    // Process requests in parallel with concurrency limit\n    const concurrencyLimit = 10;\n    const results = [];\n    \n    for (let i = 0; i < requests.length; i += concurrencyLimit) {\n      const batch = requests.slice(i, i + concurrencyLimit);\n      const batchResults = await Promise.all(\n        batch.map(async (request) => {\n          try {\n            // Build full URL\n            const baseUrl = `${req.protocol}://${req.get('host')}`;\n            const fullUrl = request.url.startsWith('http') \n              ? request.url \n              : `${baseUrl}${request.url}`;\n            \n            // Forward authentication\n            const headers = {\n              ...request.headers,\n              'Authorization': req.headers.authorization,\n              'Cookie': req.headers.cookie,\n            };\n            \n            // Make internal request\n            const response = await axios({\n              method: request.method,\n              url: fullUrl,\n              data: request.data,\n              headers,\n              timeout: 30000, // 30 second timeout per request\n              validateStatus: () => true, // Don't throw on any status\n            });\n            \n            return {\n              id: request.id,\n              status: response.status,\n              data: response.data,\n            };\n          } catch (error) {\n            console.error(`Batch request ${request.id} failed:`, error);\n            \n            return {\n              id: request.id,\n              status: 500,\n              data: null,\n              error: error instanceof Error ? error.message : 'Request failed',\n            };\n          }\n        })\n      );\n      \n      results.push(...batchResults);\n    }\n    \n    res.json({\n      responses: results,\n      timestamp: new Date().toISOString(),\n    });\n    \n  } catch (error) {\n    console.error('Batch processing error:', error);\n    \n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: 'Invalid batch request',\n        details: error.errors,\n      });\n    } else {\n      res.status(500).json({\n        error: 'Batch processing failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n});\n\n// Health check endpoint for batch service\nrouter.get('/batch/health', (req: Request, res: Response) => {\n  res.json({\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    maxBatchSize: 50,\n    concurrencyLimit: 10,\n  });\n});\n\nexport default router;"],"version":3}