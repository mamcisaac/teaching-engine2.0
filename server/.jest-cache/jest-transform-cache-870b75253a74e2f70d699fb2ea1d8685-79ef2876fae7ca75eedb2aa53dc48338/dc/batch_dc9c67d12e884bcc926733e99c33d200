e9c564b87045e1ee33ebaffd0231fdde
// Batch API endpoint for handling multiple requests in a single HTTP call
// Reduces network overhead and improves performance
import { Router } from 'express';
import { z } from 'zod';
import { authenticate } from '../middleware/auth';
import axios from 'axios';
const router = Router();
// Schema for batch request
const batchRequestSchema = z.object({
    requests: z.array(z.object({
        id: z.string(),
        method: z.enum(['GET', 'POST', 'PUT', 'DELETE']),
        url: z.string(),
        data: z.unknown().optional(),
        headers: z.record(z.string()).optional(),
    })).max(50), // Limit batch size to 50 requests
});
// Batch endpoint
router.post('/batch', authenticate, async (req, res) => {
    try {
        // Validate request
        const { requests } = batchRequestSchema.parse(req.body);
        // Process requests in parallel with concurrency limit
        const concurrencyLimit = 10;
        const results = [];
        for (let i = 0; i < requests.length; i += concurrencyLimit) {
            const batch = requests.slice(i, i + concurrencyLimit);
            const batchResults = await Promise.all(batch.map(async (request) => {
                try {
                    // Build full URL
                    const baseUrl = `${req.protocol}://${req.get('host')}`;
                    const fullUrl = request.url.startsWith('http')
                        ? request.url
                        : `${baseUrl}${request.url}`;
                    // Forward authentication
                    const headers = {
                        ...request.headers,
                        'Authorization': req.headers.authorization,
                        'Cookie': req.headers.cookie,
                    };
                    // Make internal request
                    const response = await axios({
                        method: request.method,
                        url: fullUrl,
                        data: request.data,
                        headers,
                        timeout: 30000, // 30 second timeout per request
                        validateStatus: () => true, // Don't throw on any status
                    });
                    return {
                        id: request.id,
                        status: response.status,
                        data: response.data,
                    };
                }
                catch (error) {
                    console.error(`Batch request ${request.id} failed:`, error);
                    return {
                        id: request.id,
                        status: 500,
                        data: null,
                        error: error instanceof Error ? error.message : 'Request failed',
                    };
                }
            }));
            results.push(...batchResults);
        }
        res.json({
            responses: results,
            timestamp: new Date().toISOString(),
        });
    }
    catch (error) {
        console.error('Batch processing error:', error);
        if (error instanceof z.ZodError) {
            res.status(400).json({
                error: 'Invalid batch request',
                details: error.errors,
            });
        }
        else {
            res.status(500).json({
                error: 'Batch processing failed',
                message: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    }
});
// Health check endpoint for batch service
router.get('/batch/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        maxBatchSize: 50,
        concurrencyLimit: 10,
    });
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9yb3V0ZXMvYmF0Y2gudHMiLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLG9EQUFvRDtBQUVwRCxPQUFPLEVBQUUsTUFBTSxFQUFxQixNQUFNLFNBQVMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFeEIsMkJBQTJCO0FBQzNCLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3pCLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2QsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNoRCxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUNmLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQzVCLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtLQUN6QyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsa0NBQWtDO0NBQ2hELENBQUMsQ0FBQztBQUVILGlCQUFpQjtBQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN4RSxJQUFJLENBQUM7UUFDSCxtQkFBbUI7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QVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNuQixLQUFLLEVBQUUsdUJBQXVCO2dCQUM5QixPQUFPLEVBQUUsS0FBSyxDQUFDLE1BQU07YUFDdEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQzthQUFNLENBQUM7WUFDTixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkIsS0FBSyxFQUFFLHlCQUF5QjtnQkFDaEMsT0FBTyxFQUFFLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWU7YUFDbEUsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILDBDQUEwQztBQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUMxRCxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ1AsTUFBTSxFQUFFLElBQUk7UUFDWixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7UUFDbkMsWUFBWSxFQUFFLEVBQUU7UUFDaEIsZ0JBQWdCLEVBQUUsRUFBRTtLQUNyQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGVBQWUsTUFBTSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvcm91dGVzL2JhdGNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhdGNoIEFQSSBlbmRwb2ludCBmb3IgaGFuZGxpbmcgbXVsdGlwbGUgcmVxdWVzdHMgaW4gYSBzaW5nbGUgSFRUUCBjYWxsXG4vLyBSZWR1Y2VzIG5ldHdvcmsgb3ZlcmhlYWQgYW5kIGltcHJvdmVzIHBlcmZvcm1hbmNlXG5cbmltcG9ydCB7IFJvdXRlciwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgYXV0aGVudGljYXRlIH0gZnJvbSAnLi4vbWlkZGxld2FyZS9hdXRoJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG4vLyBTY2hlbWEgZm9yIGJhdGNoIHJlcXVlc3RcbmNvbnN0IGJhdGNoUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgcmVxdWVzdHM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIG1ldGhvZDogei5lbnVtKFsnR0VUJywgJ1BPU1QnLCAnUFVUJywgJ0RFTEVURSddKSxcbiAgICB1cmw6IHouc3RyaW5nKCksXG4gICAgZGF0YTogei51bmtub3duKCkub3B0aW9uYWwoKSxcbiAgICBoZWFkZXJzOiB6LnJlY29yZCh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICB9KSkubWF4KDUwKSwgLy8gTGltaXQgYmF0Y2ggc2l6ZSB0byA1MCByZXF1ZXN0c1xufSk7XG5cbi8vIEJhdGNoIGVuZHBvaW50XG5yb3V0ZXIucG9zdCgnL2JhdGNoJywgYXV0aGVudGljYXRlLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gVmFsaWRhdGUgcmVxdWVzdFxuICAgIGNvbnN0IHsgcmVxdWVzdHMgfSA9IGJhdGNoUmVxdWVzdFNjaGVtYS5wYXJzZShyZXEuYm9keSk7XG4gICAgXG4gICAgLy8gUHJvY2VzcyByZXF1ZXN0cyBpbiBwYXJhbGxlbCB3aXRoIGNvbmN1cnJlbmN5IGxpbWl0XG4gICAgY29uc3QgY29uY3VycmVuY3lMaW1pdCA9IDEwO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVlc3RzLmxlbmd0aDsgaSArPSBjb25jdXJyZW5jeUxpbWl0KSB7XG4gICAgICBjb25zdCBiYXRjaCA9IHJlcXVlc3RzLnNsaWNlKGksIGkgKyBjb25jdXJyZW5jeUxpbWl0KTtcbiAgICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBiYXRjaC5tYXAoYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQnVpbGQgZnVsbCBVUkxcbiAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSBgJHtyZXEucHJvdG9jb2x9Oi8vJHtyZXEuZ2V0KCdob3N0Jyl9YDtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxVcmwgPSByZXF1ZXN0LnVybC5zdGFydHNXaXRoKCdodHRwJykgXG4gICAgICAgICAgICAgID8gcmVxdWVzdC51cmwgXG4gICAgICAgICAgICAgIDogYCR7YmFzZVVybH0ke3JlcXVlc3QudXJsfWA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcndhcmQgYXV0aGVudGljYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgIC4uLnJlcXVlc3QuaGVhZGVycyxcbiAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLFxuICAgICAgICAgICAgICAnQ29va2llJzogcmVxLmhlYWRlcnMuY29va2llLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTWFrZSBpbnRlcm5hbCByZXF1ZXN0XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHtcbiAgICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgdXJsOiBmdWxsVXJsLFxuICAgICAgICAgICAgICBkYXRhOiByZXF1ZXN0LmRhdGEsXG4gICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAwLCAvLyAzMCBzZWNvbmQgdGltZW91dCBwZXIgcmVxdWVzdFxuICAgICAgICAgICAgICB2YWxpZGF0ZVN0YXR1czogKCkgPT4gdHJ1ZSwgLy8gRG9uJ3QgdGhyb3cgb24gYW55IHN0YXR1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGlkOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEJhdGNoIHJlcXVlc3QgJHtyZXF1ZXN0LmlkfSBmYWlsZWQ6YCwgZXJyb3IpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpZDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdSZXF1ZXN0IGZhaWxlZCcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBcbiAgICAgIHJlc3VsdHMucHVzaCguLi5iYXRjaFJlc3VsdHMpO1xuICAgIH1cbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICByZXNwb25zZXM6IHJlc3VsdHMsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdCYXRjaCBwcm9jZXNzaW5nIGVycm9yOicsIGVycm9yKTtcbiAgICBcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW52YWxpZCBiYXRjaCByZXF1ZXN0JyxcbiAgICAgICAgZGV0YWlsczogZXJyb3IuZXJyb3JzLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdCYXRjaCBwcm9jZXNzaW5nIGZhaWxlZCcsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KTtcblxuLy8gSGVhbHRoIGNoZWNrIGVuZHBvaW50IGZvciBiYXRjaCBzZXJ2aWNlXG5yb3V0ZXIuZ2V0KCcvYmF0Y2gvaGVhbHRoJywgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICByZXMuanNvbih7XG4gICAgc3RhdHVzOiAnb2snLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIG1heEJhdGNoU2l6ZTogNTAsXG4gICAgY29uY3VycmVuY3lMaW1pdDogMTAsXG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjsiXSwidmVyc2lvbiI6M30=