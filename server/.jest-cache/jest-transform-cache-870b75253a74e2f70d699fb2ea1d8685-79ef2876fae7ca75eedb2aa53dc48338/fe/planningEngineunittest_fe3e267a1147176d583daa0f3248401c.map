{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/planningEngine.unit.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/planningEngine.unit.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport { filterAvailableBlocksByCalendar } from '../../src/services/planningEngine';\nimport type { TimetableSlot, CalendarEvent, Holiday } from '@teaching-engine/database';\n\ndescribe('PlanningEngine Unit Tests', () => {\n  describe('filterAvailableBlocksByCalendar', () => {\n    const createTimetableSlot = (\n      id: number,\n      day: number,\n      startMin: number,\n      endMin: number,\n      subjectId: number | null = 1,\n    ): TimetableSlot => ({\n      id,\n      day,\n      startMin,\n      endMin,\n      subjectId,\n    });\n\n    const createCalendarEvent = (start: string, end: string, allDay = false): CalendarEvent => ({\n      id: 1,\n      title: 'Test Event',\n      description: null,\n      start: new Date(start),\n      end: new Date(end),\n      allDay,\n      eventType: 'ASSEMBLY',\n      source: 'MANUAL',\n      teacherId: 1,\n      schoolId: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    const createHoliday = (date: string): Holiday => ({\n      id: 1,\n      date: new Date(date),\n      name: 'Test Holiday',\n    });\n\n    it('should filter out slots without subjectId', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540, 1), // Monday 8:00-9:00 AM with subject\n        createTimetableSlot(2, 2, 540, 600, null), // Tuesday 9:00-10:00 AM without subject\n        createTimetableSlot(3, 3, 600, 660, 2), // Wednesday 10:00-11:00 AM with subject\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, [], [], []);\n\n      expect(result).toHaveLength(2);\n      expect(result[0].day).toBe(1);\n      expect(result[1].day).toBe(3);\n    });\n\n    it('should filter out slots that conflict with holidays', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540), // Monday\n        createTimetableSlot(2, 2, 540, 600), // Tuesday\n        createTimetableSlot(3, 3, 600, 660), // Wednesday\n      ];\n\n      // Holiday on Wednesday (day 2 in converted system)\n      const holidays: Holiday[] = [\n        createHoliday('2024-01-03'), // Wednesday, converts to day 2\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, [], [], holidays);\n\n      // Should filter out Wednesday slot due to holiday\n      expect(result.length).toBeLessThan(3);\n      expect(result.every((block) => block.day !== 2)).toBe(true);\n    });\n\n    it('should filter out slots that conflict with all-day events', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540), // Day 1 8:00-9:00 AM\n        createTimetableSlot(2, 1, 600, 660), // Day 1 10:00-11:00 AM\n      ];\n\n      const events: CalendarEvent[] = [\n        createCalendarEvent('2024-01-02T00:00:00', '2024-01-02T23:59:59', true), // Tuesday converts to day 1\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, events, [], []);\n\n      // All day 1 slots should be filtered out due to all-day event\n      expect(result).toHaveLength(0);\n    });\n\n    it('should filter out slots that conflict with timed events', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540), // Day 1 8:00-9:00 AM\n        createTimetableSlot(2, 1, 540, 600), // Day 1 9:00-10:00 AM\n        createTimetableSlot(3, 1, 600, 660), // Day 1 10:00-11:00 AM\n      ];\n\n      const events: CalendarEvent[] = [\n        createCalendarEvent('2024-01-02T09:00:00.000Z', '2024-01-02T10:00:00.000Z', false), // 9:00-10:00 AM UTC event on day 1\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, events, [], []);\n\n      // Should keep 8:00-9:00 and 10:00-11:00 slots, filter out 9:00-10:00\n      expect(result).toHaveLength(2);\n      expect(result.some((block) => block.startMin === 540 && block.endMin === 600)).toBe(false);\n    });\n\n    it('should handle partial overlaps correctly', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540), // Day 1 8:00-9:00 AM\n        createTimetableSlot(2, 1, 520, 580), // Day 1 8:40-9:40 AM (overlaps)\n      ];\n\n      const events: CalendarEvent[] = [\n        createCalendarEvent('2024-01-02T08:30:00.000Z', '2024-01-02T09:15:00.000Z', false), // 8:30-9:15 AM UTC event on day 1\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, events, [], []);\n\n      // Both slots should be filtered out due to overlap\n      expect(result).toHaveLength(0);\n    });\n\n    it('should preserve slots that do not conflict', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540), // Monday 8:00-9:00 AM\n        createTimetableSlot(2, 2, 540, 600), // Tuesday 9:00-10:00 AM\n        createTimetableSlot(3, 3, 600, 660), // Wednesday 10:00-11:00 AM\n      ];\n\n      const events: CalendarEvent[] = [\n        createCalendarEvent('2024-01-02T14:00:00', '2024-01-02T15:00:00', false), // Tuesday 2:00-3:00 PM\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, events, [], []);\n\n      // All slots should be preserved as none conflict with the afternoon event\n      expect(result).toHaveLength(3);\n    });\n\n    it('should handle multiple constraints simultaneously', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 480, 540, null), // Monday 8:00-9:00 AM (no subject)\n        createTimetableSlot(2, 2, 540, 600, 1), // Tuesday 9:00-10:00 AM (has subject, holiday)\n        createTimetableSlot(3, 3, 600, 660, 1), // Wednesday 10:00-11:00 AM (has subject, event conflict)\n        createTimetableSlot(4, 4, 480, 540, 1), // Thursday 8:00-9:00 AM (has subject, no conflicts)\n      ];\n\n      const events: CalendarEvent[] = [\n        createCalendarEvent('2024-01-04T10:00:00.000Z', '2024-01-04T11:00:00.000Z', false), // Thursday event conflicts with day 3 slot\n      ];\n\n      const holidays: Holiday[] = [\n        createHoliday('2024-01-03'), // Wednesday holiday conflicts with day 2 slot\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, events, [], holidays);\n\n      // Only Thursday slot should remain\n      expect(result).toHaveLength(1);\n      expect(result[0].day).toBe(4);\n    });\n\n    it('should return correct DailyBlock format', () => {\n      const slots: TimetableSlot[] = [createTimetableSlot(1, 1, 480, 540, 5)];\n\n      const result = filterAvailableBlocksByCalendar(slots, [], [], []);\n\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        day: 1,\n        slotId: 1,\n        startMin: 480,\n        endMin: 540,\n        subjectId: 5,\n      });\n    });\n\n    it('should handle edge case of event exactly matching slot time', () => {\n      const slots: TimetableSlot[] = [\n        createTimetableSlot(1, 1, 540, 600), // Day 1 9:00-10:00 AM\n      ];\n\n      const events: CalendarEvent[] = [\n        createCalendarEvent('2024-01-02T09:00:00.000Z', '2024-01-02T10:00:00.000Z', false), // Exact match on day 1\n      ];\n\n      const result = filterAvailableBlocksByCalendar(slots, events, [], []);\n\n      // Should filter out the exactly matching slot\n      expect(result).toHaveLength(0);\n    });\n  });\n});\n"],"version":3}