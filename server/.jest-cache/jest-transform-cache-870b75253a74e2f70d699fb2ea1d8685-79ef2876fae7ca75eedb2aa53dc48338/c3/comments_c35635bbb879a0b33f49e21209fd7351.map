{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/comments.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/comments.ts"],"sourcesContent":["/**\n * Plan Comments Routes\n * Handles commenting and feedback on shared plans\n */\n\nimport { Router } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport { authenticate } from '@/middleware/authenticate';\nimport { asyncHandler } from '@/middleware/errorHandler';\nimport logger from '@/logger';\n\n// Validation schemas\nconst createCommentSchema = z.object({\n  planType: z.enum(['long-range', 'unit', 'lesson', 'daybook']),\n  planId: z.string(),\n  content: z.string().min(1).max(5000),\n  parentId: z.string().optional(),\n});\n\nconst updateCommentSchema = z.object({\n  content: z.string().min(1).max(5000).optional(),\n  isResolved: z.boolean().optional(),\n  isPinned: z.boolean().optional(),\n});\n\nexport function commentRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Apply authentication to all routes\n  router.use(authenticate);\n\n  // Helper function to check if user has access to comment on a plan\n  async function checkCommentAccess(\n    planType: string,\n    planId: string,\n    userId: number,\n  ): Promise<boolean> {\n    // Check if user owns the plan\n    let isOwner = false;\n    switch (planType) {\n      case 'long-range': {\n        const lrPlan = await prisma.longRangePlan.findUnique({\n          where: { id: planId },\n        });\n        isOwner = lrPlan?.userId === userId;\n        break;\n      }\n\n      case 'unit': {\n        const unitPlan = await prisma.unitPlan.findUnique({\n          where: { id: planId },\n        });\n        isOwner = unitPlan?.userId === userId;\n        break;\n      }\n\n      case 'lesson': {\n        const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n          where: { id: planId },\n        });\n        isOwner = lessonPlan?.userId === userId;\n        break;\n      }\n\n      case 'daybook': {\n        const daybookEntry = await prisma.daybookEntry.findUnique({\n          where: { id: planId },\n        });\n        isOwner = daybookEntry?.userId === userId;\n        break;\n      }\n    }\n\n    if (isOwner) return true;\n\n    // Check if plan is shared with user and commenting is allowed\n    const sharedPlan = await prisma.sharedPlan.findFirst({\n      where: {\n        planType,\n        planId,\n        OR: [{ sharedWithId: userId }, { teamId: { not: null } }],\n        canComment: true,\n      },\n    });\n\n    if (sharedPlan) {\n      // If shared with team, check team membership\n      if (sharedPlan.teamId) {\n        const isMember = await prisma.teamMember.findFirst({\n          where: { teamId: sharedPlan.teamId, userId },\n        });\n        return !!isMember;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  // Get comments for a plan\n  router.get(\n    '/',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { planType, planId } = req.query;\n\n      if (!planType || !planId) {\n        return res.status(400).json({ error: 'planType and planId are required' });\n      }\n\n      // Check access\n      const hasAccess = await checkCommentAccess(planType as string, planId as string, userId);\n      if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      const comments = await prisma.planComment.findMany({\n        where: {\n          planType: planType as string,\n          planId: planId as string,\n          parentId: null, // Only get top-level comments\n        },\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n          replies: {\n            include: {\n              user: {\n                select: { id: true, name: true, email: true },\n              },\n            },\n            orderBy: { createdAt: 'asc' },\n          },\n        },\n        orderBy: [{ isPinned: 'desc' }, { createdAt: 'desc' }],\n      });\n\n      res.json(comments);\n    }),\n  );\n\n  // Create a comment\n  router.post(\n    '/',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { planType, planId, content, parentId } = createCommentSchema.parse(req.body);\n\n      // Check access\n      const hasAccess = await checkCommentAccess(planType, planId, userId);\n      if (!hasAccess) {\n        return res\n          .status(403)\n          .json({ error: 'You do not have permission to comment on this plan' });\n      }\n\n      // If replying to a comment, verify parent exists\n      if (parentId) {\n        const parentComment = await prisma.planComment.findUnique({\n          where: { id: parentId },\n        });\n\n        if (\n          !parentComment ||\n          parentComment.planType !== planType ||\n          parentComment.planId !== planId\n        ) {\n          return res.status(400).json({ error: 'Invalid parent comment' });\n        }\n      }\n\n      const comment = await prisma.planComment.create({\n        data: {\n          planType,\n          planId,\n          userId,\n          content,\n          parentId,\n        },\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      logger.info(`Comment created on ${planType}/${planId} by user ${userId}`);\n      res.status(201).json(comment);\n    }),\n  );\n\n  // Update a comment\n  router.patch(\n    '/:commentId',\n    asyncHandler(async (req, res) => {\n      const { commentId } = req.params;\n      const userId = req.user!.id;\n      const updates = updateCommentSchema.parse(req.body);\n\n      const comment = await prisma.planComment.findUnique({\n        where: { id: commentId },\n      });\n\n      if (!comment) {\n        return res.status(404).json({ error: 'Comment not found' });\n      }\n\n      // Check permissions\n      const isAuthor = comment.userId === userId;\n      const hasAccess = await checkCommentAccess(comment.planType, comment.planId, userId);\n\n      if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      // Only author can edit content\n      if (updates.content !== undefined && !isAuthor) {\n        return res.status(403).json({ error: 'Only the comment author can edit the content' });\n      }\n\n      // Plan owner can pin/resolve comments\n      const planOwnerChecks: Record<string, () => Promise<boolean>> = {\n        'long-range': async () => {\n          const plan = await prisma.longRangePlan.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n        unit: async () => {\n          const plan = await prisma.unitPlan.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n        lesson: async () => {\n          const plan = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n        daybook: async () => {\n          const plan = await prisma.daybookEntry.findUnique({\n            where: { id: comment.planId },\n          });\n          return plan?.userId === userId;\n        },\n      };\n\n      const isPlanOwner = await planOwnerChecks[comment.planType]?.();\n\n      if ((updates.isPinned !== undefined || updates.isResolved !== undefined) && !isPlanOwner) {\n        return res.status(403).json({ error: 'Only the plan owner can pin or resolve comments' });\n      }\n\n      const updated = await prisma.planComment.update({\n        where: { id: commentId },\n        data: updates,\n        include: {\n          user: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      res.json(updated);\n    }),\n  );\n\n  // Delete a comment\n  router.delete(\n    '/:commentId',\n    asyncHandler(async (req, res) => {\n      const { commentId } = req.params;\n      const userId = req.user!.id;\n\n      const comment = await prisma.planComment.findUnique({\n        where: { id: commentId },\n        include: {\n          _count: {\n            select: { replies: true },\n          },\n        },\n      });\n\n      if (!comment) {\n        return res.status(404).json({ error: 'Comment not found' });\n      }\n\n      // Only author can delete their comment\n      if (comment.userId !== userId) {\n        return res.status(403).json({ error: 'Only the comment author can delete the comment' });\n      }\n\n      // Don't allow deletion if there are replies\n      if (comment._count.replies > 0) {\n        return res.status(400).json({ error: 'Cannot delete a comment with replies' });\n      }\n\n      await prisma.planComment.delete({\n        where: { id: commentId },\n      });\n\n      logger.info(`Comment ${commentId} deleted by user ${userId}`);\n      res.status(204).send();\n    }),\n  );\n\n  // Get comment statistics for a plan\n  router.get(\n    '/stats',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { planType, planId } = req.query;\n\n      if (!planType || !planId) {\n        return res.status(400).json({ error: 'planType and planId are required' });\n      }\n\n      // Check access\n      const hasAccess = await checkCommentAccess(planType as string, planId as string, userId);\n      if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      const [total, resolved, unresolved] = await Promise.all([\n        prisma.planComment.count({\n          where: {\n            planType: planType as string,\n            planId: planId as string,\n          },\n        }),\n        prisma.planComment.count({\n          where: {\n            planType: planType as string,\n            planId: planId as string,\n            isResolved: true,\n          },\n        }),\n        prisma.planComment.count({\n          where: {\n            planType: planType as string,\n            planId: planId as string,\n            isResolved: false,\n          },\n        }),\n      ]);\n\n      res.json({\n        total,\n        resolved,\n        unresolved,\n      });\n    }),\n  );\n\n  return router;\n}\n"],"version":3}