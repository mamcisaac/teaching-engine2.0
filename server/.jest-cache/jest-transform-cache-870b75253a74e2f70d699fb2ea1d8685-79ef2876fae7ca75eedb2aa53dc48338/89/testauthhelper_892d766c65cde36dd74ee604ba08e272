5836c6fd88d809fed0118e09c64b6ae8
import request from 'supertest';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { getTestPrismaClient } from './jest.setup.js';
/**
 * Helper to create a test user and get authentication token
 */
export async function getAuthToken(app, email) {
    const prisma = getTestPrismaClient();
    // Generate unique email if not provided
    const userEmail = email || `test-${Date.now()}-${Math.random().toString(36).substring(7)}@example.com`;
    // Create a test user with hashed password
    const hashedPassword = await bcrypt.hash('testpassword', 10);
    const user = await prisma.user.create({
        data: {
            email: userEmail,
            name: 'Test User',
            password: hashedPassword,
            role: 'teacher',
        },
    });
    // Login to get token
    const loginResponse = await request(app).post('/api/login').send({
        email: userEmail,
        password: 'testpassword',
    });
    if (loginResponse.status !== 200) {
        throw new Error(`Login failed: ${loginResponse.status} ${loginResponse.text}`);
    }
    return { token: loginResponse.body.token, userId: user.id };
}
/**
 * Helper to make authenticated requests
 */
export function authRequest(app) {
    let token = null;
    let userId = null;
    return {
        async setup() {
            const authData = await getAuthToken(app);
            token = authData.token;
            userId = authData.userId;
        },
        get userId() {
            return userId;
        },
        get(url) {
            return request(app).get(url).set('Authorization', `Bearer ${token}`);
        },
        post(url) {
            return request(app).post(url).set('Authorization', `Bearer ${token}`);
        },
        put(url) {
            return request(app).put(url).set('Authorization', `Bearer ${token}`);
        },
        delete(url) {
            return request(app).delete(url).set('Authorization', `Bearer ${token}`);
        },
        patch(url) {
            return request(app).patch(url).set('Authorization', `Bearer ${token}`);
        },
    };
}
/**
 * Create a test user without going through HTTP
 */
export async function createTestUser(email) {
    const prisma = getTestPrismaClient();
    // Generate unique email if not provided
    const userEmail = email || `test-${Date.now()}-${Math.random().toString(36).substring(7)}@example.com`;
    const hashedPassword = await bcrypt.hash('testpassword', 10);
    return await prisma.user.create({
        data: {
            email: userEmail,
            name: 'Test User',
            password: hashedPassword,
            role: 'teacher',
        },
    });
}
/**
 * Create an auth token for a user ID
 */
export function createAuthToken(userId, email) {
    const secret = process.env.JWT_SECRET;
    if (!secret) {
        throw new Error('JWT_SECRET environment variable is required for testing');
    }
    return jwt.sign({ userId: userId.toString(), email }, secret, { expiresIn: '24h' });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,