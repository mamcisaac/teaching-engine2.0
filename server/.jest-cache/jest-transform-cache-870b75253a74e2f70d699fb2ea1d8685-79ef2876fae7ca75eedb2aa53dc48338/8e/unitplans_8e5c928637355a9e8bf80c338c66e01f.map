{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/unit-plans.ts","mappings":"AAAA,OAAO,EAAE,MAAM,EAAW,MAAM,SAAS,CAAC;AAE1C,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAMxB,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB,qDAAqD;AACrD,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,gCAAgC,CAAC;IACrF,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,uCAAuC,CAAC,CAAC,QAAQ,EAAE;IAClG,eAAe,EAAE,UAAU,EAAE;IAC7B,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC5C,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC9C,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IACzC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC3C,kBAAkB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;IACnE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAChE,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC/C,eAAe,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;IAChE,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,sDAAsD,CAAC;IAE5G,+CAA+C;IAC/C,0BAA0B,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC3D,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;IAC/D,eAAe,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAChD,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;IAC9D,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC/C,uBAAuB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IACxD,0BAA0B,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IAC3D,yBAAyB,EAAE,CAAC;SACzB,MAAM,CAAC;QACN,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;QAC9D,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;QAC5D,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;QACvD,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE;KACxD,CAAC;SACD,QAAQ,EAAE;IACb,sBAAsB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IACvD,sBAAsB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IACvD,wBAAwB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IACzD,qBAAqB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;IACtD,oBAAoB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE;CACtD,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,oBAAoB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;AAE5F,gDAAgD;AAChD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAC9D,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EAAE,eAAe,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAE1D,MAAM,KAAK,GAA8B,EAAE,MAAM,EAAE,CAAC;QACpD,IAAI,eAAe;YAAE,KAAK,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;QACrE,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;YACzB,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC;YACrB,IAAI,SAAS;gBAAE,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACjE,IAAI,OAAO;gBAAE,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC/C,KAAK;YACL,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;YAC7B,OAAO,EAAE;gBACP,aAAa,EAAE;oBACb,MAAM,EAAE;wBACN,EAAE,EAAE,IAAI;wBACR,KAAK,EAAE,IAAI;wBACX,OAAO,EAAE,IAAI;wBACb,KAAK,EAAE,IAAI;qBACZ;iBACF;gBACD,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN,WAAW,EAAE,IAAI;wBACjB,YAAY,EAAE,IAAI;wBAClB,SAAS,EAAE,IAAI;qBAChB;iBACF;aACF;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,yBAAyB;AACzB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACjE,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC/C,KAAK,EAAE;gBACL,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE;gBACjB,MAAM;aACP;YACD,OAAO,EAAE;gBACP,aAAa,EAAE,IAAI;gBACnB,YAAY,EAAE;oBACZ,OAAO,EAAE;wBACP,WAAW,EAAE,IAAI;qBAClB;oBACD,OAAO,EAAE;wBACP,WAAW,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;qBAC7B;iBACF;gBACD,WAAW,EAAE;oBACX,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;oBACxB,OAAO,EAAE;wBACP,MAAM,EAAE;4BACN,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE;yBAC/B;wBACD,YAAY,EAAE;4BACZ,MAAM,EAAE;gCACN,EAAE,EAAE,IAAI;gCACR,aAAa,EAAE,IAAI;gCACnB,gBAAgB,EAAE,IAAI;6BACvB;yBACF;qBACF;iBACF;gBACD,SAAS,EAAE;oBACT,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;iBAC/B;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,qBAAqB;QACrB,MAAM,YAAY,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;QACjD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC;QACrF,MAAM,QAAQ,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,GAAG,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5F,GAAG,CAAC,IAAI,CAAC;YACP,GAAG,QAAQ;YACX,QAAQ,EAAE;gBACR,KAAK,EAAE,YAAY;gBACnB,SAAS,EAAE,gBAAgB;gBAC3B,UAAU,EAAE,QAAQ;aACrB;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,yBAAyB;AACzB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,oBAAoB,CAAC,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAC/F,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EACJ,cAAc,EACd,kBAAkB,EAClB,eAAe,EACf,cAAc,EACd,aAAa,EACb,yBAAyB,EACzB,GAAG,QAAQ,EACZ,GAAG,GAAG,CAAC,IAAI,CAAC;QAEb,uCAAuC;QACvC,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC;YACzD,KAAK,EAAE;gBACL,EAAE,EAAE,QAAQ,CAAC,eAAe;gBAC5B,MAAM;aACP;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,2BAA2B,EAAE,CAAC,CAAC;QACtE,CAAC;QAED,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACpD,uBAAuB;YACvB,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACxC,IAAI,EAAE;oBACJ,GAAG,QAAQ;oBACX,MAAM;oBACN,SAAS,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;oBACvC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;oBACnC,kBAAkB,EAAE,kBAAkB,IAAI,EAAE;oBAC5C,eAAe,EAAE,eAAe,IAAI,EAAE;oBACtC,cAAc,EAAE,cAAc,IAAI,EAAE;oBACpC,aAAa,EAAE,aAAa,IAAI,EAAE;oBAClC,yBAAyB,EAAE,yBAAyB,IAAI,IAAI;iBAC7D;aACF,CAAC,CAAC;YAEH,2CAA2C;YAC3C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAChD,iCAAiC;gBACjC,MAAM,iBAAiB,GAAG,MAAM,EAAE,CAAC,qBAAqB,CAAC,QAAQ,CAAC;oBAChE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE;oBACrC,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;iBACrB,CAAC,CAAC;gBAEH,IAAI,iBAAiB,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,EAAE,CAAC;oBACvD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;gBACnE,CAAC;gBAED,MAAM,EAAE,CAAC,mBAAmB,CAAC,UAAU,CAAC;oBACtC,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,aAAqB,EAAE,EAAE,CAAC,CAAC;wBACnD,UAAU,EAAE,QAAQ,CAAC,EAAE;wBACvB,aAAa;qBACd,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,8CAA8C;YAC9C,OAAO,MAAM,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAClC,KAAK,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE;gBAC1B,OAAO,EAAE;oBACP,aAAa,EAAE;wBACb,MAAM,EAAE;4BACN,EAAE,EAAE,IAAI;4BACR,KAAK,EAAE,IAAI;4BACX,OAAO,EAAE,IAAI;4BACb,KAAK,EAAE,IAAI;yBACZ;qBACF;oBACD,MAAM,EAAE;wBACN,MAAM,EAAE;4BACN,WAAW,EAAE,IAAI;4BACjB,YAAY,EAAE,IAAI;yBACnB;qBACF;iBACF;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,qBAAqB;AACrB,MAAM,CAAC,GAAG,CACR,MAAM,EACN,QAAQ,CAAC,oBAAoB,CAAC,EAC9B,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAC9C,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EACJ,cAAc,EACd,kBAAkB,EAClB,eAAe,EACf,cAAc,EACd,aAAa,EACb,yBAAyB,EACzB,GAAG,UAAU,EACd,GAAG,GAAG,CAAC,IAAI,CAAC;QAEb,mBAAmB;QACnB,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC/C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE;SACrC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,sBAAsB;QACtB,MAAM,IAAI,GAA+B,EAAE,GAAG,UAAU,EAAE,CAAC;QAC3D,IAAI,UAAU,CAAC,SAAS;YAAE,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC1E,IAAI,UAAU,CAAC,OAAO;YAAE,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACpE,IAAI,kBAAkB,KAAK,SAAS;YAAE,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QACnF,IAAI,eAAe,KAAK,SAAS;YAAE,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAC1E,IAAI,cAAc,KAAK,SAAS;YAAE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACvE,IAAI,aAAa,KAAK,SAAS;YAAE,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACpE,IAAI,yBAAyB,KAAK,SAAS;YACzC,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAE7D,kBAAkB;QAClB,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;YAC5B,IAAI;SACL,CAAC,CAAC;QAEH,kCAAkC;QAClC,IAAI,cAAc,KAAK,SAAS,EAAE,CAAC;YACjC,+BAA+B;YAC/B,MAAM,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC;gBAC1C,KAAK,EAAE,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE;aACnC,CAAC,CAAC;YAEH,uBAAuB;YACvB,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC9B,MAAM,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC;oBAC1C,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,aAAqB,EAAE,EAAE,CAAC,CAAC;wBACnD,UAAU,EAAE,QAAQ,CAAC,EAAE;wBACvB,aAAa;qBACd,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAED,qCAAqC;QACrC,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YACnD,KAAK,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE;YAC1B,OAAO,EAAE;gBACP,aAAa,EAAE,IAAI;gBACnB,YAAY,EAAE;oBACZ,OAAO,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;iBAC/B;gBACD,WAAW,EAAE;oBACX,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;oBACxB,OAAO,EAAE;wBACP,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE;qBAC3C;iBACF;gBACD,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CACF,CAAC;AAEF,qBAAqB;AACrB,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACpE,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,8CAA8C;QAC9C,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC/C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE;YACpC,OAAO,EAAE;gBACP,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE;aAC1C;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,QAAQ,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,KAAK,EAAE,oDAAoD;aAC5D,CAAC,CAAC;QACL,CAAC;QAED,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3B,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;SAC7B,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACxB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,8BAA8B;AAC9B,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAC5E,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE7C,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC;YACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,6BAA6B,EAAE,CAAC,CAAC;QACxE,CAAC;QAED,mBAAmB;QACnB,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC/C,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE;SACrC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC;YACpD,IAAI,EAAE;gBACJ,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE;gBACzB,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;gBACpB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;gBAClB,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC7B,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;aACpC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,oBAAoB;AACpB,MAAM,CAAC,MAAM,CAAC,4BAA4B,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IAC1F,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,qCAAqC;QACrC,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC;YACvD,KAAK,EAAE;gBACL,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU;gBACzB,QAAQ,EAAE;oBACR,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE;oBACjB,MAAM;iBACP;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC,CAAC;QAC/D,CAAC;QAED,MAAM,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE;SACrC,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACxB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,wBAAwB;AACxB,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,GAAyB,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACxE,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAErE,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,kCAAkC,EAAE,CAAC,CAAC;QAC7E,CAAC;QAED,gDAAgD;QAChD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YACjD,KAAK,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE;YAC/B,OAAO,EAAE;gBACP,YAAY,EAAE,IAAI;gBAClB,SAAS,EAAE,IAAI;gBACf,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;oBAC7B,OAAO,EAAE;wBACP,YAAY,EAAE,IAAI;wBAClB,SAAS,EAAE,IAAI;qBAChB;iBACF,CAAC,CAAC,CAAC,KAAK;aACV;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,CAAC,CAAC;QACvE,CAAC;QAED,wCAAwC;QACxC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACpD,gDAAgD;YAChD,MAAM,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YACvF,MAAM,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;YAChC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,gBAAgB,CAAC,CAAC;YAEvE,iCAAiC;YACjC,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,QAAQ,EAAE,GAAG,UAAU,CAAC;YAE1I,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACvC,IAAI,EAAE;oBACJ,GAAG,QAAQ;oBACX,MAAM;oBACN,KAAK;oBACL,SAAS,EAAE,YAAY;oBACvB,OAAO,EAAE,UAAU;iBACpB;aACF,CAAC,CAAC;YAEH,oBAAoB;YACpB,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,MAAM,EAAE,CAAC,mBAAmB,CAAC,UAAU,CAAC;oBACtC,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBAC7B,UAAU,EAAE,OAAO,CAAC,EAAE;wBACtB,aAAa,EAAE,GAAG,CAAC,aAAa;qBACjC,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,iBAAiB;YACjB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACzB,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC;oBACnC,IAAI,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;wBACjG,GAAG,QAAQ;wBACX,UAAU,EAAE,OAAO,CAAC,EAAE;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,iCAAiC;YACjC,IAAI,eAAe,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC7D,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;oBACjC,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,UAAU,EAAE,GAAG,MAAM,CAAC;oBACnH,MAAM,SAAS,GAAI,MAA8D,CAAC,YAAY,IAAI,EAAE,CAAC;oBACrG,MAAM,SAAS,GAAI,MAA+G,CAAC,SAAS,IAAI,EAAE,CAAC;oBAEnJ,uDAAuD;oBACvD,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;oBAC9E,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;oBAExE,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC;wBAC/C,IAAI,EAAE;4BACJ,GAAG,UAAU;4BACb,MAAM;4BACN,UAAU,EAAE,OAAO,CAAC,EAAE;4BACtB,IAAI,EAAE,aAAa;4BACnB,KAAK,EAAE,GAAG,MAAM,CAAC,KAAK,SAAS;yBAChC;qBACF,CAAC,CAAC;oBAEH,2BAA2B;oBAC3B,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACzB,MAAM,EAAE,CAAC,yBAAyB,CAAC,UAAU,CAAC;4BAC5C,IAAI,EAAE,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gCAC1B,YAAY,EAAE,SAAS,CAAC,EAAE;gCAC1B,aAAa,EAAE,GAAG,CAAC,aAAa;6BACjC,CAAC,CAAC;yBACJ,CAAC,CAAC;oBACL,CAAC;oBAED,wBAAwB;oBACxB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACzB,MAAM,EAAE,CAAC,sBAAsB,CAAC,UAAU,CAAC;4BACzC,IAAI,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;gCACrG,GAAG,QAAQ;gCACX,YAAY,EAAE,SAAS,CAAC,EAAE;6BAC3B,CAAC,CAAmD;yBACtD,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;YACH,CAAC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,eAAe,MAAM,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/unit-plans.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate, cuidSchema } from '../validation';\nimport { z } from 'zod';\n\ninterface AuthenticatedRequest extends Request {\n  user?: { userId: string };\n}\n\nconst router = Router();\n\n// Enhanced validation schemas with security measures\nconst unitPlanCreateSchema = z.object({\n  title: z.string().min(1).max(255).regex(/^[^<>]*$/, 'Title cannot contain HTML tags'),\n  titleFr: z.string().max(255).regex(/^[^<>]*$/, 'French title cannot contain HTML tags').optional(),\n  longRangePlanId: cuidSchema(),\n  description: z.string().max(2000).optional(),\n  descriptionFr: z.string().max(2000).optional(),\n  bigIdeas: z.string().max(2000).optional(),\n  bigIdeasFr: z.string().max(2000).optional(),\n  essentialQuestions: z.array(z.string().max(500)).max(20).optional(),\n  startDate: z.string().datetime(),\n  endDate: z.string().datetime(),\n  estimatedHours: z.number().int().positive().max(1000).optional(),\n  assessmentPlan: z.string().max(2000).optional(),\n  successCriteria: z.array(z.string().max(500)).max(20).optional(),\n  expectationIds: z.array(cuidSchema()).max(50).min(1, 'At least one curriculum expectation must be selected'),\n\n  // ETFO-aligned planning fields with validation\n  crossCurricularConnections: z.string().max(1000).optional(),\n  learningSkills: z.array(z.string().max(100)).max(10).optional(),\n  culminatingTask: z.string().max(1000).optional(),\n  keyVocabulary: z.array(z.string().max(100)).max(30).optional(),\n  priorKnowledge: z.string().max(1000).optional(),\n  parentCommunicationPlan: z.string().max(1000).optional(),\n  fieldTripsAndGuestSpeakers: z.string().max(1000).optional(),\n  differentiationStrategies: z\n    .object({\n      forStruggling: z.array(z.string().max(200)).max(10).optional(),\n      forAdvanced: z.array(z.string().max(200)).max(10).optional(),\n      forELL: z.array(z.string().max(200)).max(10).optional(),\n      forIEP: z.array(z.string().max(200)).max(10).optional(),\n    })\n    .optional(),\n  indigenousPerspectives: z.string().max(1000).optional(),\n  environmentalEducation: z.string().max(1000).optional(),\n  socialJusticeConnections: z.string().max(1000).optional(),\n  technologyIntegration: z.string().max(1000).optional(),\n  communityConnections: z.string().max(1000).optional(),\n});\n\nconst unitPlanUpdateSchema = unitPlanCreateSchema.partial().omit({ longRangePlanId: true });\n\n// Get all unit plans for the authenticated user\nrouter.get('/', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { longRangePlanId, startDate, endDate } = req.query;\n\n    const where: Prisma.UnitPlanWhereInput = { userId };\n    if (longRangePlanId) where.longRangePlanId = String(longRangePlanId);\n    if (startDate || endDate) {\n      where.startDate = {};\n      if (startDate) where.startDate.gte = new Date(String(startDate));\n      if (endDate) where.startDate.lte = new Date(String(endDate));\n    }\n\n    const unitPlans = await prisma.unitPlan.findMany({\n      where,\n      orderBy: { startDate: 'asc' },\n      include: {\n        longRangePlan: {\n          select: {\n            id: true,\n            title: true,\n            subject: true,\n            grade: true,\n          },\n        },\n        _count: {\n          select: {\n            lessonPlans: true,\n            expectations: true,\n            resources: true,\n          },\n        },\n      },\n    });\n\n    res.json(unitPlans);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single unit plan\nrouter.get('/:id', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: {\n        id: req.params.id,\n        userId,\n      },\n      include: {\n        longRangePlan: true,\n        expectations: {\n          include: {\n            expectation: true,\n          },\n          orderBy: {\n            expectation: { code: 'asc' },\n          },\n        },\n        lessonPlans: {\n          orderBy: { date: 'asc' },\n          include: {\n            _count: {\n              select: { expectations: true },\n            },\n            daybookEntry: {\n              select: {\n                id: true,\n                overallRating: true,\n                wouldReuseLesson: true,\n              },\n            },\n          },\n        },\n        resources: {\n          orderBy: { createdAt: 'desc' },\n        },\n      },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    // Calculate progress\n    const totalLessons = unitPlan.lessonPlans.length;\n    const completedLessons = unitPlan.lessonPlans.filter((lp) => lp.daybookEntry).length;\n    const progress = totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;\n\n    res.json({\n      ...unitPlan,\n      progress: {\n        total: totalLessons,\n        completed: completedLessons,\n        percentage: progress,\n      },\n    });\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new unit plan\nrouter.post('/', validate(unitPlanCreateSchema), async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const {\n      expectationIds,\n      essentialQuestions,\n      successCriteria,\n      learningSkills,\n      keyVocabulary,\n      differentiationStrategies,\n      ...planData\n    } = req.body;\n\n    // Verify user owns the long-range plan\n    const longRangePlan = await prisma.longRangePlan.findFirst({\n      where: {\n        id: planData.longRangePlanId,\n        userId,\n      },\n    });\n\n    if (!longRangePlan) {\n      return res.status(404).json({ error: 'Long-range plan not found' });\n    }\n\n    // Use transaction to ensure data integrity\n    const result = await prisma.$transaction(async (tx) => {\n      // Create the unit plan\n      const unitPlan = await tx.unitPlan.create({\n        data: {\n          ...planData,\n          userId,\n          startDate: new Date(planData.startDate),\n          endDate: new Date(planData.endDate),\n          essentialQuestions: essentialQuestions || [],\n          successCriteria: successCriteria || [],\n          learningSkills: learningSkills || [],\n          keyVocabulary: keyVocabulary || [],\n          differentiationStrategies: differentiationStrategies || null,\n        },\n      });\n\n      // Link curriculum expectations if provided\n      if (expectationIds && expectationIds.length > 0) {\n        // Validate expectation IDs exist\n        const validExpectations = await tx.curriculumExpectation.findMany({\n          where: { id: { in: expectationIds } },\n          select: { id: true },\n        });\n\n        if (validExpectations.length !== expectationIds.length) {\n          throw new Error('One or more curriculum expectations not found');\n        }\n\n        await tx.unitPlanExpectation.createMany({\n          data: expectationIds.map((expectationId: string) => ({\n            unitPlanId: unitPlan.id,\n            expectationId,\n          })),\n        });\n      }\n\n      // Return the created unit plan with relations\n      return await tx.unitPlan.findUnique({\n        where: { id: unitPlan.id },\n        include: {\n          longRangePlan: {\n            select: {\n              id: true,\n              title: true,\n              subject: true,\n              grade: true,\n            },\n          },\n          _count: {\n            select: {\n              lessonPlans: true,\n              expectations: true,\n            },\n          },\n        },\n      });\n    });\n\n    res.status(201).json(result);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a unit plan\nrouter.put(\n  '/:id',\n  validate(unitPlanUpdateSchema),\n  async (req: AuthenticatedRequest, res, _next) => {\n    try {\n      const userId = parseInt(req.user?.userId || '0', 10);\n      if (!userId) {\n        return res.status(401).json({ error: 'Unauthorized' });\n      }\n\n      const {\n        expectationIds,\n        essentialQuestions,\n        successCriteria,\n        learningSkills,\n        keyVocabulary,\n        differentiationStrategies,\n        ...updateData\n      } = req.body;\n\n      // Verify ownership\n      const existing = await prisma.unitPlan.findFirst({\n        where: { id: req.params.id, userId },\n      });\n\n      if (!existing) {\n        return res.status(404).json({ error: 'Unit plan not found' });\n      }\n\n      // Prepare update data\n      const data: Prisma.UnitPlanUpdateInput = { ...updateData };\n      if (updateData.startDate) data.startDate = new Date(updateData.startDate);\n      if (updateData.endDate) data.endDate = new Date(updateData.endDate);\n      if (essentialQuestions !== undefined) data.essentialQuestions = essentialQuestions;\n      if (successCriteria !== undefined) data.successCriteria = successCriteria;\n      if (learningSkills !== undefined) data.learningSkills = learningSkills;\n      if (keyVocabulary !== undefined) data.keyVocabulary = keyVocabulary;\n      if (differentiationStrategies !== undefined)\n        data.differentiationStrategies = differentiationStrategies;\n\n      // Update the plan\n      const unitPlan = await prisma.unitPlan.update({\n        where: { id: req.params.id },\n        data,\n      });\n\n      // Update expectations if provided\n      if (expectationIds !== undefined) {\n        // Remove existing expectations\n        await prisma.unitPlanExpectation.deleteMany({\n          where: { unitPlanId: unitPlan.id },\n        });\n\n        // Add new expectations\n        if (expectationIds.length > 0) {\n          await prisma.unitPlanExpectation.createMany({\n            data: expectationIds.map((expectationId: string) => ({\n              unitPlanId: unitPlan.id,\n              expectationId,\n            })),\n          });\n        }\n      }\n\n      // Refetch with updated relationships\n      const updatedPlan = await prisma.unitPlan.findUnique({\n        where: { id: unitPlan.id },\n        include: {\n          longRangePlan: true,\n          expectations: {\n            include: { expectation: true },\n          },\n          lessonPlans: {\n            orderBy: { date: 'asc' },\n            include: {\n              _count: { select: { expectations: true } },\n            },\n          },\n          resources: true,\n        },\n      });\n\n      res.json(updatedPlan);\n    } catch (err) {\n      _next(err);\n    }\n  },\n);\n\n// Delete a unit plan\nrouter.delete('/:id', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership and check for dependencies\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: { id: req.params.id, userId },\n      include: {\n        _count: { select: { lessonPlans: true } },\n      },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    if (unitPlan._count.lessonPlans > 0) {\n      return res.status(400).json({\n        error: 'Cannot delete unit plan with existing lesson plans',\n      });\n    }\n\n    await prisma.unitPlan.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Add a resource to unit plan\nrouter.post('/:id/resources', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { title, type, url, notes } = req.body;\n\n    if (!title || !type) {\n      return res.status(400).json({ error: 'Title and type are required' });\n    }\n\n    // Verify ownership\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    const resource = await prisma.unitPlanResource.create({\n      data: {\n        unitPlanId: req.params.id,\n        title: String(title),\n        type: String(type),\n        url: url ? String(url) : null,\n        notes: notes ? String(notes) : null,\n      },\n    });\n\n    res.status(201).json(resource);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a resource\nrouter.delete('/:id/resources/:resourceId', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership through unit plan\n    const resource = await prisma.unitPlanResource.findFirst({\n      where: {\n        id: req.params.resourceId,\n        unitPlan: {\n          id: req.params.id,\n          userId,\n        },\n      },\n    });\n\n    if (!resource) {\n      return res.status(404).json({ error: 'Resource not found' });\n    }\n\n    await prisma.unitPlanResource.delete({\n      where: { id: req.params.resourceId },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Duplicate a unit plan\nrouter.post('/duplicate', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { sourceId, title, notes: _notes, includeSubItems } = req.body;\n\n    if (!sourceId || !title) {\n      return res.status(400).json({ error: 'Source ID and title are required' });\n    }\n\n    // Fetch the source unit plan with all relations\n    const sourceUnit = await prisma.unitPlan.findFirst({\n      where: { id: sourceId, userId },\n      include: {\n        expectations: true,\n        resources: true,\n        lessonPlans: includeSubItems ? {\n          include: {\n            expectations: true,\n            resources: true,\n          },\n        } : false,\n      },\n    });\n\n    if (!sourceUnit) {\n      return res.status(404).json({ error: 'Source unit plan not found' });\n    }\n\n    // Create the duplicate in a transaction\n    const result = await prisma.$transaction(async (tx) => {\n      // Calculate new dates (shift to current period)\n      const originalDuration = sourceUnit.endDate.getTime() - sourceUnit.startDate.getTime();\n      const newStartDate = new Date();\n      const newEndDate = new Date(newStartDate.getTime() + originalDuration);\n\n      // Create the duplicate unit plan\n      const { id: _, userId: __, createdAt: _createdAt, updatedAt: _updatedAt, lessonPlans, expectations, resources, ...unitData } = sourceUnit;\n      \n      const newUnit = await tx.unitPlan.create({\n        data: {\n          ...unitData,\n          userId,\n          title,\n          startDate: newStartDate,\n          endDate: newEndDate,\n        },\n      });\n\n      // Copy expectations\n      if (expectations.length > 0) {\n        await tx.unitPlanExpectation.createMany({\n          data: expectations.map(exp => ({\n            unitPlanId: newUnit.id,\n            expectationId: exp.expectationId,\n          })),\n        });\n      }\n\n      // Copy resources\n      if (resources.length > 0) {\n        await tx.unitPlanResource.createMany({\n          data: resources.map(({ id: _id, unitPlanId: _unitPlanId, createdAt: _createdAt, ...resource }) => ({\n            ...resource,\n            unitPlanId: newUnit.id,\n          })),\n        });\n      }\n\n      // Copy lesson plans if requested\n      if (includeSubItems && lessonPlans && lessonPlans.length > 0) {\n        for (const lesson of lessonPlans) {\n          const { id: _, unitPlanId: __, userId: ___, createdAt: _createdAt, updatedAt: _updatedAt, ...lessonData } = lesson;\n          const lessonExp = (lesson as { expectations?: Array<{ expectationId: string }> }).expectations || [];\n          const lessonRes = (lesson as { resources?: Array<{ id: string; lessonPlanId: string; createdAt: Date; [key: string]: unknown }> }).resources || [];\n          \n          // Calculate new lesson date based on relative position\n          const originalOffset = lesson.date.getTime() - sourceUnit.startDate.getTime();\n          const newLessonDate = new Date(newStartDate.getTime() + originalOffset);\n\n          const newLesson = await tx.eTFOLessonPlan.create({\n            data: {\n              ...lessonData,\n              userId,\n              unitPlanId: newUnit.id,\n              date: newLessonDate,\n              title: `${lesson.title} (Copy)`,\n            },\n          });\n\n          // Copy lesson expectations\n          if (lessonExp.length > 0) {\n            await tx.eTFOLessonPlanExpectation.createMany({\n              data: lessonExp.map(exp => ({\n                lessonPlanId: newLesson.id,\n                expectationId: exp.expectationId,\n              })),\n            });\n          }\n\n          // Copy lesson resources\n          if (lessonRes.length > 0) {\n            await tx.eTFOLessonPlanResource.createMany({\n              data: lessonRes.map(({ id: _id, lessonPlanId: _lessonPlanId, createdAt: _createdAt, ...resource }) => ({\n                ...resource,\n                lessonPlanId: newLesson.id,\n              })) as Prisma.ETFOLessonPlanResourceCreateManyInput[],\n            });\n          }\n        }\n      }\n\n      return newUnit;\n    });\n\n    res.status(201).json(result);\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],"version":3}