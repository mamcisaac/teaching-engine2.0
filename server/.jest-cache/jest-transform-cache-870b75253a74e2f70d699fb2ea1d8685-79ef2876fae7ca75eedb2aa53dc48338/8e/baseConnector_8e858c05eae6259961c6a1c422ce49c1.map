{"version":3,"names":["cov_27ozion6it","actualCoverage","BaseConnector","sourceName","constructor","f","s","checkAvailability","externalId","activity","getActivityDetails","transformToExternalActivity","sourceData","defaults","b","source","url","title","description","thumbnailUrl","duration","activityType","gradeMin","gradeMax","subject","language","materials","technology","groupSize","sourceRating","sourceReviews","internalRating","internalReviews","curriculumTags","learningGoals","isFree","price","license","lastVerified","Date","isActive","parseDuration","durationStr","iso8601Match","match","hours","parseInt","minutes","seconds","Math","ceil","textMatch","value","unit","toLowerCase","startsWith","parseGradeRange","gradeStr","defaultRange","min","max","normalized","replace","numbers","length","grades","map","n","normalizeSubject","subjectMap","mathematics","maths","french","english","ela","science","history","geography","pe","art","arts","music","drama","health","trim","inferActivityType","data","combined","format","mediaType","includes","extractMaterials","text","materialPatterns","pattern","items","split","item","filter","push","specificMaterials","material","some","m","Array","from","Set","fetchWithTimeout","options","timeoutMs","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","error","name","Error","fetchWithRetryAndTimeout","maxRetries","retryDelay","attempt","ok","status","backoffDelay","console","log","delay","statusText","ms","Promise","resolve"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/connectors/baseConnector.ts"],"sourcesContent":["import { ExternalActivity } from '@teaching-engine/database';\nimport { SearchParams } from '../activityDiscoveryService';\n\n/**\n * Base abstract class for all activity source connectors\n * Each connector implements the logic to search and retrieve activities\n * from a specific external source (OER Commons, Khan Academy, TPT, etc.)\n */\nexport abstract class BaseConnector {\n  protected sourceName: string;\n\n  constructor(sourceName: string) {\n    this.sourceName = sourceName;\n  }\n\n  /**\n   * Search for activities based on the provided parameters\n   * @param params Search parameters including query, filters, etc.\n   * @returns Array of activities matching the search criteria\n   */\n  abstract search(\n    params: SearchParams,\n  ): Promise<Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'>[]>;\n\n  /**\n   * Get detailed information about a specific activity\n   * @param externalId The ID of the activity in the external system\n   * @returns Detailed activity information or null if not found\n   */\n  abstract getActivityDetails(\n    externalId: string,\n  ): Promise<Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'> | null>;\n\n  /**\n   * Check if an activity is still available at the source\n   * @param externalId The ID of the activity in the external system\n   * @returns true if the activity is still available\n   */\n  async checkAvailability(externalId: string): Promise<boolean> {\n    const activity = await this.getActivityDetails(externalId);\n    return activity !== null;\n  }\n\n  /**\n   * Transform external API response to our ExternalActivity format\n   * This is a helper method that connectors can override\n   */\n  protected transformToExternalActivity(\n    sourceData: unknown,\n    defaults: Partial<ExternalActivity> = {},\n  ): Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'> {\n    return {\n      source: this.sourceName,\n      externalId: '',\n      url: '',\n      title: '',\n      description: null,\n      thumbnailUrl: null,\n      duration: null,\n      activityType: 'worksheet',\n      gradeMin: 1,\n      gradeMax: 1,\n      subject: 'general',\n      language: 'en',\n      materials: [],\n      technology: null,\n      groupSize: null,\n      sourceRating: null,\n      sourceReviews: null,\n      internalRating: null,\n      internalReviews: null,\n      curriculumTags: [],\n      learningGoals: null,\n      isFree: true,\n      price: null,\n      license: null,\n      lastVerified: new Date(),\n      isActive: true,\n      ...defaults,\n    };\n  }\n\n  /**\n   * Parse duration string to minutes\n   * Handles formats like \"PT15M\", \"15 minutes\", \"1 hour\", etc.\n   */\n  protected parseDuration(durationStr: string): number | null {\n    if (!durationStr) return null;\n\n    // ISO 8601 duration format (PT15M, PT1H30M)\n    const iso8601Match = durationStr.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n    if (iso8601Match) {\n      const hours = parseInt(iso8601Match[1] || '0');\n      const minutes = parseInt(iso8601Match[2] || '0');\n      const seconds = parseInt(iso8601Match[3] || '0');\n      return hours * 60 + minutes + Math.ceil(seconds / 60);\n    }\n\n    // Common text formats\n    const textMatch = durationStr.match(/(\\d+)\\s*(hours?|minutes?|mins?)/i);\n    if (textMatch) {\n      const value = parseInt(textMatch[1]);\n      const unit = textMatch[2].toLowerCase();\n      if (unit.startsWith('hour')) {\n        return value * 60;\n      } else {\n        return value;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Extract grade range from various formats\n   * Examples: \"Grade 1\", \"K-2\", \"1st Grade\", \"Grades 1-3\"\n   */\n  protected parseGradeRange(gradeStr: string): { min: number; max: number } {\n    const defaultRange = { min: 1, max: 1 };\n\n    if (!gradeStr) return defaultRange;\n\n    // Handle \"K\" for kindergarten\n    const normalized = gradeStr.replace(/K/gi, '0');\n\n    // Try to extract all numbers\n    const numbers = normalized.match(/\\d+/g);\n    if (!numbers || numbers.length === 0) return defaultRange;\n\n    const grades = numbers.map((n) => parseInt(n));\n\n    if (grades.length === 1) {\n      return { min: grades[0], max: grades[0] };\n    } else {\n      return {\n        min: Math.min(...grades),\n        max: Math.max(...grades),\n      };\n    }\n  }\n\n  /**\n   * Map external subject names to our standardized subjects\n   */\n  protected normalizeSubject(subject: string): string {\n    const subjectMap: Record<string, string> = {\n      mathematics: 'math',\n      maths: 'math',\n      french: 'francais',\n      'french immersion': 'francais',\n      english: 'english',\n      'language arts': 'english',\n      ela: 'english',\n      science: 'science',\n      'social studies': 'social-studies',\n      history: 'social-studies',\n      geography: 'social-studies',\n      'phys ed': 'physical-education',\n      'physical education': 'physical-education',\n      pe: 'physical-education',\n      art: 'arts',\n      arts: 'arts',\n      music: 'arts',\n      drama: 'arts',\n      health: 'health',\n    };\n\n    const normalized = subject.toLowerCase().trim();\n    return subjectMap[normalized] || normalized;\n  }\n\n  /**\n   * Determine activity type from title, description, or metadata\n   */\n  protected inferActivityType(data: {\n    title?: string;\n    description?: string;\n    format?: string;\n    mediaType?: string;\n  }): string {\n    const combined =\n      `${data.title || ''} ${data.description || ''} ${data.format || ''} ${data.mediaType || ''}`.toLowerCase();\n\n    if (combined.includes('video')) return 'video';\n    if (combined.includes('worksheet') || combined.includes('printable')) return 'worksheet';\n    if (combined.includes('game') || combined.includes('interactive')) return 'game';\n    if (combined.includes('experiment') || combined.includes('lab')) return 'experiment';\n    if (combined.includes('hands-on') || combined.includes('manipulative')) return 'handson';\n\n    return 'worksheet'; // default\n  }\n\n  /**\n   * Extract materials from description or metadata\n   */\n  protected extractMaterials(text: string): string[] {\n    if (!text) return [];\n\n    const materials: string[] = [];\n    const materialPatterns = [\n      /materials?\\s*needed\\s*:?\\s*([^.]+)/i,\n      /you\\s*will\\s*need\\s*:?\\s*([^.]+)/i,\n      /supplies\\s*:?\\s*([^.]+)/i,\n      /required\\s*materials?\\s*:?\\s*([^.]+)/i,\n    ];\n\n    for (const pattern of materialPatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        // Split by common delimiters and clean up\n        const items = match[1]\n          .split(/[,;]/)\n          .map((item) => item.trim())\n          .filter((item) => item.length > 0 && item.length < 50);\n\n        materials.push(...items);\n      }\n    }\n\n    // Also look for specific material mentions\n    const specificMaterials = [\n      'pencil',\n      'paper',\n      'scissors',\n      'glue',\n      'markers',\n      'crayons',\n      'dice',\n      'cards',\n      'counters',\n      'calculator',\n      'ruler',\n      'computer',\n      'tablet',\n      'whiteboard',\n      'manipulatives',\n    ];\n\n    for (const material of specificMaterials) {\n      if (\n        text.toLowerCase().includes(material) &&\n        !materials.some((m) => m.toLowerCase().includes(material))\n      ) {\n        materials.push(material);\n      }\n    }\n\n    return Array.from(new Set(materials)); // Remove duplicates\n  }\n\n  /**\n   * Fetch with timeout support using AbortController\n   * @param url The URL to fetch from\n   * @param options Fetch options including headers\n   * @param timeoutMs Timeout in milliseconds (default 30 seconds)\n   * @returns Promise that resolves to Response or rejects on timeout/error\n   */\n  protected async fetchWithTimeout(\n    url: string,\n    options: RequestInit = {},\n    timeoutMs: number = 30000\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error(`Request timeout after ${timeoutMs}ms: ${url}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch with retry and timeout support\n   * @param url The URL to fetch from\n   * @param options Fetch options including headers\n   * @param maxRetries Maximum number of retry attempts (default 3)\n   * @param timeoutMs Timeout per request in milliseconds (default 30 seconds)\n   * @param retryDelay Base delay between retries in milliseconds (default 1000)\n   * @returns Promise that resolves to string response body or null on failure\n   */\n  protected async fetchWithRetryAndTimeout(\n    url: string,\n    options: RequestInit = {},\n    maxRetries: number = 3,\n    timeoutMs: number = 30000,\n    retryDelay: number = 1000\n  ): Promise<string | null> {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const response = await this.fetchWithTimeout(url, options, timeoutMs);\n\n        if (response.ok) {\n          return await response.text();\n        } else if (response.status === 429) {\n          // Rate limited, wait longer\n          const backoffDelay = retryDelay * attempt * 2;\n          console.log(`Rate limited. Waiting ${backoffDelay}ms before retry...`);\n          await this.delay(backoffDelay);\n          continue;\n        } else {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(`Attempt ${attempt}/${maxRetries} failed for ${url}:`, error);\n        \n        if (attempt < maxRetries) {\n          const backoffDelay = retryDelay * attempt;\n          console.log(`Retrying in ${backoffDelay}ms...`);\n          await this.delay(backoffDelay);\n        } else {\n          console.error(`All ${maxRetries} attempts failed for ${url}`);\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Helper method to delay execution\n   * @param ms Milliseconds to delay\n   */\n  protected delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n"],"mappingssCQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAnCR;;;;;AAKA,OAAM,MAAgBE,aAAa;EACvBC,UAAU;EAEpBC,YAAYD,UAAkB;IAAA;IAAAH,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAM,CAAA;IAC5B,IAAI,CAACH,UAAU,GAAGA,UAAU;EAC9B;EAoBA;;;;;EAKA,MAAMI,iBAAiBA,CAACC,UAAkB;IAAA;IAAAR,cAAA,GAAAK,CAAA;IACxC,MAAMI,QAAQ;IAAA;IAAA,CAAAT,cAAA,GAAAM,CAAA,OAAG,MAAM,IAAI,CAACI,kBAAkB,CAACF,UAAU,CAAC;IAAC;IAAAR,cAAA,GAAAM,CAAA;IAC3D,OAAOG,QAAQ,KAAK,IAAI;EAC1B;EAEA;;;;EAIUE,2BAA2BA,CACnCC,UAAmB,EACnBC,QAAA;EAAA;EAAA,CAAAb,cAAA,GAAAc,CAAA,UAAsC,EAAE;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAM,CAAA;IAExC,OAAO;MACLS,MAAM,EAAE,IAAI,CAACZ,UAAU;MACvBK,UAAU,EAAE,EAAE;MACdQ,GAAG,EAAE,EAAE;MACPC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,IAAI;MACjBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,WAAW;MACzBC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,CAAC;MACXC,OAAO,EAAE,SAAS;MAClBC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,IAAI;MACnBC,cAAc,EAAE,IAAI;MACpBC,eAAe,EAAE,IAAI;MACrBC,cAAc,EAAE,EAAE;MAClBC,aAAa,EAAE,IAAI;MACnBC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE,IAAIC,IAAI,EAAE;MACxBC,QAAQ,EAAE,IAAI;MACd,GAAG3B;KACJ;EACH;EAEA;;;;EAIU4B,aAAaA,CAACC,WAAmB;IAAA;IAAA1C,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAM,CAAA;IACzC,IAAI,CAACoC,WAAW,EAAE;MAAA;MAAA1C,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAE9B;IACA,MAAM6B,YAAY;IAAA;IAAA,CAAA3C,cAAA,GAAAM,CAAA,OAAGoC,WAAW,CAACE,KAAK,CAAC,qCAAqC,CAAC;IAAC;IAAA5C,cAAA,GAAAM,CAAA;IAC9E,IAAIqC,YAAY,EAAE;MAAA;MAAA3C,cAAA,GAAAc,CAAA;MAChB,MAAM+B,KAAK;MAAA;MAAA,CAAA7C,cAAA,GAAAM,CAAA,OAAGwC,QAAQ;MAAC;MAAA,CAAA9C,cAAA,GAAAc,CAAA,UAAA6B,YAAY,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA3C,cAAA,GAAAc,CAAA,UAAI,GAAG,EAAC;MAC9C,MAAMiC,OAAO;MAAA;MAAA,CAAA/C,cAAA,GAAAM,CAAA,OAAGwC,QAAQ;MAAC;MAAA,CAAA9C,cAAA,GAAAc,CAAA,UAAA6B,YAAY,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA3C,cAAA,GAAAc,CAAA,UAAI,GAAG,EAAC;MAChD,MAAMkC,OAAO;MAAA;MAAA,CAAAhD,cAAA,GAAAM,CAAA,QAAGwC,QAAQ;MAAC;MAAA,CAAA9C,cAAA,GAAAc,CAAA,UAAA6B,YAAY,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA3C,cAAA,GAAAc,CAAA,UAAI,GAAG,EAAC;MAAC;MAAAd,cAAA,GAAAM,CAAA;MACjD,OAAOuC,KAAK,GAAG,EAAE,GAAGE,OAAO,GAAGE,IAAI,CAACC,IAAI,CAACF,OAAO,GAAG,EAAE,CAAC;IACvD,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAc,CAAA;IAAA;IAED;IACA,MAAMqC,SAAS;IAAA;IAAA,CAAAnD,cAAA,GAAAM,CAAA,QAAGoC,WAAW,CAACE,KAAK,CAAC,kCAAkC,CAAC;IAAC;IAAA5C,cAAA,GAAAM,CAAA;IACxE,IAAI6C,SAAS,EAAE;MAAA;MAAAnD,cAAA,GAAAc,CAAA;MACb,MAAMsC,KAAK;MAAA;MAAA,CAAApD,cAAA,GAAAM,CAAA,QAAGwC,QAAQ,CAACK,SAAS,CAAC,CAAC,CAAC,CAAC;MACpC,MAAME,IAAI;MAAA;MAAA,CAAArD,cAAA,GAAAM,CAAA,QAAG6C,SAAS,CAAC,CAAC,CAAC,CAACG,WAAW,EAAE;MAAC;MAAAtD,cAAA,GAAAM,CAAA;MACxC,IAAI+C,IAAI,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;QAAA;QAAAvD,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAM,CAAA;QAC3B,OAAO8C,KAAK,GAAG,EAAE;MACnB,CAAC,MAAM;QAAA;QAAApD,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAM,CAAA;QACL,OAAO8C,KAAK;MACd;IACF,CAAC;IAAA;IAAA;MAAApD,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAM,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;;EAIUkD,eAAeA,CAACC,QAAgB;IAAA;IAAAzD,cAAA,GAAAK,CAAA;IACxC,MAAMqD,YAAY;IAAA;IAAA,CAAA1D,cAAA,GAAAM,CAAA,QAAG;MAAEqD,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAC,CAAE;IAAC;IAAA5D,cAAA,GAAAM,CAAA;IAExC,IAAI,CAACmD,QAAQ,EAAE;MAAA;MAAAzD,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAOoD,YAAY;IAAA,CAAC;IAAA;IAAA;MAAA1D,cAAA,GAAAc,CAAA;IAAA;IAEnC;IACA,MAAM+C,UAAU;IAAA;IAAA,CAAA7D,cAAA,GAAAM,CAAA,QAAGmD,QAAQ,CAACK,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IAE/C;IACA,MAAMC,OAAO;IAAA;IAAA,CAAA/D,cAAA,GAAAM,CAAA,QAAGuD,UAAU,CAACjB,KAAK,CAAC,MAAM,CAAC;IAAC;IAAA5C,cAAA,GAAAM,CAAA;IACzC;IAAI;IAAA,CAAAN,cAAA,GAAAc,CAAA,YAACiD,OAAO;IAAA;IAAA,CAAA/D,cAAA,GAAAc,CAAA,WAAIiD,OAAO,CAACC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAhE,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAOoD,YAAY;IAAA,CAAC;IAAA;IAAA;MAAA1D,cAAA,GAAAc,CAAA;IAAA;IAE1D,MAAMmD,MAAM;IAAA;IAAA,CAAAjE,cAAA,GAAAM,CAAA,QAAGyD,OAAO,CAACG,GAAG,CAAEC,CAAC,IAAK;MAAA;MAAAnE,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAM,CAAA;MAAA,OAAAwC,QAAQ,CAACqB,CAAC,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAnE,cAAA,GAAAM,CAAA;IAE/C,IAAI2D,MAAM,CAACD,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAhE,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MACvB,OAAO;QAAEqD,GAAG,EAAEM,MAAM,CAAC,CAAC,CAAC;QAAEL,GAAG,EAAEK,MAAM,CAAC,CAAC;MAAC,CAAE;IAC3C,CAAC,MAAM;MAAA;MAAAjE,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MACL,OAAO;QACLqD,GAAG,EAAEV,IAAI,CAACU,GAAG,CAAC,GAAGM,MAAM,CAAC;QACxBL,GAAG,EAAEX,IAAI,CAACW,GAAG,CAAC,GAAGK,MAAM;OACxB;IACH;EACF;EAEA;;;EAGUG,gBAAgBA,CAAC5C,OAAe;IAAA;IAAAxB,cAAA,GAAAK,CAAA;IACxC,MAAMgE,UAAU;IAAA;IAAA,CAAArE,cAAA,GAAAM,CAAA,QAA2B;MACzCgE,WAAW,EAAE,MAAM;MACnBC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,UAAU;MAClB,kBAAkB,EAAE,UAAU;MAC9BC,OAAO,EAAE,SAAS;MAClB,eAAe,EAAE,SAAS;MAC1BC,GAAG,EAAE,SAAS;MACdC,OAAO,EAAE,SAAS;MAClB,gBAAgB,EAAE,gBAAgB;MAClCC,OAAO,EAAE,gBAAgB;MACzBC,SAAS,EAAE,gBAAgB;MAC3B,SAAS,EAAE,oBAAoB;MAC/B,oBAAoB,EAAE,oBAAoB;MAC1CC,EAAE,EAAE,oBAAoB;MACxBC,GAAG,EAAE,MAAM;MACXC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE;KACT;IAED,MAAMtB,UAAU;IAAA;IAAA,CAAA7D,cAAA,GAAAM,CAAA,QAAGkB,OAAO,CAAC8B,WAAW,EAAE,CAAC8B,IAAI,EAAE;IAAC;IAAApF,cAAA,GAAAM,CAAA;IAChD,OAAO,2BAAAN,cAAA,GAAAc,CAAA,WAAAuD,UAAU,CAACR,UAAU,CAAC;IAAA;IAAA,CAAA7D,cAAA,GAAAc,CAAA,WAAI+C,UAAU;EAC7C;EAEA;;;EAGUwB,iBAAiBA,CAACC,IAK3B;IAAA;IAAAtF,cAAA,GAAAK,CAAA;IACC,MAAMkF,QAAQ;IAAA;IAAA,CAAAvF,cAAA,GAAAM,CAAA,QACZ;IAAG;IAAA,CAAAN,cAAA,GAAAc,CAAA,WAAAwE,IAAI,CAACrE,KAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAc,CAAA,WAAI,EAAE;IAAI;IAAA,CAAAd,cAAA,GAAAc,CAAA,WAAAwE,IAAI,CAACpE,WAAW;IAAA;IAAA,CAAAlB,cAAA,GAAAc,CAAA,WAAI,EAAE;IAAI;IAAA,CAAAd,cAAA,GAAAc,CAAA,WAAAwE,IAAI,CAACE,MAAM;IAAA;IAAA,CAAAxF,cAAA,GAAAc,CAAA,WAAI,EAAE;IAAI;IAAA,CAAAd,cAAA,GAAAc,CAAA,WAAAwE,IAAI,CAACG,SAAS;IAAA;IAAA,CAAAzF,cAAA,GAAAc,CAAA,WAAI,EAAE,GAAE,CAACwC,WAAW,EAAE;IAAC;IAAAtD,cAAA,GAAAM,CAAA;IAE7G,IAAIiF,QAAQ,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;MAAA;MAAA1F,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAM,CAAA;IAC/C;IAAI;IAAA,CAAAN,cAAA,GAAAc,CAAA,WAAAyE,QAAQ,CAACG,QAAQ,CAAC,WAAW,CAAC;IAAA;IAAA,CAAA1F,cAAA,GAAAc,CAAA,WAAIyE,QAAQ,CAACG,QAAQ,CAAC,WAAW,CAAC,GAAE;MAAA;MAAA1F,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,WAAW;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAM,CAAA;IACzF;IAAI;IAAA,CAAAN,cAAA,GAAAc,CAAA,WAAAyE,QAAQ,CAACG,QAAQ,CAAC,MAAM,CAAC;IAAA;IAAA,CAAA1F,cAAA,GAAAc,CAAA,WAAIyE,QAAQ,CAACG,QAAQ,CAAC,aAAa,CAAC,GAAE;MAAA;MAAA1F,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,MAAM;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAM,CAAA;IACjF;IAAI;IAAA,CAAAN,cAAA,GAAAc,CAAA,WAAAyE,QAAQ,CAACG,QAAQ,CAAC,YAAY,CAAC;IAAA;IAAA,CAAA1F,cAAA,GAAAc,CAAA,WAAIyE,QAAQ,CAACG,QAAQ,CAAC,KAAK,CAAC,GAAE;MAAA;MAAA1F,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,YAAY;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAM,CAAA;IACrF;IAAI;IAAA,CAAAN,cAAA,GAAAc,CAAA,WAAAyE,QAAQ,CAACG,QAAQ,CAAC,UAAU,CAAC;IAAA;IAAA,CAAA1F,cAAA,GAAAc,CAAA,WAAIyE,QAAQ,CAACG,QAAQ,CAAC,cAAc,CAAC,GAAE;MAAA;MAAA1F,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAM,CAAA;IAEzF,OAAO,WAAW,CAAC,CAAC;EACtB;EAEA;;;EAGUqF,gBAAgBA,CAACC,IAAY;IAAA;IAAA5F,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAM,CAAA;IACrC,IAAI,CAACsF,IAAI,EAAE;MAAA;MAAA5F,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAM,CAAA;MAAA,OAAO,EAAE;IAAA,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAc,CAAA;IAAA;IAErB,MAAMY,SAAS;IAAA;IAAA,CAAA1B,cAAA,GAAAM,CAAA,QAAa,EAAE;IAC9B,MAAMuF,gBAAgB;IAAA;IAAA,CAAA7F,cAAA,GAAAM,CAAA,QAAG,CACvB,qCAAqC,EACrC,mCAAmC,EACnC,0BAA0B,EAC1B,uCAAuC,CACxC;IAAC;IAAAN,cAAA,GAAAM,CAAA;IAEF,KAAK,MAAMwF,OAAO,IAAID,gBAAgB,EAAE;MACtC,MAAMjD,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAAM,CAAA,QAAGsF,IAAI,CAAChD,KAAK,CAACkD,OAAO,CAAC;MAAC;MAAA9F,cAAA,GAAAM,CAAA;MAClC,IAAIsC,KAAK,EAAE;QAAA;QAAA5C,cAAA,GAAAc,CAAA;QACT;QACA,MAAMiF,KAAK;QAAA;QAAA,CAAA/F,cAAA,GAAAM,CAAA,QAAGsC,KAAK,CAAC,CAAC,CAAC,CACnBoD,KAAK,CAAC,MAAM,CAAC,CACb9B,GAAG,CAAE+B,IAAI,IAAK;UAAA;UAAAjG,cAAA,GAAAK,CAAA;UAAAL,cAAA,GAAAM,CAAA;UAAA,OAAA2F,IAAI,CAACb,IAAI,EAAE;QAAF,CAAE,CAAC,CAC1Bc,MAAM,CAAED,IAAI,IAAK;UAAA;UAAAjG,cAAA,GAAAK,CAAA;UAAAL,cAAA,GAAAM,CAAA;UAAA,kCAAAN,cAAA,GAAAc,CAAA,WAAAmF,IAAI,CAACjC,MAAM,GAAG,CAAC;UAAA;UAAA,CAAAhE,cAAA,GAAAc,CAAA,WAAImF,IAAI,CAACjC,MAAM,GAAG,EAAE;QAAF,CAAE,CAAC;QAAC;QAAAhE,cAAA,GAAAM,CAAA;QAEzDoB,SAAS,CAACyE,IAAI,CAAC,GAAGJ,KAAK,CAAC;MAC1B,CAAC;MAAA;MAAA;QAAA/F,cAAA,GAAAc,CAAA;MAAA;IACH;IAEA;IACA,MAAMsF,iBAAiB;IAAA;IAAA,CAAApG,cAAA,GAAAM,CAAA,QAAG,CACxB,QAAQ,EACR,OAAO,EACP,UAAU,EACV,MAAM,EACN,SAAS,EACT,SAAS,EACT,MAAM,EACN,OAAO,EACP,UAAU,EACV,YAAY,EACZ,OAAO,EACP,UAAU,EACV,QAAQ,EACR,YAAY,EACZ,eAAe,CAChB;IAAC;IAAAN,cAAA,GAAAM,CAAA;IAEF,KAAK,MAAM+F,QAAQ,IAAID,iBAAiB,EAAE;MAAA;MAAApG,cAAA,GAAAM,CAAA;MACxC;MACE;MAAA,CAAAN,cAAA,GAAAc,CAAA,WAAA8E,IAAI,CAACtC,WAAW,EAAE,CAACoC,QAAQ,CAACW,QAAQ,CAAC;MAAA;MAAA,CAAArG,cAAA,GAAAc,CAAA,WACrC,CAACY,SAAS,CAAC4E,IAAI,CAAEC,CAAC,IAAK;QAAA;QAAAvG,cAAA,GAAAK,CAAA;QAAAL,cAAA,GAAAM,CAAA;QAAA,OAAAiG,CAAC,CAACjD,WAAW,EAAE,CAACoC,QAAQ,CAACW,QAAQ,CAAC;MAAD,CAAC,CAAC,GAC1D;QAAA;QAAArG,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAM,CAAA;QACAoB,SAAS,CAACyE,IAAI,CAACE,QAAQ,CAAC;MAC1B,CAAC;MAAA;MAAA;QAAArG,cAAA,GAAAc,CAAA;MAAA;IACH;IAAC;IAAAd,cAAA,GAAAM,CAAA;IAED,OAAOkG,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAChF,SAAS,CAAC,CAAC,CAAC,CAAC;EACzC;EAEA;;;;;;;EAOU,MAAMiF,gBAAgBA,CAC9B3F,GAAW,EACX4F,OAAA;EAAA;EAAA,CAAA5G,cAAA,GAAAc,CAAA,WAAuB,EAAE,GACzB+F,SAAA;EAAA;EAAA,CAAA7G,cAAA,GAAAc,CAAA,WAAoB,KAAK;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAEzB,MAAMyG,UAAU;IAAA;IAAA,CAAA9G,cAAA,GAAAM,CAAA,QAAG,IAAIyG,eAAe,EAAE;IACxC,MAAMC,SAAS;IAAA;IAAA,CAAAhH,cAAA,GAAAM,CAAA,QAAG2G,UAAU,CAAC,MAAM;MAAA;MAAAjH,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAM,CAAA;MAAA,OAAAwG,UAAU,CAACI,KAAK,EAAE;IAAF,CAAE,EAAEL,SAAS,CAAC;IAAC;IAAA7G,cAAA,GAAAM,CAAA;IAElE,IAAI;MACF,MAAM6G,QAAQ;MAAA;MAAA,CAAAnH,cAAA,GAAAM,CAAA,QAAG,MAAM8G,KAAK,CAACpG,GAAG,EAAE;QAChC,GAAG4F,OAAO;QACVS,MAAM,EAAEP,UAAU,CAACO;OACpB,CAAC;MAAC;MAAArH,cAAA,GAAAM,CAAA;MACHgH,YAAY,CAACN,SAAS,CAAC;MAAC;MAAAhH,cAAA,GAAAM,CAAA;MACxB,OAAO6G,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA;MAAAvH,cAAA,GAAAM,CAAA;MACdgH,YAAY,CAACN,SAAS,CAAC;MAAC;MAAAhH,cAAA,GAAAM,CAAA;MACxB,IAAIiH,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;QAAA;QAAAxH,cAAA,GAAAc,CAAA;QAAAd,cAAA,GAAAM,CAAA;QAC/B,MAAM,IAAImH,KAAK,CAAC,yBAAyBZ,SAAS,OAAO7F,GAAG,EAAE,CAAC;MACjE,CAAC;MAAA;MAAA;QAAAhB,cAAA,GAAAc,CAAA;MAAA;MAAAd,cAAA,GAAAM,CAAA;MACD,MAAMiH,KAAK;IACb;EACF;EAEA;;;;;;;;;EASU,MAAMG,wBAAwBA,CACtC1G,GAAW,EACX4F,OAAA;EAAA;EAAA,CAAA5G,cAAA,GAAAc,CAAA,WAAuB,EAAE,GACzB6G,UAAA;EAAA;EAAA,CAAA3H,cAAA,GAAAc,CAAA,WAAqB,CAAC,GACtB+F,SAAA;EAAA;EAAA,CAAA7G,cAAA,GAAAc,CAAA,WAAoB,KAAK,GACzB8G,UAAA;EAAA;EAAA,CAAA5H,cAAA,GAAAc,CAAA,WAAqB,IAAI;IAAA;IAAAd,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAM,CAAA;IAEzB,KAAK,IAAIuH,OAAO;IAAA;IAAA,CAAA7H,cAAA,GAAAM,CAAA,QAAG,CAAC,GAAEuH,OAAO,IAAIF,UAAU,EAAEE,OAAO,EAAE,EAAE;MAAA;MAAA7H,cAAA,GAAAM,CAAA;MACtD,IAAI;QACF,MAAM6G,QAAQ;QAAA;QAAA,CAAAnH,cAAA,GAAAM,CAAA,QAAG,MAAM,IAAI,CAACqG,gBAAgB,CAAC3F,GAAG,EAAE4F,OAAO,EAAEC,SAAS,CAAC;QAAC;QAAA7G,cAAA,GAAAM,CAAA;QAEtE,IAAI6G,QAAQ,CAACW,EAAE,EAAE;UAAA;UAAA9H,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAM,CAAA;UACf,OAAO,MAAM6G,QAAQ,CAACvB,IAAI,EAAE;QAC9B,CAAC,MAAM;UAAA;UAAA5F,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAM,CAAA;UAAA,IAAI6G,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;YAAA;YAAA/H,cAAA,GAAAc,CAAA;YAClC;YACA,MAAMkH,YAAY;YAAA;YAAA,CAAAhI,cAAA,GAAAM,CAAA,QAAGsH,UAAU,GAAGC,OAAO,GAAG,CAAC;YAAC;YAAA7H,cAAA,GAAAM,CAAA;YAC9C2H,OAAO,CAACC,GAAG,CAAC,yBAAyBF,YAAY,oBAAoB,CAAC;YAAC;YAAAhI,cAAA,GAAAM,CAAA;YACvE,MAAM,IAAI,CAAC6H,KAAK,CAACH,YAAY,CAAC;YAAC;YAAAhI,cAAA,GAAAM,CAAA;YAC/B;UACF,CAAC,MAAM;YAAA;YAAAN,cAAA,GAAAc,CAAA;YAAAd,cAAA,GAAAM,CAAA;YACL,MAAM,IAAImH,KAAK,CAAC,QAAQN,QAAQ,CAACY,MAAM,KAAKZ,QAAQ,CAACiB,UAAU,EAAE,CAAC;UACpE;QAAA;MACF,CAAC,CAAC,OAAOb,KAAK,EAAE;QAAA;QAAAvH,cAAA,GAAAM,CAAA;QACd2H,OAAO,CAACV,KAAK,CAAC,WAAWM,OAAO,IAAIF,UAAU,eAAe3G,GAAG,GAAG,EAAEuG,KAAK,CAAC;QAAC;QAAAvH,cAAA,GAAAM,CAAA;QAE5E,IAAIuH,OAAO,GAAGF,UAAU,EAAE;UAAA;UAAA3H,cAAA,GAAAc,CAAA;UACxB,MAAMkH,YAAY;UAAA;UAAA,CAAAhI,cAAA,GAAAM,CAAA,QAAGsH,UAAU,GAAGC,OAAO;UAAC;UAAA7H,cAAA,GAAAM,CAAA;UAC1C2H,OAAO,CAACC,GAAG,CAAC,eAAeF,YAAY,OAAO,CAAC;UAAC;UAAAhI,cAAA,GAAAM,CAAA;UAChD,MAAM,IAAI,CAAC6H,KAAK,CAACH,YAAY,CAAC;QAChC,CAAC,MAAM;UAAA;UAAAhI,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAM,CAAA;UACL2H,OAAO,CAACV,KAAK,CAAC,OAAOI,UAAU,wBAAwB3G,GAAG,EAAE,CAAC;UAAC;UAAAhB,cAAA,GAAAM,CAAA;UAC9D,OAAO,IAAI;QACb;MACF;IACF;IAAC;IAAAN,cAAA,GAAAM,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;;EAIU6H,KAAKA,CAACE,EAAU;IAAA;IAAArI,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAM,CAAA;IACxB,OAAO,IAAIgI,OAAO,CAAEC,OAAO,IAAK;MAAA;MAAAvI,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAM,CAAA;MAAA,OAAA2G,UAAU,CAACsB,OAAO,EAAEF,EAAE,CAAC;IAAD,CAAC,CAAC;EAC1D","ignoreList":[]}