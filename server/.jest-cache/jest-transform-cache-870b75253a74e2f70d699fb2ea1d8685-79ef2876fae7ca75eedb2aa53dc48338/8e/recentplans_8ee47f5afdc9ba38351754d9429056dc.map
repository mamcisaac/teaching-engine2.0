{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/recent-plans.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/recent-plans.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { prisma } from '../prisma';\n\ninterface AuthenticatedRequest extends Request {\n  user?: { userId: string };\n}\n\nconst router = Router();\n\n// Track plan access\nrouter.post('/track', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { planType, planId } = req.body;\n    \n    if (!planType || !planId) {\n      return res.status(400).json({ error: 'Plan type and ID are required' });\n    }\n\n    // Upsert recent plan access\n    await prisma.recentPlanAccess.upsert({\n      where: {\n        userId_planType_planId: {\n          userId,\n          planType,\n          planId,\n        },\n      },\n      update: {\n        lastAccessed: new Date(),\n        accessCount: { increment: 1 },\n      },\n      create: {\n        userId,\n        planType,\n        planId,\n        lastAccessed: new Date(),\n        accessCount: 1,\n      },\n    });\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error in recent plans route:', err);\n    res.status(500).json({ error: 'Failed to process request' });\n  }\n});\n\n// Get recent plans for user\nrouter.get('/', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const limit = parseInt(req.query.limit as string) || 10;\n\n    const recentAccesses = await prisma.recentPlanAccess.findMany({\n      where: { userId },\n      orderBy: { lastAccessed: 'desc' },\n      take: limit,\n    });\n\n    // Fetch plan details for each recent access\n    const recentPlans = await Promise.all(\n      recentAccesses.map(async (access) => {\n        let plan = null;\n        let parentInfo = null;\n\n        switch (access.planType) {\n          case 'long-range':\n            plan = await prisma.longRangePlan.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                title: true,\n                subject: true,\n                grade: true,\n                academicYear: true,\n                _count: {\n                  select: { unitPlans: true },\n                },\n              },\n            });\n            break;\n\n          case 'unit':\n            plan = await prisma.unitPlan.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                title: true,\n                longRangePlan: {\n                  select: {\n                    id: true,\n                    title: true,\n                    subject: true,\n                    grade: true,\n                  },\n                },\n                _count: {\n                  select: { lessonPlans: true },\n                },\n              },\n            });\n            if (plan) {\n              parentInfo = plan.longRangePlan;\n            }\n            break;\n\n          case 'lesson':\n            plan = await prisma.eTFOLessonPlan.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                title: true,\n                date: true,\n                unitPlan: {\n                  select: {\n                    id: true,\n                    title: true,\n                    longRangePlan: {\n                      select: {\n                        subject: true,\n                        grade: true,\n                      },\n                    },\n                  },\n                },\n                daybookEntry: {\n                  select: { id: true },\n                },\n              },\n            });\n            if (plan) {\n              parentInfo = plan.unitPlan;\n            }\n            break;\n\n          case 'daybook':\n            plan = await prisma.daybookEntry.findUnique({\n              where: { id: access.planId },\n              select: {\n                id: true,\n                date: true,\n                lessonPlan: {\n                  select: {\n                    id: true,\n                    title: true,\n                    unitPlan: {\n                      select: {\n                        title: true,\n                        longRangePlan: {\n                          select: {\n                            subject: true,\n                            grade: true,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            });\n            if (plan?.lessonPlan) {\n              parentInfo = plan.lessonPlan.unitPlan;\n            }\n            break;\n        }\n\n        if (!plan) return null;\n\n        // Calculate progress based on plan type\n        let progress = undefined;\n        let status = 'in-progress';\n\n        if (access.planType === 'long-range' && '_count' in plan) {\n          // For simplicity, assume progress based on unit count\n          progress = Math.min(plan._count.unitPlans * 10, 100);\n        } else if (access.planType === 'unit' && '_count' in plan) {\n          progress = Math.min(plan._count.lessonPlans * 5, 100);\n        } else if (access.planType === 'lesson' && 'daybookEntry' in plan) {\n          status = plan.daybookEntry ? 'completed' : 'in-progress';\n        }\n\n        return {\n          id: plan.id,\n          type: access.planType,\n          title: 'title' in plan ? plan.title : `Daybook - ${new Date(plan.date).toLocaleDateString()}`,\n          subject: parentInfo?.longRangePlan?.subject || parentInfo?.subject,\n          grade: parentInfo?.longRangePlan?.grade || parentInfo?.grade,\n          lastAccessed: access.lastAccessed,\n          progress,\n          status,\n          parentTitle: parentInfo?.title,\n        };\n      })\n    );\n\n    // Filter out null values (deleted plans)\n    const validPlans = recentPlans.filter(Boolean);\n\n    res.json(validPlans);\n  } catch (err) {\n    console.error('Error in recent plans route:', err);\n    res.status(500).json({ error: 'Failed to process request' });\n  }\n});\n\n// Clear recent plans history\nrouter.delete('/clear', async (req: AuthenticatedRequest, res, _next) => {\n  try {\n    const userId = parseInt(req.user?.userId || '0', 10);\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    await prisma.recentPlanAccess.deleteMany({\n      where: { userId },\n    });\n\n    res.json({ success: true });\n  } catch (err) {\n    console.error('Error in recent plans route:', err);\n    res.status(500).json({ error: 'Failed to process request' });\n  }\n});\n\nexport default router;"],"version":3}