{"version":3,"names":["cov_vkaykmzaq","actualCoverage","fs","path","fileURLToPath","archiver","unzipper","S3Client","PutObjectCommand","GetObjectCommand","cron","__filename_backup","s","import","meta","url","__dirname_backup","dirname","s3","bucket","process","env","BACKUP_BUCKET","b","BACKUP_PROVIDER","region","AWS_REGION","getDbPath","f","DATABASE_URL","match","Error","resolve","cwd","getUploadsPath","join","createBackup","archive","chunks","on","d","push","db","file","name","basename","uploads","existsSync","directory","finalize","Buffer","concat","restoreBackup","data","dir","Open","buffer","entry","files","dest","replace","promises","mkdir","recursive","Promise","res","rej","stream","pipe","createWriteStream","saveBackup","key","Date","now","send","Bucket","Key","Body","backupDir","writeFile","loadBackup","startsWith","realKey","slice","length","chunk","from","readFile","runBackupJob","scheduleBackups","cronExpr","BACKUP_CRON","schedule"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/backupService.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport archiver from 'archiver';\nimport unzipper from 'unzipper';\nimport { S3Client, PutObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';\nimport cron from 'node-cron';\n\n// Get directory name in ES module\nconst __filename_backup = fileURLToPath(import.meta.url);\nconst __dirname_backup = path.dirname(__filename_backup);\n\nlet s3: S3Client | null = null;\nconst bucket = process.env.BACKUP_BUCKET;\nif (process.env.BACKUP_PROVIDER === 's3' && bucket) {\n  s3 = new S3Client({ region: process.env.AWS_REGION || 'us-east-1' });\n}\n\nfunction getDbPath() {\n  const url = process.env.DATABASE_URL || '';\n  const match = url.match(/file:(.*)/);\n  if (!match) {\n    throw new Error('DATABASE_URL must be sqlite');\n  }\n  return path.resolve(process.cwd(), match[1]);\n}\n\nfunction getUploadsPath() {\n  return path.join(__dirname_backup, '../uploads');\n}\n\n/** Create zip archive containing database and uploads */\nexport async function createBackup(): Promise<Buffer> {\n  const archive = archiver('zip');\n  const chunks: Buffer[] = [];\n  archive.on('data', (d: Buffer) => chunks.push(d));\n  const db = getDbPath();\n  archive.file(db, { name: path.basename(db) });\n  const uploads = getUploadsPath();\n  if (fs.existsSync(uploads)) {\n    archive.directory(uploads, 'uploads');\n  }\n  await archive.finalize();\n  return Buffer.concat(chunks);\n}\n\n/** Restore database and uploads from provided zip buffer */\nexport async function restoreBackup(data: Buffer): Promise<void> {\n  const dir = await unzipper.Open.buffer(data);\n  const db = getDbPath();\n  for (const entry of dir.files) {\n    const dest =\n      entry.path === path.basename(db)\n        ? db\n        : path.join(getUploadsPath(), entry.path.replace(/^uploads\\/?/, ''));\n    await fs.promises.mkdir(path.dirname(dest), { recursive: true });\n    await new Promise<void>((res, rej) => {\n      entry.stream().pipe(fs.createWriteStream(dest)).on('finish', res).on('error', rej);\n    });\n  }\n}\n\n/** Save backup buffer to configured provider */\nexport async function saveBackup(data: Buffer): Promise<string> {\n  const key = `backup-${Date.now()}.zip`;\n  if (s3 && bucket) {\n    await s3.send(new PutObjectCommand({ Bucket: bucket, Key: key, Body: data }));\n    return `s3://${bucket}/${key}`;\n  }\n  const backupDir = path.join(__dirname_backup, '../backups');\n  await fs.promises.mkdir(backupDir, { recursive: true });\n  const file = path.join(backupDir, key);\n  await fs.promises.writeFile(file, data);\n  return file;\n}\n\n/** Load backup buffer from provider */\nexport async function loadBackup(key: string): Promise<Buffer> {\n  if (s3 && bucket && key.startsWith('s3://')) {\n    const realKey = key.slice(`s3://${bucket}/`.length);\n    const res = await s3.send(new GetObjectCommand({ Bucket: bucket, Key: realKey }));\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const stream = res.Body as unknown as NodeJS.ReadableStream;\n    const chunks: Buffer[] = [];\n    for await (const chunk of stream) chunks.push(Buffer.from(chunk));\n    return Buffer.concat(chunks);\n  }\n  return fs.promises.readFile(key);\n}\n\n/** Create backup and store using provider */\nexport async function runBackupJob(): Promise<string> {\n  const data = await createBackup();\n  return saveBackup(data);\n}\n\n/** Schedule automatic backups using cron */\nexport function scheduleBackups() {\n  const cronExpr = process.env.BACKUP_CRON || '0 2 * * *';\n  cron.schedule(cronExpr, runBackupJob);\n}\n"],"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","ignoreList":[]}