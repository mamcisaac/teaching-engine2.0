{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts","mappings":"AAAA;;;GAGG;AAEH,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,GAAG,MAAM,cAAc,CAAC;AAE/B,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,mBAAmB,GAAG,CAAC,CAAC;AAC9B,MAAM,cAAc,GAAG,iEAAiE,CAAC;AAczF;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,MAAc,EACd,YAAoB,YAAY;IAEhC,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;IACtC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IAED,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,CAAC;IAC3B,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;AAClD,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,QAAgB;IACjD,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAC5C,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAC,QAAgB;IACrD,IAAI,QAAQ,CAAC,MAAM,GAAG,mBAAmB,EAAE,CAAC;QAC1C,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IAED,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IAED,iCAAiC;IACjC,MAAM,eAAe,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACzD,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;QACrD,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,KAAa;IAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;IACtC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAuB,CAAC;AACzD,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,KAAa,EACb,QAAgB,EAChB,MAAoB;IAEpB,qBAAqB;IACrB,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACxC,KAAK,EAAE,EAAE,KAAK,EAAE;KACjB,CAAC,CAAC;IAEH,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,CAAC,IAAI,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;QACxD,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAED,mBAAmB;IACnB,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC,kCAAkC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QACzD,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAED,iBAAiB;IACjB,MAAM,KAAK,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;IAE1D,+BAA+B;IAC/B,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,mBAAmB,EAAE,GAAG,IAAI,CAAC;IAErD,OAAO;QACL,IAAI,EAAE;YACJ,GAAG,mBAAmB;YACtB,EAAE,EAAE,mBAAmB,CAAC,EAAE,CAAC,QAAQ,EAAE;SAC1B;QACb,KAAK;KACN,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,IAA+C,EAC/C,kBAA0B;IAE1B,4BAA4B;IAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,6BAA6B;IAC7B,IAAI,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACxD,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IACvD,CAAC;IAED,+BAA+B;IAC/B,MAAM,eAAe,GAA6B;QAChD,IAAI,EAAE,CAAC,MAAM,CAAC;QACd,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;QAC5B,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,CAAC;KACnD,CAAC;IAEF,MAAM,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;IAC/D,OAAO,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;AACtD,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts"],"sourcesContent":["/**\n * Authentication Service\n * Core authentication and authorization logic\n */\n\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@teaching-engine/database';\nimport logger from '@/logger';\n\nconst SALT_ROUNDS = 10;\nconst TOKEN_EXPIRY = '7d';\nconst PASSWORD_MIN_LENGTH = 8;\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResult {\n  user: AuthUser;\n  token: string;\n}\n\n/**\n * Generate JWT token for user\n */\nexport async function generateAuthToken(\n  userId: string,\n  expiresIn: string = TOKEN_EXPIRY\n): Promise<string> {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required');\n  }\n\n  const payload = { userId };\n  return jwt.sign(payload, secret, { expiresIn });\n}\n\n/**\n * Hash password with bcrypt\n */\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\n/**\n * Validate password strength\n */\nexport async function validatePassword(password: string): Promise<boolean> {\n  if (password.length < PASSWORD_MIN_LENGTH) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  if (!PASSWORD_REGEX.test(password)) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  // Check against common passwords\n  const commonPasswords = ['password', '123456', 'qwerty'];\n  if (commonPasswords.includes(password.toLowerCase())) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  return true;\n}\n\n/**\n * Verify JWT token\n */\nexport async function verifyToken(token: string): Promise<{ userId: string }> {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required');\n  }\n\n  return jwt.verify(token, secret) as { userId: string };\n}\n\n/**\n * Authenticate user with email and password\n */\nexport async function authenticate(\n  email: string,\n  password: string,\n  prisma: PrismaClient\n): Promise<AuthResult> {\n  // Find user by email\n  const user = await prisma.user.findUnique({\n    where: { email },\n  });\n\n  if (!user) {\n    logger.warn(`Failed login attempt for email: ${email}`);\n    throw new Error('Invalid credentials');\n  }\n\n  // Compare password\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  if (!isValidPassword) {\n    logger.warn(`Failed login attempt for user: ${user.id}`);\n    throw new Error('Invalid credentials');\n  }\n\n  // Generate token\n  const token = await generateAuthToken(user.id.toString());\n\n  // Return user without password\n  const { password: _, ...userWithoutPassword } = user;\n  \n  return {\n    user: {\n      ...userWithoutPassword,\n      id: userWithoutPassword.id.toString()\n    } as AuthUser,\n    token,\n  };\n}\n\n/**\n * Check user permissions\n */\nexport async function checkPermissions(\n  user: { role?: string; permissions?: string[] },\n  requiredPermission: string\n): Promise<boolean> {\n  // Admin has all permissions\n  if (user.role === 'ADMIN') {\n    return true;\n  }\n\n  // Check specific permissions\n  if (user.permissions && Array.isArray(user.permissions)) {\n    return user.permissions.includes(requiredPermission);\n  }\n\n  // Check role-based permissions\n  const rolePermissions: Record<string, string[]> = {\n    USER: ['read'],\n    MODERATOR: ['read', 'write'],\n    ADMIN: ['read', 'write', 'delete', 'admin.access'],\n  };\n\n  const userPermissions = rolePermissions[user.role || ''] || [];\n  return userPermissions.includes(requiredPermission);\n}"],"version":3}