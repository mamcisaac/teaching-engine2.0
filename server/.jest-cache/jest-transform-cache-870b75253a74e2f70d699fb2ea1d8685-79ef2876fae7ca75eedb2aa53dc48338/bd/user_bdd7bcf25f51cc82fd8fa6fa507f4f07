f140e785053cf5cfb8a57f5f40d924c2
/* istanbul ignore next */
function cov_i2hl3bysc() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts";
  var hash = "35f441f67e816ee178014bda0c749b033e9109b7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 15,
          column: 2
        }
      },
      "1": {
        start: {
          line: 17,
          column: 19
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "2": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 34,
          column: 8
        }
      },
      "3": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 34
        }
      },
      "4": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 29,
          column: 10
        }
      },
      "5": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "6": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 69
        }
      },
      "7": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 23
        }
      },
      "8": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 61,
          column: 8
        }
      },
      "9": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "10": {
        start: {
          line: 38,
          column: 49
        },
        end: {
          line: 38,
          column: 85
        }
      },
      "11": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "12": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "13": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "14": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "15": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 84
        }
      },
      "16": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "17": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 84
        }
      },
      "18": {
        start: {
          line: 54,
          column: 31
        },
        end: {
          line: 54,
          column: 62
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 63
        }
      },
      "21": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 81,
          column: 8
        }
      },
      "22": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 39
        }
      },
      "23": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "24": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 64
        }
      },
      "25": {
        start: {
          line: 68,
          column: 38
        },
        end: {
          line: 68,
          column: 46
        }
      },
      "26": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 70,
          column: 58
        }
      },
      "27": {
        start: {
          line: 71,
          column: 21
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "28": {
        start: {
          line: 79,
          column: 56
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 50
        }
      },
      "30": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 99,
          column: 8
        }
      },
      "31": {
        start: {
          line: 84,
          column: 21
        },
        end: {
          line: 84,
          column: 29
        }
      },
      "32": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "33": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 94
        }
      },
      "34": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "35": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 98
        }
      },
      "36": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 95
        }
      },
      "38": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "39": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 100
        }
      },
      "40": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 34
        }
      },
      "41": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "userRoutes",
        decl: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 26
          }
        },
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 19,
            column: 41
          }
        },
        loc: {
          start: {
            line: 19,
            column: 60
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 41
          },
          end: {
            line: 36,
            column: 42
          }
        },
        loc: {
          start: {
            line: 36,
            column: 61
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 63,
            column: 40
          },
          end: {
            line: 63,
            column: 41
          }
        },
        loc: {
          start: {
            line: 63,
            column: 60
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 83,
            column: 47
          },
          end: {
            line: 83,
            column: 48
          }
        },
        loc: {
          start: {
            line: 83,
            column: 67
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 22
          },
          end: {
            line: 75,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 22
          },
          end: {
            line: 75,
            column: 26
          }
        }, {
          start: {
            line: 75,
            column: 30
          },
          end: {
            line: 75,
            column: 36
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 34
          }
        }, {
          start: {
            line: 86,
            column: 38
          },
          end: {
            line: 86,
            column: 66
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 37
          }
        }, {
          start: {
            line: 89,
            column: 41
          },
          end: {
            line: 89,
            column: 73
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 35
          }
        }, {
          start: {
            line: 92,
            column: 39
          },
          end: {
            line: 92,
            column: 64
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 39
          }
        }, {
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 95,
            column: 76
          }
        }],
        line: 95
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts"],
      sourcesContent: ["/**\n * User Routes\n * Handles user profile and account management\n */\n\nimport { Router, Request } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport bcrypt from 'bcryptjs';\nimport { asyncHandler } from '@/middleware/errorHandler';\n// Authentication middleware available if needed\nimport { validatePassword, hashPassword } from '@/services/authService';\n\n// Use global Express Request type with user: { id: number; email: string }\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(1),\n  newPassword: z.string().min(8),\n});\n\nexport function userRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Get user profile\n  router.get(\n    '/profile',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          role: true,\n        },\n      });\n\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      res.json(user);\n    }),\n  );\n\n  // Update password\n  router.put(\n    '/password',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { currentPassword, newPassword } = updatePasswordSchema.parse(req.body);\n\n      // Validate new password\n      await validatePassword(newPassword);\n\n      // Get user with password\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Verify current password\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: 'Current password is incorrect' });\n      }\n\n      // Hash new password\n      const hashedPassword = await hashPassword(newPassword);\n\n      // Update password\n      await prisma.user.update({\n        where: { id: userId },\n        data: { password: hashedPassword },\n      });\n\n      res.json({ message: 'Password updated successfully' });\n    }),\n  );\n\n  // Create user (admin only)\n  router.post(\n    '/create',\n    asyncHandler(async (req, res) => {\n      const userRole = (req as Request & { user?: { role?: string } }).user?.role;\n\n      if (userRole !== 'ADMIN') {\n        return res.status(403).json({ error: 'Forbidden' });\n      }\n\n      const { email, name, role } = req.body;\n\n      // Sanitize input\n      const sanitizedName = name.replace(/<[^>]*>/g, ''); // Remove HTML tags\n\n      const user = await prisma.user.create({\n        data: {\n          email,\n          name: sanitizedName,\n          role: role || 'USER',\n          password: await hashPassword('TempPassword123!'), // Temporary password\n        },\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    }),\n  );\n\n  // Data validation endpoint\n  router.post(\n    '/data/validate',\n    asyncHandler(async (req, res) => {\n      const data = req.body;\n\n      // Type validation\n      if (data.age !== undefined && typeof data.age !== 'number') {\n        return res.status(400).json({ error: 'Invalid data type: age must be a number' });\n      }\n\n      if (data.active !== undefined && typeof data.active !== 'boolean') {\n        return res.status(400).json({ error: 'Invalid data type: active must be a boolean' });\n      }\n\n      if (data.tags !== undefined && !Array.isArray(data.tags)) {\n        return res.status(400).json({ error: 'Invalid data type: tags must be an array' });\n      }\n\n      if (data.metadata !== undefined && typeof data.metadata !== 'object') {\n        return res.status(400).json({ error: 'Invalid data type: metadata must be an object' });\n      }\n\n      res.json({ valid: true });\n    }),\n  );\n\n  return router;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "35f441f67e816ee178014bda0c749b033e9109b7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_i2hl3bysc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_i2hl3bysc();
/**
 * User Routes
 * Handles user profile and account management
 */
import { Router } from 'express';
import { z } from 'zod';
import bcrypt from 'bcryptjs';
import { asyncHandler } from '@/middleware/errorHandler';
// Authentication middleware available if needed
import { validatePassword, hashPassword } from '@/services/authService';
// Use global Express Request type with user: { id: number; email: string }
const updatePasswordSchema =
/* istanbul ignore next */
(cov_i2hl3bysc().s[0]++, z.object({
  currentPassword: z.string().min(1),
  newPassword: z.string().min(8)
}));
export function userRoutes(prisma) {
  /* istanbul ignore next */
  cov_i2hl3bysc().f[0]++;
  const router =
  /* istanbul ignore next */
  (cov_i2hl3bysc().s[1]++, Router());
  // Get user profile
  /* istanbul ignore next */
  cov_i2hl3bysc().s[2]++;
  router.get('/profile', asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_i2hl3bysc().f[1]++;
    const userId =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[3]++, req.user.id);
    const user =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[4]++, await prisma.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true
      }
    }));
    /* istanbul ignore next */
    cov_i2hl3bysc().s[5]++;
    if (!user) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[0][0]++;
      cov_i2hl3bysc().s[6]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[0][1]++;
    }
    cov_i2hl3bysc().s[7]++;
    res.json(user);
  }));
  // Update password
  /* istanbul ignore next */
  cov_i2hl3bysc().s[8]++;
  router.put('/password', asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_i2hl3bysc().f[2]++;
    const userId =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[9]++, req.user.id);
    const {
      currentPassword,
      newPassword
    } =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[10]++, updatePasswordSchema.parse(req.body));
    // Validate new password
    /* istanbul ignore next */
    cov_i2hl3bysc().s[11]++;
    await validatePassword(newPassword);
    // Get user with password
    const user =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[12]++, await prisma.user.findUnique({
      where: {
        id: userId
      }
    }));
    /* istanbul ignore next */
    cov_i2hl3bysc().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[1][0]++;
      cov_i2hl3bysc().s[14]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[1][1]++;
    }
    // Verify current password
    const isValidPassword =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[15]++, await bcrypt.compare(currentPassword, user.password));
    /* istanbul ignore next */
    cov_i2hl3bysc().s[16]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[2][0]++;
      cov_i2hl3bysc().s[17]++;
      return res.status(401).json({
        error: 'Current password is incorrect'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[2][1]++;
    }
    // Hash new password
    const hashedPassword =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[18]++, await hashPassword(newPassword));
    // Update password
    /* istanbul ignore next */
    cov_i2hl3bysc().s[19]++;
    await prisma.user.update({
      where: {
        id: userId
      },
      data: {
        password: hashedPassword
      }
    });
    /* istanbul ignore next */
    cov_i2hl3bysc().s[20]++;
    res.json({
      message: 'Password updated successfully'
    });
  }));
  // Create user (admin only)
  /* istanbul ignore next */
  cov_i2hl3bysc().s[21]++;
  router.post('/create', asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_i2hl3bysc().f[3]++;
    const userRole =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[22]++, req.user?.role);
    /* istanbul ignore next */
    cov_i2hl3bysc().s[23]++;
    if (userRole !== 'ADMIN') {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[3][0]++;
      cov_i2hl3bysc().s[24]++;
      return res.status(403).json({
        error: 'Forbidden'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[3][1]++;
    }
    const {
      email,
      name,
      role
    } =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[25]++, req.body);
    // Sanitize input
    const sanitizedName =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[26]++, name.replace(/<[^>]*>/g, '')); // Remove HTML tags
    const user =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[27]++, await prisma.user.create({
      data: {
        email,
        name: sanitizedName,
        role:
        /* istanbul ignore next */
        (cov_i2hl3bysc().b[4][0]++, role) ||
        /* istanbul ignore next */
        (cov_i2hl3bysc().b[4][1]++, 'USER'),
        password: await hashPassword('TempPassword123!') // Temporary password
      }
    }));
    const {
      password: _,
      ...userWithoutPassword
    } =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[28]++, user);
    /* istanbul ignore next */
    cov_i2hl3bysc().s[29]++;
    res.status(201).json(userWithoutPassword);
  }));
  // Data validation endpoint
  /* istanbul ignore next */
  cov_i2hl3bysc().s[30]++;
  router.post('/data/validate', asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_i2hl3bysc().f[4]++;
    const data =
    /* istanbul ignore next */
    (cov_i2hl3bysc().s[31]++, req.body);
    // Type validation
    /* istanbul ignore next */
    cov_i2hl3bysc().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[6][0]++, data.age !== undefined) &&
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[6][1]++, typeof data.age !== 'number')) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[5][0]++;
      cov_i2hl3bysc().s[33]++;
      return res.status(400).json({
        error: 'Invalid data type: age must be a number'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[5][1]++;
    }
    cov_i2hl3bysc().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[8][0]++, data.active !== undefined) &&
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[8][1]++, typeof data.active !== 'boolean')) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[7][0]++;
      cov_i2hl3bysc().s[35]++;
      return res.status(400).json({
        error: 'Invalid data type: active must be a boolean'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[7][1]++;
    }
    cov_i2hl3bysc().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[10][0]++, data.tags !== undefined) &&
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[10][1]++, !Array.isArray(data.tags))) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[9][0]++;
      cov_i2hl3bysc().s[37]++;
      return res.status(400).json({
        error: 'Invalid data type: tags must be an array'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[9][1]++;
    }
    cov_i2hl3bysc().s[38]++;
    if (
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[12][0]++, data.metadata !== undefined) &&
    /* istanbul ignore next */
    (cov_i2hl3bysc().b[12][1]++, typeof data.metadata !== 'object')) {
      /* istanbul ignore next */
      cov_i2hl3bysc().b[11][0]++;
      cov_i2hl3bysc().s[39]++;
      return res.status(400).json({
        error: 'Invalid data type: metadata must be an object'
      });
    } else
    /* istanbul ignore next */
    {
      cov_i2hl3bysc().b[11][1]++;
    }
    cov_i2hl3bysc().s[40]++;
    res.json({
      valid: true
    });
  }));
  /* istanbul ignore next */
  cov_i2hl3bysc().s[41]++;
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,