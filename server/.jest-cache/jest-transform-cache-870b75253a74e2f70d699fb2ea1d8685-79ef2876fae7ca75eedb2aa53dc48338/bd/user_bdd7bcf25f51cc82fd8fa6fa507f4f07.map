{"version":3,"names":["cov_i2hl3bysc","actualCoverage","Router","z","bcrypt","asyncHandler","validatePassword","hashPassword","updatePasswordSchema","s","object","currentPassword","string","min","newPassword","userRoutes","prisma","f","router","get","req","res","userId","user","id","findUnique","where","select","email","name","role","b","status","json","error","put","parse","body","isValidPassword","compare","password","hashedPassword","update","data","message","post","userRole","sanitizedName","replace","create","_","userWithoutPassword","age","undefined","active","tags","Array","isArray","metadata","valid"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts"],"sourcesContent":["/**\n * User Routes\n * Handles user profile and account management\n */\n\nimport { Router, Request } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport bcrypt from 'bcryptjs';\nimport { asyncHandler } from '@/middleware/errorHandler';\n// Authentication middleware available if needed\nimport { validatePassword, hashPassword } from '@/services/authService';\n\n// Use global Express Request type with user: { id: number; email: string }\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(1),\n  newPassword: z.string().min(8),\n});\n\nexport function userRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Get user profile\n  router.get(\n    '/profile',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          role: true,\n        },\n      });\n\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      res.json(user);\n    }),\n  );\n\n  // Update password\n  router.put(\n    '/password',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { currentPassword, newPassword } = updatePasswordSchema.parse(req.body);\n\n      // Validate new password\n      await validatePassword(newPassword);\n\n      // Get user with password\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Verify current password\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: 'Current password is incorrect' });\n      }\n\n      // Hash new password\n      const hashedPassword = await hashPassword(newPassword);\n\n      // Update password\n      await prisma.user.update({\n        where: { id: userId },\n        data: { password: hashedPassword },\n      });\n\n      res.json({ message: 'Password updated successfully' });\n    }),\n  );\n\n  // Create user (admin only)\n  router.post(\n    '/create',\n    asyncHandler(async (req, res) => {\n      const userRole = (req as Request & { user?: { role?: string } }).user?.role;\n\n      if (userRole !== 'ADMIN') {\n        return res.status(403).json({ error: 'Forbidden' });\n      }\n\n      const { email, name, role } = req.body;\n\n      // Sanitize input\n      const sanitizedName = name.replace(/<[^>]*>/g, ''); // Remove HTML tags\n\n      const user = await prisma.user.create({\n        data: {\n          email,\n          name: sanitizedName,\n          role: role || 'USER',\n          password: await hashPassword('TempPassword123!'), // Temporary password\n        },\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    }),\n  );\n\n  // Data validation endpoint\n  router.post(\n    '/data/validate',\n    asyncHandler(async (req, res) => {\n      const data = req.body;\n\n      // Type validation\n      if (data.age !== undefined && typeof data.age !== 'number') {\n        return res.status(400).json({ error: 'Invalid data type: age must be a number' });\n      }\n\n      if (data.active !== undefined && typeof data.active !== 'boolean') {\n        return res.status(400).json({ error: 'Invalid data type: active must be a boolean' });\n      }\n\n      if (data.tags !== undefined && !Array.isArray(data.tags)) {\n        return res.status(400).json({ error: 'Invalid data type: tags must be an array' });\n      }\n\n      if (data.metadata !== undefined && typeof data.metadata !== 'object') {\n        return res.status(400).json({ error: 'Invalid data type: metadata must be an object' });\n      }\n\n      res.json({ valid: true });\n    }),\n  );\n\n  return router;\n}\n"],"mappingsoBM;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AApBN;;;;AAKA,SAASE,MAAM,QAAiB,SAAS;AAEzC,SAASC,CAAC,QAAQ,KAAK;AACvB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,YAAY,QAAQ,2BAA2B;AACxD;AACA,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,wBAAwB;AAEvE;AAEA,MAAMC,oBAAoB;AAAA;AAAA,CAAAR,aAAA,GAAAS,CAAA,OAAGN,CAAC,CAACO,MAAM,CAAC;EACpCC,eAAe,EAAER,CAAC,CAACS,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,CAAC;EAClCC,WAAW,EAAEX,CAAC,CAACS,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC;CAC9B,CAAC;AAEF,OAAM,SAAUE,UAAUA,CAACC,MAAoB;EAAA;EAAAhB,aAAA,GAAAiB,CAAA;EAC7C,MAAMC,MAAM;EAAA;EAAA,CAAAlB,aAAA,GAAAS,CAAA,OAAGP,MAAM,EAAE;EAEvB;EAAA;EAAAF,aAAA,GAAAS,CAAA;EACAS,MAAM,CAACC,GAAG,CACR,UAAU,EACVd,YAAY,CAAC,OAAOe,GAAG,EAAEC,GAAG,KAAI;IAAA;IAAArB,aAAA,GAAAiB,CAAA;IAC9B,MAAMK,MAAM;IAAA;IAAA,CAAAtB,aAAA,GAAAS,CAAA,OAAGW,GAAG,CAACG,IAAK,CAACC,EAAE;IAE3B,MAAMD,IAAI;IAAA;IAAA,CAAAvB,aAAA,GAAAS,CAAA,OAAG,MAAMO,MAAM,CAACO,IAAI,CAACE,UAAU,CAAC;MACxCC,KAAK,EAAE;QAAEF,EAAE,EAAEF;MAAM,CAAE;MACrBK,MAAM,EAAE;QACNH,EAAE,EAAE,IAAI;QACRI,KAAK,EAAE,IAAI;QACXC,IAAI,EAAE,IAAI;QACVC,IAAI,EAAE;;KAET,CAAC;IAAC;IAAA9B,aAAA,GAAAS,CAAA;IAEH,IAAI,CAACc,IAAI,EAAE;MAAA;MAAAvB,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACT,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAgB,CAAE,CAAC;IAC1D,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAS,CAAA;IAEDY,GAAG,CAACY,IAAI,CAACV,IAAI,CAAC;EAChB,CAAC,CAAC,CACH;EAED;EAAA;EAAAvB,aAAA,GAAAS,CAAA;EACAS,MAAM,CAACiB,GAAG,CACR,WAAW,EACX9B,YAAY,CAAC,OAAOe,GAAG,EAAEC,GAAG,KAAI;IAAA;IAAArB,aAAA,GAAAiB,CAAA;IAC9B,MAAMK,MAAM;IAAA;IAAA,CAAAtB,aAAA,GAAAS,CAAA,OAAGW,GAAG,CAACG,IAAK,CAACC,EAAE;IAC3B,MAAM;MAAEb,eAAe;MAAEG;IAAW,CAAE;IAAA;IAAA,CAAAd,aAAA,GAAAS,CAAA,QAAGD,oBAAoB,CAAC4B,KAAK,CAAChB,GAAG,CAACiB,IAAI,CAAC;IAE7E;IAAA;IAAArC,aAAA,GAAAS,CAAA;IACA,MAAMH,gBAAgB,CAACQ,WAAW,CAAC;IAEnC;IACA,MAAMS,IAAI;IAAA;IAAA,CAAAvB,aAAA,GAAAS,CAAA,QAAG,MAAMO,MAAM,CAACO,IAAI,CAACE,UAAU,CAAC;MACxCC,KAAK,EAAE;QAAEF,EAAE,EAAEF;MAAM;KACpB,CAAC;IAAC;IAAAtB,aAAA,GAAAS,CAAA;IAEH,IAAI,CAACc,IAAI,EAAE;MAAA;MAAAvB,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACT,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAgB,CAAE,CAAC;IAC1D,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAED;IACA,MAAMO,eAAe;IAAA;IAAA,CAAAtC,aAAA,GAAAS,CAAA,QAAG,MAAML,MAAM,CAACmC,OAAO,CAAC5B,eAAe,EAAEY,IAAI,CAACiB,QAAQ,CAAC;IAAC;IAAAxC,aAAA,GAAAS,CAAA;IAC7E,IAAI,CAAC6B,eAAe,EAAE;MAAA;MAAAtC,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACpB,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA+B,CAAE,CAAC;IACzE,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAED;IACA,MAAMU,cAAc;IAAA;IAAA,CAAAzC,aAAA,GAAAS,CAAA,QAAG,MAAMF,YAAY,CAACO,WAAW,CAAC;IAEtD;IAAA;IAAAd,aAAA,GAAAS,CAAA;IACA,MAAMO,MAAM,CAACO,IAAI,CAACmB,MAAM,CAAC;MACvBhB,KAAK,EAAE;QAAEF,EAAE,EAAEF;MAAM,CAAE;MACrBqB,IAAI,EAAE;QAAEH,QAAQ,EAAEC;MAAc;KACjC,CAAC;IAAC;IAAAzC,aAAA,GAAAS,CAAA;IAEHY,GAAG,CAACY,IAAI,CAAC;MAAEW,OAAO,EAAE;IAA+B,CAAE,CAAC;EACxD,CAAC,CAAC,CACH;EAED;EAAA;EAAA5C,aAAA,GAAAS,CAAA;EACAS,MAAM,CAAC2B,IAAI,CACT,SAAS,EACTxC,YAAY,CAAC,OAAOe,GAAG,EAAEC,GAAG,KAAI;IAAA;IAAArB,aAAA,GAAAiB,CAAA;IAC9B,MAAM6B,QAAQ;IAAA;IAAA,CAAA9C,aAAA,GAAAS,CAAA,QAAIW,GAA8C,CAACG,IAAI,EAAEO,IAAI;IAAC;IAAA9B,aAAA,GAAAS,CAAA;IAE5E,IAAIqC,QAAQ,KAAK,OAAO,EAAE;MAAA;MAAA9C,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACxB,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAW,CAAE,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAED,MAAM;MAAEH,KAAK;MAAEC,IAAI;MAAEC;IAAI,CAAE;IAAA;IAAA,CAAA9B,aAAA,GAAAS,CAAA,QAAGW,GAAG,CAACiB,IAAI;IAEtC;IACA,MAAMU,aAAa;IAAA;IAAA,CAAA/C,aAAA,GAAAS,CAAA,QAAGoB,IAAI,CAACmB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC;IAEpD,MAAMzB,IAAI;IAAA;IAAA,CAAAvB,aAAA,GAAAS,CAAA,QAAG,MAAMO,MAAM,CAACO,IAAI,CAAC0B,MAAM,CAAC;MACpCN,IAAI,EAAE;QACJf,KAAK;QACLC,IAAI,EAAEkB,aAAa;QACnBjB,IAAI;QAAE;QAAA,CAAA9B,aAAA,GAAA+B,CAAA,UAAAD,IAAI;QAAA;QAAA,CAAA9B,aAAA,GAAA+B,CAAA,UAAI,MAAM;QACpBS,QAAQ,EAAE,MAAMjC,YAAY,CAAC,kBAAkB,CAAC,CAAE;;KAErD,CAAC;IAEF,MAAM;MAAEiC,QAAQ,EAAEU,CAAC;MAAE,GAAGC;IAAmB,CAAE;IAAA;IAAA,CAAAnD,aAAA,GAAAS,CAAA,QAAGc,IAAI;IAAC;IAAAvB,aAAA,GAAAS,CAAA;IACrDY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACkB,mBAAmB,CAAC;EAC3C,CAAC,CAAC,CACH;EAED;EAAA;EAAAnD,aAAA,GAAAS,CAAA;EACAS,MAAM,CAAC2B,IAAI,CACT,gBAAgB,EAChBxC,YAAY,CAAC,OAAOe,GAAG,EAAEC,GAAG,KAAI;IAAA;IAAArB,aAAA,GAAAiB,CAAA;IAC9B,MAAM0B,IAAI;IAAA;IAAA,CAAA3C,aAAA,GAAAS,CAAA,QAAGW,GAAG,CAACiB,IAAI;IAErB;IAAA;IAAArC,aAAA,GAAAS,CAAA;IACA;IAAI;IAAA,CAAAT,aAAA,GAAA+B,CAAA,UAAAY,IAAI,CAACS,GAAG,KAAKC,SAAS;IAAA;IAAA,CAAArD,aAAA,GAAA+B,CAAA,UAAI,OAAOY,IAAI,CAACS,GAAG,KAAK,QAAQ,GAAE;MAAA;MAAApD,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MAC1D,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAyC,CAAE,CAAC;IACnF,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAS,CAAA;IAED;IAAI;IAAA,CAAAT,aAAA,GAAA+B,CAAA,UAAAY,IAAI,CAACW,MAAM,KAAKD,SAAS;IAAA;IAAA,CAAArD,aAAA,GAAA+B,CAAA,UAAI,OAAOY,IAAI,CAACW,MAAM,KAAK,SAAS,GAAE;MAAA;MAAAtD,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACjE,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA6C,CAAE,CAAC;IACvF,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAS,CAAA;IAED;IAAI;IAAA,CAAAT,aAAA,GAAA+B,CAAA,WAAAY,IAAI,CAACY,IAAI,KAAKF,SAAS;IAAA;IAAA,CAAArD,aAAA,GAAA+B,CAAA,WAAI,CAACyB,KAAK,CAACC,OAAO,CAACd,IAAI,CAACY,IAAI,CAAC,GAAE;MAAA;MAAAvD,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACxD,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA0C,CAAE,CAAC;IACpF,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAS,CAAA;IAED;IAAI;IAAA,CAAAT,aAAA,GAAA+B,CAAA,WAAAY,IAAI,CAACe,QAAQ,KAAKL,SAAS;IAAA;IAAA,CAAArD,aAAA,GAAA+B,CAAA,WAAI,OAAOY,IAAI,CAACe,QAAQ,KAAK,QAAQ,GAAE;MAAA;MAAA1D,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAS,CAAA;MACpE,OAAOY,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA+C,CAAE,CAAC;IACzF,CAAC;IAAA;IAAA;MAAAlC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAS,CAAA;IAEDY,GAAG,CAACY,IAAI,CAAC;MAAE0B,KAAK,EAAE;IAAI,CAAE,CAAC;EAC3B,CAAC,CAAC,CACH;EAAC;EAAA3D,aAAA,GAAAS,CAAA;EAEF,OAAOS,MAAM;AACf","ignoreList":[]}