{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts","mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,MAAM,MAAM,WAAW,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACtC,IAAI,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAExC,yBAAyB;QACzB,eAAe,CAAC,QAAQ,CAAC;YACvB,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,YAAY;YACtB,YAAY,EAAE,EAAE;YAChB,SAAS,EAAE,IAAI;YACf,mBAAmB,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,YAAY;SACjD,CAAC,CAAC;QAEH,eAAe,CAAC,QAAQ,CAAC;YACvB,IAAI,EAAE,kBAAkB;YACxB,QAAQ,EAAE,gBAAgB;YAC1B,YAAY,EAAE,CAAC,cAAc,CAAC;YAC9B,SAAS,EAAE,IAAI;YACf,mBAAmB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;SACnD,CAAC,CAAC;QAEH,eAAe,CAAC,QAAQ,CAAC;YACvB,IAAI,EAAE,yBAAyB;YAC/B,QAAQ,EAAE,uBAAuB;YACjC,YAAY,EAAE,CAAC,kBAAkB,CAAC;YAClC,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,eAAe,CAAC,QAAQ,CAAC;YACvB,IAAI,EAAE,mBAAmB;YACzB,QAAQ,EAAE,iBAAiB;YAC3B,YAAY,EAAE,CAAC,kBAAkB,CAAC;YAClC,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAIH,8CAA8C;QAC9C,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,MAAM,eAAe,CAAC,aAAa,EAAE,CAAC;QAEtE,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,oCAAoC,CAAC,CAAC;YAC/D,MAAM,IAAI,KAAK,CACb,kCAAkC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAChF,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,EAAE,uCAAuC,CAAC,CAAC;QAEtE,4BAA4B;QAC5B,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,eAAe,EAAE,CAAC;QAC7D,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAEzD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACzB,MAAM,CAAC,IAAI,CACT,EAAE,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,EAClD,wCAAwC,CACzC,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,+BAA+B,CAAC,CAAC;QACzD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAEzC,MAAM,eAAe,CAAC,QAAQ,EAAE,CAAC;QAEjC,6CAA6C;QAC7C,YAAY,CAAC,OAAO,EAAE,CAAC;QAEvB,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;IACrD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,+BAA+B,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IAKpC,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,eAAe,EAAE,CAAC;IAC7D,MAAM,OAAO,GAAG,eAAe,CAAC,aAAa,EAAE,CAAC;IAEhD,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IAErD,OAAO;QACL,OAAO;QACP,QAAQ,EAAE,YAAY;QACtB,OAAO;KACR,CAAC;AACJ,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/initializeServices.ts"],"sourcesContent":["import { serviceRegistry } from './ServiceRegistry';\nimport { embeddingService } from './embeddingService';\nimport { curriculumImportService } from './curriculumImportService';\nimport { clusteringService } from './clusteringService';\nimport { cacheService } from './CacheService';\nimport logger from '../logger';\n\n/**\n * Initialize and register all services with the service registry\n */\nexport async function initializeServices(): Promise<void> {\n  try {\n    logger.info('Initializing services...');\n\n    // Register core services\n    serviceRegistry.register({\n      name: 'CacheService',\n      instance: cacheService,\n      dependencies: [],\n      singleton: true,\n      healthCheckInterval: 5 * 60 * 1000, // 5 minutes\n    });\n\n    serviceRegistry.register({\n      name: 'EmbeddingService',\n      instance: embeddingService,\n      dependencies: ['CacheService'],\n      singleton: true,\n      healthCheckInterval: 10 * 60 * 1000, // 10 minutes\n    });\n\n    serviceRegistry.register({\n      name: 'CurriculumImportService',\n      instance: curriculumImportService,\n      dependencies: ['EmbeddingService'],\n      singleton: true,\n    });\n\n    serviceRegistry.register({\n      name: 'ClusteringService',\n      instance: clusteringService,\n      dependencies: ['EmbeddingService'],\n      singleton: true,\n    });\n\n\n\n    // Initialize all services in dependency order\n    const { initialized, failed } = await serviceRegistry.initializeAll();\n\n    if (failed.length > 0) {\n      logger.error({ failed }, 'Some services failed to initialize');\n      throw new Error(\n        `Failed to initialize services: ${failed.map((f) => f.serviceName).join(', ')}`,\n      );\n    }\n\n    logger.info({ initialized }, 'All services initialized successfully');\n\n    // Log initial health status\n    const healthStatus = await serviceRegistry.getHealthStatus();\n    const unhealthy = healthStatus.filter((s) => !s.healthy);\n\n    if (unhealthy.length > 0) {\n      logger.warn(\n        { unhealthy: unhealthy.map((s) => s.serviceName) },\n        'Some services are unhealthy at startup',\n      );\n    }\n  } catch (error) {\n    logger.error({ error }, 'Failed to initialize services');\n    throw error;\n  }\n}\n\n/**\n * Gracefully shutdown all services\n */\nexport async function shutdownServices(): Promise<void> {\n  try {\n    logger.info('Shutting down services...');\n\n    await serviceRegistry.shutdown();\n\n    // Cleanup any resources specific to services\n    cacheService.destroy();\n\n    logger.info('All services shut down successfully');\n  } catch (error) {\n    logger.error({ error }, 'Error during service shutdown');\n  }\n}\n\n/**\n * Get service health status for monitoring\n */\nexport async function getServiceHealth(): Promise<{\n  healthy: boolean;\n  services: unknown[];\n  metrics: unknown[];\n}> {\n  const healthStatus = await serviceRegistry.getHealthStatus();\n  const metrics = serviceRegistry.getAllMetrics();\n\n  const healthy = healthStatus.every((s) => s.healthy);\n\n  return {\n    healthy,\n    services: healthStatus,\n    metrics,\n  };\n}\n"],"version":3}