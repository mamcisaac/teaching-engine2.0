{"version":3,"names":["cov_2hwe6ahvy7","actualCoverage","Router","z","validate","cuidSchema","batchProcessingService","router","s","unitPlanBatchSchema","object","title","string","min","max","longRangePlanId","description","optional","bigIdeas","essentialQuestions","array","startDate","datetime","endDate","estimatedHours","number","int","positive","assessmentPlan","successCriteria","expectationIds","crossCurricularConnections","learningSkills","culminatingTask","keyVocabulary","priorKnowledge","parentCommunicationPlan","fieldTripsAndGuestSpeakers","differentiationStrategies","forStruggling","forAdvanced","forELL","forIEP","indigenousPerspectives","environmentalEducation","socialJusticeConnections","technologyIntegration","communityConnections","lessonPlanBatchSchema","unitPlanId","date","duration","mindsOn","action","consolidation","learningGoals","materials","grouping","accommodations","modifications","extensions","assessmentType","enum","assessmentNotes","isSubFriendly","boolean","default","subNotes","batchOperationSchema","operations","type","data","unknown","options","batchSize","maxRetries","retryDelay","post","req","res","next","f","userId","user","id","b","status","json","error","_options","body","validatedOperations","operation","validatedData","unitResult","safeParse","success","details","errors","lessonResult","push","validation","validateBatch","map","op","createdAt","Date","updatedAt","valid","warnings","operationIds","addOperations","toString","message","count","length","result","processBatch","successful","failed","totalProcessed","includes","get","getBatchStatus","isProcessing","queueLength","progress","retryCount","delete","clearCompletedOperations","health","healthCheck","healthy"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/batch-processing.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { z } from 'zod';\nimport { validate, cuidSchema } from '../validation';\nimport { batchProcessingService } from '../services/batchProcessingService';\n\nconst router = Router();\n\n// Validation schemas for batch operations\nconst unitPlanBatchSchema = z.object({\n  title: z.string().min(1).max(255),\n  longRangePlanId: cuidSchema(),\n  description: z.string().max(2000).optional(),\n  bigIdeas: z.string().max(2000).optional(),\n  essentialQuestions: z.array(z.string().max(500)).max(20).optional(),\n  startDate: z.string().datetime(),\n  endDate: z.string().datetime(),\n  estimatedHours: z.number().int().positive().max(1000).optional(),\n  assessmentPlan: z.string().max(2000).optional(),\n  successCriteria: z.array(z.string().max(500)).max(20).optional(),\n  expectationIds: z.array(cuidSchema()).max(50).min(1),\n  crossCurricularConnections: z.string().max(1000).optional(),\n  learningSkills: z.array(z.string().max(100)).max(10).optional(),\n  culminatingTask: z.string().max(1000).optional(),\n  keyVocabulary: z.array(z.string().max(100)).max(30).optional(),\n  priorKnowledge: z.string().max(1000).optional(),\n  parentCommunicationPlan: z.string().max(1000).optional(),\n  fieldTripsAndGuestSpeakers: z.string().max(1000).optional(),\n  differentiationStrategies: z\n    .object({\n      forStruggling: z.array(z.string().max(200)).max(10).optional(),\n      forAdvanced: z.array(z.string().max(200)).max(10).optional(),\n      forELL: z.array(z.string().max(200)).max(10).optional(),\n      forIEP: z.array(z.string().max(200)).max(10).optional(),\n    })\n    .optional(),\n  indigenousPerspectives: z.string().max(1000).optional(),\n  environmentalEducation: z.string().max(1000).optional(),\n  socialJusticeConnections: z.string().max(1000).optional(),\n  technologyIntegration: z.string().max(1000).optional(),\n  communityConnections: z.string().max(1000).optional(),\n});\n\nconst lessonPlanBatchSchema = z.object({\n  title: z.string().min(1).max(255),\n  unitPlanId: cuidSchema(),\n  date: z.string().datetime(),\n  duration: z.number().int().min(5).max(480),\n  mindsOn: z.string().max(2000).optional(),\n  action: z.string().max(2000).optional(),\n  consolidation: z.string().max(2000).optional(),\n  learningGoals: z.string().max(1000).optional(),\n  materials: z.array(z.string().max(200)).max(30).optional(),\n  grouping: z.string().max(500).optional(),\n  accommodations: z.array(z.string().max(200)).max(20).optional(),\n  modifications: z.array(z.string().max(200)).max(20).optional(),\n  extensions: z.array(z.string().max(200)).max(20).optional(),\n  assessmentType: z.enum(['diagnostic', 'formative', 'summative']).optional(),\n  assessmentNotes: z.string().max(1000).optional(),\n  isSubFriendly: z.boolean().default(false),\n  subNotes: z.string().max(500).optional(),\n  expectationIds: z.array(cuidSchema()).max(20).optional(),\n});\n\nconst batchOperationSchema = z.object({\n  operations: z\n    .array(\n      z.object({\n        type: z.enum(['unit', 'lesson', 'expectation', 'resource']),\n        data: z.unknown(), // Will be validated based on type\n      }),\n    )\n    .max(100, 'Maximum 100 operations per batch'),\n  options: z\n    .object({\n      batchSize: z.number().int().min(1).max(20).default(10),\n      maxRetries: z.number().int().min(0).max(5).default(3),\n      retryDelay: z.number().int().min(100).max(10000).default(1000),\n    })\n    .optional(),\n});\n\n// Add operations to batch queue\nrouter.post('/operations', validate(batchOperationSchema), async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { operations, options: _options = {} } = req.body;\n\n    // Validate each operation based on its type\n    const validatedOperations = [];\n    for (const operation of operations) {\n      let validatedData;\n\n      switch (operation.type) {\n        case 'unit': {\n          const unitResult = unitPlanBatchSchema.safeParse(operation.data);\n          if (!unitResult.success) {\n            return res.status(400).json({\n              error: 'Invalid unit plan data',\n              details: unitResult.error.errors,\n            });\n          }\n          validatedData = unitResult.data;\n          break;\n        }\n\n        case 'lesson': {\n          const lessonResult = lessonPlanBatchSchema.safeParse(operation.data);\n          if (!lessonResult.success) {\n            return res.status(400).json({\n              error: 'Invalid lesson plan data',\n              details: lessonResult.error.errors,\n            });\n          }\n          validatedData = lessonResult.data;\n          break;\n        }\n\n        default:\n          return res.status(400).json({\n            error: `Unsupported operation type: ${operation.type}`,\n          });\n      }\n\n      validatedOperations.push({\n        type: operation.type,\n        data: validatedData,\n      });\n    }\n\n    // Validate the batch before adding to queue\n    const validation = await batchProcessingService.validateBatch(\n      validatedOperations.map((op) => ({\n        ...op,\n        id: '',\n        status: 'pending' as const,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })),\n    );\n\n    if (!validation.valid) {\n      return res.status(400).json({\n        error: 'Batch validation failed',\n        details: validation.errors,\n        warnings: validation.warnings,\n      });\n    }\n\n    // Add operations to queue\n    const operationIds = await batchProcessingService.addOperations(\n      validatedOperations,\n      userId.toString(),\n    );\n\n    res.status(201).json({\n      message: 'Operations added to batch queue',\n      operationIds,\n      count: operationIds.length,\n      warnings: validation.warnings,\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Process batch operations\nrouter.post('/process', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { batchSize = 10, maxRetries = 3, retryDelay = 1000 } = req.body;\n\n    // Validate processing options\n    if (batchSize < 1 || batchSize > 20) {\n      return res.status(400).json({ error: 'Batch size must be between 1 and 20' });\n    }\n\n    if (maxRetries < 0 || maxRetries > 5) {\n      return res.status(400).json({ error: 'Max retries must be between 0 and 5' });\n    }\n\n    if (retryDelay < 100 || retryDelay > 10000) {\n      return res.status(400).json({ error: 'Retry delay must be between 100 and 10000 ms' });\n    }\n\n    const result = await batchProcessingService.processBatch(userId.toString(), {\n      batchSize,\n      maxRetries,\n      retryDelay,\n    });\n\n    res.json({\n      message: 'Batch processing completed',\n      successful: result.successful,\n      failed: result.failed,\n      totalProcessed: result.successful + result.failed,\n    });\n  } catch (error) {\n    if (error.message.includes('already in progress')) {\n      return res.status(409).json({ error: error.message });\n    }\n    next(error);\n  }\n});\n\n// Get batch processing status\nrouter.get('/status', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const status = batchProcessingService.getBatchStatus(userId.toString());\n\n    res.json({\n      isProcessing: status.isProcessing,\n      queueLength: status.queueLength,\n      operations: status.operations.map((op) => ({\n        id: op.id,\n        type: op.type,\n        status: op.status,\n        progress: op.progress || 0,\n        errors: op.errors || [],\n        retryCount: op.retryCount || 0,\n        createdAt: op.createdAt,\n        updatedAt: op.updatedAt,\n      })),\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Clear completed operations\nrouter.delete('/completed', async (req: Request, res, next) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    batchProcessingService.clearCompletedOperations(userId.toString());\n\n    res.json({ message: 'Completed operations cleared from queue' });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Health check for batch processing service\nrouter.get('/health', async (req: Request, res, next) => {\n  try {\n    const health = await batchProcessingService.healthCheck();\n\n    res.status(health.healthy ? 200 : 503).json(health);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}