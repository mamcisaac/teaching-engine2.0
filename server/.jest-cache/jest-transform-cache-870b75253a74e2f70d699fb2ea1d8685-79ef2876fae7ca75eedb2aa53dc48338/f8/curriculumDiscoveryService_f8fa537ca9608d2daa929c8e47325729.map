{"version":3,"names":["cov_2q57xpkhqj","actualCoverage","BaseService","cheerio","z","CurriculumImportService","safeFetch","isValidExternalURL","validateFileSize","CurriculumDocumentSchema","s","object","title","string","min","url","source","province","grade","number","optional","subject","documentType","enum","fileType","description","language","CurriculumDiscoveryService","curriculumImportService","discoveredDocuments","Map","sources","constructor","f","initializeDefaultSources","id","name","baseUrl","searchUrls","isActive","robotsTxt","crawlDelay","maxDepth","allowedDomains","excludePatterns","discoverDocuments","logger","info","allDocuments","filter","documents","discoverFromSource","push","lastScanDate","Date","error","sourceId","delay","length","visitedUrls","Set","searchUrl","pageDocuments","crawlPage","depth","b","has","some","pattern","includes","add","debug","urlValidation","valid","Error","response","headers","ok","status","statusText","html","text","$","load","extractDocumentsFromPage","links","extractCurriculumLinks","link","linkedDocuments","pageUrl","documentLinks","each","_","element","$link","href","attr","linkText","trim","parentText","parent","isCurriculumDocument","absoluteUrl","URL","toString","document","createDocumentFromLink","extractTitleFromUrl","context","combinedText","toLowerCase","curriculumKeywords","hasCurriculumKeyword","keyword","excludeKeywords","hasExcludeKeyword","linkElements","domain","hostname","curriculumPageKeywords","Array","from","params","extractGrade","extractSubject","extractDocumentType","extractFileType","extractLanguage","generateDocumentId","cleanTitle","sourceType","undefined","lastVerified","downloadAttempts","downloadStatus","validation","safeParse","success","warn","errors","gradePatterns","match","parseInt","test","subjectPatterns","patterns","Object","entries","lowerText","lowerUrl","hasFrench","hasEnglish","hash","Buffer","replace","substring","urlObj","fileName","pathname","split","pop","downloadDocument","documentId","get","maxFileSize","buffer","arrayBuffer","byteLength","fileBuffer","fileSize","lastModified","filePath","processingErrors","message","processDocument","userId","importId","startImport","discoverySource","originalUrl","autoDiscovered","getDiscoveredDocuments","values","getDocumentsByFilter","doc","verifyDocument","method","isAvailable","addDiscoveredDocument","set","removeDiscoveredDocument","delete","getDiscoveryStats","stats","totalDocuments","byProvince","bySubject","byGrade","byStatus","byLanguage","forEach","gradeKey","ms","Promise","resolve","setTimeout","curriculumDiscoveryService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumDiscoveryService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport * as cheerio from 'cheerio';\nimport { z } from 'zod';\nimport { CurriculumImportService } from './curriculumImportService';\nimport { safeFetch, isValidExternalURL, validateFileSize } from '../utils/urlValidator';\n\nexport interface CurriculumDocument {\n  id: string;\n  title: string;\n  url: string;\n  source: string;\n  sourceType: 'government' | 'ministry' | 'department';\n  province: string;\n  grade?: number;\n  gradeRange?: { min: number; max: number };\n  subject?: string;\n  documentType: 'curriculum' | 'guideline' | 'assessment' | 'resource';\n  fileType: 'pdf' | 'docx' | 'html' | 'unknown';\n  publishedDate?: Date;\n  lastModified?: Date;\n  fileSize?: number;\n  description?: string;\n  language: 'en' | 'fr' | 'both';\n  isActive: boolean;\n  lastVerified: Date;\n  downloadAttempts: number;\n  downloadStatus: 'pending' | 'downloaded' | 'processed' | 'failed';\n  processingErrors?: string[];\n}\n\nexport interface DiscoverySource {\n  id: string;\n  name: string;\n  baseUrl: string;\n  province: string;\n  searchUrls: string[];\n  isActive: boolean;\n  lastScanDate?: Date;\n  robotsTxt?: string;\n  crawlDelay: number; // milliseconds\n  maxDepth: number;\n  allowedDomains: string[];\n  excludePatterns: string[];\n}\n\nconst CurriculumDocumentSchema = z.object({\n  title: z.string().min(1),\n  url: z.string().url(),\n  source: z.string(),\n  province: z.string(),\n  grade: z.number().optional(),\n  subject: z.string().optional(),\n  documentType: z.enum(['curriculum', 'guideline', 'assessment', 'resource']),\n  fileType: z.enum(['pdf', 'docx', 'html', 'unknown']),\n  description: z.string().optional(),\n  language: z.enum(['en', 'fr', 'both']),\n});\n\nexport class CurriculumDiscoveryService extends BaseService {\n  private curriculumImportService: CurriculumImportService;\n  private discoveredDocuments: Map<string, CurriculumDocument> = new Map();\n  private sources: DiscoverySource[] = [];\n\n  constructor() {\n    super('CurriculumDiscoveryService');\n    this.curriculumImportService = new CurriculumImportService();\n    this.initializeDefaultSources();\n  }\n\n  /**\n   * Initialize default government curriculum sources\n   */\n  private initializeDefaultSources(): void {\n    this.sources = [\n      {\n        id: 'pei-gov',\n        name: 'Prince Edward Island Department of Education',\n        baseUrl: 'https://www.princeedwardisland.ca',\n        province: 'PE',\n        searchUrls: [\n          'https://www.princeedwardisland.ca/en/topic/curriculum',\n          'https://www.princeedwardisland.ca/en/topic/curriculum-french-immersion',\n          'https://www.princeedwardisland.ca/en/information/education-and-lifelong-learning/curriculum-documents',\n        ],\n        isActive: true,\n        robotsTxt: 'https://www.princeedwardisland.ca/robots.txt',\n        crawlDelay: 2000,\n        maxDepth: 3,\n        allowedDomains: ['www.princeedwardisland.ca'],\n        excludePatterns: ['/search/', '/contact/', '/about/'],\n      },\n      {\n        id: 'ontario-edu',\n        name: 'Ontario Ministry of Education',\n        baseUrl: 'https://www.dcp.edu.gov.on.ca',\n        province: 'ON',\n        searchUrls: [\n          'https://www.dcp.edu.gov.on.ca/en/curriculum',\n          'https://www.dcp.edu.gov.on.ca/en/curriculum/elementary',\n          'https://www.dcp.edu.gov.on.ca/en/curriculum/elementary/french-immersion',\n        ],\n        isActive: true,\n        robotsTxt: 'https://www.dcp.edu.gov.on.ca/robots.txt',\n        crawlDelay: 3000,\n        maxDepth: 3,\n        allowedDomains: ['www.dcp.edu.gov.on.ca', 'edu.gov.on.ca'],\n        excludePatterns: ['/search/', '/login/', '/admin/'],\n      },\n      {\n        id: 'bc-gov',\n        name: 'British Columbia Ministry of Education',\n        baseUrl: 'https://curriculum.gov.bc.ca',\n        province: 'BC',\n        searchUrls: [\n          'https://curriculum.gov.bc.ca/curriculum',\n          'https://curriculum.gov.bc.ca/curriculum/french-immersion',\n        ],\n        isActive: true,\n        robotsTxt: 'https://curriculum.gov.bc.ca/robots.txt',\n        crawlDelay: 2000,\n        maxDepth: 2,\n        allowedDomains: ['curriculum.gov.bc.ca'],\n        excludePatterns: ['/search/', '/contact/'],\n      },\n    ];\n  }\n\n  /**\n   * Discover curriculum documents from all active sources\n   */\n  async discoverDocuments(): Promise<CurriculumDocument[]> {\n    try {\n      this.logger.info('Starting curriculum document discovery');\n      const allDocuments: CurriculumDocument[] = [];\n\n      for (const source of this.sources.filter((s) => s.isActive)) {\n        try {\n          this.logger.info(`Discovering documents from ${source.name}`);\n          const documents = await this.discoverFromSource(source);\n          allDocuments.push(...documents);\n          \n          // Update last scan date\n          source.lastScanDate = new Date();\n        } catch (error) {\n          this.logger.error(\n            { error, sourceId: source.id },\n            `Failed to discover documents from ${source.name}`\n          );\n        }\n\n        // Respect crawl delay between sources\n        await this.delay(source.crawlDelay);\n      }\n\n      this.logger.info(`Discovered ${allDocuments.length} curriculum documents`);\n      return allDocuments;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to discover curriculum documents');\n      throw error;\n    }\n  }\n\n  /**\n   * Discover documents from a specific source\n   */\n  private async discoverFromSource(source: DiscoverySource): Promise<CurriculumDocument[]> {\n    const documents: CurriculumDocument[] = [];\n    const visitedUrls = new Set<string>();\n\n    for (const searchUrl of source.searchUrls) {\n      try {\n        const pageDocuments = await this.crawlPage(\n          searchUrl,\n          source,\n          visitedUrls,\n          0\n        );\n        documents.push(...pageDocuments);\n      } catch (error) {\n        this.logger.error(\n          { error, searchUrl, sourceId: source.id },\n          'Failed to crawl search URL'\n        );\n      }\n    }\n\n    return documents;\n  }\n\n  /**\n   * Crawl a page and its linked pages for curriculum documents\n   */\n  private async crawlPage(\n    url: string,\n    source: DiscoverySource,\n    visitedUrls: Set<string>,\n    depth: number\n  ): Promise<CurriculumDocument[]> {\n    if (depth > source.maxDepth || visitedUrls.has(url)) {\n      return [];\n    }\n\n    // Check if URL should be excluded\n    if (source.excludePatterns.some((pattern) => url.includes(pattern))) {\n      return [];\n    }\n\n    visitedUrls.add(url);\n    const documents: CurriculumDocument[] = [];\n\n    try {\n      this.logger.debug(`Crawling page: ${url} (depth: ${depth})`);\n      \n      // Validate and fetch page content securely\n      const urlValidation = isValidExternalURL(url);\n      if (!urlValidation.valid) {\n        throw new Error(`URL validation failed: ${urlValidation.error}`);\n      }\n\n      const response = await safeFetch(url, {\n        headers: {\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Validate file size for large responses\n      if (!validateFileSize(response, 10 * 1024 * 1024)) { // 10MB limit\n        throw new Error('Response too large - potential DoS attempt');\n      }\n\n      const html = await response.text();\n      const $ = cheerio.load(html);\n\n      // Extract curriculum documents from current page\n      const pageDocuments = await this.extractDocumentsFromPage($, url, source);\n      documents.push(...pageDocuments);\n\n      // Find links to other curriculum pages\n      if (depth < source.maxDepth) {\n        const links = this.extractCurriculumLinks($, url, source);\n        \n        for (const link of links) {\n          await this.delay(source.crawlDelay);\n          const linkedDocuments = await this.crawlPage(link, source, visitedUrls, depth + 1);\n          documents.push(...linkedDocuments);\n        }\n      }\n    } catch (error) {\n      this.logger.error({ error, url }, 'Failed to crawl page');\n    }\n\n    return documents;\n  }\n\n  /**\n   * Extract curriculum documents from a single page\n   */\n  private async extractDocumentsFromPage(\n    $: cheerio.CheerioAPI,\n    pageUrl: string,\n    source: DiscoverySource\n  ): Promise<CurriculumDocument[]> {\n    const documents: CurriculumDocument[] = [];\n\n    // Look for PDF and DOCX links that might be curriculum documents\n    const documentLinks = $('a[href$=\".pdf\"], a[href$=\".docx\"], a[href*=\"/download/\"], a[href*=\"/resource/\"]');\n\n    documentLinks.each((_, element) => {\n      const $link = $(element);\n      const href = $link.attr('href');\n      const linkText = $link.text().trim();\n      const parentText = $link.parent().text().trim();\n\n      if (!href || !this.isCurriculumDocument(linkText, parentText)) {\n        return;\n      }\n\n      // Resolve relative URLs\n      const absoluteUrl = new URL(href, pageUrl).toString();\n\n      // Extract document metadata\n      const document = this.createDocumentFromLink({\n        url: absoluteUrl,\n        title: linkText || this.extractTitleFromUrl(absoluteUrl),\n        source: source.name,\n        province: source.province,\n        context: parentText,\n        pageUrl,\n      });\n\n      if (document) {\n        documents.push(document);\n      }\n    });\n\n    return documents;\n  }\n\n  /**\n   * Determine if a link is likely a curriculum document\n   */\n  private isCurriculumDocument(linkText: string, context: string): boolean {\n    const combinedText = (linkText + ' ' + context).toLowerCase();\n    \n    const curriculumKeywords = [\n      'curriculum',\n      'program of studies',\n      'course outline',\n      'learning outcomes',\n      'expectations',\n      'grade',\n      'subject guide',\n      'teaching guide',\n      'assessment',\n      'rubric',\n      'français',\n      'french immersion',\n      'mathematics',\n      'science',\n      'social studies',\n      'english language arts',\n      'physical education',\n      'arts education',\n    ];\n\n    // Must contain at least one curriculum keyword\n    const hasCurriculumKeyword = curriculumKeywords.some((keyword) =>\n      combinedText.includes(keyword)\n    );\n\n    // Exclude non-curriculum documents\n    const excludeKeywords = [\n      'form',\n      'application',\n      'newsletter',\n      'news',\n      'event',\n      'calendar',\n      'contact',\n      'directory',\n      'budget',\n      'policy',\n      'procedure',\n    ];\n\n    const hasExcludeKeyword = excludeKeywords.some((keyword) =>\n      combinedText.includes(keyword)\n    );\n\n    return hasCurriculumKeyword && !hasExcludeKeyword;\n  }\n\n  /**\n   * Extract curriculum-related links from a page\n   */\n  private extractCurriculumLinks(\n    $: cheerio.CheerioAPI,\n    pageUrl: string,\n    source: DiscoverySource\n  ): string[] {\n    const links: string[] = [];\n    const linkElements = $('a[href]');\n\n    linkElements.each((_, element) => {\n      const $link = $(element);\n      const href = $link.attr('href');\n      const linkText = $link.text().trim().toLowerCase();\n\n      if (!href) return;\n\n      // Resolve relative URLs\n      let absoluteUrl: string;\n      try {\n        absoluteUrl = new URL(href, pageUrl).toString();\n      } catch {\n        return; // Skip invalid URLs\n      }\n\n      // Check if URL is within allowed domains\n      const url = new URL(absoluteUrl);\n      if (!source.allowedDomains.some((domain) => url.hostname.includes(domain))) {\n        return;\n      }\n\n      // Look for curriculum-related page links\n      const curriculumPageKeywords = [\n        'curriculum',\n        'grade',\n        'subject',\n        'program',\n        'course',\n        'français',\n        'french',\n        'immersion',\n        'elementary',\n        'primary',\n      ];\n\n      if (curriculumPageKeywords.some((keyword) => linkText.includes(keyword))) {\n        links.push(absoluteUrl);\n      }\n    });\n\n    return Array.from(new Set(links)); // Remove duplicates\n  }\n\n  /**\n   * Create a CurriculumDocument from a link\n   */\n  private createDocumentFromLink(params: {\n    url: string;\n    title: string;\n    source: string;\n    province: string;\n    context: string;\n    pageUrl: string;\n  }): CurriculumDocument | null {\n    try {\n      const { url, title, source, province, context } = params;\n\n      // Extract metadata from title and context\n      const grade = this.extractGrade(title + ' ' + context);\n      const subject = this.extractSubject(title + ' ' + context);\n      const documentType = this.extractDocumentType(title + ' ' + context);\n      const fileType = this.extractFileType(url);\n      const language = this.extractLanguage(title + ' ' + context);\n\n      const document: CurriculumDocument = {\n        id: this.generateDocumentId(url),\n        title: this.cleanTitle(title),\n        url,\n        source,\n        sourceType: 'government',\n        province,\n        grade,\n        subject,\n        documentType,\n        fileType,\n        description: context !== title ? context : undefined,\n        language,\n        isActive: true,\n        lastVerified: new Date(),\n        downloadAttempts: 0,\n        downloadStatus: 'pending',\n      };\n\n      // Validate document\n      const validation = CurriculumDocumentSchema.safeParse(document);\n      if (!validation.success) {\n        this.logger.warn(\n          { errors: validation.error.errors, document },\n          'Invalid curriculum document discovered'\n        );\n        return null;\n      }\n\n      return document;\n    } catch (error) {\n      this.logger.error({ error, params }, 'Failed to create document from link');\n      return null;\n    }\n  }\n\n  /**\n   * Extract grade from text\n   */\n  private extractGrade(text: string): number | undefined {\n    const gradePatterns = [\n      /grade\\s+(\\d+)/i,\n      /gr\\.\\s*(\\d+)/i,\n      /\\b(\\d+)(?:st|nd|rd|th)\\s+grade/i,\n      /year\\s+(\\d+)/i,\n    ];\n\n    for (const pattern of gradePatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        const grade = parseInt(match[1]);\n        if (grade >= 0 && grade <= 12) {\n          return grade;\n        }\n      }\n    }\n\n    // Check for kindergarten\n    if (/kindergarten|kinder|maternelle/i.test(text)) {\n      return 0;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract subject from text\n   */\n  private extractSubject(text: string): string | undefined {\n    const subjectPatterns: Record<string, RegExp[]> = {\n      'Mathematics': [/math/i, /mathematics/i, /mathématiques/i],\n      'French': [/french/i, /français/i, /fsl/i, /french immersion/i],\n      'English': [/english/i, /language arts/i, /ela/i, /anglais/i],\n      'Science': [/science/i, /sciences/i],\n      'Social Studies': [/social studies/i, /social science/i, /études sociales/i, /history/i, /geography/i],\n      'Physical Education': [/physical education/i, /phys ed/i, /pe/i, /éducation physique/i, /health/i],\n      'Arts': [/arts/i, /art/i, /music/i, /drama/i, /visual arts/i],\n    };\n\n    for (const [subject, patterns] of Object.entries(subjectPatterns)) {\n      if (patterns.some((pattern) => pattern.test(text))) {\n        return subject;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract document type from text\n   */\n  private extractDocumentType(text: string): CurriculumDocument['documentType'] {\n    const lowerText = text.toLowerCase();\n\n    if (lowerText.includes('assessment') || lowerText.includes('rubric') || lowerText.includes('evaluation')) {\n      return 'assessment';\n    }\n    if (lowerText.includes('guide') || lowerText.includes('resource') || lowerText.includes('support')) {\n      return 'resource';\n    }\n    if (lowerText.includes('guideline') || lowerText.includes('framework')) {\n      return 'guideline';\n    }\n\n    return 'curriculum';\n  }\n\n  /**\n   * Extract file type from URL\n   */\n  private extractFileType(url: string): CurriculumDocument['fileType'] {\n    const lowerUrl = url.toLowerCase();\n    if (lowerUrl.includes('.pdf')) return 'pdf';\n    if (lowerUrl.includes('.docx') || lowerUrl.includes('.doc')) return 'docx';\n    if (lowerUrl.includes('.html') || lowerUrl.includes('.htm')) return 'html';\n    return 'unknown';\n  }\n\n  /**\n   * Extract language from text\n   */\n  private extractLanguage(text: string): CurriculumDocument['language'] {\n    const hasFrench = /french|français|immersion|fsl|francophone/i.test(text);\n    const hasEnglish = /english|anglais/i.test(text) || (!hasFrench && /curriculum|program|guide/i.test(text));\n\n    if (hasFrench && hasEnglish) return 'both';\n    if (hasFrench) return 'fr';\n    return 'en';\n  }\n\n  /**\n   * Generate unique document ID from URL\n   */\n  private generateDocumentId(url: string): string {\n    const hash = Buffer.from(url).toString('base64');\n    return hash.replace(/[^a-zA-Z0-9]/g, '').substring(0, 16);\n  }\n\n  /**\n   * Clean and normalize document title\n   */\n  private cleanTitle(title: string): string {\n    return title\n      .replace(/\\.(pdf|docx?|html?)$/i, '')\n      .replace(/^\\s*-\\s*/, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  /**\n   * Extract title from URL if no title is available\n   */\n  private extractTitleFromUrl(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      const fileName = urlObj.pathname.split('/').pop() || 'curriculum-document';\n      return this.cleanTitle(fileName);\n    } catch {\n      return 'Curriculum Document';\n    }\n  }\n\n  /**\n   * Download a discovered curriculum document\n   */\n  async downloadDocument(documentId: string): Promise<{\n    success: boolean;\n    filePath?: string;\n    error?: string;\n  }> {\n    try {\n      const document = this.discoveredDocuments.get(documentId);\n      if (!document) {\n        throw new Error(`Document ${documentId} not found`);\n      }\n\n      this.logger.info(`Starting download of document: ${document.title}`);\n\n      // Update download attempts\n      document.downloadAttempts++;\n      document.downloadStatus = 'pending';\n\n      // Validate URL before downloading\n      const urlValidation = isValidExternalURL(document.url);\n      if (!urlValidation.valid) {\n        throw new Error(`URL validation failed: ${urlValidation.error}`);\n      }\n\n      const response = await safeFetch(document.url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Validate file size before downloading\n      const maxFileSize = 50 * 1024 * 1024; // 50MB limit\n      if (!validateFileSize(response, maxFileSize)) {\n        throw new Error('File too large - exceeds 50MB limit');\n      }\n\n      const buffer = await response.arrayBuffer();\n      \n      // Additional size check after download\n      if (buffer.byteLength > maxFileSize) {\n        throw new Error('Downloaded file exceeds size limit');\n      }\n      \n      const fileBuffer = Buffer.from(buffer);\n\n      // Store file metadata\n      document.fileSize = fileBuffer.length;\n      document.lastModified = new Date();\n      document.downloadStatus = 'downloaded';\n\n      this.logger.info(`Downloaded document: ${document.title} (${document.fileSize} bytes)`);\n\n      return {\n        success: true,\n        filePath: document.url, // In production, would save to cloud storage\n      };\n    } catch (error) {\n      this.logger.error({ error, documentId }, 'Failed to download document');\n      \n      const document = this.discoveredDocuments.get(documentId);\n      if (document) {\n        document.downloadStatus = 'failed';\n        document.processingErrors = document.processingErrors || [];\n        document.processingErrors.push(error instanceof Error ? error.message : 'Unknown error');\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Process a downloaded document using the curriculum import service\n   */\n  async processDocument(\n    documentId: string,\n    userId: number\n  ): Promise<{\n    success: boolean;\n    importId?: string;\n    error?: string;\n  }> {\n    try {\n      const document = this.discoveredDocuments.get(documentId);\n      if (!document) {\n        throw new Error(`Document ${documentId} not found`);\n      }\n\n      if (document.downloadStatus !== 'downloaded') {\n        throw new Error('Document must be downloaded before processing');\n      }\n\n      this.logger.info(`Processing document: ${document.title}`);\n\n      // Create import session\n      const importId = await this.curriculumImportService.startImport(\n        userId,\n        document.grade || 1,\n        document.subject || 'General',\n        document.fileType === 'pdf' ? 'pdf' : document.fileType === 'docx' ? 'docx' : 'manual',\n        document.title,\n        {\n          discoverySource: document.source,\n          originalUrl: document.url,\n          documentType: document.documentType,\n          province: document.province,\n          autoDiscovered: true,\n        }\n      );\n\n      // Update document status\n      document.downloadStatus = 'processed';\n\n      this.logger.info(`Created import session ${importId} for document: ${document.title}`);\n\n      return {\n        success: true,\n        importId,\n      };\n    } catch (error) {\n      this.logger.error({ error, documentId }, 'Failed to process document');\n\n      const document = this.discoveredDocuments.get(documentId);\n      if (document) {\n        document.downloadStatus = 'failed';\n        document.processingErrors = document.processingErrors || [];\n        document.processingErrors.push(error instanceof Error ? error.message : 'Unknown error');\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get all discovered documents\n   */\n  getDiscoveredDocuments(): CurriculumDocument[] {\n    return Array.from(this.discoveredDocuments.values());\n  }\n\n  /**\n   * Get discovered documents filtered by criteria\n   */\n  getDocumentsByFilter(filter: {\n    province?: string;\n    grade?: number;\n    subject?: string;\n    language?: string;\n    documentType?: string;\n    downloadStatus?: string;\n  }): CurriculumDocument[] {\n    const documents = this.getDiscoveredDocuments();\n    \n    return documents.filter((doc) => {\n      if (filter.province && doc.province !== filter.province) return false;\n      if (filter.grade && doc.grade !== filter.grade) return false;\n      if (filter.subject && doc.subject !== filter.subject) return false;\n      if (filter.language && doc.language !== filter.language) return false;\n      if (filter.documentType && doc.documentType !== filter.documentType) return false;\n      if (filter.downloadStatus && doc.downloadStatus !== filter.downloadStatus) return false;\n      return true;\n    });\n  }\n\n  /**\n   * Update document verification status\n   */\n  async verifyDocument(documentId: string): Promise<boolean> {\n    try {\n      const document = this.discoveredDocuments.get(documentId);\n      if (!document) return false;\n\n      // Validate URL before verification\n      const urlValidation = isValidExternalURL(document.url);\n      if (!urlValidation.valid) {\n        this.logger.warn({ documentId, url: document.url }, 'Invalid URL for verification');\n        return false;\n      }\n\n      // Check if document is still available\n      const response = await safeFetch(document.url, { method: 'HEAD' });\n      const isAvailable = response.ok;\n\n      document.isActive = isAvailable;\n      document.lastVerified = new Date();\n\n      return isAvailable;\n    } catch (error) {\n      this.logger.error({ error, documentId }, 'Failed to verify document');\n      const document = this.discoveredDocuments.get(documentId);\n      if (document) {\n        document.isActive = false;\n        document.lastVerified = new Date();\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Add discovered document to internal storage\n   */\n  addDiscoveredDocument(document: CurriculumDocument): void {\n    this.discoveredDocuments.set(document.id, document);\n  }\n\n  /**\n   * Remove document from discovery results\n   */\n  removeDiscoveredDocument(documentId: string): boolean {\n    return this.discoveredDocuments.delete(documentId);\n  }\n\n  /**\n   * Get discovery statistics\n   */\n  getDiscoveryStats(): {\n    totalDocuments: number;\n    byProvince: Record<string, number>;\n    bySubject: Record<string, number>;\n    byGrade: Record<string, number>;\n    byStatus: Record<string, number>;\n    byLanguage: Record<string, number>;\n  } {\n    const documents = this.getDiscoveredDocuments();\n    \n    const stats = {\n      totalDocuments: documents.length,\n      byProvince: {} as Record<string, number>,\n      bySubject: {} as Record<string, number>,\n      byGrade: {} as Record<string, number>,\n      byStatus: {} as Record<string, number>,\n      byLanguage: {} as Record<string, number>,\n    };\n\n    documents.forEach((doc) => {\n      // Count by province\n      stats.byProvince[doc.province] = (stats.byProvince[doc.province] || 0) + 1;\n      \n      // Count by subject\n      if (doc.subject) {\n        stats.bySubject[doc.subject] = (stats.bySubject[doc.subject] || 0) + 1;\n      }\n      \n      // Count by grade\n      if (doc.grade !== undefined) {\n        const gradeKey = `Grade ${doc.grade}`;\n        stats.byGrade[gradeKey] = (stats.byGrade[gradeKey] || 0) + 1;\n      }\n      \n      // Count by status\n      stats.byStatus[doc.downloadStatus] = (stats.byStatus[doc.downloadStatus] || 0) + 1;\n      \n      // Count by language\n      stats.byLanguage[doc.language] = (stats.byLanguage[doc.language] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n   * Utility method to add delay between requests\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const curriculumDiscoveryService = new CurriculumDiscoveryService();"],"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","ignoreList":[]}