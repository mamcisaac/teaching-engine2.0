{"version":3,"names":["cov_1jckjrk710","actualCoverage","embeddingService","openai","BaseService","ClusteringService","defaultOptions","s","minClusterSize","maxClusters","similarityThreshold","useAISuggestions","constructor","f","clusterExpectations","importId","options","b","opts","expectations","getExpectationsWithEmbeddings","length","logger","info","expectationCount","clusters","performHierarchicalClustering","generateClusterThemes","savedClusters","saveClusters","clusterCount","error","Error","message","reclusterExpectations","prisma","expectationCluster","deleteMany","where","getClusters","findMany","orderBy","confidence","map","cluster","id","name","clusterName","type","clusterType","expectationIds","suggestedTheme","undefined","suggestSimilarExpectations","expectationId","threshold","limit","similarities","findSimilarExpectations","curriculumExpectation","in","select","code","description","sim","expectation","find","e","similarity","filter","item","analyzeClusterQuality","totalClusters","averageConfidence","clustersWithLowConfidence","suggestions","confidences","c","reduce","a","push","smallClusters","include","embedding","expectationsWithEmbeddings","missingEmbeddings","count","embeddingData","text","generateBatchEmbeddings","updatedExpectations","used","Set","other","calculateSimilarity","sort","has","add","similarExpectations","slice","totalSimilarity","pairCount","i","j","expectation1","expectation2","determineClusterType","descriptions","toLowerCase","join","includes","_importId","warn","expectationList","prompt","response","chat","completions","create","model","messages","role","content","temperature","max_tokens","choices","trim","clusterId","saved","data","indexOf","clusteringService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/clusteringService.ts"],"sourcesContent":["import { embeddingService } from './embeddingService';\nimport { openai } from './llmService';\nimport BaseService from './base/BaseService';\n\nexport interface ClusterResult {\n  id: string;\n  name: string;\n  type: 'theme' | 'skill' | 'concept';\n  expectationIds: string[];\n  confidence: number;\n  suggestedTheme?: string;\n}\n\nexport interface ClusteringOptions {\n  minClusterSize: number;\n  maxClusters: number;\n  similarityThreshold: number;\n  useAISuggestions: boolean;\n}\n\nexport class ClusteringService extends BaseService {\n  private readonly defaultOptions: ClusteringOptions = {\n    minClusterSize: 2,\n    maxClusters: 20,\n    similarityThreshold: 0.75,\n    useAISuggestions: true,\n  };\n\n  constructor() {\n    super('ClusteringService');\n  }\n\n  /**\n   * Cluster curriculum expectations for a specific import using embedding-based similarity\n   */\n  async clusterExpectations(\n    importId: string,\n    options: Partial<ClusteringOptions> = {},\n  ): Promise<ClusterResult[]> {\n    const opts = { ...this.defaultOptions, ...options };\n\n    try {\n      // Get all expectations for this import with their embeddings\n      const expectations = await this.getExpectationsWithEmbeddings(importId);\n\n      if (expectations.length < opts.minClusterSize) {\n        this.logger.info(\n          { importId, expectationCount: expectations.length },\n          'Not enough expectations to create meaningful clusters',\n        );\n        return [];\n      }\n\n      this.logger.info(\n        { importId, expectationCount: expectations.length, options: opts },\n        'Starting expectation clustering',\n      );\n\n      // Perform hierarchical clustering\n      const clusters = await this.performHierarchicalClustering(expectations, opts);\n\n      // Generate AI suggestions for cluster themes if enabled\n      if (opts.useAISuggestions) {\n        await this.generateClusterThemes(clusters, importId);\n      }\n\n      // Save clusters to database\n      const savedClusters = await this.saveClusters(importId, clusters);\n\n      this.logger.info(\n        { importId, clusterCount: savedClusters.length },\n        'Completed expectation clustering',\n      );\n\n      return savedClusters;\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to cluster expectations');\n      throw new Error(`Clustering failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Re-cluster expectations with different parameters\n   */\n  async reclusterExpectations(\n    importId: string,\n    options: Partial<ClusteringOptions> = {},\n  ): Promise<ClusterResult[]> {\n    try {\n      // Delete existing clusters for this import\n      await this.prisma.expectationCluster.deleteMany({\n        where: { importId },\n      });\n\n      this.logger.info({ importId }, 'Deleted existing clusters for re-clustering');\n\n      // Perform new clustering\n      return await this.clusterExpectations(importId, options);\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to re-cluster expectations');\n      throw error;\n    }\n  }\n\n  /**\n   * Get clusters for a specific import\n   */\n  async getClusters(importId: string): Promise<ClusterResult[]> {\n    try {\n      const clusters = await this.prisma.expectationCluster.findMany({\n        where: { importId },\n        orderBy: { confidence: 'desc' },\n      });\n\n      return clusters.map((cluster) => ({\n        id: cluster.id,\n        name: cluster.clusterName,\n        type: cluster.clusterType as 'theme' | 'skill' | 'concept',\n        expectationIds: cluster.expectationIds as string[],\n        confidence: cluster.confidence,\n        suggestedTheme: cluster.suggestedTheme || undefined,\n      }));\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to get clusters');\n      return [];\n    }\n  }\n\n  /**\n   * Suggest similar expectations based on a given expectation\n   */\n  async suggestSimilarExpectations(\n    expectationId: string,\n    threshold: number = 0.8,\n    limit: number = 10,\n  ): Promise<\n    {\n      expectationId: string;\n      code: string;\n      description: string;\n      similarity: number;\n    }[]\n  > {\n    try {\n      const similarities = await embeddingService.findSimilarExpectations(\n        expectationId,\n        threshold,\n        limit,\n      );\n\n      if (similarities.length === 0) return [];\n\n      const expectations = await this.prisma.curriculumExpectation.findMany({\n        where: {\n          id: { in: similarities.map((s) => s.expectationId) },\n        },\n        select: {\n          id: true,\n          code: true,\n          description: true,\n        },\n      });\n\n      return similarities\n        .map((sim) => {\n          const expectation = expectations.find((e) => e.id === sim.expectationId);\n          return {\n            expectationId: sim.expectationId,\n            code: expectation?.code || 'Unknown',\n            description: expectation?.description || 'Unknown',\n            similarity: sim.similarity,\n          };\n        })\n        .filter((item) => item.code !== 'Unknown');\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to suggest similar expectations');\n      return [];\n    }\n  }\n\n  /**\n   * Analyze cluster quality and suggest improvements\n   */\n  async analyzeClusterQuality(importId: string): Promise<{\n    totalClusters: number;\n    averageConfidence: number;\n    clustersWithLowConfidence: number;\n    suggestions: string[];\n  }> {\n    try {\n      const clusters = await this.getClusters(importId);\n\n      if (clusters.length === 0) {\n        return {\n          totalClusters: 0,\n          averageConfidence: 0,\n          clustersWithLowConfidence: 0,\n          suggestions: ['No clusters found. Consider running clustering first.'],\n        };\n      }\n\n      const confidences = clusters.map((c) => c.confidence);\n      const averageConfidence = confidences.reduce((a, b) => a + b, 0) / confidences.length;\n      const clustersWithLowConfidence = clusters.filter((c) => c.confidence < 0.6).length;\n\n      const suggestions: string[] = [];\n\n      if (averageConfidence < 0.7) {\n        suggestions.push('Consider adjusting similarity threshold for better clustering');\n      }\n\n      if (clustersWithLowConfidence > clusters.length * 0.3) {\n        suggestions.push('Many clusters have low confidence - consider reducing max clusters');\n      }\n\n      const smallClusters = clusters.filter((c) => c.expectationIds.length < 3).length;\n      if (smallClusters > clusters.length * 0.5) {\n        suggestions.push('Many small clusters detected - consider increasing minimum cluster size');\n      }\n\n      return {\n        totalClusters: clusters.length,\n        averageConfidence,\n        clustersWithLowConfidence,\n        suggestions,\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to analyze cluster quality');\n      throw error;\n    }\n  }\n\n  // Private helper methods\n\n  private async getExpectationsWithEmbeddings(importId: string): Promise<\n    {\n      id: string;\n      code: string;\n      description: string;\n      embedding: number[];\n    }[]\n  > {\n    const expectations = await this.prisma.curriculumExpectation.findMany({\n      where: { importId },\n      include: {\n        embedding: true,\n      },\n    });\n\n    const expectationsWithEmbeddings = expectations\n      .filter((expectation) => expectation.embedding)\n      .map((expectation) => ({\n        id: expectation.id,\n        code: expectation.code,\n        description: expectation.description,\n        embedding: expectation.embedding!.embedding as number[],\n      }));\n\n    // Generate missing embeddings\n    const missingEmbeddings = expectations.filter((expectation) => !expectation.embedding);\n    if (missingEmbeddings.length > 0) {\n      this.logger.info({ count: missingEmbeddings.length }, 'Generating missing embeddings');\n\n      const embeddingData = missingEmbeddings.map((expectation) => ({\n        id: expectation.id,\n        text: `${expectation.code}: ${expectation.description}`,\n      }));\n\n      await embeddingService.generateBatchEmbeddings(embeddingData);\n\n      // Re-fetch with new embeddings\n      const updatedExpectations = await this.prisma.curriculumExpectation.findMany({\n        where: { id: { in: missingEmbeddings.map((e) => e.id) } },\n        include: { embedding: true },\n      });\n\n      for (const expectation of updatedExpectations) {\n        if (expectation.embedding) {\n          expectationsWithEmbeddings.push({\n            id: expectation.id,\n            code: expectation.code,\n            description: expectation.description,\n            embedding: expectation.embedding.embedding as number[],\n          });\n        }\n      }\n    }\n\n    return expectationsWithEmbeddings;\n  }\n\n  private async performHierarchicalClustering(\n    expectations: { id: string; code: string; description: string; embedding: number[] }[],\n    options: ClusteringOptions,\n  ): Promise<\n    {\n      name: string;\n      type: 'theme' | 'skill' | 'concept';\n      expectationIds: string[];\n      confidence: number;\n    }[]\n  > {\n    // Simple hierarchical clustering implementation\n    const clusters: {\n      name: string;\n      type: 'theme' | 'skill' | 'concept';\n      expectationIds: string[];\n      confidence: number;\n    }[] = [];\n\n    const used = new Set<string>();\n    const similarities: { [key: string]: { expectationId: string; similarity: number }[] } = {};\n\n    // Calculate similarities for all expectations\n    for (const expectation of expectations) {\n      similarities[expectation.id] = [];\n      for (const other of expectations) {\n        if (expectation.id !== other.id) {\n          const similarity = embeddingService.calculateSimilarity(\n            expectation.embedding,\n            other.embedding,\n          );\n          similarities[expectation.id].push({ expectationId: other.id, similarity });\n        }\n      }\n      similarities[expectation.id].sort((a, b) => b.similarity - a.similarity);\n    }\n\n    // Form clusters greedily\n    for (const expectation of expectations) {\n      if (used.has(expectation.id) || clusters.length >= options.maxClusters) continue;\n\n      const cluster = [expectation.id];\n      used.add(expectation.id);\n\n      // Find similar expectations to add to this cluster\n      const similarExpectations = similarities[expectation.id]\n        .filter(\n          (sim) => !used.has(sim.expectationId) && sim.similarity >= options.similarityThreshold,\n        )\n        .slice(0, 10); // Limit cluster size\n\n      for (const sim of similarExpectations) {\n        cluster.push(sim.expectationId);\n        used.add(sim.expectationId);\n      }\n\n      if (cluster.length >= options.minClusterSize) {\n        // Calculate cluster confidence (average similarity)\n        let totalSimilarity = 0;\n        let pairCount = 0;\n\n        for (let i = 0; i < cluster.length; i++) {\n          for (let j = i + 1; j < cluster.length; j++) {\n            const expectation1 = expectations.find((e) => e.id === cluster[i])!;\n            const expectation2 = expectations.find((e) => e.id === cluster[j])!;\n            totalSimilarity += embeddingService.calculateSimilarity(\n              expectation1.embedding,\n              expectation2.embedding,\n            );\n            pairCount++;\n          }\n        }\n\n        const confidence = pairCount > 0 ? totalSimilarity / pairCount : 0;\n\n        // Determine cluster type based on expectation patterns\n        const clusterType = this.determineClusterType(\n          cluster.map((id) => expectations.find((e) => e.id === id)!),\n        );\n\n        clusters.push({\n          name: `Cluster ${clusters.length + 1}`,\n          type: clusterType,\n          expectationIds: cluster,\n          confidence,\n        });\n      }\n    }\n\n    return clusters;\n  }\n\n  private determineClusterType(\n    expectations: { code: string; description: string }[],\n  ): 'theme' | 'skill' | 'concept' {\n    // Simple heuristic based on expectation descriptions\n    const descriptions = expectations.map((e) => e.description.toLowerCase()).join(' ');\n\n    if (\n      descriptions.includes('skill') ||\n      descriptions.includes('ability') ||\n      descriptions.includes('can')\n    ) {\n      return 'skill';\n    }\n\n    if (\n      descriptions.includes('concept') ||\n      descriptions.includes('understand') ||\n      descriptions.includes('knowledge')\n    ) {\n      return 'concept';\n    }\n\n    return 'theme'; // Default\n  }\n\n  private async generateClusterThemes(\n    clusters: {\n      name: string;\n      type: 'theme' | 'skill' | 'concept';\n      expectationIds: string[];\n      confidence: number;\n    }[],\n    _importId: string,\n  ): Promise<void> {\n    if (!openai) {\n      this.logger.warn('OpenAI not configured, skipping theme generation');\n      return;\n    }\n\n    for (const cluster of clusters) {\n      try {\n        // Get expectation descriptions for this cluster\n        const expectations = await this.prisma.curriculumExpectation.findMany({\n          where: { id: { in: cluster.expectationIds } },\n          select: { code: true, description: true },\n        });\n\n        const expectationList = expectations.map((e) => `${e.code}: ${e.description}`).join('\\n');\n\n        const prompt = `Given these related curriculum expectations, suggest a concise theme name (2-4 words) that captures their common focus:\n\n${expectationList}\n\nTheme name:`;\n\n        const response = await openai.chat.completions.create({\n          model: 'gpt-3.5-turbo',\n          messages: [{ role: 'user', content: prompt }],\n          temperature: 0.3,\n          max_tokens: 50,\n        });\n\n        const suggestedTheme = response.choices[0]?.message?.content?.trim();\n        if (suggestedTheme) {\n          cluster.name = suggestedTheme;\n        }\n      } catch (error) {\n        this.logger.error(\n          { error, clusterId: cluster.expectationIds },\n          'Failed to generate theme for cluster',\n        );\n      }\n    }\n  }\n\n  private async saveClusters(\n    importId: string,\n    clusters: {\n      name: string;\n      type: 'theme' | 'skill' | 'concept';\n      expectationIds: string[];\n      confidence: number;\n    }[],\n  ): Promise<ClusterResult[]> {\n    const savedClusters: ClusterResult[] = [];\n\n    for (const cluster of clusters) {\n      try {\n        const saved = await this.prisma.expectationCluster.create({\n          data: {\n            importId,\n            clusterName: cluster.name,\n            clusterType: cluster.type,\n            expectationIds: cluster.expectationIds,\n            confidence: cluster.confidence,\n            suggestedTheme:\n              cluster.name !== `Cluster ${clusters.indexOf(cluster) + 1}`\n                ? cluster.name\n                : undefined,\n          },\n        });\n\n        savedClusters.push({\n          id: saved.id,\n          name: saved.clusterName,\n          type: saved.clusterType as 'theme' | 'skill' | 'concept',\n          expectationIds: saved.expectationIds as string[],\n          confidence: saved.confidence,\n          suggestedTheme: saved.suggestedTheme || undefined,\n        });\n      } catch (error) {\n        this.logger.error({ error, cluster }, 'Failed to save cluster');\n      }\n    }\n\n    return savedClusters;\n  }\n}\n\n// Export singleton instance\nexport const clusteringService = new ClusteringService();\n"],"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","ignoreList":[]}