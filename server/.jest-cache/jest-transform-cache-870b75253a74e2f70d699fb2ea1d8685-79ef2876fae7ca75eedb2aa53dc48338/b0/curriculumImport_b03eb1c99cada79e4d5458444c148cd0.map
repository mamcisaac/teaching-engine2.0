{"version":3,"names":["cov_1dvxadpnb1","actualCoverage","express","multer","curriculumImportService","clusteringService","logger","router","s","Router","upload","storage","memoryStorage","limits","fileSize","files","fields","fileFilter","_req","file","cb","f","sanitizedFilename","originalname","replace","b","allowedExtensions","fileExtension","toLowerCase","substring","lastIndexOf","allowedTypes","includes","mimetype","Error","post","single","req","res","status","json","error","user","id","size","buffer","length","sourceFormat","importId","startImport","storeUploadedFile","sessionId","message","filename","console","useAiExtraction","body","parseResult","parseUploadedFile","useAI","subjects","errors","presetId","presetResult","loadPresetCurriculum","get","params","getImportProgress","progress","result","confirmImport","created","limit","parseInt","query","history","getImportHistory","delete","cancelImport","grade","subject","success","importRecord","finalizeImport","totalExpectations","options","clusters","clusterExpectations","reclusterExpectations","getClusters","analysis","analyzeClusterQuality"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculumImport.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\nimport multer from 'multer';\nimport { curriculumImportService } from '../services/curriculumImportService';\nimport { clusteringService } from '../services/clusteringService';\nimport logger from '../logger';\n\n// Use global Express.Request type extended with user property\n\nconst router = express.Router();\n\n// Configure multer for file uploads with enhanced security\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n    files: 1, // Only allow 1 file per request\n    fields: 10, // Limit number of fields\n  },\n  fileFilter: (_req, file, cb: multer.FileFilterCallback) => {\n    // Sanitize filename\n    const sanitizedFilename = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n    if (sanitizedFilename !== file.originalname) {\n      file.originalname = sanitizedFilename;\n    }\n\n    // Check file extension as well as MIME type\n    const allowedExtensions = ['.csv', '.pdf', '.docx'];\n    const fileExtension = file.originalname\n      .toLowerCase()\n      .substring(file.originalname.lastIndexOf('.'));\n\n    const allowedTypes = [\n      'text/csv',\n      'application/pdf',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/octet-stream', // Some browsers send this for DOCX\n    ];\n\n    if (allowedTypes.includes(file.mimetype) && allowedExtensions.includes(fileExtension)) {\n      cb(null, true);\n    } else {\n      cb(\n        new Error(\n          `Invalid file type. Only CSV, PDF, and DOCX files are allowed. Received: ${file.mimetype} with extension ${fileExtension}`,\n        ),\n      );\n    }\n  },\n});\n\n// POST /api/curriculum/import/upload - Upload and parse curriculum file (Planner agent style)\nrouter.post(\n  '/upload',\n  upload.single('file') as unknown as express.RequestHandler,\n  async (req: Request, res: Response) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({\n          error: 'No file uploaded',\n        });\n      }\n\n      if (!req.user?.id) {\n        return res.status(401).json({\n          error: 'User not authenticated',\n        });\n      }\n\n      // Additional file validation\n      if (req.file.size === 0) {\n        return res.status(400).json({\n          error: 'File is empty',\n        });\n      }\n\n      // Validate file buffer is not null\n      if (!req.file.buffer || req.file.buffer.length === 0) {\n        return res.status(400).json({\n          error: 'Invalid file content',\n        });\n      }\n\n      // Start import session\n      let sourceFormat: 'pdf' | 'docx' | 'csv' | 'manual' = 'manual';\n      if (req.file.mimetype === 'application/pdf') {\n        sourceFormat = 'pdf';\n      } else if (\n        req.file.mimetype ===\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ) {\n        sourceFormat = 'docx';\n      } else if (req.file.mimetype === 'text/csv') {\n        sourceFormat = 'csv';\n      }\n\n      const importId = await curriculumImportService.startImport(\n        req.user.id,\n        1, // Default grade, can be updated later\n        'General', // Default subject, can be updated later\n        sourceFormat,\n      );\n\n      // Store file content for parsing\n      await curriculumImportService.storeUploadedFile(importId, req.file);\n\n      res.json({\n        sessionId: importId,\n        message: 'File uploaded successfully',\n        filename: req.file.originalname,\n      });\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({\n        error: error instanceof Error ? error.message : 'Failed to process upload',\n      });\n    }\n  },\n);\n\n// POST /api/curriculum/import/parse - Parse uploaded file\nrouter.post('/parse', async (req: Request, res: Response) => {\n  try {\n    const { sessionId, useAiExtraction } = req.body;\n\n    if (!sessionId) {\n      return res.status(400).json({\n        error: 'Session ID is required',\n      });\n    }\n\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Parse the uploaded file\n    const parseResult = await curriculumImportService.parseUploadedFile(sessionId, {\n      useAI: useAiExtraction || true,\n    });\n\n    res.json({\n      message: 'File parsed successfully',\n      subjects: parseResult.subjects,\n      errors: parseResult.errors || [],\n    });\n  } catch (error) {\n    console.error('Parse error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to parse file',\n    });\n  }\n});\n\n// POST /api/curriculum/import/import-preset - Load preset curriculum\nrouter.post('/import-preset', async (req: Request, res: Response) => {\n  try {\n    const { presetId } = req.body;\n\n    if (!presetId) {\n      return res.status(400).json({\n        error: 'Preset ID is required',\n      });\n    }\n\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Load preset curriculum\n    const presetResult = await curriculumImportService.loadPresetCurriculum(req.user.id, presetId);\n\n    res.json({\n      sessionId: presetResult.sessionId,\n      message: 'Preset curriculum loaded successfully',\n      subjects: presetResult.subjects,\n    });\n  } catch (error) {\n    console.error('Preset load error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to load preset curriculum',\n    });\n  }\n});\n\n// GET /api/curriculum/import/:id/status - Check import status\nrouter.get('/:id/status', async (req: Request, res: Response) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    const status = await curriculumImportService.getImportProgress(importId);\n\n    if (!status) {\n      return res.status(404).json({\n        error: 'Import not found',\n      });\n    }\n\n    res.json(status);\n  } catch (error) {\n    console.error('Status check error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to get import status',\n    });\n  }\n});\n\n// POST /api/curriculum/import/:id/confirm - Confirm and finalize import\nrouter.post('/:id/confirm', async (req: Request, res: Response) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Check if import exists and is ready\n    const progress = await curriculumImportService.getImportProgress(importId);\n\n    if (!progress) {\n      return res.status(404).json({\n        error: 'Import not found',\n      });\n    }\n\n    if (progress.status !== 'READY_FOR_REVIEW') {\n      return res.status(400).json({\n        error: 'Import is not ready to be confirmed',\n      });\n    }\n\n    // Confirm the import and create expectations\n    const result = await curriculumImportService.confirmImport(importId);\n\n    res.json({\n      message: 'Import confirmed successfully',\n      importId,\n      created: result.created,\n    });\n  } catch (error) {\n    console.error('Confirm import error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to confirm import',\n    });\n  }\n});\n\n// GET /api/curriculum/import/history - Get user's import history\nrouter.get('/history', async (req: Request, res: Response) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    const limit = parseInt(req.query.limit as string) || 10;\n    // Note: offset is not supported by the service method yet\n\n    const history = await curriculumImportService.getImportHistory(req.user.id, limit);\n\n    res.json(history);\n  } catch (error) {\n    console.error('History error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to get import history',\n    });\n  }\n});\n\n// DELETE /api/curriculum/import/:id - Delete import and associated data\nrouter.delete('/:id', async (req: Request, res: Response) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    const result = await curriculumImportService.cancelImport(importId);\n\n    if (!result) {\n      return res.status(404).json({\n        error: 'Import not found',\n      });\n    }\n\n    res.json({ message: 'Import deleted successfully' });\n  } catch (error) {\n    console.error('Delete import error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to delete import',\n    });\n  }\n});\n\n// Phase 5 Routes - Additional clustering functionality\n\n// Start a new curriculum import session\nrouter.post('/start', async (req: Request, res: Response) => {\n  try {\n    const { grade, subject, sourceFormat } = req.body;\n\n    if (!grade || !subject || !sourceFormat) {\n      return res\n        .status(400)\n        .json({ error: 'Missing required fields: grade, subject, sourceFormat' });\n    }\n\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const importId = await curriculumImportService.startImport(\n      req.user.id,\n      grade,\n      subject,\n      sourceFormat,\n    );\n\n    res.json({ importId, message: 'Import session started successfully' });\n  } catch (error) {\n    logger.error({ error }, 'Failed to start curriculum import');\n    res.status(500).json({ error: 'Failed to start import session' });\n  }\n});\n\n// Get import progress\nrouter.get('/:importId/progress', async (req: Request, res: Response) => {\n  try {\n    const { importId } = req.params;\n    const progress = await curriculumImportService.getImportProgress(importId);\n\n    if (!progress) {\n      return res.status(404).json({ error: 'Import session not found' });\n    }\n\n    res.json(progress);\n  } catch (error) {\n    logger.error({ error }, 'Failed to get import progress');\n    res.status(500).json({ error: 'Failed to get progress' });\n  }\n});\n\n// Cancel an import session\nrouter.post('/:importId/cancel', async (req: Request, res: Response) => {\n  try {\n    const { importId } = req.params;\n    const success = await curriculumImportService.cancelImport(importId);\n\n    if (!success) {\n      return res.status(404).json({ error: 'Import session not found or already completed' });\n    }\n\n    res.json({ message: 'Import cancelled successfully' });\n  } catch (error) {\n    logger.error({ error }, 'Failed to cancel import');\n    res.status(500).json({ error: 'Failed to cancel import' });\n  }\n});\n\n// POST /api/curriculum/import/:id - Finalize import and create curriculum expectations\nrouter.post('/:id', async (req: Request, res: Response) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.id) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Get the import session\n    const importRecord = await curriculumImportService.getImportProgress(importId);\n\n    if (!importRecord) {\n      return res.status(404).json({\n        error: 'Import session not found',\n      });\n    }\n\n    if (importRecord.status !== 'READY_FOR_REVIEW') {\n      return res.status(400).json({\n        error: 'Import is not ready to be finalized',\n      });\n    }\n\n    // Finalize the import and create curriculum expectations\n    const result = await curriculumImportService.finalizeImport(importId, req.user.id);\n\n    res.json({\n      message: 'Curriculum imported successfully',\n      totalExpectations: result.totalExpectations,\n      subjects: result.subjects,\n    });\n  } catch (error) {\n    console.error('Finalize import error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to finalize import',\n    });\n  }\n});\n\n// Clustering Routes (Phase 5)\n\n// Trigger clustering for an import\nrouter.post('/:importId/cluster', async (req: Request, res: Response) => {\n  try {\n    const { importId } = req.params;\n    const { options = {} } = req.body;\n\n    const clusters = await clusteringService.clusterExpectations(importId, options);\n\n    res.json({\n      message: 'Clustering completed successfully',\n      clusters,\n    });\n  } catch (error) {\n    logger.error({ error }, 'Failed to cluster expectations');\n    res.status(500).json({ error: 'Failed to cluster expectations' });\n  }\n});\n\n// Re-cluster with different parameters\nrouter.post('/:importId/recluster', async (req: Request, res: Response) => {\n  try {\n    const { importId } = req.params;\n    const { options = {} } = req.body;\n\n    const clusters = await clusteringService.reclusterExpectations(importId, options);\n\n    res.json({\n      message: 'Re-clustering completed successfully',\n      clusters,\n    });\n  } catch (error) {\n    logger.error({ error }, 'Failed to re-cluster expectations');\n    res.status(500).json({ error: 'Failed to re-cluster expectations' });\n  }\n});\n\n// Get clusters for an import\nrouter.get('/:importId/clusters', async (req: Request, res: Response) => {\n  try {\n    const { importId } = req.params;\n    const clusters = await clusteringService.getClusters(importId);\n\n    res.json(clusters);\n  } catch (error) {\n    logger.error({ error }, 'Failed to get clusters');\n    res.status(500).json({ error: 'Failed to get clusters' });\n  }\n});\n\n// Analyze cluster quality\nrouter.get('/:importId/clusters/quality', async (req: Request, res: Response) => {\n  try {\n    const { importId } = req.params;\n    const analysis = await clusteringService.analyzeClusterQuality(importId);\n\n    res.json(analysis);\n  } catch (error) {\n    logger.error({ error }, 'Failed to analyze cluster quality');\n    res.status(500).json({ error: 'Failed to analyze cluster quality' });\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}