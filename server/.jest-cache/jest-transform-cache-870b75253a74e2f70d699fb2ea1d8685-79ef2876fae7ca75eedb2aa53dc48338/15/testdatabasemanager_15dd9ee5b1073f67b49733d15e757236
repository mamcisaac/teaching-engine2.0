c5e6c5a159aaa779a624e0281837b09f
import { PrismaClient } from '@teaching-engine/database';
import { execSync } from 'child_process';
import { resolve } from 'path';
class TestDatabaseManager {
    clients = new Map();
    transactions = new Map();
    connectionStats = new Map();
    async createTestDatabase(workerId) {
        const databaseUrl = this.getDatabaseUrl(workerId);
        process.env.DATABASE_URL = databaseUrl;
        // Create a new Prisma client for this worker
        const client = new PrismaClient({
            datasources: {
                db: {
                    url: databaseUrl,
                },
            },
        });
        this.clients.set(workerId, client);
        this.connectionStats.set(workerId, { queries: 0, startTime: Date.now() });
        // Initialize the database schema
        const databasePath = resolve(process.cwd(), '..', 'packages', 'database');
        try {
            execSync('npx prisma db push --force-reset --skip-generate', {
                stdio: 'inherit',
                cwd: databasePath,
                env: { ...process.env, DATABASE_URL: databaseUrl },
            });
        }
        catch (error) {
            console.error(`Failed to create test database for worker ${workerId}:`, error);
            throw error;
        }
    }
    async isDatabaseHealthy(workerId) {
        const client = this.clients.get(workerId);
        if (!client)
            return false;
        try {
            await client.$queryRaw `SELECT 1`;
            return true;
        }
        catch {
            return false;
        }
    }
    async startTransaction(testId) {
        const workerId = process.env.JEST_WORKER_ID || 'default';
        const client = this.clients.get(workerId);
        if (!client) {
            throw new Error(`No client found for worker ${workerId}`);
        }
        // For SQLite, just return the client without transactions
        // We'll rely on resetting the database between tests
        this.transactions.set(testId, {
            client,
            rollback: async () => {
                // No-op for now
            },
        });
        return client;
    }
    async rollbackTransaction(testId) {
        const transaction = this.transactions.get(testId);
        if (transaction) {
            await transaction.rollback();
            this.transactions.delete(testId);
        }
    }
    async resetDatabase(workerId) {
        const client = this.clients.get(workerId);
        if (!client)
            return;
        try {
            // For SQLite, get all table names dynamically
            const tables = await client.$queryRaw `
        SELECT name FROM sqlite_master 
        WHERE type='table' 
        AND name NOT LIKE 'sqlite_%'
        AND name NOT LIKE '_prisma_migrations'
      `;
            // Disable foreign key constraints for SQLite
            await client.$executeRawUnsafe('PRAGMA foreign_keys = OFF');
            // Clear all tables
            for (const { name } of tables) {
                await client.$executeRawUnsafe(`DELETE FROM "${name}"`);
            }
            // Reset autoincrement sequences
            await client.$executeRawUnsafe(`DELETE FROM sqlite_sequence`);
            // Re-enable foreign key constraints
            await client.$executeRawUnsafe('PRAGMA foreign_keys = ON');
        }
        catch (error) {
            console.error(`Failed to reset database for worker ${workerId}:`, error);
            throw error;
        }
    }
    async getConnectionStats(workerId) {
        const stats = this.connectionStats.get(workerId);
        if (!stats)
            return null;
        return {
            queries: stats.queries,
            uptime: Date.now() - stats.startTime,
            workerId,
        };
    }
    async cleanup() {
        // Disconnect all clients
        for (const [workerId, client] of this.clients) {
            try {
                await client.$disconnect();
            }
            catch (error) {
                console.error(`Failed to disconnect client for worker ${workerId}:`, error);
            }
        }
        this.clients.clear();
        this.transactions.clear();
        this.connectionStats.clear();
    }
    getPrismaClient(workerId) {
        let client = this.clients.get(workerId);
        if (!client) {
            // Create client on demand if it doesn't exist
            const databaseUrl = this.getDatabaseUrl(workerId);
            process.env.DATABASE_URL = databaseUrl;
            client = new PrismaClient({
                datasources: {
                    db: {
                        url: databaseUrl,
                    },
                },
            });
            this.clients.set(workerId, client);
            this.connectionStats.set(workerId, { queries: 0, startTime: Date.now() });
        }
        return client;
    }
    async executeWithRetry(fn, retries = 3) {
        let lastError = null;
        for (let i = 0; i < retries; i++) {
            try {
                return await fn();
            }
            catch (error) {
                lastError = error;
                // If it's a database locked error, wait before retrying
                if (lastError.message.includes('database is locked')) {
                    await new Promise((resolve) => setTimeout(resolve, 100 * (i + 1)));
                }
                else {
                    // For other errors, don't retry
                    throw error;
                }
            }
        }
        throw lastError || new Error('Failed after retries');
    }
    getDatabaseUrl(workerId) {
        // Use a unique database file for each worker to avoid conflicts
        const dbPath = resolve(process.cwd(), 'tests', `test-${workerId}.db`);
        return `file:${dbPath}`;
    }
}
// Export a singleton instance
export const testDb = new TestDatabaseManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,