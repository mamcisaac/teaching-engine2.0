f2cec61c10bea740623866f57dcb8e6a
/* istanbul ignore next */
function cov_1kcr3of4bt() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/gptPlanningAgent.ts";
  var hash = "2231b018a013060b325536812912ae5e8002986e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/gptPlanningAgent.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "1": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 36
        }
      },
      "2": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 29,
          column: 34
        }
      },
      "3": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "4": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 89
        }
      },
      "5": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 25
        }
      },
      "6": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 64
        }
      },
      "7": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "8": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "9": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "10": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 97
        }
      },
      "11": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 76
        }
      },
      "12": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "13": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 47
        }
      },
      "14": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "15": {
        start: {
          line: 63,
          column: 29
        },
        end: {
          line: 63,
          column: 73
        }
      },
      "16": {
        start: {
          line: 65,
          column: 34
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "17": {
        start: {
          line: 65,
          column: 90
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "18": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 112
        }
      },
      "19": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 90
        }
      },
      "20": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 85
        }
      },
      "21": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 83,
          column: 14
        }
      },
      "22": {
        start: {
          line: 76,
          column: 55
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "23": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 70
        }
      },
      "24": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 87,
          column: 115
        }
      },
      "25": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 84
        }
      },
      "26": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "27": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 112,
          column: 59
        }
      },
      "28": {
        start: {
          line: 113,
          column: 27
        },
        end: {
          line: 126,
          column: 33
        }
      },
      "29": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 49
        }
      },
      "30": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "31": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "32": {
        start: {
          line: 137,
          column: 29
        },
        end: {
          line: 137,
          column: 74
        }
      },
      "33": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 142,
          column: 14
        }
      },
      "34": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 59
        }
      },
      "35": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 14
        }
      },
      "36": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 177,
          column: 37
        }
      },
      "37": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "38": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "39": {
        start: {
          line: 193,
          column: 31
        },
        end: {
          line: 202,
          column: 14
        }
      },
      "40": {
        start: {
          line: 203,
          column: 36
        },
        end: {
          line: 203,
          column: 75
        }
      },
      "41": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "42": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 55
        }
      },
      "43": {
        start: {
          line: 207,
          column: 27
        },
        end: {
          line: 207,
          column: 54
        }
      },
      "44": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 53
        }
      },
      "45": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 62
        }
      },
      "46": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 221,
          column: 14
        }
      },
      "47": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 228,
          column: 26
        }
      },
      "48": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "49": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "50": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 276,
          column: 17
        }
      },
      "51": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 239,
          column: 27
        }
      },
      "52": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 30
        }
      },
      "53": {
        start: {
          line: 244,
          column: 24
        },
        end: {
          line: 250,
          column: 27
        }
      },
      "54": {
        start: {
          line: 251,
          column: 24
        },
        end: {
          line: 251,
          column: 30
        }
      },
      "55": {
        start: {
          line: 255,
          column: 24
        },
        end: {
          line: 261,
          column: 27
        }
      },
      "56": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 30
        }
      },
      "57": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 271,
          column: 27
        }
      },
      "58": {
        start: {
          line: 272,
          column: 24
        },
        end: {
          line: 272,
          column: 30
        }
      },
      "59": {
        start: {
          line: 275,
          column: 24
        },
        end: {
          line: 275,
          column: 75
        }
      },
      "60": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 78
        }
      },
      "61": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 284,
          column: 19
        }
      },
      "62": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 23
        }
      },
      "63": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 64
        }
      },
      "64": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "65": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 22
        }
      },
      "66": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 302,
          column: 12
        }
      },
      "67": {
        start: {
          line: 297,
          column: 59
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "68": {
        start: {
          line: 309,
          column: 34
        },
        end: {
          line: 321,
          column: 10
        }
      },
      "69": {
        start: {
          line: 322,
          column: 28
        },
        end: {
          line: 322,
          column: 30
        }
      },
      "70": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "71": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "72": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 330,
          column: 19
        }
      },
      "73": {
        start: {
          line: 334,
          column: 26
        },
        end: {
          line: 334,
          column: 45
        }
      },
      "74": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "75": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "76": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "77": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 39
        }
      },
      "78": {
        start: {
          line: 353,
          column: 29
        },
        end: {
          line: 353,
          column: 50
        }
      },
      "79": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "80": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 119
        }
      },
      "81": {
        start: {
          line: 357,
          column: 13
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "82": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 106
        }
      },
      "83": {
        start: {
          line: 360,
          column: 13
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "84": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 128
        }
      },
      "85": {
        start: {
          line: 363,
          column: 13
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "86": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 222
        }
      },
      "87": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 162
        }
      },
      "88": {
        start: {
          line: 371,
          column: 22
        },
        end: {
          line: 371,
          column: 32
        }
      },
      "89": {
        start: {
          line: 372,
          column: 26
        },
        end: {
          line: 372,
          column: 40
        }
      },
      "90": {
        start: {
          line: 373,
          column: 32
        },
        end: {
          line: 373,
          column: 67
        }
      },
      "91": {
        start: {
          line: 374,
          column: 27
        },
        end: {
          line: 374,
          column: 42
        }
      },
      "92": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 62
        }
      },
      "93": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 54
        }
      },
      "94": {
        start: {
          line: 382,
          column: 26
        },
        end: {
          line: 382,
          column: 68
        }
      },
      "95": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "96": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "97": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 60
        }
      },
      "98": {
        start: {
          line: 392,
          column: 32
        },
        end: {
          line: 392,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 28
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 45
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 82
          },
          end: {
            line: 65,
            column: 83
          }
        },
        loc: {
          start: {
            line: 65,
            column: 90
          },
          end: {
            line: 68,
            column: 13
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 76,
            column: 47
          },
          end: {
            line: 76,
            column: 48
          }
        },
        loc: {
          start: {
            line: 76,
            column: 55
          },
          end: {
            line: 79,
            column: 17
          }
        },
        line: 76
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 42
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 119,
            column: 17
          },
          end: {
            line: 119,
            column: 18
          }
        },
        loc: {
          start: {
            line: 119,
            column: 24
          },
          end: {
            line: 119,
            column: 49
          }
        },
        line: 119
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 45
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 156
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 44
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 227
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 52
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 292
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 297,
            column: 42
          },
          end: {
            line: 297,
            column: 43
          }
        },
        loc: {
          start: {
            line: 297,
            column: 59
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 297
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 34
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 307
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 38
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 352
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 370,
            column: 5
          }
        },
        loc: {
          start: {
            line: 370,
            column: 20
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 370
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 28
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 381
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 68,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 68,
            column: 15
          }
        }, {
          start: {
            line: 68,
            column: 19
          },
          end: {
            line: 68,
            column: 21
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 22
          },
          end: {
            line: 66,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 22
          },
          end: {
            line: 66,
            column: 28
          }
        }, {
          start: {
            line: 66,
            column: 32
          },
          end: {
            line: 66,
            column: 34
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 45
          },
          end: {
            line: 73,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 45
          },
          end: {
            line: 73,
            column: 74
          }
        }, {
          start: {
            line: 73,
            column: 78
          },
          end: {
            line: 73,
            column: 79
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 77,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 77,
            column: 32
          }
        }, {
          start: {
            line: 77,
            column: 36
          },
          end: {
            line: 77,
            column: 38
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 137,
            column: 29
          },
          end: {
            line: 137,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 29
          },
          end: {
            line: 137,
            column: 68
          }
        }, {
          start: {
            line: 137,
            column: 72
          },
          end: {
            line: 137,
            column: 74
          }
        }],
        line: 137
      },
      "7": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "8": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 241,
            column: 21
          }
        }, {
          start: {
            line: 242,
            column: 20
          },
          end: {
            line: 252,
            column: 21
          }
        }, {
          start: {
            line: 253,
            column: 20
          },
          end: {
            line: 263,
            column: 21
          }
        }, {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 273,
            column: 21
          }
        }, {
          start: {
            line: 274,
            column: 20
          },
          end: {
            line: 275,
            column: 75
          }
        }],
        line: 231
      },
      "9": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "10": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 20
          }
        }, {
          start: {
            line: 294,
            column: 24
          },
          end: {
            line: 294,
            column: 49
          }
        }],
        line: 294
      },
      "11": {
        loc: {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "12": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "13": {
        loc: {
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }],
        line: 354
      },
      "14": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 354,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 354,
            column: 45
          }
        }, {
          start: {
            line: 354,
            column: 49
          },
          end: {
            line: 354,
            column: 82
          }
        }],
        line: 354
      },
      "15": {
        loc: {
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: 360,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }],
        line: 357
      },
      "16": {
        loc: {
          start: {
            line: 357,
            column: 17
          },
          end: {
            line: 357,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 17
          },
          end: {
            line: 357,
            column: 46
          }
        }, {
          start: {
            line: 357,
            column: 50
          },
          end: {
            line: 357,
            column: 79
          }
        }],
        line: 357
      },
      "17": {
        loc: {
          start: {
            line: 360,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: 363,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }],
        line: 360
      },
      "18": {
        loc: {
          start: {
            line: 360,
            column: 17
          },
          end: {
            line: 360,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 17
          },
          end: {
            line: 360,
            column: 50
          }
        }, {
          start: {
            line: 360,
            column: 54
          },
          end: {
            line: 360,
            column: 89
          }
        }],
        line: 360
      },
      "19": {
        loc: {
          start: {
            line: 363,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: 366,
            column: 13
          },
          end: {
            line: 368,
            column: 9
          }
        }],
        line: 363
      },
      "20": {
        loc: {
          start: {
            line: 363,
            column: 17
          },
          end: {
            line: 363,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 17
          },
          end: {
            line: 363,
            column: 46
          }
        }, {
          start: {
            line: 363,
            column: 50
          },
          end: {
            line: 363,
            column: 79
          }
        }],
        line: 363
      },
      "21": {
        loc: {
          start: {
            line: 373,
            column: 32
          },
          end: {
            line: 373,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 373,
            column: 50
          },
          end: {
            line: 373,
            column: 51
          }
        }, {
          start: {
            line: 373,
            column: 54
          },
          end: {
            line: 373,
            column: 67
          }
        }],
        line: 373
      },
      "22": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "23": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 43
          }
        }, {
          start: {
            line: 385,
            column: 47
          },
          end: {
            line: 385,
            column: 85
          }
        }],
        line: 385
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/gptPlanningAgent.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/gptPlanningAgent.ts"],
      sourcesContent: ["import { prisma } from '../prisma';\nimport { openai } from './llmService';\nimport { z } from 'zod';\nimport logger from '../logger';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Schema for agent responses\nconst AgentResponseSchema = z.object({\n  message: z.string(),\n  actions: z\n    .array(\n      z.object({\n        type: z.enum([\n          'generate_activity',\n          'generate_plan',\n          'analyze_coverage',\n          'show_suggestions',\n        ]),\n        parameters: z.record(z.unknown()),\n      }),\n    )\n    .optional(),\n  suggestions: z.array(z.string()).optional(),\n  data: z.record(z.unknown()).optional(),\n});\n\ninterface ConversationContext {\n  sessionId: string;\n  userId: number;\n  recentMessages: Array<{ role: string; content: string }>;\n  currentFocus?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport class GPTPlanningAgentService {\n  private conversationContexts = new Map<string, ConversationContext>();\n\n  /**\n   * Start a new conversation session\n   */\n  async startSession(userId: number): Promise<string> {\n    const sessionId = uuidv4();\n\n    this.conversationContexts.set(sessionId, {\n      sessionId,\n      userId,\n      recentMessages: [],\n      metadata: {\n        startTime: new Date(),\n        messageCount: 0,\n      },\n    });\n\n    // TODO: Implement persistent conversation logging\n    // Consider using DaybookEntry or dedicated conversation log table\n    logger.info(`Planning session started for user ${userId}, session ${sessionId}`);\n\n    return sessionId;\n  }\n\n  /**\n   * Process a user message and generate response with actions\n   */\n  async processMessage(\n    sessionId: string,\n    message: string,\n  ): Promise<{\n    message: string;\n    actions?: Array<{ type: string; payload?: Record<string, unknown> }>;\n    actionResults?: unknown[];\n    suggestions?: string[];\n    data?: Record<string, unknown>;\n    error?: boolean;\n  }> {\n    const context = this.conversationContexts.get(sessionId);\n    if (!context) {\n      throw new Error('Invalid session');\n    }\n\n    try {\n      // TODO: Implement persistent message logging for conversation history\n      logger.info(`User message in session ${sessionId}: ${message.substring(0, 100)}...`);\n\n      // Add to context\n      context.recentMessages.push({ role: 'user', content: message });\n      if (context.recentMessages.length > 10) {\n        context.recentMessages.shift(); // Keep only recent messages\n      }\n\n      // Analyze user intent\n      const intent = await this.analyzeIntent(message, context);\n\n      // Generate response based on intent\n      const response = await this.generateResponse(intent, context);\n\n      // Execute any actions\n      const actionResults = await this.executeActions(\n        response.actions?.map((a) => ({\n          type: a.type || '',\n          payload: a.parameters,\n        })) || [],\n        context,\n      );\n\n      // TODO: Implement persistent response logging for conversation history\n      logger.info(`Assistant response in session ${sessionId}: ${response.message.substring(0, 100)}...`);\n\n      // Update context\n      context.recentMessages.push({ role: 'assistant', content: response.message });\n      context.metadata!.messageCount = ((context.metadata!.messageCount as number) || 0) + 1;\n\n      return {\n        message: response.message,\n        actions: response.actions?.map((a) => ({\n          type: a.type || '',\n          payload: a.parameters,\n        })),\n        actionResults,\n        suggestions: response.suggestions,\n        data: response.data,\n      };\n    } catch (error) {\n      logger.error('Error processing planning message:', error);\n\n      const errorMessage =\n        'I apologize, but I encountered an error. Could you please rephrase your request?';\n\n      // TODO: Implement persistent error logging for troubleshooting\n      logger.error(`Error response in session ${sessionId}: ${errorMessage}`);\n\n      return {\n        message: errorMessage,\n        error: true,\n      };\n    }\n  }\n\n  /**\n   * Analyze user intent from their message\n   */\n  private async analyzeIntent(message: string, context: ConversationContext) {\n    const systemPrompt = `You are an AI planning assistant for a Grade 1 French Immersion teacher.\nAnalyze the user's message and determine their intent.\n\nCommon intents:\n- Generate activities for specific outcomes or subjects\n- Create a weekly plan\n- Analyze curriculum coverage\n- Get teaching suggestions\n- Schedule activities\n- Ask about student progress\n- Request help with specific topics\n\nConsider the conversation context when determining intent.`;\n\n    const userPrompt = `Analyze this message from a teacher:\n\"${message}\"\n\nRecent conversation:\n${context.recentMessages\n  .slice(-3)\n  .map((m) => `${m.role}: ${m.content}`)\n  .join('\\n')}\n\nDetermine:\n1. Primary intent\n2. Key entities (subjects, outcomes, dates, etc.)\n3. Required actions\n4. Follow-up questions if needed`;\n\n    try {\n      const completion = await openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt },\n        ],\n        temperature: 0.3,\n        max_tokens: 500,\n      });\n\n      const analysis = completion.choices[0]?.message?.content || '';\n\n      return {\n        rawAnalysis: analysis,\n        message: message.toLowerCase(),\n        context,\n      };\n    } catch (error) {\n      logger.error('Error analyzing intent:', error);\n      return {\n        rawAnalysis: '',\n        message: message.toLowerCase(),\n        context,\n      };\n    }\n  }\n\n  /**\n   * Generate appropriate response based on intent\n   */\n  private async generateResponse(\n    intent: { rawAnalysis: string; message: string; context: ConversationContext },\n    _context: ConversationContext,\n  ) {\n    const systemPrompt = `You are a helpful AI planning assistant for a Grade 1 French Immersion teacher.\n\nYour capabilities:\n- Generate curriculum-aligned activities\n- Create weekly lesson plans\n- Analyze curriculum coverage\n- Provide teaching suggestions\n- Help with scheduling\n\nGuidelines:\n- Be concise but thorough\n- Use a friendly, professional tone\n- Suggest concrete actions when appropriate\n- Ask clarifying questions when needed\n- Reference curriculum outcomes when relevant\n\nRespond with a JSON object containing:\n- message: Your response to the teacher\n- actions: Array of actions to take (if any)\n- suggestions: Quick suggestions for next steps\n- data: Any relevant data to display`;\n\n    const userPrompt = `Based on this analysis:\n${intent.rawAnalysis}\n\nOriginal message: \"${intent.message}\"\n\nGenerate an appropriate response with any necessary actions.\n\nActions can be:\n- generate_activity: Create activities for curriculum expectations (redirects to ETFO planning)\n- generate_plan: Create a weekly plan (redirects to ETFO planning)\n- analyze_coverage: Show curriculum coverage analysis (redirects to curriculum expectations)\n- show_suggestions: Display activity suggestions (redirects to activity discovery)\n\nFormat response as JSON.`;\n\n    try {\n      const completion = await openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt },\n        ],\n        temperature: 0.7,\n        max_tokens: 1000,\n        response_format: { type: 'json_object' },\n      });\n\n      const responseContent = completion.choices[0]?.message?.content;\n      if (!responseContent) {\n        throw new Error('No response from AI');\n      }\n\n      const parsed = JSON.parse(responseContent);\n      return AgentResponseSchema.parse(parsed);\n    } catch (error) {\n      logger.error('Error generating response:', error);\n\n      // Fallback response\n      return {\n        message: this.generateFallbackResponse(intent.message),\n        actions: [],\n        suggestions: [\n          'Try asking about specific subjects or outcomes',\n          'Request a weekly plan',\n          'Ask for activity suggestions',\n        ],\n      };\n    }\n  }\n\n  /**\n   * Execute actions requested by the agent\n   */\n  private async executeActions(\n    actions: Array<{ type: string; payload?: Record<string, unknown> }>,\n    _context: ConversationContext,\n  ) {\n    const results = [];\n\n    for (const action of actions) {\n      try {\n        switch (action.type) {\n          case 'generate_activity': {\n            results.push({\n              type: 'activities_generated',\n              data: {\n                message:\n                  'Activity generation has been moved to the ETFO lesson planning workflow with Activity Discovery feature',\n                redirect: '/planner/lessons',\n              },\n            });\n            break;\n          }\n\n          case 'generate_plan': {\n            // TODO: Integrate with ETFO planning workflow API\n            results.push({\n              type: 'plan_generated',\n              data: {\n                message:\n                  'Plan generation is now handled through the ETFO 5-level planning workflow',\n                redirect: '/planner/dashboard',\n              },\n            });\n            break;\n          }\n\n          case 'analyze_coverage': {\n            // TODO: Integrate with curriculum expectations analysis API\n            results.push({\n              type: 'coverage_analysis',\n              data: {\n                message:\n                  'Coverage analysis is now available through curriculum expectations tracking',\n                redirect: '/curriculum',\n              },\n            });\n            break;\n          }\n\n          case 'show_suggestions': {\n            results.push({\n              type: 'suggestions_retrieved',\n              data: {\n                message:\n                  'Activity suggestions are now available through the Activity Discovery feature',\n                redirect: '/activity-library',\n              },\n            });\n            break;\n          }\n\n          default:\n            logger.warn(`Unknown action type: ${action.type}`);\n        }\n      } catch (error) {\n        logger.error(`Error executing action ${action.type}:`, error);\n        results.push({\n          type: 'error',\n          action: action.type,\n          error: error.message,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get conversation history for a session\n   */\n  async getConversationHistory(sessionId: string, userId: number) {\n    const context = this.conversationContexts.get(sessionId);\n    if (!context || context.userId !== userId) {\n      return [];\n    }\n\n    return context.recentMessages.map((msg, index) => ({\n      role: msg.role,\n      content: msg.content,\n      timestamp: new Date(Date.now() - (context.recentMessages.length - index) * 1000), // Approximate timestamps\n      metadata: null,\n    }));\n  }\n\n  /**\n   * Get quick action suggestions based on current context\n   */\n  async getQuickActions(userId: number) {\n    // Analyze recent activity to suggest relevant actions using ETFO planning system\n\n    const upcomingUnitPlans = await prisma.unitPlan.findMany({\n      where: {\n        userId,\n        startDate: {\n          gte: new Date(),\n          lte: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Next 30 days\n        },\n      },\n      include: {\n        lessonPlans: true,\n      },\n      take: 5,\n    });\n\n    const suggestions = [];\n\n    // Suggest lesson planning for upcoming unit plans with few lessons\n    for (const unitPlan of upcomingUnitPlans) {\n      if (unitPlan.lessonPlans.length < 3) {\n        suggestions.push({\n          label: `Create lesson plans for \"${unitPlan.title}\"`,\n          action: 'generate_activity',\n          parameters: { unitPlanId: unitPlan.id },\n        });\n      }\n    }\n\n    // Suggest weekly planning if it's near the weekend\n    const dayOfWeek = new Date().getDay();\n    if (dayOfWeek >= 4) {\n      // Thursday or later\n      suggestions.push({\n        label: \"Generate next week's plan\",\n        action: 'generate_plan',\n        parameters: { weekStart: this.getNextMonday() },\n      });\n    }\n\n    // Always include coverage analysis\n    suggestions.push({\n      label: 'Analyze curriculum coverage',\n      action: 'analyze_coverage',\n      parameters: {},\n    });\n\n    return suggestions.slice(0, 4); // Return top 4 suggestions\n  }\n\n  // Helper methods\n\n  private generateFallbackResponse(message: string): string {\n    const lowerMessage = message.toLowerCase();\n\n    if (lowerMessage.includes('activity') || lowerMessage.includes('activit\xE9')) {\n      return 'I can help you generate activities! Which subject or learning outcome would you like to focus on?';\n    } else if (lowerMessage.includes('plan') || lowerMessage.includes('week')) {\n      return 'I can create a weekly plan for you. Would you like me to generate one for next week?';\n    } else if (lowerMessage.includes('coverage') || lowerMessage.includes('curriculum')) {\n      return 'I can analyze your curriculum coverage. Would you like an overall analysis or focus on a specific subject?';\n    } else if (lowerMessage.includes('help') || lowerMessage.includes('aide')) {\n      return \"I'm here to help with:\\n\u2022 Generating curriculum-aligned activities\\n\u2022 Creating weekly lesson plans\\n\u2022 Analyzing curriculum coverage\\n\u2022 Providing teaching suggestions\\n\\nWhat would you like to work on?\";\n    } else {\n      return \"I'm your planning assistant. I can help generate activities, create weekly plans, or analyze curriculum coverage. What would you like to do?\";\n    }\n  }\n\n  private getNextMonday(): string {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const daysUntilMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n    const nextMonday = new Date(today);\n    nextMonday.setDate(today.getDate() + daysUntilMonday);\n    return nextMonday.toISOString().split('T')[0];\n  }\n\n  /**\n   * Clean up old sessions\n   */\n  async cleanupSessions() {\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n    // Remove old sessions from memory\n    for (const [sessionId, context] of this.conversationContexts.entries()) {\n      if (context.metadata?.startTime && context.metadata.startTime < oneDayAgo) {\n        this.conversationContexts.delete(sessionId);\n      }\n    }\n\n    // TODO: Implement database cleanup for old conversation records\n  }\n}\n\nexport const gptPlanningAgent = new GPTPlanningAgentService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2231b018a013060b325536812912ae5e8002986e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kcr3of4bt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kcr3of4bt();
import { prisma } from '../prisma';
import { openai } from './llmService';
import { z } from 'zod';
import logger from '../logger';
import { v4 as uuidv4 } from 'uuid';
// Schema for agent responses
const AgentResponseSchema =
/* istanbul ignore next */
(cov_1kcr3of4bt().s[0]++, z.object({
  message: z.string(),
  actions: z.array(z.object({
    type: z.enum(['generate_activity', 'generate_plan', 'analyze_coverage', 'show_suggestions']),
    parameters: z.record(z.unknown())
  })).optional(),
  suggestions: z.array(z.string()).optional(),
  data: z.record(z.unknown()).optional()
}));
export class GPTPlanningAgentService {
  conversationContexts =
  /* istanbul ignore next */
  (cov_1kcr3of4bt().s[1]++, new Map());
  /**
   * Start a new conversation session
   */
  async startSession(userId) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[0]++;
    const sessionId =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[2]++, uuidv4());
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[3]++;
    this.conversationContexts.set(sessionId, {
      sessionId,
      userId,
      recentMessages: [],
      metadata: {
        startTime: new Date(),
        messageCount: 0
      }
    });
    // TODO: Implement persistent conversation logging
    // Consider using DaybookEntry or dedicated conversation log table
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[4]++;
    logger.info(`Planning session started for user ${userId}, session ${sessionId}`);
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[5]++;
    return sessionId;
  }
  /**
   * Process a user message and generate response with actions
   */
  async processMessage(sessionId, message) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[1]++;
    const context =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[6]++, this.conversationContexts.get(sessionId));
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[7]++;
    if (!context) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().b[0][0]++;
      cov_1kcr3of4bt().s[8]++;
      throw new Error('Invalid session');
    } else
    /* istanbul ignore next */
    {
      cov_1kcr3of4bt().b[0][1]++;
    }
    cov_1kcr3of4bt().s[9]++;
    try {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[10]++;
      // TODO: Implement persistent message logging for conversation history
      logger.info(`User message in session ${sessionId}: ${message.substring(0, 100)}...`);
      // Add to context
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[11]++;
      context.recentMessages.push({
        role: 'user',
        content: message
      });
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[12]++;
      if (context.recentMessages.length > 10) {
        /* istanbul ignore next */
        cov_1kcr3of4bt().b[1][0]++;
        cov_1kcr3of4bt().s[13]++;
        context.recentMessages.shift(); // Keep only recent messages
      } else
      /* istanbul ignore next */
      {
        cov_1kcr3of4bt().b[1][1]++;
      }
      // Analyze user intent
      const intent =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[14]++, await this.analyzeIntent(message, context));
      // Generate response based on intent
      const response =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[15]++, await this.generateResponse(intent, context));
      // Execute any actions
      const actionResults =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[16]++, await this.executeActions(
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[2][0]++, response.actions?.map(a => {
        /* istanbul ignore next */
        cov_1kcr3of4bt().f[2]++;
        cov_1kcr3of4bt().s[17]++;
        return {
          type:
          /* istanbul ignore next */
          (cov_1kcr3of4bt().b[3][0]++, a.type) ||
          /* istanbul ignore next */
          (cov_1kcr3of4bt().b[3][1]++, ''),
          payload: a.parameters
        };
      })) ||
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[2][1]++, []), context));
      // TODO: Implement persistent response logging for conversation history
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[18]++;
      logger.info(`Assistant response in session ${sessionId}: ${response.message.substring(0, 100)}...`);
      // Update context
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[19]++;
      context.recentMessages.push({
        role: 'assistant',
        content: response.message
      });
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[20]++;
      context.metadata.messageCount = (
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[4][0]++, context.metadata.messageCount) ||
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[4][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[21]++;
      return {
        message: response.message,
        actions: response.actions?.map(a => {
          /* istanbul ignore next */
          cov_1kcr3of4bt().f[3]++;
          cov_1kcr3of4bt().s[22]++;
          return {
            type:
            /* istanbul ignore next */
            (cov_1kcr3of4bt().b[5][0]++, a.type) ||
            /* istanbul ignore next */
            (cov_1kcr3of4bt().b[5][1]++, ''),
            payload: a.parameters
          };
        }),
        actionResults,
        suggestions: response.suggestions,
        data: response.data
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[23]++;
      logger.error('Error processing planning message:', error);
      const errorMessage =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[24]++, 'I apologize, but I encountered an error. Could you please rephrase your request?');
      // TODO: Implement persistent error logging for troubleshooting
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[25]++;
      logger.error(`Error response in session ${sessionId}: ${errorMessage}`);
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[26]++;
      return {
        message: errorMessage,
        error: true
      };
    }
  }
  /**
   * Analyze user intent from their message
   */
  async analyzeIntent(message, context) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[4]++;
    const systemPrompt =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[27]++, `You are an AI planning assistant for a Grade 1 French Immersion teacher.
Analyze the user's message and determine their intent.

Common intents:
- Generate activities for specific outcomes or subjects
- Create a weekly plan
- Analyze curriculum coverage
- Get teaching suggestions
- Schedule activities
- Ask about student progress
- Request help with specific topics

Consider the conversation context when determining intent.`);
    const userPrompt =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[28]++, `Analyze this message from a teacher:
"${message}"

Recent conversation:
${context.recentMessages.slice(-3).map(m => {
      /* istanbul ignore next */
      cov_1kcr3of4bt().f[5]++;
      cov_1kcr3of4bt().s[29]++;
      return `${m.role}: ${m.content}`;
    }).join('\n')}

Determine:
1. Primary intent
2. Key entities (subjects, outcomes, dates, etc.)
3. Required actions
4. Follow-up questions if needed`);
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[30]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[31]++, await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{
          role: 'system',
          content: systemPrompt
        }, {
          role: 'user',
          content: userPrompt
        }],
        temperature: 0.3,
        max_tokens: 500
      }));
      const analysis =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[32]++,
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[6][0]++, completion.choices[0]?.message?.content) ||
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[6][1]++, ''));
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[33]++;
      return {
        rawAnalysis: analysis,
        message: message.toLowerCase(),
        context
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[34]++;
      logger.error('Error analyzing intent:', error);
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[35]++;
      return {
        rawAnalysis: '',
        message: message.toLowerCase(),
        context
      };
    }
  }
  /**
   * Generate appropriate response based on intent
   */
  async generateResponse(intent, _context) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[6]++;
    const systemPrompt =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[36]++, `You are a helpful AI planning assistant for a Grade 1 French Immersion teacher.

Your capabilities:
- Generate curriculum-aligned activities
- Create weekly lesson plans
- Analyze curriculum coverage
- Provide teaching suggestions
- Help with scheduling

Guidelines:
- Be concise but thorough
- Use a friendly, professional tone
- Suggest concrete actions when appropriate
- Ask clarifying questions when needed
- Reference curriculum outcomes when relevant

Respond with a JSON object containing:
- message: Your response to the teacher
- actions: Array of actions to take (if any)
- suggestions: Quick suggestions for next steps
- data: Any relevant data to display`);
    const userPrompt =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[37]++, `Based on this analysis:
${intent.rawAnalysis}

Original message: "${intent.message}"

Generate an appropriate response with any necessary actions.

Actions can be:
- generate_activity: Create activities for curriculum expectations (redirects to ETFO planning)
- generate_plan: Create a weekly plan (redirects to ETFO planning)
- analyze_coverage: Show curriculum coverage analysis (redirects to curriculum expectations)
- show_suggestions: Display activity suggestions (redirects to activity discovery)

Format response as JSON.`);
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[38]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[39]++, await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{
          role: 'system',
          content: systemPrompt
        }, {
          role: 'user',
          content: userPrompt
        }],
        temperature: 0.7,
        max_tokens: 1000,
        response_format: {
          type: 'json_object'
        }
      }));
      const responseContent =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[40]++, completion.choices[0]?.message?.content);
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[41]++;
      if (!responseContent) {
        /* istanbul ignore next */
        cov_1kcr3of4bt().b[7][0]++;
        cov_1kcr3of4bt().s[42]++;
        throw new Error('No response from AI');
      } else
      /* istanbul ignore next */
      {
        cov_1kcr3of4bt().b[7][1]++;
      }
      const parsed =
      /* istanbul ignore next */
      (cov_1kcr3of4bt().s[43]++, JSON.parse(responseContent));
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[44]++;
      return AgentResponseSchema.parse(parsed);
    } catch (error) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[45]++;
      logger.error('Error generating response:', error);
      // Fallback response
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[46]++;
      return {
        message: this.generateFallbackResponse(intent.message),
        actions: [],
        suggestions: ['Try asking about specific subjects or outcomes', 'Request a weekly plan', 'Ask for activity suggestions']
      };
    }
  }
  /**
   * Execute actions requested by the agent
   */
  async executeActions(actions, _context) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[7]++;
    const results =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[47]++, []);
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[48]++;
    for (const action of actions) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[49]++;
      try {
        /* istanbul ignore next */
        cov_1kcr3of4bt().s[50]++;
        switch (action.type) {
          case 'generate_activity':
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[8][0]++;
            {
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[51]++;
              results.push({
                type: 'activities_generated',
                data: {
                  message: 'Activity generation has been moved to the ETFO lesson planning workflow with Activity Discovery feature',
                  redirect: '/planner/lessons'
                }
              });
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[52]++;
              break;
            }
          case 'generate_plan':
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[8][1]++;
            {
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[53]++;
              // TODO: Integrate with ETFO planning workflow API
              results.push({
                type: 'plan_generated',
                data: {
                  message: 'Plan generation is now handled through the ETFO 5-level planning workflow',
                  redirect: '/planner/dashboard'
                }
              });
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[54]++;
              break;
            }
          case 'analyze_coverage':
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[8][2]++;
            {
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[55]++;
              // TODO: Integrate with curriculum expectations analysis API
              results.push({
                type: 'coverage_analysis',
                data: {
                  message: 'Coverage analysis is now available through curriculum expectations tracking',
                  redirect: '/curriculum'
                }
              });
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[56]++;
              break;
            }
          case 'show_suggestions':
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[8][3]++;
            {
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[57]++;
              results.push({
                type: 'suggestions_retrieved',
                data: {
                  message: 'Activity suggestions are now available through the Activity Discovery feature',
                  redirect: '/activity-library'
                }
              });
              /* istanbul ignore next */
              cov_1kcr3of4bt().s[58]++;
              break;
            }
          default:
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[8][4]++;
            cov_1kcr3of4bt().s[59]++;
            logger.warn(`Unknown action type: ${action.type}`);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1kcr3of4bt().s[60]++;
        logger.error(`Error executing action ${action.type}:`, error);
        /* istanbul ignore next */
        cov_1kcr3of4bt().s[61]++;
        results.push({
          type: 'error',
          action: action.type,
          error: error.message
        });
      }
    }
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[62]++;
    return results;
  }
  /**
   * Get conversation history for a session
   */
  async getConversationHistory(sessionId, userId) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[8]++;
    const context =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[63]++, this.conversationContexts.get(sessionId));
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1kcr3of4bt().b[10][0]++, !context) ||
    /* istanbul ignore next */
    (cov_1kcr3of4bt().b[10][1]++, context.userId !== userId)) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().b[9][0]++;
      cov_1kcr3of4bt().s[65]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1kcr3of4bt().b[9][1]++;
    }
    cov_1kcr3of4bt().s[66]++;
    return context.recentMessages.map((msg, index) => {
      /* istanbul ignore next */
      cov_1kcr3of4bt().f[9]++;
      cov_1kcr3of4bt().s[67]++;
      return {
        role: msg.role,
        content: msg.content,
        timestamp: new Date(Date.now() - (context.recentMessages.length - index) * 1000),
        // Approximate timestamps
        metadata: null
      };
    });
  }
  /**
   * Get quick action suggestions based on current context
   */
  async getQuickActions(userId) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[10]++;
    // Analyze recent activity to suggest relevant actions using ETFO planning system
    const upcomingUnitPlans =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[68]++, await prisma.unitPlan.findMany({
      where: {
        userId,
        startDate: {
          gte: new Date(),
          lte: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // Next 30 days
        }
      },
      include: {
        lessonPlans: true
      },
      take: 5
    }));
    const suggestions =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[69]++, []);
    // Suggest lesson planning for upcoming unit plans with few lessons
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[70]++;
    for (const unitPlan of upcomingUnitPlans) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[71]++;
      if (unitPlan.lessonPlans.length < 3) {
        /* istanbul ignore next */
        cov_1kcr3of4bt().b[11][0]++;
        cov_1kcr3of4bt().s[72]++;
        suggestions.push({
          label: `Create lesson plans for "${unitPlan.title}"`,
          action: 'generate_activity',
          parameters: {
            unitPlanId: unitPlan.id
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1kcr3of4bt().b[11][1]++;
      }
    }
    // Suggest weekly planning if it's near the weekend
    const dayOfWeek =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[73]++, new Date().getDay());
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[74]++;
    if (dayOfWeek >= 4) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().b[12][0]++;
      cov_1kcr3of4bt().s[75]++;
      // Thursday or later
      suggestions.push({
        label: "Generate next week's plan",
        action: 'generate_plan',
        parameters: {
          weekStart: this.getNextMonday()
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1kcr3of4bt().b[12][1]++;
    }
    // Always include coverage analysis
    cov_1kcr3of4bt().s[76]++;
    suggestions.push({
      label: 'Analyze curriculum coverage',
      action: 'analyze_coverage',
      parameters: {}
    });
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[77]++;
    return suggestions.slice(0, 4); // Return top 4 suggestions
  }
  // Helper methods
  generateFallbackResponse(message) {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[11]++;
    const lowerMessage =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[78]++, message.toLowerCase());
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_1kcr3of4bt().b[14][0]++, lowerMessage.includes('activity')) ||
    /* istanbul ignore next */
    (cov_1kcr3of4bt().b[14][1]++, lowerMessage.includes('activité'))) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().b[13][0]++;
      cov_1kcr3of4bt().s[80]++;
      return 'I can help you generate activities! Which subject or learning outcome would you like to focus on?';
    } else {
      /* istanbul ignore next */
      cov_1kcr3of4bt().b[13][1]++;
      cov_1kcr3of4bt().s[81]++;
      if (
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[16][0]++, lowerMessage.includes('plan')) ||
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[16][1]++, lowerMessage.includes('week'))) {
        /* istanbul ignore next */
        cov_1kcr3of4bt().b[15][0]++;
        cov_1kcr3of4bt().s[82]++;
        return 'I can create a weekly plan for you. Would you like me to generate one for next week?';
      } else {
        /* istanbul ignore next */
        cov_1kcr3of4bt().b[15][1]++;
        cov_1kcr3of4bt().s[83]++;
        if (
        /* istanbul ignore next */
        (cov_1kcr3of4bt().b[18][0]++, lowerMessage.includes('coverage')) ||
        /* istanbul ignore next */
        (cov_1kcr3of4bt().b[18][1]++, lowerMessage.includes('curriculum'))) {
          /* istanbul ignore next */
          cov_1kcr3of4bt().b[17][0]++;
          cov_1kcr3of4bt().s[84]++;
          return 'I can analyze your curriculum coverage. Would you like an overall analysis or focus on a specific subject?';
        } else {
          /* istanbul ignore next */
          cov_1kcr3of4bt().b[17][1]++;
          cov_1kcr3of4bt().s[85]++;
          if (
          /* istanbul ignore next */
          (cov_1kcr3of4bt().b[20][0]++, lowerMessage.includes('help')) ||
          /* istanbul ignore next */
          (cov_1kcr3of4bt().b[20][1]++, lowerMessage.includes('aide'))) {
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[19][0]++;
            cov_1kcr3of4bt().s[86]++;
            return "I'm here to help with:\n• Generating curriculum-aligned activities\n• Creating weekly lesson plans\n• Analyzing curriculum coverage\n• Providing teaching suggestions\n\nWhat would you like to work on?";
          } else {
            /* istanbul ignore next */
            cov_1kcr3of4bt().b[19][1]++;
            cov_1kcr3of4bt().s[87]++;
            return "I'm your planning assistant. I can help generate activities, create weekly plans, or analyze curriculum coverage. What would you like to do?";
          }
        }
      }
    }
  }
  getNextMonday() {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[12]++;
    const today =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[88]++, new Date());
    const dayOfWeek =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[89]++, today.getDay());
    const daysUntilMonday =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[90]++, dayOfWeek === 0 ?
    /* istanbul ignore next */
    (cov_1kcr3of4bt().b[21][0]++, 1) :
    /* istanbul ignore next */
    (cov_1kcr3of4bt().b[21][1]++, 8 - dayOfWeek));
    const nextMonday =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[91]++, new Date(today));
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[92]++;
    nextMonday.setDate(today.getDate() + daysUntilMonday);
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[93]++;
    return nextMonday.toISOString().split('T')[0];
  }
  /**
   * Clean up old sessions
   */
  async cleanupSessions() {
    /* istanbul ignore next */
    cov_1kcr3of4bt().f[13]++;
    const oneDayAgo =
    /* istanbul ignore next */
    (cov_1kcr3of4bt().s[94]++, new Date(Date.now() - 24 * 60 * 60 * 1000));
    // Remove old sessions from memory
    /* istanbul ignore next */
    cov_1kcr3of4bt().s[95]++;
    for (const [sessionId, context] of this.conversationContexts.entries()) {
      /* istanbul ignore next */
      cov_1kcr3of4bt().s[96]++;
      if (
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[23][0]++, context.metadata?.startTime) &&
      /* istanbul ignore next */
      (cov_1kcr3of4bt().b[23][1]++, context.metadata.startTime < oneDayAgo)) {
        /* istanbul ignore next */
        cov_1kcr3of4bt().b[22][0]++;
        cov_1kcr3of4bt().s[97]++;
        this.conversationContexts.delete(sessionId);
      } else
      /* istanbul ignore next */
      {
        cov_1kcr3of4bt().b[22][1]++;
      }
    }
    // TODO: Implement database cleanup for old conversation records
  }
}
export const gptPlanningAgent =
/* istanbul ignore next */
(cov_1kcr3of4bt().s[98]++, new GPTPlanningAgentService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,