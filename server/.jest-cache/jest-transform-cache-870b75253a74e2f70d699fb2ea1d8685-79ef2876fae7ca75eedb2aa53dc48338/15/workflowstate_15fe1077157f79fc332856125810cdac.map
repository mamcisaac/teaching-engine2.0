{"version":3,"names":["cov_1swhb22g5d","actualCoverage","Router","workflowStateService","ETFOLevel","router","s","get","req","res","f","user","id","b","status","json","error","userId","workflowState","getUserWorkflowState","console","level","params","toUpperCase","Object","values","includes","access","canAccessLevel","post","entityId","body","levelEnum","validation","validateLevelCompletion","ETFO_LEVEL_METADATA","ETFO_LEVEL_SEQUENCE","levels","sequence"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/workflow-state.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { workflowStateService, ETFOLevel } from '../services/workflowStateService';\n\nconst router = Router();\n\n/**\n * GET /api/workflow/state\n * Get the current workflow state for the authenticated user\n */\nrouter.get('/state', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const userId = req.user.id;\n    const workflowState = await workflowStateService.getUserWorkflowState(userId);\n\n    res.json(workflowState);\n  } catch (error) {\n    console.error('Error fetching workflow state:', error);\n    res.status(500).json({ error: 'Failed to fetch workflow state' });\n  }\n});\n\n/**\n * GET /api/workflow/access/:level\n * Check if user can access a specific level\n */\nrouter.get('/access/:level', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const userId = req.user.id;\n    const level = req.params.level.toUpperCase() as ETFOLevel;\n\n    if (!Object.values(ETFOLevel).includes(level)) {\n      return res.status(400).json({ error: 'Invalid level' });\n    }\n\n    const access = await workflowStateService.canAccessLevel(userId, level);\n    res.json(access);\n  } catch (error) {\n    console.error('Error checking level access:', error);\n    res.status(500).json({ error: 'Failed to check level access' });\n  }\n});\n\n/**\n * POST /api/workflow/validate\n * Validate that an entity has all required fields for its level\n */\nrouter.post('/validate', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const { level, entityId } = req.body;\n\n    if (!level || !entityId) {\n      return res.status(400).json({ error: 'Missing required fields: level, entityId' });\n    }\n\n    const levelEnum = level.toUpperCase() as ETFOLevel;\n    if (!Object.values(ETFOLevel).includes(levelEnum)) {\n      return res.status(400).json({ error: 'Invalid level' });\n    }\n\n    const userId = req.user.id;\n    const validation = await workflowStateService.validateLevelCompletion(\n      userId,\n      levelEnum,\n      entityId,\n    );\n\n    res.json(validation);\n  } catch (error) {\n    console.error('Error validating level completion:', error);\n    res.status(500).json({ error: 'Failed to validate level completion' });\n  }\n});\n\n/**\n * GET /api/workflow/metadata\n * Get metadata for all workflow levels\n */\nrouter.get('/metadata', async (req: Request, res) => {\n  try {\n    const { ETFO_LEVEL_METADATA, ETFO_LEVEL_SEQUENCE } = await import(\n      '../services/workflowStateService'\n    );\n\n    res.json({\n      levels: ETFO_LEVEL_METADATA,\n      sequence: ETFO_LEVEL_SEQUENCE,\n    });\n  } catch (error) {\n    console.error('Error fetching workflow metadata:', error);\n    res.status(500).json({ error: 'Failed to fetch workflow metadata' });\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}