{"version":3,"names":["cov_1kcr3of4bt","actualCoverage","prisma","openai","z","logger","v4","uuidv4","AgentResponseSchema","s","object","message","string","actions","array","type","enum","parameters","record","unknown","optional","suggestions","data","GPTPlanningAgentService","conversationContexts","Map","startSession","userId","f","sessionId","set","recentMessages","metadata","startTime","Date","messageCount","info","processMessage","context","get","b","Error","substring","push","role","content","length","shift","intent","analyzeIntent","response","generateResponse","actionResults","executeActions","map","a","payload","error","errorMessage","systemPrompt","userPrompt","slice","m","join","completion","chat","completions","create","model","messages","temperature","max_tokens","analysis","choices","rawAnalysis","toLowerCase","_context","response_format","responseContent","parsed","JSON","parse","generateFallbackResponse","results","action","redirect","warn","getConversationHistory","msg","index","timestamp","now","getQuickActions","upcomingUnitPlans","unitPlan","findMany","where","startDate","gte","lte","include","lessonPlans","take","label","title","unitPlanId","id","dayOfWeek","getDay","weekStart","getNextMonday","lowerMessage","includes","today","daysUntilMonday","nextMonday","setDate","getDate","toISOString","split","cleanupSessions","oneDayAgo","entries","delete","gptPlanningAgent"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/gptPlanningAgent.ts"],"sourcesContent":["import { prisma } from '../prisma';\nimport { openai } from './llmService';\nimport { z } from 'zod';\nimport logger from '../logger';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Schema for agent responses\nconst AgentResponseSchema = z.object({\n  message: z.string(),\n  actions: z\n    .array(\n      z.object({\n        type: z.enum([\n          'generate_activity',\n          'generate_plan',\n          'analyze_coverage',\n          'show_suggestions',\n        ]),\n        parameters: z.record(z.unknown()),\n      }),\n    )\n    .optional(),\n  suggestions: z.array(z.string()).optional(),\n  data: z.record(z.unknown()).optional(),\n});\n\ninterface ConversationContext {\n  sessionId: string;\n  userId: number;\n  recentMessages: Array<{ role: string; content: string }>;\n  currentFocus?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport class GPTPlanningAgentService {\n  private conversationContexts = new Map<string, ConversationContext>();\n\n  /**\n   * Start a new conversation session\n   */\n  async startSession(userId: number): Promise<string> {\n    const sessionId = uuidv4();\n\n    this.conversationContexts.set(sessionId, {\n      sessionId,\n      userId,\n      recentMessages: [],\n      metadata: {\n        startTime: new Date(),\n        messageCount: 0,\n      },\n    });\n\n    // TODO: Implement persistent conversation logging\n    // Consider using DaybookEntry or dedicated conversation log table\n    logger.info(`Planning session started for user ${userId}, session ${sessionId}`);\n\n    return sessionId;\n  }\n\n  /**\n   * Process a user message and generate response with actions\n   */\n  async processMessage(\n    sessionId: string,\n    message: string,\n  ): Promise<{\n    message: string;\n    actions?: Array<{ type: string; payload?: Record<string, unknown> }>;\n    actionResults?: unknown[];\n    suggestions?: string[];\n    data?: Record<string, unknown>;\n    error?: boolean;\n  }> {\n    const context = this.conversationContexts.get(sessionId);\n    if (!context) {\n      throw new Error('Invalid session');\n    }\n\n    try {\n      // TODO: Implement persistent message logging for conversation history\n      logger.info(`User message in session ${sessionId}: ${message.substring(0, 100)}...`);\n\n      // Add to context\n      context.recentMessages.push({ role: 'user', content: message });\n      if (context.recentMessages.length > 10) {\n        context.recentMessages.shift(); // Keep only recent messages\n      }\n\n      // Analyze user intent\n      const intent = await this.analyzeIntent(message, context);\n\n      // Generate response based on intent\n      const response = await this.generateResponse(intent, context);\n\n      // Execute any actions\n      const actionResults = await this.executeActions(\n        response.actions?.map((a) => ({\n          type: a.type || '',\n          payload: a.parameters,\n        })) || [],\n        context,\n      );\n\n      // TODO: Implement persistent response logging for conversation history\n      logger.info(`Assistant response in session ${sessionId}: ${response.message.substring(0, 100)}...`);\n\n      // Update context\n      context.recentMessages.push({ role: 'assistant', content: response.message });\n      context.metadata!.messageCount = ((context.metadata!.messageCount as number) || 0) + 1;\n\n      return {\n        message: response.message,\n        actions: response.actions?.map((a) => ({\n          type: a.type || '',\n          payload: a.parameters,\n        })),\n        actionResults,\n        suggestions: response.suggestions,\n        data: response.data,\n      };\n    } catch (error) {\n      logger.error('Error processing planning message:', error);\n\n      const errorMessage =\n        'I apologize, but I encountered an error. Could you please rephrase your request?';\n\n      // TODO: Implement persistent error logging for troubleshooting\n      logger.error(`Error response in session ${sessionId}: ${errorMessage}`);\n\n      return {\n        message: errorMessage,\n        error: true,\n      };\n    }\n  }\n\n  /**\n   * Analyze user intent from their message\n   */\n  private async analyzeIntent(message: string, context: ConversationContext) {\n    const systemPrompt = `You are an AI planning assistant for a Grade 1 French Immersion teacher.\nAnalyze the user's message and determine their intent.\n\nCommon intents:\n- Generate activities for specific outcomes or subjects\n- Create a weekly plan\n- Analyze curriculum coverage\n- Get teaching suggestions\n- Schedule activities\n- Ask about student progress\n- Request help with specific topics\n\nConsider the conversation context when determining intent.`;\n\n    const userPrompt = `Analyze this message from a teacher:\n\"${message}\"\n\nRecent conversation:\n${context.recentMessages\n  .slice(-3)\n  .map((m) => `${m.role}: ${m.content}`)\n  .join('\\n')}\n\nDetermine:\n1. Primary intent\n2. Key entities (subjects, outcomes, dates, etc.)\n3. Required actions\n4. Follow-up questions if needed`;\n\n    try {\n      const completion = await openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt },\n        ],\n        temperature: 0.3,\n        max_tokens: 500,\n      });\n\n      const analysis = completion.choices[0]?.message?.content || '';\n\n      return {\n        rawAnalysis: analysis,\n        message: message.toLowerCase(),\n        context,\n      };\n    } catch (error) {\n      logger.error('Error analyzing intent:', error);\n      return {\n        rawAnalysis: '',\n        message: message.toLowerCase(),\n        context,\n      };\n    }\n  }\n\n  /**\n   * Generate appropriate response based on intent\n   */\n  private async generateResponse(\n    intent: { rawAnalysis: string; message: string; context: ConversationContext },\n    _context: ConversationContext,\n  ) {\n    const systemPrompt = `You are a helpful AI planning assistant for a Grade 1 French Immersion teacher.\n\nYour capabilities:\n- Generate curriculum-aligned activities\n- Create weekly lesson plans\n- Analyze curriculum coverage\n- Provide teaching suggestions\n- Help with scheduling\n\nGuidelines:\n- Be concise but thorough\n- Use a friendly, professional tone\n- Suggest concrete actions when appropriate\n- Ask clarifying questions when needed\n- Reference curriculum outcomes when relevant\n\nRespond with a JSON object containing:\n- message: Your response to the teacher\n- actions: Array of actions to take (if any)\n- suggestions: Quick suggestions for next steps\n- data: Any relevant data to display`;\n\n    const userPrompt = `Based on this analysis:\n${intent.rawAnalysis}\n\nOriginal message: \"${intent.message}\"\n\nGenerate an appropriate response with any necessary actions.\n\nActions can be:\n- generate_activity: Create activities for curriculum expectations (redirects to ETFO planning)\n- generate_plan: Create a weekly plan (redirects to ETFO planning)\n- analyze_coverage: Show curriculum coverage analysis (redirects to curriculum expectations)\n- show_suggestions: Display activity suggestions (redirects to activity discovery)\n\nFormat response as JSON.`;\n\n    try {\n      const completion = await openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userPrompt },\n        ],\n        temperature: 0.7,\n        max_tokens: 1000,\n        response_format: { type: 'json_object' },\n      });\n\n      const responseContent = completion.choices[0]?.message?.content;\n      if (!responseContent) {\n        throw new Error('No response from AI');\n      }\n\n      const parsed = JSON.parse(responseContent);\n      return AgentResponseSchema.parse(parsed);\n    } catch (error) {\n      logger.error('Error generating response:', error);\n\n      // Fallback response\n      return {\n        message: this.generateFallbackResponse(intent.message),\n        actions: [],\n        suggestions: [\n          'Try asking about specific subjects or outcomes',\n          'Request a weekly plan',\n          'Ask for activity suggestions',\n        ],\n      };\n    }\n  }\n\n  /**\n   * Execute actions requested by the agent\n   */\n  private async executeActions(\n    actions: Array<{ type: string; payload?: Record<string, unknown> }>,\n    _context: ConversationContext,\n  ) {\n    const results = [];\n\n    for (const action of actions) {\n      try {\n        switch (action.type) {\n          case 'generate_activity': {\n            results.push({\n              type: 'activities_generated',\n              data: {\n                message:\n                  'Activity generation has been moved to the ETFO lesson planning workflow with Activity Discovery feature',\n                redirect: '/planner/lessons',\n              },\n            });\n            break;\n          }\n\n          case 'generate_plan': {\n            // TODO: Integrate with ETFO planning workflow API\n            results.push({\n              type: 'plan_generated',\n              data: {\n                message:\n                  'Plan generation is now handled through the ETFO 5-level planning workflow',\n                redirect: '/planner/dashboard',\n              },\n            });\n            break;\n          }\n\n          case 'analyze_coverage': {\n            // TODO: Integrate with curriculum expectations analysis API\n            results.push({\n              type: 'coverage_analysis',\n              data: {\n                message:\n                  'Coverage analysis is now available through curriculum expectations tracking',\n                redirect: '/curriculum',\n              },\n            });\n            break;\n          }\n\n          case 'show_suggestions': {\n            results.push({\n              type: 'suggestions_retrieved',\n              data: {\n                message:\n                  'Activity suggestions are now available through the Activity Discovery feature',\n                redirect: '/activity-library',\n              },\n            });\n            break;\n          }\n\n          default:\n            logger.warn(`Unknown action type: ${action.type}`);\n        }\n      } catch (error) {\n        logger.error(`Error executing action ${action.type}:`, error);\n        results.push({\n          type: 'error',\n          action: action.type,\n          error: error.message,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get conversation history for a session\n   */\n  async getConversationHistory(sessionId: string, userId: number) {\n    const context = this.conversationContexts.get(sessionId);\n    if (!context || context.userId !== userId) {\n      return [];\n    }\n\n    return context.recentMessages.map((msg, index) => ({\n      role: msg.role,\n      content: msg.content,\n      timestamp: new Date(Date.now() - (context.recentMessages.length - index) * 1000), // Approximate timestamps\n      metadata: null,\n    }));\n  }\n\n  /**\n   * Get quick action suggestions based on current context\n   */\n  async getQuickActions(userId: number) {\n    // Analyze recent activity to suggest relevant actions using ETFO planning system\n\n    const upcomingUnitPlans = await prisma.unitPlan.findMany({\n      where: {\n        userId,\n        startDate: {\n          gte: new Date(),\n          lte: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Next 30 days\n        },\n      },\n      include: {\n        lessonPlans: true,\n      },\n      take: 5,\n    });\n\n    const suggestions = [];\n\n    // Suggest lesson planning for upcoming unit plans with few lessons\n    for (const unitPlan of upcomingUnitPlans) {\n      if (unitPlan.lessonPlans.length < 3) {\n        suggestions.push({\n          label: `Create lesson plans for \"${unitPlan.title}\"`,\n          action: 'generate_activity',\n          parameters: { unitPlanId: unitPlan.id },\n        });\n      }\n    }\n\n    // Suggest weekly planning if it's near the weekend\n    const dayOfWeek = new Date().getDay();\n    if (dayOfWeek >= 4) {\n      // Thursday or later\n      suggestions.push({\n        label: \"Generate next week's plan\",\n        action: 'generate_plan',\n        parameters: { weekStart: this.getNextMonday() },\n      });\n    }\n\n    // Always include coverage analysis\n    suggestions.push({\n      label: 'Analyze curriculum coverage',\n      action: 'analyze_coverage',\n      parameters: {},\n    });\n\n    return suggestions.slice(0, 4); // Return top 4 suggestions\n  }\n\n  // Helper methods\n\n  private generateFallbackResponse(message: string): string {\n    const lowerMessage = message.toLowerCase();\n\n    if (lowerMessage.includes('activity') || lowerMessage.includes('activité')) {\n      return 'I can help you generate activities! Which subject or learning outcome would you like to focus on?';\n    } else if (lowerMessage.includes('plan') || lowerMessage.includes('week')) {\n      return 'I can create a weekly plan for you. Would you like me to generate one for next week?';\n    } else if (lowerMessage.includes('coverage') || lowerMessage.includes('curriculum')) {\n      return 'I can analyze your curriculum coverage. Would you like an overall analysis or focus on a specific subject?';\n    } else if (lowerMessage.includes('help') || lowerMessage.includes('aide')) {\n      return \"I'm here to help with:\\n• Generating curriculum-aligned activities\\n• Creating weekly lesson plans\\n• Analyzing curriculum coverage\\n• Providing teaching suggestions\\n\\nWhat would you like to work on?\";\n    } else {\n      return \"I'm your planning assistant. I can help generate activities, create weekly plans, or analyze curriculum coverage. What would you like to do?\";\n    }\n  }\n\n  private getNextMonday(): string {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const daysUntilMonday = dayOfWeek === 0 ? 1 : 8 - dayOfWeek;\n    const nextMonday = new Date(today);\n    nextMonday.setDate(today.getDate() + daysUntilMonday);\n    return nextMonday.toISOString().split('T')[0];\n  }\n\n  /**\n   * Clean up old sessions\n   */\n  async cleanupSessions() {\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n    // Remove old sessions from memory\n    for (const [sessionId, context] of this.conversationContexts.entries()) {\n      if (context.metadata?.startTime && context.metadata.startTime < oneDayAgo) {\n        this.conversationContexts.delete(sessionId);\n      }\n    }\n\n    // TODO: Implement database cleanup for old conversation records\n  }\n}\n\nexport const gptPlanningAgent = new GPTPlanningAgentService();\n"],"mappingsiBU;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAjBV,SAASE,MAAM,QAAQ,WAAW;AAClC,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,CAAC,QAAQ,KAAK;AACvB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAEnC;AACA,MAAMC,mBAAmB;AAAA;AAAA,CAAAR,cAAA,GAAAS,CAAA,OAAGL,CAAC,CAACM,MAAM,CAAC;EACnCC,OAAO,EAAEP,CAAC,CAACQ,MAAM,EAAE;EACnBC,OAAO,EAAET,CAAC,CACPU,KAAK,CACJV,CAAC,CAACM,MAAM,CAAC;IACPK,IAAI,EAAEX,CAAC,CAACY,IAAI,CAAC,CACX,mBAAmB,EACnB,eAAe,EACf,kBAAkB,EAClB,kBAAkB,CACnB,CAAC;IACFC,UAAU,EAAEb,CAAC,CAACc,MAAM,CAACd,CAAC,CAACe,OAAO,EAAE;GACjC,CAAC,CACH,CACAC,QAAQ,EAAE;EACbC,WAAW,EAAEjB,CAAC,CAACU,KAAK,CAACV,CAAC,CAACQ,MAAM,EAAE,CAAC,CAACQ,QAAQ,EAAE;EAC3CE,IAAI,EAAElB,CAAC,CAACc,MAAM,CAACd,CAAC,CAACe,OAAO,EAAE,CAAC,CAACC,QAAQ;CACrC,CAAC;AAUF,OAAM,MAAOG,uBAAuB;EAC1BC,oBAAoB;EAAA;EAAA,CAAAxB,cAAA,GAAAS,CAAA,OAAG,IAAIgB,GAAG,EAA+B;EAErE;;;EAGA,MAAMC,YAAYA,CAACC,MAAc;IAAA;IAAA3B,cAAA,GAAA4B,CAAA;IAC/B,MAAMC,SAAS;IAAA;IAAA,CAAA7B,cAAA,GAAAS,CAAA,OAAGF,MAAM,EAAE;IAAC;IAAAP,cAAA,GAAAS,CAAA;IAE3B,IAAI,CAACe,oBAAoB,CAACM,GAAG,CAACD,SAAS,EAAE;MACvCA,SAAS;MACTF,MAAM;MACNI,cAAc,EAAE,EAAE;MAClBC,QAAQ,EAAE;QACRC,SAAS,EAAE,IAAIC,IAAI,EAAE;QACrBC,YAAY,EAAE;;KAEjB,CAAC;IAEF;IACA;IAAA;IAAAnC,cAAA,GAAAS,CAAA;IACAJ,MAAM,CAAC+B,IAAI,CAAC,qCAAqCT,MAAM,aAAaE,SAAS,EAAE,CAAC;IAAC;IAAA7B,cAAA,GAAAS,CAAA;IAEjF,OAAOoB,SAAS;EAClB;EAEA;;;EAGA,MAAMQ,cAAcA,CAClBR,SAAiB,EACjBlB,OAAe;IAAA;IAAAX,cAAA,GAAA4B,CAAA;IASf,MAAMU,OAAO;IAAA;IAAA,CAAAtC,cAAA,GAAAS,CAAA,OAAG,IAAI,CAACe,oBAAoB,CAACe,GAAG,CAACV,SAAS,CAAC;IAAC;IAAA7B,cAAA,GAAAS,CAAA;IACzD,IAAI,CAAC6B,OAAO,EAAE;MAAA;MAAAtC,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAS,CAAA;MACZ,MAAM,IAAIgC,KAAK,CAAC,iBAAiB,CAAC;IACpC,CAAC;IAAA;IAAA;MAAAzC,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAS,CAAA;IAED,IAAI;MAAA;MAAAT,cAAA,GAAAS,CAAA;MACF;MACAJ,MAAM,CAAC+B,IAAI,CAAC,2BAA2BP,SAAS,KAAKlB,OAAO,CAAC+B,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC;MAEpF;MAAA;MAAA1C,cAAA,GAAAS,CAAA;MACA6B,OAAO,CAACP,cAAc,CAACY,IAAI,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAElC;MAAO,CAAE,CAAC;MAAC;MAAAX,cAAA,GAAAS,CAAA;MAChE,IAAI6B,OAAO,CAACP,cAAc,CAACe,MAAM,GAAG,EAAE,EAAE;QAAA;QAAA9C,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAS,CAAA;QACtC6B,OAAO,CAACP,cAAc,CAACgB,KAAK,EAAE,CAAC,CAAC;MAClC,CAAC;MAAA;MAAA;QAAA/C,cAAA,GAAAwC,CAAA;MAAA;MAED;MACA,MAAMQ,MAAM;MAAA;MAAA,CAAAhD,cAAA,GAAAS,CAAA,QAAG,MAAM,IAAI,CAACwC,aAAa,CAACtC,OAAO,EAAE2B,OAAO,CAAC;MAEzD;MACA,MAAMY,QAAQ;MAAA;MAAA,CAAAlD,cAAA,GAAAS,CAAA,QAAG,MAAM,IAAI,CAAC0C,gBAAgB,CAACH,MAAM,EAAEV,OAAO,CAAC;MAE7D;MACA,MAAMc,aAAa;MAAA;MAAA,CAAApD,cAAA,GAAAS,CAAA,QAAG,MAAM,IAAI,CAAC4C,cAAc;MAC7C;MAAA,CAAArD,cAAA,GAAAwC,CAAA,UAAAU,QAAQ,CAACrC,OAAO,EAAEyC,GAAG,CAAEC,CAAC,IAAM;QAAA;QAAAvD,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAS,CAAA;QAAA;UAC5BM,IAAI;UAAE;UAAA,CAAAf,cAAA,GAAAwC,CAAA,UAAAe,CAAC,CAACxC,IAAI;UAAA;UAAA,CAAAf,cAAA,GAAAwC,CAAA,UAAI,EAAE;UAClBgB,OAAO,EAAED,CAAC,CAACtC;SACZ;OAAC,CAAC;MAAA;MAAA,CAAAjB,cAAA,GAAAwC,CAAA,UAAI,EAAE,GACTF,OAAO,CACR;MAED;MAAA;MAAAtC,cAAA,GAAAS,CAAA;MACAJ,MAAM,CAAC+B,IAAI,CAAC,iCAAiCP,SAAS,KAAKqB,QAAQ,CAACvC,OAAO,CAAC+B,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC;MAEnG;MAAA;MAAA1C,cAAA,GAAAS,CAAA;MACA6B,OAAO,CAACP,cAAc,CAACY,IAAI,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEK,QAAQ,CAACvC;MAAO,CAAE,CAAC;MAAC;MAAAX,cAAA,GAAAS,CAAA;MAC9E6B,OAAO,CAACN,QAAS,CAACG,YAAY,GAAG;MAAE;MAAA,CAAAnC,cAAA,GAAAwC,CAAA,UAAAF,OAAO,CAACN,QAAS,CAACG,YAAuB;MAAA;MAAA,CAAAnC,cAAA,GAAAwC,CAAA,UAAI,CAAC,KAAI,CAAC;MAAC;MAAAxC,cAAA,GAAAS,CAAA;MAEvF,OAAO;QACLE,OAAO,EAAEuC,QAAQ,CAACvC,OAAO;QACzBE,OAAO,EAAEqC,QAAQ,CAACrC,OAAO,EAAEyC,GAAG,CAAEC,CAAC,IAAM;UAAA;UAAAvD,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAS,CAAA;UAAA;YACrCM,IAAI;YAAE;YAAA,CAAAf,cAAA,GAAAwC,CAAA,UAAAe,CAAC,CAACxC,IAAI;YAAA;YAAA,CAAAf,cAAA,GAAAwC,CAAA,UAAI,EAAE;YAClBgB,OAAO,EAAED,CAAC,CAACtC;WACZ;SAAC,CAAC;QACHmC,aAAa;QACb/B,WAAW,EAAE6B,QAAQ,CAAC7B,WAAW;QACjCC,IAAI,EAAE4B,QAAQ,CAAC5B;OAChB;IACH,CAAC,CAAC,OAAOmC,KAAK,EAAE;MAAA;MAAAzD,cAAA,GAAAS,CAAA;MACdJ,MAAM,CAACoD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAEzD,MAAMC,YAAY;MAAA;MAAA,CAAA1D,cAAA,GAAAS,CAAA,QAChB,kFAAkF;MAEpF;MAAA;MAAAT,cAAA,GAAAS,CAAA;MACAJ,MAAM,CAACoD,KAAK,CAAC,6BAA6B5B,SAAS,KAAK6B,YAAY,EAAE,CAAC;MAAC;MAAA1D,cAAA,GAAAS,CAAA;MAExE,OAAO;QACLE,OAAO,EAAE+C,YAAY;QACrBD,KAAK,EAAE;OACR;IACH;EACF;EAEA;;;EAGQ,MAAMR,aAAaA,CAACtC,OAAe,EAAE2B,OAA4B;IAAA;IAAAtC,cAAA,GAAA4B,CAAA;IACvE,MAAM+B,YAAY;IAAA;IAAA,CAAA3D,cAAA,GAAAS,CAAA,QAAG;;;;;;;;;;;;2DAYkC;IAEvD,MAAMmD,UAAU;IAAA;IAAA,CAAA5D,cAAA,GAAAS,CAAA,QAAG;GACpBE,OAAO;;;EAGR2B,OAAO,CAACP,cAAc,CACrB8B,KAAK,CAAC,CAAC,CAAC,CAAC,CACTP,GAAG,CAAEQ,CAAC,IAAK;MAAA;MAAA9D,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAS,CAAA;MAAA,UAAGqD,CAAC,CAAClB,IAAI,KAAKkB,CAAC,CAACjB,OAAO,EAAE;IAAF,CAAE,CAAC,CACrCkB,IAAI,CAAC,IAAI,CAAC;;;;;;iCAMoB;IAAC;IAAA/D,cAAA,GAAAS,CAAA;IAE9B,IAAI;MACF,MAAMuD,UAAU;MAAA;MAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAAC8D,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QACtDC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,CACR;UAAEzB,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAEc;QAAY,CAAE,EACzC;UAAEf,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEe;QAAU,CAAE,CACtC;QACDU,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;OACb,CAAC;MAEF,MAAMC,QAAQ;MAAA;MAAA,CAAAxE,cAAA,GAAAS,CAAA;MAAG;MAAA,CAAAT,cAAA,GAAAwC,CAAA,UAAAwB,UAAU,CAACS,OAAO,CAAC,CAAC,CAAC,EAAE9D,OAAO,EAAEkC,OAAO;MAAA;MAAA,CAAA7C,cAAA,GAAAwC,CAAA,UAAI,EAAE;MAAC;MAAAxC,cAAA,GAAAS,CAAA;MAE/D,OAAO;QACLiE,WAAW,EAAEF,QAAQ;QACrB7D,OAAO,EAAEA,OAAO,CAACgE,WAAW,EAAE;QAC9BrC;OACD;IACH,CAAC,CAAC,OAAOmB,KAAK,EAAE;MAAA;MAAAzD,cAAA,GAAAS,CAAA;MACdJ,MAAM,CAACoD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAAC;MAAAzD,cAAA,GAAAS,CAAA;MAC/C,OAAO;QACLiE,WAAW,EAAE,EAAE;QACf/D,OAAO,EAAEA,OAAO,CAACgE,WAAW,EAAE;QAC9BrC;OACD;IACH;EACF;EAEA;;;EAGQ,MAAMa,gBAAgBA,CAC5BH,MAA8E,EAC9E4B,QAA6B;IAAA;IAAA5E,cAAA,GAAA4B,CAAA;IAE7B,MAAM+B,YAAY;IAAA;IAAA,CAAA3D,cAAA,GAAAS,CAAA,QAAG;;;;;;;;;;;;;;;;;;;;qCAoBY;IAEjC,MAAMmD,UAAU;IAAA;IAAA,CAAA5D,cAAA,GAAAS,CAAA,QAAG;EACrBuC,MAAM,CAAC0B,WAAW;;qBAEC1B,MAAM,CAACrC,OAAO;;;;;;;;;;yBAUV;IAAC;IAAAX,cAAA,GAAAS,CAAA;IAEtB,IAAI;MACF,MAAMuD,UAAU;MAAA;MAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAAC8D,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QACtDC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,CACR;UAAEzB,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAEc;QAAY,CAAE,EACzC;UAAEf,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEe;QAAU,CAAE,CACtC;QACDU,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE,IAAI;QAChBM,eAAe,EAAE;UAAE9D,IAAI,EAAE;QAAa;OACvC,CAAC;MAEF,MAAM+D,eAAe;MAAA;MAAA,CAAA9E,cAAA,GAAAS,CAAA,QAAGuD,UAAU,CAACS,OAAO,CAAC,CAAC,CAAC,EAAE9D,OAAO,EAAEkC,OAAO;MAAC;MAAA7C,cAAA,GAAAS,CAAA;MAChE,IAAI,CAACqE,eAAe,EAAE;QAAA;QAAA9E,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAS,CAAA;QACpB,MAAM,IAAIgC,KAAK,CAAC,qBAAqB,CAAC;MACxC,CAAC;MAAA;MAAA;QAAAzC,cAAA,GAAAwC,CAAA;MAAA;MAED,MAAMuC,MAAM;MAAA;MAAA,CAAA/E,cAAA,GAAAS,CAAA,QAAGuE,IAAI,CAACC,KAAK,CAACH,eAAe,CAAC;MAAC;MAAA9E,cAAA,GAAAS,CAAA;MAC3C,OAAOD,mBAAmB,CAACyE,KAAK,CAACF,MAAM,CAAC;IAC1C,CAAC,CAAC,OAAOtB,KAAK,EAAE;MAAA;MAAAzD,cAAA,GAAAS,CAAA;MACdJ,MAAM,CAACoD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAEjD;MAAA;MAAAzD,cAAA,GAAAS,CAAA;MACA,OAAO;QACLE,OAAO,EAAE,IAAI,CAACuE,wBAAwB,CAAClC,MAAM,CAACrC,OAAO,CAAC;QACtDE,OAAO,EAAE,EAAE;QACXQ,WAAW,EAAE,CACX,gDAAgD,EAChD,uBAAuB,EACvB,8BAA8B;OAEjC;IACH;EACF;EAEA;;;EAGQ,MAAMgC,cAAcA,CAC1BxC,OAAmE,EACnE+D,QAA6B;IAAA;IAAA5E,cAAA,GAAA4B,CAAA;IAE7B,MAAMuD,OAAO;IAAA;IAAA,CAAAnF,cAAA,GAAAS,CAAA,QAAG,EAAE;IAAC;IAAAT,cAAA,GAAAS,CAAA;IAEnB,KAAK,MAAM2E,MAAM,IAAIvE,OAAO,EAAE;MAAA;MAAAb,cAAA,GAAAS,CAAA;MAC5B,IAAI;QAAA;QAAAT,cAAA,GAAAS,CAAA;QACF,QAAQ2E,MAAM,CAACrE,IAAI;UACjB,KAAK,mBAAmB;YAAA;YAAAf,cAAA,GAAAwC,CAAA;YAAE;cAAA;cAAAxC,cAAA,GAAAS,CAAA;cACxB0E,OAAO,CAACxC,IAAI,CAAC;gBACX5B,IAAI,EAAE,sBAAsB;gBAC5BO,IAAI,EAAE;kBACJX,OAAO,EACL,yGAAyG;kBAC3G0E,QAAQ,EAAE;;eAEb,CAAC;cAAC;cAAArF,cAAA,GAAAS,CAAA;cACH;YACF;UAEA,KAAK,eAAe;YAAA;YAAAT,cAAA,GAAAwC,CAAA;YAAE;cAAA;cAAAxC,cAAA,GAAAS,CAAA;cACpB;cACA0E,OAAO,CAACxC,IAAI,CAAC;gBACX5B,IAAI,EAAE,gBAAgB;gBACtBO,IAAI,EAAE;kBACJX,OAAO,EACL,2EAA2E;kBAC7E0E,QAAQ,EAAE;;eAEb,CAAC;cAAC;cAAArF,cAAA,GAAAS,CAAA;cACH;YACF;UAEA,KAAK,kBAAkB;YAAA;YAAAT,cAAA,GAAAwC,CAAA;YAAE;cAAA;cAAAxC,cAAA,GAAAS,CAAA;cACvB;cACA0E,OAAO,CAACxC,IAAI,CAAC;gBACX5B,IAAI,EAAE,mBAAmB;gBACzBO,IAAI,EAAE;kBACJX,OAAO,EACL,6EAA6E;kBAC/E0E,QAAQ,EAAE;;eAEb,CAAC;cAAC;cAAArF,cAAA,GAAAS,CAAA;cACH;YACF;UAEA,KAAK,kBAAkB;YAAA;YAAAT,cAAA,GAAAwC,CAAA;YAAE;cAAA;cAAAxC,cAAA,GAAAS,CAAA;cACvB0E,OAAO,CAACxC,IAAI,CAAC;gBACX5B,IAAI,EAAE,uBAAuB;gBAC7BO,IAAI,EAAE;kBACJX,OAAO,EACL,+EAA+E;kBACjF0E,QAAQ,EAAE;;eAEb,CAAC;cAAC;cAAArF,cAAA,GAAAS,CAAA;cACH;YACF;UAEA;YAAA;YAAAT,cAAA,GAAAwC,CAAA;YAAAxC,cAAA,GAAAS,CAAA;YACEJ,MAAM,CAACiF,IAAI,CAAC,wBAAwBF,MAAM,CAACrE,IAAI,EAAE,CAAC;QACtD;MACF,CAAC,CAAC,OAAO0C,KAAK,EAAE;QAAA;QAAAzD,cAAA,GAAAS,CAAA;QACdJ,MAAM,CAACoD,KAAK,CAAC,0BAA0B2B,MAAM,CAACrE,IAAI,GAAG,EAAE0C,KAAK,CAAC;QAAC;QAAAzD,cAAA,GAAAS,CAAA;QAC9D0E,OAAO,CAACxC,IAAI,CAAC;UACX5B,IAAI,EAAE,OAAO;UACbqE,MAAM,EAAEA,MAAM,CAACrE,IAAI;UACnB0C,KAAK,EAAEA,KAAK,CAAC9C;SACd,CAAC;MACJ;IACF;IAAC;IAAAX,cAAA,GAAAS,CAAA;IAED,OAAO0E,OAAO;EAChB;EAEA;;;EAGA,MAAMI,sBAAsBA,CAAC1D,SAAiB,EAAEF,MAAc;IAAA;IAAA3B,cAAA,GAAA4B,CAAA;IAC5D,MAAMU,OAAO;IAAA;IAAA,CAAAtC,cAAA,GAAAS,CAAA,QAAG,IAAI,CAACe,oBAAoB,CAACe,GAAG,CAACV,SAAS,CAAC;IAAC;IAAA7B,cAAA,GAAAS,CAAA;IACzD;IAAI;IAAA,CAAAT,cAAA,GAAAwC,CAAA,YAACF,OAAO;IAAA;IAAA,CAAAtC,cAAA,GAAAwC,CAAA,WAAIF,OAAO,CAACX,MAAM,KAAKA,MAAM,GAAE;MAAA;MAAA3B,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAS,CAAA;MACzC,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAT,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAS,CAAA;IAED,OAAO6B,OAAO,CAACP,cAAc,CAACuB,GAAG,CAAC,CAACkC,GAAG,EAAEC,KAAK,KAAM;MAAA;MAAAzF,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAS,CAAA;MAAA;QACjDmC,IAAI,EAAE4C,GAAG,CAAC5C,IAAI;QACdC,OAAO,EAAE2C,GAAG,CAAC3C,OAAO;QACpB6C,SAAS,EAAE,IAAIxD,IAAI,CAACA,IAAI,CAACyD,GAAG,EAAE,GAAG,CAACrD,OAAO,CAACP,cAAc,CAACe,MAAM,GAAG2C,KAAK,IAAI,IAAI,CAAC;QAAE;QAClFzD,QAAQ,EAAE;OACX;KAAC,CAAC;EACL;EAEA;;;EAGA,MAAM4D,eAAeA,CAACjE,MAAc;IAAA;IAAA3B,cAAA,GAAA4B,CAAA;IAClC;IAEA,MAAMiE,iBAAiB;IAAA;IAAA,CAAA7F,cAAA,GAAAS,CAAA,QAAG,MAAMP,MAAM,CAAC4F,QAAQ,CAACC,QAAQ,CAAC;MACvDC,KAAK,EAAE;QACLrE,MAAM;QACNsE,SAAS,EAAE;UACTC,GAAG,EAAE,IAAIhE,IAAI,EAAE;UACfiE,GAAG,EAAE,IAAIjE,IAAI,CAACA,IAAI,CAACyD,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAE;;OAEzD;MACDS,OAAO,EAAE;QACPC,WAAW,EAAE;OACd;MACDC,IAAI,EAAE;KACP,CAAC;IAEF,MAAMjF,WAAW;IAAA;IAAA,CAAArB,cAAA,GAAAS,CAAA,QAAG,EAAE;IAEtB;IAAA;IAAAT,cAAA,GAAAS,CAAA;IACA,KAAK,MAAMqF,QAAQ,IAAID,iBAAiB,EAAE;MAAA;MAAA7F,cAAA,GAAAS,CAAA;MACxC,IAAIqF,QAAQ,CAACO,WAAW,CAACvD,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA9C,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAS,CAAA;QACnCY,WAAW,CAACsB,IAAI,CAAC;UACf4D,KAAK,EAAE,4BAA4BT,QAAQ,CAACU,KAAK,GAAG;UACpDpB,MAAM,EAAE,mBAAmB;UAC3BnE,UAAU,EAAE;YAAEwF,UAAU,EAAEX,QAAQ,CAACY;UAAE;SACtC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA1G,cAAA,GAAAwC,CAAA;MAAA;IACH;IAEA;IACA,MAAMmE,SAAS;IAAA;IAAA,CAAA3G,cAAA,GAAAS,CAAA,QAAG,IAAIyB,IAAI,EAAE,CAAC0E,MAAM,EAAE;IAAC;IAAA5G,cAAA,GAAAS,CAAA;IACtC,IAAIkG,SAAS,IAAI,CAAC,EAAE;MAAA;MAAA3G,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAS,CAAA;MAClB;MACAY,WAAW,CAACsB,IAAI,CAAC;QACf4D,KAAK,EAAE,2BAA2B;QAClCnB,MAAM,EAAE,eAAe;QACvBnE,UAAU,EAAE;UAAE4F,SAAS,EAAE,IAAI,CAACC,aAAa;QAAE;OAC9C,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA9G,cAAA,GAAAwC,CAAA;IAAA;IAED;IAAAxC,cAAA,GAAAS,CAAA;IACAY,WAAW,CAACsB,IAAI,CAAC;MACf4D,KAAK,EAAE,6BAA6B;MACpCnB,MAAM,EAAE,kBAAkB;MAC1BnE,UAAU,EAAE;KACb,CAAC;IAAC;IAAAjB,cAAA,GAAAS,CAAA;IAEH,OAAOY,WAAW,CAACwC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAClC;EAEA;EAEQqB,wBAAwBA,CAACvE,OAAe;IAAA;IAAAX,cAAA,GAAA4B,CAAA;IAC9C,MAAMmF,YAAY;IAAA;IAAA,CAAA/G,cAAA,GAAAS,CAAA,QAAGE,OAAO,CAACgE,WAAW,EAAE;IAAC;IAAA3E,cAAA,GAAAS,CAAA;IAE3C;IAAI;IAAA,CAAAT,cAAA,GAAAwC,CAAA,WAAAuE,YAAY,CAACC,QAAQ,CAAC,UAAU,CAAC;IAAA;IAAA,CAAAhH,cAAA,GAAAwC,CAAA,WAAIuE,YAAY,CAACC,QAAQ,CAAC,UAAU,CAAC,GAAE;MAAA;MAAAhH,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAS,CAAA;MAC1E,OAAO,mGAAmG;IAC5G,CAAC,MAAM;MAAA;MAAAT,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAS,CAAA;MAAA;MAAI;MAAA,CAAAT,cAAA,GAAAwC,CAAA,WAAAuE,YAAY,CAACC,QAAQ,CAAC,MAAM,CAAC;MAAA;MAAA,CAAAhH,cAAA,GAAAwC,CAAA,WAAIuE,YAAY,CAACC,QAAQ,CAAC,MAAM,CAAC,GAAE;QAAA;QAAAhH,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAS,CAAA;QACzE,OAAO,sFAAsF;MAC/F,CAAC,MAAM;QAAA;QAAAT,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAS,CAAA;QAAA;QAAI;QAAA,CAAAT,cAAA,GAAAwC,CAAA,WAAAuE,YAAY,CAACC,QAAQ,CAAC,UAAU,CAAC;QAAA;QAAA,CAAAhH,cAAA,GAAAwC,CAAA,WAAIuE,YAAY,CAACC,QAAQ,CAAC,YAAY,CAAC,GAAE;UAAA;UAAAhH,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAS,CAAA;UACnF,OAAO,4GAA4G;QACrH,CAAC,MAAM;UAAA;UAAAT,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAS,CAAA;UAAA;UAAI;UAAA,CAAAT,cAAA,GAAAwC,CAAA,WAAAuE,YAAY,CAACC,QAAQ,CAAC,MAAM,CAAC;UAAA;UAAA,CAAAhH,cAAA,GAAAwC,CAAA,WAAIuE,YAAY,CAACC,QAAQ,CAAC,MAAM,CAAC,GAAE;YAAA;YAAAhH,cAAA,GAAAwC,CAAA;YAAAxC,cAAA,GAAAS,CAAA;YACzE,OAAO,0MAA0M;UACnN,CAAC,MAAM;YAAA;YAAAT,cAAA,GAAAwC,CAAA;YAAAxC,cAAA,GAAAS,CAAA;YACL,OAAO,8IAA8I;UACvJ;QAAA;MAAA;IAAA;EACF;EAEQqG,aAAaA,CAAA;IAAA;IAAA9G,cAAA,GAAA4B,CAAA;IACnB,MAAMqF,KAAK;IAAA;IAAA,CAAAjH,cAAA,GAAAS,CAAA,QAAG,IAAIyB,IAAI,EAAE;IACxB,MAAMyE,SAAS;IAAA;IAAA,CAAA3G,cAAA,GAAAS,CAAA,QAAGwG,KAAK,CAACL,MAAM,EAAE;IAChC,MAAMM,eAAe;IAAA;IAAA,CAAAlH,cAAA,GAAAS,CAAA,QAAGkG,SAAS,KAAK,CAAC;IAAA;IAAA,CAAA3G,cAAA,GAAAwC,CAAA,WAAG,CAAC;IAAA;IAAA,CAAAxC,cAAA,GAAAwC,CAAA,WAAG,CAAC,GAAGmE,SAAS;IAC3D,MAAMQ,UAAU;IAAA;IAAA,CAAAnH,cAAA,GAAAS,CAAA,QAAG,IAAIyB,IAAI,CAAC+E,KAAK,CAAC;IAAC;IAAAjH,cAAA,GAAAS,CAAA;IACnC0G,UAAU,CAACC,OAAO,CAACH,KAAK,CAACI,OAAO,EAAE,GAAGH,eAAe,CAAC;IAAC;IAAAlH,cAAA,GAAAS,CAAA;IACtD,OAAO0G,UAAU,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/C;EAEA;;;EAGA,MAAMC,eAAeA,CAAA;IAAA;IAAAxH,cAAA,GAAA4B,CAAA;IACnB,MAAM6F,SAAS;IAAA;IAAA,CAAAzH,cAAA,GAAAS,CAAA,QAAG,IAAIyB,IAAI,CAACA,IAAI,CAACyD,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAE5D;IAAA;IAAA3F,cAAA,GAAAS,CAAA;IACA,KAAK,MAAM,CAACoB,SAAS,EAAES,OAAO,CAAC,IAAI,IAAI,CAACd,oBAAoB,CAACkG,OAAO,EAAE,EAAE;MAAA;MAAA1H,cAAA,GAAAS,CAAA;MACtE;MAAI;MAAA,CAAAT,cAAA,GAAAwC,CAAA,WAAAF,OAAO,CAACN,QAAQ,EAAEC,SAAS;MAAA;MAAA,CAAAjC,cAAA,GAAAwC,CAAA,WAAIF,OAAO,CAACN,QAAQ,CAACC,SAAS,GAAGwF,SAAS,GAAE;QAAA;QAAAzH,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAS,CAAA;QACzE,IAAI,CAACe,oBAAoB,CAACmG,MAAM,CAAC9F,SAAS,CAAC;MAC7C,CAAC;MAAA;MAAA;QAAA7B,cAAA,GAAAwC,CAAA;MAAA;IACH;IAEA;EACF;;AAGF,OAAO,MAAMoF,gBAAgB;AAAA;AAAA,CAAA5H,cAAA,GAAAS,CAAA,QAAG,IAAIc,uBAAuB,EAAE","ignoreList":[]}