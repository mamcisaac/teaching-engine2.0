{"version":3,"names":["cov_24fj9urirw","actualCoverage","Router","prisma","validate","z","generateLongRangePlanDraft","generatePlanSuggestions","router","s","longRangePlanCreateSchema","object","title","string","min","titleFr","optional","academicYear","regex","term","grade","number","int","max","subject","description","descriptionFr","goals","goalsFr","themes","array","expectationIds","overarchingQuestions","assessmentOverview","resourceNeeds","professionalGoals","longRangePlanUpdateSchema","partial","get","req","res","_next","f","userId","b","user","id","status","json","error","query","where","String","Number","plans","longRangePlan","findMany","orderBy","include","_count","select","unitPlans","expectations","err","plan","findFirst","params","expectation","code","startDate","lessonPlans","post","planData","body","create","data","length","validExpectations","curriculumExpectation","in","provided","found","map","e","longRangePlanExpectation","createMany","expectationId","longRangePlanId","updatedPlan","findUnique","put","updateData","existing","update","undefined","deleteMany","delete","end","termStructure","Array","isArray","draft","exp","type","strand","substrand","console","existingContent","join","suggestions"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/long-range-plans.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate } from '../validation';\nimport { z } from 'zod';\nimport { generateLongRangePlanDraft, generatePlanSuggestions } from '../services/aiDraftService';\n\nconst router = Router();\n\n// Validation schemas\nconst longRangePlanCreateSchema = z.object({\n  title: z.string().min(1),\n  titleFr: z.string().optional(),\n  academicYear: z.string().regex(/^\\d{4}-\\d{4}$/), // e.g., \"2024-2025\"\n  term: z.string().optional(),\n  grade: z.number().int().min(1).max(12),\n  subject: z.string().min(1),\n  description: z.string().optional(),\n  descriptionFr: z.string().optional(),\n  goals: z.string().optional(),\n  goalsFr: z.string().optional(),\n  themes: z.array(z.string()).optional(),\n  expectationIds: z.array(z.string()).optional(),\n  // ETFO-aligned fields\n  overarchingQuestions: z.string().optional(),\n  assessmentOverview: z.string().optional(),\n  resourceNeeds: z.string().optional(),\n  professionalGoals: z.string().optional(),\n});\n\nconst longRangePlanUpdateSchema = longRangePlanCreateSchema.partial();\n\n// Get all long-range plans for the authenticated user\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { academicYear, subject, grade } = req.query;\n\n    const where: Prisma.LongRangePlanWhereInput = { userId };\n    if (academicYear) where.academicYear = String(academicYear);\n    if (subject) where.subject = String(subject);\n    if (grade) where.grade = Number(grade);\n\n    const plans = await prisma.longRangePlan.findMany({\n      where,\n      orderBy: [{ academicYear: 'desc' }, { subject: 'asc' }, { grade: 'asc' }],\n      include: {\n        _count: {\n          select: {\n            unitPlans: true,\n            expectations: true,\n          },\n        },\n      },\n    });\n\n    res.json(plans);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single long-range plan\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const plan = await prisma.longRangePlan.findFirst({\n      where: {\n        id: req.params.id,\n        userId,\n      },\n      include: {\n        expectations: {\n          include: {\n            expectation: true,\n          },\n          orderBy: {\n            expectation: { code: 'asc' },\n          },\n        },\n        unitPlans: {\n          orderBy: { startDate: 'asc' },\n          include: {\n            _count: {\n              select: {\n                lessonPlans: true,\n                expectations: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    if (!plan) {\n      return res.status(404).json({ error: 'Long-range plan not found' });\n    }\n\n    res.json(plan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new long-range plan\nrouter.post('/', validate(longRangePlanCreateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationIds, themes, ...planData } = req.body;\n\n    const plan = await prisma.longRangePlan.create({\n      data: {\n        ...planData,\n        userId,\n        themes: themes || [],\n      },\n      include: {\n        expectations: {\n          include: { expectation: true },\n        },\n        _count: {\n          select: { unitPlans: true },\n        },\n      },\n    });\n\n    // Link curriculum expectations if provided\n    if (expectationIds && expectationIds.length > 0) {\n      // Validate expectation IDs exist\n      const validExpectations = await prisma.curriculumExpectation.findMany({\n        where: { id: { in: expectationIds } },\n        select: { id: true },\n      });\n\n      if (validExpectations.length !== expectationIds.length) {\n        return res.status(400).json({\n          error: 'One or more curriculum expectations not found',\n          provided: expectationIds,\n          found: validExpectations.map((e) => e.id),\n        });\n      }\n\n      await prisma.longRangePlanExpectation.createMany({\n        data: expectationIds.map((expectationId: string) => ({\n          longRangePlanId: plan.id,\n          expectationId,\n        })),\n      });\n\n      // Refetch with expectations\n      const updatedPlan = await prisma.longRangePlan.findUnique({\n        where: { id: plan.id },\n        include: {\n          expectations: {\n            include: { expectation: true },\n          },\n          _count: {\n            select: { unitPlans: true },\n          },\n        },\n      });\n\n      return res.status(201).json(updatedPlan);\n    }\n\n    res.status(201).json(plan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a long-range plan\nrouter.put('/:id', validate(longRangePlanUpdateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationIds, themes, ...updateData } = req.body;\n\n    // Verify ownership\n    const existing = await prisma.longRangePlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!existing) {\n      return res.status(404).json({ error: 'Long-range plan not found' });\n    }\n\n    // Update the plan\n    const plan = await prisma.longRangePlan.update({\n      where: { id: req.params.id },\n      data: {\n        ...updateData,\n        themes: themes !== undefined ? themes : existing.themes,\n      },\n    });\n\n    // Update expectations if provided\n    if (expectationIds !== undefined) {\n      // Remove existing expectations\n      await prisma.longRangePlanExpectation.deleteMany({\n        where: { longRangePlanId: plan.id },\n      });\n\n      // Add new expectations\n      if (expectationIds.length > 0) {\n        await prisma.longRangePlanExpectation.createMany({\n          data: expectationIds.map((expectationId: string) => ({\n            longRangePlanId: plan.id,\n            expectationId,\n          })),\n        });\n      }\n    }\n\n    // Refetch with updated relationships\n    const updatedPlan = await prisma.longRangePlan.findUnique({\n      where: { id: plan.id },\n      include: {\n        expectations: {\n          include: { expectation: true },\n        },\n        unitPlans: {\n          orderBy: { startDate: 'asc' },\n          include: {\n            _count: {\n              select: {\n                lessonPlans: true,\n                expectations: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    res.json(updatedPlan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a long-range plan\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership and check for dependencies\n    const plan = await prisma.longRangePlan.findFirst({\n      where: { id: req.params.id, userId },\n      include: {\n        _count: { select: { unitPlans: true } },\n      },\n    });\n\n    if (!plan) {\n      return res.status(404).json({ error: 'Long-range plan not found' });\n    }\n\n    if (plan._count.unitPlans > 0) {\n      return res.status(400).json({\n        error: 'Cannot delete long-range plan with existing unit plans',\n      });\n    }\n\n    await prisma.longRangePlan.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Generate AI draft for long-range plan\nrouter.post('/ai-draft', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationIds, subject, grade, academicYear, termStructure } = req.body;\n\n    if (!expectationIds || !Array.isArray(expectationIds) || expectationIds.length === 0) {\n      return res.status(400).json({ error: 'Expectation IDs are required' });\n    }\n\n    // Fetch the curriculum expectations\n    const expectations = await prisma.curriculumExpectation.findMany({\n      where: { id: { in: expectationIds } },\n    });\n\n    if (expectations.length === 0) {\n      return res.status(400).json({ error: 'No valid expectations found' });\n    }\n\n    const draft = await generateLongRangePlanDraft({\n      expectations: expectations.map((exp) => ({\n        code: exp.code,\n        description: exp.description,\n        type: 'specific' as const, // Default to specific since we don't store this\n        strand: exp.strand,\n        substrand: exp.substrand || undefined,\n        subject: exp.subject,\n        grade: exp.grade,\n      })),\n      subject: subject || expectations[0].subject,\n      grade: grade || expectations[0].grade,\n      academicYear: academicYear || '2024-2025',\n      termStructure: termStructure || 'semester',\n    });\n\n    res.json(draft);\n  } catch (err) {\n    console.error('AI draft generation error:', err);\n    res.status(500).json({ error: 'Failed to generate AI draft' });\n  }\n});\n\n// Generate AI suggestions for existing plan\nrouter.post('/:id/ai-suggestions', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const plan = await prisma.longRangePlan.findFirst({\n      where: { id: req.params.id, userId },\n      include: {\n        expectations: { include: { expectation: true } },\n      },\n    });\n\n    if (!plan) {\n      return res.status(404).json({ error: 'Long-range plan not found' });\n    }\n\n    const existingContent = `\nTitle: ${plan.title}\nSubject: ${plan.subject}\nGrade: ${plan.grade}\nGoals: ${plan.goals || 'None specified'}\nThemes: ${Array.isArray(plan.themes) ? plan.themes.join(', ') : 'None specified'}\nExpectations: ${plan.expectations.map((e) => `${e.expectation.code}: ${e.expectation.description}`).join('\\n')}\n    `;\n\n    const suggestions = await generatePlanSuggestions('long-range', existingContent);\n\n    res.json({ suggestions });\n  } catch (err) {\n    console.error('AI suggestions error:', err);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\nexport default router;\n"],"mappingskBE;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAlBF,SAASE,MAAM,QAAiB,SAAS;AAEzC,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,CAAC,QAAQ,KAAK;AACvB,SAASC,0BAA0B,EAAEC,uBAAuB,QAAQ,4BAA4B;AAEhG,MAAMC,MAAM;AAAA;AAAA,CAAAR,cAAA,GAAAS,CAAA,OAAGP,MAAM,EAAE;AAEvB;AACA,MAAMQ,yBAAyB;AAAA;AAAA,CAAAV,cAAA,GAAAS,CAAA,OAAGJ,CAAC,CAACM,MAAM,CAAC;EACzCC,KAAK,EAAEP,CAAC,CAACQ,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,CAAC;EACxBC,OAAO,EAAEV,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC9BC,YAAY,EAAEZ,CAAC,CAACQ,MAAM,EAAE,CAACK,KAAK,CAAC,eAAe,CAAC;EAAE;EACjDC,IAAI,EAAEd,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC3BI,KAAK,EAAEf,CAAC,CAACgB,MAAM,EAAE,CAACC,GAAG,EAAE,CAACR,GAAG,CAAC,CAAC,CAAC,CAACS,GAAG,CAAC,EAAE,CAAC;EACtCC,OAAO,EAAEnB,CAAC,CAACQ,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,CAAC;EAC1BW,WAAW,EAAEpB,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EAClCU,aAAa,EAAErB,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EACpCW,KAAK,EAAEtB,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC5BY,OAAO,EAAEvB,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC9Ba,MAAM,EAAExB,CAAC,CAACyB,KAAK,CAACzB,CAAC,CAACQ,MAAM,EAAE,CAAC,CAACG,QAAQ,EAAE;EACtCe,cAAc,EAAE1B,CAAC,CAACyB,KAAK,CAACzB,CAAC,CAACQ,MAAM,EAAE,CAAC,CAACG,QAAQ,EAAE;EAC9C;EACAgB,oBAAoB,EAAE3B,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC3CiB,kBAAkB,EAAE5B,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EACzCkB,aAAa,EAAE7B,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ,EAAE;EACpCmB,iBAAiB,EAAE9B,CAAC,CAACQ,MAAM,EAAE,CAACG,QAAQ;CACvC,CAAC;AAEF,MAAMoB,yBAAyB;AAAA;AAAA,CAAApC,cAAA,GAAAS,CAAA,OAAGC,yBAAyB,CAAC2B,OAAO,EAAE;AAErE;AAAA;AAAArC,cAAA,GAAAS,CAAA;AACAD,MAAM,CAAC8B,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EACjD,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,UAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,UAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAM;MAAE3B,YAAY;MAAEO,OAAO;MAAEJ;IAAK,CAAE;IAAA;IAAA,CAAApB,cAAA,GAAAS,CAAA,OAAG8B,GAAG,CAACW,KAAK;IAElD,MAAMC,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAS,CAAA,OAAmC;MAAEkC;IAAM,CAAE;IAAC;IAAA3C,cAAA,GAAAS,CAAA;IACzD,IAAIQ,YAAY,EAAE;MAAA;MAAAjB,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MAAA0C,KAAK,CAAClC,YAAY,GAAGmC,MAAM,CAACnC,YAAY,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IAC5D,IAAIe,OAAO,EAAE;MAAA;MAAAxB,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MAAA0C,KAAK,CAAC3B,OAAO,GAAG4B,MAAM,CAAC5B,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAxB,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IAC7C,IAAIW,KAAK,EAAE;MAAA;MAAApB,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MAAA0C,KAAK,CAAC/B,KAAK,GAAGiC,MAAM,CAACjC,KAAK,CAAC;IAAA,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAA4C,CAAA;IAAA;IAEvC,MAAMU,KAAK;IAAA;IAAA,CAAAtD,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACC,QAAQ,CAAC;MAChDL,KAAK;MACLM,OAAO,EAAE,CAAC;QAAExC,YAAY,EAAE;MAAM,CAAE,EAAE;QAAEO,OAAO,EAAE;MAAK,CAAE,EAAE;QAAEJ,KAAK,EAAE;MAAK,CAAE,CAAC;MACzEsC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,MAAM,EAAE;YACNC,SAAS,EAAE,IAAI;YACfC,YAAY,EAAE;;;;KAIrB,CAAC;IAAC;IAAA9D,cAAA,GAAAS,CAAA;IAEH+B,GAAG,CAACQ,IAAI,CAACM,KAAK,CAAC;EACjB,CAAC,CAAC,OAAOS,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZgC,KAAK,CAACsB,GAAG,CAAC;EACZ;AACF,CAAC,CAAC;AAEF;AAAA;AAAA/D,cAAA,GAAAS,CAAA;AACAD,MAAM,CAAC8B,GAAG,CAAC,MAAM,EAAE,OAAOC,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EACpD,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,UAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,UAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAMoB,IAAI;IAAA;IAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACU,SAAS,CAAC;MAChDd,KAAK,EAAE;QACLL,EAAE,EAAEP,GAAG,CAAC2B,MAAM,CAACpB,EAAE;QACjBH;OACD;MACDe,OAAO,EAAE;QACPI,YAAY,EAAE;UACZJ,OAAO,EAAE;YACPS,WAAW,EAAE;WACd;UACDV,OAAO,EAAE;YACPU,WAAW,EAAE;cAAEC,IAAI,EAAE;YAAK;;SAE7B;QACDP,SAAS,EAAE;UACTJ,OAAO,EAAE;YAAEY,SAAS,EAAE;UAAK,CAAE;UAC7BX,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,MAAM,EAAE;gBACNU,WAAW,EAAE,IAAI;gBACjBR,YAAY,EAAE;;;;;;KAMzB,CAAC;IAAC;IAAA9D,cAAA,GAAAS,CAAA;IAEH,IAAI,CAACuD,IAAI,EAAE;MAAA;MAAAhE,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACT,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2B,CAAE,CAAC;IACrE,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IAED+B,GAAG,CAACQ,IAAI,CAACgB,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOD,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZgC,KAAK,CAACsB,GAAG,CAAC;EACZ;AACF,CAAC,CAAC;AAEF;AAAA;AAAA/D,cAAA,GAAAS,CAAA;AACAD,MAAM,CAAC+D,IAAI,CAAC,GAAG,EAAEnE,QAAQ,CAACM,yBAAyB,CAAC,EAAE,OAAO6B,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EACvF,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,UAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,UAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAM;MAAEb,cAAc;MAAEF,MAAM;MAAE,GAAG2C;IAAQ,CAAE;IAAA;IAAA,CAAAxE,cAAA,GAAAS,CAAA,QAAG8B,GAAG,CAACkC,IAAI;IAExD,MAAMT,IAAI;IAAA;IAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACmB,MAAM,CAAC;MAC7CC,IAAI,EAAE;QACJ,GAAGH,QAAQ;QACX7B,MAAM;QACNd,MAAM;QAAE;QAAA,CAAA7B,cAAA,GAAA4C,CAAA,WAAAf,MAAM;QAAA;QAAA,CAAA7B,cAAA,GAAA4C,CAAA,WAAI,EAAE;OACrB;MACDc,OAAO,EAAE;QACPI,YAAY,EAAE;UACZJ,OAAO,EAAE;YAAES,WAAW,EAAE;UAAI;SAC7B;QACDR,MAAM,EAAE;UACNC,MAAM,EAAE;YAAEC,SAAS,EAAE;UAAI;;;KAG9B,CAAC;IAEF;IAAA;IAAA7D,cAAA,GAAAS,CAAA;IACA;IAAI;IAAA,CAAAT,cAAA,GAAA4C,CAAA,WAAAb,cAAc;IAAA;IAAA,CAAA/B,cAAA,GAAA4C,CAAA,WAAIb,cAAc,CAAC6C,MAAM,GAAG,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAA4C,CAAA;MAC/C;MACA,MAAMiC,iBAAiB;MAAA;MAAA,CAAA7E,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAAC2E,qBAAqB,CAACtB,QAAQ,CAAC;QACpEL,KAAK,EAAE;UAAEL,EAAE,EAAE;YAAEiC,EAAE,EAAEhD;UAAc;QAAE,CAAE;QACrC6B,MAAM,EAAE;UAAEd,EAAE,EAAE;QAAI;OACnB,CAAC;MAAC;MAAA9C,cAAA,GAAAS,CAAA;MAEH,IAAIoE,iBAAiB,CAACD,MAAM,KAAK7C,cAAc,CAAC6C,MAAM,EAAE;QAAA;QAAA5E,cAAA,GAAA4C,CAAA;QAAA5C,cAAA,GAAAS,CAAA;QACtD,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,KAAK,EAAE,+CAA+C;UACtD+B,QAAQ,EAAEjD,cAAc;UACxBkD,KAAK,EAAEJ,iBAAiB,CAACK,GAAG,CAAEC,CAAC,IAAK;YAAA;YAAAnF,cAAA,GAAA0C,CAAA;YAAA1C,cAAA,GAAAS,CAAA;YAAA,OAAA0E,CAAC,CAACrC,EAAE;UAAF,CAAE;SACzC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA9C,cAAA,GAAA4C,CAAA;MAAA;MAAA5C,cAAA,GAAAS,CAAA;MAED,MAAMN,MAAM,CAACiF,wBAAwB,CAACC,UAAU,CAAC;QAC/CV,IAAI,EAAE5C,cAAc,CAACmD,GAAG,CAAEI,aAAqB,IAAM;UAAA;UAAAtF,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAS,CAAA;UAAA;YACnD8E,eAAe,EAAEvB,IAAI,CAAClB,EAAE;YACxBwC;WACD;SAAC;OACH,CAAC;MAEF;MACA,MAAME,WAAW;MAAA;MAAA,CAAAxF,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACkC,UAAU,CAAC;QACxDtC,KAAK,EAAE;UAAEL,EAAE,EAAEkB,IAAI,CAAClB;QAAE,CAAE;QACtBY,OAAO,EAAE;UACPI,YAAY,EAAE;YACZJ,OAAO,EAAE;cAAES,WAAW,EAAE;YAAI;WAC7B;UACDR,MAAM,EAAE;YACNC,MAAM,EAAE;cAAEC,SAAS,EAAE;YAAI;;;OAG9B,CAAC;MAAC;MAAA7D,cAAA,GAAAS,CAAA;MAEH,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACwC,WAAW,CAAC;IAC1C,CAAC;IAAA;IAAA;MAAAxF,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IAED+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACgB,IAAI,CAAC;EAC5B,CAAC,CAAC,OAAOD,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZgC,KAAK,CAACsB,GAAG,CAAC;EACZ;AACF,CAAC,CAAC;AAEF;AAAA;AAAA/D,cAAA,GAAAS,CAAA;AACAD,MAAM,CAACkF,GAAG,CAAC,MAAM,EAAEtF,QAAQ,CAACgC,yBAAyB,CAAC,EAAE,OAAOG,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EACzF,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,WAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,WAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAM;MAAEb,cAAc;MAAEF,MAAM;MAAE,GAAG8D;IAAU,CAAE;IAAA;IAAA,CAAA3F,cAAA,GAAAS,CAAA,QAAG8B,GAAG,CAACkC,IAAI;IAE1D;IACA,MAAMmB,QAAQ;IAAA;IAAA,CAAA5F,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACU,SAAS,CAAC;MACpDd,KAAK,EAAE;QAAEL,EAAE,EAAEP,GAAG,CAAC2B,MAAM,CAACpB,EAAE;QAAEH;MAAM;KACnC,CAAC;IAAC;IAAA3C,cAAA,GAAAS,CAAA;IAEH,IAAI,CAACmF,QAAQ,EAAE;MAAA;MAAA5F,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACb,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2B,CAAE,CAAC;IACrE,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED;IACA,MAAMoB,IAAI;IAAA;IAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACsC,MAAM,CAAC;MAC7C1C,KAAK,EAAE;QAAEL,EAAE,EAAEP,GAAG,CAAC2B,MAAM,CAACpB;MAAE,CAAE;MAC5B6B,IAAI,EAAE;QACJ,GAAGgB,UAAU;QACb9D,MAAM,EAAEA,MAAM,KAAKiE,SAAS;QAAA;QAAA,CAAA9F,cAAA,GAAA4C,CAAA,WAAGf,MAAM;QAAA;QAAA,CAAA7B,cAAA,GAAA4C,CAAA,WAAGgD,QAAQ,CAAC/D,MAAM;;KAE1D,CAAC;IAEF;IAAA;IAAA7B,cAAA,GAAAS,CAAA;IACA,IAAIsB,cAAc,KAAK+D,SAAS,EAAE;MAAA;MAAA9F,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MAChC;MACA,MAAMN,MAAM,CAACiF,wBAAwB,CAACW,UAAU,CAAC;QAC/C5C,KAAK,EAAE;UAAEoC,eAAe,EAAEvB,IAAI,CAAClB;QAAE;OAClC,CAAC;MAEF;MAAA;MAAA9C,cAAA,GAAAS,CAAA;MACA,IAAIsB,cAAc,CAAC6C,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA5E,cAAA,GAAA4C,CAAA;QAAA5C,cAAA,GAAAS,CAAA;QAC7B,MAAMN,MAAM,CAACiF,wBAAwB,CAACC,UAAU,CAAC;UAC/CV,IAAI,EAAE5C,cAAc,CAACmD,GAAG,CAAEI,aAAqB,IAAM;YAAA;YAAAtF,cAAA,GAAA0C,CAAA;YAAA1C,cAAA,GAAAS,CAAA;YAAA;cACnD8E,eAAe,EAAEvB,IAAI,CAAClB,EAAE;cACxBwC;aACD;WAAC;SACH,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAtF,cAAA,GAAA4C,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAA5C,cAAA,GAAA4C,CAAA;IAAA;IAED;IACA,MAAM4C,WAAW;IAAA;IAAA,CAAAxF,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACkC,UAAU,CAAC;MACxDtC,KAAK,EAAE;QAAEL,EAAE,EAAEkB,IAAI,CAAClB;MAAE,CAAE;MACtBY,OAAO,EAAE;QACPI,YAAY,EAAE;UACZJ,OAAO,EAAE;YAAES,WAAW,EAAE;UAAI;SAC7B;QACDN,SAAS,EAAE;UACTJ,OAAO,EAAE;YAAEY,SAAS,EAAE;UAAK,CAAE;UAC7BX,OAAO,EAAE;YACPC,MAAM,EAAE;cACNC,MAAM,EAAE;gBACNU,WAAW,EAAE,IAAI;gBACjBR,YAAY,EAAE;;;;;;KAMzB,CAAC;IAAC;IAAA9D,cAAA,GAAAS,CAAA;IAEH+B,GAAG,CAACQ,IAAI,CAACwC,WAAW,CAAC;EACvB,CAAC,CAAC,OAAOzB,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZgC,KAAK,CAACsB,GAAG,CAAC;EACZ;AACF,CAAC,CAAC;AAEF;AAAA;AAAA/D,cAAA,GAAAS,CAAA;AACAD,MAAM,CAACwF,MAAM,CAAC,MAAM,EAAE,OAAOzD,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EACvD,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,WAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,WAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED;IACA,MAAMoB,IAAI;IAAA;IAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACU,SAAS,CAAC;MAChDd,KAAK,EAAE;QAAEL,EAAE,EAAEP,GAAG,CAAC2B,MAAM,CAACpB,EAAE;QAAEH;MAAM,CAAE;MACpCe,OAAO,EAAE;QACPC,MAAM,EAAE;UAAEC,MAAM,EAAE;YAAEC,SAAS,EAAE;UAAI;QAAE;;KAExC,CAAC;IAAC;IAAA7D,cAAA,GAAAS,CAAA;IAEH,IAAI,CAACuD,IAAI,EAAE;MAAA;MAAAhE,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACT,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2B,CAAE,CAAC;IACrE,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IAED,IAAIuD,IAAI,CAACL,MAAM,CAACE,SAAS,GAAG,CAAC,EAAE;MAAA;MAAA7D,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MAC7B,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,KAAK,EAAE;OACR,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAS,CAAA;IAED,MAAMN,MAAM,CAACoD,aAAa,CAACyC,MAAM,CAAC;MAChC7C,KAAK,EAAE;QAAEL,EAAE,EAAEP,GAAG,CAAC2B,MAAM,CAACpB;MAAE;KAC3B,CAAC;IAAC;IAAA9C,cAAA,GAAAS,CAAA;IAEH+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACkD,GAAG,EAAE;EACvB,CAAC,CAAC,OAAOlC,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZgC,KAAK,CAACsB,GAAG,CAAC;EACZ;AACF,CAAC,CAAC;AAEF;AAAA;AAAA/D,cAAA,GAAAS,CAAA;AACAD,MAAM,CAAC+D,IAAI,CAAC,WAAW,EAAE,OAAOhC,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EAC1D,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,WAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,WAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAM;MAAEb,cAAc;MAAEP,OAAO;MAAEJ,KAAK;MAAEH,YAAY;MAAEiF;IAAa,CAAE;IAAA;IAAA,CAAAlG,cAAA,GAAAS,CAAA,QAAG8B,GAAG,CAACkC,IAAI;IAAC;IAAAzE,cAAA,GAAAS,CAAA;IAEjF;IAAI;IAAA,CAAAT,cAAA,GAAA4C,CAAA,YAACb,cAAc;IAAA;IAAA,CAAA/B,cAAA,GAAA4C,CAAA,WAAI,CAACuD,KAAK,CAACC,OAAO,CAACrE,cAAc,CAAC;IAAA;IAAA,CAAA/B,cAAA,GAAA4C,CAAA,WAAIb,cAAc,CAAC6C,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACpF,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA8B,CAAE,CAAC;IACxE,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED;IACA,MAAMkB,YAAY;IAAA;IAAA,CAAA9D,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAAC2E,qBAAqB,CAACtB,QAAQ,CAAC;MAC/DL,KAAK,EAAE;QAAEL,EAAE,EAAE;UAAEiC,EAAE,EAAEhD;QAAc;MAAE;KACpC,CAAC;IAAC;IAAA/B,cAAA,GAAAS,CAAA;IAEH,IAAIqD,YAAY,CAACc,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA5E,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MAC7B,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA6B,CAAE,CAAC;IACvE,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAMyD,KAAK;IAAA;IAAA,CAAArG,cAAA,GAAAS,CAAA,QAAG,MAAMH,0BAA0B,CAAC;MAC7CwD,YAAY,EAAEA,YAAY,CAACoB,GAAG,CAAEoB,GAAG,IAAM;QAAA;QAAAtG,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAS,CAAA;QAAA;UACvC2D,IAAI,EAAEkC,GAAG,CAAClC,IAAI;UACd3C,WAAW,EAAE6E,GAAG,CAAC7E,WAAW;UAC5B8E,IAAI,EAAE,UAAmB;UAAE;UAC3BC,MAAM,EAAEF,GAAG,CAACE,MAAM;UAClBC,SAAS;UAAE;UAAA,CAAAzG,cAAA,GAAA4C,CAAA,WAAA0D,GAAG,CAACG,SAAS;UAAA;UAAA,CAAAzG,cAAA,GAAA4C,CAAA,WAAIkD,SAAS;UACrCtE,OAAO,EAAE8E,GAAG,CAAC9E,OAAO;UACpBJ,KAAK,EAAEkF,GAAG,CAAClF;SACZ;OAAC,CAAC;MACHI,OAAO;MAAE;MAAA,CAAAxB,cAAA,GAAA4C,CAAA,WAAApB,OAAO;MAAA;MAAA,CAAAxB,cAAA,GAAA4C,CAAA,WAAIkB,YAAY,CAAC,CAAC,CAAC,CAACtC,OAAO;MAC3CJ,KAAK;MAAE;MAAA,CAAApB,cAAA,GAAA4C,CAAA,WAAAxB,KAAK;MAAA;MAAA,CAAApB,cAAA,GAAA4C,CAAA,WAAIkB,YAAY,CAAC,CAAC,CAAC,CAAC1C,KAAK;MACrCH,YAAY;MAAE;MAAA,CAAAjB,cAAA,GAAA4C,CAAA,WAAA3B,YAAY;MAAA;MAAA,CAAAjB,cAAA,GAAA4C,CAAA,WAAI,WAAW;MACzCsD,aAAa;MAAE;MAAA,CAAAlG,cAAA,GAAA4C,CAAA,WAAAsD,aAAa;MAAA;MAAA,CAAAlG,cAAA,GAAA4C,CAAA,WAAI,UAAU;KAC3C,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IAEH+B,GAAG,CAACQ,IAAI,CAACqD,KAAK,CAAC;EACjB,CAAC,CAAC,OAAOtC,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZiG,OAAO,CAACzD,KAAK,CAAC,4BAA4B,EAAEc,GAAG,CAAC;IAAC;IAAA/D,cAAA,GAAAS,CAAA;IACjD+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA6B,CAAE,CAAC;EAChE;AACF,CAAC,CAAC;AAEF;AAAA;AAAAjD,cAAA,GAAAS,CAAA;AACAD,MAAM,CAAC+D,IAAI,CAAC,qBAAqB,EAAE,OAAOhC,GAAY,EAAEC,GAAG,EAAEC,KAAK,KAAI;EAAA;EAAAzC,cAAA,GAAA0C,CAAA;EAAA1C,cAAA,GAAAS,CAAA;EACpE,IAAI;IACF,MAAMkC,MAAM;IAAA;IAAA,CAAA3C,cAAA,GAAAS,CAAA;IAAG;IAAA,CAAAT,cAAA,GAAA4C,CAAA,WAAAL,GAAG,CAACM,IAAI,EAAEC,EAAE;IAAA;IAAA,CAAA9C,cAAA,GAAA4C,CAAA,WAAI,CAAC;IAAC;IAAA5C,cAAA,GAAAS,CAAA;IACjC,IAAI,CAACkC,MAAM,EAAE;MAAA;MAAA3C,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACX,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;IACxD,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAMoB,IAAI;IAAA;IAAA,CAAAhE,cAAA,GAAAS,CAAA,QAAG,MAAMN,MAAM,CAACoD,aAAa,CAACU,SAAS,CAAC;MAChDd,KAAK,EAAE;QAAEL,EAAE,EAAEP,GAAG,CAAC2B,MAAM,CAACpB,EAAE;QAAEH;MAAM,CAAE;MACpCe,OAAO,EAAE;QACPI,YAAY,EAAE;UAAEJ,OAAO,EAAE;YAAES,WAAW,EAAE;UAAI;QAAE;;KAEjD,CAAC;IAAC;IAAAnE,cAAA,GAAAS,CAAA;IAEH,IAAI,CAACuD,IAAI,EAAE;MAAA;MAAAhE,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAS,CAAA;MACT,OAAO+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2B,CAAE,CAAC;IACrE,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA4C,CAAA;IAAA;IAED,MAAM+D,eAAe;IAAA;IAAA,CAAA3G,cAAA,GAAAS,CAAA,SAAG;SACnBuD,IAAI,CAACpD,KAAK;WACRoD,IAAI,CAACxC,OAAO;SACdwC,IAAI,CAAC5C,KAAK;;IACV;IAAA,CAAApB,cAAA,GAAA4C,CAAA,WAAAoB,IAAI,CAACrC,KAAK;IAAA;IAAA,CAAA3B,cAAA,GAAA4C,CAAA,WAAI,gBAAgB;UAC7BuD,KAAK,CAACC,OAAO,CAACpC,IAAI,CAACnC,MAAM,CAAC;IAAA;IAAA,CAAA7B,cAAA,GAAA4C,CAAA,WAAGoB,IAAI,CAACnC,MAAM,CAAC+E,IAAI,CAAC,IAAI,CAAC;IAAA;IAAA,CAAA5G,cAAA,GAAA4C,CAAA,WAAG,gBAAgB;gBAChEoB,IAAI,CAACF,YAAY,CAACoB,GAAG,CAAEC,CAAC,IAAK;MAAA;MAAAnF,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAS,CAAA;MAAA,UAAG0E,CAAC,CAAChB,WAAW,CAACC,IAAI,KAAKe,CAAC,CAAChB,WAAW,CAAC1C,WAAW,EAAE;IAAF,CAAE,CAAC,CAACmF,IAAI,CAAC,IAAI,CAAC;KACzG;IAED,MAAMC,WAAW;IAAA;IAAA,CAAA7G,cAAA,GAAAS,CAAA,SAAG,MAAMF,uBAAuB,CAAC,YAAY,EAAEoG,eAAe,CAAC;IAAC;IAAA3G,cAAA,GAAAS,CAAA;IAEjF+B,GAAG,CAACQ,IAAI,CAAC;MAAE6D;IAAW,CAAE,CAAC;EAC3B,CAAC,CAAC,OAAO9C,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAS,CAAA;IACZiG,OAAO,CAACzD,KAAK,CAAC,uBAAuB,EAAEc,GAAG,CAAC;IAAC;IAAA/D,cAAA,GAAAS,CAAA;IAC5C+B,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAgC,CAAE,CAAC;EACnE;AACF,CAAC,CAAC;AAEF,eAAezC,MAAM","ignoreList":[]}