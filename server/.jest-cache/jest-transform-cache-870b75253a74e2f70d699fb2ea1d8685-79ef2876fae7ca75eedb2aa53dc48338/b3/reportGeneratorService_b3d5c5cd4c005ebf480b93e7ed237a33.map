{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts"],"sourcesContent":["import { prisma } from '../prisma';\nimport { generateContent } from './llmService';\nimport logger from '../logger';\n\nexport interface ReportGenerationRequest {\n  studentId: number;\n  reportType: 'progress' | 'narrative' | 'term_summary' | 'report_card';\n  termId?: number;\n  subjectId?: number;\n  startDate: Date;\n  endDate: Date;\n  language: 'en' | 'fr';\n  includeAssessments?: boolean;\n  includeAttendance?: boolean;\n  includeGoals?: boolean;\n}\n\nexport interface GeneratedReport {\n  studentName: string;\n  period: string;\n  sections: ReportSection[];\n  overallComments: string;\n  nextSteps: string[];\n}\n\nexport interface ReportSection {\n  title: string;\n  content: string;\n  data?: Record<string, unknown>;\n}\n\n// Type definitions for student data with relations\ninterface StudentWithRelations {\n  id: number;\n  firstName: string;\n  lastName: string;\n  userId: number;\n  artifacts: Artifact[];\n  reflections: Reflection[];\n  goals: Goal[];\n}\n\n\ninterface Artifact {\n  id: number;\n  title: string;\n  description: string | null;\n  createdAt: Date;\n}\n\ninterface Reflection {\n  id: number;\n  content: string;\n  createdAt: Date;\n}\n\ninterface Goal {\n  id: number;\n  text: string;\n  status: string;\n}\n\ninterface SubjectProgress {\n  id: number;\n  name: string;\n  outcomes: string[];\n  averageScore: number;\n  [key: string]: unknown;\n}\n\ninterface SubjectReportCard {\n  id: number;\n  name: string;\n  grade: string;\n  outcomes: string[];\n}\n\n// Type definitions for curriculum and planning reports\nexport interface CurriculumCoverageReport {\n  totalExpectations: number;\n  coveredExpectations: number;\n  coveragePercentage: number;\n  uncoveredExpectations: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  coverageByStrand: Record<string, {\n    total: number;\n    covered: number;\n    percentage: number;\n  }>;\n}\n\nexport interface PlanningProgressReport {\n  longRangePlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  unitPlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  lessonPlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  daybookEntries: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n}\n\nexport interface LessonPlanReport {\n  lesson: {\n    id: string;\n    title: string;\n    date: Date;\n    duration: number;\n    mindsOn?: string;\n    action?: string;\n    consolidation?: string;\n    learningGoals?: string;\n    materials?: string[];\n    isSubFriendly: boolean;\n  };\n  hierarchy: {\n    longRangePlan: {\n      id: string;\n      title: string;\n      subject?: string;\n      grade?: number;\n    };\n    unitPlan: {\n      id: string;\n      title: string;\n    };\n  };\n  curriculumAlignment: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  reflection?: {\n    whatWorked?: string;\n    overallRating?: number;\n    wouldReuseLesson?: boolean;\n  };\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n    url?: string;\n  }>;\n}\n\nexport interface SubstitutePlanReport {\n  title: string;\n  basicInfo: {\n    subject: string;\n    grade: number;\n    duration: number;\n    date: Date;\n  };\n  materials: string[];\n  activities: {\n    opening: string;\n    main: string;\n    closing: string;\n  };\n  specialNotes?: string;\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n    content?: string;\n  }>;\n}\n\nexport interface UnitOverviewReport {\n  unit: {\n    id: string;\n    title: string;\n    description?: string;\n    bigIdeas?: string;\n    startDate: Date;\n    endDate: Date;\n    estimatedHours: number;\n  };\n  hierarchy: {\n    longRangePlan: {\n      id: string;\n      title: string;\n      subject?: string;\n      grade?: number;\n    };\n  };\n  curriculumAlignment: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  lessonSummary: {\n    totalLessons: number;\n    totalDuration: number;\n    lessons: Array<{\n      id: string;\n      title: string;\n      date: Date;\n      duration: number;\n    }>;\n  };\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n  }>;\n}\n\nexport class ReportGeneratorService {\n  async generateReport(request: ReportGenerationRequest): Promise<GeneratedReport> {\n    try {\n      // Fetch student data\n      const student = await prisma.student.findUnique({\n        where: { id: request.studentId },\n        include: {\n          user: true,\n          artifacts: {\n            where: {\n              createdAt: {\n                gte: request.startDate,\n                lte: request.endDate,\n              },\n            },\n          },\n          reflections: {\n            where: {\n              createdAt: {\n                gte: request.startDate,\n                lte: request.endDate,\n              },\n            },\n          },\n          goals: {\n            where: {\n              OR: [\n                { status: 'active' },\n                { status: 'completed' },\n              ],\n            },\n          },\n        },\n      });\n\n      if (!student) {\n        throw new Error('Student not found');\n      }\n\n      // Generate report based on type\n      let report: GeneratedReport;\n      \n      switch (request.reportType) {\n        case 'progress':\n          report = await this.generateProgressReport(student, request);\n          break;\n        case 'narrative':\n          report = await this.generateNarrativeReport(student, request);\n          break;\n        case 'term_summary':\n          report = await this.generateTermSummary(student, request);\n          break;\n        case 'report_card':\n          report = await this.generateReportCard(student, request);\n          break;\n        default:\n          throw new Error('Invalid report type');\n      }\n\n      return report;\n    } catch (error) {\n      logger.error('Failed to generate report:', error);\n      throw error;\n    }\n  }\n\n  private async generateProgressReport(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Assessment functionality removed - focus on artifacts and reflections\n    if (student.artifacts.length > 0 || student.reflections.length > 0) {\n      sections.push({\n        title: request.language === 'fr' ? 'Progrès académique' : 'Academic Progress',\n        content: await this.generateProgressFromArtifacts(student.artifacts, student.reflections, request.language),\n        data: { artifacts: student.artifacts, reflections: student.reflections },\n      });\n    }\n\n    // Goals Section\n    if (request.includeGoals && student.goals.length > 0) {\n      sections.push({\n        title: request.language === 'fr' ? 'Objectifs' : 'Goals',\n        content: await this.generateGoalsNarrative(student.goals, request.language),\n        data: { goals: student.goals },\n      });\n    }\n\n    // Overall Comments\n    const overallComments = await this.generateOverallComments(\n      student,\n      sections,\n      request.language\n    );\n\n    // Next Steps\n    const nextSteps = await this.generateNextSteps(student, sections, request.language);\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,\n      sections,\n      overallComments,\n      nextSteps,\n    };\n  }\n\n  private async generateNarrativeReport(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest\n  ): Promise<GeneratedReport> {\n    // Gather comprehensive data\n    const learningJourney = this.compileLearningJourney(student);\n    \n    // Generate narrative using LLM\n    const prompt = request.language === 'fr' \n      ? `Générez un rapport narratif détaillé pour ${student.firstName} ${student.lastName}, couvrant la période du ${request.startDate.toLocaleDateString()} au ${request.endDate.toLocaleDateString()}. Incluez les réalisations, les défis et les domaines de croissance.`\n      : `Generate a detailed narrative report for ${student.firstName} ${student.lastName}, covering the period from ${request.startDate.toLocaleDateString()} to ${request.endDate.toLocaleDateString()}. Include achievements, challenges, and areas of growth.`;\n\n    const narrative = await generateContent(prompt, JSON.stringify(learningJourney));\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,\n      sections: [{\n        title: request.language === 'fr' ? 'Rapport narratif' : 'Narrative Report',\n        content: narrative,\n      }],\n      overallComments: '',\n      nextSteps: [],\n    };\n  }\n\n  private async generateTermSummary(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Get subject-specific progress\n    const subjectProgress = await this.getSubjectProgress(student);\n    \n    for (const subject of subjectProgress) {\n      sections.push({\n        title: subject.name,\n        content: await this.generateSubjectSummary(subject, request.language),\n        data: subject,\n      });\n    }\n\n    // Overall term performance\n    const overallComments = await this.generateTermOverview(\n      student,\n      subjectProgress,\n      request.language\n    );\n\n    // Recommendations for next term\n    const nextSteps = await this.generateTermRecommendations(\n      student,\n      subjectProgress,\n      request.language\n    );\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: request.language === 'fr' ? 'Résumé du trimestre' : 'Term Summary',\n      sections,\n      overallComments,\n      nextSteps,\n    };\n  }\n\n  private async generateReportCard(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Get formal grades/assessments by subject\n    const reportCardData = await this.compileReportCardData(student);\n\n    for (const subject of reportCardData) {\n      // Generate teacher comments for each subject\n      const comments = await this.generateSubjectComments(\n        subject,\n        student,\n        request.language\n      );\n\n      sections.push({\n        title: subject.name,\n        content: comments,\n        data: {\n          grade: subject.grade,\n          outcomes: subject.outcomes,\n        },\n      });\n    }\n\n    // General comments\n    const overallComments = await this.generateReportCardComments(\n      student,\n      reportCardData,\n      request.language\n    );\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: request.language === 'fr' ? 'Bulletin scolaire' : 'Report Card',\n      sections,\n      overallComments,\n      nextSteps: [],\n    };\n  }\n\n  // Helper methods\n  private async generateProgressFromArtifacts(\n    artifacts: Artifact[],\n    reflections: Reflection[],\n    language: 'en' | 'fr'\n  ): Promise<string> {\n    const context = {\n      artifactCount: artifacts.length,\n      reflectionCount: reflections.length,\n      recentArtifacts: artifacts.slice(0, 3).map(a => ({ title: a.title, description: a.description })),\n      recentReflections: reflections.slice(0, 3).map(r => ({ content: r.content }))\n    };\n\n    const prompt = language === 'fr'\n      ? `Décrivez le progrès académique basé sur ${artifacts.length} artefacts et ${reflections.length} réflexions.`\n      : `Describe academic progress based on ${artifacts.length} artifacts and ${reflections.length} reflections.`;\n\n    return generateContent(prompt, JSON.stringify(context));\n  }\n\n\n  private async generateGoalsNarrative(\n    goals: Goal[],\n    language: 'en' | 'fr'\n  ): Promise<string> {\n    const activeGoals = goals.filter(g => g.status === 'active');\n    const completedGoals = goals.filter(g => g.status === 'completed');\n\n    const context = {\n      active: activeGoals.map(g => ({ text: g.text })),\n      completed: completedGoals.map(g => ({ text: g.text })),\n    };\n\n    const prompt = language === 'fr'\n      ? `Décrivez le progrès vers les objectifs de l'élève: ${JSON.stringify(context)}`\n      : `Describe the student's progress toward their goals: ${JSON.stringify(context)}`;\n\n    return generateContent(prompt);\n  }\n\n  private async generateOverallComments(\n    student: StudentWithRelations,\n    sections: ReportSection[],\n    language: 'en' | 'fr'\n  ): Promise<string> {\n    const context = {\n      studentName: `${student.firstName} ${student.lastName}`,\n      sectionsCount: sections.length,\n      sectionTitles: sections.map(s => s.title),\n    };\n\n    const prompt = language === 'fr'\n      ? `Générez des commentaires généraux positifs et encourageants pour ${context.studentName} basés sur leur rapport de progrès.`\n      : `Generate positive and encouraging overall comments for ${context.studentName} based on their progress report.`;\n\n    return generateContent(prompt, JSON.stringify(context));\n  }\n\n  private async generateNextSteps(\n    student: StudentWithRelations,\n    sections: ReportSection[],\n    language: 'en' | 'fr'\n  ): Promise<string[]> {\n    const prompt = language === 'fr'\n      ? `Suggérez 3-5 prochaines étapes spécifiques pour ${student.firstName} pour continuer leur progrès.`\n      : `Suggest 3-5 specific next steps for ${student.firstName} to continue their progress.`;\n\n    const suggestions = await generateContent(\n      prompt, \n      JSON.stringify(sections.map(s => ({ title: s.title, summary: s.content.substring(0, 100) })))\n    );\n\n    // Parse the suggestions into an array\n    return suggestions.split('\\n').filter(s => s.trim().length > 0).slice(0, 5);\n  }\n\n  private compileLearningJourney(student: StudentWithRelations) {\n    return {\n      artifacts: student.artifacts.map((a) => ({\n        title: a.title,\n        description: a.description,\n        createdAt: a.createdAt,\n      })),\n      reflections: student.reflections.map((r) => ({\n        content: r.content,\n        createdAt: r.createdAt,\n      })),\n      goals: student.goals,\n    };\n  }\n\n  private async getSubjectProgress(student: StudentWithRelations): Promise<SubjectProgress[]> {\n    // Simplified subject progress without deep relations\n    const subjects = await prisma.subject.findMany({\n      where: { userId: student.userId },\n    });\n\n    return subjects.map(subject => ({\n      id: subject.id,\n      name: subject.name,\n      outcomes: [],\n      averageScore: 0, // Assessment functionality removed\n    }));\n  }\n\n  private async generateSubjectSummary(subject: SubjectProgress, language: 'en' | 'fr'): Promise<string> {\n    const prompt = language === 'fr'\n      ? `Résumez la performance de l'élève en ${subject.name} avec une note moyenne de ${subject.averageScore.toFixed(1)}% et couvrant ${subject.outcomes.length} résultats d'apprentissage.`\n      : `Summarize the student's performance in ${subject.name} with an average score of ${subject.averageScore.toFixed(1)}% and covering ${subject.outcomes.length} learning outcomes.`;\n\n    return generateContent(prompt);\n  }\n\n  private async generateTermOverview(\n    student: StudentWithRelations,\n    subjectProgress: SubjectProgress[],\n    language: 'en' | 'fr'\n  ): Promise<string> {\n    const overallAverage = subjectProgress.reduce((sum, s) => sum + s.averageScore, 0) / subjectProgress.length;\n    \n    const prompt = language === 'fr'\n      ? `Générez un aperçu du trimestre pour ${student.firstName} avec une moyenne générale de ${overallAverage.toFixed(1)}% à travers ${subjectProgress.length} matières.`\n      : `Generate a term overview for ${student.firstName} with an overall average of ${overallAverage.toFixed(1)}% across ${subjectProgress.length} subjects.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify(subjectProgress.map(s => ({ name: s.name, average: s.averageScore })))\n    );\n  }\n\n  private async generateTermRecommendations(\n    student: StudentWithRelations,\n    subjectProgress: SubjectProgress[],\n    language: 'en' | 'fr'\n  ): Promise<string[]> {\n    const weakSubjects = subjectProgress.filter(s => s.averageScore < 70);\n    const strongSubjects = subjectProgress.filter(s => s.averageScore >= 85);\n\n    const prompt = language === 'fr'\n      ? `Suggérez 3-5 recommandations pour le prochain trimestre basées sur les forces (${strongSubjects.map(s => s.name).join(', ')}) et les domaines à améliorer (${weakSubjects.map(s => s.name).join(', ')}).`\n      : `Suggest 3-5 recommendations for the next term based on strengths (${strongSubjects.map(s => s.name).join(', ')}) and areas for improvement (${weakSubjects.map(s => s.name).join(', ')}).`;\n\n    const recommendations = await generateContent(prompt);\n\n    return recommendations.split('\\n').filter(r => r.trim().length > 0).slice(0, 5);\n  }\n\n  private async compileReportCardData(student: StudentWithRelations): Promise<SubjectReportCard[]> {\n    const subjects = await prisma.subject.findMany({\n      where: { userId: student.userId },\n    });\n\n    return subjects.map(subject => ({\n      id: subject.id,\n      name: subject.name,\n      grade: 'N/A', // Assessment functionality removed\n      outcomes: [],\n    }));\n  }\n\n  private scoreToGrade(score: number): string {\n    if (score >= 90) return 'A';\n    if (score >= 80) return 'B';\n    if (score >= 70) return 'C';\n    if (score >= 60) return 'D';\n    return 'F';\n  }\n\n  private async generateSubjectComments(\n    subject: SubjectReportCard,\n    student: StudentWithRelations,\n    language: 'en' | 'fr'\n  ): Promise<string> {\n    const prompt = language === 'fr'\n      ? `Générez des commentaires d'enseignant pour ${student.firstName} en ${subject.name} avec une note de ${subject.grade}. Soyez spécifique et encourageant.`\n      : `Generate teacher comments for ${student.firstName} in ${subject.name} with a grade of ${subject.grade}. Be specific and encouraging.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify({\n        outcomes: subject.outcomes.length,\n      })\n    );\n  }\n\n  private async generateReportCardComments(\n    student: StudentWithRelations,\n    reportCardData: SubjectReportCard[],\n    language: 'en' | 'fr'\n  ): Promise<string> {\n    const overallGrade = reportCardData.reduce((sum, s) => {\n      const gradeValue = { A: 4, B: 3, C: 2, D: 1, F: 0 }[s.grade] || 0;\n      return sum + gradeValue;\n    }, 0) / reportCardData.length;\n\n    const prompt = language === 'fr'\n      ? `Générez des commentaires généraux de bulletin pour ${student.firstName} ${student.lastName} avec une performance globale de ${overallGrade.toFixed(1)}/4.0.`\n      : `Generate overall report card comments for ${student.firstName} ${student.lastName} with an overall performance of ${overallGrade.toFixed(1)}/4.0.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify(reportCardData.map(s => ({ subject: s.name, grade: s.grade })))\n    );\n  }\n\n  // Curriculum and Planning Report Methods\n  async generateCurriculumCoverageReport(userId: number): Promise<CurriculumCoverageReport> {\n    try {\n      // Get all curriculum expectations for the user's grade/subject\n      const expectations = await prisma.curriculumExpectation.findMany({\n        where: { userId },\n      });\n\n      // Get all plans with expectations\n      const longRangePlans = await prisma.longRangePlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      const unitPlans = await prisma.unitPlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      const lessonPlans = await prisma.eTFOLessonPlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      // Collect all covered expectation IDs\n      const coveredExpectationIds = new Set<string>();\n      \n      longRangePlans.forEach(plan => {\n        plan.expectations.forEach(exp => coveredExpectationIds.add(exp.expectationId));\n      });\n      \n      unitPlans.forEach(plan => {\n        plan.expectations.forEach(exp => coveredExpectationIds.add(exp.expectationId));\n      });\n      \n      lessonPlans.forEach(plan => {\n        plan.expectations.forEach(exp => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      // Calculate coverage\n      const totalExpectations = expectations.length;\n      const coveredExpectations = coveredExpectationIds.size;\n      const coveragePercentage = totalExpectations > 0 \n        ? Math.round((coveredExpectations / totalExpectations) * 100) \n        : 0;\n\n      // Find uncovered expectations\n      const uncoveredExpectations = expectations\n        .filter(exp => !coveredExpectationIds.has(exp.id))\n        .map(exp => ({\n          id: exp.id,\n          code: exp.code,\n          description: exp.description,\n          strand: exp.strand,\n        }));\n\n      // Calculate coverage by strand\n      const coverageByStrand: Record<string, { total: number; covered: number; percentage: number }> = {};\n      \n      expectations.forEach(exp => {\n        if (!coverageByStrand[exp.strand]) {\n          coverageByStrand[exp.strand] = { total: 0, covered: 0, percentage: 0 };\n        }\n        coverageByStrand[exp.strand].total++;\n        if (coveredExpectationIds.has(exp.id)) {\n          coverageByStrand[exp.strand].covered++;\n        }\n      });\n\n      // Calculate percentages for each strand\n      Object.keys(coverageByStrand).forEach(strand => {\n        const strandData = coverageByStrand[strand];\n        strandData.percentage = strandData.total > 0\n          ? Math.round((strandData.covered / strandData.total) * 100)\n          : 0;\n      });\n\n      return {\n        totalExpectations,\n        coveredExpectations,\n        coveragePercentage,\n        uncoveredExpectations,\n        coverageByStrand,\n      };\n    } catch (error) {\n      logger.error('Failed to generate curriculum coverage report:', error);\n      throw error;\n    }\n  }\n\n  async generatePlanningProgressReport(userId: number): Promise<PlanningProgressReport> {\n    try {\n      // Get all planning data for the user\n      const longRangePlans = await prisma.longRangePlan.findMany({\n        where: { userId },\n      });\n\n      const unitPlans = await prisma.unitPlan.findMany({\n        where: { userId },\n      });\n\n      const lessonPlans = await prisma.eTFOLessonPlan.findMany({\n        where: { userId },\n      });\n\n      const daybookEntries = await prisma.daybookEntry.findMany({\n        where: { userId },\n      });\n\n      // Calculate completion rates\n      const calculateCompletionRate = (plans: any[], isComplete: (plan: any) => boolean) => {\n        const total = plans.length;\n        const completed = plans.filter(isComplete).length;\n        const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;\n        return { total, completed, completionRate };\n      };\n\n      return {\n        longRangePlans: calculateCompletionRate(\n          longRangePlans,\n          plan => plan.goals !== null && plan.goals !== ''\n        ),\n        unitPlans: calculateCompletionRate(\n          unitPlans,\n          plan => plan.bigIdeas !== null && plan.bigIdeas !== ''\n        ),\n        lessonPlans: calculateCompletionRate(\n          lessonPlans,\n          plan => plan.learningGoals !== null && plan.learningGoals !== ''\n        ),\n        daybookEntries: calculateCompletionRate(\n          daybookEntries,\n          entry => entry.whatWorked !== null && entry.whatWorked !== ''\n        ),\n      };\n    } catch (error) {\n      logger.error('Failed to generate planning progress report:', error);\n      throw error;\n    }\n  }\n\n  async generateLessonPlanReport(lessonId: string): Promise<LessonPlanReport> {\n    try {\n      const lesson = await prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n          daybookEntry: true,\n          resources: true,\n        },\n      });\n\n      if (!lesson) {\n        throw new Error('Lesson plan not found');\n      }\n\n      return {\n        lesson: {\n          id: lesson.id,\n          title: lesson.title,\n          date: lesson.date,\n          duration: lesson.duration,\n          mindsOn: lesson.mindsOn || undefined,\n          action: lesson.action || undefined,\n          consolidation: lesson.consolidation || undefined,\n          learningGoals: lesson.learningGoals || undefined,\n          materials: lesson.materials || undefined,\n          isSubFriendly: lesson.isSubFriendly,\n        },\n        hierarchy: {\n          longRangePlan: {\n            id: lesson.unitPlan.longRangePlan.id,\n            title: lesson.unitPlan.longRangePlan.title,\n            subject: lesson.unitPlan.longRangePlan.subject || undefined,\n            grade: lesson.unitPlan.longRangePlan.grade || undefined,\n          },\n          unitPlan: {\n            id: lesson.unitPlan.id,\n            title: lesson.unitPlan.title,\n          },\n        },\n        curriculumAlignment: lesson.expectations.map(exp => ({\n          id: exp.expectation.id,\n          code: exp.expectation.code,\n          description: exp.expectation.description,\n          strand: exp.expectation.strand,\n        })),\n        reflection: lesson.daybookEntry ? {\n          whatWorked: lesson.daybookEntry.whatWorked || undefined,\n          overallRating: lesson.daybookEntry.overallRating || undefined,\n          wouldReuseLesson: lesson.daybookEntry.wouldReuseLesson || undefined,\n        } : undefined,\n        resources: lesson.resources.map(resource => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n          url: resource.url || undefined,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate lesson plan report:', error);\n      throw error;\n    }\n  }\n\n  async generateSubstitutePlanReport(lessonId: string): Promise<SubstitutePlanReport> {\n    try {\n      const lesson = await prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          resources: true,\n        },\n      });\n\n      if (!lesson) {\n        throw new Error('Lesson plan not found');\n      }\n\n      if (!lesson.isSubFriendly) {\n        throw new Error('Lesson plan is not marked as substitute-friendly');\n      }\n\n      return {\n        title: lesson.title,\n        basicInfo: {\n          subject: lesson.unitPlan.longRangePlan.subject || 'Not specified',\n          grade: lesson.unitPlan.longRangePlan.grade || 0,\n          duration: lesson.duration,\n          date: lesson.date,\n        },\n        materials: lesson.materials || [],\n        activities: {\n          opening: lesson.mindsOn || '',\n          main: lesson.action || '',\n          closing: lesson.consolidation || '',\n        },\n        specialNotes: lesson.subNotes || undefined,\n        resources: lesson.resources.map(resource => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n          content: resource.content || undefined,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate substitute plan report:', error);\n      throw error;\n    }\n  }\n\n  async generateUnitOverviewReport(unitId: string): Promise<UnitOverviewReport> {\n    try {\n      const unit = await prisma.unitPlan.findUnique({\n        where: { id: unitId },\n        include: {\n          longRangePlan: true,\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n          lessonPlans: true,\n          resources: true,\n        },\n      });\n\n      if (!unit) {\n        throw new Error('Unit plan not found');\n      }\n\n      const totalDuration = unit.lessonPlans.reduce((sum, lesson) => sum + lesson.duration, 0);\n\n      return {\n        unit: {\n          id: unit.id,\n          title: unit.title,\n          description: unit.description || undefined,\n          bigIdeas: unit.bigIdeas || undefined,\n          startDate: unit.startDate,\n          endDate: unit.endDate,\n          estimatedHours: unit.estimatedHours,\n        },\n        hierarchy: {\n          longRangePlan: {\n            id: unit.longRangePlan.id,\n            title: unit.longRangePlan.title,\n            subject: unit.longRangePlan.subject || undefined,\n            grade: unit.longRangePlan.grade || undefined,\n          },\n        },\n        curriculumAlignment: unit.expectations.map(exp => ({\n          id: exp.expectation.id,\n          code: exp.expectation.code,\n          description: exp.expectation.description,\n          strand: exp.expectation.strand,\n        })),\n        lessonSummary: {\n          totalLessons: unit.lessonPlans.length,\n          totalDuration,\n          lessons: unit.lessonPlans.map(lesson => ({\n            id: lesson.id,\n            title: lesson.title,\n            date: lesson.date,\n            duration: lesson.duration,\n          })),\n        },\n        resources: unit.resources.map(resource => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate unit overview report:', error);\n      throw error;\n    }\n  }\n}\n\nexport const reportGeneratorService = new ReportGeneratorService();"],"version":3}