{"version":3,"names":["cov_2cbu7c874n","actualCoverage","OpenAI","logger","openai","s","process","env","OPENAI_API_KEY","b","apiKey","generateContent","prompt","systemMessage","f","warn","messages","push","role","content","chat","completions","create","model","temperature","max_tokens","usage","total_tokens","info","tokens","choices","message","trim","err","error","generateBilingualContent","bilingualSystemMessage","frenchMatch","match","englishMatch","french","english"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/llmService.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport logger from '../logger';\n\nlet openai: OpenAI | null = null;\nif (process.env.OPENAI_API_KEY) {\n  openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\nexport { openai };\n\nexport async function generateContent(prompt: string, systemMessage?: string): Promise<string> {\n  if (!openai) {\n    logger.warn('OpenAI API key not configured, returning placeholder content');\n    return 'AI content generation is not available. Please configure OPENAI_API_KEY environment variable.';\n  }\n\n  try {\n    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [];\n\n    if (systemMessage) {\n      messages.push({\n        role: 'system',\n        content: systemMessage,\n      });\n    }\n\n    messages.push({\n      role: 'user',\n      content: prompt,\n    });\n\n    const chat = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages,\n      temperature: 0.7,\n      max_tokens: 1000,\n    });\n\n    if (chat?.usage?.total_tokens) {\n      logger.info({ tokens: chat.usage.total_tokens }, 'LLM tokens used for content generation');\n    }\n\n    return chat?.choices?.[0]?.message?.content?.trim() || 'No content generated';\n  } catch (err) {\n    logger.error({ err }, 'LLM content generation failed');\n    return 'Failed to generate content. Please try again later.';\n  }\n}\n\nexport async function generateBilingualContent(\n  prompt: string,\n  systemMessage?: string,\n): Promise<{ french: string; english: string }> {\n  const bilingualSystemMessage = `${systemMessage || ''}\\n\\nPlease respond with content in both French and English. Format your response as:\n\nFRENCH:\n[French content here]\n\nENGLISH:\n[English content here]`;\n\n  const content = await generateContent(prompt, bilingualSystemMessage);\n\n  // Parse the bilingual response\n  const frenchMatch = content.match(/FRENCH:\\s*([\\s\\S]*?)(?=ENGLISH:|$)/i);\n  const englishMatch = content.match(/ENGLISH:\\s*([\\s\\S]*?)$/i);\n\n  return {\n    french: frenchMatch?.[1]?.trim() || content,\n    english: englishMatch?.[1]?.trim() || content,\n  };\n}\n"],"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","ignoreList":[]}