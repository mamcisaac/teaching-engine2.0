{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/reportGeneratorService.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/reportGeneratorService.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach, jest } from '@jest/globals';\n\n// Mock the entire prisma module before importing\njest.mock('../../src/prisma', () => ({\n  prisma: {\n    curriculumExpectation: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n    },\n    longRangePlan: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n    },\n    unitPlan: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n    },\n    eTFOLessonPlan: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n    },\n    daybookEntry: {\n      findMany: jest.fn(),\n    },\n  },\n}));\n\nimport { ReportGeneratorService } from '../../src/services/reportGeneratorService';\nimport { prisma } from '../../src/prisma';\n\n// Cast prisma to mocked version\nconst mockPrisma = prisma as any;\n\n// Create a new instance for testing\nconst reportGeneratorService = new ReportGeneratorService();\n\ndescribe('Report Generator Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Reset all mocks to return empty arrays by default\n    mockPrisma.curriculumExpectation.findMany.mockResolvedValue([]);\n    mockPrisma.longRangePlan.findMany.mockResolvedValue([]);\n    mockPrisma.unitPlan.findMany.mockResolvedValue([]);\n    mockPrisma.eTFOLessonPlan.findMany.mockResolvedValue([]);\n    mockPrisma.daybookEntry.findMany.mockResolvedValue([]);\n    \n    mockPrisma.curriculumExpectation.findUnique.mockResolvedValue(null);\n    mockPrisma.longRangePlan.findUnique.mockResolvedValue(null);\n    mockPrisma.unitPlan.findUnique.mockResolvedValue(null);\n    mockPrisma.eTFOLessonPlan.findUnique.mockResolvedValue(null);\n  });\n\n  describe('generateCurriculumCoverageReport', () => {\n    test('should generate coverage report for user', async () => {\n      const userId = 1;\n      const mockExpectations = [\n        {\n          id: 'exp1',\n          code: 'A1.1',\n          description: 'Test expectation 1',\n          strand: 'Number Sense',\n          subject: 'Mathematics',\n          grade: 1,\n          userId,\n        },\n        {\n          id: 'exp2',\n          code: 'A1.2',\n          description: 'Test expectation 2',\n          strand: 'Number Sense',\n          subject: 'Mathematics',\n          grade: 1,\n          userId,\n        },\n      ];\n\n      const mockLongRangePlans = [\n        {\n          id: 'lrp1',\n          title: 'Math Year Plan',\n          subject: 'Mathematics',\n          grade: 1,\n          userId,\n          expectations: [], // Include expectations array\n        },\n      ];\n\n      const mockUnitPlans = [\n        {\n          id: 'unit1',\n          title: 'Numbers Unit',\n          longRangePlanId: 'lrp1',\n          userId,\n          expectations: [], // Include expectations array\n        },\n      ];\n\n      const mockLessonPlans = [\n        {\n          id: 'lesson1',\n          title: 'Counting Lesson',\n          unitPlanId: 'unit1',\n          userId,\n          expectations: [{ expectationId: 'exp1' }], // This already has the correct structure\n        },\n      ];\n\n      mockPrisma.curriculumExpectation.findMany.mockResolvedValue(mockExpectations);\n      mockPrisma.longRangePlan.findMany.mockResolvedValue(mockLongRangePlans);\n      mockPrisma.unitPlan.findMany.mockResolvedValue(mockUnitPlans);\n      mockPrisma.eTFOLessonPlan.findMany.mockResolvedValue(mockLessonPlans);\n\n      const report = await reportGeneratorService.generateCurriculumCoverageReport(userId);\n\n      expect(report).toBeDefined();\n      expect(report.totalExpectations).toBe(2);\n      expect(report.coveredExpectations).toBe(1);\n      expect(report.coveragePercentage).toBe(50);\n      expect(report.uncoveredExpectations).toHaveLength(1);\n      expect(report.uncoveredExpectations[0].code).toBe('A1.2');\n    });\n  });\n\n  describe('generatePlanningProgressReport', () => {\n    test('should generate progress report across all ETFO levels', async () => {\n      const userId = 1;\n      const mockLongRangePlans = [\n        {\n          id: 'lrp1',\n          title: 'Math Year Plan',\n          subject: 'Mathematics',\n          grade: 1,\n          userId,\n          isCompleted: true,\n        },\n        {\n          id: 'lrp2',\n          title: 'Science Year Plan',\n          subject: 'Science',\n          grade: 1,\n          userId,\n          isCompleted: false,\n        },\n      ];\n\n      const mockUnitPlans = [\n        {\n          id: 'unit1',\n          title: 'Numbers Unit',\n          longRangePlanId: 'lrp1',\n          userId,\n          isCompleted: true,\n        },\n        {\n          id: 'unit2',\n          title: 'Plants Unit',\n          longRangePlanId: 'lrp2',\n          userId,\n          isCompleted: false,\n        },\n      ];\n\n      const mockLessonPlans = [\n        {\n          id: 'lesson1',\n          title: 'Counting Lesson',\n          unitPlanId: 'unit1',\n          userId,\n        },\n      ];\n\n      const mockDaybookEntries = [\n        {\n          id: 'daybook1',\n          date: '2024-01-15',\n          userId,\n          reflections: 'Good lesson',\n        },\n      ];\n\n      mockPrisma.longRangePlan.findMany.mockResolvedValue(mockLongRangePlans);\n      mockPrisma.unitPlan.findMany.mockResolvedValue(mockUnitPlans);\n      mockPrisma.eTFOLessonPlan.findMany.mockResolvedValue(mockLessonPlans);\n      mockPrisma.daybookEntry.findMany.mockResolvedValue(mockDaybookEntries);\n\n      const report = await reportGeneratorService.generatePlanningProgressReport(userId);\n\n      expect(report).toBeDefined();\n      expect(report.longRangePlans.total).toBe(2);\n      expect(report.longRangePlans.completed).toBe(1);\n      expect(report.longRangePlans.completionRate).toBe(50);\n    });\n  });\n\n  describe('generateLessonPlanReport', () => {\n    test('should generate detailed lesson plan report', async () => {\n      const lessonId = 'lesson1';\n      const mockLesson = {\n        id: lessonId,\n        title: 'Counting Lesson',\n        date: '2024-01-15',\n        duration: 60,\n        mindsOn: 'Hook activity',\n        action: 'Main learning',\n        consolidation: 'Summary',\n        materials: ['counters', 'whiteboard'],\n        unitPlan: {\n          id: 'unit1',\n          title: 'Numbers Unit',\n          longRangePlan: {\n            id: 'lrp1',\n            title: 'Math Year Plan',\n            subject: 'Mathematics',\n            grade: 1,\n          },\n        },\n        expectations: [\n          {\n            expectation: {\n              id: 'exp1',\n              code: 'A1.1',\n              description: 'Count to 10',\n            },\n          },\n        ],\n      };\n\n      mockPrisma.eTFOLessonPlan.findUnique.mockResolvedValue(mockLesson);\n\n      const report = await reportGeneratorService.generateLessonPlanReport(lessonId);\n\n      expect(report).toBeDefined();\n      expect(report.lesson.title).toBe('Counting Lesson');\n      expect(report.lesson.duration).toBe(60);\n      expect(report.expectations).toHaveLength(1);\n    });\n  });\n\n  describe('generateSubstitutePlanReport', () => {\n    test('should generate substitute-friendly lesson report', async () => {\n      const lessonId = 'lesson1';\n      const mockLesson = {\n        id: lessonId,\n        title: 'Counting Lesson',\n        isSubFriendly: true,\n        subNotes: 'All materials in cabinet',\n        date: '2024-01-15',\n        duration: 60,\n        mindsOn: 'Hook activity',\n        action: 'Main learning',\n        consolidation: 'Summary',\n        materials: ['counters', 'whiteboard'],\n        grouping: 'pairs',\n        unitPlan: {\n          id: 'unit1',\n          title: 'Numbers Unit',\n          longRangePlan: {\n            id: 'lrp1',\n            title: 'Math Year Plan',\n            subject: 'Mathematics',\n            grade: 1,\n          },\n        },\n      };\n\n      mockPrisma.eTFOLessonPlan.findUnique.mockResolvedValue(mockLesson);\n\n      const report = await reportGeneratorService.generateSubstitutePlanReport(lessonId);\n\n      expect(report).toBeDefined();\n      expect(report.lesson.title).toBe('Counting Lesson');\n      expect(report.substituteNotes).toBe('All materials in cabinet');\n    });\n\n    test('should handle non-sub-friendly lesson', async () => {\n      const lessonId = 'lesson1';\n      const mockLesson = {\n        id: lessonId,\n        title: 'Complex Lesson',\n        isSubFriendly: false,\n      };\n\n      mockPrisma.eTFOLessonPlan.findUnique.mockResolvedValue(mockLesson);\n\n      await expect(\n        reportGeneratorService.generateSubstitutePlanReport(lessonId)\n      ).rejects.toThrow('Lesson plan is not marked as substitute-friendly');\n    });\n  });\n\n  describe('generateUnitOverviewReport', () => {\n    test('should generate comprehensive unit overview', async () => {\n      const unitId = 'unit1';\n      const mockUnit = {\n        id: unitId,\n        title: 'Numbers Unit',\n        description: 'Learning about numbers',\n        startDate: '2024-01-01',\n        endDate: '2024-01-31',\n        estimatedHours: 10,\n        bigIdeas: 'Understanding numbers',\n        lessonPlans: [\n          {\n            id: 'lesson1',\n            title: 'Counting',\n            duration: 60,\n          },\n          {\n            id: 'lesson2',\n            title: 'Addition',\n            duration: 45,\n          },\n        ],\n        longRangePlan: {\n          id: 'lrp1',\n          title: 'Math Year Plan',\n          subject: 'Mathematics',\n          grade: 1,\n        },\n        expectations: [\n          {\n            expectation: {\n              id: 'exp1',\n              code: 'A1.1',\n              description: 'Count to 10',\n              strand: 'Number Sense',\n            },\n          },\n        ],\n        resources: [], // Add resources field\n      };\n\n      mockPrisma.unitPlan.findUnique.mockResolvedValue(mockUnit);\n\n      const report = await reportGeneratorService.generateUnitOverviewReport(unitId);\n\n      expect(report).toBeDefined();\n      expect(report.unit.title).toBe('Numbers Unit');\n      expect(report.lessonSummary.totalLessons).toBe(2);\n      expect(report.lessonSummary.totalDuration).toBe(105);\n    });\n  });\n\n  describe('error handling', () => {\n    test('should handle database errors gracefully', async () => {\n      const userId = 1;\n      \n      // Clear the mock to ensure our rejection takes effect\n      mockPrisma.curriculumExpectation.findMany.mockClear();\n      mockPrisma.curriculumExpectation.findMany.mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      await expect(\n        reportGeneratorService.generateCurriculumCoverageReport(userId)\n      ).rejects.toThrow('Database connection failed');\n    });\n\n    test('should handle missing lesson plan', async () => {\n      const lessonId = 'nonexistent';\n      \n      mockPrisma.eTFOLessonPlan.findUnique.mockResolvedValue(null);\n\n      await expect(\n        reportGeneratorService.generateLessonPlanReport(lessonId)\n      ).rejects.toThrow('Lesson plan not found');\n    });\n\n    test('should handle missing unit plan', async () => {\n      const unitId = 'nonexistent';\n      \n      mockPrisma.unitPlan.findUnique.mockResolvedValue(null);\n\n      await expect(\n        reportGeneratorService.generateUnitOverviewReport(unitId)\n      ).rejects.toThrow('Unit plan not found');\n    });\n  });\n});"],"version":3}