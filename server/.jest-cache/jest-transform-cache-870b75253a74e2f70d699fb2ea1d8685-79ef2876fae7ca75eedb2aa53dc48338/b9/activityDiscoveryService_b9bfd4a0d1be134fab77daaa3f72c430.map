{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/activityDiscoveryService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { ExternalActivity, Prisma } from '@teaching-engine/database';\nimport { BaseConnector } from './connectors/baseConnector';\nimport { OERConnector } from './connectors/oerConnector';\nimport { CurriculumWebConnector } from './connectors/curriculumWebConnector';\nimport { EducationWebConnector } from './connectors/educationWebConnector';\n\nexport interface SearchParams {\n  query?: string;\n  grade?: number;\n  subject?: string;\n  gradeLevel?: number;\n  language?: string;\n  duration?: {\n    min?: number;\n    max?: number;\n  };\n  materials?: string[];\n  requireAllMaterials?: boolean;\n  activityType?: string[];\n  curriculumAlignment?: string[];\n  sources?: string[];\n  onlyFree?: boolean;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface ActivitySearchResult {\n  activities: ExternalActivity[];\n  total: number;\n  hasMore: boolean;\n  searchParams: SearchParams;\n  sources: string[];\n  executionTime: number;\n}\n\nexport interface ActivityRecommendations {\n  activities: ExternalActivity[];\n  basedOn: 'lessonPlan' | 'userHistory' | 'similarTeachers';\n  lessonPlanId?: string;\n  limit: number;\n  criteria: string[];\n}\n\n/**\n * Enhanced Activity Discovery Service\n * Manages multiple connectors to search educational activities from various sources\n */\nexport class ActivityDiscoveryService extends BaseService {\n  private connectors: Map<string, BaseConnector> = new Map();\n  private cache: Map<string, { data: unknown; expiry: number }> = new Map();\n  private readonly CACHE_TTL = 1000 * 60 * 30; // 30 minutes\n\n  constructor() {\n    super('ActivityDiscoveryService');\n    this.initializeConnectors();\n  }\n\n  /**\n   * Initialize available connectors\n   */\n  private initializeConnectors(): void {\n    try {\n      // Add OER Commons connector\n      this.connectors.set('oer', new OERConnector());\n\n      // Add Curriculum Web connector (government resources)\n      this.connectors.set('curriculum', new CurriculumWebConnector());\n\n      // Add Educational Websites connector (Khan Academy, ReadWorks, etc.)\n      this.connectors.set('education', new EducationWebConnector());\n\n      this.logger.info(`Initialized ${this.connectors.size} activity discovery connectors`);\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to initialize connectors');\n    }\n  }\n\n  /**\n   * Search for activities across all available sources\n   */\n  async search(params: SearchParams, userId: number): Promise<ActivitySearchResult> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info({ params, userId }, 'Starting activity search');\n\n      // Check cache first\n      const cacheKey = this.generateCacheKey('search', params);\n      const cached = this.getFromCache<ActivitySearchResult>(cacheKey);\n      if (cached) {\n        this.logger.debug('Returning cached search results');\n        return cached;\n      }\n\n      // Normalize and validate parameters\n      const normalizedParams = this.normalizeSearchParams(params);\n\n      // Determine which sources to search\n      const sourcesToSearch = normalizedParams.sources\n        ? normalizedParams.sources.filter((s) => this.connectors.has(s))\n        : Array.from(this.connectors.keys());\n\n      // Search each connector in parallel\n      const searchPromises = sourcesToSearch.map(async (sourceId) => {\n        const connector = this.connectors.get(sourceId);\n        if (!connector) return [];\n\n        try {\n          this.logger.debug(`Searching ${sourceId} connector`);\n          const results = await connector.search(normalizedParams);\n          this.logger.debug(`${sourceId} returned ${results.length} results`);\n          return results;\n        } catch (error) {\n          this.logger.error({ error, sourceId }, `Search failed for ${sourceId}`);\n          return [];\n        }\n      });\n\n      const allResults = await Promise.all(searchPromises);\n      const flatResults = allResults.flat() as ExternalActivity[];\n\n      // Apply additional filtering and ranking\n      const filteredResults = this.filterAndRankResults(flatResults, normalizedParams);\n\n      // Apply pagination\n      const paginatedResults = this.applyPagination(filteredResults, normalizedParams);\n\n      const result: ActivitySearchResult = {\n        activities: paginatedResults,\n        total: filteredResults.length,\n        hasMore: (normalizedParams.offset || 0) + paginatedResults.length < filteredResults.length,\n        searchParams: normalizedParams,\n        sources: sourcesToSearch,\n        executionTime: Date.now() - startTime,\n      };\n\n      // Cache the result\n      this.setCache(cacheKey, result);\n\n      this.logger.info(\n        {\n          resultsCount: paginatedResults.length,\n          totalFound: filteredResults.length,\n          executionTime: result.executionTime,\n          sources: sourcesToSearch,\n        },\n        'Activity search completed',\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.error({ error, params, userId }, 'Activity search failed');\n      throw new Error('Activity search failed');\n    }\n  }\n\n  /**\n   * Get activity details from a specific source\n   */\n  async getActivity(source: string, externalId: string): Promise<ExternalActivity | null> {\n    try {\n      const cacheKey = this.generateCacheKey('activity', { source, externalId });\n      const cached = this.getFromCache<ExternalActivity>(cacheKey);\n      if (cached) {\n        return cached;\n      }\n\n      const connector = this.connectors.get(source);\n      if (!connector) {\n        this.logger.warn({ source }, 'Unknown activity source');\n        return null;\n      }\n\n      const activity = await connector.getActivityDetails(externalId);\n      if (activity) {\n        this.setCache(cacheKey, activity);\n      }\n\n      return activity as ExternalActivity | null;\n    } catch (error) {\n      this.logger.error({ error, source, externalId }, 'Failed to get activity details');\n      return null;\n    }\n  }\n\n  /**\n   * Get activity by composite ID (source-externalId)\n   */\n  async getActivityById(id: string): Promise<ExternalActivity | null> {\n    const [source, ...externalIdParts] = id.split('-');\n    const externalId = externalIdParts.join('-');\n    return this.getActivity(source || 'unknown', externalId || id);\n  }\n\n  /**\n   * Alias for getActivityById for backward compatibility\n   */\n  async getActivityDetails(id: string): Promise<ExternalActivity | null> {\n    return this.getActivityById(id);\n  }\n\n  /**\n   * Import an activity into user's collection or lesson plan\n   */\n  async importActivity(\n    params: {\n      activityId: string;\n      lessonPlanId?: string;\n      lessonSection?: string;\n      customizations?: Record<string, unknown>;\n      notes?: string;\n    },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Ensure the activity exists in our database\n      const [source, ...externalIdParts] = params.activityId.split('-');\n      const externalId = externalIdParts.join('-');\n\n      // Get activity details to store in our database if needed\n      const activityDetails = await this.getActivity(source, externalId);\n      if (!activityDetails) {\n        throw new Error('Activity not found');\n      }\n\n      // Create or find the external activity record\n      let externalActivity = await prisma.externalActivity.findUnique({\n        where: {\n          source_externalId: {\n            source: activityDetails.source,\n            externalId: activityDetails.externalId,\n          },\n        },\n      });\n\n      if (!externalActivity) {\n        externalActivity = await prisma.externalActivity.create({\n          data: activityDetails,\n        });\n      }\n\n      // Create the activity import record\n      const activityImport = await prisma.activityImport.create({\n        data: {\n          userId,\n          activityId: externalActivity.id,\n          lessonPlanId: params.lessonPlanId || null,\n          lessonSection: params.lessonSection || null,\n          customizations: (params.customizations || null) as Prisma.InputJsonValue,\n          notes: params.notes || null,\n        },\n        include: {\n          activity: true,\n          lessonPlan: {\n            select: {\n              id: true,\n              title: true,\n              date: true,\n            },\n          },\n        },\n      });\n\n      this.logger.info(\n        { userId, activityId: params.activityId, lessonPlanId: params.lessonPlanId },\n        'Activity imported successfully',\n      );\n\n      return activityImport;\n    } catch (error) {\n      this.logger.error({ error, params, userId }, 'Failed to import activity');\n      throw error;\n    }\n  }\n\n  /**\n   * Rate an activity\n   */\n  async rateActivity(\n    activityId: string,\n    rating: number,\n    review: string | null,\n    details: {\n      gradeUsed?: number;\n      subjectUsed?: string;\n      workedWell?: string;\n      challenges?: string;\n      wouldRecommend?: boolean;\n    },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Ensure the activity exists\n      const activity = await prisma.externalActivity.findUnique({\n        where: { id: activityId },\n      });\n\n      if (!activity) {\n        throw new Error('Activity not found');\n      }\n\n      // Create or update the rating\n      const activityRating = await prisma.activityRating.upsert({\n        where: {\n          userId_activityId: {\n            userId,\n            activityId,\n          },\n        },\n        update: {\n          rating,\n          review,\n          wouldRecommend: details.wouldRecommend,\n          gradeUsed: details.gradeUsed,\n          subjectUsed: details.subjectUsed,\n          workedWell: details.workedWell,\n          challenges: details.challenges,\n        },\n        create: {\n          userId,\n          activityId,\n          rating,\n          review,\n          wouldRecommend: details.wouldRecommend,\n          gradeUsed: details.gradeUsed,\n          subjectUsed: details.subjectUsed,\n          workedWell: details.workedWell,\n          challenges: details.challenges,\n        },\n        include: {\n          activity: true,\n        },\n      });\n\n      this.logger.info({ userId, activityId, rating }, 'Activity rated successfully');\n\n      return activityRating;\n    } catch (error) {\n      this.logger.error({ error, activityId, userId }, 'Failed to rate activity');\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's activity collections\n   */\n  async getUserCollections(userId: number): Promise<Record<string, unknown>[]> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      const collections = await prisma.activityCollection.findMany({\n        where: { userId },\n        include: {\n          items: {\n            include: {\n              activity: true,\n            },\n          },\n        },\n        orderBy: { updatedAt: 'desc' },\n      });\n\n      return collections;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user collections');\n      return [];\n    }\n  }\n\n  /**\n   * Create a new activity collection\n   */\n  async createCollection(\n    data: { name: string; description?: string; isPublic?: boolean },\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      const collection = await prisma.activityCollection.create({\n        data: {\n          userId,\n          name: data.name,\n          description: data.description || null,\n          isPublic: data.isPublic || false,\n        },\n        include: {\n          items: true,\n        },\n      });\n\n      this.logger.info({ userId, collectionName: data.name }, 'Activity collection created');\n\n      return collection;\n    } catch (error) {\n      this.logger.error({ error, data, userId }, 'Failed to create collection');\n      throw error;\n    }\n  }\n\n  /**\n   * Add activity to collection\n   */\n  async addToCollection(\n    collectionId: string,\n    activityId: string,\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Verify the collection belongs to the user\n      const collection = await prisma.activityCollection.findFirst({\n        where: {\n          id: collectionId,\n          userId,\n        },\n      });\n\n      if (!collection) {\n        throw new Error('Collection not found or access denied');\n      }\n\n      // Add to collection\n      await prisma.activityCollectionItem.create({\n        data: {\n          collectionId,\n          activityId,\n        },\n      });\n\n      return {\n        success: true,\n        collectionId,\n        activityId,\n      };\n    } catch (error) {\n      this.logger.error({ error, collectionId, activityId, userId }, 'Failed to add to collection');\n      throw error;\n    }\n  }\n\n  /**\n   * Remove activity from collection\n   */\n  async removeFromCollection(\n    collectionId: string,\n    activityId: string,\n    userId: number,\n  ): Promise<Record<string, unknown>> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Verify the collection belongs to the user\n      const collection = await prisma.activityCollection.findFirst({\n        where: {\n          id: collectionId,\n          userId,\n        },\n      });\n\n      if (!collection) {\n        throw new Error('Collection not found or access denied');\n      }\n\n      // Remove from collection\n      await prisma.activityCollectionItem.delete({\n        where: {\n          collectionId_activityId: {\n            collectionId,\n            activityId,\n          },\n        },\n      });\n\n      return {\n        success: true,\n        collectionId,\n        activityId,\n      };\n    } catch (error) {\n      this.logger.error(\n        { error, collectionId, activityId, userId },\n        'Failed to remove from collection',\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get recommended activities for a lesson plan\n   */\n  async getRecommendedActivities(\n    lessonPlanId: string,\n    userId: number,\n    limit: number = 5,\n  ): Promise<ActivityRecommendations> {\n    try {\n      const { prisma } = await import('../prisma');\n\n      // Get lesson plan details\n      const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonPlanId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n        },\n      });\n\n      if (!lessonPlan) {\n        throw new Error('Lesson plan not found');\n      }\n\n      // Build search criteria based on lesson plan\n      const searchParams: SearchParams = {\n        grade: lessonPlan.unitPlan.longRangePlan.grade,\n        subject: lessonPlan.unitPlan.longRangePlan.subject,\n        language: 'en', // Default to English for now\n        limit,\n      };\n\n      // Search for relevant activities\n      const searchResult = await this.search(searchParams, userId);\n\n      return {\n        activities: searchResult.activities,\n        basedOn: 'lessonPlan',\n        lessonPlanId,\n        limit,\n        criteria: [\n          `Grade ${lessonPlan.unitPlan.longRangePlan.grade}`,\n          lessonPlan.unitPlan.longRangePlan.subject,\n          'English',\n        ],\n      };\n    } catch (error) {\n      this.logger.error({ error, lessonPlanId, userId }, 'Failed to get recommended activities');\n      return {\n        activities: [],\n        basedOn: 'lessonPlan',\n        lessonPlanId,\n        limit,\n        criteria: [],\n      };\n    }\n  }\n\n  // Private helper methods\n\n  private normalizeSearchParams(params: SearchParams): SearchParams {\n    return {\n      ...params,\n      grade: params.grade || params.gradeLevel,\n      limit: Math.min(params.limit || 20, 100),\n      offset: Math.max(params.offset || 0, 0),\n    };\n  }\n\n  private filterAndRankResults(\n    results: ExternalActivity[],\n    params: SearchParams,\n  ): ExternalActivity[] {\n    let filtered = results;\n\n    // Filter by grade if specified\n    if (params.grade) {\n      filtered = filtered.filter(\n        (activity) => activity.gradeMin <= params.grade! && activity.gradeMax >= params.grade!,\n      );\n    }\n\n    // Filter by free only if specified\n    if (params.onlyFree) {\n      filtered = filtered.filter((activity) => activity.isFree);\n    }\n\n    // Filter by activity type if specified\n    if (params.activityType && params.activityType.length > 0) {\n      filtered = filtered.filter((activity) =>\n        params.activityType!.includes(activity.activityType),\n      );\n    }\n\n    // Filter by materials if specified\n    if (params.materials && params.materials.length > 0) {\n      filtered = filtered.filter((activity) => {\n        const activityMaterials = Array.isArray(activity.materials)\n          ? (activity.materials as string[])\n          : [];\n        if (params.requireAllMaterials) {\n          return params.materials!.every((material) =>\n            activityMaterials.some(\n              (am) => typeof am === 'string' && am.toLowerCase().includes(material.toLowerCase()),\n            ),\n          );\n        } else {\n          return params.materials!.some((material) =>\n            activityMaterials.some(\n              (am) => typeof am === 'string' && am.toLowerCase().includes(material.toLowerCase()),\n            ),\n          );\n        }\n      });\n    }\n\n    // Sort by relevance (this could be enhanced with more sophisticated ranking)\n    filtered.sort((a, b) => {\n      // Prioritize activities with ratings\n      if (a.sourceRating && !b.sourceRating) return -1;\n      if (!a.sourceRating && b.sourceRating) return 1;\n\n      // Sort by rating if both have ratings\n      if (a.sourceRating && b.sourceRating) {\n        return b.sourceRating - a.sourceRating;\n      }\n\n      // Sort by last verified date\n      return new Date(b.lastVerified).getTime() - new Date(a.lastVerified).getTime();\n    });\n\n    return filtered;\n  }\n\n  private applyPagination(results: ExternalActivity[], params: SearchParams): ExternalActivity[] {\n    const offset = params.offset || 0;\n    const limit = params.limit || 20;\n    return results.slice(offset, offset + limit);\n  }\n\n  private generateCacheKey(type: string, params: Record<string, unknown> | SearchParams): string {\n    return `${type}:${JSON.stringify(params)}`;\n  }\n\n  private getFromCache<T = unknown>(key: string): T | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expiry > Date.now()) {\n      return cached.data as T;\n    }\n    this.cache.delete(key);\n    return null;\n  }\n\n  private setCache(key: string, data: unknown): void {\n    this.cache.set(key, {\n      data,\n      expiry: Date.now() + this.CACHE_TTL,\n    });\n  }\n\n  /**\n   * Clear expired cache entries\n   */\n  private cleanupCache(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (value.expiry <= now) {\n        this.cache.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get available activity sources\n   */\n  getAvailableSources(): string[] {\n    return Array.from(this.connectors.keys());\n  }\n\n  /**\n   * Check if a source is available\n   */\n  isSourceAvailable(source: string): boolean {\n    return this.connectors.has(source);\n  }\n}\n\n// Export singleton instance getter\nlet serviceInstance: ActivityDiscoveryService | null = null;\n\nexport function getActivityDiscoveryService(): ActivityDiscoveryService {\n  if (!serviceInstance) {\n    serviceInstance = new ActivityDiscoveryService();\n  }\n  return serviceInstance;\n}\n\n// Export singleton instance\nexport const activityDiscoveryService = getActivityDiscoveryService();\n"],"version":3}