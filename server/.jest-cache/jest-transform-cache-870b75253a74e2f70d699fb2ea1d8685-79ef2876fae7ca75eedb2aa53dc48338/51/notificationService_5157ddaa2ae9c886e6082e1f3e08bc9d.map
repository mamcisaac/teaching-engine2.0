{"version":3,"names":["cov_2o8g8lmmwu","actualCoverage","BaseService","emailService","prisma","NotificationService","notifications","s","Map","preferences","templates","cleanupInterval","constructor","f","initializeDefaultTemplates","startCleanupTask","sendNotification","userId","notification","validateRequired","title","message","notificationId","Date","now","Math","random","toString","substr","fullNotification","id","createdAt","userPrefs","getUserPreferences","effectiveChannels","filterChannelsByPreferences","channels","length","b","logger","info","includes","set","emailEnabled","sendEmailNotification","pushEnabled","sendPushNotification","type","error","handleError","sendTemplatedNotification","templateId","variables","options","template","get","Error","messageTemplate","key","value","Object","entries","regex","RegExp","replace","priority","defaultChannels","metadata","expiresAt","getUserNotifications","limit","offset","unreadOnly","userNotifications","Array","from","values","filter","n","isNotificationRead","sort","a","getTime","total","unreadCount","slice","markAsRead","setNotificationRead","debug","markAllAsRead","markedCount","deleteNotification","delete","updatePreferences","current","getDefaultPreferences","updated","prefs","createTemplate","name","getTemplates","sendBulkNotification","userIds","operations","map","results","errors","withParallel","failFast","maxConcurrency","sent","failed","i","push","totalUsers","user","findUnique","where","select","email","isInQuietHours","quietHours","subject","html","formatEmailNotification","sendEmail","requestedChannels","channel","userName","priorityColor","low","medium","high","urgent","toUpperCase","toLocaleString","start","end","categories","milestone","enabled","activity","system","reminder","currentTime","getHours","padStart","getMinutes","readNotifications","has","read","add","Set","setInterval","cleanedCount","destroy","clearInterval","notificationService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { emailService } from './emailService';\nimport { prisma } from '../prisma';\n\nexport interface Notification {\n  id: string;\n  userId: number;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  message: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  channels: ('in_app' | 'email' | 'push')[];\n  metadata?: Record<string, unknown>;\n  expiresAt?: Date;\n  createdAt: Date;\n}\n\nexport interface NotificationPreferences {\n  userId: number;\n  emailEnabled: boolean;\n  pushEnabled: boolean;\n  quietHours: {\n    start: string; // HH:MM format\n    end: string; // HH:MM format\n  };\n  categories: {\n    [category: string]: {\n      enabled: boolean;\n      channels: ('in_app' | 'email' | 'push')[];\n    };\n  };\n}\n\nexport interface NotificationTemplate {\n  id: string;\n  name: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  messageTemplate: string;\n  defaultChannels: ('in_app' | 'email' | 'push')[];\n  variables: string[];\n}\n\nexport class NotificationService extends BaseService {\n  private notifications: Map<string, Notification> = new Map();\n  private preferences: Map<number, NotificationPreferences> = new Map();\n  private templates: Map<string, NotificationTemplate> = new Map();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    super('NotificationService');\n    this.initializeDefaultTemplates();\n    this.startCleanupTask();\n  }\n\n  /**\n   * Send a notification to a user\n   */\n  async sendNotification(\n    userId: number,\n    notification: Omit<Notification, 'id' | 'userId' | 'createdAt'>,\n  ): Promise<string> {\n    try {\n      this.validateRequired({ userId, title: notification.title, message: notification.message }, [\n        'userId',\n        'title',\n        'message',\n      ]);\n\n      const notificationId = `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      const fullNotification: Notification = {\n        id: notificationId,\n        userId,\n        createdAt: new Date(),\n        ...notification,\n      };\n\n      // Check user preferences\n      const userPrefs = await this.getUserPreferences(userId);\n      const effectiveChannels = this.filterChannelsByPreferences(notification.channels, userPrefs);\n\n      if (effectiveChannels.length === 0) {\n        this.logger.info({ userId, notificationId }, 'No enabled channels for notification');\n        return notificationId;\n      }\n\n      // Store in-app notification\n      if (effectiveChannels.includes('in_app')) {\n        this.notifications.set(notificationId, fullNotification);\n      }\n\n      // Send email notification\n      if (effectiveChannels.includes('email') && userPrefs.emailEnabled) {\n        await this.sendEmailNotification(userId, fullNotification);\n      }\n\n      // Send push notification (placeholder for future implementation)\n      if (effectiveChannels.includes('push') && userPrefs.pushEnabled) {\n        await this.sendPushNotification(userId, fullNotification);\n      }\n\n      this.logger.info(\n        {\n          userId,\n          notificationId,\n          type: notification.type,\n          channels: effectiveChannels,\n        },\n        'Notification sent successfully',\n      );\n\n      return notificationId;\n    } catch (error) {\n      this.handleError(error, { userId, notification });\n    }\n  }\n\n  /**\n   * Send notification using a template\n   */\n  async sendTemplatedNotification(\n    userId: number,\n    templateId: string,\n    variables: Record<string, string>,\n    options: {\n      priority?: 'low' | 'medium' | 'high' | 'urgent';\n      channels?: ('in_app' | 'email' | 'push')[];\n      expiresAt?: Date;\n      metadata?: Record<string, unknown>;\n    } = {},\n  ): Promise<string> {\n    try {\n      const template = this.templates.get(templateId);\n      if (!template) {\n        throw new Error(`Template ${templateId} not found`);\n      }\n\n      // Replace template variables\n      let message = template.messageTemplate;\n      for (const [key, value] of Object.entries(variables)) {\n        const regex = new RegExp(`{{${key}}}`, 'g');\n        message = message.replace(regex, value);\n      }\n\n      let title = template.title;\n      for (const [key, value] of Object.entries(variables)) {\n        const regex = new RegExp(`{{${key}}}`, 'g');\n        title = title.replace(regex, value);\n      }\n\n      return await this.sendNotification(userId, {\n        type: template.type,\n        title,\n        message,\n        priority: options.priority || 'medium',\n        channels: options.channels || template.defaultChannels,\n        metadata: options.metadata,\n        expiresAt: options.expiresAt,\n      });\n    } catch (error) {\n      this.handleError(error, { userId, templateId, variables });\n    }\n  }\n\n  /**\n   * Get in-app notifications for a user\n   */\n  async getUserNotifications(\n    userId: number,\n    options: {\n      limit?: number;\n      offset?: number;\n      unreadOnly?: boolean;\n    } = {},\n  ): Promise<{\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n  }> {\n    try {\n      const { limit = 50, offset = 0, unreadOnly = false } = options;\n\n      const userNotifications = Array.from(this.notifications.values())\n        .filter((n) => n.userId === userId)\n        .filter((n) => !unreadOnly || !this.isNotificationRead(n.id))\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n      const total = userNotifications.length;\n      const unreadCount = userNotifications.filter((n) => !this.isNotificationRead(n.id)).length;\n      const notifications = userNotifications.slice(offset, offset + limit);\n\n      return { notifications, total, unreadCount };\n    } catch (error) {\n      this.handleError(error, { userId, options });\n    }\n  }\n\n  /**\n   * Mark notification as read\n   */\n  async markAsRead(notificationId: string, userId: number): Promise<boolean> {\n    try {\n      const notification = this.notifications.get(notificationId);\n      if (!notification || notification.userId !== userId) {\n        return false;\n      }\n\n      // In a real implementation, you'd store read status in database\n      // For now, we'll use a simple in-memory approach\n      this.setNotificationRead(notificationId, true);\n\n      this.logger.debug({ notificationId, userId }, 'Notification marked as read');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, notificationId, userId }, 'Failed to mark notification as read');\n      return false;\n    }\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   */\n  async markAllAsRead(userId: number): Promise<number> {\n    try {\n      let markedCount = 0;\n\n      for (const notification of this.notifications.values()) {\n        if (notification.userId === userId && !this.isNotificationRead(notification.id)) {\n          this.setNotificationRead(notification.id, true);\n          markedCount++;\n        }\n      }\n\n      this.logger.info({ userId, markedCount }, 'Marked all notifications as read');\n      return markedCount;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to mark all notifications as read');\n      return 0;\n    }\n  }\n\n  /**\n   * Delete a notification\n   */\n  async deleteNotification(notificationId: string, userId: number): Promise<boolean> {\n    try {\n      const notification = this.notifications.get(notificationId);\n      if (!notification || notification.userId !== userId) {\n        return false;\n      }\n\n      this.notifications.delete(notificationId);\n      this.logger.debug({ notificationId, userId }, 'Notification deleted');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, notificationId, userId }, 'Failed to delete notification');\n      return false;\n    }\n  }\n\n  /**\n   * Update user notification preferences\n   */\n  async updatePreferences(\n    userId: number,\n    preferences: Partial<NotificationPreferences>,\n  ): Promise<void> {\n    try {\n      const current = this.preferences.get(userId) || this.getDefaultPreferences(userId);\n      const updated = { ...current, ...preferences, userId };\n\n      this.preferences.set(userId, updated);\n\n      // Currently stored in memory for this session\n      this.logger.info({ userId }, 'User notification preferences updated');\n    } catch (error) {\n      this.handleError(error, { userId, preferences });\n    }\n  }\n\n  /**\n   * Get user notification preferences\n   */\n  async getUserPreferences(userId: number): Promise<NotificationPreferences> {\n    try {\n      let prefs = this.preferences.get(userId);\n\n      if (!prefs) {\n        // Use default preferences for this session\n        prefs = this.getDefaultPreferences(userId);\n        this.preferences.set(userId, prefs);\n      }\n\n      return prefs;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user preferences');\n      return this.getDefaultPreferences(userId);\n    }\n  }\n\n  /**\n   * Create a custom notification template\n   */\n  createTemplate(template: NotificationTemplate): void {\n    this.templates.set(template.id, template);\n    this.logger.info(\n      { templateId: template.id, name: template.name },\n      'Notification template created',\n    );\n  }\n\n  /**\n   * Get available notification templates\n   */\n  getTemplates(): NotificationTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  /**\n   * Send bulk notifications to multiple users\n   */\n  async sendBulkNotification(\n    userIds: number[],\n    notification: Omit<Notification, 'id' | 'userId' | 'createdAt'>,\n  ): Promise<{\n    sent: string[];\n    failed: { userId: number; error: string }[];\n  }> {\n    const operations = userIds.map((userId) => () => this.sendNotification(userId, notification));\n\n    const { results, errors } = await this.withParallel(operations, {\n      failFast: false,\n      maxConcurrency: 10,\n    });\n\n    const sent: string[] = [];\n    const failed: { userId: number; error: string }[] = [];\n\n    for (let i = 0; i < userIds.length; i++) {\n      if (results[i] !== null) {\n        sent.push(results[i] as string);\n      } else {\n        failed.push({\n          userId: userIds[i],\n          error: errors[i]?.message || 'Unknown error',\n        });\n      }\n    }\n\n    this.logger.info(\n      {\n        totalUsers: userIds.length,\n        sent: sent.length,\n        failed: failed.length,\n      },\n      'Bulk notification completed',\n    );\n\n    return { sent, failed };\n  }\n\n  // Private methods\n\n  private async sendEmailNotification(userId: number, notification: Notification): Promise<void> {\n    try {\n      // Get user email\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { email: true, name: true },\n      });\n\n      if (!user?.email) {\n        throw new Error('User email not found');\n      }\n\n      // Check quiet hours\n      const prefs = await this.getUserPreferences(userId);\n      if (this.isInQuietHours(prefs.quietHours)) {\n        this.logger.debug({ userId }, 'Skipping email due to quiet hours');\n        return;\n      }\n\n      const subject = `[Teaching Engine] ${notification.title}`;\n      const html = this.formatEmailNotification(notification, user.name);\n\n      await emailService.sendEmail(user.email, subject, html);\n\n      this.logger.debug({ userId, notificationId: notification.id }, 'Email notification sent');\n    } catch (error) {\n      this.logger.error(\n        { error, userId, notificationId: notification.id },\n        'Failed to send email notification',\n      );\n    }\n  }\n\n  private async sendPushNotification(userId: number, notification: Notification): Promise<void> {\n    // Push notifications not implemented - using in-app notifications only\n    this.logger.debug(\n      { userId, notificationId: notification.id },\n      'Push notification skipped - using in-app notifications',\n    );\n  }\n\n  private filterChannelsByPreferences(\n    requestedChannels: ('in_app' | 'email' | 'push')[],\n    preferences: NotificationPreferences,\n  ): ('in_app' | 'email' | 'push')[] {\n    return requestedChannels.filter((channel) => {\n      switch (channel) {\n        case 'email':\n          return preferences.emailEnabled;\n        case 'push':\n          return preferences.pushEnabled;\n        case 'in_app':\n          return true; // Always allow in-app notifications\n        default:\n          return false;\n      }\n    });\n  }\n\n  private formatEmailNotification(notification: Notification, userName: string): string {\n    const priorityColor = {\n      low: '#28a745',\n      medium: '#ffc107',\n      high: '#fd7e14',\n      urgent: '#dc3545',\n    }[notification.priority];\n\n    return `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background-color: ${priorityColor}; color: white; padding: 20px; text-align: center;\">\n          <h1 style=\"margin: 0;\">${notification.title}</h1>\n        </div>\n        <div style=\"padding: 20px; background-color: #f8f9fa;\">\n          <p>Hello ${userName},</p>\n          <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            ${notification.message.replace(/\\n/g, '<br>')}\n          </div>\n          <p style=\"color: #6c757d; font-size: 12px;\">\n            This is an automated notification from Teaching Engine 2.0.<br>\n            Priority: ${notification.priority.toUpperCase()}<br>\n            Sent: ${notification.createdAt.toLocaleString()}\n          </p>\n        </div>\n      </div>\n    `;\n  }\n\n  private getDefaultPreferences(userId: number): NotificationPreferences {\n    return {\n      userId,\n      emailEnabled: true,\n      pushEnabled: false,\n      quietHours: {\n        start: '22:00',\n        end: '07:00',\n      },\n      categories: {\n        milestone: { enabled: true, channels: ['in_app', 'email'] },\n        activity: { enabled: true, channels: ['in_app'] },\n        system: { enabled: true, channels: ['in_app', 'email'] },\n        reminder: { enabled: true, channels: ['in_app'] },\n      },\n    };\n  }\n\n  private isInQuietHours(quietHours: { start: string; end: string }): boolean {\n    const now = new Date();\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n    const { start, end } = quietHours;\n\n    if (start <= end) {\n      // Same day quiet hours (e.g., 22:00 to 23:59)\n      return currentTime >= start && currentTime <= end;\n    } else {\n      // Cross-midnight quiet hours (e.g., 22:00 to 07:00)\n      return currentTime >= start || currentTime <= end;\n    }\n  }\n\n  private isNotificationRead(notificationId: string): boolean {\n    // In a real implementation, store read status in database\n    // For now, use a simple in-memory Set\n    return this.readNotifications.has(notificationId);\n  }\n\n  private setNotificationRead(notificationId: string, read: boolean): void {\n    if (read) {\n      this.readNotifications.add(notificationId);\n    } else {\n      this.readNotifications.delete(notificationId);\n    }\n  }\n\n  private readNotifications = new Set<string>();\n\n  private initializeDefaultTemplates(): void {\n    const templates: NotificationTemplate[] = [\n      {\n        id: 'milestone_deadline',\n        name: 'Milestone Deadline',\n        type: 'warning',\n        title: 'Milestone Deadline Approaching',\n        messageTemplate:\n          'The milestone \"{{milestoneName}}\" is due on {{dueDate}}. You have {{daysLeft}} days remaining.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['milestoneName', 'dueDate', 'daysLeft'],\n      },\n      {\n        id: 'activity_completed',\n        name: 'Activity Completed',\n        type: 'success',\n        title: 'Activity Completed',\n        messageTemplate: 'Great job! You have completed the activity \"{{activityName}}\".',\n        defaultChannels: ['in_app'],\n        variables: ['activityName'],\n      },\n      {\n        id: 'coverage_gap',\n        name: 'Coverage Gap Alert',\n        type: 'warning',\n        title: 'Curriculum Coverage Gap Detected',\n        messageTemplate:\n          'We detected a gap in your curriculum coverage for {{subject}}. Consider reviewing outcomes: {{outcomes}}.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['subject', 'outcomes'],\n      },\n      {\n        id: 'system_maintenance',\n        name: 'System Maintenance',\n        type: 'info',\n        title: 'Scheduled Maintenance',\n        messageTemplate:\n          'Teaching Engine will undergo maintenance on {{date}} from {{startTime}} to {{endTime}}. Please save your work.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['date', 'startTime', 'endTime'],\n      },\n    ];\n\n    for (const template of templates) {\n      this.templates.set(template.id, template);\n    }\n  }\n\n  private startCleanupTask(): void {\n    // Clean up expired notifications every hour\n    this.cleanupInterval = setInterval(\n      () => {\n        const now = new Date();\n        let cleanedCount = 0;\n\n        for (const [id, notification] of this.notifications.entries()) {\n          if (notification.expiresAt && notification.expiresAt < now) {\n            this.notifications.delete(id);\n            cleanedCount++;\n          }\n        }\n\n        if (cleanedCount > 0) {\n          this.logger.info({ cleanedCount }, 'Cleaned up expired notifications');\n        }\n      },\n      60 * 60 * 1000,\n    ); // 1 hour\n  }\n\n  /**\n   * Cleanup resources on service shutdown\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n  }\n}\n\n// Export singleton instance\nexport const notificationService = new NotificationService();\n"],"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","ignoreList":[]}