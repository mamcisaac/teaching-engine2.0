0ca80638cacc8fe49eae14a2c3b79040
/* istanbul ignore next */
function cov_2o8g8lmmwu() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts";
  var hash = "5c0ffdbac4139c206b830cd065ac1bc6a7580754";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 29
        }
      },
      "1": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 27
        }
      },
      "2": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 25
        }
      },
      "3": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 37
        }
      },
      "4": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 32
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "7": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "8": {
        start: {
          line: 24,
          column: 35
        },
        end: {
          line: 24,
          column: 99
        }
      },
      "9": {
        start: {
          line: 25,
          column: 37
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "10": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "11": {
        start: {
          line: 33,
          column: 38
        },
        end: {
          line: 33,
          column: 104
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 101
        }
      },
      "14": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 38
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "16": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 73
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "18": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 75
        }
      },
      "19": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "20": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 74
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "22": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 34
        }
      },
      "23": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 62
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "25": {
        start: {
          line: 67,
          column: 29
        },
        end: {
          line: 67,
          column: 59
        }
      },
      "26": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "27": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 68
        }
      },
      "28": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 50
        }
      },
      "29": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "30": {
        start: {
          line: 74,
          column: 30
        },
        end: {
          line: 74,
          column: 59
        }
      },
      "31": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 56
        }
      },
      "32": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 38
        }
      },
      "33": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "34": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 79,
          column: 59
        }
      },
      "35": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 52
        }
      },
      "36": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 71
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "39": {
        start: {
          line: 101,
          column: 67
        },
        end: {
          line: 101,
          column: 74
        }
      },
      "40": {
        start: {
          line: 102,
          column: 38
        },
        end: {
          line: 105,
          column: 78
        }
      },
      "41": {
        start: {
          line: 103,
          column: 31
        },
        end: {
          line: 103,
          column: 50
        }
      },
      "42": {
        start: {
          line: 104,
          column: 31
        },
        end: {
          line: 104,
          column: 76
        }
      },
      "43": {
        start: {
          line: 105,
          column: 32
        },
        end: {
          line: 105,
          column: 77
        }
      },
      "44": {
        start: {
          line: 106,
          column: 26
        },
        end: {
          line: 106,
          column: 50
        }
      },
      "45": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 107,
          column: 102
        }
      },
      "46": {
        start: {
          line: 107,
          column: 64
        },
        end: {
          line: 107,
          column: 94
        }
      },
      "47": {
        start: {
          line: 108,
          column: 34
        },
        end: {
          line: 108,
          column: 81
        }
      },
      "48": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 57
        }
      },
      "49": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 57
        }
      },
      "50": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "51": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 71
        }
      },
      "52": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "53": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 29
        }
      },
      "54": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 59
        }
      },
      "55": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 89
        }
      },
      "56": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "57": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 104
        }
      },
      "58": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 25
        }
      },
      "59": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "60": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 31
        }
      },
      "61": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "62": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "63": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 68
        }
      },
      "64": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 34
        }
      },
      "65": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 90
        }
      },
      "66": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 31
        }
      },
      "67": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 93
        }
      },
      "68": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 21
        }
      },
      "69": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "70": {
        start: {
          line: 160,
          column: 33
        },
        end: {
          line: 160,
          column: 71
        }
      },
      "71": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "72": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 29
        }
      },
      "73": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 54
        }
      },
      "74": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 82
        }
      },
      "75": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 24
        }
      },
      "76": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 98
        }
      },
      "77": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 25
        }
      },
      "78": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "79": {
        start: {
          line: 178,
          column: 28
        },
        end: {
          line: 178,
          column: 94
        }
      },
      "80": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 179,
          column: 66
        }
      },
      "81": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 50
        }
      },
      "82": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 82
        }
      },
      "83": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 61
        }
      },
      "84": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "85": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 193,
          column: 52
        }
      },
      "86": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "87": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 59
        }
      },
      "88": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 52
        }
      },
      "89": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 25
        }
      },
      "90": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 83
        }
      },
      "91": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 54
        }
      },
      "92": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 50
        }
      },
      "93": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 108
        }
      },
      "94": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 51
        }
      },
      "95": {
        start: {
          line: 223,
          column: 27
        },
        end: {
          line: 223,
          column: 101
        }
      },
      "96": {
        start: {
          line: 223,
          column: 51
        },
        end: {
          line: 223,
          column: 100
        }
      },
      "97": {
        start: {
          line: 223,
          column: 57
        },
        end: {
          line: 223,
          column: 100
        }
      },
      "98": {
        start: {
          line: 224,
          column: 36
        },
        end: {
          line: 227,
          column: 10
        }
      },
      "99": {
        start: {
          line: 228,
          column: 21
        },
        end: {
          line: 228,
          column: 23
        }
      },
      "100": {
        start: {
          line: 229,
          column: 23
        },
        end: {
          line: 229,
          column: 25
        }
      },
      "101": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "102": {
        start: {
          line: 230,
          column: 21
        },
        end: {
          line: 230,
          column: 22
        }
      },
      "103": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "104": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 38
        }
      },
      "105": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 238,
          column: 19
        }
      },
      "106": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 245,
          column: 42
        }
      },
      "107": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 32
        }
      },
      "108": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "109": {
        start: {
          line: 252,
          column: 25
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "110": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 258,
          column: 13
        }
      },
      "111": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "112": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 63
        }
      },
      "113": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "114": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 83
        }
      },
      "115": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 23
        }
      },
      "116": {
        start: {
          line: 265,
          column: 28
        },
        end: {
          line: 265,
          column: 69
        }
      },
      "117": {
        start: {
          line: 266,
          column: 25
        },
        end: {
          line: 266,
          column: 78
        }
      },
      "118": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 68
        }
      },
      "119": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 102
        }
      },
      "120": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 119
        }
      },
      "121": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 129
        }
      },
      "122": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 290,
          column: 11
        }
      },
      "123": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "124": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 52
        }
      },
      "125": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 284,
          column: 51
        }
      },
      "126": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 32
        }
      },
      "127": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 33
        }
      },
      "128": {
        start: {
          line: 293,
          column: 30
        },
        end: {
          line: 298,
          column: 32
        }
      },
      "129": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 316,
          column: 6
        }
      },
      "130": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 333,
          column: 10
        }
      },
      "131": {
        start: {
          line: 336,
          column: 20
        },
        end: {
          line: 336,
          column: 30
        }
      },
      "132": {
        start: {
          line: 337,
          column: 28
        },
        end: {
          line: 337,
          column: 123
        }
      },
      "133": {
        start: {
          line: 338,
          column: 31
        },
        end: {
          line: 338,
          column: 41
        }
      },
      "134": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "135": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 62
        }
      },
      "136": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 62
        }
      },
      "137": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 58
        }
      },
      "138": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "139": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 55
        }
      },
      "140": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 58
        }
      },
      "141": {
        start: {
          line: 361,
          column: 24
        },
        end: {
          line: 361,
          column: 33
        }
      },
      "142": {
        start: {
          line: 363,
          column: 26
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "143": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "144": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 54
        }
      },
      "145": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 419,
          column: 27
        }
      },
      "146": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 408,
          column: 34
        }
      },
      "147": {
        start: {
          line: 409,
          column: 31
        },
        end: {
          line: 409,
          column: 32
        }
      },
      "148": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 415,
          column: 13
        }
      },
      "149": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 414,
          column: 17
        }
      },
      "150": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 50
        }
      },
      "151": {
        start: {
          line: 413,
          column: 20
        },
        end: {
          line: 413,
          column: 35
        }
      },
      "152": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 418,
          column: 13
        }
      },
      "153": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 87
        }
      },
      "154": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "155": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 48
        }
      },
      "156": {
        start: {
          line: 431,
          column: 35
        },
        end: {
          line: 431,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 49
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 81
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 99
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 103,
            column: 24
          },
          end: {
            line: 103,
            column: 25
          }
        },
        loc: {
          start: {
            line: 103,
            column: 31
          },
          end: {
            line: 103,
            column: 50
          }
        },
        line: 103
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 24
          },
          end: {
            line: 104,
            column: 25
          }
        },
        loc: {
          start: {
            line: 104,
            column: 31
          },
          end: {
            line: 104,
            column: 76
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 105,
            column: 22
          },
          end: {
            line: 105,
            column: 23
          }
        },
        loc: {
          start: {
            line: 105,
            column: 32
          },
          end: {
            line: 105,
            column: 77
          }
        },
        line: 105
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 57
          },
          end: {
            line: 107,
            column: 58
          }
        },
        loc: {
          start: {
            line: 107,
            column: 64
          },
          end: {
            line: 107,
            column: 94
          }
        },
        line: 107
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 118
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 32
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 138
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 158
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 49
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 37
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 191
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 29
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 209
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 19
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 216
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 54
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 222
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 223,
            column: 39
          },
          end: {
            line: 223,
            column: 40
          }
        },
        loc: {
          start: {
            line: 223,
            column: 51
          },
          end: {
            line: 223,
            column: 100
          }
        },
        line: 223
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 223,
            column: 51
          },
          end: {
            line: 223,
            column: 52
          }
        },
        loc: {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 223,
            column: 100
          }
        },
        line: 223
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 54
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 249
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 53
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 274
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 64
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 278
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 279,
            column: 40
          },
          end: {
            line: 279,
            column: 41
          }
        },
        loc: {
          start: {
            line: 279,
            column: 53
          },
          end: {
            line: 290,
            column: 9
          }
        },
        line: 279
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 52
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 292
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 34
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 318
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 31
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 335
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 39
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 348
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 46
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 353
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 33
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 362
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 405,
            column: 4
          },
          end: {
            line: 405,
            column: 5
          }
        },
        loc: {
          start: {
            line: 405,
            column: 23
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 405
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 407,
            column: 43
          },
          end: {
            line: 407,
            column: 44
          }
        },
        loc: {
          start: {
            line: 407,
            column: 49
          },
          end: {
            line: 419,
            column: 9
          }
        },
        line: 407
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 14
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 424
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 51
          }
        }, {
          start: {
            line: 43,
            column: 55
          },
          end: {
            line: 43,
            column: 77
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 50
          }
        }, {
          start: {
            line: 47,
            column: 54
          },
          end: {
            line: 47,
            column: 75
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 67
          },
          end: {
            line: 65,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 65,
            column: 77
          },
          end: {
            line: 65,
            column: 79
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "8": {
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 42
          }
        }, {
          start: {
            line: 86,
            column: 46
          },
          end: {
            line: 86,
            column: 54
          }
        }],
        line: 86
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 26
          },
          end: {
            line: 87,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 26
          },
          end: {
            line: 87,
            column: 42
          }
        }, {
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 87,
            column: 70
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 99,
            column: 39
          },
          end: {
            line: 99,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 49
          },
          end: {
            line: 99,
            column: 51
          }
        }],
        line: 99
      },
      "11": {
        loc: {
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 101,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 101,
            column: 28
          },
          end: {
            line: 101,
            column: 30
          }
        }],
        line: 101
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 32
          },
          end: {
            line: 101,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 101,
            column: 41
          },
          end: {
            line: 101,
            column: 42
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 101,
            column: 44
          },
          end: {
            line: 101,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 101,
            column: 57
          },
          end: {
            line: 101,
            column: 62
          }
        }],
        line: 101
      },
      "14": {
        loc: {
          start: {
            line: 104,
            column: 31
          },
          end: {
            line: 104,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 31
          },
          end: {
            line: 104,
            column: 42
          }
        }, {
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 104,
            column: 76
          }
        }],
        line: 104
      },
      "15": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "16": {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 29
          }
        }, {
          start: {
            line: 121,
            column: 33
          },
          end: {
            line: 121,
            column: 63
          }
        }],
        line: 121
      },
      "17": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "18": {
        loc: {
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 142,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 142,
            column: 50
          }
        }, {
          start: {
            line: 142,
            column: 54
          },
          end: {
            line: 142,
            column: 95
          }
        }],
        line: 142
      },
      "19": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "20": {
        loc: {
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 161,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 161,
            column: 29
          }
        }, {
          start: {
            line: 161,
            column: 33
          },
          end: {
            line: 161,
            column: 63
          }
        }],
        line: 161
      },
      "21": {
        loc: {
          start: {
            line: 178,
            column: 28
          },
          end: {
            line: 178,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 28
          },
          end: {
            line: 178,
            column: 56
          }
        }, {
          start: {
            line: 178,
            column: 60
          },
          end: {
            line: 178,
            column: 94
          }
        }],
        line: 178
      },
      "22": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "23": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: 234,
            column: 17
          },
          end: {
            line: 239,
            column: 13
          }
        }],
        line: 231
      },
      "24": {
        loc: {
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 27
          },
          end: {
            line: 237,
            column: 45
          }
        }, {
          start: {
            line: 237,
            column: 49
          },
          end: {
            line: 237,
            column: 64
          }
        }],
        line: 237
      },
      "25": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "26": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "27": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 282,
            column: 52
          }
        }, {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 284,
            column: 51
          }
        }, {
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 286,
            column: 32
          }
        }, {
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 288,
            column: 33
          }
        }],
        line: 280
      },
      "28": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: 343,
            column: 13
          },
          end: {
            line: 346,
            column: 9
          }
        }],
        line: 339
      },
      "29": {
        loc: {
          start: {
            line: 341,
            column: 19
          },
          end: {
            line: 341,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 19
          },
          end: {
            line: 341,
            column: 39
          }
        }, {
          start: {
            line: 341,
            column: 43
          },
          end: {
            line: 341,
            column: 61
          }
        }],
        line: 341
      },
      "30": {
        loc: {
          start: {
            line: 345,
            column: 19
          },
          end: {
            line: 345,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 19
          },
          end: {
            line: 345,
            column: 39
          }
        }, {
          start: {
            line: 345,
            column: 43
          },
          end: {
            line: 345,
            column: 61
          }
        }],
        line: 345
      },
      "31": {
        loc: {
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: 357,
            column: 13
          },
          end: {
            line: 359,
            column: 9
          }
        }],
        line: 354
      },
      "32": {
        loc: {
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 414,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 414,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "33": {
        loc: {
          start: {
            line: 411,
            column: 20
          },
          end: {
            line: 411,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 411,
            column: 20
          },
          end: {
            line: 411,
            column: 42
          }
        }, {
          start: {
            line: 411,
            column: 46
          },
          end: {
            line: 411,
            column: 74
          }
        }],
        line: 411
      },
      "34": {
        loc: {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "35": {
        loc: {
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts"],
      sourcesContent: ["import BaseService from './base/BaseService';\nimport { emailService } from './emailService';\nimport { prisma } from '../prisma';\n\nexport interface Notification {\n  id: string;\n  userId: number;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  message: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  channels: ('in_app' | 'email' | 'push')[];\n  metadata?: Record<string, unknown>;\n  expiresAt?: Date;\n  createdAt: Date;\n}\n\nexport interface NotificationPreferences {\n  userId: number;\n  emailEnabled: boolean;\n  pushEnabled: boolean;\n  quietHours: {\n    start: string; // HH:MM format\n    end: string; // HH:MM format\n  };\n  categories: {\n    [category: string]: {\n      enabled: boolean;\n      channels: ('in_app' | 'email' | 'push')[];\n    };\n  };\n}\n\nexport interface NotificationTemplate {\n  id: string;\n  name: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  messageTemplate: string;\n  defaultChannels: ('in_app' | 'email' | 'push')[];\n  variables: string[];\n}\n\nexport class NotificationService extends BaseService {\n  private notifications: Map<string, Notification> = new Map();\n  private preferences: Map<number, NotificationPreferences> = new Map();\n  private templates: Map<string, NotificationTemplate> = new Map();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    super('NotificationService');\n    this.initializeDefaultTemplates();\n    this.startCleanupTask();\n  }\n\n  /**\n   * Send a notification to a user\n   */\n  async sendNotification(\n    userId: number,\n    notification: Omit<Notification, 'id' | 'userId' | 'createdAt'>,\n  ): Promise<string> {\n    try {\n      this.validateRequired({ userId, title: notification.title, message: notification.message }, [\n        'userId',\n        'title',\n        'message',\n      ]);\n\n      const notificationId = `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      const fullNotification: Notification = {\n        id: notificationId,\n        userId,\n        createdAt: new Date(),\n        ...notification,\n      };\n\n      // Check user preferences\n      const userPrefs = await this.getUserPreferences(userId);\n      const effectiveChannels = this.filterChannelsByPreferences(notification.channels, userPrefs);\n\n      if (effectiveChannels.length === 0) {\n        this.logger.info({ userId, notificationId }, 'No enabled channels for notification');\n        return notificationId;\n      }\n\n      // Store in-app notification\n      if (effectiveChannels.includes('in_app')) {\n        this.notifications.set(notificationId, fullNotification);\n      }\n\n      // Send email notification\n      if (effectiveChannels.includes('email') && userPrefs.emailEnabled) {\n        await this.sendEmailNotification(userId, fullNotification);\n      }\n\n      // Send push notification (placeholder for future implementation)\n      if (effectiveChannels.includes('push') && userPrefs.pushEnabled) {\n        await this.sendPushNotification(userId, fullNotification);\n      }\n\n      this.logger.info(\n        {\n          userId,\n          notificationId,\n          type: notification.type,\n          channels: effectiveChannels,\n        },\n        'Notification sent successfully',\n      );\n\n      return notificationId;\n    } catch (error) {\n      this.handleError(error, { userId, notification });\n    }\n  }\n\n  /**\n   * Send notification using a template\n   */\n  async sendTemplatedNotification(\n    userId: number,\n    templateId: string,\n    variables: Record<string, string>,\n    options: {\n      priority?: 'low' | 'medium' | 'high' | 'urgent';\n      channels?: ('in_app' | 'email' | 'push')[];\n      expiresAt?: Date;\n      metadata?: Record<string, unknown>;\n    } = {},\n  ): Promise<string> {\n    try {\n      const template = this.templates.get(templateId);\n      if (!template) {\n        throw new Error(`Template ${templateId} not found`);\n      }\n\n      // Replace template variables\n      let message = template.messageTemplate;\n      for (const [key, value] of Object.entries(variables)) {\n        const regex = new RegExp(`{{${key}}}`, 'g');\n        message = message.replace(regex, value);\n      }\n\n      let title = template.title;\n      for (const [key, value] of Object.entries(variables)) {\n        const regex = new RegExp(`{{${key}}}`, 'g');\n        title = title.replace(regex, value);\n      }\n\n      return await this.sendNotification(userId, {\n        type: template.type,\n        title,\n        message,\n        priority: options.priority || 'medium',\n        channels: options.channels || template.defaultChannels,\n        metadata: options.metadata,\n        expiresAt: options.expiresAt,\n      });\n    } catch (error) {\n      this.handleError(error, { userId, templateId, variables });\n    }\n  }\n\n  /**\n   * Get in-app notifications for a user\n   */\n  async getUserNotifications(\n    userId: number,\n    options: {\n      limit?: number;\n      offset?: number;\n      unreadOnly?: boolean;\n    } = {},\n  ): Promise<{\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n  }> {\n    try {\n      const { limit = 50, offset = 0, unreadOnly = false } = options;\n\n      const userNotifications = Array.from(this.notifications.values())\n        .filter((n) => n.userId === userId)\n        .filter((n) => !unreadOnly || !this.isNotificationRead(n.id))\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n      const total = userNotifications.length;\n      const unreadCount = userNotifications.filter((n) => !this.isNotificationRead(n.id)).length;\n      const notifications = userNotifications.slice(offset, offset + limit);\n\n      return { notifications, total, unreadCount };\n    } catch (error) {\n      this.handleError(error, { userId, options });\n    }\n  }\n\n  /**\n   * Mark notification as read\n   */\n  async markAsRead(notificationId: string, userId: number): Promise<boolean> {\n    try {\n      const notification = this.notifications.get(notificationId);\n      if (!notification || notification.userId !== userId) {\n        return false;\n      }\n\n      // In a real implementation, you'd store read status in database\n      // For now, we'll use a simple in-memory approach\n      this.setNotificationRead(notificationId, true);\n\n      this.logger.debug({ notificationId, userId }, 'Notification marked as read');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, notificationId, userId }, 'Failed to mark notification as read');\n      return false;\n    }\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   */\n  async markAllAsRead(userId: number): Promise<number> {\n    try {\n      let markedCount = 0;\n\n      for (const notification of this.notifications.values()) {\n        if (notification.userId === userId && !this.isNotificationRead(notification.id)) {\n          this.setNotificationRead(notification.id, true);\n          markedCount++;\n        }\n      }\n\n      this.logger.info({ userId, markedCount }, 'Marked all notifications as read');\n      return markedCount;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to mark all notifications as read');\n      return 0;\n    }\n  }\n\n  /**\n   * Delete a notification\n   */\n  async deleteNotification(notificationId: string, userId: number): Promise<boolean> {\n    try {\n      const notification = this.notifications.get(notificationId);\n      if (!notification || notification.userId !== userId) {\n        return false;\n      }\n\n      this.notifications.delete(notificationId);\n      this.logger.debug({ notificationId, userId }, 'Notification deleted');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, notificationId, userId }, 'Failed to delete notification');\n      return false;\n    }\n  }\n\n  /**\n   * Update user notification preferences\n   */\n  async updatePreferences(\n    userId: number,\n    preferences: Partial<NotificationPreferences>,\n  ): Promise<void> {\n    try {\n      const current = this.preferences.get(userId) || this.getDefaultPreferences(userId);\n      const updated = { ...current, ...preferences, userId };\n\n      this.preferences.set(userId, updated);\n\n      // Currently stored in memory for this session\n      this.logger.info({ userId }, 'User notification preferences updated');\n    } catch (error) {\n      this.handleError(error, { userId, preferences });\n    }\n  }\n\n  /**\n   * Get user notification preferences\n   */\n  async getUserPreferences(userId: number): Promise<NotificationPreferences> {\n    try {\n      let prefs = this.preferences.get(userId);\n\n      if (!prefs) {\n        // Use default preferences for this session\n        prefs = this.getDefaultPreferences(userId);\n        this.preferences.set(userId, prefs);\n      }\n\n      return prefs;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user preferences');\n      return this.getDefaultPreferences(userId);\n    }\n  }\n\n  /**\n   * Create a custom notification template\n   */\n  createTemplate(template: NotificationTemplate): void {\n    this.templates.set(template.id, template);\n    this.logger.info(\n      { templateId: template.id, name: template.name },\n      'Notification template created',\n    );\n  }\n\n  /**\n   * Get available notification templates\n   */\n  getTemplates(): NotificationTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  /**\n   * Send bulk notifications to multiple users\n   */\n  async sendBulkNotification(\n    userIds: number[],\n    notification: Omit<Notification, 'id' | 'userId' | 'createdAt'>,\n  ): Promise<{\n    sent: string[];\n    failed: { userId: number; error: string }[];\n  }> {\n    const operations = userIds.map((userId) => () => this.sendNotification(userId, notification));\n\n    const { results, errors } = await this.withParallel(operations, {\n      failFast: false,\n      maxConcurrency: 10,\n    });\n\n    const sent: string[] = [];\n    const failed: { userId: number; error: string }[] = [];\n\n    for (let i = 0; i < userIds.length; i++) {\n      if (results[i] !== null) {\n        sent.push(results[i] as string);\n      } else {\n        failed.push({\n          userId: userIds[i],\n          error: errors[i]?.message || 'Unknown error',\n        });\n      }\n    }\n\n    this.logger.info(\n      {\n        totalUsers: userIds.length,\n        sent: sent.length,\n        failed: failed.length,\n      },\n      'Bulk notification completed',\n    );\n\n    return { sent, failed };\n  }\n\n  // Private methods\n\n  private async sendEmailNotification(userId: number, notification: Notification): Promise<void> {\n    try {\n      // Get user email\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { email: true, name: true },\n      });\n\n      if (!user?.email) {\n        throw new Error('User email not found');\n      }\n\n      // Check quiet hours\n      const prefs = await this.getUserPreferences(userId);\n      if (this.isInQuietHours(prefs.quietHours)) {\n        this.logger.debug({ userId }, 'Skipping email due to quiet hours');\n        return;\n      }\n\n      const subject = `[Teaching Engine] ${notification.title}`;\n      const html = this.formatEmailNotification(notification, user.name);\n\n      await emailService.sendEmail(user.email, subject, html);\n\n      this.logger.debug({ userId, notificationId: notification.id }, 'Email notification sent');\n    } catch (error) {\n      this.logger.error(\n        { error, userId, notificationId: notification.id },\n        'Failed to send email notification',\n      );\n    }\n  }\n\n  private async sendPushNotification(userId: number, notification: Notification): Promise<void> {\n    // Push notifications not implemented - using in-app notifications only\n    this.logger.debug(\n      { userId, notificationId: notification.id },\n      'Push notification skipped - using in-app notifications',\n    );\n  }\n\n  private filterChannelsByPreferences(\n    requestedChannels: ('in_app' | 'email' | 'push')[],\n    preferences: NotificationPreferences,\n  ): ('in_app' | 'email' | 'push')[] {\n    return requestedChannels.filter((channel) => {\n      switch (channel) {\n        case 'email':\n          return preferences.emailEnabled;\n        case 'push':\n          return preferences.pushEnabled;\n        case 'in_app':\n          return true; // Always allow in-app notifications\n        default:\n          return false;\n      }\n    });\n  }\n\n  private formatEmailNotification(notification: Notification, userName: string): string {\n    const priorityColor = {\n      low: '#28a745',\n      medium: '#ffc107',\n      high: '#fd7e14',\n      urgent: '#dc3545',\n    }[notification.priority];\n\n    return `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background-color: ${priorityColor}; color: white; padding: 20px; text-align: center;\">\n          <h1 style=\"margin: 0;\">${notification.title}</h1>\n        </div>\n        <div style=\"padding: 20px; background-color: #f8f9fa;\">\n          <p>Hello ${userName},</p>\n          <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            ${notification.message.replace(/\\n/g, '<br>')}\n          </div>\n          <p style=\"color: #6c757d; font-size: 12px;\">\n            This is an automated notification from Teaching Engine 2.0.<br>\n            Priority: ${notification.priority.toUpperCase()}<br>\n            Sent: ${notification.createdAt.toLocaleString()}\n          </p>\n        </div>\n      </div>\n    `;\n  }\n\n  private getDefaultPreferences(userId: number): NotificationPreferences {\n    return {\n      userId,\n      emailEnabled: true,\n      pushEnabled: false,\n      quietHours: {\n        start: '22:00',\n        end: '07:00',\n      },\n      categories: {\n        milestone: { enabled: true, channels: ['in_app', 'email'] },\n        activity: { enabled: true, channels: ['in_app'] },\n        system: { enabled: true, channels: ['in_app', 'email'] },\n        reminder: { enabled: true, channels: ['in_app'] },\n      },\n    };\n  }\n\n  private isInQuietHours(quietHours: { start: string; end: string }): boolean {\n    const now = new Date();\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n    const { start, end } = quietHours;\n\n    if (start <= end) {\n      // Same day quiet hours (e.g., 22:00 to 23:59)\n      return currentTime >= start && currentTime <= end;\n    } else {\n      // Cross-midnight quiet hours (e.g., 22:00 to 07:00)\n      return currentTime >= start || currentTime <= end;\n    }\n  }\n\n  private isNotificationRead(notificationId: string): boolean {\n    // In a real implementation, store read status in database\n    // For now, use a simple in-memory Set\n    return this.readNotifications.has(notificationId);\n  }\n\n  private setNotificationRead(notificationId: string, read: boolean): void {\n    if (read) {\n      this.readNotifications.add(notificationId);\n    } else {\n      this.readNotifications.delete(notificationId);\n    }\n  }\n\n  private readNotifications = new Set<string>();\n\n  private initializeDefaultTemplates(): void {\n    const templates: NotificationTemplate[] = [\n      {\n        id: 'milestone_deadline',\n        name: 'Milestone Deadline',\n        type: 'warning',\n        title: 'Milestone Deadline Approaching',\n        messageTemplate:\n          'The milestone \"{{milestoneName}}\" is due on {{dueDate}}. You have {{daysLeft}} days remaining.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['milestoneName', 'dueDate', 'daysLeft'],\n      },\n      {\n        id: 'activity_completed',\n        name: 'Activity Completed',\n        type: 'success',\n        title: 'Activity Completed',\n        messageTemplate: 'Great job! You have completed the activity \"{{activityName}}\".',\n        defaultChannels: ['in_app'],\n        variables: ['activityName'],\n      },\n      {\n        id: 'coverage_gap',\n        name: 'Coverage Gap Alert',\n        type: 'warning',\n        title: 'Curriculum Coverage Gap Detected',\n        messageTemplate:\n          'We detected a gap in your curriculum coverage for {{subject}}. Consider reviewing outcomes: {{outcomes}}.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['subject', 'outcomes'],\n      },\n      {\n        id: 'system_maintenance',\n        name: 'System Maintenance',\n        type: 'info',\n        title: 'Scheduled Maintenance',\n        messageTemplate:\n          'Teaching Engine will undergo maintenance on {{date}} from {{startTime}} to {{endTime}}. Please save your work.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['date', 'startTime', 'endTime'],\n      },\n    ];\n\n    for (const template of templates) {\n      this.templates.set(template.id, template);\n    }\n  }\n\n  private startCleanupTask(): void {\n    // Clean up expired notifications every hour\n    this.cleanupInterval = setInterval(\n      () => {\n        const now = new Date();\n        let cleanedCount = 0;\n\n        for (const [id, notification] of this.notifications.entries()) {\n          if (notification.expiresAt && notification.expiresAt < now) {\n            this.notifications.delete(id);\n            cleanedCount++;\n          }\n        }\n\n        if (cleanedCount > 0) {\n          this.logger.info({ cleanedCount }, 'Cleaned up expired notifications');\n        }\n      },\n      60 * 60 * 1000,\n    ); // 1 hour\n  }\n\n  /**\n   * Cleanup resources on service shutdown\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n  }\n}\n\n// Export singleton instance\nexport const notificationService = new NotificationService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5c0ffdbac4139c206b830cd065ac1bc6a7580754"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2o8g8lmmwu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2o8g8lmmwu();
import BaseService from './base/BaseService';
import { emailService } from './emailService';
import { prisma } from '../prisma';
export class NotificationService extends BaseService {
  notifications =
  /* istanbul ignore next */
  (cov_2o8g8lmmwu().s[0]++, new Map());
  preferences =
  /* istanbul ignore next */
  (cov_2o8g8lmmwu().s[1]++, new Map());
  templates =
  /* istanbul ignore next */
  (cov_2o8g8lmmwu().s[2]++, new Map());
  cleanupInterval;
  constructor() {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[0]++;
    cov_2o8g8lmmwu().s[3]++;
    super('NotificationService');
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[4]++;
    this.initializeDefaultTemplates();
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[5]++;
    this.startCleanupTask();
  }
  /**
   * Send a notification to a user
   */
  async sendNotification(userId, notification) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[1]++;
    cov_2o8g8lmmwu().s[6]++;
    try {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[7]++;
      this.validateRequired({
        userId,
        title: notification.title,
        message: notification.message
      }, ['userId', 'title', 'message']);
      const notificationId =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[8]++, `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
      const fullNotification =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[9]++, {
        id: notificationId,
        userId,
        createdAt: new Date(),
        ...notification
      });
      // Check user preferences
      const userPrefs =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[10]++, await this.getUserPreferences(userId));
      const effectiveChannels =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[11]++, this.filterChannelsByPreferences(notification.channels, userPrefs));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[12]++;
      if (effectiveChannels.length === 0) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[0][0]++;
        cov_2o8g8lmmwu().s[13]++;
        this.logger.info({
          userId,
          notificationId
        }, 'No enabled channels for notification');
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[14]++;
        return notificationId;
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[0][1]++;
      }
      // Store in-app notification
      cov_2o8g8lmmwu().s[15]++;
      if (effectiveChannels.includes('in_app')) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[1][0]++;
        cov_2o8g8lmmwu().s[16]++;
        this.notifications.set(notificationId, fullNotification);
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[1][1]++;
      }
      // Send email notification
      cov_2o8g8lmmwu().s[17]++;
      if (
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[3][0]++, effectiveChannels.includes('email')) &&
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[3][1]++, userPrefs.emailEnabled)) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[2][0]++;
        cov_2o8g8lmmwu().s[18]++;
        await this.sendEmailNotification(userId, fullNotification);
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[2][1]++;
      }
      // Send push notification (placeholder for future implementation)
      cov_2o8g8lmmwu().s[19]++;
      if (
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[5][0]++, effectiveChannels.includes('push')) &&
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[5][1]++, userPrefs.pushEnabled)) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[4][0]++;
        cov_2o8g8lmmwu().s[20]++;
        await this.sendPushNotification(userId, fullNotification);
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[4][1]++;
      }
      cov_2o8g8lmmwu().s[21]++;
      this.logger.info({
        userId,
        notificationId,
        type: notification.type,
        channels: effectiveChannels
      }, 'Notification sent successfully');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[22]++;
      return notificationId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[23]++;
      this.handleError(error, {
        userId,
        notification
      });
    }
  }
  /**
   * Send notification using a template
   */
  async sendTemplatedNotification(userId, templateId, variables, options =
  /* istanbul ignore next */
  (cov_2o8g8lmmwu().b[6][0]++, {})) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[2]++;
    cov_2o8g8lmmwu().s[24]++;
    try {
      const template =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[25]++, this.templates.get(templateId));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[26]++;
      if (!template) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[7][0]++;
        cov_2o8g8lmmwu().s[27]++;
        throw new Error(`Template ${templateId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[7][1]++;
      }
      // Replace template variables
      let message =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[28]++, template.messageTemplate);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[29]++;
      for (const [key, value] of Object.entries(variables)) {
        const regex =
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().s[30]++, new RegExp(`{{${key}}}`, 'g'));
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[31]++;
        message = message.replace(regex, value);
      }
      let title =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[32]++, template.title);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[33]++;
      for (const [key, value] of Object.entries(variables)) {
        const regex =
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().s[34]++, new RegExp(`{{${key}}}`, 'g'));
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[35]++;
        title = title.replace(regex, value);
      }
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[36]++;
      return await this.sendNotification(userId, {
        type: template.type,
        title,
        message,
        priority:
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[8][0]++, options.priority) ||
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[8][1]++, 'medium'),
        channels:
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[9][0]++, options.channels) ||
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[9][1]++, template.defaultChannels),
        metadata: options.metadata,
        expiresAt: options.expiresAt
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[37]++;
      this.handleError(error, {
        userId,
        templateId,
        variables
      });
    }
  }
  /**
   * Get in-app notifications for a user
   */
  async getUserNotifications(userId, options =
  /* istanbul ignore next */
  (cov_2o8g8lmmwu().b[10][0]++, {})) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[3]++;
    cov_2o8g8lmmwu().s[38]++;
    try {
      const {
        limit =
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[11][0]++, 50),
        offset =
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[12][0]++, 0),
        unreadOnly =
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[13][0]++, false)
      } =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[39]++, options);
      const userNotifications =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[40]++, Array.from(this.notifications.values()).filter(n => {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().f[4]++;
        cov_2o8g8lmmwu().s[41]++;
        return n.userId === userId;
      }).filter(n => {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().f[5]++;
        cov_2o8g8lmmwu().s[42]++;
        return /* istanbul ignore next */(cov_2o8g8lmmwu().b[14][0]++, !unreadOnly) ||
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[14][1]++, !this.isNotificationRead(n.id));
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().f[6]++;
        cov_2o8g8lmmwu().s[43]++;
        return b.createdAt.getTime() - a.createdAt.getTime();
      }));
      const total =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[44]++, userNotifications.length);
      const unreadCount =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[45]++, userNotifications.filter(n => {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().f[7]++;
        cov_2o8g8lmmwu().s[46]++;
        return !this.isNotificationRead(n.id);
      }).length);
      const notifications =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[47]++, userNotifications.slice(offset, offset + limit));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[48]++;
      return {
        notifications,
        total,
        unreadCount
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[49]++;
      this.handleError(error, {
        userId,
        options
      });
    }
  }
  /**
   * Mark notification as read
   */
  async markAsRead(notificationId, userId) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[8]++;
    cov_2o8g8lmmwu().s[50]++;
    try {
      const notification =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[51]++, this.notifications.get(notificationId));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[52]++;
      if (
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[16][0]++, !notification) ||
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[16][1]++, notification.userId !== userId)) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[15][0]++;
        cov_2o8g8lmmwu().s[53]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[15][1]++;
      }
      // In a real implementation, you'd store read status in database
      // For now, we'll use a simple in-memory approach
      cov_2o8g8lmmwu().s[54]++;
      this.setNotificationRead(notificationId, true);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[55]++;
      this.logger.debug({
        notificationId,
        userId
      }, 'Notification marked as read');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[56]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[57]++;
      this.logger.error({
        error,
        notificationId,
        userId
      }, 'Failed to mark notification as read');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[58]++;
      return false;
    }
  }
  /**
   * Mark all notifications as read for a user
   */
  async markAllAsRead(userId) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[9]++;
    cov_2o8g8lmmwu().s[59]++;
    try {
      let markedCount =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[60]++, 0);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[61]++;
      for (const notification of this.notifications.values()) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[62]++;
        if (
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[18][0]++, notification.userId === userId) &&
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[18][1]++, !this.isNotificationRead(notification.id))) {
          /* istanbul ignore next */
          cov_2o8g8lmmwu().b[17][0]++;
          cov_2o8g8lmmwu().s[63]++;
          this.setNotificationRead(notification.id, true);
          /* istanbul ignore next */
          cov_2o8g8lmmwu().s[64]++;
          markedCount++;
        } else
        /* istanbul ignore next */
        {
          cov_2o8g8lmmwu().b[17][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[65]++;
      this.logger.info({
        userId,
        markedCount
      }, 'Marked all notifications as read');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[66]++;
      return markedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[67]++;
      this.logger.error({
        error,
        userId
      }, 'Failed to mark all notifications as read');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[68]++;
      return 0;
    }
  }
  /**
   * Delete a notification
   */
  async deleteNotification(notificationId, userId) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[10]++;
    cov_2o8g8lmmwu().s[69]++;
    try {
      const notification =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[70]++, this.notifications.get(notificationId));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[71]++;
      if (
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[20][0]++, !notification) ||
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[20][1]++, notification.userId !== userId)) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[19][0]++;
        cov_2o8g8lmmwu().s[72]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[19][1]++;
      }
      cov_2o8g8lmmwu().s[73]++;
      this.notifications.delete(notificationId);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[74]++;
      this.logger.debug({
        notificationId,
        userId
      }, 'Notification deleted');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[75]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[76]++;
      this.logger.error({
        error,
        notificationId,
        userId
      }, 'Failed to delete notification');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[77]++;
      return false;
    }
  }
  /**
   * Update user notification preferences
   */
  async updatePreferences(userId, preferences) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[11]++;
    cov_2o8g8lmmwu().s[78]++;
    try {
      const current =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[79]++,
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[21][0]++, this.preferences.get(userId)) ||
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[21][1]++, this.getDefaultPreferences(userId)));
      const updated =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[80]++, {
        ...current,
        ...preferences,
        userId
      });
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[81]++;
      this.preferences.set(userId, updated);
      // Currently stored in memory for this session
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[82]++;
      this.logger.info({
        userId
      }, 'User notification preferences updated');
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[83]++;
      this.handleError(error, {
        userId,
        preferences
      });
    }
  }
  /**
   * Get user notification preferences
   */
  async getUserPreferences(userId) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[12]++;
    cov_2o8g8lmmwu().s[84]++;
    try {
      let prefs =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[85]++, this.preferences.get(userId));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[86]++;
      if (!prefs) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[22][0]++;
        cov_2o8g8lmmwu().s[87]++;
        // Use default preferences for this session
        prefs = this.getDefaultPreferences(userId);
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[88]++;
        this.preferences.set(userId, prefs);
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[22][1]++;
      }
      cov_2o8g8lmmwu().s[89]++;
      return prefs;
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[90]++;
      this.logger.error({
        error,
        userId
      }, 'Failed to get user preferences');
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[91]++;
      return this.getDefaultPreferences(userId);
    }
  }
  /**
   * Create a custom notification template
   */
  createTemplate(template) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[13]++;
    cov_2o8g8lmmwu().s[92]++;
    this.templates.set(template.id, template);
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[93]++;
    this.logger.info({
      templateId: template.id,
      name: template.name
    }, 'Notification template created');
  }
  /**
   * Get available notification templates
   */
  getTemplates() {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[14]++;
    cov_2o8g8lmmwu().s[94]++;
    return Array.from(this.templates.values());
  }
  /**
   * Send bulk notifications to multiple users
   */
  async sendBulkNotification(userIds, notification) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[15]++;
    const operations =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[95]++, userIds.map(userId => {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().f[16]++;
      cov_2o8g8lmmwu().s[96]++;
      return () => {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().f[17]++;
        cov_2o8g8lmmwu().s[97]++;
        return this.sendNotification(userId, notification);
      };
    }));
    const {
      results,
      errors
    } =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[98]++, await this.withParallel(operations, {
      failFast: false,
      maxConcurrency: 10
    }));
    const sent =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[99]++, []);
    const failed =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[100]++, []);
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[101]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[102]++, 0); i < userIds.length; i++) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[103]++;
      if (results[i] !== null) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[23][0]++;
        cov_2o8g8lmmwu().s[104]++;
        sent.push(results[i]);
      } else {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[23][1]++;
        cov_2o8g8lmmwu().s[105]++;
        failed.push({
          userId: userIds[i],
          error:
          /* istanbul ignore next */
          (cov_2o8g8lmmwu().b[24][0]++, errors[i]?.message) ||
          /* istanbul ignore next */
          (cov_2o8g8lmmwu().b[24][1]++, 'Unknown error')
        });
      }
    }
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[106]++;
    this.logger.info({
      totalUsers: userIds.length,
      sent: sent.length,
      failed: failed.length
    }, 'Bulk notification completed');
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[107]++;
    return {
      sent,
      failed
    };
  }
  // Private methods
  async sendEmailNotification(userId, notification) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[18]++;
    cov_2o8g8lmmwu().s[108]++;
    try {
      // Get user email
      const user =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[109]++, await prisma.user.findUnique({
        where: {
          id: userId
        },
        select: {
          email: true,
          name: true
        }
      }));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[110]++;
      if (!user?.email) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[25][0]++;
        cov_2o8g8lmmwu().s[111]++;
        throw new Error('User email not found');
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[25][1]++;
      }
      // Check quiet hours
      const prefs =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[112]++, await this.getUserPreferences(userId));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[113]++;
      if (this.isInQuietHours(prefs.quietHours)) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[26][0]++;
        cov_2o8g8lmmwu().s[114]++;
        this.logger.debug({
          userId
        }, 'Skipping email due to quiet hours');
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[115]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[26][1]++;
      }
      const subject =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[116]++, `[Teaching Engine] ${notification.title}`);
      const html =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[117]++, this.formatEmailNotification(notification, user.name));
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[118]++;
      await emailService.sendEmail(user.email, subject, html);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[119]++;
      this.logger.debug({
        userId,
        notificationId: notification.id
      }, 'Email notification sent');
    } catch (error) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[120]++;
      this.logger.error({
        error,
        userId,
        notificationId: notification.id
      }, 'Failed to send email notification');
    }
  }
  async sendPushNotification(userId, notification) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[19]++;
    cov_2o8g8lmmwu().s[121]++;
    // Push notifications not implemented - using in-app notifications only
    this.logger.debug({
      userId,
      notificationId: notification.id
    }, 'Push notification skipped - using in-app notifications');
  }
  filterChannelsByPreferences(requestedChannels, preferences) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[20]++;
    cov_2o8g8lmmwu().s[122]++;
    return requestedChannels.filter(channel => {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().f[21]++;
      cov_2o8g8lmmwu().s[123]++;
      switch (channel) {
        case 'email':
          /* istanbul ignore next */
          cov_2o8g8lmmwu().b[27][0]++;
          cov_2o8g8lmmwu().s[124]++;
          return preferences.emailEnabled;
        case 'push':
          /* istanbul ignore next */
          cov_2o8g8lmmwu().b[27][1]++;
          cov_2o8g8lmmwu().s[125]++;
          return preferences.pushEnabled;
        case 'in_app':
          /* istanbul ignore next */
          cov_2o8g8lmmwu().b[27][2]++;
          cov_2o8g8lmmwu().s[126]++;
          return true;
        // Always allow in-app notifications
        default:
          /* istanbul ignore next */
          cov_2o8g8lmmwu().b[27][3]++;
          cov_2o8g8lmmwu().s[127]++;
          return false;
      }
    });
  }
  formatEmailNotification(notification, userName) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[22]++;
    const priorityColor =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[128]++, {
      low: '#28a745',
      medium: '#ffc107',
      high: '#fd7e14',
      urgent: '#dc3545'
    }[notification.priority]);
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[129]++;
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background-color: ${priorityColor}; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0;">${notification.title}</h1>
        </div>
        <div style="padding: 20px; background-color: #f8f9fa;">
          <p>Hello ${userName},</p>
          <div style="background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;">
            ${notification.message.replace(/\n/g, '<br>')}
          </div>
          <p style="color: #6c757d; font-size: 12px;">
            This is an automated notification from Teaching Engine 2.0.<br>
            Priority: ${notification.priority.toUpperCase()}<br>
            Sent: ${notification.createdAt.toLocaleString()}
          </p>
        </div>
      </div>
    `;
  }
  getDefaultPreferences(userId) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[23]++;
    cov_2o8g8lmmwu().s[130]++;
    return {
      userId,
      emailEnabled: true,
      pushEnabled: false,
      quietHours: {
        start: '22:00',
        end: '07:00'
      },
      categories: {
        milestone: {
          enabled: true,
          channels: ['in_app', 'email']
        },
        activity: {
          enabled: true,
          channels: ['in_app']
        },
        system: {
          enabled: true,
          channels: ['in_app', 'email']
        },
        reminder: {
          enabled: true,
          channels: ['in_app']
        }
      }
    };
  }
  isInQuietHours(quietHours) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[24]++;
    const now =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[131]++, new Date());
    const currentTime =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[132]++, `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`);
    const {
      start,
      end
    } =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[133]++, quietHours);
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[134]++;
    if (start <= end) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().b[28][0]++;
      cov_2o8g8lmmwu().s[135]++;
      // Same day quiet hours (e.g., 22:00 to 23:59)
      return /* istanbul ignore next */(cov_2o8g8lmmwu().b[29][0]++, currentTime >= start) &&
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[29][1]++, currentTime <= end);
    } else {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().b[28][1]++;
      cov_2o8g8lmmwu().s[136]++;
      // Cross-midnight quiet hours (e.g., 22:00 to 07:00)
      return /* istanbul ignore next */(cov_2o8g8lmmwu().b[30][0]++, currentTime >= start) ||
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().b[30][1]++, currentTime <= end);
    }
  }
  isNotificationRead(notificationId) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[25]++;
    cov_2o8g8lmmwu().s[137]++;
    // In a real implementation, store read status in database
    // For now, use a simple in-memory Set
    return this.readNotifications.has(notificationId);
  }
  setNotificationRead(notificationId, read) {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[26]++;
    cov_2o8g8lmmwu().s[138]++;
    if (read) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().b[31][0]++;
      cov_2o8g8lmmwu().s[139]++;
      this.readNotifications.add(notificationId);
    } else {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().b[31][1]++;
      cov_2o8g8lmmwu().s[140]++;
      this.readNotifications.delete(notificationId);
    }
  }
  readNotifications =
  /* istanbul ignore next */
  (cov_2o8g8lmmwu().s[141]++, new Set());
  initializeDefaultTemplates() {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[27]++;
    const templates =
    /* istanbul ignore next */
    (cov_2o8g8lmmwu().s[142]++, [{
      id: 'milestone_deadline',
      name: 'Milestone Deadline',
      type: 'warning',
      title: 'Milestone Deadline Approaching',
      messageTemplate: 'The milestone "{{milestoneName}}" is due on {{dueDate}}. You have {{daysLeft}} days remaining.',
      defaultChannels: ['in_app', 'email'],
      variables: ['milestoneName', 'dueDate', 'daysLeft']
    }, {
      id: 'activity_completed',
      name: 'Activity Completed',
      type: 'success',
      title: 'Activity Completed',
      messageTemplate: 'Great job! You have completed the activity "{{activityName}}".',
      defaultChannels: ['in_app'],
      variables: ['activityName']
    }, {
      id: 'coverage_gap',
      name: 'Coverage Gap Alert',
      type: 'warning',
      title: 'Curriculum Coverage Gap Detected',
      messageTemplate: 'We detected a gap in your curriculum coverage for {{subject}}. Consider reviewing outcomes: {{outcomes}}.',
      defaultChannels: ['in_app', 'email'],
      variables: ['subject', 'outcomes']
    }, {
      id: 'system_maintenance',
      name: 'System Maintenance',
      type: 'info',
      title: 'Scheduled Maintenance',
      messageTemplate: 'Teaching Engine will undergo maintenance on {{date}} from {{startTime}} to {{endTime}}. Please save your work.',
      defaultChannels: ['in_app', 'email'],
      variables: ['date', 'startTime', 'endTime']
    }]);
    /* istanbul ignore next */
    cov_2o8g8lmmwu().s[143]++;
    for (const template of templates) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[144]++;
      this.templates.set(template.id, template);
    }
  }
  startCleanupTask() {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[28]++;
    cov_2o8g8lmmwu().s[145]++;
    // Clean up expired notifications every hour
    this.cleanupInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().f[29]++;
      const now =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[146]++, new Date());
      let cleanedCount =
      /* istanbul ignore next */
      (cov_2o8g8lmmwu().s[147]++, 0);
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[148]++;
      for (const [id, notification] of this.notifications.entries()) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().s[149]++;
        if (
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[33][0]++, notification.expiresAt) &&
        /* istanbul ignore next */
        (cov_2o8g8lmmwu().b[33][1]++, notification.expiresAt < now)) {
          /* istanbul ignore next */
          cov_2o8g8lmmwu().b[32][0]++;
          cov_2o8g8lmmwu().s[150]++;
          this.notifications.delete(id);
          /* istanbul ignore next */
          cov_2o8g8lmmwu().s[151]++;
          cleanedCount++;
        } else
        /* istanbul ignore next */
        {
          cov_2o8g8lmmwu().b[32][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2o8g8lmmwu().s[152]++;
      if (cleanedCount > 0) {
        /* istanbul ignore next */
        cov_2o8g8lmmwu().b[34][0]++;
        cov_2o8g8lmmwu().s[153]++;
        this.logger.info({
          cleanedCount
        }, 'Cleaned up expired notifications');
      } else
      /* istanbul ignore next */
      {
        cov_2o8g8lmmwu().b[34][1]++;
      }
    }, 60 * 60 * 1000); // 1 hour
  }
  /**
   * Cleanup resources on service shutdown
   */
  destroy() {
    /* istanbul ignore next */
    cov_2o8g8lmmwu().f[30]++;
    cov_2o8g8lmmwu().s[154]++;
    if (this.cleanupInterval) {
      /* istanbul ignore next */
      cov_2o8g8lmmwu().b[35][0]++;
      cov_2o8g8lmmwu().s[155]++;
      clearInterval(this.cleanupInterval);
    } else
    /* istanbul ignore next */
    {
      cov_2o8g8lmmwu().b[35][1]++;
    }
  }
}
// Export singleton instance
export const notificationService =
/* istanbul ignore next */
(cov_2o8g8lmmwu().s[156]++, new NotificationService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,