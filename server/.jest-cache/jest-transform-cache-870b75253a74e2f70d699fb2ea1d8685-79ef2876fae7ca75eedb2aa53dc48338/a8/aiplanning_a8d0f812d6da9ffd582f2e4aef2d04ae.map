{"version":3,"names":["cov_cv66man8s","actualCoverage","Router","aiPlanningAssistant","aiRequestTracking","s","Map","AI_RATE_LIMIT","AI_RATE_WINDOW","setInterval","f","now","Date","userId","tracking","entries","lastReset","b","delete","aiRateLimit","req","res","next","user","id","status","json","error","userIdStr","toString","userTracking","get","count","resetTime","waitTime","Math","ceil","retryAfter","limit","window","set","sanitizeAIInput","input","trim","slice","replace","Array","isArray","map","sanitized","Object","keys","forEach","key","_validateEducationalInput","fieldName","Error","suspiciousPatterns","pattern","test","router","hasApiKey","process","env","OPENAI_API_KEY","serviceHealth","getServiceHealth","userQuota","dailyRequests","requestsUsed","toISOString","available","healthy","features","longRangeGoals","unitBigIdeas","lessonActivities","materialsList","assessmentStrategies","reflectionPrompts","curriculumAligned","quota","health","console","post","sanitizedBody","body","subject","grade","termLength","focusAreas","suggestions","generateLongRangeGoals","Number","unitTitle","curriculumExpectations","duration","generateUnitBigIdeas","lessonTitle","learningGoals","materials","generateLessonActivities","activities","classSize","generateMaterialsList","generateAssessmentStrategies","date","previousReflections","generateReflectionPrompts","expectationIds","suggestionType","includes","getCurriculumAlignedSuggestions"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/ai-planning.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { aiPlanningAssistant } from '../services/aiPlanningAssistant';\n\n// Rate limiting for AI requests\nconst aiRequestTracking = new Map<string, { count: number; lastReset: number }>();\nconst AI_RATE_LIMIT = 10; // requests per hour\nconst AI_RATE_WINDOW = 60 * 60 * 1000; // 1 hour in milliseconds\n\n// Cleanup old rate limit entries every 5 minutes to prevent memory leaks\nsetInterval(\n  () => {\n    const now = Date.now();\n    for (const [userId, tracking] of aiRequestTracking.entries()) {\n      if (now - tracking.lastReset > AI_RATE_WINDOW * 2) {\n        // Remove entries older than 2 hours\n        aiRequestTracking.delete(userId);\n      }\n    }\n  },\n  5 * 60 * 1000,\n); // Clean up every 5 minutes\n\nconst aiRateLimit = (req: Request, res: Response, next: NextFunction) => {\n  const userId = req.user?.id;\n  if (!userId) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  const now = Date.now();\n  const userIdStr = userId.toString();\n  const userTracking = aiRequestTracking.get(userIdStr) || { count: 0, lastReset: now };\n\n  // Reset count if window has expired\n  if (now - userTracking.lastReset > AI_RATE_WINDOW) {\n    userTracking.count = 0;\n    userTracking.lastReset = now;\n  }\n\n  // Check rate limit\n  if (userTracking.count >= AI_RATE_LIMIT) {\n    const resetTime = userTracking.lastReset + AI_RATE_WINDOW;\n    const waitTime = Math.ceil((resetTime - now) / 1000 / 60); // minutes\n    return res.status(429).json({\n      error: 'AI request limit exceeded',\n      retryAfter: waitTime,\n      limit: AI_RATE_LIMIT,\n      window: 'hour',\n    });\n  }\n\n  // Increment count\n  userTracking.count++;\n  aiRequestTracking.set(userIdStr, userTracking);\n  next();\n};\n\n// Enhanced input sanitization to prevent prompt injection and security issues\nconst sanitizeAIInput = (input: unknown): unknown => {\n  if (typeof input === 'string') {\n    // Remove potentially dangerous characters and prevent prompt injection\n    return input\n      .trim()\n      .slice(0, 2000) // Limit input length\n      .replace(/[<>'\"&]/g, '') // Remove HTML/script characters\n      .replace(/(\\n\\s*){3,}/g, '\\n\\n') // Limit excessive newlines\n      .replace(/ignore\\s+(previous|all)\\s+(instructions?|prompts?)/gi, '') // Remove prompt injection attempts\n      .replace(/system\\s*:\\s*/gi, '') // Remove system prompt attempts\n      .replace(/assistant\\s*:\\s*/gi, '') // Remove assistant prompt attempts\n      .replace(/human\\s*:\\s*/gi, '') // Remove human prompt attempts\n      .replace(/\\[INST\\]/gi, '') // Remove instruction markers\n      .replace(/\\[\\/INST\\]/gi, '') // Remove instruction markers\n      .replace(/<<SYS>>/gi, '') // Remove system markers\n      .replace(/<\\/SYS>>/gi, '') // Remove system markers\n      .replace(/###\\s*(SYSTEM|ASSISTANT|HUMAN)/gi, '') // Remove role markers\n      .replace(/^\\s*(SYSTEM|ASSISTANT|HUMAN)\\s*:/gi, ''); // Remove role prefixes\n  }\n  if (Array.isArray(input)) {\n    return input.map(sanitizeAIInput).slice(0, 50); // Limit array size\n  }\n  if (typeof input === 'object' && input !== null) {\n    const sanitized: Record<string, unknown> = {};\n    Object.keys(input)\n      .slice(0, 20)\n      .forEach((key) => {\n        // Limit object keys\n        sanitized[key] = sanitizeAIInput(input[key]);\n      });\n    return sanitized;\n  }\n  return input;\n};\n\n// Additional validation for educational content\nconst _validateEducationalInput = (input: unknown, fieldName: string): string => {\n  if (!input || typeof input !== 'string') {\n    throw new Error(`Invalid ${fieldName}: must be a non-empty string`);\n  }\n\n  // Check for obvious non-educational content\n  const suspiciousPatterns = [\n    /crypto|bitcoin|investment|trading/gi,\n    /hack|exploit|vulnerability|attack/gi,\n    /password|token|api.key|secret/gi,\n    /download|install|execute|script/gi,\n  ];\n\n  for (const pattern of suspiciousPatterns) {\n    if (pattern.test(input)) {\n      throw new Error(`Invalid ${fieldName}: contains inappropriate content`);\n    }\n  }\n\n  return sanitizeAIInput(input) as string;\n};\n\nconst router = Router();\n\n/**\n * GET /api/ai-planning/status\n * Check AI service availability and user quota status\n */\nrouter.get('/status', async (req: Request, res) => {\n  try {\n    const userId = req.user?.id;\n\n    // Check OpenAI API key availability\n    const hasApiKey = !!process.env.OPENAI_API_KEY;\n\n    // Get service health\n    const serviceHealth = await aiPlanningAssistant.getServiceHealth();\n\n    // Calculate user quota (basic implementation)\n    const userQuota = {\n      dailyRequests: 50, // Default quota\n      requestsUsed: 0, // TODO: Implement actual tracking\n      resetTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    };\n\n    const status = {\n      available: hasApiKey && serviceHealth.healthy,\n      features: {\n        longRangeGoals: hasApiKey,\n        unitBigIdeas: hasApiKey,\n        lessonActivities: hasApiKey,\n        materialsList: hasApiKey,\n        assessmentStrategies: hasApiKey,\n        reflectionPrompts: hasApiKey,\n        curriculumAligned: hasApiKey,\n      },\n      quota: userQuota,\n      health: serviceHealth,\n      userId: userId,\n    };\n\n    res.json(status);\n  } catch (error) {\n    console.error('Error checking AI status:', error);\n    res.status(500).json({\n      available: false,\n      error: 'Failed to check AI service status',\n    });\n  }\n});\n\n/**\n * POST /api/ai-planning/long-range/goals\n * Generate AI suggestions for long-range plan goals\n */\nrouter.post('/long-range/goals', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      subject?: string;\n      grade?: string | number;\n      termLength?: string | number;\n      focusAreas?: string[];\n    };\n    const { subject, grade, termLength, focusAreas } = sanitizedBody;\n\n    if (!subject || !grade || !termLength) {\n      return res.status(400).json({\n        error: 'Missing required fields: subject, grade, termLength',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateLongRangeGoals({\n      subject: subject!,\n      grade: Number(grade),\n      termLength: Number(termLength),\n      focusAreas: focusAreas as string[],\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating long-range goals:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/unit/big-ideas\n * Generate AI suggestions for unit plan big ideas\n */\nrouter.post('/unit/big-ideas', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      unitTitle?: string;\n      subject?: string;\n      grade?: string | number;\n      curriculumExpectations?: string[];\n      duration?: string | number;\n    };\n    const { unitTitle, subject, grade, curriculumExpectations, duration } = sanitizedBody;\n\n    if (!unitTitle || !subject || !grade || !curriculumExpectations || !duration) {\n      return res.status(400).json({\n        error:\n          'Missing required fields: unitTitle, subject, grade, curriculumExpectations, duration',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateUnitBigIdeas({\n      unitTitle,\n      subject,\n      grade: Number(grade),\n      curriculumExpectations,\n      duration: Number(duration),\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating unit big ideas:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/lesson/activities\n * Generate AI suggestions for lesson activities\n */\nrouter.post('/lesson/activities', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      lessonTitle?: string;\n      learningGoals?: string[];\n      subject?: string;\n      grade?: string | number;\n      duration?: string | number;\n      materials?: string[];\n    };\n    const { lessonTitle, learningGoals, subject, grade, duration, materials } = sanitizedBody;\n\n    if (!lessonTitle || !learningGoals || !subject || !grade || !duration) {\n      return res.status(400).json({\n        error: 'Missing required fields: lessonTitle, learningGoals, subject, grade, duration',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateLessonActivities({\n      lessonTitle,\n      learningGoals,\n      subject,\n      grade: Number(grade),\n      duration: Number(duration),\n      materials,\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating lesson activities:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/lesson/materials\n * Generate AI suggestions for materials list\n */\nrouter.post('/lesson/materials', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      activities?: string[];\n      subject?: string;\n      grade?: string | number;\n      classSize?: string | number;\n    };\n    const { activities, subject, grade, classSize } = sanitizedBody;\n\n    if (!activities || !subject || !grade) {\n      return res.status(400).json({\n        error: 'Missing required fields: activities, subject, grade',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateMaterialsList({\n      activities,\n      subject,\n      grade: Number(grade),\n      classSize: Number(classSize) || 25,\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating materials list:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/lesson/assessments\n * Generate AI suggestions for assessment strategies\n */\nrouter.post('/lesson/assessments', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      learningGoals?: string[];\n      activities?: string[];\n      subject?: string;\n      grade?: string | number;\n    };\n    const { learningGoals, activities, subject, grade } = sanitizedBody;\n\n    if (!learningGoals || !activities || !subject || !grade) {\n      return res.status(400).json({\n        error: 'Missing required fields: learningGoals, activities, subject, grade',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateAssessmentStrategies({\n      learningGoals,\n      activities,\n      subject,\n      grade: Number(grade),\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating assessment strategies:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/daybook/reflections\n * Generate AI suggestions for daybook reflection prompts\n */\nrouter.post('/daybook/reflections', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      date?: string;\n      activities?: string[];\n      subject?: string;\n      grade?: string | number;\n      previousReflections?: string[];\n    };\n    const { date, activities, subject, grade, previousReflections } = sanitizedBody;\n\n    if (!date || !activities || !subject || !grade) {\n      return res.status(400).json({\n        error: 'Missing required fields: date, activities, subject, grade',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.generateReflectionPrompts({\n      date: new Date(date),\n      activities,\n      subject,\n      grade: Number(grade),\n      previousReflections,\n    });\n\n    res.json(suggestions);\n  } catch (error) {\n    console.error('Error generating reflection prompts:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\n/**\n * POST /api/ai-planning/curriculum-aligned\n * Get curriculum-aligned suggestions\n */\nrouter.post('/curriculum-aligned', aiRateLimit, async (req: Request, res) => {\n  try {\n    const sanitizedBody = sanitizeAIInput(req.body) as {\n      expectationIds?: string[];\n      suggestionType?: string;\n    };\n    const { expectationIds, suggestionType } = sanitizedBody;\n\n    if (!expectationIds || !suggestionType) {\n      return res.status(400).json({\n        error: 'Missing required fields: expectationIds, suggestionType',\n      });\n    }\n\n    if (!['activities', 'assessments', 'resources'].includes(suggestionType)) {\n      return res.status(400).json({\n        error: 'Invalid suggestionType. Must be: activities, assessments, or resources',\n      });\n    }\n\n    const suggestions = await aiPlanningAssistant.getCurriculumAlignedSuggestions(\n      expectationIds,\n      suggestionType as 'activities' | 'assessments' | 'resources',\n    );\n\n    res.json({ suggestions });\n  } catch (error) {\n    console.error('Error generating curriculum-aligned suggestions:', error);\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}