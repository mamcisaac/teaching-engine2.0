1c27a6c437f28152b6fbff073443cd75
import { jest, describe, it, beforeEach, expect } from '@jest/globals';
import { extractWeeklyPlan } from '../../src/services/weeklyPlanExtractor';
// Import the mocked prisma
import { prisma } from '@teaching-engine/database';
const mockPrisma = jest.mocked(prisma);
describe('WeeklyPlanExtractor', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('extractWeeklyPlan', () => {
        it('should extract weekly plan data for multiple days', async () => {
            // Mock data
            const mockSubject = {
                id: 1,
                name: 'Mathematics',
                nameEn: 'Mathematics',
                nameFr: 'Mathématiques',
            };
            const mockMilestone = {
                id: 1,
                title: 'Number Operations',
                targetDate: new Date('2024-01-31'),
                subject: mockSubject,
                activities: [],
            };
            const mockActivity = {
                id: 1,
                title: 'Addition Practice',
                milestone: { subject: mockSubject },
                outcomes: [],
            };
            const mockDailyPlan = {
                id: 1,
                date: new Date('2024-01-15'),
                items: [
                    {
                        id: 1,
                        startMin: 540, // 9:00 AM
                        activity: mockActivity,
                        slot: { subject: mockSubject },
                    },
                ],
            };
            // Setup mocks
            mockPrisma.dailyPlan.findMany.mockResolvedValue([mockDailyPlan]);
            mockPrisma.milestone.findMany.mockResolvedValue([mockMilestone]);
            mockPrisma.assessmentResult.findMany.mockResolvedValue([]);
            mockPrisma.calendarEvent.findMany.mockResolvedValue([]);
            mockPrisma.subject.findMany.mockResolvedValue([mockSubject]);
            const result = await extractWeeklyPlan('2024-01-15', 3, { userId: 1 });
            expect(result).toHaveProperty('startDate', '2024-01-15');
            expect(result).toHaveProperty('days');
            expect(result.days).toHaveLength(3);
            expect(result).toHaveProperty('weeklyOverview');
            expect(result.weeklyOverview).toHaveProperty('subjects');
            expect(result.weeklyOverview).toHaveProperty('milestones');
            expect(result).toHaveProperty('continuityNotes');
            expect(result).toHaveProperty('emergencyBackupPlans');
        });
        it('should generate continuity notes between days', async () => {
            // Setup mock data for consecutive days with related activities
            const mockSubject = { id: 1, name: 'Mathematics' };
            const mockPlans = [
                {
                    id: 1,
                    date: new Date('2024-01-15'),
                    items: [
                        {
                            id: 1,
                            startMin: 540,
                            activity: {
                                id: 1,
                                title: 'Introduction to Fractions',
                                milestone: { subject: mockSubject },
                            },
                            slot: { subject: mockSubject },
                        },
                    ],
                },
                {
                    id: 2,
                    date: new Date('2024-01-16'),
                    items: [
                        {
                            id: 2,
                            startMin: 540,
                            activity: {
                                id: 2,
                                title: 'Fraction Operations',
                                milestone: { subject: mockSubject },
                            },
                            slot: { subject: mockSubject },
                        },
                    ],
                },
            ];
            mockPrisma.dailyPlan.findMany.mockResolvedValue(mockPlans);
            mockPrisma.milestone.findMany.mockResolvedValue([]);
            mockPrisma.assessmentResult.findMany.mockResolvedValue([]);
            mockPrisma.calendarEvent.findMany.mockResolvedValue([]);
            mockPrisma.subject.findMany.mockResolvedValue([mockSubject]);
            const result = await extractWeeklyPlan('2024-01-15', 2, { userId: 1 });
            expect(result.continuityNotes).toHaveLength(2);
            const day2Notes = result.continuityNotes[1];
            expect(day2Notes.connections.length).toBeGreaterThan(0);
            expect(day2Notes.connections[0]).toContain('Mathematics');
            expect(day2Notes.connections[0]).toContain('Introduction to Fractions');
            expect(day2Notes.connections[0]).toContain('Fraction Operations');
        });
        it('should generate emergency backup plans by subject', async () => {
            const mockSubjects = [
                {
                    id: 1,
                    name: 'Mathematics',
                    activities: [
                        { id: 1, title: 'Math Review Worksheets', isFallback: true },
                        { id: 2, title: 'Number Games', isFallback: true },
                    ],
                },
                {
                    id: 2,
                    name: 'Language Arts',
                    activities: [{ id: 3, title: 'Silent Reading', isFallback: true }],
                },
            ];
            mockPrisma.dailyPlan.findMany.mockResolvedValue([]);
            mockPrisma.milestone.findMany.mockResolvedValue([]);
            mockPrisma.assessmentResult.findMany.mockResolvedValue([]);
            mockPrisma.calendarEvent.findMany.mockResolvedValue([]);
            mockPrisma.subject.findMany.mockResolvedValue(mockSubjects);
            const result = await extractWeeklyPlan('2024-01-15', 1, { userId: 1 });
            expect(result.emergencyBackupPlans).toHaveLength(2);
            const mathPlan = result.emergencyBackupPlans.find((p) => p.subject === 'Mathematics');
            expect(mathPlan).toBeDefined();
            expect(mathPlan?.activities).toContain('Math Review Worksheets');
            expect(mathPlan?.activities).toContain('Number Games');
            expect(mathPlan?.materials).toContain('Math manipulatives');
            const langPlan = result.emergencyBackupPlans.find((p) => p.subject === 'Language Arts');
            expect(langPlan).toBeDefined();
            expect(langPlan?.activities).toContain('Silent Reading');
            expect(langPlan?.materials).toContain('Reading books');
        });
        it('should calculate subject hours and topics correctly', async () => {
            const mockSubject = { id: 1, name: 'Mathematics' };
            const mockDailyPlan = {
                id: 1,
                date: new Date('2024-01-15'),
                items: [
                    {
                        id: 1,
                        startMin: 540, // 9:00 AM - assuming 15-minute slots
                        activity: {
                            id: 1,
                            title: 'Addition',
                            milestone: { subject: mockSubject },
                            outcomes: [],
                        },
                        slot: { subject: mockSubject },
                    },
                    {
                        id: 2,
                        startMin: 555, // 9:15 AM
                        activity: {
                            id: 2,
                            title: 'Subtraction',
                            milestone: { subject: mockSubject },
                            outcomes: [],
                        },
                        slot: { subject: mockSubject },
                    },
                    {
                        id: 3,
                        startMin: 570, // 9:30 AM
                        activity: {
                            id: 3,
                            title: 'Word Problems',
                            milestone: { subject: mockSubject },
                            outcomes: [],
                        },
                        slot: { subject: mockSubject },
                    },
                ],
            };
            mockPrisma.dailyPlan.findMany.mockResolvedValue([mockDailyPlan]);
            mockPrisma.milestone.findMany.mockResolvedValue([]);
            mockPrisma.assessmentResult.findMany.mockResolvedValue([]);
            mockPrisma.calendarEvent.findMany.mockResolvedValue([]);
            mockPrisma.subject.findMany.mockResolvedValue([mockSubject]);
            const result = await extractWeeklyPlan('2024-01-15', 1, { userId: 1 });
            const mathSubject = result.weeklyOverview.subjects.find((s) => s.name === 'Mathematics');
            expect(mathSubject).toBeDefined();
            expect(mathSubject?.totalHours).toBe(0.75); // 3 slots × 0.25 hours each
            expect(mathSubject?.keyTopics).toContain('Addition');
            expect(mathSubject?.keyTopics).toContain('Subtraction');
            expect(mathSubject?.keyTopics).toContain('Word Problems');
        });
        it('should handle empty days gracefully', async () => {
            mockPrisma.dailyPlan.findMany.mockResolvedValue([]);
            mockPrisma.milestone.findMany.mockResolvedValue([]);
            mockPrisma.assessmentResult.findMany.mockResolvedValue([]);
            mockPrisma.calendarEvent.findMany.mockResolvedValue([]);
            mockPrisma.subject.findMany.mockResolvedValue([]);
            const result = await extractWeeklyPlan('2024-01-15', 3, { userId: 1 });
            expect(result.startDate).toBe('2024-01-15');
            expect(result.days).toHaveLength(3);
            expect(result.weeklyOverview.subjects).toHaveLength(0);
            expect(result.weeklyOverview.milestones).toHaveLength(0);
            expect(result.continuityNotes).toHaveLength(3);
            expect(result.emergencyBackupPlans).toHaveLength(0);
        });
        it('should respect user options for data inclusion', async () => {
            const mockDailyPlan = {
                id: 1,
                date: new Date('2024-01-15'),
                items: [],
            };
            mockPrisma.dailyPlan.findMany.mockResolvedValue([mockDailyPlan]);
            mockPrisma.milestone.findMany.mockResolvedValue([]);
            mockPrisma.assessmentResult.findMany.mockResolvedValue([]);
            mockPrisma.calendarEvent.findMany.mockResolvedValue([]);
            mockPrisma.subject.findMany.mockResolvedValue([]);
            // Test with includeGoals: false
            const result = await extractWeeklyPlan('2024-01-15', 1, {
                userId: 1,
                includeGoals: false,
                includeRoutines: false,
                includePlans: false,
            });
            expect(result.days[0].goals).toBeUndefined();
            expect(result.days[0].routines).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL3VuaXQvd2Vla2x5UGxhbkV4dHJhY3Rvci51bml0LnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFM0UsMkJBQTJCO0FBQzNCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRXZDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pFLFlBQVk7WUFDWixNQUFNLFdBQVcsR0FBRztnQkFDbEIsRUFBRSxFQUFFLENBQUM7Z0JBQ0wsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixNQUFNLEVBQUUsZUFBZTthQUN4QixDQUFDO1lBRUYsTUFBTSxhQUFhLEdBQUc7Z0JBQ3BCLEVBQUUsRUFBRSxDQUFDO2dCQUNMLEtBQUssRUFBRSxtQkFBbUI7Z0JBQzFCLFVBQVUsRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQ2xDLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixVQUFVLEVBQUUsRUFBRTthQUNmLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRztnQkFDbkIsRUFBRSxFQUFFLENBQUM7Z0JBQ0wsS0FBSyxFQUFFLG1CQUFtQjtnQkFDMUIsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTtnQkFDbkMsUUFBUSxFQUFFLEVBQUU7YUFDYixDQUFDO1lBRUYsTUFBTSxhQUFhLEdBQUc7Z0JBQ3BCLEVBQUUsRUFBRSxDQUFDO2dCQUNMLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQzVCLEtBQUssRUFBRTtvQkFDTDt3QkFDRSxFQUFFLEVBQUUsQ0FBQzt3QkFDTCxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVU7d0JBQ3pCLFFBQVEsRUFBRSxZQUFZO3dCQUN0QixJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFO3FCQUMvQjtpQkFDRjthQUNGLENBQUM7WUFFRixjQUFjO1lBQ2QsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNqRSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNELFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUU3RCxNQUFNLE1BQU0sR0FBRyxNQUFNLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUV2RSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzdELCtEQUErRDtZQUMvRCxNQUFNLFdBQVcsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDO1lBRW5ELE1BQU0sU0FBUyxHQUFHO2dCQUNoQjtvQkFDRSxFQUFFLEVBQUUsQ0FBQztvQkFDTCxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO29CQUM1QixLQUFLLEVBQUU7d0JBQ0w7NEJBQ0UsRUFBRSxFQUFFLENBQUM7NEJBQ0wsUUFBUSxFQUFFLEdBQUc7NEJBQ2IsUUFBUSxFQUFFO2dDQUNSLEVBQUUsRUFBRSxDQUFDO2dDQUNMLEtBQUssRUFBRSwyQkFBMkI7Z0NBQ2xDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUU7NkJBQ3BDOzRCQUNELElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUU7eUJBQy9CO3FCQUNGO2lCQUNGO2dCQUNEO29CQUNFLEVBQUUsRUFBRSxDQUFDO29CQUNMLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7b0JBQzVCLEtBQUssRUFBRTt3QkFDTDs0QkFDRSxFQUFFLEVBQUUsQ0FBQzs0QkFDTCxRQUFRLEVBQUUsR0FBRzs0QkFDYixRQUFRLEVBQUU7Z0NBQ1IsRUFBRSxFQUFFLENBQUM7Z0NBQ0wsS0FBSyxFQUFFLHFCQUFxQjtnQ0FDNUIsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTs2QkFDcEM7NEJBQ0QsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTt5QkFDL0I7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDM0QsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEQsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzRCxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4RCxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFFN0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFdkUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFL0MsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUN4RSxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pFLE1BQU0sWUFBWSxHQUFHO2dCQUNuQjtvQkFDRSxFQUFFLEVBQUUsQ0FBQztvQkFDTCxJQUFJLEVBQUUsYUFBYTtvQkFDbkIsVUFBVSxFQUFFO3dCQUNWLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRTt3QkFDNUQsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRTtxQkFDbkQ7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsRUFBRSxFQUFFLENBQUM7b0JBQ0wsSUFBSSxFQUFFLGVBQWU7b0JBQ3JCLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUNuRTthQUNGLENBQUM7WUFFRixVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRCxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNELFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTVELE1BQU0sTUFBTSxHQUFHLE1BQU0saUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXZFLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFcEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxhQUFhLENBQUMsQ0FBQztZQUN0RixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0IsTUFBTSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUNqRSxNQUFNLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRTVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssZUFBZSxDQUFDLENBQUM7WUFDeEYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscURBQXFELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkUsTUFBTSxXQUFXLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FBQztZQUVuRCxNQUFNLGFBQWEsR0FBRztnQkFDcEIsRUFBRSxFQUFFLENBQUM7Z0JBQ0wsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztnQkFDNUIsS0FBSyxFQUFFO29CQUNMO3dCQUNFLEVBQUUsRUFBRSxDQUFDO3dCQUNMLFFBQVEsRUFBRSxHQUFHLEVBQUUscUNBQXFDO3dCQUNwRCxRQUFRLEVBQUU7NEJBQ1IsRUFBRSxFQUFFLENBQUM7NEJBQ0wsS0FBSyxFQUFFLFVBQVU7NEJBQ2pCLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUU7NEJBQ25DLFFBQVEsRUFBRSxFQUFFO3lCQUNiO3dCQUNELElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUU7cUJBQy9CO29CQUNEO3dCQUNFLEVBQUUsRUFBRSxDQUFDO3dCQUNMLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVTt3QkFDekIsUUFBUSxFQUFFOzRCQUNSLEVBQUUsRUFBRSxDQUFDOzRCQUNMLEtBQUssRUFBRSxhQUFhOzRCQUNwQixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFOzRCQUNuQyxRQUFRLEVBQUUsRUFBRTt5QkFDYjt3QkFDRCxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFO3FCQUMvQjtvQkFDRDt3QkFDRSxFQUFFLEVBQUUsQ0FBQzt3QkFDTCxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVU7d0JBQ3pCLFFBQVEsRUFBRTs0QkFDUixFQUFFLEVBQUUsQ0FBQzs0QkFDTCxLQUFLLEVBQUUsZUFBZTs0QkFDdEIsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTs0QkFDbkMsUUFBUSxFQUFFLEVBQUU7eUJBQ2I7d0JBQ0QsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTtxQkFDL0I7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDM0QsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBRTdELE1BQU0sTUFBTSxHQUFHLE1BQU0saUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXZFLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsQ0FBQztZQUN6RixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyw0QkFBNEI7WUFDeEUsTUFBTSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDeEQsTUFBTSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEQsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzRCxVQUFVLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4RCxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUV2RSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDOUQsTUFBTSxhQUFhLEdBQUc7Z0JBQ3BCLEVBQUUsRUFBRSxDQUFDO2dCQUNMLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQzVCLEtBQUssRUFBRSxFQUFFO2FBQ1YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNqRSxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNELFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWxELGdDQUFnQztZQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUU7Z0JBQ3RELE1BQU0sRUFBRSxDQUFDO2dCQUNULFlBQVksRUFBRSxLQUFLO2dCQUNuQixlQUFlLEVBQUUsS0FBSztnQkFDdEIsWUFBWSxFQUFFLEtBQUs7YUFDcEIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy91bml0L3dlZWtseVBsYW5FeHRyYWN0b3IudW5pdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGplc3QsIGRlc2NyaWJlLCBpdCwgYmVmb3JlRWFjaCwgZXhwZWN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBleHRyYWN0V2Vla2x5UGxhbiB9IGZyb20gJy4uLy4uL3NyYy9zZXJ2aWNlcy93ZWVrbHlQbGFuRXh0cmFjdG9yJztcblxuLy8gSW1wb3J0IHRoZSBtb2NrZWQgcHJpc21hXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAdGVhY2hpbmctZW5naW5lL2RhdGFiYXNlJztcbmNvbnN0IG1vY2tQcmlzbWEgPSBqZXN0Lm1vY2tlZChwcmlzbWEpO1xuXG5kZXNjcmliZSgnV2Vla2x5UGxhbkV4dHJhY3RvcicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdleHRyYWN0V2Vla2x5UGxhbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGV4dHJhY3Qgd2Vla2x5IHBsYW4gZGF0YSBmb3IgbXVsdGlwbGUgZGF5cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgZGF0YVxuICAgICAgY29uc3QgbW9ja1N1YmplY3QgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBuYW1lOiAnTWF0aGVtYXRpY3MnLFxuICAgICAgICBuYW1lRW46ICdNYXRoZW1hdGljcycsXG4gICAgICAgIG5hbWVGcjogJ01hdGjDqW1hdGlxdWVzJyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tNaWxlc3RvbmUgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICB0aXRsZTogJ051bWJlciBPcGVyYXRpb25zJyxcbiAgICAgICAgdGFyZ2V0RGF0ZTogbmV3IERhdGUoJzIwMjQtMDEtMzEnKSxcbiAgICAgICAgc3ViamVjdDogbW9ja1N1YmplY3QsXG4gICAgICAgIGFjdGl2aXRpZXM6IFtdLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja0FjdGl2aXR5ID0ge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgdGl0bGU6ICdBZGRpdGlvbiBQcmFjdGljZScsXG4gICAgICAgIG1pbGVzdG9uZTogeyBzdWJqZWN0OiBtb2NrU3ViamVjdCB9LFxuICAgICAgICBvdXRjb21lczogW10sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb2NrRGFpbHlQbGFuID0ge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoJzIwMjQtMDEtMTUnKSxcbiAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgIHN0YXJ0TWluOiA1NDAsIC8vIDk6MDAgQU1cbiAgICAgICAgICAgIGFjdGl2aXR5OiBtb2NrQWN0aXZpdHksXG4gICAgICAgICAgICBzbG90OiB7IHN1YmplY3Q6IG1vY2tTdWJqZWN0IH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIC8vIFNldHVwIG1vY2tzXG4gICAgICBtb2NrUHJpc21hLmRhaWx5UGxhbi5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbbW9ja0RhaWx5UGxhbl0pO1xuICAgICAgbW9ja1ByaXNtYS5taWxlc3RvbmUuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW21vY2tNaWxlc3RvbmVdKTtcbiAgICAgIG1vY2tQcmlzbWEuYXNzZXNzbWVudFJlc3VsdC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICBtb2NrUHJpc21hLmNhbGVuZGFyRXZlbnQuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5zdWJqZWN0LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFttb2NrU3ViamVjdF0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleHRyYWN0V2Vla2x5UGxhbignMjAyNC0wMS0xNScsIDMsIHsgdXNlcklkOiAxIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnc3RhcnREYXRlJywgJzIwMjQtMDEtMTUnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdkYXlzJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmRheXMpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd3ZWVrbHlPdmVydmlldycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC53ZWVrbHlPdmVydmlldykudG9IYXZlUHJvcGVydHkoJ3N1YmplY3RzJyk7XG4gICAgICBleHBlY3QocmVzdWx0LndlZWtseU92ZXJ2aWV3KS50b0hhdmVQcm9wZXJ0eSgnbWlsZXN0b25lcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ2NvbnRpbnVpdHlOb3RlcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ2VtZXJnZW5jeUJhY2t1cFBsYW5zJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIGNvbnRpbnVpdHkgbm90ZXMgYmV0d2VlbiBkYXlzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gU2V0dXAgbW9jayBkYXRhIGZvciBjb25zZWN1dGl2ZSBkYXlzIHdpdGggcmVsYXRlZCBhY3Rpdml0aWVzXG4gICAgICBjb25zdCBtb2NrU3ViamVjdCA9IHsgaWQ6IDEsIG5hbWU6ICdNYXRoZW1hdGljcycgfTtcblxuICAgICAgY29uc3QgbW9ja1BsYW5zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUoJzIwMjQtMDEtMTUnKSxcbiAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgICAgc3RhcnRNaW46IDU0MCxcbiAgICAgICAgICAgICAgYWN0aXZpdHk6IHtcbiAgICAgICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0ludHJvZHVjdGlvbiB0byBGcmFjdGlvbnMnLFxuICAgICAgICAgICAgICAgIG1pbGVzdG9uZTogeyBzdWJqZWN0OiBtb2NrU3ViamVjdCB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzbG90OiB7IHN1YmplY3Q6IG1vY2tTdWJqZWN0IH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogMixcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgnMjAyNC0wMS0xNicpLFxuICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgICBzdGFydE1pbjogNTQwLFxuICAgICAgICAgICAgICBhY3Rpdml0eToge1xuICAgICAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRnJhY3Rpb24gT3BlcmF0aW9ucycsXG4gICAgICAgICAgICAgICAgbWlsZXN0b25lOiB7IHN1YmplY3Q6IG1vY2tTdWJqZWN0IH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHNsb3Q6IHsgc3ViamVjdDogbW9ja1N1YmplY3QgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tQcmlzbWEuZGFpbHlQbGFuLmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQbGFucyk7XG4gICAgICBtb2NrUHJpc21hLm1pbGVzdG9uZS5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICBtb2NrUHJpc21hLmFzc2Vzc21lbnRSZXN1bHQuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5jYWxlbmRhckV2ZW50LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIG1vY2tQcmlzbWEuc3ViamVjdC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbbW9ja1N1YmplY3RdKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXh0cmFjdFdlZWtseVBsYW4oJzIwMjQtMDEtMTUnLCAyLCB7IHVzZXJJZDogMSB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jb250aW51aXR5Tm90ZXMpLnRvSGF2ZUxlbmd0aCgyKTtcblxuICAgICAgY29uc3QgZGF5Mk5vdGVzID0gcmVzdWx0LmNvbnRpbnVpdHlOb3Rlc1sxXTtcbiAgICAgIGV4cGVjdChkYXkyTm90ZXMuY29ubmVjdGlvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QoZGF5Mk5vdGVzLmNvbm5lY3Rpb25zWzBdKS50b0NvbnRhaW4oJ01hdGhlbWF0aWNzJyk7XG4gICAgICBleHBlY3QoZGF5Mk5vdGVzLmNvbm5lY3Rpb25zWzBdKS50b0NvbnRhaW4oJ0ludHJvZHVjdGlvbiB0byBGcmFjdGlvbnMnKTtcbiAgICAgIGV4cGVjdChkYXkyTm90ZXMuY29ubmVjdGlvbnNbMF0pLnRvQ29udGFpbignRnJhY3Rpb24gT3BlcmF0aW9ucycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBlbWVyZ2VuY3kgYmFja3VwIHBsYW5zIGJ5IHN1YmplY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU3ViamVjdHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogMSxcbiAgICAgICAgICBuYW1lOiAnTWF0aGVtYXRpY3MnLFxuICAgICAgICAgIGFjdGl2aXRpZXM6IFtcbiAgICAgICAgICAgIHsgaWQ6IDEsIHRpdGxlOiAnTWF0aCBSZXZpZXcgV29ya3NoZWV0cycsIGlzRmFsbGJhY2s6IHRydWUgfSxcbiAgICAgICAgICAgIHsgaWQ6IDIsIHRpdGxlOiAnTnVtYmVyIEdhbWVzJywgaXNGYWxsYmFjazogdHJ1ZSB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogMixcbiAgICAgICAgICBuYW1lOiAnTGFuZ3VhZ2UgQXJ0cycsXG4gICAgICAgICAgYWN0aXZpdGllczogW3sgaWQ6IDMsIHRpdGxlOiAnU2lsZW50IFJlYWRpbmcnLCBpc0ZhbGxiYWNrOiB0cnVlIH1dLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgbW9ja1ByaXNtYS5kYWlseVBsYW4uZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5taWxlc3RvbmUuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5hc3Nlc3NtZW50UmVzdWx0LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIG1vY2tQcmlzbWEuY2FsZW5kYXJFdmVudC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICBtb2NrUHJpc21hLnN1YmplY3QuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUobW9ja1N1YmplY3RzKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXh0cmFjdFdlZWtseVBsYW4oJzIwMjQtMDEtMTUnLCAxLCB7IHVzZXJJZDogMSB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5lbWVyZ2VuY3lCYWNrdXBQbGFucykudG9IYXZlTGVuZ3RoKDIpO1xuXG4gICAgICBjb25zdCBtYXRoUGxhbiA9IHJlc3VsdC5lbWVyZ2VuY3lCYWNrdXBQbGFucy5maW5kKChwKSA9PiBwLnN1YmplY3QgPT09ICdNYXRoZW1hdGljcycpO1xuICAgICAgZXhwZWN0KG1hdGhQbGFuKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KG1hdGhQbGFuPy5hY3Rpdml0aWVzKS50b0NvbnRhaW4oJ01hdGggUmV2aWV3IFdvcmtzaGVldHMnKTtcbiAgICAgIGV4cGVjdChtYXRoUGxhbj8uYWN0aXZpdGllcykudG9Db250YWluKCdOdW1iZXIgR2FtZXMnKTtcbiAgICAgIGV4cGVjdChtYXRoUGxhbj8ubWF0ZXJpYWxzKS50b0NvbnRhaW4oJ01hdGggbWFuaXB1bGF0aXZlcycpO1xuXG4gICAgICBjb25zdCBsYW5nUGxhbiA9IHJlc3VsdC5lbWVyZ2VuY3lCYWNrdXBQbGFucy5maW5kKChwKSA9PiBwLnN1YmplY3QgPT09ICdMYW5ndWFnZSBBcnRzJyk7XG4gICAgICBleHBlY3QobGFuZ1BsYW4pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobGFuZ1BsYW4/LmFjdGl2aXRpZXMpLnRvQ29udGFpbignU2lsZW50IFJlYWRpbmcnKTtcbiAgICAgIGV4cGVjdChsYW5nUGxhbj8ubWF0ZXJpYWxzKS50b0NvbnRhaW4oJ1JlYWRpbmcgYm9va3MnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHN1YmplY3QgaG91cnMgYW5kIHRvcGljcyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU3ViamVjdCA9IHsgaWQ6IDEsIG5hbWU6ICdNYXRoZW1hdGljcycgfTtcblxuICAgICAgY29uc3QgbW9ja0RhaWx5UGxhbiA9IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCcyMDI0LTAxLTE1JyksXG4gICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICBzdGFydE1pbjogNTQwLCAvLyA5OjAwIEFNIC0gYXNzdW1pbmcgMTUtbWludXRlIHNsb3RzXG4gICAgICAgICAgICBhY3Rpdml0eToge1xuICAgICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgICAgdGl0bGU6ICdBZGRpdGlvbicsXG4gICAgICAgICAgICAgIG1pbGVzdG9uZTogeyBzdWJqZWN0OiBtb2NrU3ViamVjdCB9LFxuICAgICAgICAgICAgICBvdXRjb21lczogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2xvdDogeyBzdWJqZWN0OiBtb2NrU3ViamVjdCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDIsXG4gICAgICAgICAgICBzdGFydE1pbjogNTU1LCAvLyA5OjE1IEFNXG4gICAgICAgICAgICBhY3Rpdml0eToge1xuICAgICAgICAgICAgICBpZDogMixcbiAgICAgICAgICAgICAgdGl0bGU6ICdTdWJ0cmFjdGlvbicsXG4gICAgICAgICAgICAgIG1pbGVzdG9uZTogeyBzdWJqZWN0OiBtb2NrU3ViamVjdCB9LFxuICAgICAgICAgICAgICBvdXRjb21lczogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2xvdDogeyBzdWJqZWN0OiBtb2NrU3ViamVjdCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDMsXG4gICAgICAgICAgICBzdGFydE1pbjogNTcwLCAvLyA5OjMwIEFNXG4gICAgICAgICAgICBhY3Rpdml0eToge1xuICAgICAgICAgICAgICBpZDogMyxcbiAgICAgICAgICAgICAgdGl0bGU6ICdXb3JkIFByb2JsZW1zJyxcbiAgICAgICAgICAgICAgbWlsZXN0b25lOiB7IHN1YmplY3Q6IG1vY2tTdWJqZWN0IH0sXG4gICAgICAgICAgICAgIG91dGNvbWVzOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG90OiB7IHN1YmplY3Q6IG1vY2tTdWJqZWN0IH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tQcmlzbWEuZGFpbHlQbGFuLmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFttb2NrRGFpbHlQbGFuXSk7XG4gICAgICBtb2NrUHJpc21hLm1pbGVzdG9uZS5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICBtb2NrUHJpc21hLmFzc2Vzc21lbnRSZXN1bHQuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5jYWxlbmRhckV2ZW50LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIG1vY2tQcmlzbWEuc3ViamVjdC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbbW9ja1N1YmplY3RdKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXh0cmFjdFdlZWtseVBsYW4oJzIwMjQtMDEtMTUnLCAxLCB7IHVzZXJJZDogMSB9KTtcblxuICAgICAgY29uc3QgbWF0aFN1YmplY3QgPSByZXN1bHQud2Vla2x5T3ZlcnZpZXcuc3ViamVjdHMuZmluZCgocykgPT4gcy5uYW1lID09PSAnTWF0aGVtYXRpY3MnKTtcbiAgICAgIGV4cGVjdChtYXRoU3ViamVjdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChtYXRoU3ViamVjdD8udG90YWxIb3VycykudG9CZSgwLjc1KTsgLy8gMyBzbG90cyDDlyAwLjI1IGhvdXJzIGVhY2hcbiAgICAgIGV4cGVjdChtYXRoU3ViamVjdD8ua2V5VG9waWNzKS50b0NvbnRhaW4oJ0FkZGl0aW9uJyk7XG4gICAgICBleHBlY3QobWF0aFN1YmplY3Q/LmtleVRvcGljcykudG9Db250YWluKCdTdWJ0cmFjdGlvbicpO1xuICAgICAgZXhwZWN0KG1hdGhTdWJqZWN0Py5rZXlUb3BpY3MpLnRvQ29udGFpbignV29yZCBQcm9ibGVtcycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZGF5cyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1ByaXNtYS5kYWlseVBsYW4uZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5taWxlc3RvbmUuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5hc3Nlc3NtZW50UmVzdWx0LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIG1vY2tQcmlzbWEuY2FsZW5kYXJFdmVudC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICBtb2NrUHJpc21hLnN1YmplY3QuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleHRyYWN0V2Vla2x5UGxhbignMjAyNC0wMS0xNScsIDMsIHsgdXNlcklkOiAxIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN0YXJ0RGF0ZSkudG9CZSgnMjAyNC0wMS0xNScpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kYXlzKS50b0hhdmVMZW5ndGgoMyk7XG4gICAgICBleHBlY3QocmVzdWx0LndlZWtseU92ZXJ2aWV3LnN1YmplY3RzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgICBleHBlY3QocmVzdWx0LndlZWtseU92ZXJ2aWV3Lm1pbGVzdG9uZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY29udGludWl0eU5vdGVzKS50b0hhdmVMZW5ndGgoMyk7XG4gICAgICBleHBlY3QocmVzdWx0LmVtZXJnZW5jeUJhY2t1cFBsYW5zKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlc3BlY3QgdXNlciBvcHRpb25zIGZvciBkYXRhIGluY2x1c2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tEYWlseVBsYW4gPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgnMjAyNC0wMS0xNScpLFxuICAgICAgICBpdGVtczogW10sXG4gICAgICB9O1xuXG4gICAgICBtb2NrUHJpc21hLmRhaWx5UGxhbi5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbbW9ja0RhaWx5UGxhbl0pO1xuICAgICAgbW9ja1ByaXNtYS5taWxlc3RvbmUuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICAgICAgbW9ja1ByaXNtYS5hc3Nlc3NtZW50UmVzdWx0LmZpbmRNYW55Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIG1vY2tQcmlzbWEuY2FsZW5kYXJFdmVudC5maW5kTWFueS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICBtb2NrUHJpc21hLnN1YmplY3QuZmluZE1hbnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuXG4gICAgICAvLyBUZXN0IHdpdGggaW5jbHVkZUdvYWxzOiBmYWxzZVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXh0cmFjdFdlZWtseVBsYW4oJzIwMjQtMDEtMTUnLCAxLCB7XG4gICAgICAgIHVzZXJJZDogMSxcbiAgICAgICAgaW5jbHVkZUdvYWxzOiBmYWxzZSxcbiAgICAgICAgaW5jbHVkZVJvdXRpbmVzOiBmYWxzZSxcbiAgICAgICAgaW5jbHVkZVBsYW5zOiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmRheXNbMF0uZ29hbHMpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGF5c1swXS5yb3V0aW5lcykudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9