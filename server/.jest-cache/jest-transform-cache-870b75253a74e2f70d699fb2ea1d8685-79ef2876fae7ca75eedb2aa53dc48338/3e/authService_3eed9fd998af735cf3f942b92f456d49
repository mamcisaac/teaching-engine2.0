6fdcfc1ec84d881ec58e900210a8b0ec
/* istanbul ignore next */
function cov_jb8p697fe() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts";
  var hash = "769ce474e6a7167aea5714824d6c9fb1457649b0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 22
        }
      },
      "1": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 25
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "3": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 88
        }
      },
      "4": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "5": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 71
        }
      },
      "7": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 37
        }
      },
      "8": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 52
        }
      },
      "9": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 46
        }
      },
      "10": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 72
        }
      },
      "12": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 72
        }
      },
      "14": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 60
        }
      },
      "15": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 72
        }
      },
      "17": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 16
        }
      },
      "18": {
        start: {
          line: 50,
          column: 19
        },
        end: {
          line: 50,
          column: 41
        }
      },
      "19": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 71
        }
      },
      "21": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 37
        }
      },
      "22": {
        start: {
          line: 61,
          column: 17
        },
        end: {
          line: 63,
          column: 6
        }
      },
      "23": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 64
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 47
        }
      },
      "26": {
        start: {
          line: 69,
          column: 28
        },
        end: {
          line: 69,
          column: 73
        }
      },
      "27": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "28": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 65
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 47
        }
      },
      "30": {
        start: {
          line: 75,
          column: 18
        },
        end: {
          line: 75,
          column: 73
        }
      },
      "31": {
        start: {
          line: 77,
          column: 52
        },
        end: {
          line: 77,
          column: 56
        }
      },
      "32": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 84,
          column: 6
        }
      },
      "33": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "34": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 20
        }
      },
      "35": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "36": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 61
        }
      },
      "37": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "38": {
        start: {
          line: 104,
          column: 28
        },
        end: {
          line: 104,
          column: 66
        }
      },
      "39": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "generateAuthToken",
        decl: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 39
          }
        },
        loc: {
          start: {
            line: 15,
            column: 81
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "hashPassword",
        decl: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 34
          }
        },
        loc: {
          start: {
            line: 26,
            column: 45
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 26
      },
      "2": {
        name: "validatePassword",
        decl: {
          start: {
            line: 32,
            column: 22
          },
          end: {
            line: 32,
            column: 38
          }
        },
        loc: {
          start: {
            line: 32,
            column: 49
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 32
      },
      "3": {
        name: "verifyToken",
        decl: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 33
          }
        },
        loc: {
          start: {
            line: 49,
            column: 41
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 49
      },
      "4": {
        name: "authenticate",
        decl: {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 59,
            column: 34
          }
        },
        loc: {
          start: {
            line: 59,
            column: 60
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 59
      },
      "5": {
        name: "checkPermissions",
        decl: {
          start: {
            line: 89,
            column: 22
          },
          end: {
            line: 89,
            column: 38
          }
        },
        loc: {
          start: {
            line: 89,
            column: 65
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 89
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 55
          },
          end: {
            line: 15,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 67
          },
          end: {
            line: 15,
            column: 79
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 24
          }
        }, {
          start: {
            line: 95,
            column: 28
          },
          end: {
            line: 95,
            column: 59
          }
        }],
        line: 95
      },
      "11": {
        loc: {
          start: {
            line: 104,
            column: 28
          },
          end: {
            line: 104,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 28
          },
          end: {
            line: 104,
            column: 60
          }
        }, {
          start: {
            line: 104,
            column: 64
          },
          end: {
            line: 104,
            column: 66
          }
        }],
        line: 104
      },
      "12": {
        loc: {
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 53
          }
        }, {
          start: {
            line: 104,
            column: 57
          },
          end: {
            line: 104,
            column: 59
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts"],
      sourcesContent: ["/**\n * Authentication Service\n * Core authentication and authorization logic\n */\n\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@teaching-engine/database';\nimport logger from '@/logger';\n\nconst SALT_ROUNDS = 10;\nconst TOKEN_EXPIRY = '7d';\nconst PASSWORD_MIN_LENGTH = 8;\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResult {\n  user: AuthUser;\n  token: string;\n}\n\n/**\n * Generate JWT token for user\n */\nexport async function generateAuthToken(\n  userId: string,\n  email: string,\n  expiresIn: string = TOKEN_EXPIRY,\n): Promise<string> {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required');\n  }\n\n  const payload = { userId, email };\n  return jwt.sign(payload, secret as jwt.Secret, { expiresIn } as jwt.SignOptions);\n}\n\n/**\n * Hash password with bcrypt\n */\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\n/**\n * Validate password strength\n */\nexport async function validatePassword(password: string): Promise<boolean> {\n  if (password.length < PASSWORD_MIN_LENGTH) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  if (!PASSWORD_REGEX.test(password)) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  // Check against common passwords\n  const commonPasswords = ['password', '123456', 'qwerty'];\n  if (commonPasswords.includes(password.toLowerCase())) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  return true;\n}\n\n/**\n * Verify JWT token\n */\nexport async function verifyToken(token: string): Promise<{ userId: string; email: string }> {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required');\n  }\n\n  return jwt.verify(token, secret) as { userId: string; email: string };\n}\n\n/**\n * Authenticate user with email and password\n */\nexport async function authenticate(\n  email: string,\n  password: string,\n  prisma: PrismaClient,\n): Promise<AuthResult> {\n  // Find user by email\n  const user = await prisma.user.findUnique({\n    where: { email },\n  });\n\n  if (!user) {\n    logger.warn(`Failed login attempt for email: ${email}`);\n    throw new Error('Invalid credentials');\n  }\n\n  // Compare password\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  if (!isValidPassword) {\n    logger.warn(`Failed login attempt for user: ${user.id}`);\n    throw new Error('Invalid credentials');\n  }\n\n  // Generate token\n  const token = await generateAuthToken(user.id.toString(), user.email);\n\n  // Return user without password\n  const { password: _, ...userWithoutPassword } = user;\n\n  return {\n    user: {\n      ...userWithoutPassword,\n      id: userWithoutPassword.id.toString(),\n    } as AuthUser,\n    token,\n  };\n}\n\n/**\n * Check user permissions\n */\nexport async function checkPermissions(\n  user: { role?: string; permissions?: string[] },\n  requiredPermission: string,\n): Promise<boolean> {\n  // Admin has all permissions\n  if (user.role === 'ADMIN') {\n    return true;\n  }\n\n  // Check specific permissions\n  if (user.permissions && Array.isArray(user.permissions)) {\n    return user.permissions.includes(requiredPermission);\n  }\n\n  // Check role-based permissions\n  const rolePermissions: Record<string, string[]> = {\n    USER: ['read'],\n    MODERATOR: ['read', 'write'],\n    ADMIN: ['read', 'write', 'delete', 'admin.access'],\n  };\n\n  const userPermissions = rolePermissions[user.role || ''] || [];\n  return userPermissions.includes(requiredPermission);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "769ce474e6a7167aea5714824d6c9fb1457649b0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jb8p697fe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jb8p697fe();
/**
 * Authentication Service
 * Core authentication and authorization logic
 */
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import logger from '@/logger';
const SALT_ROUNDS =
/* istanbul ignore next */
(cov_jb8p697fe().s[0]++, 10);
const TOKEN_EXPIRY =
/* istanbul ignore next */
(cov_jb8p697fe().s[1]++, '7d');
const PASSWORD_MIN_LENGTH =
/* istanbul ignore next */
(cov_jb8p697fe().s[2]++, 8);
const PASSWORD_REGEX =
/* istanbul ignore next */
(cov_jb8p697fe().s[3]++, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/);
/**
 * Generate JWT token for user
 */
export async function generateAuthToken(userId, email, expiresIn =
/* istanbul ignore next */
(cov_jb8p697fe().b[0][0]++, TOKEN_EXPIRY)) {
  /* istanbul ignore next */
  cov_jb8p697fe().f[0]++;
  const secret =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[4]++, process.env.JWT_SECRET);
  /* istanbul ignore next */
  cov_jb8p697fe().s[5]++;
  if (!secret) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[1][0]++;
    cov_jb8p697fe().s[6]++;
    throw new Error('JWT_SECRET environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[1][1]++;
  }
  const payload =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[7]++, {
    userId,
    email
  });
  /* istanbul ignore next */
  cov_jb8p697fe().s[8]++;
  return jwt.sign(payload, secret, {
    expiresIn
  });
}
/**
 * Hash password with bcrypt
 */
export async function hashPassword(password) {
  /* istanbul ignore next */
  cov_jb8p697fe().f[1]++;
  cov_jb8p697fe().s[9]++;
  return bcrypt.hash(password, SALT_ROUNDS);
}
/**
 * Validate password strength
 */
export async function validatePassword(password) {
  /* istanbul ignore next */
  cov_jb8p697fe().f[2]++;
  cov_jb8p697fe().s[10]++;
  if (password.length < PASSWORD_MIN_LENGTH) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[2][0]++;
    cov_jb8p697fe().s[11]++;
    throw new Error('Password does not meet security requirements');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[2][1]++;
  }
  cov_jb8p697fe().s[12]++;
  if (!PASSWORD_REGEX.test(password)) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[3][0]++;
    cov_jb8p697fe().s[13]++;
    throw new Error('Password does not meet security requirements');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[3][1]++;
  }
  // Check against common passwords
  const commonPasswords =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[14]++, ['password', '123456', 'qwerty']);
  /* istanbul ignore next */
  cov_jb8p697fe().s[15]++;
  if (commonPasswords.includes(password.toLowerCase())) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[4][0]++;
    cov_jb8p697fe().s[16]++;
    throw new Error('Password does not meet security requirements');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[4][1]++;
  }
  cov_jb8p697fe().s[17]++;
  return true;
}
/**
 * Verify JWT token
 */
export async function verifyToken(token) {
  /* istanbul ignore next */
  cov_jb8p697fe().f[3]++;
  const secret =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[18]++, process.env.JWT_SECRET);
  /* istanbul ignore next */
  cov_jb8p697fe().s[19]++;
  if (!secret) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[5][0]++;
    cov_jb8p697fe().s[20]++;
    throw new Error('JWT_SECRET environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[5][1]++;
  }
  cov_jb8p697fe().s[21]++;
  return jwt.verify(token, secret);
}
/**
 * Authenticate user with email and password
 */
export async function authenticate(email, password, prisma) {
  /* istanbul ignore next */
  cov_jb8p697fe().f[4]++;
  // Find user by email
  const user =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[22]++, await prisma.user.findUnique({
    where: {
      email
    }
  }));
  /* istanbul ignore next */
  cov_jb8p697fe().s[23]++;
  if (!user) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[6][0]++;
    cov_jb8p697fe().s[24]++;
    logger.warn(`Failed login attempt for email: ${email}`);
    /* istanbul ignore next */
    cov_jb8p697fe().s[25]++;
    throw new Error('Invalid credentials');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[6][1]++;
  }
  // Compare password
  const isValidPassword =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[26]++, await bcrypt.compare(password, user.password));
  /* istanbul ignore next */
  cov_jb8p697fe().s[27]++;
  if (!isValidPassword) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[7][0]++;
    cov_jb8p697fe().s[28]++;
    logger.warn(`Failed login attempt for user: ${user.id}`);
    /* istanbul ignore next */
    cov_jb8p697fe().s[29]++;
    throw new Error('Invalid credentials');
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[7][1]++;
  }
  // Generate token
  const token =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[30]++, await generateAuthToken(user.id.toString(), user.email));
  // Return user without password
  const {
    password: _,
    ...userWithoutPassword
  } =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[31]++, user);
  /* istanbul ignore next */
  cov_jb8p697fe().s[32]++;
  return {
    user: {
      ...userWithoutPassword,
      id: userWithoutPassword.id.toString()
    },
    token
  };
}
/**
 * Check user permissions
 */
export async function checkPermissions(user, requiredPermission) {
  /* istanbul ignore next */
  cov_jb8p697fe().f[5]++;
  cov_jb8p697fe().s[33]++;
  // Admin has all permissions
  if (user.role === 'ADMIN') {
    /* istanbul ignore next */
    cov_jb8p697fe().b[8][0]++;
    cov_jb8p697fe().s[34]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[8][1]++;
  }
  // Check specific permissions
  cov_jb8p697fe().s[35]++;
  if (
  /* istanbul ignore next */
  (cov_jb8p697fe().b[10][0]++, user.permissions) &&
  /* istanbul ignore next */
  (cov_jb8p697fe().b[10][1]++, Array.isArray(user.permissions))) {
    /* istanbul ignore next */
    cov_jb8p697fe().b[9][0]++;
    cov_jb8p697fe().s[36]++;
    return user.permissions.includes(requiredPermission);
  } else
  /* istanbul ignore next */
  {
    cov_jb8p697fe().b[9][1]++;
  }
  // Check role-based permissions
  const rolePermissions =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[37]++, {
    USER: ['read'],
    MODERATOR: ['read', 'write'],
    ADMIN: ['read', 'write', 'delete', 'admin.access']
  });
  const userPermissions =
  /* istanbul ignore next */
  (cov_jb8p697fe().s[38]++,
  /* istanbul ignore next */
  (cov_jb8p697fe().b[11][0]++, rolePermissions[
  /* istanbul ignore next */
  (cov_jb8p697fe().b[12][0]++, user.role) ||
  /* istanbul ignore next */
  (cov_jb8p697fe().b[12][1]++, '')]) ||
  /* istanbul ignore next */
  (cov_jb8p697fe().b[11][1]++, []));
  /* istanbul ignore next */
  cov_jb8p697fe().s[39]++;
  return userPermissions.includes(requiredPermission);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,