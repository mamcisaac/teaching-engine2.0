{"version":3,"names":["cov_jb8p697fe","actualCoverage","bcrypt","jwt","logger","SALT_ROUNDS","s","TOKEN_EXPIRY","PASSWORD_MIN_LENGTH","PASSWORD_REGEX","generateAuthToken","userId","email","expiresIn","b","f","secret","process","env","JWT_SECRET","Error","payload","sign","hashPassword","password","hash","validatePassword","length","test","commonPasswords","includes","toLowerCase","verifyToken","token","verify","authenticate","prisma","user","findUnique","where","warn","isValidPassword","compare","id","toString","_","userWithoutPassword","checkPermissions","requiredPermission","role","permissions","Array","isArray","rolePermissions","USER","MODERATOR","ADMIN","userPermissions"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/authService.ts"],"sourcesContent":["/**\n * Authentication Service\n * Core authentication and authorization logic\n */\n\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { PrismaClient } from '@teaching-engine/database';\nimport logger from '@/logger';\n\nconst SALT_ROUNDS = 10;\nconst TOKEN_EXPIRY = '7d';\nconst PASSWORD_MIN_LENGTH = 8;\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResult {\n  user: AuthUser;\n  token: string;\n}\n\n/**\n * Generate JWT token for user\n */\nexport async function generateAuthToken(\n  userId: string,\n  email: string,\n  expiresIn: string = TOKEN_EXPIRY,\n): Promise<string> {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required');\n  }\n\n  const payload = { userId, email };\n  return jwt.sign(payload, secret as jwt.Secret, { expiresIn } as jwt.SignOptions);\n}\n\n/**\n * Hash password with bcrypt\n */\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\n/**\n * Validate password strength\n */\nexport async function validatePassword(password: string): Promise<boolean> {\n  if (password.length < PASSWORD_MIN_LENGTH) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  if (!PASSWORD_REGEX.test(password)) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  // Check against common passwords\n  const commonPasswords = ['password', '123456', 'qwerty'];\n  if (commonPasswords.includes(password.toLowerCase())) {\n    throw new Error('Password does not meet security requirements');\n  }\n\n  return true;\n}\n\n/**\n * Verify JWT token\n */\nexport async function verifyToken(token: string): Promise<{ userId: string; email: string }> {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required');\n  }\n\n  return jwt.verify(token, secret) as { userId: string; email: string };\n}\n\n/**\n * Authenticate user with email and password\n */\nexport async function authenticate(\n  email: string,\n  password: string,\n  prisma: PrismaClient,\n): Promise<AuthResult> {\n  // Find user by email\n  const user = await prisma.user.findUnique({\n    where: { email },\n  });\n\n  if (!user) {\n    logger.warn(`Failed login attempt for email: ${email}`);\n    throw new Error('Invalid credentials');\n  }\n\n  // Compare password\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  if (!isValidPassword) {\n    logger.warn(`Failed login attempt for user: ${user.id}`);\n    throw new Error('Invalid credentials');\n  }\n\n  // Generate token\n  const token = await generateAuthToken(user.id.toString(), user.email);\n\n  // Return user without password\n  const { password: _, ...userWithoutPassword } = user;\n\n  return {\n    user: {\n      ...userWithoutPassword,\n      id: userWithoutPassword.id.toString(),\n    } as AuthUser,\n    token,\n  };\n}\n\n/**\n * Check user permissions\n */\nexport async function checkPermissions(\n  user: { role?: string; permissions?: string[] },\n  requiredPermission: string,\n): Promise<boolean> {\n  // Admin has all permissions\n  if (user.role === 'ADMIN') {\n    return true;\n  }\n\n  // Check specific permissions\n  if (user.permissions && Array.isArray(user.permissions)) {\n    return user.permissions.includes(requiredPermission);\n  }\n\n  // Check role-based permissions\n  const rolePermissions: Record<string, string[]> = {\n    USER: ['read'],\n    MODERATOR: ['read', 'write'],\n    ADMIN: ['read', 'write', 'delete', 'admin.access'],\n  };\n\n  const userPermissions = rolePermissions[user.role || ''] || [];\n  return userPermissions.includes(requiredPermission);\n}\n"],"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","ignoreList":[]}