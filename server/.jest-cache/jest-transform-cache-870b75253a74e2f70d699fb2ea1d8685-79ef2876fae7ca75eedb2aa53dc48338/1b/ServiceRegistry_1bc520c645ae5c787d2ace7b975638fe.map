{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/ServiceRegistry.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport logger from '../logger';\n\nexport interface ServiceHealth {\n  serviceName: string;\n  healthy: boolean;\n  lastCheck: Date;\n  details: unknown;\n}\n\nexport interface ServiceRegistration {\n  name: string;\n  instance: BaseService;\n  dependencies: string[];\n  singleton: boolean;\n  healthCheckInterval?: number;\n}\n\nexport class ServiceRegistry {\n  private services = new Map<string, ServiceRegistration>();\n  private healthStatus = new Map<string, ServiceHealth>();\n  private healthCheckIntervals = new Map<string, NodeJS.Timeout>();\n\n  /**\n   * Register a service instance\n   */\n  register(registration: ServiceRegistration): void {\n    if (this.services.has(registration.name)) {\n      logger.warn({ serviceName: registration.name }, 'Service already registered, replacing');\n    }\n\n    this.services.set(registration.name, registration);\n\n    // Start health monitoring if interval specified\n    if (registration.healthCheckInterval) {\n      this.startHealthMonitoring(registration.name, registration.healthCheckInterval);\n    }\n\n    logger.info(\n      {\n        serviceName: registration.name,\n        dependencies: registration.dependencies,\n        singleton: registration.singleton,\n      },\n      'Service registered',\n    );\n  }\n\n  /**\n   * Get a service instance\n   */\n  get<T extends BaseService>(serviceName: string): T | null {\n    const registration = this.services.get(serviceName);\n    if (!registration) {\n      logger.warn({ serviceName }, 'Service not found in registry');\n      return null;\n    }\n\n    return registration.instance as T;\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  has(serviceName: string): boolean {\n    return this.services.has(serviceName);\n  }\n\n  /**\n   * Get all registered services\n   */\n  getAll(): ServiceRegistration[] {\n    return Array.from(this.services.values());\n  }\n\n  /**\n   * Unregister a service\n   */\n  unregister(serviceName: string): boolean {\n    const registration = this.services.get(serviceName);\n    if (!registration) {\n      return false;\n    }\n\n    // Stop health monitoring\n    const interval = this.healthCheckIntervals.get(serviceName);\n    if (interval) {\n      clearInterval(interval);\n      this.healthCheckIntervals.delete(serviceName);\n    }\n\n    this.services.delete(serviceName);\n    this.healthStatus.delete(serviceName);\n\n    logger.info({ serviceName }, 'Service unregistered');\n    return true;\n  }\n\n  /**\n   * Initialize all services in dependency order\n   */\n  async initializeAll(): Promise<{\n    initialized: string[];\n    failed: { serviceName: string; error: string }[];\n  }> {\n    const initialized: string[] = [];\n    const failed: { serviceName: string; error: string }[] = [];\n    const remaining = new Set(this.services.keys());\n\n    // Initialize services in dependency order\n    while (remaining.size > 0) {\n      let progress = false;\n\n      for (const serviceName of remaining) {\n        const registration = this.services.get(serviceName)!;\n\n        // Check if all dependencies are initialized\n        const dependenciesMet = registration.dependencies.every((dep) => initialized.includes(dep));\n\n        if (dependenciesMet) {\n          try {\n            // Services extending BaseService have built-in health checks\n            await registration.instance.healthCheck();\n            initialized.push(serviceName);\n            remaining.delete(serviceName);\n            progress = true;\n\n            logger.info({ serviceName }, 'Service initialized successfully');\n          } catch (error) {\n            failed.push({\n              serviceName,\n              error: error instanceof Error ? error.message : 'Unknown error',\n            });\n            remaining.delete(serviceName);\n            progress = true;\n\n            logger.error({ serviceName, error }, 'Service initialization failed');\n          }\n        }\n      }\n\n      // Detect circular dependencies\n      if (!progress) {\n        const remainingServices = Array.from(remaining);\n        logger.error({ remainingServices }, 'Circular dependency detected or missing dependencies');\n\n        for (const serviceName of remaining) {\n          failed.push({\n            serviceName,\n            error: 'Circular dependency or missing dependencies',\n          });\n        }\n        break;\n      }\n    }\n\n    return { initialized, failed };\n  }\n\n  /**\n   * Get health status of all services\n   */\n  async getHealthStatus(): Promise<ServiceHealth[]> {\n    const healthChecks = Array.from(this.services.values()).map(async (registration) => {\n      try {\n        const health = await registration.instance.healthCheck();\n        const status: ServiceHealth = {\n          serviceName: registration.name,\n          healthy: health.healthy,\n          lastCheck: new Date(),\n          details: health.details,\n        };\n\n        this.healthStatus.set(registration.name, status);\n        return status;\n      } catch (error) {\n        const status: ServiceHealth = {\n          serviceName: registration.name,\n          healthy: false,\n          lastCheck: new Date(),\n          details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        };\n\n        this.healthStatus.set(registration.name, status);\n        return status;\n      }\n    });\n\n    return await Promise.all(healthChecks);\n  }\n\n  /**\n   * Get dependency graph of all services\n   */\n  getDependencyGraph(): {\n    nodes: { id: string; label: string }[];\n    edges: { from: string; to: string }[];\n  } {\n    const nodes = Array.from(this.services.values()).map((reg) => ({\n      id: reg.name,\n      label: reg.name,\n    }));\n\n    const edges: { from: string; to: string }[] = [];\n\n    for (const registration of this.services.values()) {\n      for (const dependency of registration.dependencies) {\n        edges.push({\n          from: dependency,\n          to: registration.name,\n        });\n      }\n    }\n\n    return { nodes, edges };\n  }\n\n  /**\n   * Reset all service metrics\n   */\n  resetAllMetrics(): void {\n    for (const registration of this.services.values()) {\n      registration.instance.resetMetrics();\n    }\n\n    logger.info('All service metrics reset');\n  }\n\n  /**\n   * Get performance metrics for all services\n   */\n  getAllMetrics(): { serviceName: string; metrics: unknown }[] {\n    return Array.from(this.services.values()).map((registration) => ({\n      serviceName: registration.name,\n      metrics: registration.instance.getMetrics(),\n    }));\n  }\n\n  /**\n   * Gracefully shutdown all services\n   */\n  async shutdown(): Promise<void> {\n    logger.info('Starting service registry shutdown');\n\n    // Stop all health check intervals\n    for (const interval of this.healthCheckIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.healthCheckIntervals.clear();\n\n    // Services don't have explicit shutdown methods in BaseService\n    // But we can clear the registry\n    this.services.clear();\n    this.healthStatus.clear();\n\n    logger.info('Service registry shutdown complete');\n  }\n\n  // Private methods\n\n  private startHealthMonitoring(serviceName: string, intervalMs: number): void {\n    const interval = setInterval(async () => {\n      const registration = this.services.get(serviceName);\n      if (!registration) {\n        clearInterval(interval);\n        this.healthCheckIntervals.delete(serviceName);\n        return;\n      }\n\n      try {\n        const health = await registration.instance.healthCheck();\n        const status: ServiceHealth = {\n          serviceName,\n          healthy: health.healthy,\n          lastCheck: new Date(),\n          details: health.details,\n        };\n\n        this.healthStatus.set(serviceName, status);\n\n        if (!health.healthy) {\n          logger.warn({ serviceName, details: health.details }, 'Service health check failed');\n        }\n      } catch (error) {\n        logger.error({ serviceName, error }, 'Health check error');\n\n        this.healthStatus.set(serviceName, {\n          serviceName,\n          healthy: false,\n          lastCheck: new Date(),\n          details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        });\n      }\n    }, intervalMs);\n\n    this.healthCheckIntervals.set(serviceName, interval);\n  }\n}\n\n// Export singleton instance\nexport const serviceRegistry = new ServiceRegistry();\n"],"version":3}