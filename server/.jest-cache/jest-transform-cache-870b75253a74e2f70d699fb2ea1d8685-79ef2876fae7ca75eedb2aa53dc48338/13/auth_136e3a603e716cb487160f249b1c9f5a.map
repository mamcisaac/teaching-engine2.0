{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/auth.ts","mappings":"AACA,OAAO,GAAG,MAAM,cAAc,CAAC;AAQ/B,MAAM,UAAU,cAAc,CAAC,GAAgB,EAAE,GAAa,EAAE,IAAkB;IAChF,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;IACzC,IAAI,CAAC,MAAM;QAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;IACpE,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC5C,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;QACtC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACjE,CAAC;QACD,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAuB,CAAC;QAChE,GAAG,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC;QACtC,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,6CAA6C,EAAE,CAAC;YAC9F,OAAO,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACrD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,4BAA4B,EAAE,CAAC,CAAC;QACvE,CAAC;QACD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAED,gDAAgD;AAChD,MAAM,CAAC,MAAM,IAAI,GAAG,cAAc,CAAC;AAEnC,oDAAoD;AACpD,MAAM,CAAC,MAAM,WAAW,GAAG,cAAc,CAAC;AAE1C,0CAA0C;AAC1C,MAAM,CAAC,MAAM,YAAY,GAAG,cAAc,CAAC;AAE3C,MAAM,UAAU,iBAAiB,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IAC/E,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAEhE,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,gDAAgD;IAChD,IAAI,KAAK,KAAK,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;QACvC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,IAAI,EAAE,CAAC;AACT,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/auth.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nexport interface AuthRequest extends Request {\n  user?: {\n    userId: string;\n  };\n}\n\nexport function authMiddleware(req: AuthRequest, res: Response, next: NextFunction) {\n  const header = req.headers.authorization;\n  if (!header) return res.status(401).json({ error: 'Unauthorized' });\n  const token = header.replace('Bearer ', '');\n  try {\n    const secret = process.env.JWT_SECRET;\n    if (!secret) {\n      throw new Error('JWT_SECRET environment variable is required');\n    }\n    const payload = jwt.verify(token, secret) as { userId: string };\n    req.user = { userId: payload.userId };\n    next();\n  } catch (error) {\n    if (error instanceof Error && error.message === 'JWT_SECRET environment variable is required') {\n      console.error('CRITICAL: JWT_SECRET not configured');\n      return res.status(500).json({ error: 'Server configuration error' });\n    }\n    res.status(401).json({ error: 'Unauthorized' });\n  }\n}\n\n// Export as 'auth' for consistency with service\nexport const auth = authMiddleware;\n\n// Export as requireAuth for consistency with routes\nexport const requireAuth = authMiddleware;\n\n// Export as authenticate for batch routes\nexport const authenticate = authMiddleware;\n\nexport function requireAdminToken(req: Request, res: Response, next: NextFunction) {\n  const token = req.headers.authorization?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Admin token required' });\n  }\n\n  // Check if token matches the admin/wizard token\n  if (token !== process.env.WIZARD_TOKEN) {\n    return res.status(403).json({ error: 'Invalid admin token' });\n  }\n\n  next();\n}\n"],"version":3}