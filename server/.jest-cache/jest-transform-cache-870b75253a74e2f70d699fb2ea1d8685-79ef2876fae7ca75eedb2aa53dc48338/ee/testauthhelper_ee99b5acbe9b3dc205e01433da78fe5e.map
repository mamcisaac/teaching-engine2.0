{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/test-auth-helper.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/test-auth-helper.ts"],"sourcesContent":["import request from 'supertest';\nimport type { Application } from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { getTestPrismaClient } from './jest.setup.js';\n\n/**\n * Helper to create a test user and get authentication token\n */\nexport async function getAuthToken(app: Application, email?: string): Promise<{ token: string; userId: number }> {\n  const prisma = getTestPrismaClient();\n\n  // Generate unique email if not provided\n  const userEmail = email || `test-${Date.now()}-${Math.random().toString(36).substring(7)}@example.com`;\n\n  // Create a test user with hashed password\n  const hashedPassword = await bcrypt.hash('testpassword', 10);\n  const user = await prisma.user.create({\n    data: {\n      email: userEmail,\n      name: 'Test User',\n      password: hashedPassword,\n      role: 'teacher',\n    },\n  });\n\n  // Login to get token\n  const loginResponse = await request(app).post('/api/login').send({\n    email: userEmail,\n    password: 'testpassword',\n  });\n\n  if (loginResponse.status !== 200) {\n    throw new Error(`Login failed: ${loginResponse.status} ${loginResponse.text}`);\n  }\n\n  return { token: loginResponse.body.token, userId: user.id };\n}\n\n/**\n * Helper to make authenticated requests\n */\nexport function authRequest(app: Application) {\n  let token: string | null = null;\n  let userId: number | null = null;\n\n  return {\n    async setup(): Promise<void> {\n      const authData = await getAuthToken(app);\n      token = authData.token;\n      userId = authData.userId;\n    },\n    get userId() {\n      return userId;\n    },\n    get(url: string) {\n      return request(app).get(url).set('Authorization', `Bearer ${token}`);\n    },\n    post(url: string) {\n      return request(app).post(url).set('Authorization', `Bearer ${token}`);\n    },\n    put(url: string) {\n      return request(app).put(url).set('Authorization', `Bearer ${token}`);\n    },\n    delete(url: string) {\n      return request(app).delete(url).set('Authorization', `Bearer ${token}`);\n    },\n    patch(url: string) {\n      return request(app).patch(url).set('Authorization', `Bearer ${token}`);\n    },\n  };\n}\n\n/**\n * Create a test user without going through HTTP\n */\nexport async function createTestUser(email?: string) {\n  const prisma = getTestPrismaClient();\n  \n  // Generate unique email if not provided\n  const userEmail = email || `test-${Date.now()}-${Math.random().toString(36).substring(7)}@example.com`;\n  \n  const hashedPassword = await bcrypt.hash('testpassword', 10);\n  return await prisma.user.create({\n    data: {\n      email: userEmail,\n      name: 'Test User',\n      password: hashedPassword,\n      role: 'teacher',\n    },\n  });\n}\n\n/**\n * Create an auth token for a user ID\n */\nexport function createAuthToken(userId: number, email: string): string {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET environment variable is required for testing');\n  }\n  return jwt.sign({ userId: userId.toString(), email }, secret, { expiresIn: '24h' });\n}\n"],"version":3}