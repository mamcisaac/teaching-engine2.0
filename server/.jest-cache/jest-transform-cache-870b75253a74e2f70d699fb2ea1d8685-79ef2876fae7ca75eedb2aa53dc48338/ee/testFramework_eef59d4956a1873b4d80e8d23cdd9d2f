c9c32f55aa24935c6dbd461a466c7c6c
/**
 * Standardized Test Framework for Teaching Engine 2.0
 *
 * Provides consistent patterns and utilities for all test types:
 * - Unit tests
 * - Integration tests
 * - Performance tests
 *
 * Goals:
 * - Eliminate test flakiness
 * - Improve test isolation
 * - Standardize mocking patterns
 * - Simplify setup/teardown
 */
import { jest } from '@jest/globals';
import { PrismaClient } from '@prisma/client';
import request from 'supertest';
import jwt from 'jsonwebtoken';
import { faker } from '@faker-js/faker';
import { performance } from 'perf_hooks';
// Re-export commonly used testing utilities
export { describe, it, test, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';
export { jest };
/**
 * Base test suite class for consistent test structure
 */
export class TestSuite {
    prisma;
    app;
    testStartTime;
    cleanupFunctions = [];
    /**
     * Setup test environment
     */
    async setup() {
        this.testStartTime = performance.now();
        this.prisma = await this.createPrismaClient();
        this.app = await this.createApp();
        await this.seedData();
    }
    /**
     * Teardown test environment
     */
    async teardown() {
        // Run all cleanup functions in reverse order
        for (const cleanupFn of this.cleanupFunctions.reverse()) {
            await cleanupFn();
        }
        await this.cleanup();
        await this.prisma.$disconnect();
        const duration = performance.now() - this.testStartTime;
        if (duration > 5000) {
            console.warn(`⚠️  Long test duration: ${duration.toFixed(0)}ms`);
        }
    }
    /**
     * Register a cleanup function to be called during teardown
     */
    registerCleanup(fn) {
        this.cleanupFunctions.push(fn);
    }
}
/**
 * Create isolated test context
 */
export async function createIsolatedContext() {
    const testId = faker.string.uuid();
    const prisma = new PrismaClient({
        datasources: {
            db: {
                url: `file:./test-${testId}.db`
            }
        }
    });
    await prisma.$connect();
    const auth = new AuthHelper();
    const factories = new MockFactory(prisma);
    const cleanup = async () => {
        await prisma.$disconnect();
        // Clean up test database file
        const fs = await import('fs/promises');
        try {
            await fs.unlink(`./test-${testId}.db`);
            await fs.unlink(`./test-${testId}.db-journal`);
        }
        catch {
            // Ignore cleanup errors
        }
    };
    return {
        prisma,
        app: null, // Will be set by test
        auth,
        factories,
        cleanup
    };
}
/**
 * Isolated test wrapper for automatic cleanup
 */
export function isolatedTest(name, fn) {
    test(name, async () => {
        const context = await createIsolatedContext();
        try {
            await fn(context);
        }
        finally {
            await context.cleanup();
        }
    });
}
/**
 * Authentication helper for tests
 */
export class AuthHelper {
    defaultSecret = 'test-secret';
    /**
     * Create a valid JWT token
     */
    createToken(userId, options) {
        const secret = process.env.JWT_SECRET || this.defaultSecret;
        return jwt.sign({ userId }, secret, {
            expiresIn: '1h',
            ...options
        });
    }
    /**
     * Create an expired token
     */
    createExpiredToken(userId) {
        return this.createToken(userId, {
            expiresIn: '-1h'
        });
    }
    /**
     * Create authorization header
     */
    createAuthHeader(userId) {
        return {
            Authorization: `Bearer ${this.createToken(userId)}`
        };
    }
    /**
     * Create authenticated request
     */
    authenticatedRequest(app, userId) {
        const token = this.createToken(userId);
        return {
            get: (url) => request(app).get(url).set('Authorization', `Bearer ${token}`),
            post: (url) => request(app).post(url).set('Authorization', `Bearer ${token}`),
            put: (url) => request(app).put(url).set('Authorization', `Bearer ${token}`),
            patch: (url) => request(app).patch(url).set('Authorization', `Bearer ${token}`),
            delete: (url) => request(app).delete(url).set('Authorization', `Bearer ${token}`)
        };
    }
}
/**
 * Mock factory for creating test data
 */
export class MockFactory {
    prisma;
    constructor(prisma) {
        this.prisma = prisma;
    }
    /**
     * Create a test user
     */
    async createUser(overrides) {
        const user = {
            id: faker.string.uuid(),
            email: faker.internet.email(),
            name: faker.person.fullName(),
            password: await this.hashPassword('password123'),
            role: 'TEACHER',
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        };
        return this.prisma.user.create({ data: user });
    }
    /**
     * Create a test student
     */
    async createStudent(userId, overrides) {
        const student = {
            id: faker.string.uuid(),
            name: faker.person.fullName(),
            gradeLevel: faker.helpers.arrayElement(['K', '1', '2', '3', '4', '5', '6']),
            userId,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        };
        return this.prisma.student.create({ data: student });
    }
    /**
     * Create a test curriculum expectation
     */
    async createExpectation(overrides) {
        const expectation = {
            id: faker.string.uuid(),
            code: faker.string.alphanumeric(6).toUpperCase(),
            description: faker.lorem.sentence(),
            subject: faker.helpers.arrayElement(['Math', 'Science', 'English', 'Social Studies']),
            gradeLevel: faker.helpers.arrayElement(['1', '2', '3', '4', '5', '6']),
            strand: faker.lorem.word(),
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        };
        return this.prisma.curriculumExpectation.create({ data: expectation });
    }
    /**
     * Create a test lesson plan
     */
    async createLessonPlan(userId, overrides) {
        const lessonPlan = {
            id: faker.string.uuid(),
            title: faker.lorem.sentence(),
            subject: faker.helpers.arrayElement(['Math', 'Science', 'English', 'Social Studies']),
            gradeLevel: faker.helpers.arrayElement(['1', '2', '3', '4', '5', '6']),
            duration: faker.number.int({ min: 30, max: 120 }),
            date: faker.date.future(),
            userId,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        };
        return this.prisma.lessonPlan.create({ data: lessonPlan });
    }
    /**
     * Hash password for test users
     */
    async hashPassword(password) {
        const bcrypt = await import('bcryptjs');
        return bcrypt.hash(password, 10);
    }
}
/**
 * Performance test utilities
 */
export class PerformanceTestHelper {
    measurements = new Map();
    /**
     * Measure execution time of a function
     */
    async measure(name, fn) {
        const start = performance.now();
        const result = await fn();
        const duration = performance.now() - start;
        if (!this.measurements.has(name)) {
            this.measurements.set(name, []);
        }
        this.measurements.get(name).push(duration);
        return result;
    }
    /**
     * Get performance statistics
     */
    getStats(name) {
        const measurements = this.measurements.get(name);
        if (!measurements || measurements.length === 0) {
            return null;
        }
        const sorted = [...measurements].sort((a, b) => a - b);
        const p95Index = Math.floor(sorted.length * 0.95);
        return {
            count: measurements.length,
            min: Math.min(...measurements),
            max: Math.max(...measurements),
            avg: measurements.reduce((sum, val) => sum + val, 0) / measurements.length,
            p95: sorted[p95Index]
        };
    }
    /**
     * Assert performance threshold
     */
    assertPerformance(name, maxDuration) {
        const stats = this.getStats(name);
        if (!stats) {
            throw new Error(`No measurements found for ${name}`);
        }
        if (stats.p95 > maxDuration) {
            throw new Error(`Performance threshold exceeded for ${name}: ` +
                `p95=${stats.p95.toFixed(0)}ms, max=${maxDuration}ms`);
        }
    }
}
/**
 * Test data builders for complex scenarios
 */
export class TestDataBuilder {
    factories;
    constructor(factories) {
        this.factories = factories;
    }
    /**
     * Build a complete classroom setup
     */
    async buildClassroom(userId, studentCount = 20) {
        const teacher = await this.factories.createUser({ id: userId });
        const students = await Promise.all(Array.from({ length: studentCount }, () => this.factories.createStudent(userId)));
        const subjects = ['Math', 'Science', 'English', 'Social Studies'];
        const expectations = await Promise.all(subjects.flatMap(subject => Array.from({ length: 5 }, () => this.factories.createExpectation({ subject }))));
        return { teacher, students, subjects, expectations };
    }
    /**
     * Build a week of lesson plans
     */
    async buildWeekOfLessons(userId, startDate) {
        const lessons = [];
        const subjects = ['Math', 'Science', 'English', 'Social Studies', 'Art'];
        for (let day = 0; day < 5; day++) {
            const date = new Date(startDate);
            date.setDate(date.getDate() + day);
            for (const subject of subjects) {
                const lesson = await this.factories.createLessonPlan(userId, {
                    subject,
                    date,
                    duration: 45
                });
                lessons.push(lesson);
            }
        }
        return lessons;
    }
}
/**
 * Assertion helpers for common test scenarios
 */
export class AssertionHelpers {
    /**
     * Assert API response structure
     */
    static assertApiResponse(response, expectedStatus, expectedShape) {
        expect(response.status).toBe(expectedStatus);
        if (expectedShape) {
            expect(response.body).toMatchObject(expectedShape);
        }
    }
    /**
     * Assert error response
     */
    static assertErrorResponse(response, expectedStatus, expectedMessage) {
        expect(response.status).toBe(expectedStatus);
        expect(response.body).toHaveProperty('error');
        if (expectedMessage) {
            expect(response.body.error).toContain(expectedMessage);
        }
    }
    /**
     * Assert pagination response
     */
    static assertPaginatedResponse(response, expectedProperties = []) {
        expect(response.body).toHaveProperty('data');
        expect(response.body).toHaveProperty('total');
        expect(response.body).toHaveProperty('page');
        expect(response.body).toHaveProperty('pageSize');
        expect(Array.isArray(response.body.data)).toBe(true);
        if (expectedProperties.length > 0 && response.body.data.length > 0) {
            expectedProperties.forEach(prop => {
                expect(response.body.data[0]).toHaveProperty(prop);
            });
        }
    }
}
/**
 * Wait utilities for async operations
 */
export class WaitUtils {
    /**
     * Wait for a condition to be true
     */
    static async waitFor(condition, timeout = 5000, interval = 100) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            if (await condition()) {
                return;
            }
            await new Promise(resolve => setTimeout(resolve, interval));
        }
        throw new Error(`Timeout waiting for condition after ${timeout}ms`);
    }
    /**
     * Wait for a specific duration
     */
    static async wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL3V0aWxzL3Rlc3RGcmFtZXdvcmsudHMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUVILE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDL0IsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFekMsNENBQTRDO0FBQzVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUVoQjs7R0FFRztBQUNILE1BQU0sT0FBZ0IsU0FBUztJQUNuQixNQUFNLENBQWU7SUFDckIsR0FBRyxDQUFVO0lBQ2IsYUFBYSxDQUFTO0lBQ3RCLGdCQUFnQixHQUErQixFQUFFLENBQUM7SUFFNUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxhQUFhLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM5QyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxRQUFRO1FBQ1os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LE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU3QixPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDeEMsSUFBSSxNQUFNLFNBQVMsRUFBRSxFQUFFLENBQUM7Z0JBQ3RCLE9BQU87WUFDVCxDQUFDO1lBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFVO1FBQzFCLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy91dGlscy90ZXN0RnJhbWV3b3JrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RhbmRhcmRpemVkIFRlc3QgRnJhbWV3b3JrIGZvciBUZWFjaGluZyBFbmdpbmUgMi4wXG4gKiBcbiAqIFByb3ZpZGVzIGNvbnNpc3RlbnQgcGF0dGVybnMgYW5kIHV0aWxpdGllcyBmb3IgYWxsIHRlc3QgdHlwZXM6XG4gKiAtIFVuaXQgdGVzdHNcbiAqIC0gSW50ZWdyYXRpb24gdGVzdHNcbiAqIC0gUGVyZm9ybWFuY2UgdGVzdHNcbiAqIFxuICogR29hbHM6XG4gKiAtIEVsaW1pbmF0ZSB0ZXN0IGZsYWtpbmVzc1xuICogLSBJbXByb3ZlIHRlc3QgaXNvbGF0aW9uXG4gKiAtIFN0YW5kYXJkaXplIG1vY2tpbmcgcGF0dGVybnNcbiAqIC0gU2ltcGxpZnkgc2V0dXAvdGVhcmRvd25cbiAqL1xuXG5pbXBvcnQgeyBqZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5pbXBvcnQgdHlwZSB7IEV4cHJlc3MgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3N1cGVydGVzdCc7XG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5pbXBvcnQgeyBmYWtlciB9IGZyb20gJ0BmYWtlci1qcy9mYWtlcic7XG5pbXBvcnQgeyBwZXJmb3JtYW5jZSB9IGZyb20gJ3BlcmZfaG9va3MnO1xuXG4vLyBSZS1leHBvcnQgY29tbW9ubHkgdXNlZCB0ZXN0aW5nIHV0aWxpdGllc1xuZXhwb3J0IHsgZGVzY3JpYmUsIGl0LCB0ZXN0LCBleHBlY3QsIGJlZm9yZUVhY2gsIGFmdGVyRWFjaCwgYmVmb3JlQWxsLCBhZnRlckFsbCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuZXhwb3J0IHsgamVzdCB9O1xuXG4vKipcbiAqIEJhc2UgdGVzdCBzdWl0ZSBjbGFzcyBmb3IgY29uc2lzdGVudCB0ZXN0IHN0cnVjdHVyZVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVzdFN1aXRlIHtcbiAgcHJvdGVjdGVkIHByaXNtYTogUHJpc21hQ2xpZW50O1xuICBwcm90ZWN0ZWQgYXBwOiBFeHByZXNzO1xuICBwcm90ZWN0ZWQgdGVzdFN0YXJ0VGltZTogbnVtYmVyO1xuICBwcm90ZWN0ZWQgY2xlYW51cEZ1bmN0aW9uczogQXJyYXk8KCkgPT4gUHJvbWlzZTx2b2lkPj4gPSBbXTtcblxuICAvKipcbiAgICogU2V0dXAgdGVzdCBlbnZpcm9ubWVudFxuICAgKi9cbiAgYXN5bmMgc2V0dXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy50ZXN0U3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgdGhpcy5wcmlzbWEgPSBhd2FpdCB0aGlzLmNyZWF0ZVByaXNtYUNsaWVudCgpO1xuICAgIHRoaXMuYXBwID0gYXdhaXQgdGhpcy5jcmVhdGVBcHAoKTtcbiAgICBhd2FpdCB0aGlzLnNlZWREYXRhKCk7XG4gIH1cblxuICAvKipcbiAgICogVGVhcmRvd24gdGVzdCBlbnZpcm9ubWVudFxuICAgKi9cbiAgYXN5bmMgdGVhcmRvd24oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gUnVuIGFsbCBjbGVhbnVwIGZ1bmN0aW9ucyBpbiByZXZlcnNlIG9yZGVyXG4gICAgZm9yIChjb25zdCBjbGVhbnVwRm4gb2YgdGhpcy5jbGVhbnVwRnVuY3Rpb25zLnJldmVyc2UoKSkge1xuICAgICAgYXdhaXQgY2xlYW51cEZuKCk7XG4gICAgfVxuICAgIFxuICAgIGF3YWl0IHRoaXMuY2xlYW51cCgpO1xuICAgIGF3YWl0IHRoaXMucHJpc21hLiRkaXNjb25uZWN0KCk7XG4gICAgXG4gICAgY29uc3QgZHVyYXRpb24gPSBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMudGVzdFN0YXJ0VGltZTtcbiAgICBpZiAoZHVyYXRpb24gPiA1MDAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyAgTG9uZyB0ZXN0IGR1cmF0aW9uOiAke2R1cmF0aW9uLnRvRml4ZWQoMCl9bXNgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjbGVhbnVwIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBkdXJpbmcgdGVhcmRvd25cbiAgICovXG4gIHByb3RlY3RlZCByZWdpc3RlckNsZWFudXAoZm46ICgpID0+IFByb21pc2U8dm9pZD4pOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFudXBGdW5jdGlvbnMucHVzaChmbik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGlzb2xhdGVkIFByaXNtYSBjbGllbnQgZm9yIHRlc3RpbmdcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVQcmlzbWFDbGllbnQoKTogUHJvbWlzZTxQcmlzbWFDbGllbnQ+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGVzdCBhcHBsaWNhdGlvbiBpbnN0YW5jZVxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZUFwcCgpOiBQcm9taXNlPEV4cHJlc3M+O1xuXG4gIC8qKlxuICAgKiBTZWVkIGluaXRpYWwgdGVzdCBkYXRhXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2VlZERhdGEoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2xlYW4gdXAgdGVzdCBkYXRhXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgY2xlYW51cCgpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4vKipcbiAqIFRlc3QgY29udGV4dCBmb3IgaXNvbGF0ZWQgdGVzdCBleGVjdXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXN0Q29udGV4dCB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50O1xuICBhcHA6IEV4cHJlc3M7XG4gIGF1dGg6IEF1dGhIZWxwZXI7XG4gIGZhY3RvcmllczogTW9ja0ZhY3Rvcnk7XG4gIGNsZWFudXA6ICgpID0+IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICogQ3JlYXRlIGlzb2xhdGVkIHRlc3QgY29udGV4dFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlSXNvbGF0ZWRDb250ZXh0KCk6IFByb21pc2U8VGVzdENvbnRleHQ+IHtcbiAgY29uc3QgdGVzdElkID0gZmFrZXIuc3RyaW5nLnV1aWQoKTtcbiAgY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCh7XG4gICAgZGF0YXNvdXJjZXM6IHtcbiAgICAgIGRiOiB7XG4gICAgICAgIHVybDogYGZpbGU6Li90ZXN0LSR7dGVzdElkfS5kYmBcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGF3YWl0IHByaXNtYS4kY29ubmVjdCgpO1xuXG4gIGNvbnN0IGF1dGggPSBuZXcgQXV0aEhlbHBlcigpO1xuICBjb25zdCBmYWN0b3JpZXMgPSBuZXcgTW9ja0ZhY3RvcnkocHJpc21hKTtcbiAgXG4gIGNvbnN0IGNsZWFudXAgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgcHJpc21hLiRkaXNjb25uZWN0KCk7XG4gICAgLy8gQ2xlYW4gdXAgdGVzdCBkYXRhYmFzZSBmaWxlXG4gICAgY29uc3QgZnMgPSBhd2FpdCBpbXBvcnQoJ2ZzL3Byb21pc2VzJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZzLnVubGluayhgLi90ZXN0LSR7dGVzdElkfS5kYmApO1xuICAgICAgYXdhaXQgZnMudW5saW5rKGAuL3Rlc3QtJHt0ZXN0SWR9LmRiLWpvdXJuYWxgKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIElnbm9yZSBjbGVhbnVwIGVycm9yc1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHByaXNtYSxcbiAgICBhcHA6IG51bGwgYXMgYW55LCAvLyBXaWxsIGJlIHNldCBieSB0ZXN0XG4gICAgYXV0aCxcbiAgICBmYWN0b3JpZXMsXG4gICAgY2xlYW51cFxuICB9O1xufVxuXG4vKipcbiAqIElzb2xhdGVkIHRlc3Qgd3JhcHBlciBmb3IgYXV0b21hdGljIGNsZWFudXBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzb2xhdGVkVGVzdChcbiAgbmFtZTogc3RyaW5nLFxuICBmbjogKGNvbnRleHQ6IFRlc3RDb250ZXh0KSA9PiBQcm9taXNlPHZvaWQ+XG4pOiB2b2lkIHtcbiAgdGVzdChuYW1lLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGF3YWl0IGNyZWF0ZUlzb2xhdGVkQ29udGV4dCgpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmbihjb250ZXh0KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYXdhaXQgY29udGV4dC5jbGVhbnVwKCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBBdXRoZW50aWNhdGlvbiBoZWxwZXIgZm9yIHRlc3RzXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoSGVscGVyIHtcbiAgcHJpdmF0ZSBkZWZhdWx0U2VjcmV0ID0gJ3Rlc3Qtc2VjcmV0JztcblxuICAvKipcbiAgICogQ3JlYXRlIGEgdmFsaWQgSldUIHRva2VuXG4gICAqL1xuICBjcmVhdGVUb2tlbih1c2VySWQ6IHN0cmluZywgb3B0aW9ucz86IGp3dC5TaWduT3B0aW9ucyk6IHN0cmluZyB7XG4gICAgY29uc3Qgc2VjcmV0ID0gcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCB0aGlzLmRlZmF1bHRTZWNyZXQ7XG4gICAgcmV0dXJuIGp3dC5zaWduKHsgdXNlcklkIH0sIHNlY3JldCwge1xuICAgICAgZXhwaXJlc0luOiAnMWgnLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBleHBpcmVkIHRva2VuXG4gICAqL1xuICBjcmVhdGVFeHBpcmVkVG9rZW4odXNlcklkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVRva2VuKHVzZXJJZCwge1xuICAgICAgZXhwaXJlc0luOiAnLTFoJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhdXRob3JpemF0aW9uIGhlYWRlclxuICAgKi9cbiAgY3JlYXRlQXV0aEhlYWRlcih1c2VySWQ6IHN0cmluZyk6IHsgQXV0aG9yaXphdGlvbjogc3RyaW5nIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVhdGVUb2tlbih1c2VySWQpfWBcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhdXRoZW50aWNhdGVkIHJlcXVlc3RcbiAgICovXG4gIGF1dGhlbnRpY2F0ZWRSZXF1ZXN0KGFwcDogRXhwcmVzcywgdXNlcklkOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3JlYXRlVG9rZW4odXNlcklkKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0OiAodXJsOiBzdHJpbmcpID0+IHJlcXVlc3QoYXBwKS5nZXQodXJsKS5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YCksXG4gICAgICBwb3N0OiAodXJsOiBzdHJpbmcpID0+IHJlcXVlc3QoYXBwKS5wb3N0KHVybCkuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApLFxuICAgICAgcHV0OiAodXJsOiBzdHJpbmcpID0+IHJlcXVlc3QoYXBwKS5wdXQodXJsKS5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YCksXG4gICAgICBwYXRjaDogKHVybDogc3RyaW5nKSA9PiByZXF1ZXN0KGFwcCkucGF0Y2godXJsKS5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YCksXG4gICAgICBkZWxldGU6ICh1cmw6IHN0cmluZykgPT4gcmVxdWVzdChhcHApLmRlbGV0ZSh1cmwpLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBNb2NrIGZhY3RvcnkgZm9yIGNyZWF0aW5nIHRlc3QgZGF0YVxuICovXG5leHBvcnQgY2xhc3MgTW9ja0ZhY3Rvcnkge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHByaXNtYTogUHJpc21hQ2xpZW50KSB7fVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB0ZXN0IHVzZXJcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVVzZXIob3ZlcnJpZGVzPzogUGFydGlhbDxhbnk+KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB1c2VyID0ge1xuICAgICAgaWQ6IGZha2VyLnN0cmluZy51dWlkKCksXG4gICAgICBlbWFpbDogZmFrZXIuaW50ZXJuZXQuZW1haWwoKSxcbiAgICAgIG5hbWU6IGZha2VyLnBlcnNvbi5mdWxsTmFtZSgpLFxuICAgICAgcGFzc3dvcmQ6IGF3YWl0IHRoaXMuaGFzaFBhc3N3b3JkKCdwYXNzd29yZDEyMycpLFxuICAgICAgcm9sZTogJ1RFQUNIRVInLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLnByaXNtYS51c2VyLmNyZWF0ZSh7IGRhdGE6IHVzZXIgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGVzdCBzdHVkZW50XG4gICAqL1xuICBhc3luYyBjcmVhdGVTdHVkZW50KHVzZXJJZDogc3RyaW5nLCBvdmVycmlkZXM/OiBQYXJ0aWFsPGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHN0dWRlbnQgPSB7XG4gICAgICBpZDogZmFrZXIuc3RyaW5nLnV1aWQoKSxcbiAgICAgIG5hbWU6IGZha2VyLnBlcnNvbi5mdWxsTmFtZSgpLFxuICAgICAgZ3JhZGVMZXZlbDogZmFrZXIuaGVscGVycy5hcnJheUVsZW1lbnQoWydLJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2J10pLFxuICAgICAgdXNlcklkLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLnByaXNtYS5zdHVkZW50LmNyZWF0ZSh7IGRhdGE6IHN0dWRlbnQgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGVzdCBjdXJyaWN1bHVtIGV4cGVjdGF0aW9uXG4gICAqL1xuICBhc3luYyBjcmVhdGVFeHBlY3RhdGlvbihvdmVycmlkZXM/OiBQYXJ0aWFsPGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IGV4cGVjdGF0aW9uID0ge1xuICAgICAgaWQ6IGZha2VyLnN0cmluZy51dWlkKCksXG4gICAgICBjb2RlOiBmYWtlci5zdHJpbmcuYWxwaGFudW1lcmljKDYpLnRvVXBwZXJDYXNlKCksXG4gICAgICBkZXNjcmlwdGlvbjogZmFrZXIubG9yZW0uc2VudGVuY2UoKSxcbiAgICAgIHN1YmplY3Q6IGZha2VyLmhlbHBlcnMuYXJyYXlFbGVtZW50KFsnTWF0aCcsICdTY2llbmNlJywgJ0VuZ2xpc2gnLCAnU29jaWFsIFN0dWRpZXMnXSksXG4gICAgICBncmFkZUxldmVsOiBmYWtlci5oZWxwZXJzLmFycmF5RWxlbWVudChbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2J10pLFxuICAgICAgc3RyYW5kOiBmYWtlci5sb3JlbS53b3JkKCksXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAuLi5vdmVycmlkZXNcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMucHJpc21hLmN1cnJpY3VsdW1FeHBlY3RhdGlvbi5jcmVhdGUoeyBkYXRhOiBleHBlY3RhdGlvbiB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB0ZXN0IGxlc3NvbiBwbGFuXG4gICAqL1xuICBhc3luYyBjcmVhdGVMZXNzb25QbGFuKHVzZXJJZDogc3RyaW5nLCBvdmVycmlkZXM/OiBQYXJ0aWFsPGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IGxlc3NvblBsYW4gPSB7XG4gICAgICBpZDogZmFrZXIuc3RyaW5nLnV1aWQoKSxcbiAgICAgIHRpdGxlOiBmYWtlci5sb3JlbS5zZW50ZW5jZSgpLFxuICAgICAgc3ViamVjdDogZmFrZXIuaGVscGVycy5hcnJheUVsZW1lbnQoWydNYXRoJywgJ1NjaWVuY2UnLCAnRW5nbGlzaCcsICdTb2NpYWwgU3R1ZGllcyddKSxcbiAgICAgIGdyYWRlTGV2ZWw6IGZha2VyLmhlbHBlcnMuYXJyYXlFbGVtZW50KFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnXSksXG4gICAgICBkdXJhdGlvbjogZmFrZXIubnVtYmVyLmludCh7IG1pbjogMzAsIG1heDogMTIwIH0pLFxuICAgICAgZGF0ZTogZmFrZXIuZGF0ZS5mdXR1cmUoKSxcbiAgICAgIHVzZXJJZCxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIC4uLm92ZXJyaWRlc1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5wcmlzbWEubGVzc29uUGxhbi5jcmVhdGUoeyBkYXRhOiBsZXNzb25QbGFuIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhc2ggcGFzc3dvcmQgZm9yIHRlc3QgdXNlcnNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFzaFBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGJjcnlwdCA9IGF3YWl0IGltcG9ydCgnYmNyeXB0anMnKTtcbiAgICByZXR1cm4gYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1hbmNlIHRlc3QgdXRpbGl0aWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBQZXJmb3JtYW5jZVRlc3RIZWxwZXIge1xuICBwcml2YXRlIG1lYXN1cmVtZW50czogTWFwPHN0cmluZywgbnVtYmVyW10+ID0gbmV3IE1hcCgpO1xuXG4gIC8qKlxuICAgKiBNZWFzdXJlIGV4ZWN1dGlvbiB0aW1lIG9mIGEgZnVuY3Rpb25cbiAgICovXG4gIGFzeW5jIG1lYXN1cmU8VD4obmFtZTogc3RyaW5nLCBmbjogKCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQ7XG5cbiAgICBpZiAoIXRoaXMubWVhc3VyZW1lbnRzLmhhcyhuYW1lKSkge1xuICAgICAgdGhpcy5tZWFzdXJlbWVudHMuc2V0KG5hbWUsIFtdKTtcbiAgICB9XG4gICAgdGhpcy5tZWFzdXJlbWVudHMuZ2V0KG5hbWUpIS5wdXNoKGR1cmF0aW9uKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBlcmZvcm1hbmNlIHN0YXRpc3RpY3NcbiAgICovXG4gIGdldFN0YXRzKG5hbWU6IHN0cmluZyk6IHtcbiAgICBjb3VudDogbnVtYmVyO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIGF2ZzogbnVtYmVyO1xuICAgIHA5NTogbnVtYmVyO1xuICB9IHwgbnVsbCB7XG4gICAgY29uc3QgbWVhc3VyZW1lbnRzID0gdGhpcy5tZWFzdXJlbWVudHMuZ2V0KG5hbWUpO1xuICAgIGlmICghbWVhc3VyZW1lbnRzIHx8IG1lYXN1cmVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHNvcnRlZCA9IFsuLi5tZWFzdXJlbWVudHNdLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICBjb25zdCBwOTVJbmRleCA9IE1hdGguZmxvb3Ioc29ydGVkLmxlbmd0aCAqIDAuOTUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiBtZWFzdXJlbWVudHMubGVuZ3RoLFxuICAgICAgbWluOiBNYXRoLm1pbiguLi5tZWFzdXJlbWVudHMpLFxuICAgICAgbWF4OiBNYXRoLm1heCguLi5tZWFzdXJlbWVudHMpLFxuICAgICAgYXZnOiBtZWFzdXJlbWVudHMucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSAvIG1lYXN1cmVtZW50cy5sZW5ndGgsXG4gICAgICBwOTU6IHNvcnRlZFtwOTVJbmRleF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCBwZXJmb3JtYW5jZSB0aHJlc2hvbGRcbiAgICovXG4gIGFzc2VydFBlcmZvcm1hbmNlKG5hbWU6IHN0cmluZywgbWF4RHVyYXRpb246IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHN0YXRzID0gdGhpcy5nZXRTdGF0cyhuYW1lKTtcbiAgICBpZiAoIXN0YXRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1lYXN1cmVtZW50cyBmb3VuZCBmb3IgJHtuYW1lfWApO1xuICAgIH1cblxuICAgIGlmIChzdGF0cy5wOTUgPiBtYXhEdXJhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgUGVyZm9ybWFuY2UgdGhyZXNob2xkIGV4Y2VlZGVkIGZvciAke25hbWV9OiBgICtcbiAgICAgICAgYHA5NT0ke3N0YXRzLnA5NS50b0ZpeGVkKDApfW1zLCBtYXg9JHttYXhEdXJhdGlvbn1tc2BcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGVzdCBkYXRhIGJ1aWxkZXJzIGZvciBjb21wbGV4IHNjZW5hcmlvc1xuICovXG5leHBvcnQgY2xhc3MgVGVzdERhdGFCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmYWN0b3JpZXM6IE1vY2tGYWN0b3J5KSB7fVxuXG4gIC8qKlxuICAgKiBCdWlsZCBhIGNvbXBsZXRlIGNsYXNzcm9vbSBzZXR1cFxuICAgKi9cbiAgYXN5bmMgYnVpbGRDbGFzc3Jvb20odXNlcklkOiBzdHJpbmcsIHN0dWRlbnRDb3VudDogbnVtYmVyID0gMjApOiBQcm9taXNlPHtcbiAgICB0ZWFjaGVyOiBhbnk7XG4gICAgc3R1ZGVudHM6IGFueVtdO1xuICAgIHN1YmplY3RzOiBhbnlbXTtcbiAgICBleHBlY3RhdGlvbnM6IGFueVtdO1xuICB9PiB7XG4gICAgY29uc3QgdGVhY2hlciA9IGF3YWl0IHRoaXMuZmFjdG9yaWVzLmNyZWF0ZVVzZXIoeyBpZDogdXNlcklkIH0pO1xuICAgIFxuICAgIGNvbnN0IHN0dWRlbnRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBBcnJheS5mcm9tKHsgbGVuZ3RoOiBzdHVkZW50Q291bnQgfSwgKCkgPT5cbiAgICAgICAgdGhpcy5mYWN0b3JpZXMuY3JlYXRlU3R1ZGVudCh1c2VySWQpXG4gICAgICApXG4gICAgKTtcblxuICAgIGNvbnN0IHN1YmplY3RzID0gWydNYXRoJywgJ1NjaWVuY2UnLCAnRW5nbGlzaCcsICdTb2NpYWwgU3R1ZGllcyddO1xuICAgIFxuICAgIGNvbnN0IGV4cGVjdGF0aW9ucyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgc3ViamVjdHMuZmxhdE1hcChzdWJqZWN0ID0+XG4gICAgICAgIEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKCkgPT5cbiAgICAgICAgICB0aGlzLmZhY3Rvcmllcy5jcmVhdGVFeHBlY3RhdGlvbih7IHN1YmplY3QgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG5cbiAgICByZXR1cm4geyB0ZWFjaGVyLCBzdHVkZW50cywgc3ViamVjdHMsIGV4cGVjdGF0aW9ucyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGEgd2VlayBvZiBsZXNzb24gcGxhbnNcbiAgICovXG4gIGFzeW5jIGJ1aWxkV2Vla09mTGVzc29ucyh1c2VySWQ6IHN0cmluZywgc3RhcnREYXRlOiBEYXRlKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGNvbnN0IGxlc3NvbnMgPSBbXTtcbiAgICBjb25zdCBzdWJqZWN0cyA9IFsnTWF0aCcsICdTY2llbmNlJywgJ0VuZ2xpc2gnLCAnU29jaWFsIFN0dWRpZXMnLCAnQXJ0J107XG5cbiAgICBmb3IgKGxldCBkYXkgPSAwOyBkYXkgPCA1OyBkYXkrKykge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBkYXkpO1xuXG4gICAgICBmb3IgKGNvbnN0IHN1YmplY3Qgb2Ygc3ViamVjdHMpIHtcbiAgICAgICAgY29uc3QgbGVzc29uID0gYXdhaXQgdGhpcy5mYWN0b3JpZXMuY3JlYXRlTGVzc29uUGxhbih1c2VySWQsIHtcbiAgICAgICAgICBzdWJqZWN0LFxuICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgZHVyYXRpb246IDQ1XG4gICAgICAgIH0pO1xuICAgICAgICBsZXNzb25zLnB1c2gobGVzc29uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGVzc29ucztcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydGlvbiBoZWxwZXJzIGZvciBjb21tb24gdGVzdCBzY2VuYXJpb3NcbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2VydGlvbkhlbHBlcnMge1xuICAvKipcbiAgICogQXNzZXJ0IEFQSSByZXNwb25zZSBzdHJ1Y3R1cmVcbiAgICovXG4gIHN0YXRpYyBhc3NlcnRBcGlSZXNwb25zZShyZXNwb25zZTogYW55LCBleHBlY3RlZFN0YXR1czogbnVtYmVyLCBleHBlY3RlZFNoYXBlPzogb2JqZWN0KTogdm9pZCB7XG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZShleHBlY3RlZFN0YXR1cyk7XG4gICAgXG4gICAgaWYgKGV4cGVjdGVkU2hhcGUpIHtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b01hdGNoT2JqZWN0KGV4cGVjdGVkU2hhcGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NlcnQgZXJyb3IgcmVzcG9uc2VcbiAgICovXG4gIHN0YXRpYyBhc3NlcnRFcnJvclJlc3BvbnNlKHJlc3BvbnNlOiBhbnksIGV4cGVjdGVkU3RhdHVzOiBudW1iZXIsIGV4cGVjdGVkTWVzc2FnZT86IHN0cmluZyk6IHZvaWQge1xuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoZXhwZWN0ZWRTdGF0dXMpO1xuICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3InKTtcbiAgICBcbiAgICBpZiAoZXhwZWN0ZWRNZXNzYWdlKSB7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG9Db250YWluKGV4cGVjdGVkTWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCBwYWdpbmF0aW9uIHJlc3BvbnNlXG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0UGFnaW5hdGVkUmVzcG9uc2UocmVzcG9uc2U6IGFueSwgZXhwZWN0ZWRQcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IFtdKTogdm9pZCB7XG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdkYXRhJyk7XG4gICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCd0b3RhbCcpO1xuICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgncGFnZScpO1xuICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgncGFnZVNpemUnKTtcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXNwb25zZS5ib2R5LmRhdGEpKS50b0JlKHRydWUpO1xuXG4gICAgaWYgKGV4cGVjdGVkUHJvcGVydGllcy5sZW5ndGggPiAwICYmIHJlc3BvbnNlLmJvZHkuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICBleHBlY3RlZFByb3BlcnRpZXMuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YVswXSkudG9IYXZlUHJvcGVydHkocHJvcCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBXYWl0IHV0aWxpdGllcyBmb3IgYXN5bmMgb3BlcmF0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgV2FpdFV0aWxzIHtcbiAgLyoqXG4gICAqIFdhaXQgZm9yIGEgY29uZGl0aW9uIHRvIGJlIHRydWVcbiAgICovXG4gIHN0YXRpYyBhc3luYyB3YWl0Rm9yKFxuICAgIGNvbmRpdGlvbjogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgdGltZW91dDogbnVtYmVyID0gNTAwMCxcbiAgICBpbnRlcnZhbDogbnVtYmVyID0gMTAwXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgXG4gICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCB0aW1lb3V0KSB7XG4gICAgICBpZiAoYXdhaXQgY29uZGl0aW9uKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGludGVydmFsKSk7XG4gICAgfVxuICAgIFxuICAgIHRocm93IG5ldyBFcnJvcihgVGltZW91dCB3YWl0aW5nIGZvciBjb25kaXRpb24gYWZ0ZXIgJHt0aW1lb3V0fW1zYCk7XG4gIH1cblxuICAvKipcbiAgICogV2FpdCBmb3IgYSBzcGVjaWZpYyBkdXJhdGlvblxuICAgKi9cbiAgc3RhdGljIGFzeW5jIHdhaXQobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbiAgfVxufVxuXG4vLyBFeHBvcnQgYWxsIHV0aWxpdGllc1xuZXhwb3J0IHtcbiAgaXNvbGF0ZWRUZXN0LFxuICBjcmVhdGVJc29sYXRlZENvbnRleHQsXG4gIEF1dGhIZWxwZXIsXG4gIE1vY2tGYWN0b3J5LFxuICBQZXJmb3JtYW5jZVRlc3RIZWxwZXIsXG4gIFRlc3REYXRhQnVpbGRlcixcbiAgQXNzZXJ0aW9uSGVscGVycyxcbiAgV2FpdFV0aWxzXG59OyJdLCJ2ZXJzaW9uIjozfQ==