{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/helpers/testEmailService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/helpers/testEmailService.ts"],"sourcesContent":["import * as nodemailer from 'nodemailer';\nimport { EmailAttachment } from '../../src/services/emailService';\nimport { createEmailTestProvider, TestEmailProvider, InMemoryTestProvider } from './emailTestHelper';\n\nexport class TestEmailService {\n  private transporter: nodemailer.Transporter | null = null;\n  private testProvider: TestEmailProvider;\n\n  constructor() {\n    this.testProvider = createEmailTestProvider();\n    this.setupTransporter();\n  }\n\n  private setupTransporter() {\n    if (this.testProvider instanceof InMemoryTestProvider) {\n      // For in-memory provider, we'll intercept the send calls\n      this.transporter = nodemailer.createTransport({\n        streamTransport: true,\n        newline: 'unix',\n        buffer: true,\n      });\n    } else {\n      // For MailHog, use real SMTP\n      this.transporter = nodemailer.createTransport({\n        host: this.testProvider.host,\n        port: this.testProvider.port,\n        secure: false,\n        auth: this.testProvider.user ? {\n          user: this.testProvider.user,\n          pass: this.testProvider.pass,\n        } : undefined,\n      });\n    }\n  }\n\n  async sendEmail(\n    to: string,\n    subject: string,\n    text: string,\n    html?: string,\n    attachment?: EmailAttachment\n  ): Promise<void> {\n    if (!this.transporter) {\n      throw new Error('Email transporter not configured');\n    }\n\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(to)) {\n      throw new Error(`Invalid email address: ${to}`);\n    }\n\n    if (this.testProvider instanceof InMemoryTestProvider) {\n      // For in-memory testing, add directly to provider\n      this.testProvider.addEmail({\n        from: process.env.EMAIL_FROM || 'no-reply@example.com',\n        to: [to],\n        subject,\n        text,\n        html,\n        attachments: attachment ? [{\n          filename: attachment.filename,\n          content: attachment.content,\n          contentType: 'application/pdf',\n        }] : undefined,\n      });\n    } else {\n      // For MailHog, send via SMTP\n      await this.transporter.sendMail({\n        from: process.env.EMAIL_FROM || 'no-reply@example.com',\n        to,\n        subject,\n        text,\n        html,\n        attachments: attachment ? [attachment] : undefined,\n      });\n    }\n  }\n\n  async sendBulkEmails(\n    recipients: string[],\n    subject: string,\n    text: string,\n    attachment?: EmailAttachment\n  ): Promise<{ sent: number; failed: string[] }> {\n    const failed: string[] = [];\n    let sent = 0;\n\n    for (const recipient of recipients) {\n      try {\n        await this.sendEmail(recipient, subject, text, undefined, attachment);\n        sent++;\n      } catch (error) {\n        console.error(`Failed to send email to ${recipient}:`, error);\n        failed.push(recipient);\n      }\n    }\n\n    return { sent, failed };\n  }\n\n  async sendEmailWithRetry(\n    to: string,\n    subject: string,\n    text: string,\n    attachment?: EmailAttachment,\n    maxRetries = 3,\n    retryDelay = 1000\n  ): Promise<void> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        await this.sendEmail(to, subject, text, undefined, attachment);\n        return; // Success\n      } catch (error) {\n        lastError = error as Error;\n        console.warn(`Email send attempt ${attempt} failed:`, error);\n        \n        if (attempt < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, retryDelay * attempt));\n        }\n      }\n    }\n\n    throw new Error(`Failed to send email after ${maxRetries} attempts: ${lastError?.message}`);\n  }\n\n  // Test helper methods\n  async getTestProvider(): Promise<TestEmailProvider> {\n    return this.testProvider;\n  }\n\n  async clearEmails(): Promise<void> {\n    await this.testProvider.clearEmails();\n  }\n\n  async waitForEmail(to: string, timeout?: number) {\n    return this.testProvider.waitForEmail(to, timeout);\n  }\n\n  async getEmails() {\n    return this.testProvider.getEmails();\n  }\n\n  async close(): Promise<void> {\n    if (this.transporter) {\n      this.transporter.close();\n    }\n  }\n}\n\n// Global instance for tests\nlet testEmailService: TestEmailService | null = null;\n\nexport function getTestEmailService(): TestEmailService {\n  if (!testEmailService) {\n    testEmailService = new TestEmailService();\n  }\n  return testEmailService;\n}\n\nexport async function resetTestEmailService(): Promise<void> {\n  if (testEmailService) {\n    await testEmailService.clearEmails();\n    await testEmailService.close();\n    testEmailService = null;\n  }\n}"],"version":3}