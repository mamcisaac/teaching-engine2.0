{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/etfo-progress.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/etfo-progress.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { prisma } from '../prisma';\n\n\nconst router = Router();\n\n/**\n * GET /api/etfo/progress\n * Get ETFO planning progress across all 5 levels\n */\nrouter.get('/progress', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n    \n    const userId = req.user.id;\n\n    // Get curriculum expectations progress\n    const totalExpectations = await prisma.curriculumExpectation.count({\n      where: { \n        import: { userId }\n      }\n    });\n    \n    const importedExpectations = totalExpectations; // All expectations are imported by definition\n\n    // Get long-range plans progress  \n    const totalLongRangePlans = await prisma.longRangePlan.count({\n      where: { userId }\n    });\n    \n    const completedLongRangePlans = await prisma.longRangePlan.count({\n      where: { \n        userId,\n        // Consider completed if they have goals\n        goals: { not: null }\n      }\n    });\n\n    // Get unit plans progress\n    const totalUnitPlans = await prisma.unitPlan.count({\n      where: { userId }\n    });\n    \n    const completedUnitPlans = await prisma.unitPlan.count({\n      where: { \n        userId,\n        // Consider completed if they have big ideas\n        bigIdeas: { not: null }\n      }\n    });\n\n    // Get lesson plans progress\n    const totalLessonPlans = await prisma.eTFOLessonPlan.count({\n      where: { userId }\n    });\n    \n    const completedLessonPlans = await prisma.eTFOLessonPlan.count({\n      where: { \n        userId,\n        // Consider completed if they have learning goals\n        learningGoals: { not: null }\n      }\n    });\n\n    // Get daybook entries progress\n    const totalDaybookEntries = await prisma.daybookEntry.count({\n      where: { userId }\n    });\n    \n    const completedDaybookEntries = await prisma.daybookEntry.count({\n      where: { \n        userId,\n        // Consider completed if they have reflections\n        whatWorked: { not: null }\n      }\n    });\n\n    const progressData = {\n      curriculumExpectations: {\n        total: Math.max(totalExpectations, 1), // Ensure at least 1 to avoid division by zero\n        imported: importedExpectations,\n        covered: importedExpectations // For now, imported = covered\n      },\n      longRangePlans: {\n        total: totalLongRangePlans,\n        completed: completedLongRangePlans\n      },\n      unitPlans: {\n        total: totalUnitPlans,\n        completed: completedUnitPlans\n      },\n      lessonPlans: {\n        total: totalLessonPlans,\n        completed: completedLessonPlans\n      },\n      daybookEntries: {\n        total: totalDaybookEntries,\n        completed: completedDaybookEntries\n      }\n    };\n\n    res.json(progressData);\n  } catch (error) {\n    console.error('Error fetching ETFO progress:', error);\n    res.status(500).json({ error: 'Failed to fetch ETFO progress' });\n  }\n});\n\nexport default router;"],"version":3}