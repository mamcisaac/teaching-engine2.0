{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/auth.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/auth.test.ts"],"sourcesContent":["import request from 'supertest';\nimport { describe, beforeAll, beforeEach, it, expect } from '@jest/globals';\nimport { app } from '../../src/index';\nimport { getTestPrismaClient } from '../jest.setup';\nimport bcrypt from 'bcryptjs';\n\n// Test user credentials\nconst TEST_USER = {\n  email: 'test@example.com',\n  password: 'test123',\n};\n\ndescribe('Authentication API', () => {\n  let prisma: ReturnType<typeof getTestPrismaClient>;\n\n  beforeAll(async () => {\n    prisma = getTestPrismaClient();\n  });\n\n  const createTestUser = async (email?: string) => {\n    const testEmail = email || `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}@example.com`;\n    \n    // Hash the password before creating the user\n    const hashedPassword = await bcrypt.hash(TEST_USER.password, 10);\n\n    // Create the test user\n    return await prisma.user.create({\n      data: {\n        email: testEmail,\n        password: hashedPassword,\n        name: 'Test User',\n        role: 'teacher',\n        preferredLanguage: 'en',\n      },\n    });\n  };\n\n  describe('POST /api/login', () => {\n    it('should log in with valid credentials', async () => {\n      const testUser = await createTestUser();\n      \n      const res = await request(app).post('/api/login').send({\n        email: testUser.email,\n        password: TEST_USER.password,\n      });\n\n      expect(res.status).toBe(200);\n      expect(res.body).toHaveProperty('token');\n      expect(res.body).toHaveProperty('user');\n      expect(res.body.user.email).toBe(testUser.email);\n    });\n\n    it('should return 401 with invalid credentials', async () => {\n      const res = await request(app).post('/api/login').send({\n        email: 'nonexistent@example.com',\n        password: 'wrongpassword',\n      });\n\n      expect(res.status).toBe(401);\n    });\n  });\n\n  describe('GET /api/auth/me', () => {\n    it('should return user data with valid token', async () => {\n      const testUser = await createTestUser();\n      \n      // Log in to get a token\n      const loginRes = await request(app).post('/api/login').send({\n        email: testUser.email,\n        password: TEST_USER.password,\n      });\n\n      const authToken = loginRes.body.token;\n      \n      const res = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(res.status).toBe(200);\n      expect(res.body).toHaveProperty('email', testUser.email);\n    });\n\n    it('should return 401 without valid token', async () => {\n      const res = await request(app).get('/api/auth/me');\n\n      expect(res.status).toBe(401);\n    });\n  });\n});\n"],"version":3}