8d81149ffc9df677614c95d1f5454c85
/* istanbul ignore next */
function cov_2k2rq9tk7w() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts";
  var hash = "7f89dd71e1be718982a4fc807645884dcc719383";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "1": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 28
        }
      },
      "2": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 26
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 43
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 20,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 19
        }
      },
      "7": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "8": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 73
        }
      },
      "9": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "10": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "12": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 93
        }
      },
      "14": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "15": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "16": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "17": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "18": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 51
        }
      },
      "19": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "20": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 52
        }
      },
      "21": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "22": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "23": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 40
        }
      },
      "24": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 27
        }
      },
      "25": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 41
        }
      },
      "26": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 30
        }
      },
      "27": {
        start: {
          line: 104,
          column: 22
        },
        end: {
          line: 104,
          column: 73
        }
      },
      "28": {
        start: {
          line: 106,
          column: 30
        },
        end: {
          line: 106,
          column: 58
        }
      },
      "29": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "30": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 40
        }
      },
      "31": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "32": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 35
        }
      },
      "33": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 44
        }
      },
      "34": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 115
        }
      },
      "35": {
        start: {
          line: 121,
          column: 26
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "36": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 50
        }
      },
      "37": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "38": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 98
        }
      },
      "39": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "40": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 67
        }
      },
      "41": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 133,
          column: 26
        }
      },
      "42": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 70
        }
      },
      "43": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 26
        }
      },
      "44": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "45": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 26
        }
      },
      "46": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 71
        }
      },
      "47": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "48": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 43
        }
      },
      "49": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 43
        }
      },
      "50": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 181
        }
      },
      "51": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 40
        }
      },
      "52": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 87
        }
      },
      "53": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 43
        }
      },
      "54": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 104
        }
      },
      "55": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 47
        }
      },
      "56": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 77
        }
      },
      "57": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 36
        }
      },
      "58": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 46
        }
      },
      "59": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 168,
          column: 34
        }
      },
      "60": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "61": {
        start: {
          line: 170,
          column: 30
        },
        end: {
          line: 170,
          column: 82
        }
      },
      "62": {
        start: {
          line: 171,
          column: 33
        },
        end: {
          line: 171,
          column: 34
        }
      },
      "63": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 172,
          column: 29
        }
      },
      "64": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "65": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 186,
          column: 17
        }
      },
      "66": {
        start: {
          line: 176,
          column: 20
        },
        end: {
          line: 185,
          column: 21
        }
      },
      "67": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 179,
          column: 143
        }
      },
      "68": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 180,
          column: 41
        }
      },
      "69": {
        start: {
          line: 183,
          column: 41
        },
        end: {
          line: 183,
          column: 97
        }
      },
      "70": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 184,
          column: 88
        }
      },
      "71": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "72": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 114
        }
      },
      "73": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 34
        }
      },
      "74": {
        start: {
          line: 203,
          column: 26
        },
        end: {
          line: 203,
          column: 48
        }
      },
      "75": {
        start: {
          line: 204,
          column: 23
        },
        end: {
          line: 204,
          column: 63
        }
      },
      "76": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "77": {
        start: {
          line: 206,
          column: 30
        },
        end: {
          line: 206,
          column: 81
        }
      },
      "78": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 34
        }
      },
      "79": {
        start: {
          line: 209,
          column: 38
        },
        end: {
          line: 212,
          column: 34
        }
      },
      "80": {
        start: {
          line: 210,
          column: 46
        },
        end: {
          line: 210,
          column: 88
        }
      },
      "81": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 54
        }
      },
      "82": {
        start: {
          line: 213,
          column: 32
        },
        end: {
          line: 213,
          column: 33
        }
      },
      "83": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 29
        }
      },
      "84": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "85": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 228,
          column: 17
        }
      },
      "86": {
        start: {
          line: 217,
          column: 40
        },
        end: {
          line: 217,
          column: 100
        }
      },
      "87": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 223,
          column: 21
        }
      },
      "88": {
        start: {
          line: 219,
          column: 24
        },
        end: {
          line: 219,
          column: 40
        }
      },
      "89": {
        start: {
          line: 222,
          column: 24
        },
        end: {
          line: 222,
          column: 128
        }
      },
      "90": {
        start: {
          line: 226,
          column: 37
        },
        end: {
          line: 226,
          column: 93
        }
      },
      "91": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 83
        }
      },
      "92": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 39
        }
      },
      "93": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 235,
          column: 14
        }
      },
      "94": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 117
        }
      },
      "95": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 34
        }
      },
      "96": {
        start: {
          line: 246,
          column: 31
        },
        end: {
          line: 246,
          column: 52
        }
      },
      "97": {
        start: {
          line: 247,
          column: 32
        },
        end: {
          line: 247,
          column: 82
        }
      },
      "98": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "99": {
        start: {
          line: 249,
          column: 30
        },
        end: {
          line: 249,
          column: 81
        }
      },
      "100": {
        start: {
          line: 250,
          column: 24
        },
        end: {
          line: 250,
          column: 34
        }
      },
      "101": {
        start: {
          line: 251,
          column: 31
        },
        end: {
          line: 251,
          column: 32
        }
      },
      "102": {
        start: {
          line: 252,
          column: 27
        },
        end: {
          line: 252,
          column: 29
        }
      },
      "103": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "104": {
        start: {
          line: 254,
          column: 35
        },
        end: {
          line: 254,
          column: 40
        }
      },
      "105": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 258,
          column: 17
        }
      },
      "106": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 40
        }
      },
      "107": {
        start: {
          line: 260,
          column: 36
        },
        end: {
          line: 260,
          column: 83
        }
      },
      "108": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 263,
          column: 17
        }
      },
      "109": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 40
        }
      },
      "110": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 276,
          column: 17
        }
      },
      "111": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 275,
          column: 21
        }
      },
      "112": {
        start: {
          line: 266,
          column: 40
        },
        end: {
          line: 266,
          column: 104
        }
      },
      "113": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 270,
          column: 25
        }
      },
      "114": {
        start: {
          line: 268,
          column: 28
        },
        end: {
          line: 268,
          column: 43
        }
      },
      "115": {
        start: {
          line: 269,
          column: 28
        },
        end: {
          line: 269,
          column: 132
        }
      },
      "116": {
        start: {
          line: 273,
          column: 41
        },
        end: {
          line: 273,
          column: 97
        }
      },
      "117": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 274,
          column: 87
        }
      },
      "118": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 281,
          column: 14
        }
      },
      "119": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 112
        }
      },
      "120": {
        start: {
          line: 291,
          column: 21
        },
        end: {
          line: 291,
          column: 42
        }
      },
      "121": {
        start: {
          line: 292,
          column: 21
        },
        end: {
          line: 292,
          column: 35
        }
      },
      "122": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "123": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 49
        }
      },
      "124": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 296,
          column: 42
        }
      },
      "125": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 22
        }
      },
      "126": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 49
        }
      },
      "127": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 42
        }
      },
      "128": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 22
        }
      },
      "129": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 51
        }
      },
      "130": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 32
        }
      },
      "131": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 42
        }
      },
      "132": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 22
        }
      },
      "133": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 20
        }
      },
      "134": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 74
        }
      },
      "135": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 320,
          column: 30
        }
      },
      "136": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "137": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "138": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 323,
          column: 103
        }
      },
      "139": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 40
        }
      },
      "140": {
        start: {
          line: 332,
          column: 21
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "141": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 47
        }
      },
      "142": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "143": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 36
        }
      },
      "144": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 81
        }
      },
      "145": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 23
        }
      },
      "146": {
        start: {
          line: 347,
          column: 22
        },
        end: {
          line: 347,
          column: 49
        }
      },
      "147": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "148": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 32
        }
      },
      "149": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 43
        }
      },
      "150": {
        start: {
          line: 352,
          column: 24
        },
        end: {
          line: 352,
          column: 58
        }
      },
      "151": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "152": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 57
        }
      },
      "153": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 23
        }
      },
      "154": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 56
        }
      },
      "155": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 47
        }
      },
      "156": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 54
        }
      },
      "157": {
        start: {
          line: 380,
          column: 21
        },
        end: {
          line: 380,
          column: 52
        }
      },
      "158": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 382,
          column: 25
        }
      },
      "159": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 25
        }
      },
      "160": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 33
        }
      },
      "161": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "162": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 36
        }
      },
      "163": {
        start: {
          line: 388,
          column: 26
        },
        end: {
          line: 388,
          column: 53
        }
      },
      "164": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "165": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 36
        }
      },
      "166": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 47
        }
      },
      "167": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 91
        }
      },
      "168": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 20
        }
      },
      "169": {
        start: {
          line: 401,
          column: 21
        },
        end: {
          line: 401,
          column: 52
        }
      },
      "170": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "171": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 57
        }
      },
      "172": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "173": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 66
        }
      },
      "174": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 86
        }
      },
      "175": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 37
        }
      },
      "176": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 420,
          column: 10
        }
      },
      "177": {
        start: {
          line: 417,
          column: 78
        },
        end: {
          line: 417,
          column: 88
        }
      },
      "178": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 70
        }
      },
      "179": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "180": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 32
        }
      },
      "181": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 32
        }
      },
      "182": {
        start: {
          line: 433,
          column: 31
        },
        end: {
          line: 433,
          column: 67
        }
      },
      "183": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "184": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 95
        }
      },
      "185": {
        start: {
          line: 437,
          column: 28
        },
        end: {
          line: 439,
          column: 21
        }
      },
      "186": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 96
        }
      },
      "187": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 443,
          column: 13
        }
      },
      "188": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 39
        }
      },
      "189": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 34
        }
      },
      "190": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 35
        }
      },
      "191": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 447,
          column: 74
        }
      },
      "192": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 65
        }
      },
      "193": {
        start: {
          line: 453,
          column: 40
        },
        end: {
          line: 453,
          column: 63
        }
      },
      "194": {
        start: {
          line: 457,
          column: 41
        },
        end: {
          line: 457,
          column: 72
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 31
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 21
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        },
        loc: {
          start: {
            line: 95,
            column: 26
          },
          end: {
            line: 97,
            column: 9
          }
        },
        line: 95
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 102
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 33
          },
          end: {
            line: 111,
            column: 34
          }
        },
        loc: {
          start: {
            line: 111,
            column: 39
          },
          end: {
            line: 113,
            column: 9
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 28
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 120
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 37
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 167
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 40
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 201
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 209,
            column: 55
          },
          end: {
            line: 209,
            column: 56
          }
        },
        loc: {
          start: {
            line: 209,
            column: 62
          },
          end: {
            line: 212,
            column: 13
          }
        },
        line: 209
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 35
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 244
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 39
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 290
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 313,
            column: 5
          }
        },
        loc: {
          start: {
            line: 313,
            column: 25
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 313
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 28
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 319
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 22
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 331
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 23
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 346
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 15
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 361
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 20
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 367
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 22
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 373
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 36
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 379
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 30
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 400
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 24
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 414
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 417,
            column: 73
          },
          end: {
            line: 417,
            column: 74
          }
        },
        loc: {
          start: {
            line: 417,
            column: 78
          },
          end: {
            line: 417,
            column: 88
          }
        },
        line: 417
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 21
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 425
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 437,
            column: 39
          },
          end: {
            line: 437,
            column: 40
          }
        },
        loc: {
          start: {
            line: 437,
            column: 45
          },
          end: {
            line: 439,
            column: 13
          }
        },
        line: 437
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 14
          },
          end: {
            line: 454,
            column: 5
          }
        },
        line: 452
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 453,
            column: 27
          },
          end: {
            line: 453,
            column: 28
          }
        },
        loc: {
          start: {
            line: 453,
            column: 40
          },
          end: {
            line: 453,
            column: 63
          }
        },
        line: 453
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "2": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "3": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 133,
            column: 26
          }
        }, {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 136,
            column: 26
          }
        }, {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 26
          }
        }, {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 141,
            column: 71
          }
        }],
        line: 130
      },
      "4": {
        loc: {
          start: {
            line: 150,
            column: 30
          },
          end: {
            line: 150,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 55
          },
          end: {
            line: 150,
            column: 68
          }
        }, {
          start: {
            line: 150,
            column: 71
          },
          end: {
            line: 150,
            column: 86
          }
        }],
        line: 150
      },
      "5": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "6": {
        loc: {
          start: {
            line: 183,
            column: 41
          },
          end: {
            line: 183,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 66
          },
          end: {
            line: 183,
            column: 79
          }
        }, {
          start: {
            line: 183,
            column: 82
          },
          end: {
            line: 183,
            column: 97
          }
        }],
        line: 183
      },
      "7": {
        loc: {
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 44
          },
          end: {
            line: 191,
            column: 50
          }
        }, {
          start: {
            line: 191,
            column: 53
          },
          end: {
            line: 191,
            column: 62
          }
        }],
        line: 191
      },
      "8": {
        loc: {
          start: {
            line: 195,
            column: 54
          },
          end: {
            line: 195,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 79
          },
          end: {
            line: 195,
            column: 92
          }
        }, {
          start: {
            line: 195,
            column: 95
          },
          end: {
            line: 195,
            column: 110
          }
        }],
        line: 195
      },
      "9": {
        loc: {
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 203,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 203,
            column: 42
          }
        }, {
          start: {
            line: 203,
            column: 46
          },
          end: {
            line: 203,
            column: 48
          }
        }],
        line: 203
      },
      "10": {
        loc: {
          start: {
            line: 204,
            column: 23
          },
          end: {
            line: 204,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 23
          },
          end: {
            line: 204,
            column: 36
          }
        }, {
          start: {
            line: 204,
            column: 40
          },
          end: {
            line: 204,
            column: 63
          }
        }],
        line: 204
      },
      "11": {
        loc: {
          start: {
            line: 218,
            column: 20
          },
          end: {
            line: 223,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 20
          },
          end: {
            line: 223,
            column: 21
          }
        }, {
          start: {
            line: 221,
            column: 25
          },
          end: {
            line: 223,
            column: 21
          }
        }],
        line: 218
      },
      "12": {
        loc: {
          start: {
            line: 226,
            column: 37
          },
          end: {
            line: 226,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 62
          },
          end: {
            line: 226,
            column: 75
          }
        }, {
          start: {
            line: 226,
            column: 78
          },
          end: {
            line: 226,
            column: 93
          }
        }],
        line: 226
      },
      "13": {
        loc: {
          start: {
            line: 234,
            column: 24
          },
          end: {
            line: 234,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 234,
            column: 44
          },
          end: {
            line: 234,
            column: 50
          }
        }, {
          start: {
            line: 234,
            column: 53
          },
          end: {
            line: 234,
            column: 62
          }
        }],
        line: 234
      },
      "14": {
        loc: {
          start: {
            line: 238,
            column: 57
          },
          end: {
            line: 238,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 82
          },
          end: {
            line: 238,
            column: 95
          }
        }, {
          start: {
            line: 238,
            column: 98
          },
          end: {
            line: 238,
            column: 113
          }
        }],
        line: 238
      },
      "15": {
        loc: {
          start: {
            line: 247,
            column: 32
          },
          end: {
            line: 247,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 32
          },
          end: {
            line: 247,
            column: 54
          }
        }, {
          start: {
            line: 247,
            column: 58
          },
          end: {
            line: 247,
            column: 82
          }
        }],
        line: 247
      },
      "16": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 258,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 258,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "17": {
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 256,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 256,
            column: 34
          }
        }, {
          start: {
            line: 256,
            column: 38
          },
          end: {
            line: 256,
            column: 56
          }
        }],
        line: 256
      },
      "18": {
        loc: {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "19": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "20": {
        loc: {
          start: {
            line: 267,
            column: 24
          },
          end: {
            line: 270,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 24
          },
          end: {
            line: 270,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "21": {
        loc: {
          start: {
            line: 273,
            column: 41
          },
          end: {
            line: 273,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 273,
            column: 66
          },
          end: {
            line: 273,
            column: 79
          }
        }, {
          start: {
            line: 273,
            column: 82
          },
          end: {
            line: 273,
            column: 97
          }
        }],
        line: 273
      },
      "22": {
        loc: {
          start: {
            line: 280,
            column: 24
          },
          end: {
            line: 280,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 280,
            column: 50
          }
        }, {
          start: {
            line: 280,
            column: 53
          },
          end: {
            line: 280,
            column: 62
          }
        }],
        line: 280
      },
      "23": {
        loc: {
          start: {
            line: 284,
            column: 52
          },
          end: {
            line: 284,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 77
          },
          end: {
            line: 284,
            column: 90
          }
        }, {
          start: {
            line: 284,
            column: 93
          },
          end: {
            line: 284,
            column: 108
          }
        }],
        line: 284
      },
      "24": {
        loc: {
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 28
          }
        }, {
          start: {
            line: 291,
            column: 32
          },
          end: {
            line: 291,
            column: 42
          }
        }],
        line: 291
      },
      "25": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 297,
            column: 22
          }
        }, {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 301,
            column: 22
          }
        }, {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 306,
            column: 22
          }
        }],
        line: 293
      },
      "26": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "27": {
        loc: {
          start: {
            line: 322,
            column: 16
          },
          end: {
            line: 322,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 16
          },
          end: {
            line: 322,
            column: 29
          }
        }, {
          start: {
            line: 322,
            column: 33
          },
          end: {
            line: 322,
            column: 52
          }
        }, {
          start: {
            line: 322,
            column: 56
          },
          end: {
            line: 322,
            column: 87
          }
        }],
        line: 322
      },
      "28": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "29": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "30": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "31": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 382,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 382,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "32": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        }, {
          start: {
            line: 387,
            column: 13
          },
          end: {
            line: 393,
            column: 9
          }
        }],
        line: 384
      },
      "33": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "34": {
        loc: {
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "35": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "36": {
        loc: {
          start: {
            line: 419,
            column: 20
          },
          end: {
            line: 419,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 419,
            column: 41
          },
          end: {
            line: 419,
            column: 64
          }
        }, {
          start: {
            line: 419,
            column: 67
          },
          end: {
            line: 419,
            column: 68
          }
        }],
        line: 419
      },
      "37": {
        loc: {
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts"],
      sourcesContent: ["import BaseService from './base/BaseService';\nimport { curriculumDiscoveryService } from './curriculumDiscoveryService';\n// import { activityDiscoveryService } from './activityDiscoveryService'; // Unused import\n\nexport interface ScheduledTask {\n  id: string;\n  name: string;\n  type: 'discovery' | 'verification' | 'cleanup';\n  frequency: 'daily' | 'weekly' | 'monthly';\n  lastRun?: Date;\n  nextRun: Date;\n  isActive: boolean;\n  config: Record<string, unknown>;\n}\n\nexport interface TaskExecution {\n  taskId: string;\n  startTime: Date;\n  endTime?: Date;\n  status: 'running' | 'completed' | 'failed';\n  result?: {\n    documentsFound?: number;\n    documentsVerified?: number;\n    documentsProcessed?: number;\n    errors?: string[];\n  };\n  error?: string;\n}\n\n/**\n * Discovery Scheduler Service\n * Manages background tasks for curriculum document discovery and monitoring\n */\nexport class DiscoverySchedulerService extends BaseService {\n  private scheduledTasks: Map<string, ScheduledTask> = new Map();\n  private runningTasks: Map<string, TaskExecution> = new Map();\n  private taskTimers: Map<string, NodeJS.Timeout> = new Map();\n  private isInitialized: boolean = false;\n\n  constructor() {\n    super('DiscoverySchedulerService');\n  }\n\n  /**\n   * Initialize the scheduler with default tasks\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      this.logger.info('Initializing Discovery Scheduler Service');\n      \n      // Create default scheduled tasks\n      await this.createDefaultTasks();\n      \n      // Start the scheduler\n      this.startScheduler();\n      \n      this.isInitialized = true;\n      this.logger.info('Discovery Scheduler Service initialized successfully');\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to initialize Discovery Scheduler Service');\n      throw error;\n    }\n  }\n\n  /**\n   * Create default scheduled tasks\n   */\n  private async createDefaultTasks(): Promise<void> {\n    const defaultTasks: Omit<ScheduledTask, 'id'>[] = [\n      {\n        name: 'Daily Curriculum Discovery',\n        type: 'discovery',\n        frequency: 'daily',\n        nextRun: this.getNextRunTime('daily'),\n        isActive: true,\n        config: {\n          sources: ['pei-gov', 'ontario-edu', 'bc-gov'],\n          autoProcess: false, // Don't auto-process, require manual review\n        },\n      },\n      {\n        name: 'Weekly Document Verification',\n        type: 'verification',\n        frequency: 'weekly',\n        nextRun: this.getNextRunTime('weekly'),\n        isActive: true,\n        config: {\n          batchSize: 50, // Verify 50 documents at a time\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds\n        },\n      },\n      {\n        name: 'Monthly Cleanup',\n        type: 'cleanup',\n        frequency: 'monthly',\n        nextRun: this.getNextRunTime('monthly'),\n        isActive: true,\n        config: {\n          removeInactive: true,\n          removeOlderThan: 90 * 24 * 60 * 60 * 1000, // 90 days\n        },\n      },\n    ];\n\n    for (const taskData of defaultTasks) {\n      const task: ScheduledTask = {\n        id: this.generateTaskId(taskData.name),\n        ...taskData,\n      };\n      \n      this.scheduledTasks.set(task.id, task);\n      this.logger.info(`Created task: ${task.name} (${task.id})`);\n    }\n  }\n\n  /**\n   * Start the task scheduler\n   */\n  private startScheduler(): void {\n    this.logger.info('Starting task scheduler');\n    \n    // Schedule all active tasks\n    for (const task of this.scheduledTasks.values()) {\n      if (task.isActive) {\n        this.scheduleTask(task);\n      }\n    }\n\n    // Set up periodic scheduler check (every hour)\n    setInterval(() => {\n      this.checkAndScheduleTasks();\n    }, 60 * 60 * 1000);\n  }\n\n  /**\n   * Schedule a specific task\n   */\n  private scheduleTask(task: ScheduledTask): void {\n    const now = new Date();\n    const delay = Math.max(0, task.nextRun.getTime() - now.getTime());\n    \n    // Clear existing timer if any\n    const existingTimer = this.taskTimers.get(task.id);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Schedule the task\n    const timer = setTimeout(() => {\n      this.executeTask(task);\n    }, delay);\n\n    this.taskTimers.set(task.id, timer);\n    \n    this.logger.info(\n      { taskId: task.id, taskName: task.name, nextRun: task.nextRun, delay },\n      'Task scheduled'\n    );\n  }\n\n  /**\n   * Execute a scheduled task\n   */\n  private async executeTask(task: ScheduledTask): Promise<void> {\n    const execution: TaskExecution = {\n      taskId: task.id,\n      startTime: new Date(),\n      status: 'running',\n    };\n\n    this.runningTasks.set(task.id, execution);\n\n    try {\n      this.logger.info({ taskId: task.id, taskName: task.name }, 'Starting task execution');\n\n      let result: TaskExecution['result'];\n\n      switch (task.type) {\n        case 'discovery':\n          result = await this.executeDiscoveryTask(task);\n          break;\n        case 'verification':\n          result = await this.executeVerificationTask(task);\n          break;\n        case 'cleanup':\n          result = await this.executeCleanupTask(task);\n          break;\n        default:\n          throw new Error(`Unknown task type: ${task.type}`);\n      }\n\n      execution.result = result;\n      execution.status = 'completed';\n      execution.endTime = new Date();\n\n      this.logger.info(\n        { taskId: task.id, taskName: task.name, result, duration: execution.endTime.getTime() - execution.startTime.getTime() },\n        'Task completed successfully'\n      );\n    } catch (error) {\n      execution.status = 'failed';\n      execution.error = error instanceof Error ? error.message : 'Unknown error';\n      execution.endTime = new Date();\n\n      this.logger.error(\n        { taskId: task.id, taskName: task.name, error },\n        'Task execution failed'\n      );\n    } finally {\n      // Update task schedule\n      task.lastRun = execution.startTime;\n      task.nextRun = this.getNextRunTime(task.frequency, task.lastRun);\n\n      // Schedule next execution\n      this.scheduleTask(task);\n\n      // Keep execution record but remove from running tasks\n      this.runningTasks.delete(task.id);\n    }\n  }\n\n  /**\n   * Execute curriculum discovery task\n   */\n  private async executeDiscoveryTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    \n    try {\n      const documents = await curriculumDiscoveryService.discoverDocuments();\n      \n      let processedCount = 0;\n      const errors: string[] = [];\n\n      // Auto-process documents if configured\n      if (config.autoProcess) {\n        for (const document of documents) {\n          try {\n            // This would require a user ID - in practice, this might be a system user\n            // For now, we'll just log the discovery\n            this.logger.info(\n              { documentId: document.id, title: document.title },\n              'Document discovered (auto-processing disabled)'\n            );\n            processedCount++;\n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to process ${document.title}: ${errorMsg}`);\n          }\n        }\n      }\n\n      return {\n        documentsFound: documents.length,\n        documentsProcessed: processedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Discovery task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute document verification task\n   */\n  private async executeVerificationTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    const batchSize = (config.batchSize as number) || 50;\n    const maxAge = (config.maxAge as number) || 7 * 24 * 60 * 60 * 1000;\n\n    try {\n      const documents = curriculumDiscoveryService.getDiscoveredDocuments();\n      const now = new Date();\n      \n      // Find documents that need verification\n      const documentsToVerify = documents.filter(doc => {\n        const timeSinceVerification = now.getTime() - doc.lastVerified.getTime();\n        return timeSinceVerification > maxAge;\n      }).slice(0, batchSize);\n\n      let verifiedCount = 0;\n      const errors: string[] = [];\n\n      for (const document of documentsToVerify) {\n        try {\n          const isAvailable = await curriculumDiscoveryService.verifyDocument(document.id);\n          \n          if (isAvailable) {\n            verifiedCount++;\n          } else {\n            this.logger.warn(\n              { documentId: document.id, title: document.title },\n              'Document is no longer available'\n            );\n          }\n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          errors.push(`Failed to verify ${document.title}: ${errorMsg}`);\n        }\n\n        // Add delay between verifications to be respectful\n        await this.delay(1000);\n      }\n\n      return {\n        documentsVerified: verifiedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Verification task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute cleanup task\n   */\n  private async executeCleanupTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    const removeInactive = config.removeInactive as boolean;\n    const removeOlderThan = (config.removeOlderThan as number) || 90 * 24 * 60 * 60 * 1000;\n\n    try {\n      const documents = curriculumDiscoveryService.getDiscoveredDocuments();\n      const now = new Date();\n      \n      let removedCount = 0;\n      const errors: string[] = [];\n\n      for (const document of documents) {\n        let shouldRemove = false;\n\n        // Remove inactive documents if configured\n        if (removeInactive && !document.isActive) {\n          shouldRemove = true;\n        }\n\n        // Remove old documents\n        const documentAge = now.getTime() - document.lastVerified.getTime();\n        if (documentAge > removeOlderThan) {\n          shouldRemove = true;\n        }\n\n        if (shouldRemove) {\n          try {\n            const removed = curriculumDiscoveryService.removeDiscoveredDocument(document.id);\n            if (removed) {\n              removedCount++;\n              this.logger.info(\n                { documentId: document.id, title: document.title },\n                'Document removed during cleanup'\n              );\n            }\n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to remove ${document.title}: ${errorMsg}`);\n          }\n        }\n      }\n\n      return {\n        documentsProcessed: removedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Cleanup task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get the next run time for a task frequency\n   */\n  private getNextRunTime(frequency: ScheduledTask['frequency'], lastRun?: Date): Date {\n    const base = lastRun || new Date();\n    const next = new Date(base);\n\n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        next.setHours(2, 0, 0, 0); // Run at 2 AM\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        next.setHours(3, 0, 0, 0); // Run at 3 AM\n        break;\n      case 'monthly':\n        next.setMonth(next.getMonth() + 1);\n        next.setDate(1); // First day of the month\n        next.setHours(4, 0, 0, 0); // Run at 4 AM\n        break;\n    }\n\n    return next;\n  }\n\n  /**\n   * Generate a unique task ID\n   */\n  private generateTaskId(name: string): string {\n    return name.toLowerCase().replace(/\\s+/g, '-') + '-' + Date.now();\n  }\n\n  /**\n   * Check and schedule tasks that might have been missed\n   */\n  private checkAndScheduleTasks(): void {\n    const now = new Date();\n    \n    for (const task of this.scheduledTasks.values()) {\n      if (task.isActive && task.nextRun <= now && !this.runningTasks.has(task.id)) {\n        this.logger.info(\n          { taskId: task.id, taskName: task.name },\n          'Rescheduling missed task'\n        );\n        this.scheduleTask(task);\n      }\n    }\n  }\n\n  /**\n   * Add a new scheduled task\n   */\n  addTask(taskData: Omit<ScheduledTask, 'id'>): string {\n    const task: ScheduledTask = {\n      id: this.generateTaskId(taskData.name),\n      ...taskData,\n    };\n\n    this.scheduledTasks.set(task.id, task);\n    \n    if (task.isActive) {\n      this.scheduleTask(task);\n    }\n\n    this.logger.info({ taskId: task.id, taskName: task.name }, 'Task added');\n    return task.id;\n  }\n\n  /**\n   * Remove a scheduled task\n   */\n  removeTask(taskId: string): boolean {\n    const timer = this.taskTimers.get(taskId);\n    if (timer) {\n      clearTimeout(timer);\n      this.taskTimers.delete(taskId);\n    }\n\n    const removed = this.scheduledTasks.delete(taskId);\n    \n    if (removed) {\n      this.logger.info({ taskId }, 'Task removed');\n    }\n\n    return removed;\n  }\n\n  /**\n   * Get all scheduled tasks\n   */\n  getTasks(): ScheduledTask[] {\n    return Array.from(this.scheduledTasks.values());\n  }\n\n  /**\n   * Get task by ID\n   */\n  getTask(taskId: string): ScheduledTask | undefined {\n    return this.scheduledTasks.get(taskId);\n  }\n\n  /**\n   * Get running tasks\n   */\n  getRunningTasks(): TaskExecution[] {\n    return Array.from(this.runningTasks.values());\n  }\n\n  /**\n   * Enable or disable a task\n   */\n  setTaskStatus(taskId: string, isActive: boolean): boolean {\n    const task = this.scheduledTasks.get(taskId);\n    if (!task) return false;\n\n    task.isActive = isActive;\n\n    if (isActive) {\n      this.scheduleTask(task);\n    } else {\n      const timer = this.taskTimers.get(taskId);\n      if (timer) {\n        clearTimeout(timer);\n        this.taskTimers.delete(taskId);\n      }\n    }\n\n    this.logger.info(\n      { taskId, taskName: task.name, isActive },\n      'Task status updated'\n    );\n\n    return true;\n  }\n\n  /**\n   * Manually trigger a task\n   */\n  async triggerTask(taskId: string): Promise<void> {\n    const task = this.scheduledTasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    if (this.runningTasks.has(taskId)) {\n      throw new Error(`Task is already running: ${taskId}`);\n    }\n\n    this.logger.info({ taskId, taskName: task.name }, 'Manually triggering task');\n    await this.executeTask(task);\n  }\n\n  /**\n   * Get scheduler statistics\n   */\n  getSchedulerStats(): {\n    totalTasks: number;\n    activeTasks: number;\n    runningTasks: number;\n    uptime: number;\n  } {\n    return {\n      totalTasks: this.scheduledTasks.size,\n      activeTasks: Array.from(this.scheduledTasks.values()).filter(t => t.isActive).length,\n      runningTasks: this.runningTasks.size,\n      uptime: this.isInitialized ? Date.now() - Date.now() : 0, // Would track actual uptime in production\n    };\n  }\n\n  /**\n   * Shutdown the scheduler\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Discovery Scheduler Service');\n\n    // Cancel all timers\n    for (const timer of this.taskTimers.values()) {\n      clearTimeout(timer);\n    }\n    this.taskTimers.clear();\n\n    // Wait for running tasks to complete (with timeout)\n    const runningTaskIds = Array.from(this.runningTasks.keys());\n    if (runningTaskIds.length > 0) {\n      this.logger.info(`Waiting for ${runningTaskIds.length} running tasks to complete`);\n      \n      // Wait up to 30 seconds for tasks to complete\n      const timeout = setTimeout(() => {\n        this.logger.warn('Shutdown timeout reached, some tasks may not have completed');\n      }, 30000);\n\n      // Poll for completion\n      while (this.runningTasks.size > 0) {\n        await this.delay(1000);\n      }\n\n      clearTimeout(timeout);\n    }\n\n    this.isInitialized = false;\n    this.logger.info('Discovery Scheduler Service shutdown complete');\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const discoverySchedulerService = new DiscoverySchedulerService();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7f89dd71e1be718982a4fc807645884dcc719383"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2k2rq9tk7w = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2k2rq9tk7w();
import BaseService from './base/BaseService';
import { curriculumDiscoveryService } from './curriculumDiscoveryService';
/**
 * Discovery Scheduler Service
 * Manages background tasks for curriculum document discovery and monitoring
 */
export class DiscoverySchedulerService extends BaseService {
  scheduledTasks =
  /* istanbul ignore next */
  (cov_2k2rq9tk7w().s[0]++, new Map());
  runningTasks =
  /* istanbul ignore next */
  (cov_2k2rq9tk7w().s[1]++, new Map());
  taskTimers =
  /* istanbul ignore next */
  (cov_2k2rq9tk7w().s[2]++, new Map());
  isInitialized =
  /* istanbul ignore next */
  (cov_2k2rq9tk7w().s[3]++, false);
  constructor() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[0]++;
    cov_2k2rq9tk7w().s[4]++;
    super('DiscoverySchedulerService');
  }
  /**
   * Initialize the scheduler with default tasks
   */
  async initialize() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[1]++;
    cov_2k2rq9tk7w().s[5]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[0][0]++;
      cov_2k2rq9tk7w().s[6]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[0][1]++;
    }
    cov_2k2rq9tk7w().s[7]++;
    try {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[8]++;
      this.logger.info('Initializing Discovery Scheduler Service');
      // Create default scheduled tasks
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[9]++;
      await this.createDefaultTasks();
      // Start the scheduler
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[10]++;
      this.startScheduler();
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[11]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[12]++;
      this.logger.info('Discovery Scheduler Service initialized successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[13]++;
      this.logger.error({
        error
      }, 'Failed to initialize Discovery Scheduler Service');
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[14]++;
      throw error;
    }
  }
  /**
   * Create default scheduled tasks
   */
  async createDefaultTasks() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[2]++;
    const defaultTasks =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[15]++, [{
      name: 'Daily Curriculum Discovery',
      type: 'discovery',
      frequency: 'daily',
      nextRun: this.getNextRunTime('daily'),
      isActive: true,
      config: {
        sources: ['pei-gov', 'ontario-edu', 'bc-gov'],
        autoProcess: false // Don't auto-process, require manual review
      }
    }, {
      name: 'Weekly Document Verification',
      type: 'verification',
      frequency: 'weekly',
      nextRun: this.getNextRunTime('weekly'),
      isActive: true,
      config: {
        batchSize: 50,
        // Verify 50 documents at a time
        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days in milliseconds
      }
    }, {
      name: 'Monthly Cleanup',
      type: 'cleanup',
      frequency: 'monthly',
      nextRun: this.getNextRunTime('monthly'),
      isActive: true,
      config: {
        removeInactive: true,
        removeOlderThan: 90 * 24 * 60 * 60 * 1000 // 90 days
      }
    }]);
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[16]++;
    for (const taskData of defaultTasks) {
      const task =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[17]++, {
        id: this.generateTaskId(taskData.name),
        ...taskData
      });
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[18]++;
      this.scheduledTasks.set(task.id, task);
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[19]++;
      this.logger.info(`Created task: ${task.name} (${task.id})`);
    }
  }
  /**
   * Start the task scheduler
   */
  startScheduler() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[3]++;
    cov_2k2rq9tk7w().s[20]++;
    this.logger.info('Starting task scheduler');
    // Schedule all active tasks
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[21]++;
    for (const task of this.scheduledTasks.values()) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[22]++;
      if (task.isActive) {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[1][0]++;
        cov_2k2rq9tk7w().s[23]++;
        this.scheduleTask(task);
      } else
      /* istanbul ignore next */
      {
        cov_2k2rq9tk7w().b[1][1]++;
      }
    }
    // Set up periodic scheduler check (every hour)
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[24]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().f[4]++;
      cov_2k2rq9tk7w().s[25]++;
      this.checkAndScheduleTasks();
    }, 60 * 60 * 1000);
  }
  /**
   * Schedule a specific task
   */
  scheduleTask(task) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[5]++;
    const now =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[26]++, new Date());
    const delay =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[27]++, Math.max(0, task.nextRun.getTime() - now.getTime()));
    // Clear existing timer if any
    const existingTimer =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[28]++, this.taskTimers.get(task.id));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[29]++;
    if (existingTimer) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[2][0]++;
      cov_2k2rq9tk7w().s[30]++;
      clearTimeout(existingTimer);
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[2][1]++;
    }
    // Schedule the task
    const timer =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[31]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().f[6]++;
      cov_2k2rq9tk7w().s[32]++;
      this.executeTask(task);
    }, delay));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[33]++;
    this.taskTimers.set(task.id, timer);
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[34]++;
    this.logger.info({
      taskId: task.id,
      taskName: task.name,
      nextRun: task.nextRun,
      delay
    }, 'Task scheduled');
  }
  /**
   * Execute a scheduled task
   */
  async executeTask(task) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[7]++;
    const execution =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[35]++, {
      taskId: task.id,
      startTime: new Date(),
      status: 'running'
    });
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[36]++;
    this.runningTasks.set(task.id, execution);
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[37]++;
    try {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[38]++;
      this.logger.info({
        taskId: task.id,
        taskName: task.name
      }, 'Starting task execution');
      let result;
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[39]++;
      switch (task.type) {
        case 'discovery':
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[3][0]++;
          cov_2k2rq9tk7w().s[40]++;
          result = await this.executeDiscoveryTask(task);
          /* istanbul ignore next */
          cov_2k2rq9tk7w().s[41]++;
          break;
        case 'verification':
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[3][1]++;
          cov_2k2rq9tk7w().s[42]++;
          result = await this.executeVerificationTask(task);
          /* istanbul ignore next */
          cov_2k2rq9tk7w().s[43]++;
          break;
        case 'cleanup':
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[3][2]++;
          cov_2k2rq9tk7w().s[44]++;
          result = await this.executeCleanupTask(task);
          /* istanbul ignore next */
          cov_2k2rq9tk7w().s[45]++;
          break;
        default:
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[3][3]++;
          cov_2k2rq9tk7w().s[46]++;
          throw new Error(`Unknown task type: ${task.type}`);
      }
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[47]++;
      execution.result = result;
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[48]++;
      execution.status = 'completed';
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[49]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[50]++;
      this.logger.info({
        taskId: task.id,
        taskName: task.name,
        result,
        duration: execution.endTime.getTime() - execution.startTime.getTime()
      }, 'Task completed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[51]++;
      execution.status = 'failed';
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[52]++;
      execution.error = error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[4][1]++, 'Unknown error');
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[53]++;
      execution.endTime = new Date();
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[54]++;
      this.logger.error({
        taskId: task.id,
        taskName: task.name,
        error
      }, 'Task execution failed');
    } finally {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[55]++;
      // Update task schedule
      task.lastRun = execution.startTime;
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[56]++;
      task.nextRun = this.getNextRunTime(task.frequency, task.lastRun);
      // Schedule next execution
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[57]++;
      this.scheduleTask(task);
      // Keep execution record but remove from running tasks
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[58]++;
      this.runningTasks.delete(task.id);
    }
  }
  /**
   * Execute curriculum discovery task
   */
  async executeDiscoveryTask(task) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[8]++;
    const config =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[59]++, task.config);
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[60]++;
    try {
      const documents =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[61]++, await curriculumDiscoveryService.discoverDocuments());
      let processedCount =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[62]++, 0);
      const errors =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[63]++, []);
      // Auto-process documents if configured
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[64]++;
      if (config.autoProcess) {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[5][0]++;
        cov_2k2rq9tk7w().s[65]++;
        for (const document of documents) {
          /* istanbul ignore next */
          cov_2k2rq9tk7w().s[66]++;
          try {
            /* istanbul ignore next */
            cov_2k2rq9tk7w().s[67]++;
            // This would require a user ID - in practice, this might be a system user
            // For now, we'll just log the discovery
            this.logger.info({
              documentId: document.id,
              title: document.title
            }, 'Document discovered (auto-processing disabled)');
            /* istanbul ignore next */
            cov_2k2rq9tk7w().s[68]++;
            processedCount++;
          } catch (error) {
            const errorMsg =
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().s[69]++, error instanceof Error ?
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().b[6][0]++, error.message) :
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().b[6][1]++, 'Unknown error'));
            /* istanbul ignore next */
            cov_2k2rq9tk7w().s[70]++;
            errors.push(`Failed to process ${document.title}: ${errorMsg}`);
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2k2rq9tk7w().b[5][1]++;
      }
      cov_2k2rq9tk7w().s[71]++;
      return {
        documentsFound: documents.length,
        documentsProcessed: processedCount,
        errors: errors.length > 0 ?
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[7][0]++, errors) :
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[7][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[72]++;
      throw new Error(`Discovery task failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[8][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Execute document verification task
   */
  async executeVerificationTask(task) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[9]++;
    const config =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[73]++, task.config);
    const batchSize =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[74]++,
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[9][0]++, config.batchSize) ||
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[9][1]++, 50));
    const maxAge =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[75]++,
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[10][0]++, config.maxAge) ||
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[10][1]++, 7 * 24 * 60 * 60 * 1000));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[76]++;
    try {
      const documents =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[77]++, curriculumDiscoveryService.getDiscoveredDocuments());
      const now =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[78]++, new Date());
      // Find documents that need verification
      const documentsToVerify =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[79]++, documents.filter(doc => {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().f[10]++;
        const timeSinceVerification =
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().s[80]++, now.getTime() - doc.lastVerified.getTime());
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[81]++;
        return timeSinceVerification > maxAge;
      }).slice(0, batchSize));
      let verifiedCount =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[82]++, 0);
      const errors =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[83]++, []);
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[84]++;
      for (const document of documentsToVerify) {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[85]++;
        try {
          const isAvailable =
          /* istanbul ignore next */
          (cov_2k2rq9tk7w().s[86]++, await curriculumDiscoveryService.verifyDocument(document.id));
          /* istanbul ignore next */
          cov_2k2rq9tk7w().s[87]++;
          if (isAvailable) {
            /* istanbul ignore next */
            cov_2k2rq9tk7w().b[11][0]++;
            cov_2k2rq9tk7w().s[88]++;
            verifiedCount++;
          } else {
            /* istanbul ignore next */
            cov_2k2rq9tk7w().b[11][1]++;
            cov_2k2rq9tk7w().s[89]++;
            this.logger.warn({
              documentId: document.id,
              title: document.title
            }, 'Document is no longer available');
          }
        } catch (error) {
          const errorMsg =
          /* istanbul ignore next */
          (cov_2k2rq9tk7w().s[90]++, error instanceof Error ?
          /* istanbul ignore next */
          (cov_2k2rq9tk7w().b[12][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2k2rq9tk7w().b[12][1]++, 'Unknown error'));
          /* istanbul ignore next */
          cov_2k2rq9tk7w().s[91]++;
          errors.push(`Failed to verify ${document.title}: ${errorMsg}`);
        }
        // Add delay between verifications to be respectful
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[92]++;
        await this.delay(1000);
      }
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[93]++;
      return {
        documentsVerified: verifiedCount,
        errors: errors.length > 0 ?
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[13][0]++, errors) :
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[13][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[94]++;
      throw new Error(`Verification task failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[14][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Execute cleanup task
   */
  async executeCleanupTask(task) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[11]++;
    const config =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[95]++, task.config);
    const removeInactive =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[96]++, config.removeInactive);
    const removeOlderThan =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[97]++,
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[15][0]++, config.removeOlderThan) ||
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[15][1]++, 90 * 24 * 60 * 60 * 1000));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[98]++;
    try {
      const documents =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[99]++, curriculumDiscoveryService.getDiscoveredDocuments());
      const now =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[100]++, new Date());
      let removedCount =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[101]++, 0);
      const errors =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[102]++, []);
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[103]++;
      for (const document of documents) {
        let shouldRemove =
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().s[104]++, false);
        // Remove inactive documents if configured
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[105]++;
        if (
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[17][0]++, removeInactive) &&
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[17][1]++, !document.isActive)) {
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[16][0]++;
          cov_2k2rq9tk7w().s[106]++;
          shouldRemove = true;
        } else
        /* istanbul ignore next */
        {
          cov_2k2rq9tk7w().b[16][1]++;
        }
        // Remove old documents
        const documentAge =
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().s[107]++, now.getTime() - document.lastVerified.getTime());
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[108]++;
        if (documentAge > removeOlderThan) {
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[18][0]++;
          cov_2k2rq9tk7w().s[109]++;
          shouldRemove = true;
        } else
        /* istanbul ignore next */
        {
          cov_2k2rq9tk7w().b[18][1]++;
        }
        cov_2k2rq9tk7w().s[110]++;
        if (shouldRemove) {
          /* istanbul ignore next */
          cov_2k2rq9tk7w().b[19][0]++;
          cov_2k2rq9tk7w().s[111]++;
          try {
            const removed =
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().s[112]++, curriculumDiscoveryService.removeDiscoveredDocument(document.id));
            /* istanbul ignore next */
            cov_2k2rq9tk7w().s[113]++;
            if (removed) {
              /* istanbul ignore next */
              cov_2k2rq9tk7w().b[20][0]++;
              cov_2k2rq9tk7w().s[114]++;
              removedCount++;
              /* istanbul ignore next */
              cov_2k2rq9tk7w().s[115]++;
              this.logger.info({
                documentId: document.id,
                title: document.title
              }, 'Document removed during cleanup');
            } else
            /* istanbul ignore next */
            {
              cov_2k2rq9tk7w().b[20][1]++;
            }
          } catch (error) {
            const errorMsg =
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().s[116]++, error instanceof Error ?
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().b[21][0]++, error.message) :
            /* istanbul ignore next */
            (cov_2k2rq9tk7w().b[21][1]++, 'Unknown error'));
            /* istanbul ignore next */
            cov_2k2rq9tk7w().s[117]++;
            errors.push(`Failed to remove ${document.title}: ${errorMsg}`);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2k2rq9tk7w().b[19][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[118]++;
      return {
        documentsProcessed: removedCount,
        errors: errors.length > 0 ?
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[22][0]++, errors) :
        /* istanbul ignore next */
        (cov_2k2rq9tk7w().b[22][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[119]++;
      throw new Error(`Cleanup task failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[23][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Get the next run time for a task frequency
   */
  getNextRunTime(frequency, lastRun) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[12]++;
    const base =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[120]++,
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[24][0]++, lastRun) ||
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().b[24][1]++, new Date()));
    const next =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[121]++, new Date(base));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[122]++;
    switch (frequency) {
      case 'daily':
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[25][0]++;
        cov_2k2rq9tk7w().s[123]++;
        next.setDate(next.getDate() + 1);
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[124]++;
        next.setHours(2, 0, 0, 0); // Run at 2 AM
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[125]++;
        break;
      case 'weekly':
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[25][1]++;
        cov_2k2rq9tk7w().s[126]++;
        next.setDate(next.getDate() + 7);
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[127]++;
        next.setHours(3, 0, 0, 0); // Run at 3 AM
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[128]++;
        break;
      case 'monthly':
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[25][2]++;
        cov_2k2rq9tk7w().s[129]++;
        next.setMonth(next.getMonth() + 1);
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[130]++;
        next.setDate(1); // First day of the month
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[131]++;
        next.setHours(4, 0, 0, 0); // Run at 4 AM
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[132]++;
        break;
    }
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[133]++;
    return next;
  }
  /**
   * Generate a unique task ID
   */
  generateTaskId(name) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[13]++;
    cov_2k2rq9tk7w().s[134]++;
    return name.toLowerCase().replace(/\s+/g, '-') + '-' + Date.now();
  }
  /**
   * Check and schedule tasks that might have been missed
   */
  checkAndScheduleTasks() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[14]++;
    const now =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[135]++, new Date());
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[136]++;
    for (const task of this.scheduledTasks.values()) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[137]++;
      if (
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[27][0]++, task.isActive) &&
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[27][1]++, task.nextRun <= now) &&
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[27][2]++, !this.runningTasks.has(task.id))) {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[26][0]++;
        cov_2k2rq9tk7w().s[138]++;
        this.logger.info({
          taskId: task.id,
          taskName: task.name
        }, 'Rescheduling missed task');
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[139]++;
        this.scheduleTask(task);
      } else
      /* istanbul ignore next */
      {
        cov_2k2rq9tk7w().b[26][1]++;
      }
    }
  }
  /**
   * Add a new scheduled task
   */
  addTask(taskData) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[15]++;
    const task =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[140]++, {
      id: this.generateTaskId(taskData.name),
      ...taskData
    });
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[141]++;
    this.scheduledTasks.set(task.id, task);
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[142]++;
    if (task.isActive) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[28][0]++;
      cov_2k2rq9tk7w().s[143]++;
      this.scheduleTask(task);
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[28][1]++;
    }
    cov_2k2rq9tk7w().s[144]++;
    this.logger.info({
      taskId: task.id,
      taskName: task.name
    }, 'Task added');
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[145]++;
    return task.id;
  }
  /**
   * Remove a scheduled task
   */
  removeTask(taskId) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[16]++;
    const timer =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[146]++, this.taskTimers.get(taskId));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[147]++;
    if (timer) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[29][0]++;
      cov_2k2rq9tk7w().s[148]++;
      clearTimeout(timer);
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[149]++;
      this.taskTimers.delete(taskId);
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[29][1]++;
    }
    const removed =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[150]++, this.scheduledTasks.delete(taskId));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[151]++;
    if (removed) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[30][0]++;
      cov_2k2rq9tk7w().s[152]++;
      this.logger.info({
        taskId
      }, 'Task removed');
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[30][1]++;
    }
    cov_2k2rq9tk7w().s[153]++;
    return removed;
  }
  /**
   * Get all scheduled tasks
   */
  getTasks() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[17]++;
    cov_2k2rq9tk7w().s[154]++;
    return Array.from(this.scheduledTasks.values());
  }
  /**
   * Get task by ID
   */
  getTask(taskId) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[18]++;
    cov_2k2rq9tk7w().s[155]++;
    return this.scheduledTasks.get(taskId);
  }
  /**
   * Get running tasks
   */
  getRunningTasks() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[19]++;
    cov_2k2rq9tk7w().s[156]++;
    return Array.from(this.runningTasks.values());
  }
  /**
   * Enable or disable a task
   */
  setTaskStatus(taskId, isActive) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[20]++;
    const task =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[157]++, this.scheduledTasks.get(taskId));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[158]++;
    if (!task) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[31][0]++;
      cov_2k2rq9tk7w().s[159]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[31][1]++;
    }
    cov_2k2rq9tk7w().s[160]++;
    task.isActive = isActive;
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[161]++;
    if (isActive) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[32][0]++;
      cov_2k2rq9tk7w().s[162]++;
      this.scheduleTask(task);
    } else {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[32][1]++;
      const timer =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[163]++, this.taskTimers.get(taskId));
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[164]++;
      if (timer) {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().b[33][0]++;
        cov_2k2rq9tk7w().s[165]++;
        clearTimeout(timer);
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[166]++;
        this.taskTimers.delete(taskId);
      } else
      /* istanbul ignore next */
      {
        cov_2k2rq9tk7w().b[33][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[167]++;
    this.logger.info({
      taskId,
      taskName: task.name,
      isActive
    }, 'Task status updated');
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[168]++;
    return true;
  }
  /**
   * Manually trigger a task
   */
  async triggerTask(taskId) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[21]++;
    const task =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[169]++, this.scheduledTasks.get(taskId));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[170]++;
    if (!task) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[34][0]++;
      cov_2k2rq9tk7w().s[171]++;
      throw new Error(`Task not found: ${taskId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[34][1]++;
    }
    cov_2k2rq9tk7w().s[172]++;
    if (this.runningTasks.has(taskId)) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[35][0]++;
      cov_2k2rq9tk7w().s[173]++;
      throw new Error(`Task is already running: ${taskId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[35][1]++;
    }
    cov_2k2rq9tk7w().s[174]++;
    this.logger.info({
      taskId,
      taskName: task.name
    }, 'Manually triggering task');
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[175]++;
    await this.executeTask(task);
  }
  /**
   * Get scheduler statistics
   */
  getSchedulerStats() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[22]++;
    cov_2k2rq9tk7w().s[176]++;
    return {
      totalTasks: this.scheduledTasks.size,
      activeTasks: Array.from(this.scheduledTasks.values()).filter(t => {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().f[23]++;
        cov_2k2rq9tk7w().s[177]++;
        return t.isActive;
      }).length,
      runningTasks: this.runningTasks.size,
      uptime: this.isInitialized ?
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[36][0]++, Date.now() - Date.now()) :
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().b[36][1]++, 0) // Would track actual uptime in production
    };
  }
  /**
   * Shutdown the scheduler
   */
  async shutdown() {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[24]++;
    cov_2k2rq9tk7w().s[178]++;
    this.logger.info('Shutting down Discovery Scheduler Service');
    // Cancel all timers
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[179]++;
    for (const timer of this.taskTimers.values()) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[180]++;
      clearTimeout(timer);
    }
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[181]++;
    this.taskTimers.clear();
    // Wait for running tasks to complete (with timeout)
    const runningTaskIds =
    /* istanbul ignore next */
    (cov_2k2rq9tk7w().s[182]++, Array.from(this.runningTasks.keys()));
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[183]++;
    if (runningTaskIds.length > 0) {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().b[37][0]++;
      cov_2k2rq9tk7w().s[184]++;
      this.logger.info(`Waiting for ${runningTaskIds.length} running tasks to complete`);
      // Wait up to 30 seconds for tasks to complete
      const timeout =
      /* istanbul ignore next */
      (cov_2k2rq9tk7w().s[185]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().f[25]++;
        cov_2k2rq9tk7w().s[186]++;
        this.logger.warn('Shutdown timeout reached, some tasks may not have completed');
      }, 30000));
      // Poll for completion
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[187]++;
      while (this.runningTasks.size > 0) {
        /* istanbul ignore next */
        cov_2k2rq9tk7w().s[188]++;
        await this.delay(1000);
      }
      /* istanbul ignore next */
      cov_2k2rq9tk7w().s[189]++;
      clearTimeout(timeout);
    } else
    /* istanbul ignore next */
    {
      cov_2k2rq9tk7w().b[37][1]++;
    }
    cov_2k2rq9tk7w().s[190]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_2k2rq9tk7w().s[191]++;
    this.logger.info('Discovery Scheduler Service shutdown complete');
  }
  /**
   * Utility method to add delay
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_2k2rq9tk7w().f[26]++;
    cov_2k2rq9tk7w().s[192]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_2k2rq9tk7w().f[27]++;
      cov_2k2rq9tk7w().s[193]++;
      return setTimeout(resolve, ms);
    });
  }
}
// Export singleton instance
export const discoverySchedulerService =
/* istanbul ignore next */
(cov_2k2rq9tk7w().s[194]++, new DiscoverySchedulerService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,