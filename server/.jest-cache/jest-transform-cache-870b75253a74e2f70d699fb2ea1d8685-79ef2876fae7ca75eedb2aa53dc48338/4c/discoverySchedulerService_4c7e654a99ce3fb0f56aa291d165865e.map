{"version":3,"names":["BaseService","curriculumDiscoveryService","DiscoverySchedulerService","scheduledTasks","cov_2k2rq9tk7w","s","Map","runningTasks","taskTimers","isInitialized","constructor","f","initialize","b","logger","info","createDefaultTasks","startScheduler","error","defaultTasks","name","type","frequency","nextRun","getNextRunTime","isActive","config","sources","autoProcess","batchSize","maxAge","removeInactive","removeOlderThan","taskData","task","id","generateTaskId","set","values","scheduleTask","setInterval","checkAndScheduleTasks","now","Date","delay","Math","max","getTime","existingTimer","get","clearTimeout","timer","setTimeout","executeTask","taskId","taskName","execution","startTime","status","result","executeDiscoveryTask","executeVerificationTask","executeCleanupTask","Error","endTime","duration","message","lastRun","delete","documents","discoverDocuments","processedCount","errors","document","documentId","title","errorMsg","push","documentsFound","length","documentsProcessed","undefined","getDiscoveredDocuments","documentsToVerify","filter","doc","timeSinceVerification","lastVerified","slice","verifiedCount","isAvailable","verifyDocument","warn","documentsVerified","removedCount","shouldRemove","documentAge","removed","removeDiscoveredDocument","base","next","setDate","getDate","setHours","setMonth","getMonth","toLowerCase","replace","has","addTask","removeTask","getTasks","Array","from","getTask","getRunningTasks","setTaskStatus","triggerTask","getSchedulerStats","totalTasks","size","activeTasks","t","uptime","shutdown","clear","runningTaskIds","keys","timeout","ms","Promise","resolve","discoverySchedulerService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/discoverySchedulerService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { curriculumDiscoveryService } from './curriculumDiscoveryService';\n// import { activityDiscoveryService } from './activityDiscoveryService'; // Unused import\n\nexport interface ScheduledTask {\n  id: string;\n  name: string;\n  type: 'discovery' | 'verification' | 'cleanup';\n  frequency: 'daily' | 'weekly' | 'monthly';\n  lastRun?: Date;\n  nextRun: Date;\n  isActive: boolean;\n  config: Record<string, unknown>;\n}\n\nexport interface TaskExecution {\n  taskId: string;\n  startTime: Date;\n  endTime?: Date;\n  status: 'running' | 'completed' | 'failed';\n  result?: {\n    documentsFound?: number;\n    documentsVerified?: number;\n    documentsProcessed?: number;\n    errors?: string[];\n  };\n  error?: string;\n}\n\n/**\n * Discovery Scheduler Service\n * Manages background tasks for curriculum document discovery and monitoring\n */\nexport class DiscoverySchedulerService extends BaseService {\n  private scheduledTasks: Map<string, ScheduledTask> = new Map();\n  private runningTasks: Map<string, TaskExecution> = new Map();\n  private taskTimers: Map<string, NodeJS.Timeout> = new Map();\n  private isInitialized: boolean = false;\n\n  constructor() {\n    super('DiscoverySchedulerService');\n  }\n\n  /**\n   * Initialize the scheduler with default tasks\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      this.logger.info('Initializing Discovery Scheduler Service');\n      \n      // Create default scheduled tasks\n      await this.createDefaultTasks();\n      \n      // Start the scheduler\n      this.startScheduler();\n      \n      this.isInitialized = true;\n      this.logger.info('Discovery Scheduler Service initialized successfully');\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to initialize Discovery Scheduler Service');\n      throw error;\n    }\n  }\n\n  /**\n   * Create default scheduled tasks\n   */\n  private async createDefaultTasks(): Promise<void> {\n    const defaultTasks: Omit<ScheduledTask, 'id'>[] = [\n      {\n        name: 'Daily Curriculum Discovery',\n        type: 'discovery',\n        frequency: 'daily',\n        nextRun: this.getNextRunTime('daily'),\n        isActive: true,\n        config: {\n          sources: ['pei-gov', 'ontario-edu', 'bc-gov'],\n          autoProcess: false, // Don't auto-process, require manual review\n        },\n      },\n      {\n        name: 'Weekly Document Verification',\n        type: 'verification',\n        frequency: 'weekly',\n        nextRun: this.getNextRunTime('weekly'),\n        isActive: true,\n        config: {\n          batchSize: 50, // Verify 50 documents at a time\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds\n        },\n      },\n      {\n        name: 'Monthly Cleanup',\n        type: 'cleanup',\n        frequency: 'monthly',\n        nextRun: this.getNextRunTime('monthly'),\n        isActive: true,\n        config: {\n          removeInactive: true,\n          removeOlderThan: 90 * 24 * 60 * 60 * 1000, // 90 days\n        },\n      },\n    ];\n\n    for (const taskData of defaultTasks) {\n      const task: ScheduledTask = {\n        id: this.generateTaskId(taskData.name),\n        ...taskData,\n      };\n      \n      this.scheduledTasks.set(task.id, task);\n      this.logger.info(`Created task: ${task.name} (${task.id})`);\n    }\n  }\n\n  /**\n   * Start the task scheduler\n   */\n  private startScheduler(): void {\n    this.logger.info('Starting task scheduler');\n    \n    // Schedule all active tasks\n    for (const task of this.scheduledTasks.values()) {\n      if (task.isActive) {\n        this.scheduleTask(task);\n      }\n    }\n\n    // Set up periodic scheduler check (every hour)\n    setInterval(() => {\n      this.checkAndScheduleTasks();\n    }, 60 * 60 * 1000);\n  }\n\n  /**\n   * Schedule a specific task\n   */\n  private scheduleTask(task: ScheduledTask): void {\n    const now = new Date();\n    const delay = Math.max(0, task.nextRun.getTime() - now.getTime());\n    \n    // Clear existing timer if any\n    const existingTimer = this.taskTimers.get(task.id);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Schedule the task\n    const timer = setTimeout(() => {\n      this.executeTask(task);\n    }, delay);\n\n    this.taskTimers.set(task.id, timer);\n    \n    this.logger.info(\n      { taskId: task.id, taskName: task.name, nextRun: task.nextRun, delay },\n      'Task scheduled'\n    );\n  }\n\n  /**\n   * Execute a scheduled task\n   */\n  private async executeTask(task: ScheduledTask): Promise<void> {\n    const execution: TaskExecution = {\n      taskId: task.id,\n      startTime: new Date(),\n      status: 'running',\n    };\n\n    this.runningTasks.set(task.id, execution);\n\n    try {\n      this.logger.info({ taskId: task.id, taskName: task.name }, 'Starting task execution');\n\n      let result: TaskExecution['result'];\n\n      switch (task.type) {\n        case 'discovery':\n          result = await this.executeDiscoveryTask(task);\n          break;\n        case 'verification':\n          result = await this.executeVerificationTask(task);\n          break;\n        case 'cleanup':\n          result = await this.executeCleanupTask(task);\n          break;\n        default:\n          throw new Error(`Unknown task type: ${task.type}`);\n      }\n\n      execution.result = result;\n      execution.status = 'completed';\n      execution.endTime = new Date();\n\n      this.logger.info(\n        { taskId: task.id, taskName: task.name, result, duration: execution.endTime.getTime() - execution.startTime.getTime() },\n        'Task completed successfully'\n      );\n    } catch (error) {\n      execution.status = 'failed';\n      execution.error = error instanceof Error ? error.message : 'Unknown error';\n      execution.endTime = new Date();\n\n      this.logger.error(\n        { taskId: task.id, taskName: task.name, error },\n        'Task execution failed'\n      );\n    } finally {\n      // Update task schedule\n      task.lastRun = execution.startTime;\n      task.nextRun = this.getNextRunTime(task.frequency, task.lastRun);\n\n      // Schedule next execution\n      this.scheduleTask(task);\n\n      // Keep execution record but remove from running tasks\n      this.runningTasks.delete(task.id);\n    }\n  }\n\n  /**\n   * Execute curriculum discovery task\n   */\n  private async executeDiscoveryTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    \n    try {\n      const documents = await curriculumDiscoveryService.discoverDocuments();\n      \n      let processedCount = 0;\n      const errors: string[] = [];\n\n      // Auto-process documents if configured\n      if (config.autoProcess) {\n        for (const document of documents) {\n          try {\n            // This would require a user ID - in practice, this might be a system user\n            // For now, we'll just log the discovery\n            this.logger.info(\n              { documentId: document.id, title: document.title },\n              'Document discovered (auto-processing disabled)'\n            );\n            processedCount++;\n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to process ${document.title}: ${errorMsg}`);\n          }\n        }\n      }\n\n      return {\n        documentsFound: documents.length,\n        documentsProcessed: processedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Discovery task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute document verification task\n   */\n  private async executeVerificationTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    const batchSize = (config.batchSize as number) || 50;\n    const maxAge = (config.maxAge as number) || 7 * 24 * 60 * 60 * 1000;\n\n    try {\n      const documents = curriculumDiscoveryService.getDiscoveredDocuments();\n      const now = new Date();\n      \n      // Find documents that need verification\n      const documentsToVerify = documents.filter(doc => {\n        const timeSinceVerification = now.getTime() - doc.lastVerified.getTime();\n        return timeSinceVerification > maxAge;\n      }).slice(0, batchSize);\n\n      let verifiedCount = 0;\n      const errors: string[] = [];\n\n      for (const document of documentsToVerify) {\n        try {\n          const isAvailable = await curriculumDiscoveryService.verifyDocument(document.id);\n          \n          if (isAvailable) {\n            verifiedCount++;\n          } else {\n            this.logger.warn(\n              { documentId: document.id, title: document.title },\n              'Document is no longer available'\n            );\n          }\n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          errors.push(`Failed to verify ${document.title}: ${errorMsg}`);\n        }\n\n        // Add delay between verifications to be respectful\n        await this.delay(1000);\n      }\n\n      return {\n        documentsVerified: verifiedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Verification task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Execute cleanup task\n   */\n  private async executeCleanupTask(task: ScheduledTask): Promise<TaskExecution['result']> {\n    const config = task.config;\n    const removeInactive = config.removeInactive as boolean;\n    const removeOlderThan = (config.removeOlderThan as number) || 90 * 24 * 60 * 60 * 1000;\n\n    try {\n      const documents = curriculumDiscoveryService.getDiscoveredDocuments();\n      const now = new Date();\n      \n      let removedCount = 0;\n      const errors: string[] = [];\n\n      for (const document of documents) {\n        let shouldRemove = false;\n\n        // Remove inactive documents if configured\n        if (removeInactive && !document.isActive) {\n          shouldRemove = true;\n        }\n\n        // Remove old documents\n        const documentAge = now.getTime() - document.lastVerified.getTime();\n        if (documentAge > removeOlderThan) {\n          shouldRemove = true;\n        }\n\n        if (shouldRemove) {\n          try {\n            const removed = curriculumDiscoveryService.removeDiscoveredDocument(document.id);\n            if (removed) {\n              removedCount++;\n              this.logger.info(\n                { documentId: document.id, title: document.title },\n                'Document removed during cleanup'\n              );\n            }\n          } catch (error) {\n            const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n            errors.push(`Failed to remove ${document.title}: ${errorMsg}`);\n          }\n        }\n      }\n\n      return {\n        documentsProcessed: removedCount,\n        errors: errors.length > 0 ? errors : undefined,\n      };\n    } catch (error) {\n      throw new Error(`Cleanup task failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get the next run time for a task frequency\n   */\n  private getNextRunTime(frequency: ScheduledTask['frequency'], lastRun?: Date): Date {\n    const base = lastRun || new Date();\n    const next = new Date(base);\n\n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        next.setHours(2, 0, 0, 0); // Run at 2 AM\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        next.setHours(3, 0, 0, 0); // Run at 3 AM\n        break;\n      case 'monthly':\n        next.setMonth(next.getMonth() + 1);\n        next.setDate(1); // First day of the month\n        next.setHours(4, 0, 0, 0); // Run at 4 AM\n        break;\n    }\n\n    return next;\n  }\n\n  /**\n   * Generate a unique task ID\n   */\n  private generateTaskId(name: string): string {\n    return name.toLowerCase().replace(/\\s+/g, '-') + '-' + Date.now();\n  }\n\n  /**\n   * Check and schedule tasks that might have been missed\n   */\n  private checkAndScheduleTasks(): void {\n    const now = new Date();\n    \n    for (const task of this.scheduledTasks.values()) {\n      if (task.isActive && task.nextRun <= now && !this.runningTasks.has(task.id)) {\n        this.logger.info(\n          { taskId: task.id, taskName: task.name },\n          'Rescheduling missed task'\n        );\n        this.scheduleTask(task);\n      }\n    }\n  }\n\n  /**\n   * Add a new scheduled task\n   */\n  addTask(taskData: Omit<ScheduledTask, 'id'>): string {\n    const task: ScheduledTask = {\n      id: this.generateTaskId(taskData.name),\n      ...taskData,\n    };\n\n    this.scheduledTasks.set(task.id, task);\n    \n    if (task.isActive) {\n      this.scheduleTask(task);\n    }\n\n    this.logger.info({ taskId: task.id, taskName: task.name }, 'Task added');\n    return task.id;\n  }\n\n  /**\n   * Remove a scheduled task\n   */\n  removeTask(taskId: string): boolean {\n    const timer = this.taskTimers.get(taskId);\n    if (timer) {\n      clearTimeout(timer);\n      this.taskTimers.delete(taskId);\n    }\n\n    const removed = this.scheduledTasks.delete(taskId);\n    \n    if (removed) {\n      this.logger.info({ taskId }, 'Task removed');\n    }\n\n    return removed;\n  }\n\n  /**\n   * Get all scheduled tasks\n   */\n  getTasks(): ScheduledTask[] {\n    return Array.from(this.scheduledTasks.values());\n  }\n\n  /**\n   * Get task by ID\n   */\n  getTask(taskId: string): ScheduledTask | undefined {\n    return this.scheduledTasks.get(taskId);\n  }\n\n  /**\n   * Get running tasks\n   */\n  getRunningTasks(): TaskExecution[] {\n    return Array.from(this.runningTasks.values());\n  }\n\n  /**\n   * Enable or disable a task\n   */\n  setTaskStatus(taskId: string, isActive: boolean): boolean {\n    const task = this.scheduledTasks.get(taskId);\n    if (!task) return false;\n\n    task.isActive = isActive;\n\n    if (isActive) {\n      this.scheduleTask(task);\n    } else {\n      const timer = this.taskTimers.get(taskId);\n      if (timer) {\n        clearTimeout(timer);\n        this.taskTimers.delete(taskId);\n      }\n    }\n\n    this.logger.info(\n      { taskId, taskName: task.name, isActive },\n      'Task status updated'\n    );\n\n    return true;\n  }\n\n  /**\n   * Manually trigger a task\n   */\n  async triggerTask(taskId: string): Promise<void> {\n    const task = this.scheduledTasks.get(taskId);\n    if (!task) {\n      throw new Error(`Task not found: ${taskId}`);\n    }\n\n    if (this.runningTasks.has(taskId)) {\n      throw new Error(`Task is already running: ${taskId}`);\n    }\n\n    this.logger.info({ taskId, taskName: task.name }, 'Manually triggering task');\n    await this.executeTask(task);\n  }\n\n  /**\n   * Get scheduler statistics\n   */\n  getSchedulerStats(): {\n    totalTasks: number;\n    activeTasks: number;\n    runningTasks: number;\n    uptime: number;\n  } {\n    return {\n      totalTasks: this.scheduledTasks.size,\n      activeTasks: Array.from(this.scheduledTasks.values()).filter(t => t.isActive).length,\n      runningTasks: this.runningTasks.size,\n      uptime: this.isInitialized ? Date.now() - Date.now() : 0, // Would track actual uptime in production\n    };\n  }\n\n  /**\n   * Shutdown the scheduler\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Shutting down Discovery Scheduler Service');\n\n    // Cancel all timers\n    for (const timer of this.taskTimers.values()) {\n      clearTimeout(timer);\n    }\n    this.taskTimers.clear();\n\n    // Wait for running tasks to complete (with timeout)\n    const runningTaskIds = Array.from(this.runningTasks.keys());\n    if (runningTaskIds.length > 0) {\n      this.logger.info(`Waiting for ${runningTaskIds.length} running tasks to complete`);\n      \n      // Wait up to 30 seconds for tasks to complete\n      const timeout = setTimeout(() => {\n        this.logger.warn('Shutdown timeout reached, some tasks may not have completed');\n      }, 30000);\n\n      // Poll for completion\n      while (this.runningTasks.size > 0) {\n        await this.delay(1000);\n      }\n\n      clearTimeout(timeout);\n    }\n\n    this.isInitialized = false;\n    this.logger.info('Discovery Scheduler Service shutdown complete');\n  }\n\n  /**\n   * Utility method to add delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const discoverySchedulerService = new DiscoverySchedulerService();"],"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","ignoreList":[]}