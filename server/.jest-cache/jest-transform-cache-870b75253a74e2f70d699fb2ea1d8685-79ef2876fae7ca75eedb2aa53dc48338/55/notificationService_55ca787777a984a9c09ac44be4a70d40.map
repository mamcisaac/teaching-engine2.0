{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/notificationService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { emailService } from './emailService';\nimport { prisma } from '../prisma';\n\nexport interface Notification {\n  id: string;\n  userId: number;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  message: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  channels: ('in_app' | 'email' | 'push')[];\n  metadata?: Record<string, unknown>;\n  expiresAt?: Date;\n  createdAt: Date;\n}\n\nexport interface NotificationPreferences {\n  userId: number;\n  emailEnabled: boolean;\n  pushEnabled: boolean;\n  quietHours: {\n    start: string; // HH:MM format\n    end: string; // HH:MM format\n  };\n  categories: {\n    [category: string]: {\n      enabled: boolean;\n      channels: ('in_app' | 'email' | 'push')[];\n    };\n  };\n}\n\nexport interface NotificationTemplate {\n  id: string;\n  name: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  title: string;\n  messageTemplate: string;\n  defaultChannels: ('in_app' | 'email' | 'push')[];\n  variables: string[];\n}\n\nexport class NotificationService extends BaseService {\n  private notifications: Map<string, Notification> = new Map();\n  private preferences: Map<number, NotificationPreferences> = new Map();\n  private templates: Map<string, NotificationTemplate> = new Map();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    super('NotificationService');\n    this.initializeDefaultTemplates();\n    this.startCleanupTask();\n  }\n\n  /**\n   * Send a notification to a user\n   */\n  async sendNotification(\n    userId: number,\n    notification: Omit<Notification, 'id' | 'userId' | 'createdAt'>,\n  ): Promise<string> {\n    try {\n      this.validateRequired({ userId, title: notification.title, message: notification.message }, [\n        'userId',\n        'title',\n        'message',\n      ]);\n\n      const notificationId = `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      const fullNotification: Notification = {\n        id: notificationId,\n        userId,\n        createdAt: new Date(),\n        ...notification,\n      };\n\n      // Check user preferences\n      const userPrefs = await this.getUserPreferences(userId);\n      const effectiveChannels = this.filterChannelsByPreferences(notification.channels, userPrefs);\n\n      if (effectiveChannels.length === 0) {\n        this.logger.info({ userId, notificationId }, 'No enabled channels for notification');\n        return notificationId;\n      }\n\n      // Store in-app notification\n      if (effectiveChannels.includes('in_app')) {\n        this.notifications.set(notificationId, fullNotification);\n      }\n\n      // Send email notification\n      if (effectiveChannels.includes('email') && userPrefs.emailEnabled) {\n        await this.sendEmailNotification(userId, fullNotification);\n      }\n\n      // Send push notification (placeholder for future implementation)\n      if (effectiveChannels.includes('push') && userPrefs.pushEnabled) {\n        await this.sendPushNotification(userId, fullNotification);\n      }\n\n      this.logger.info(\n        {\n          userId,\n          notificationId,\n          type: notification.type,\n          channels: effectiveChannels,\n        },\n        'Notification sent successfully',\n      );\n\n      return notificationId;\n    } catch (error) {\n      this.handleError(error, { userId, notification });\n    }\n  }\n\n  /**\n   * Send notification using a template\n   */\n  async sendTemplatedNotification(\n    userId: number,\n    templateId: string,\n    variables: Record<string, string>,\n    options: {\n      priority?: 'low' | 'medium' | 'high' | 'urgent';\n      channels?: ('in_app' | 'email' | 'push')[];\n      expiresAt?: Date;\n      metadata?: Record<string, unknown>;\n    } = {},\n  ): Promise<string> {\n    try {\n      const template = this.templates.get(templateId);\n      if (!template) {\n        throw new Error(`Template ${templateId} not found`);\n      }\n\n      // Replace template variables\n      let message = template.messageTemplate;\n      for (const [key, value] of Object.entries(variables)) {\n        const regex = new RegExp(`{{${key}}}`, 'g');\n        message = message.replace(regex, value);\n      }\n\n      let title = template.title;\n      for (const [key, value] of Object.entries(variables)) {\n        const regex = new RegExp(`{{${key}}}`, 'g');\n        title = title.replace(regex, value);\n      }\n\n      return await this.sendNotification(userId, {\n        type: template.type,\n        title,\n        message,\n        priority: options.priority || 'medium',\n        channels: options.channels || template.defaultChannels,\n        metadata: options.metadata,\n        expiresAt: options.expiresAt,\n      });\n    } catch (error) {\n      this.handleError(error, { userId, templateId, variables });\n    }\n  }\n\n  /**\n   * Get in-app notifications for a user\n   */\n  async getUserNotifications(\n    userId: number,\n    options: {\n      limit?: number;\n      offset?: number;\n      unreadOnly?: boolean;\n    } = {},\n  ): Promise<{\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n  }> {\n    try {\n      const { limit = 50, offset = 0, unreadOnly = false } = options;\n\n      const userNotifications = Array.from(this.notifications.values())\n        .filter((n) => n.userId === userId)\n        .filter((n) => !unreadOnly || !this.isNotificationRead(n.id))\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n      const total = userNotifications.length;\n      const unreadCount = userNotifications.filter((n) => !this.isNotificationRead(n.id)).length;\n      const notifications = userNotifications.slice(offset, offset + limit);\n\n      return { notifications, total, unreadCount };\n    } catch (error) {\n      this.handleError(error, { userId, options });\n    }\n  }\n\n  /**\n   * Mark notification as read\n   */\n  async markAsRead(notificationId: string, userId: number): Promise<boolean> {\n    try {\n      const notification = this.notifications.get(notificationId);\n      if (!notification || notification.userId !== userId) {\n        return false;\n      }\n\n      // In a real implementation, you'd store read status in database\n      // For now, we'll use a simple in-memory approach\n      this.setNotificationRead(notificationId, true);\n\n      this.logger.debug({ notificationId, userId }, 'Notification marked as read');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, notificationId, userId }, 'Failed to mark notification as read');\n      return false;\n    }\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   */\n  async markAllAsRead(userId: number): Promise<number> {\n    try {\n      let markedCount = 0;\n\n      for (const notification of this.notifications.values()) {\n        if (notification.userId === userId && !this.isNotificationRead(notification.id)) {\n          this.setNotificationRead(notification.id, true);\n          markedCount++;\n        }\n      }\n\n      this.logger.info({ userId, markedCount }, 'Marked all notifications as read');\n      return markedCount;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to mark all notifications as read');\n      return 0;\n    }\n  }\n\n  /**\n   * Delete a notification\n   */\n  async deleteNotification(notificationId: string, userId: number): Promise<boolean> {\n    try {\n      const notification = this.notifications.get(notificationId);\n      if (!notification || notification.userId !== userId) {\n        return false;\n      }\n\n      this.notifications.delete(notificationId);\n      this.logger.debug({ notificationId, userId }, 'Notification deleted');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, notificationId, userId }, 'Failed to delete notification');\n      return false;\n    }\n  }\n\n  /**\n   * Update user notification preferences\n   */\n  async updatePreferences(\n    userId: number,\n    preferences: Partial<NotificationPreferences>,\n  ): Promise<void> {\n    try {\n      const current = this.preferences.get(userId) || this.getDefaultPreferences(userId);\n      const updated = { ...current, ...preferences, userId };\n\n      this.preferences.set(userId, updated);\n\n      // Currently stored in memory for this session\n      this.logger.info({ userId }, 'User notification preferences updated');\n    } catch (error) {\n      this.handleError(error, { userId, preferences });\n    }\n  }\n\n  /**\n   * Get user notification preferences\n   */\n  async getUserPreferences(userId: number): Promise<NotificationPreferences> {\n    try {\n      let prefs = this.preferences.get(userId);\n\n      if (!prefs) {\n        // Use default preferences for this session\n        prefs = this.getDefaultPreferences(userId);\n        this.preferences.set(userId, prefs);\n      }\n\n      return prefs;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user preferences');\n      return this.getDefaultPreferences(userId);\n    }\n  }\n\n  /**\n   * Create a custom notification template\n   */\n  createTemplate(template: NotificationTemplate): void {\n    this.templates.set(template.id, template);\n    this.logger.info(\n      { templateId: template.id, name: template.name },\n      'Notification template created',\n    );\n  }\n\n  /**\n   * Get available notification templates\n   */\n  getTemplates(): NotificationTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  /**\n   * Send bulk notifications to multiple users\n   */\n  async sendBulkNotification(\n    userIds: number[],\n    notification: Omit<Notification, 'id' | 'userId' | 'createdAt'>,\n  ): Promise<{\n    sent: string[];\n    failed: { userId: number; error: string }[];\n  }> {\n    const operations = userIds.map((userId) => () => this.sendNotification(userId, notification));\n\n    const { results, errors } = await this.withParallel(operations, {\n      failFast: false,\n      maxConcurrency: 10,\n    });\n\n    const sent: string[] = [];\n    const failed: { userId: number; error: string }[] = [];\n\n    for (let i = 0; i < userIds.length; i++) {\n      if (results[i] !== null) {\n        sent.push(results[i] as string);\n      } else {\n        failed.push({\n          userId: userIds[i],\n          error: errors[i]?.message || 'Unknown error',\n        });\n      }\n    }\n\n    this.logger.info(\n      {\n        totalUsers: userIds.length,\n        sent: sent.length,\n        failed: failed.length,\n      },\n      'Bulk notification completed',\n    );\n\n    return { sent, failed };\n  }\n\n  // Private methods\n\n  private async sendEmailNotification(userId: number, notification: Notification): Promise<void> {\n    try {\n      // Get user email\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { email: true, name: true },\n      });\n\n      if (!user?.email) {\n        throw new Error('User email not found');\n      }\n\n      // Check quiet hours\n      const prefs = await this.getUserPreferences(userId);\n      if (this.isInQuietHours(prefs.quietHours)) {\n        this.logger.debug({ userId }, 'Skipping email due to quiet hours');\n        return;\n      }\n\n      const subject = `[Teaching Engine] ${notification.title}`;\n      const html = this.formatEmailNotification(notification, user.name);\n\n      await emailService.sendEmail(user.email, subject, html);\n\n      this.logger.debug({ userId, notificationId: notification.id }, 'Email notification sent');\n    } catch (error) {\n      this.logger.error(\n        { error, userId, notificationId: notification.id },\n        'Failed to send email notification',\n      );\n    }\n  }\n\n  private async sendPushNotification(userId: number, notification: Notification): Promise<void> {\n    // Push notifications not implemented - using in-app notifications only\n    this.logger.debug(\n      { userId, notificationId: notification.id },\n      'Push notification skipped - using in-app notifications',\n    );\n  }\n\n  private filterChannelsByPreferences(\n    requestedChannels: ('in_app' | 'email' | 'push')[],\n    preferences: NotificationPreferences,\n  ): ('in_app' | 'email' | 'push')[] {\n    return requestedChannels.filter((channel) => {\n      switch (channel) {\n        case 'email':\n          return preferences.emailEnabled;\n        case 'push':\n          return preferences.pushEnabled;\n        case 'in_app':\n          return true; // Always allow in-app notifications\n        default:\n          return false;\n      }\n    });\n  }\n\n  private formatEmailNotification(notification: Notification, userName: string): string {\n    const priorityColor = {\n      low: '#28a745',\n      medium: '#ffc107',\n      high: '#fd7e14',\n      urgent: '#dc3545',\n    }[notification.priority];\n\n    return `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background-color: ${priorityColor}; color: white; padding: 20px; text-align: center;\">\n          <h1 style=\"margin: 0;\">${notification.title}</h1>\n        </div>\n        <div style=\"padding: 20px; background-color: #f8f9fa;\">\n          <p>Hello ${userName},</p>\n          <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\n            ${notification.message.replace(/\\n/g, '<br>')}\n          </div>\n          <p style=\"color: #6c757d; font-size: 12px;\">\n            This is an automated notification from Teaching Engine 2.0.<br>\n            Priority: ${notification.priority.toUpperCase()}<br>\n            Sent: ${notification.createdAt.toLocaleString()}\n          </p>\n        </div>\n      </div>\n    `;\n  }\n\n  private getDefaultPreferences(userId: number): NotificationPreferences {\n    return {\n      userId,\n      emailEnabled: true,\n      pushEnabled: false,\n      quietHours: {\n        start: '22:00',\n        end: '07:00',\n      },\n      categories: {\n        milestone: { enabled: true, channels: ['in_app', 'email'] },\n        activity: { enabled: true, channels: ['in_app'] },\n        system: { enabled: true, channels: ['in_app', 'email'] },\n        reminder: { enabled: true, channels: ['in_app'] },\n      },\n    };\n  }\n\n  private isInQuietHours(quietHours: { start: string; end: string }): boolean {\n    const now = new Date();\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n    const { start, end } = quietHours;\n\n    if (start <= end) {\n      // Same day quiet hours (e.g., 22:00 to 23:59)\n      return currentTime >= start && currentTime <= end;\n    } else {\n      // Cross-midnight quiet hours (e.g., 22:00 to 07:00)\n      return currentTime >= start || currentTime <= end;\n    }\n  }\n\n  private isNotificationRead(notificationId: string): boolean {\n    // In a real implementation, store read status in database\n    // For now, use a simple in-memory Set\n    return this.readNotifications.has(notificationId);\n  }\n\n  private setNotificationRead(notificationId: string, read: boolean): void {\n    if (read) {\n      this.readNotifications.add(notificationId);\n    } else {\n      this.readNotifications.delete(notificationId);\n    }\n  }\n\n  private readNotifications = new Set<string>();\n\n  private initializeDefaultTemplates(): void {\n    const templates: NotificationTemplate[] = [\n      {\n        id: 'milestone_deadline',\n        name: 'Milestone Deadline',\n        type: 'warning',\n        title: 'Milestone Deadline Approaching',\n        messageTemplate:\n          'The milestone \"{{milestoneName}}\" is due on {{dueDate}}. You have {{daysLeft}} days remaining.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['milestoneName', 'dueDate', 'daysLeft'],\n      },\n      {\n        id: 'activity_completed',\n        name: 'Activity Completed',\n        type: 'success',\n        title: 'Activity Completed',\n        messageTemplate: 'Great job! You have completed the activity \"{{activityName}}\".',\n        defaultChannels: ['in_app'],\n        variables: ['activityName'],\n      },\n      {\n        id: 'coverage_gap',\n        name: 'Coverage Gap Alert',\n        type: 'warning',\n        title: 'Curriculum Coverage Gap Detected',\n        messageTemplate:\n          'We detected a gap in your curriculum coverage for {{subject}}. Consider reviewing outcomes: {{outcomes}}.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['subject', 'outcomes'],\n      },\n      {\n        id: 'system_maintenance',\n        name: 'System Maintenance',\n        type: 'info',\n        title: 'Scheduled Maintenance',\n        messageTemplate:\n          'Teaching Engine will undergo maintenance on {{date}} from {{startTime}} to {{endTime}}. Please save your work.',\n        defaultChannels: ['in_app', 'email'],\n        variables: ['date', 'startTime', 'endTime'],\n      },\n    ];\n\n    for (const template of templates) {\n      this.templates.set(template.id, template);\n    }\n  }\n\n  private startCleanupTask(): void {\n    // Clean up expired notifications every hour\n    this.cleanupInterval = setInterval(\n      () => {\n        const now = new Date();\n        let cleanedCount = 0;\n\n        for (const [id, notification] of this.notifications.entries()) {\n          if (notification.expiresAt && notification.expiresAt < now) {\n            this.notifications.delete(id);\n            cleanedCount++;\n          }\n        }\n\n        if (cleanedCount > 0) {\n          this.logger.info({ cleanedCount }, 'Cleaned up expired notifications');\n        }\n      },\n      60 * 60 * 1000,\n    ); // 1 hour\n  }\n\n  /**\n   * Cleanup resources on service shutdown\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n  }\n}\n\n// Export singleton instance\nexport const notificationService = new NotificationService();\n"],"version":3}