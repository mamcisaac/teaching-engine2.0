{"version":3,"names":["cov_2b8utlj76","actualCoverage","logger","PerformanceMonitor","metrics","requestTimings","s","maxTimings","slowRequestThreshold","constructor","f","totalRequests","averageResponseTime","slowRequests","errorRate","requestsPerMinute","memoryUsage","process","lastReset","Date","setInterval","updateMetrics","middleware","req","res","next","startTime","hrtime","bigint","memoryBefore","heapUsed","originalEnd","end","args","endTime","duration","Number","memoryAfter","timing","method","route","b","path","statusCode","timestamp","performanceMonitor","recordRequest","warn","toFixed","memoryDelta","apply","push","length","slice","totalTime","totalErrors","filter","t","now","oneMinuteAgo","getTime","recentRequests","minutesSinceReset","logPerformanceSummary","resetCounters","summary","getPerformanceSummary","info","performance","heapTotal","external","rss","slowRequestPercentage","recentTimings","routeStats","getRouteStatistics","Math","round","uptimeMinutes","timings","routeMap","Map","key","stats","get","count","errors","set","entries","requestCount","sort","a","getSlowestEndpoints","limit","times","endpointStats","avgTime","reduce","maxTime","max","p95Time","percentile","averageTime","errorCount","arr","p","sorted","index","ceil","getHealthStatus","memUsageMB","isHealthy","healthy","details","responseTime"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/performanceMonitoring.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport logger from '../logger';\n\ninterface PerformanceMetrics {\n  totalRequests: number;\n  averageResponseTime: number;\n  slowRequests: number;\n  errorRate: number;\n  requestsPerMinute: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  lastReset: Date;\n}\n\ninterface RequestTiming {\n  method: string;\n  route: string;\n  duration: number;\n  statusCode: number;\n  timestamp: Date;\n  memoryBefore: number;\n  memoryAfter: number;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetrics;\n  private requestTimings: RequestTiming[] = [];\n  private readonly maxTimings = 1000; // Keep last 1000 requests\n  private readonly slowRequestThreshold = 1000; // 1 second\n\n  constructor() {\n    this.metrics = {\n      totalRequests: 0,\n      averageResponseTime: 0,\n      slowRequests: 0,\n      errorRate: 0,\n      requestsPerMinute: 0,\n      memoryUsage: process.memoryUsage(),\n      lastReset: new Date()\n    };\n\n    // Update metrics every minute\n    setInterval(() => this.updateMetrics(), 60000);\n  }\n\n  middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const startTime = process.hrtime.bigint();\n      const memoryBefore = process.memoryUsage().heapUsed;\n\n      // Override res.end to capture response time\n      const originalEnd = res.end;\n      res.end = function(this: Response, ...args: unknown[]): Response {\n        const endTime = process.hrtime.bigint();\n        const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n        const memoryAfter = process.memoryUsage().heapUsed;\n\n        // Record the request timing\n        const timing: RequestTiming = {\n          method: req.method,\n          route: req.route?.path || req.path,\n          duration,\n          statusCode: res.statusCode,\n          timestamp: new Date(),\n          memoryBefore,\n          memoryAfter\n        };\n\n        performanceMonitor.recordRequest(timing);\n\n        // Log slow requests\n        if (duration > performanceMonitor.slowRequestThreshold) {\n          logger.warn({\n            method: req.method,\n            route: timing.route,\n            duration: `${duration.toFixed(2)}ms`,\n            statusCode: res.statusCode,\n            memoryDelta: `${((memoryAfter - memoryBefore) / 1024 / 1024).toFixed(2)}MB`\n          }, 'Slow request detected');\n        }\n\n        // Call original end method and return the response\n        return originalEnd.apply(this, args) as Response;\n      };\n\n      next();\n    };\n  }\n\n  recordRequest(timing: RequestTiming): void {\n    this.requestTimings.push(timing);\n    \n    // Keep only the most recent timings\n    if (this.requestTimings.length > this.maxTimings) {\n      this.requestTimings = this.requestTimings.slice(-this.maxTimings);\n    }\n\n    this.metrics.totalRequests++;\n    \n    // Update average response time (rolling average)\n    const totalTime = this.metrics.averageResponseTime * (this.metrics.totalRequests - 1);\n    this.metrics.averageResponseTime = (totalTime + timing.duration) / this.metrics.totalRequests;\n\n    // Count slow requests\n    if (timing.duration > this.slowRequestThreshold) {\n      this.metrics.slowRequests++;\n    }\n\n    // Update error rate\n    if (timing.statusCode >= 400) {\n      const totalErrors = this.requestTimings.filter(t => t.statusCode >= 400).length;\n      this.metrics.errorRate = (totalErrors / this.requestTimings.length) * 100;\n    }\n  }\n\n  private updateMetrics(): void {\n    const now = new Date();\n    const oneMinuteAgo = new Date(now.getTime() - 60000);\n    \n    // Calculate requests per minute\n    const recentRequests = this.requestTimings.filter(t => t.timestamp > oneMinuteAgo);\n    this.metrics.requestsPerMinute = recentRequests.length;\n    \n    // Update memory usage\n    this.metrics.memoryUsage = process.memoryUsage();\n\n    // Log performance summary every 5 minutes\n    const minutesSinceReset = (now.getTime() - this.metrics.lastReset.getTime()) / (1000 * 60);\n    if (minutesSinceReset >= 5) {\n      this.logPerformanceSummary();\n      this.resetCounters();\n    }\n  }\n\n  private logPerformanceSummary(): void {\n    const summary = this.getPerformanceSummary();\n    \n    logger.info({\n      performance: summary,\n      memoryUsage: {\n        heapUsed: `${(this.metrics.memoryUsage.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n        heapTotal: `${(this.metrics.memoryUsage.heapTotal / 1024 / 1024).toFixed(2)}MB`,\n        external: `${(this.metrics.memoryUsage.external / 1024 / 1024).toFixed(2)}MB`,\n        rss: `${(this.metrics.memoryUsage.rss / 1024 / 1024).toFixed(2)}MB`\n      }\n    }, 'Performance summary');\n\n    // Warn about performance issues\n    if (summary.averageResponseTime > 500) {\n      logger.warn('High average response time detected');\n    }\n    \n    if (summary.errorRate > 5) {\n      logger.warn('High error rate detected');\n    }\n\n    if (summary.slowRequestPercentage > 10) {\n      logger.warn('High percentage of slow requests detected');\n    }\n  }\n\n  private resetCounters(): void {\n    this.metrics.lastReset = new Date();\n    // Keep running totals but reset some metrics\n    this.metrics.slowRequests = 0;\n  }\n\n  getPerformanceSummary() {\n    const slowRequestPercentage = this.metrics.totalRequests > 0 \n      ? (this.metrics.slowRequests / this.metrics.totalRequests) * 100 \n      : 0;\n\n    const recentTimings = this.requestTimings.slice(-100); // Last 100 requests\n    const routeStats = this.getRouteStatistics(recentTimings);\n\n    return {\n      totalRequests: this.metrics.totalRequests,\n      averageResponseTime: Math.round(this.metrics.averageResponseTime * 100) / 100,\n      requestsPerMinute: this.metrics.requestsPerMinute,\n      errorRate: Math.round(this.metrics.errorRate * 100) / 100,\n      slowRequestPercentage: Math.round(slowRequestPercentage * 100) / 100,\n      slowRequestThreshold: this.slowRequestThreshold,\n      uptimeMinutes: Math.round((Date.now() - this.metrics.lastReset.getTime()) / (1000 * 60)),\n      routeStats\n    };\n  }\n\n  private getRouteStatistics(timings: RequestTiming[]) {\n    const routeMap = new Map<string, { count: number; totalTime: number; errors: number }>();\n    \n    for (const timing of timings) {\n      const key = `${timing.method} ${timing.route}`;\n      const stats = routeMap.get(key) || { count: 0, totalTime: 0, errors: 0 };\n      \n      stats.count++;\n      stats.totalTime += timing.duration;\n      if (timing.statusCode >= 400) {\n        stats.errors++;\n      }\n      \n      routeMap.set(key, stats);\n    }\n\n    const routeStats: Array<{\n      route: string;\n      requestCount: number;\n      averageResponseTime: number;\n      errorRate: number;\n    }> = [];\n    for (const [route, stats] of routeMap.entries()) {\n      routeStats.push({\n        route,\n        requestCount: stats.count,\n        averageResponseTime: Math.round((stats.totalTime / stats.count) * 100) / 100,\n        errorRate: Math.round((stats.errors / stats.count) * 100 * 100) / 100\n      });\n    }\n\n    // Sort by request count descending\n    return routeStats.sort((a, b) => b.requestCount - a.requestCount).slice(0, 10);\n  }\n\n  getSlowestEndpoints(limit: number = 10) {\n    const routeMap = new Map<string, { times: number[]; errors: number }>();\n    \n    for (const timing of this.requestTimings) {\n      const key = `${timing.method} ${timing.route}`;\n      const stats = routeMap.get(key) || { times: [], errors: 0 };\n      \n      stats.times.push(timing.duration);\n      if (timing.statusCode >= 400) {\n        stats.errors++;\n      }\n      \n      routeMap.set(key, stats);\n    }\n\n    const endpointStats: Array<{\n      route: string;\n      requestCount: number;\n      averageTime: number;\n      maxTime: number;\n      p95Time: number;\n      errorCount: number;\n    }> = [];\n    for (const [route, stats] of routeMap.entries()) {\n      const avgTime = stats.times.reduce((a, b) => a + b, 0) / stats.times.length;\n      const maxTime = Math.max(...stats.times);\n      const p95Time = this.percentile(stats.times, 0.95);\n      \n      endpointStats.push({\n        route,\n        requestCount: stats.times.length,\n        averageTime: Math.round(avgTime * 100) / 100,\n        maxTime: Math.round(maxTime * 100) / 100,\n        p95Time: Math.round(p95Time * 100) / 100,\n        errorCount: stats.errors\n      });\n    }\n\n    return endpointStats\n      .sort((a, b) => b.averageTime - a.averageTime)\n      .slice(0, limit);\n  }\n\n  private percentile(arr: number[], p: number): number {\n    const sorted = [...arr].sort((a, b) => a - b);\n    const index = Math.ceil(sorted.length * p) - 1;\n    return sorted[index] || 0;\n  }\n\n  getHealthStatus() {\n    const summary = this.getPerformanceSummary();\n    const memUsageMB = this.metrics.memoryUsage.heapUsed / 1024 / 1024;\n    \n    const isHealthy = \n      summary.averageResponseTime < 1000 &&\n      summary.errorRate < 10 &&\n      summary.slowRequestPercentage < 20 &&\n      memUsageMB < 512; // 512MB threshold\n\n    return {\n      healthy: isHealthy,\n      details: {\n        responseTime: summary.averageResponseTime < 1000 ? 'good' : 'slow',\n        errorRate: summary.errorRate < 5 ? 'good' : summary.errorRate < 10 ? 'warning' : 'critical',\n        memoryUsage: memUsageMB < 256 ? 'good' : memUsageMB < 512 ? 'warning' : 'critical',\n        performance: summary\n      }\n    };\n  }\n}\n\n// Global instance\nconst performanceMonitor = new PerformanceMonitor();\n\nexport { performanceMonitor };\nexport default performanceMonitor.middleware();"],"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","ignoreList":[]}