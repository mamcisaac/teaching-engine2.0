df36702cfb4bc2a5c832dab486d64e5e
import { app } from '../../src/index';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import unzipper from 'unzipper';
import { authRequest } from '../test-auth-helper';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const binaryParser = (res, callback) => {
    const data = [];
    res.on('data', (chunk) => data.push(Buffer.from(chunk)));
    res.on('end', () => callback(null, Buffer.concat(data)));
};
const auth = authRequest(app);
describe('backup route', () => {
    const dbPath = path.resolve('test-route.sqlite');
    const uploads = path.join(__dirname, '../src/uploads');
    beforeAll(async () => {
        await auth.setup();
        process.env.DATABASE_URL = `file:${dbPath}`;
        await fs.writeFile(dbPath, 'data');
        await fs.mkdir(uploads, { recursive: true });
        await fs.writeFile(path.join(uploads, 'file.txt'), 'hi');
    });
    afterAll(async () => {
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
    });
    it('streams zip with db and uploads', async () => {
        const res = await auth.get('/api/backup').buffer().parse(binaryParser);
        expect(res.status).toBe(200);
        const dir = await unzipper.Open.buffer(res.body);
        const names = dir.files.map((f) => f.path).sort();
        expect(names).toEqual(['database.sqlite', 'uploads/file.txt']);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2JhY2t1cFJvdXRlcy50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDcEMsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTNDLE1BQU0sWUFBWSxHQUFHLENBQ25CLEdBQTBCLEVBQzFCLFFBQW1ELEVBQ25ELEVBQUU7SUFDRixNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDLENBQUM7QUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFOUIsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFFdkQsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLFFBQVEsTUFBTSxFQUFFLENBQUM7UUFDNUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDN0MsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sR0FBRyxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy9pbnRlZ3JhdGlvbi9iYWNrdXBSb3V0ZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLi8uLi9zcmMvaW5kZXgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgdW56aXBwZXIgZnJvbSAndW56aXBwZXInO1xuaW1wb3J0IHsgYXV0aFJlcXVlc3QgfSBmcm9tICcuLi90ZXN0LWF1dGgtaGVscGVyJztcblxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShfX2ZpbGVuYW1lKTtcblxuY29uc3QgYmluYXJ5UGFyc2VyID0gKFxuICByZXM6IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSxcbiAgY2FsbGJhY2s6IChlcnI6IEVycm9yIHwgbnVsbCwgZGF0YTogQnVmZmVyKSA9PiB2b2lkLFxuKSA9PiB7XG4gIGNvbnN0IGRhdGE6IEJ1ZmZlcltdID0gW107XG4gIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4gZGF0YS5wdXNoKEJ1ZmZlci5mcm9tKGNodW5rKSkpO1xuICByZXMub24oJ2VuZCcsICgpID0+IGNhbGxiYWNrKG51bGwsIEJ1ZmZlci5jb25jYXQoZGF0YSkpKTtcbn07XG5cbmNvbnN0IGF1dGggPSBhdXRoUmVxdWVzdChhcHApO1xuXG5kZXNjcmliZSgnYmFja3VwIHJvdXRlJywgKCkgPT4ge1xuICBjb25zdCBkYlBhdGggPSBwYXRoLnJlc29sdmUoJ3Rlc3Qtcm91dGUuc3FsaXRlJyk7XG4gIGNvbnN0IHVwbG9hZHMgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vc3JjL3VwbG9hZHMnKTtcblxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGF1dGguc2V0dXAoKTtcbiAgICBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgPSBgZmlsZToke2RiUGF0aH1gO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShkYlBhdGgsICdkYXRhJyk7XG4gICAgYXdhaXQgZnMubWtkaXIodXBsb2FkcywgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGguam9pbih1cGxvYWRzLCAnZmlsZS50eHQnKSwgJ2hpJyk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBmcy5ybShkYlBhdGgsIHsgZm9yY2U6IHRydWUgfSk7XG4gICAgYXdhaXQgZnMucm0odXBsb2FkcywgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xuICB9KTtcblxuICBpdCgnc3RyZWFtcyB6aXAgd2l0aCBkYiBhbmQgdXBsb2FkcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBhdXRoLmdldCgnL2FwaS9iYWNrdXAnKS5idWZmZXIoKS5wYXJzZShiaW5hcnlQYXJzZXIpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgY29uc3QgZGlyID0gYXdhaXQgdW56aXBwZXIuT3Blbi5idWZmZXIocmVzLmJvZHkpO1xuICAgIGNvbnN0IG5hbWVzID0gZGlyLmZpbGVzLm1hcCgoZikgPT4gZi5wYXRoKS5zb3J0KCk7XG4gICAgZXhwZWN0KG5hbWVzKS50b0VxdWFsKFsnZGF0YWJhc2Uuc3FsaXRlJywgJ3VwbG9hZHMvZmlsZS50eHQnXSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=