5b3b89cabd01dab478cbe9b0a3073d88
/**
 * Optimized Unit Test Setup
 * Fast, isolated setup with comprehensive mocking
 */
import { jest } from '@jest/globals';
// Mock all external dependencies upfront
jest.mock('@teaching-engine/database');
jest.mock('openai');
jest.mock('fs');
jest.mock('path');
jest.mock('canvas');
jest.mock('pdfkit');
jest.mock('pdf-parse');
jest.mock('mammoth');
jest.mock('cheerio');
jest.mock('axios');
jest.mock('node-cron');
jest.mock('handlebars');
jest.mock('html-to-docx');
jest.mock('archiver');
jest.mock('unzipper');
// Mock heavy services
jest.mock('@/services/emailService');
jest.mock('@/services/embeddingService');
jest.mock('@/services/llmService');
jest.mock('@/services/clusteringService');
jest.mock('@/services/materialGenerator');
jest.mock('@/services/aiPlanningAssistant');
// Mock logger with no-op functions for speed
jest.mock('@/logger', () => ({
    __esModule: true,
    default: {
        debug: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
        child: jest.fn(() => ({
            debug: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
        })),
    },
}));
// Set test environment
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-secret';
process.env.DATABASE_URL = 'file:./test.db';
// Performance monitoring for tests
const testMetrics = new Map();
// Hook into test lifecycle for performance monitoring
if (process.env.MONITOR_TEST_PERFORMANCE === 'true') {
    global.beforeEach(() => {
        const testName = expect.getState().currentTestName || 'unknown';
        testMetrics.set(testName, {
            start: performance.now(),
            memory: process.memoryUsage().heapUsed,
        });
    });
    global.afterEach(() => {
        const testName = expect.getState().currentTestName || 'unknown';
        const metrics = testMetrics.get(testName);
        if (metrics) {
            const duration = performance.now() - metrics.start;
            const memoryDelta = process.memoryUsage().heapUsed - metrics.memory;
            // Log slow tests
            if (duration > 100) {
                console.warn(`⚠️  Slow test: ${testName} took ${duration.toFixed(2)}ms`);
            }
            // Log memory leaks
            if (memoryDelta > 10 * 1024 * 1024) { // 10MB
                console.warn(`⚠️  Memory leak suspected: ${testName} used ${(memoryDelta / 1024 / 1024).toFixed(2)}MB`);
            }
        }
    });
}
// Clear all mocks between tests
afterEach(() => {
    jest.clearAllMocks();
});
// Export test utilities
export const getMockPrismaClient = () => {
    const { PrismaClient } = jest.requireMock('@teaching-engine/database');
    return new PrismaClient();
};
export const resetAllMocks = () => {
    jest.clearAllMocks();
    jest.resetModules();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,