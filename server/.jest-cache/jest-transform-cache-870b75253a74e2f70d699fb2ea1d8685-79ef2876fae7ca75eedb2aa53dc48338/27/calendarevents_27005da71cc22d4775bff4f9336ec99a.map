{"version":3,"names":["cov_mlzwdoqri","actualCoverage","Router","z","CalendarEventType","CalendarEventSource","requireAuth","validateRequest","startOfDay","endOfDay","parseISO","prisma","router","s","calendarEventSchema","object","title","string","min","max","description","optional","start","datetime","end","allDay","boolean","default","eventType","enum","source","querySchema","get","query","req","res","f","userId","user","id","where","OR","teacherId","b","gte","lte","events","calendarEvent","findMany","orderBy","json","error","console","status","post","body","data","event","create","Date","patch","params","updates","findFirst","parseInt","updatedEvent","update","delete","send","year","getFullYear","holidays","month","day","createdEvents","holiday","date","existing","HOLIDAY","SYSTEM","push","message","length"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/calendar-events.ts"],"sourcesContent":["import { Router } from 'express';\nimport { z } from 'zod';\nimport { CalendarEventType, CalendarEventSource, Prisma } from '@teaching-engine/database';\nimport { requireAuth } from '../middleware/auth';\nimport { validateRequest } from '../middleware/validateRequest';\nimport { startOfDay, endOfDay, parseISO } from 'date-fns';\nimport { prisma } from '../prisma';\n\nconst router = Router();\n\n// Validation schemas\nconst calendarEventSchema = z.object({\n  title: z.string().min(1).max(255),\n  description: z.string().optional(),\n  start: z.string().datetime(),\n  end: z.string().datetime(),\n  allDay: z.boolean().default(false),\n  eventType: z.enum(['PD_DAY', 'ASSEMBLY', 'TRIP', 'HOLIDAY', 'CUSTOM']),\n  source: z.enum(['MANUAL', 'ICAL_FEED']).default('MANUAL'),\n});\n\nconst querySchema = z.object({\n  start: z.string().optional(),\n  end: z.string().optional(),\n  eventType: z.enum(['PD_DAY', 'ASSEMBLY', 'TRIP', 'HOLIDAY', 'CUSTOM']).optional(),\n});\n\n// Get calendar events for a date range\nrouter.get('/', requireAuth, validateRequest({ query: querySchema }), async (req, res) => {\n  try {\n    const { start, end, eventType } = req.query as z.infer<typeof querySchema>;\n    const userId = req.user!.id;\n\n    const where: Prisma.CalendarEventWhereInput = {\n      OR: [\n        { teacherId: userId },\n        { teacherId: null }, // School-wide events\n      ],\n    };\n\n    if (start) {\n      where.start = { gte: parseISO(start) };\n    }\n\n    if (end) {\n      where.end = { lte: endOfDay(parseISO(end)) };\n    }\n\n    if (eventType) {\n      where.eventType = eventType;\n    }\n\n    const events = await prisma.calendarEvent.findMany({\n      where,\n      orderBy: { start: 'asc' },\n    });\n\n    res.json(events);\n  } catch (error) {\n    console.error('Error fetching calendar events:', error);\n    res.status(500).json({ error: 'Failed to fetch calendar events' });\n  }\n});\n\n// Create a new calendar event\nrouter.post('/', requireAuth, validateRequest({ body: calendarEventSchema }), async (req, res) => {\n  try {\n    const data = req.body as z.infer<typeof calendarEventSchema>;\n    const userId = req.user!.id;\n\n    const event = await prisma.calendarEvent.create({\n      data: {\n        title: data.title,\n        description: data.description,\n        start: new Date(data.start),\n        end: new Date(data.end),\n        allDay: data.allDay,\n        eventType: data.eventType,\n        source: data.source,\n        teacherId: userId,\n      },\n    });\n\n    res.status(201).json(event);\n  } catch (error) {\n    console.error('Error creating calendar event:', error);\n    res.status(500).json({ error: 'Failed to create calendar event' });\n  }\n});\n\n// Update a calendar event\nrouter.patch('/:id', requireAuth, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user!.id;\n    const updates = req.body;\n\n    // Check ownership\n    const event = await prisma.calendarEvent.findFirst({\n      where: {\n        id: parseInt(id),\n        teacherId: userId,\n      },\n    });\n\n    if (!event) {\n      return res.status(404).json({ error: 'Event not found or unauthorized' });\n    }\n\n    // Convert date strings to Date objects if present\n    if (updates.start) updates.start = new Date(updates.start);\n    if (updates.end) updates.end = new Date(updates.end);\n\n    const updatedEvent = await prisma.calendarEvent.update({\n      where: { id: parseInt(id) },\n      data: updates,\n    });\n\n    res.json(updatedEvent);\n  } catch (error) {\n    console.error('Error updating calendar event:', error);\n    res.status(500).json({ error: 'Failed to update calendar event' });\n  }\n});\n\n// Delete a calendar event\nrouter.delete('/:id', requireAuth, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user!.id;\n\n    // Check ownership\n    const event = await prisma.calendarEvent.findFirst({\n      where: {\n        id: parseInt(id),\n        teacherId: userId,\n      },\n    });\n\n    if (!event) {\n      return res.status(404).json({ error: 'Event not found or unauthorized' });\n    }\n\n    await prisma.calendarEvent.delete({\n      where: { id: parseInt(id) },\n    });\n\n    res.status(204).send();\n  } catch (error) {\n    console.error('Error deleting calendar event:', error);\n    res.status(500).json({ error: 'Failed to delete calendar event' });\n  }\n});\n\n// Import holidays from a standard calendar\nrouter.post('/import-holidays', requireAuth, async (req, res) => {\n  try {\n    const { year = new Date().getFullYear() } = req.body;\n\n    // Common Ontario school holidays\n    const holidays = [\n      { title: 'Labour Day', month: 9, day: 1 },\n      { title: 'Thanksgiving', month: 10, day: 2 }, // 2nd Monday\n      { title: 'Winter Break Start', month: 12, day: 23 },\n      { title: 'Winter Break End', month: 1, day: 2 },\n      { title: 'Family Day', month: 2, day: 3 }, // 3rd Monday\n      { title: 'March Break Start', month: 3, day: 2 }, // 2nd week\n      { title: 'March Break End', month: 3, day: 3 },\n      { title: 'Good Friday', month: 4, day: 1 }, // Varies\n      { title: 'Easter Monday', month: 4, day: 2 }, // Varies\n      { title: 'Victoria Day', month: 5, day: 3 }, // Monday before May 25\n    ];\n\n    const createdEvents = [];\n\n    for (const holiday of holidays) {\n      const date = new Date(year, holiday.month - 1, holiday.day);\n\n      const existing = await prisma.calendarEvent.findFirst({\n        where: {\n          title: holiday.title,\n          start: {\n            gte: startOfDay(date),\n            lte: endOfDay(date),\n          },\n        },\n      });\n\n      if (!existing) {\n        const event = await prisma.calendarEvent.create({\n          data: {\n            title: holiday.title,\n            start: startOfDay(date),\n            end: endOfDay(date),\n            allDay: true,\n            eventType: CalendarEventType.HOLIDAY,\n            source: CalendarEventSource.SYSTEM,\n          },\n        });\n        createdEvents.push(event);\n      }\n    }\n\n    res.json({\n      message: `Imported ${createdEvents.length} holidays`,\n      events: createdEvents,\n    });\n  } catch (error) {\n    console.error('Error importing holidays:', error);\n    res.status(500).json({ error: 'Failed to import holidays' });\n  }\n});\n\nexport default router;\n"],"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","ignoreList":[]}