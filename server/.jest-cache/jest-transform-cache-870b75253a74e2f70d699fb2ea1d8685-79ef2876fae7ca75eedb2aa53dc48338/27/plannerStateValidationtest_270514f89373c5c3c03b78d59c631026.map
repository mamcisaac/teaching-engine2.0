{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/plannerStateValidation.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/plannerStateValidation.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport plannerStateRouter from '../../src/routes/planner-state';\nimport { prisma } from '../../src/prisma';\n\nconst app = express();\napp.use(express.json());\n\n// Mock authenticated user middleware\napp.use((req: any, res, next) => {\n  req.user = { userId: '1' };\n  next();\n});\n\napp.use('/api/planner', plannerStateRouter);\n\ndescribe('State Management Agent Security Tests', () => {\n  beforeEach(async () => {\n    // Clean database before each test\n    await prisma.weeklyPlannerState.deleteMany();\n  });\n\n  afterEach(async () => {\n    // Clean up after each test\n    await prisma.weeklyPlannerState.deleteMany();\n  });\n\n  describe('JSON Injection Prevention', () => {\n    it('should reject malicious script injection in draftChanges', async () => {\n      const maliciousPayload = {\n        defaultView: 'week',\n        draftChanges: {\n          title: '<script>alert(\"XSS\")</script>',\n          content: 'javascript:void(0)',\n          changes: {\n            '<script>': 'malicious value'\n          }\n        }\n      };\n\n      const response = await request(app)\n        .put('/api/planner/state')\n        .send(maliciousPayload)\n        .expect(200);\n\n      // Verify script tags are sanitized\n      expect(response.body.draftChanges.title).not.toContain('<script>');\n      expect(response.body.draftChanges.title).not.toContain('alert');\n      expect(response.body.draftChanges.content).not.toContain('javascript:');\n    });\n\n    it('should enforce size limits on draft changes', async () => {\n      const oversizedPayload = {\n        defaultView: 'week',\n        draftChanges: {\n          title: 'A'.repeat(300), // Exceeds 200 char limit\n          content: 'B'.repeat(15000), // Exceeds 10000 char limit\n        }\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .send(oversizedPayload)\n        .expect(400); // Should be rejected by validation\n    });\n\n    it('should reject prototype pollution attempts', async () => {\n      const pollutionPayload = {\n        defaultView: 'week',\n        '__proto__': { isAdmin: true },\n        draftChanges: {\n          '__proto__': { polluted: true }\n        }\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .send(pollutionPayload)\n        .expect(400); // Should be rejected by strict schema\n    });\n  });\n\n  describe('CSRF Protection', () => {\n    it('should block requests without proper origin', async () => {\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://evil.com')\n        .send({ defaultView: 'week' })\n        .expect(403);\n    });\n\n    it('should allow requests from allowed origins', async () => {\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send({ defaultView: 'week' })\n        .expect(200);\n    });\n\n    it('should block requests without origin or referer', async () => {\n      await request(app)\n        .put('/api/planner/state')\n        .send({ defaultView: 'week' })\n        .expect(403);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should enforce rate limits on state updates', async () => {\n      const payload = { defaultView: 'week' };\n      \n      // Make rapid requests to test rate limiting\n      const requests = Array(110).fill(0).map(() => \n        request(app)\n          .put('/api/planner/state')\n          .set('Origin', 'http://localhost:5173')\n          .send(payload)\n      );\n\n      const responses = await Promise.all(requests);\n      \n      // Should have some rate-limited responses (429 status)\n      const rateLimited = responses.filter(r => r.status === 429);\n      expect(rateLimited.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Data Validation', () => {\n    it('should validate enum values strictly', async () => {\n      const invalidPayload = {\n        defaultView: 'invalid_view',\n        timeSlotDuration: 45, // Not in allowed [15, 30, 60]\n        theme: 'rainbow'\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(invalidPayload)\n        .expect(400);\n    });\n\n    it('should validate working hours format', async () => {\n      const invalidHours = {\n        defaultView: 'week',\n        workingHours: {\n          start: '25:00', // Invalid time\n          end: 'not-a-time'\n        }\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(invalidHours)\n        .expect(400);\n    });\n\n    it('should validate autoSaveInterval bounds', async () => {\n      const invalidInterval = {\n        defaultView: 'week',\n        autoSaveInterval: 500 // Exceeds max of 300\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(invalidInterval)\n        .expect(400);\n    });\n  });\n\n  describe('Memory Limits', () => {\n    it('should enforce maxHistorySize limits', async () => {\n      const oversizedHistory = {\n        defaultView: 'week',\n        maxHistorySize: 150 // Exceeds max of 100\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(oversizedHistory)\n        .expect(400);\n    });\n\n    it('should limit offline data array size', async () => {\n      const largeOfflineData = {\n        defaultView: 'week',\n        offlineData: {\n          pendingChanges: Array(60).fill({ // Exceeds max of 50\n            planId: 'test',\n            title: 'test'\n          })\n        }\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(largeOfflineData)\n        .expect(400);\n    });\n  });\n\n  describe('Response Security', () => {\n    it('should return sanitized data in responses', async () => {\n      // First create state with potentially dangerous content\n      const payload = {\n        defaultView: 'week',\n        lastActiveView: '<img src=x onerror=alert(1)>',\n        draftChanges: {\n          title: '<b>Bold Title</b>',\n          content: 'Normal content'\n        }\n      };\n\n      const response = await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(payload)\n        .expect(200);\n\n      // Verify response is sanitized\n      expect(response.body.lastActiveView).not.toContain('<img');\n      expect(response.body.lastActiveView).not.toContain('onerror');\n      expect(response.body.draftChanges.title).not.toContain('<b>');\n    });\n\n    it('should parse JSON fields correctly in responses', async () => {\n      const payload = {\n        defaultView: 'week',\n        workingHours: { start: '09:00', end: '17:00' },\n        draftChanges: { title: 'Test Title' }\n      };\n\n      const response = await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(payload)\n        .expect(200);\n\n      // Verify JSON fields are properly parsed objects, not strings\n      expect(typeof response.body.workingHours).toBe('object');\n      expect(response.body.workingHours.start).toBe('09:00');\n      expect(typeof response.body.draftChanges).toBe('object');\n      expect(response.body.draftChanges.title).toBe('Test Title');\n    });\n  });\n\n  describe('Database Security', () => {\n    it('should store data securely in database', async () => {\n      const payload = {\n        defaultView: 'week',\n        workingHours: { start: '08:00', end: '16:00' },\n        draftChanges: { title: 'Secure Title' }\n      };\n\n      await request(app)\n        .put('/api/planner/state')\n        .set('Origin', 'http://localhost:5173')\n        .send(payload)\n        .expect(200);\n\n      // Verify data is stored as JSON strings in database\n      const dbRecord = await prisma.weeklyPlannerState.findFirst({\n        where: { userId: 1 }\n      });\n\n      expect(typeof dbRecord?.workingHours).toBe('string');\n      expect(typeof dbRecord?.draftChanges).toBe('string');\n      \n      // Verify JSON is valid\n      const parsedHours = JSON.parse(dbRecord!.workingHours);\n      expect(parsedHours.start).toBe('08:00');\n    });\n  });\n});"],"version":3}