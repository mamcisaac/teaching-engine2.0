cd1ac84efced5c863c7df7410a2ecd17
/* istanbul ignore next */
function cov_mlzwdoqri() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/calendar-events.ts";
  var hash = "8443c672d3057aedd84420907dbdf3bae5632fae";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/calendar-events.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 23
        }
      },
      "1": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "2": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "3": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "4": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "5": {
        start: {
          line: 27,
          column: 42
        },
        end: {
          line: 27,
          column: 51
        }
      },
      "6": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "7": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "8": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "9": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 51
        }
      },
      "10": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "11": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 57
        }
      },
      "12": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "13": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 40
        }
      },
      "14": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "15": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 25
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 64
        }
      },
      "17": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 75
        }
      },
      "18": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 78,
          column: 3
        }
      },
      "19": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "20": {
        start: {
          line: 58,
          column: 21
        },
        end: {
          line: 58,
          column: 29
        }
      },
      "21": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 34
        }
      },
      "22": {
        start: {
          line: 60,
          column: 22
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "23": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "24": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 63
        }
      },
      "25": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 75
        }
      },
      "26": {
        start: {
          line: 80,
          column: 0
        },
        end: {
          line: 110,
          column: 3
        }
      },
      "27": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "28": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 33
        }
      },
      "29": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 83,
          column: 34
        }
      },
      "30": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 32
        }
      },
      "31": {
        start: {
          line: 86,
          column: 22
        },
        end: {
          line: 91,
          column: 10
        }
      },
      "32": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "33": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 86
        }
      },
      "34": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 97,
          column: 52
        }
      },
      "35": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 52
        }
      },
      "36": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "37": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "38": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 103,
          column: 10
        }
      },
      "39": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 31
        }
      },
      "40": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 63
        }
      },
      "41": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 75
        }
      },
      "42": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 135,
          column: 3
        }
      },
      "43": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "44": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "45": {
        start: {
          line: 115,
          column: 23
        },
        end: {
          line: 115,
          column: 34
        }
      },
      "46": {
        start: {
          line: 117,
          column: 22
        },
        end: {
          line: 122,
          column: 10
        }
      },
      "47": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "48": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 86
        }
      },
      "49": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "50": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 31
        }
      },
      "51": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 63
        }
      },
      "52": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 75
        }
      },
      "53": {
        start: {
          line: 137,
          column: 0
        },
        end: {
          line: 188,
          column: 3
        }
      },
      "54": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "55": {
        start: {
          line: 139,
          column: 52
        },
        end: {
          line: 139,
          column: 60
        }
      },
      "56": {
        start: {
          line: 141,
          column: 25
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "57": {
        start: {
          line: 153,
          column: 30
        },
        end: {
          line: 153,
          column: 32
        }
      },
      "58": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "59": {
        start: {
          line: 155,
          column: 25
        },
        end: {
          line: 155,
          column: 71
        }
      },
      "60": {
        start: {
          line: 156,
          column: 29
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "61": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "62": {
        start: {
          line: 166,
          column: 30
        },
        end: {
          line: 175,
          column: 18
        }
      },
      "63": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 42
        }
      },
      "64": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      },
      "65": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 58
        }
      },
      "66": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 70
          },
          end: {
            line: 25,
            column: 71
          }
        },
        loc: {
          start: {
            line: 25,
            column: 90
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 78
          },
          end: {
            line: 56,
            column: 79
          }
        },
        loc: {
          start: {
            line: 56,
            column: 98
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 80,
            column: 34
          },
          end: {
            line: 80,
            column: 35
          }
        },
        loc: {
          start: {
            line: 80,
            column: 54
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 80
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 112,
            column: 35
          },
          end: {
            line: 112,
            column: 36
          }
        },
        loc: {
          start: {
            line: 112,
            column: 55
          },
          end: {
            line: 135,
            column: 1
          }
        },
        line: 112
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 137,
            column: 45
          },
          end: {
            line: 137,
            column: 46
          }
        },
        loc: {
          start: {
            line: 137,
            column: 65
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 137
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 97,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 97,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 99,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 99,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "7": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 139,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 139,
            column: 23
          },
          end: {
            line: 139,
            column: 47
          }
        }],
        line: 139
      },
      "8": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/calendar-events.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/calendar-events.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { z } from 'zod';\nimport { CalendarEventType, CalendarEventSource, Prisma } from '@teaching-engine/database';\nimport { requireAuth } from '../middleware/auth';\nimport { validateRequest } from '../middleware/validateRequest';\nimport { startOfDay, endOfDay, parseISO } from 'date-fns';\nimport { prisma } from '../prisma';\n\nconst router = Router();\n\n// Validation schemas\nconst calendarEventSchema = z.object({\n  title: z.string().min(1).max(255),\n  description: z.string().optional(),\n  start: z.string().datetime(),\n  end: z.string().datetime(),\n  allDay: z.boolean().default(false),\n  eventType: z.enum(['PD_DAY', 'ASSEMBLY', 'TRIP', 'HOLIDAY', 'CUSTOM']),\n  source: z.enum(['MANUAL', 'ICAL_FEED']).default('MANUAL'),\n});\n\nconst querySchema = z.object({\n  start: z.string().optional(),\n  end: z.string().optional(),\n  eventType: z.enum(['PD_DAY', 'ASSEMBLY', 'TRIP', 'HOLIDAY', 'CUSTOM']).optional(),\n});\n\n// Get calendar events for a date range\nrouter.get('/', requireAuth, validateRequest({ query: querySchema }), async (req, res) => {\n  try {\n    const { start, end, eventType } = req.query as z.infer<typeof querySchema>;\n    const userId = req.user!.id;\n\n    const where: Prisma.CalendarEventWhereInput = {\n      OR: [\n        { teacherId: userId },\n        { teacherId: null }, // School-wide events\n      ],\n    };\n\n    if (start) {\n      where.start = { gte: parseISO(start) };\n    }\n\n    if (end) {\n      where.end = { lte: endOfDay(parseISO(end)) };\n    }\n\n    if (eventType) {\n      where.eventType = eventType;\n    }\n\n    const events = await prisma.calendarEvent.findMany({\n      where,\n      orderBy: { start: 'asc' },\n    });\n\n    res.json(events);\n  } catch (error) {\n    console.error('Error fetching calendar events:', error);\n    res.status(500).json({ error: 'Failed to fetch calendar events' });\n  }\n});\n\n// Create a new calendar event\nrouter.post('/', requireAuth, validateRequest({ body: calendarEventSchema }), async (req, res) => {\n  try {\n    const data = req.body as z.infer<typeof calendarEventSchema>;\n    const userId = req.user!.id;\n\n    const event = await prisma.calendarEvent.create({\n      data: {\n        title: data.title,\n        description: data.description,\n        start: new Date(data.start),\n        end: new Date(data.end),\n        allDay: data.allDay,\n        eventType: data.eventType,\n        source: data.source,\n        teacherId: userId,\n      },\n    });\n\n    res.status(201).json(event);\n  } catch (error) {\n    console.error('Error creating calendar event:', error);\n    res.status(500).json({ error: 'Failed to create calendar event' });\n  }\n});\n\n// Update a calendar event\nrouter.patch('/:id', requireAuth, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user!.id;\n    const updates = req.body;\n\n    // Check ownership\n    const event = await prisma.calendarEvent.findFirst({\n      where: {\n        id: parseInt(id),\n        teacherId: userId,\n      },\n    });\n\n    if (!event) {\n      return res.status(404).json({ error: 'Event not found or unauthorized' });\n    }\n\n    // Convert date strings to Date objects if present\n    if (updates.start) updates.start = new Date(updates.start);\n    if (updates.end) updates.end = new Date(updates.end);\n\n    const updatedEvent = await prisma.calendarEvent.update({\n      where: { id: parseInt(id) },\n      data: updates,\n    });\n\n    res.json(updatedEvent);\n  } catch (error) {\n    console.error('Error updating calendar event:', error);\n    res.status(500).json({ error: 'Failed to update calendar event' });\n  }\n});\n\n// Delete a calendar event\nrouter.delete('/:id', requireAuth, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user!.id;\n\n    // Check ownership\n    const event = await prisma.calendarEvent.findFirst({\n      where: {\n        id: parseInt(id),\n        teacherId: userId,\n      },\n    });\n\n    if (!event) {\n      return res.status(404).json({ error: 'Event not found or unauthorized' });\n    }\n\n    await prisma.calendarEvent.delete({\n      where: { id: parseInt(id) },\n    });\n\n    res.status(204).send();\n  } catch (error) {\n    console.error('Error deleting calendar event:', error);\n    res.status(500).json({ error: 'Failed to delete calendar event' });\n  }\n});\n\n// Import holidays from a standard calendar\nrouter.post('/import-holidays', requireAuth, async (req, res) => {\n  try {\n    const { year = new Date().getFullYear() } = req.body;\n\n    // Common Ontario school holidays\n    const holidays = [\n      { title: 'Labour Day', month: 9, day: 1 },\n      { title: 'Thanksgiving', month: 10, day: 2 }, // 2nd Monday\n      { title: 'Winter Break Start', month: 12, day: 23 },\n      { title: 'Winter Break End', month: 1, day: 2 },\n      { title: 'Family Day', month: 2, day: 3 }, // 3rd Monday\n      { title: 'March Break Start', month: 3, day: 2 }, // 2nd week\n      { title: 'March Break End', month: 3, day: 3 },\n      { title: 'Good Friday', month: 4, day: 1 }, // Varies\n      { title: 'Easter Monday', month: 4, day: 2 }, // Varies\n      { title: 'Victoria Day', month: 5, day: 3 }, // Monday before May 25\n    ];\n\n    const createdEvents = [];\n\n    for (const holiday of holidays) {\n      const date = new Date(year, holiday.month - 1, holiday.day);\n\n      const existing = await prisma.calendarEvent.findFirst({\n        where: {\n          title: holiday.title,\n          start: {\n            gte: startOfDay(date),\n            lte: endOfDay(date),\n          },\n        },\n      });\n\n      if (!existing) {\n        const event = await prisma.calendarEvent.create({\n          data: {\n            title: holiday.title,\n            start: startOfDay(date),\n            end: endOfDay(date),\n            allDay: true,\n            eventType: CalendarEventType.HOLIDAY,\n            source: CalendarEventSource.SYSTEM,\n          },\n        });\n        createdEvents.push(event);\n      }\n    }\n\n    res.json({\n      message: `Imported ${createdEvents.length} holidays`,\n      events: createdEvents,\n    });\n  } catch (error) {\n    console.error('Error importing holidays:', error);\n    res.status(500).json({ error: 'Failed to import holidays' });\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8443c672d3057aedd84420907dbdf3bae5632fae"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_mlzwdoqri = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_mlzwdoqri();
import { Router } from 'express';
import { z } from 'zod';
import { CalendarEventType, CalendarEventSource } from '@teaching-engine/database';
import { requireAuth } from '../middleware/auth';
import { validateRequest } from '../middleware/validateRequest';
import { startOfDay, endOfDay, parseISO } from 'date-fns';
import { prisma } from '../prisma';
const router =
/* istanbul ignore next */
(cov_mlzwdoqri().s[0]++, Router());
// Validation schemas
const calendarEventSchema =
/* istanbul ignore next */
(cov_mlzwdoqri().s[1]++, z.object({
  title: z.string().min(1).max(255),
  description: z.string().optional(),
  start: z.string().datetime(),
  end: z.string().datetime(),
  allDay: z.boolean().default(false),
  eventType: z.enum(['PD_DAY', 'ASSEMBLY', 'TRIP', 'HOLIDAY', 'CUSTOM']),
  source: z.enum(['MANUAL', 'ICAL_FEED']).default('MANUAL')
}));
const querySchema =
/* istanbul ignore next */
(cov_mlzwdoqri().s[2]++, z.object({
  start: z.string().optional(),
  end: z.string().optional(),
  eventType: z.enum(['PD_DAY', 'ASSEMBLY', 'TRIP', 'HOLIDAY', 'CUSTOM']).optional()
}));
// Get calendar events for a date range
/* istanbul ignore next */
cov_mlzwdoqri().s[3]++;
router.get('/', requireAuth, validateRequest({
  query: querySchema
}), async (req, res) => {
  /* istanbul ignore next */
  cov_mlzwdoqri().f[0]++;
  cov_mlzwdoqri().s[4]++;
  try {
    const {
      start,
      end,
      eventType
    } =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[5]++, req.query);
    const userId =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[6]++, req.user.id);
    const where =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[7]++, {
      OR: [{
        teacherId: userId
      }, {
        teacherId: null
      } // School-wide events
      ]
    });
    /* istanbul ignore next */
    cov_mlzwdoqri().s[8]++;
    if (start) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[0][0]++;
      cov_mlzwdoqri().s[9]++;
      where.start = {
        gte: parseISO(start)
      };
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[0][1]++;
    }
    cov_mlzwdoqri().s[10]++;
    if (end) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[1][0]++;
      cov_mlzwdoqri().s[11]++;
      where.end = {
        lte: endOfDay(parseISO(end))
      };
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[1][1]++;
    }
    cov_mlzwdoqri().s[12]++;
    if (eventType) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[2][0]++;
      cov_mlzwdoqri().s[13]++;
      where.eventType = eventType;
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[2][1]++;
    }
    const events =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[14]++, await prisma.calendarEvent.findMany({
      where,
      orderBy: {
        start: 'asc'
      }
    }));
    /* istanbul ignore next */
    cov_mlzwdoqri().s[15]++;
    res.json(events);
  } catch (error) {
    /* istanbul ignore next */
    cov_mlzwdoqri().s[16]++;
    console.error('Error fetching calendar events:', error);
    /* istanbul ignore next */
    cov_mlzwdoqri().s[17]++;
    res.status(500).json({
      error: 'Failed to fetch calendar events'
    });
  }
});
// Create a new calendar event
/* istanbul ignore next */
cov_mlzwdoqri().s[18]++;
router.post('/', requireAuth, validateRequest({
  body: calendarEventSchema
}), async (req, res) => {
  /* istanbul ignore next */
  cov_mlzwdoqri().f[1]++;
  cov_mlzwdoqri().s[19]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[20]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[21]++, req.user.id);
    const event =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[22]++, await prisma.calendarEvent.create({
      data: {
        title: data.title,
        description: data.description,
        start: new Date(data.start),
        end: new Date(data.end),
        allDay: data.allDay,
        eventType: data.eventType,
        source: data.source,
        teacherId: userId
      }
    }));
    /* istanbul ignore next */
    cov_mlzwdoqri().s[23]++;
    res.status(201).json(event);
  } catch (error) {
    /* istanbul ignore next */
    cov_mlzwdoqri().s[24]++;
    console.error('Error creating calendar event:', error);
    /* istanbul ignore next */
    cov_mlzwdoqri().s[25]++;
    res.status(500).json({
      error: 'Failed to create calendar event'
    });
  }
});
// Update a calendar event
/* istanbul ignore next */
cov_mlzwdoqri().s[26]++;
router.patch('/:id', requireAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_mlzwdoqri().f[2]++;
  cov_mlzwdoqri().s[27]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[28]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[29]++, req.user.id);
    const updates =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[30]++, req.body);
    // Check ownership
    const event =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[31]++, await prisma.calendarEvent.findFirst({
      where: {
        id: parseInt(id),
        teacherId: userId
      }
    }));
    /* istanbul ignore next */
    cov_mlzwdoqri().s[32]++;
    if (!event) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[3][0]++;
      cov_mlzwdoqri().s[33]++;
      return res.status(404).json({
        error: 'Event not found or unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[3][1]++;
    }
    // Convert date strings to Date objects if present
    cov_mlzwdoqri().s[34]++;
    if (updates.start) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[4][0]++;
      cov_mlzwdoqri().s[35]++;
      updates.start = new Date(updates.start);
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[4][1]++;
    }
    cov_mlzwdoqri().s[36]++;
    if (updates.end) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[5][0]++;
      cov_mlzwdoqri().s[37]++;
      updates.end = new Date(updates.end);
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[5][1]++;
    }
    const updatedEvent =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[38]++, await prisma.calendarEvent.update({
      where: {
        id: parseInt(id)
      },
      data: updates
    }));
    /* istanbul ignore next */
    cov_mlzwdoqri().s[39]++;
    res.json(updatedEvent);
  } catch (error) {
    /* istanbul ignore next */
    cov_mlzwdoqri().s[40]++;
    console.error('Error updating calendar event:', error);
    /* istanbul ignore next */
    cov_mlzwdoqri().s[41]++;
    res.status(500).json({
      error: 'Failed to update calendar event'
    });
  }
});
// Delete a calendar event
/* istanbul ignore next */
cov_mlzwdoqri().s[42]++;
router.delete('/:id', requireAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_mlzwdoqri().f[3]++;
  cov_mlzwdoqri().s[43]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[44]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[45]++, req.user.id);
    // Check ownership
    const event =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[46]++, await prisma.calendarEvent.findFirst({
      where: {
        id: parseInt(id),
        teacherId: userId
      }
    }));
    /* istanbul ignore next */
    cov_mlzwdoqri().s[47]++;
    if (!event) {
      /* istanbul ignore next */
      cov_mlzwdoqri().b[6][0]++;
      cov_mlzwdoqri().s[48]++;
      return res.status(404).json({
        error: 'Event not found or unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_mlzwdoqri().b[6][1]++;
    }
    cov_mlzwdoqri().s[49]++;
    await prisma.calendarEvent.delete({
      where: {
        id: parseInt(id)
      }
    });
    /* istanbul ignore next */
    cov_mlzwdoqri().s[50]++;
    res.status(204).send();
  } catch (error) {
    /* istanbul ignore next */
    cov_mlzwdoqri().s[51]++;
    console.error('Error deleting calendar event:', error);
    /* istanbul ignore next */
    cov_mlzwdoqri().s[52]++;
    res.status(500).json({
      error: 'Failed to delete calendar event'
    });
  }
});
// Import holidays from a standard calendar
/* istanbul ignore next */
cov_mlzwdoqri().s[53]++;
router.post('/import-holidays', requireAuth, async (req, res) => {
  /* istanbul ignore next */
  cov_mlzwdoqri().f[4]++;
  cov_mlzwdoqri().s[54]++;
  try {
    const {
      year =
      /* istanbul ignore next */
      (cov_mlzwdoqri().b[7][0]++, new Date().getFullYear())
    } =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[55]++, req.body);
    // Common Ontario school holidays
    const holidays =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[56]++, [{
      title: 'Labour Day',
      month: 9,
      day: 1
    }, {
      title: 'Thanksgiving',
      month: 10,
      day: 2
    },
    // 2nd Monday
    {
      title: 'Winter Break Start',
      month: 12,
      day: 23
    }, {
      title: 'Winter Break End',
      month: 1,
      day: 2
    }, {
      title: 'Family Day',
      month: 2,
      day: 3
    },
    // 3rd Monday
    {
      title: 'March Break Start',
      month: 3,
      day: 2
    },
    // 2nd week
    {
      title: 'March Break End',
      month: 3,
      day: 3
    }, {
      title: 'Good Friday',
      month: 4,
      day: 1
    },
    // Varies
    {
      title: 'Easter Monday',
      month: 4,
      day: 2
    },
    // Varies
    {
      title: 'Victoria Day',
      month: 5,
      day: 3
    } // Monday before May 25
    ]);
    const createdEvents =
    /* istanbul ignore next */
    (cov_mlzwdoqri().s[57]++, []);
    /* istanbul ignore next */
    cov_mlzwdoqri().s[58]++;
    for (const holiday of holidays) {
      const date =
      /* istanbul ignore next */
      (cov_mlzwdoqri().s[59]++, new Date(year, holiday.month - 1, holiday.day));
      const existing =
      /* istanbul ignore next */
      (cov_mlzwdoqri().s[60]++, await prisma.calendarEvent.findFirst({
        where: {
          title: holiday.title,
          start: {
            gte: startOfDay(date),
            lte: endOfDay(date)
          }
        }
      }));
      /* istanbul ignore next */
      cov_mlzwdoqri().s[61]++;
      if (!existing) {
        /* istanbul ignore next */
        cov_mlzwdoqri().b[8][0]++;
        const event =
        /* istanbul ignore next */
        (cov_mlzwdoqri().s[62]++, await prisma.calendarEvent.create({
          data: {
            title: holiday.title,
            start: startOfDay(date),
            end: endOfDay(date),
            allDay: true,
            eventType: CalendarEventType.HOLIDAY,
            source: CalendarEventSource.SYSTEM
          }
        }));
        /* istanbul ignore next */
        cov_mlzwdoqri().s[63]++;
        createdEvents.push(event);
      } else
      /* istanbul ignore next */
      {
        cov_mlzwdoqri().b[8][1]++;
      }
    }
    /* istanbul ignore next */
    cov_mlzwdoqri().s[64]++;
    res.json({
      message: `Imported ${createdEvents.length} holidays`,
      events: createdEvents
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_mlzwdoqri().s[65]++;
    console.error('Error importing holidays:', error);
    /* istanbul ignore next */
    cov_mlzwdoqri().s[66]++;
    res.status(500).json({
      error: 'Failed to import holidays'
    });
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,