{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/api/criticalEndpoints.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/unit/api/criticalEndpoints.test.ts"],"sourcesContent":["/**\n * Critical API Endpoints - Comprehensive Test Coverage\n * Addresses Issue #264: API endpoint test coverage\n */\n\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express, { Express } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { createTestApp } from '@/app';\nimport { rateLimiter } from '@/middleware/rateLimiter';\n\n// Mock dependencies\njest.mock('@teaching-engine/database');\njest.mock('@/middleware/rateLimiter');\n\ndescribe('Critical API Endpoints', () => {\n  let app: Express;\n  let mockPrisma: jest.Mocked<PrismaClient>;\n  \n  beforeEach(async () => {\n    jest.clearAllMocks();\n    mockPrisma = new PrismaClient() as jest.Mocked<PrismaClient>;\n    app = await createTestApp(mockPrisma);\n  });\n  \n  afterEach(() => {\n    jest.resetModules();\n  });\n\n  describe('POST /api/auth/login', () => {\n    test('successful login returns token and user data', async () => {\n      const mockUser = {\n        id: '123',\n        email: 'test@example.com',\n        password: '$2a$10$hashedPassword',\n        name: 'Test User',\n        role: 'USER',\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(mockUser);\n      \n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({ email: 'test@example.com', password: 'ValidPass123!' });\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toEqual({\n        id: mockUser.id,\n        email: mockUser.email,\n        name: mockUser.name,\n        role: mockUser.role,\n      });\n      expect(response.body.user).not.toHaveProperty('password');\n    });\n    \n    test('validates required fields', async () => {\n      const invalidRequests = [\n        {},\n        { email: 'test@example.com' },\n        { password: 'password' },\n        { email: '', password: 'password' },\n        { email: 'test@example.com', password: '' },\n      ];\n      \n      for (const invalidBody of invalidRequests) {\n        const response = await request(app)\n          .post('/api/auth/login')\n          .send(invalidBody);\n        \n        expect(response.status).toBe(400);\n        expect(response.body).toHaveProperty('error');\n      }\n    });\n    \n    test('validates email format', async () => {\n      const invalidEmails = [\n        'notanemail',\n        'missing@domain',\n        '@nodomain.com',\n        'spaces in@email.com',\n      ];\n      \n      for (const email of invalidEmails) {\n        const response = await request(app)\n          .post('/api/auth/login')\n          .send({ email, password: 'ValidPass123!' });\n        \n        expect(response.status).toBe(400);\n        expect(response.body.error).toContain('email');\n      }\n    });\n    \n    test('prevents SQL injection attempts', async () => {\n      const maliciousInputs = [\n        { email: \"' OR '1'='1\", password: 'any' },\n        { email: \"admin'--\", password: 'any' },\n        { email: \"1; DROP TABLE users;--\", password: 'any' },\n      ];\n      \n      for (const input of maliciousInputs) {\n        mockPrisma.user.findUnique = jest.fn().mockResolvedValue(null);\n        \n        const response = await request(app)\n          .post('/api/auth/login')\n          .send(input);\n        \n        expect(response.status).toBe(401);\n        expect(response.body.error).toBe('Invalid credentials');\n        \n        // Verify the query was made safely\n        expect(mockPrisma.user.findUnique).toHaveBeenCalled();\n      }\n    });\n    \n    test('rate limits login attempts', async () => {\n      // Mock rate limiter to trigger after 5 requests\n      let requestCount = 0;\n      (rateLimiter as jest.Mock).mockImplementation((req, res, next) => {\n        requestCount++;\n        if (requestCount > 5) {\n          res.status(429).json({ error: 'Too many requests' });\n        } else {\n          next();\n        }\n      });\n      \n      // Make 10 rapid requests\n      const requests = Array(10).fill(null).map(() =>\n        request(app)\n          .post('/api/auth/login')\n          .send({ email: 'test@example.com', password: 'wrong' })\n      );\n      \n      const responses = await Promise.all(requests);\n      const rateLimited = responses.filter(r => r.status === 429);\n      \n      expect(rateLimited.length).toBeGreaterThan(0);\n      expect(rateLimited[0].body.error).toBe('Too many requests');\n    });\n    \n    test('logs failed login attempts', async () => {\n      const mockLogger = jest.spyOn(console, 'warn').mockImplementation();\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue({\n        id: '123',\n        email: 'test@example.com',\n        password: '$2a$10$wrongHash',\n      });\n      \n      await request(app)\n        .post('/api/auth/login')\n        .send({ email: 'test@example.com', password: 'wrongpassword' });\n      \n      expect(mockLogger).toHaveBeenCalledWith(\n        expect.stringContaining('Failed login attempt')\n      );\n      \n      mockLogger.mockRestore();\n    });\n  });\n\n  describe('POST /api/auth/register', () => {\n    test('creates new user with valid data', async () => {\n      const newUser = {\n        email: 'new@example.com',\n        password: 'SecurePass123!',\n        name: 'New User',\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(null);\n      mockPrisma.user.create = jest.fn().mockResolvedValue({\n        id: '456',\n        ...newUser,\n        password: '$2a$10$hashedPassword',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n      \n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(newUser);\n      \n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('token');\n      expect(response.body.user.email).toBe(newUser.email);\n      expect(response.body.user).not.toHaveProperty('password');\n    });\n    \n    test('prevents duplicate email registration', async () => {\n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue({\n        id: '123',\n        email: 'existing@example.com',\n      });\n      \n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'existing@example.com',\n          password: 'SecurePass123!',\n          name: 'Duplicate User',\n        });\n      \n      expect(response.status).toBe(409);\n      expect(response.body.error).toContain('already exists');\n    });\n    \n    test('validates password strength', async () => {\n      const weakPasswords = [\n        '123456',\n        'password',\n        'short',\n        'nouppercase1!',\n        'NOLOWERCASE1!',\n        'NoNumbers!',\n        'NoSpecial123',\n      ];\n      \n      for (const password of weakPasswords) {\n        const response = await request(app)\n          .post('/api/auth/register')\n          .send({\n            email: 'test@example.com',\n            password,\n            name: 'Test User',\n          });\n        \n        expect(response.status).toBe(400);\n        expect(response.body.error).toContain('password');\n      }\n    });\n  });\n\n  describe('GET /api/user/profile', () => {\n    test('returns user profile for authenticated user', async () => {\n      const mockUser = {\n        id: '123',\n        email: 'test@example.com',\n        name: 'Test User',\n        role: 'USER',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(mockUser);\n      \n      const response = await request(app)\n        .get('/api/user/profile')\n        .set('Authorization', 'Bearer valid.jwt.token');\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({\n        id: mockUser.id,\n        email: mockUser.email,\n        name: mockUser.name,\n        role: mockUser.role,\n        createdAt: mockUser.createdAt.toISOString(),\n        updatedAt: mockUser.updatedAt.toISOString(),\n      });\n    });\n    \n    test('requires authentication', async () => {\n      const response = await request(app)\n        .get('/api/user/profile');\n      \n      expect(response.status).toBe(401);\n      expect(response.body.error).toContain('authentication');\n    });\n    \n    test('handles invalid tokens', async () => {\n      const invalidTokens = [\n        'invalid.token',\n        'Bearer',\n        'Bearer ',\n        'malformed',\n      ];\n      \n      for (const token of invalidTokens) {\n        const response = await request(app)\n          .get('/api/user/profile')\n          .set('Authorization', token);\n        \n        expect(response.status).toBe(401);\n      }\n    });\n  });\n\n  describe('PUT /api/user/password', () => {\n    test('updates password with valid current password', async () => {\n      const mockUser = {\n        id: '123',\n        password: '$2a$10$currentHashedPassword',\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(mockUser);\n      mockPrisma.user.update = jest.fn().mockResolvedValue({\n        ...mockUser,\n        password: '$2a$10$newHashedPassword',\n      });\n      \n      const response = await request(app)\n        .put('/api/user/password')\n        .set('Authorization', 'Bearer valid.jwt.token')\n        .send({\n          currentPassword: 'CurrentPass123!',\n          newPassword: 'NewSecurePass123!',\n        });\n      \n      expect(response.status).toBe(200);\n      expect(response.body.message).toContain('updated');\n    });\n    \n    test('rejects incorrect current password', async () => {\n      const mockUser = {\n        id: '123',\n        password: '$2a$10$currentHashedPassword',\n      };\n      \n      mockPrisma.user.findUnique = jest.fn().mockResolvedValue(mockUser);\n      \n      const response = await request(app)\n        .put('/api/user/password')\n        .set('Authorization', 'Bearer valid.jwt.token')\n        .send({\n          currentPassword: 'WrongPassword123!',\n          newPassword: 'NewSecurePass123!',\n        });\n      \n      expect(response.status).toBe(401);\n      expect(response.body.error).toContain('incorrect');\n    });\n    \n    test('validates new password strength', async () => {\n      const response = await request(app)\n        .put('/api/user/password')\n        .set('Authorization', 'Bearer valid.jwt.token')\n        .send({\n          currentPassword: 'CurrentPass123!',\n          newPassword: 'weak',\n        });\n      \n      expect(response.status).toBe(400);\n      expect(response.body.error).toContain('password requirements');\n    });\n  });\n\n  describe('Data Validation', () => {\n    test('sanitizes user input to prevent XSS', async () => {\n      const xssAttempts = [\n        '<script>alert(\"xss\")</script>',\n        'javascript:alert(\"xss\")',\n        '<img src=x onerror=\"alert(\\'xss\\')\">',\n        '<svg onload=\"alert(\\'xss\\')\">',\n      ];\n      \n      for (const xssPayload of xssAttempts) {\n        mockPrisma.user.create = jest.fn().mockImplementation(({ data }) => {\n          // Verify data is sanitized\n          expect(data.name).not.toContain('<script>');\n          expect(data.name).not.toContain('javascript:');\n          expect(data.name).not.toContain('onerror=');\n          expect(data.name).not.toContain('onload=');\n          \n          return Promise.resolve({\n            id: '123',\n            ...data,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          });\n        });\n        \n        const response = await request(app)\n          .post('/api/user/create')\n          .set('Authorization', 'Bearer admin.token')\n          .send({\n            email: 'test@example.com',\n            name: xssPayload,\n            role: 'USER',\n          });\n        \n        expect(response.status).toBe(201);\n      }\n    });\n    \n    test('validates data types', async () => {\n      const invalidDataTypes = [\n        { age: 'not-a-number' },\n        { active: 'not-a-boolean' },\n        { tags: 'not-an-array' },\n        { metadata: 'not-an-object' },\n      ];\n      \n      for (const invalidData of invalidDataTypes) {\n        const response = await request(app)\n          .post('/api/data/validate')\n          .send(invalidData);\n        \n        expect(response.status).toBe(400);\n        expect(response.body.error).toContain('Invalid data type');\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('handles database connection errors', async () => {\n      mockPrisma.user.findUnique = jest.fn().mockRejectedValue(\n        new Error('Database connection failed')\n      );\n      \n      const response = await request(app)\n        .get('/api/user/profile')\n        .set('Authorization', 'Bearer valid.token');\n      \n      expect(response.status).toBe(500);\n      expect(response.body.error).toBe('Internal server error');\n      expect(response.body).not.toHaveProperty('stack');\n    });\n    \n    test('handles unexpected errors gracefully', async () => {\n      mockPrisma.user.findUnique = jest.fn().mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n      \n      const response = await request(app)\n        .get('/api/user/profile')\n        .set('Authorization', 'Bearer valid.token');\n      \n      expect(response.status).toBe(500);\n      expect(response.body.error).toBe('Internal server error');\n    });\n    \n    test('provides detailed errors in development mode', async () => {\n      process.env.NODE_ENV = 'development';\n      \n      mockPrisma.user.findUnique = jest.fn().mockRejectedValue(\n        new Error('Detailed error message')\n      );\n      \n      const response = await request(app)\n        .get('/api/user/profile')\n        .set('Authorization', 'Bearer valid.token');\n      \n      expect(response.status).toBe(500);\n      expect(response.body.error).toContain('Detailed error message');\n      expect(response.body).toHaveProperty('stack');\n      \n      process.env.NODE_ENV = 'test';\n    });\n  });\n});"],"version":3}