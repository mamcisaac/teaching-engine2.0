f7bf8472efa1e30fc727c287d387557a
/* istanbul ignore next */
function cov_zpbfc8jy0() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts";
  var hash = "6c0ea1facfa9defcf39cc81406d0061f003aebc7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 13
        },
        end: {
          line: 10,
          column: 17
        }
      },
      "1": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "2": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 49
        }
      },
      "3": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "4": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 49
        }
      },
      "5": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 88
        }
      },
      "6": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "7": {
        start: {
          line: 27,
          column: 33
        },
        end: {
          line: 29,
          column: 14
        }
      },
      "8": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "9": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "10": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "11": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 72
        }
      },
      "12": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 50
        }
      },
      "13": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 59
        }
      },
      "14": {
        start: {
          line: 39,
          column: 31
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "15": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "16": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 66,
          column: 17
        }
      },
      "17": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 65,
          column: 21
        }
      },
      "18": {
        start: {
          line: 45,
          column: 41
        },
        end: {
          line: 47,
          column: 26
        }
      },
      "19": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 61,
          column: 25
        }
      },
      "20": {
        start: {
          line: 49,
          column: 28
        },
        end: {
          line: 59,
          column: 31
        }
      },
      "21": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 60,
          column: 43
        }
      },
      "22": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 118
        }
      },
      "23": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 76
        }
      },
      "24": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 51
        }
      },
      "25": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 111
        }
      },
      "26": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 45
        }
      },
      "27": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 79
        }
      },
      "28": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 24
        }
      },
      "29": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "30": {
        start: {
          line: 84,
          column: 37
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "31": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 139
        }
      },
      "32": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 39
        }
      },
      "33": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 102
        }
      },
      "34": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 62
        }
      },
      "35": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "36": {
        start: {
          line: 108,
          column: 26
        },
        end: {
          line: 108,
          column: 48
        }
      },
      "37": {
        start: {
          line: 110,
          column: 31
        },
        end: {
          line: 110,
          column: 53
        }
      },
      "38": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 30
        }
      },
      "39": {
        start: {
          line: 112,
          column: 26
        },
        end: {
          line: 112,
          column: 28
        }
      },
      "40": {
        start: {
          line: 113,
          column: 27
        },
        end: {
          line: 113,
          column: 32
        }
      },
      "41": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "42": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "43": {
        start: {
          line: 115,
          column: 29
        },
        end: {
          line: 115,
          column: 42
        }
      },
      "44": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 125,
          column: 17
        }
      },
      "45": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 41
        }
      },
      "46": {
        start: {
          line: 119,
          column: 21
        },
        end: {
          line: 125,
          column: 17
        }
      },
      "47": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 75
        }
      },
      "48": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 33
        }
      },
      "49": {
        start: {
          line: 124,
          column: 20
        },
        end: {
          line: 124,
          column: 36
        }
      },
      "50": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 67
        }
      },
      "51": {
        start: {
          line: 128,
          column: 30
        },
        end: {
          line: 128,
          column: 53
        }
      },
      "52": {
        start: {
          line: 129,
          column: 37
        },
        end: {
          line: 129,
          column: 67
        }
      },
      "53": {
        start: {
          line: 130,
          column: 33
        },
        end: {
          line: 130,
          column: 59
        }
      },
      "54": {
        start: {
          line: 131,
          column: 31
        },
        end: {
          line: 131,
          column: 55
        }
      },
      "55": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 57
        }
      },
      "56": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "57": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 85
        }
      },
      "58": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 35
        }
      },
      "59": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "60": {
        start: {
          line: 137,
          column: 25
        },
        end: {
          line: 137,
          column: 26
        }
      },
      "61": {
        start: {
          line: 138,
          column: 29
        },
        end: {
          line: 138,
          column: 44
        }
      },
      "62": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 140,
          column: 29
        }
      },
      "63": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 29
        }
      },
      "64": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 142,
          column: 34
        }
      },
      "65": {
        start: {
          line: 143,
          column: 30
        },
        end: {
          line: 143,
          column: 32
        }
      },
      "66": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 144,
          column: 36
        }
      },
      "67": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "68": {
        start: {
          line: 145,
          column: 29
        },
        end: {
          line: 145,
          column: 30
        }
      },
      "69": {
        start: {
          line: 146,
          column: 33
        },
        end: {
          line: 146,
          column: 40
        }
      },
      "70": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "71": {
        start: {
          line: 148,
          column: 24
        },
        end: {
          line: 148,
          column: 45
        }
      },
      "72": {
        start: {
          line: 150,
          column: 25
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "73": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 79
        }
      },
      "74": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 37
        }
      },
      "75": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 155,
          column: 40
        }
      },
      "76": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 71
        }
      },
      "77": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 163,
          column: 17
        }
      },
      "78": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 95
        }
      },
      "79": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 29
        }
      },
      "80": {
        start: {
          line: 164,
          column: 36
        },
        end: {
          line: 170,
          column: 17
        }
      },
      "81": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 47
        }
      },
      "82": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 32
        }
      },
      "83": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 72
        }
      },
      "84": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 68
        }
      },
      "85": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "86": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 53
        }
      },
      "87": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "88": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 58
        }
      },
      "89": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 191,
          column: 49
        }
      },
      "90": {
        start: {
          line: 192,
          column: 25
        },
        end: {
          line: 192,
          column: 37
        }
      },
      "91": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "92": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 72
        }
      },
      "93": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 77
        }
      },
      "94": {
        start: {
          line: 198,
          column: 33
        },
        end: {
          line: 198,
          column: 65
        }
      },
      "95": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 84
        }
      },
      "96": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 32
        }
      },
      "97": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 64
        }
      },
      "98": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 111
        }
      },
      "99": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "100": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 54
        }
      },
      "101": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 79
        }
      },
      "102": {
        start: {
          line: 215,
          column: 25
        },
        end: {
          line: 215,
          column: 37
        }
      },
      "103": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "104": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 73
        }
      },
      "105": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 78
        }
      },
      "106": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 221,
          column: 65
        }
      },
      "107": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 85
        }
      },
      "108": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 32
        }
      },
      "109": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 65
        }
      },
      "110": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 112
        }
      },
      "111": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "112": {
        start: {
          line: 235,
          column: 33
        },
        end: {
          line: 237,
          column: 14
        }
      },
      "113": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 239,
          column: 28
        }
      },
      "114": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 28
        }
      },
      "115": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 246,
          column: 14
        }
      },
      "116": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 84
        }
      },
      "117": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 24
        }
      },
      "118": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "119": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 76
        }
      },
      "120": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 74
        }
      },
      "121": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 24
        }
      },
      "122": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 78
        }
      },
      "123": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 25
        }
      },
      "124": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "125": {
        start: {
          line: 272,
          column: 28
        },
        end: {
          line: 290,
          column: 14
        }
      },
      "126": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 27
        }
      },
      "127": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 81
        }
      },
      "128": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 22
        }
      },
      "129": {
        start: {
          line: 300,
          column: 27
        },
        end: {
          line: 300,
          column: 37
        }
      },
      "130": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "131": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 53
        }
      },
      "132": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 307,
          column: 11
        }
      },
      "133": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 313,
          column: 11
        }
      },
      "134": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "135": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 325,
          column: 11
        }
      },
      "136": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "137": {
        start: {
          line: 333,
          column: 29
        },
        end: {
          line: 333,
          column: 54
        }
      },
      "138": {
        start: {
          line: 334,
          column: 32
        },
        end: {
          line: 334,
          column: 58
        }
      },
      "139": {
        start: {
          line: 336,
          column: 27
        },
        end: {
          line: 336,
          column: 53
        }
      },
      "140": {
        start: {
          line: 337,
          column: 36
        },
        end: {
          line: 337,
          column: 38
        }
      },
      "141": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 414,
          column: 13
        }
      },
      "142": {
        start: {
          line: 338,
          column: 25
        },
        end: {
          line: 338,
          column: 26
        }
      },
      "143": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 82
        }
      },
      "144": {
        start: {
          line: 340,
          column: 37
        },
        end: {
          line: 340,
          column: 117
        }
      },
      "145": {
        start: {
          line: 341,
          column: 31
        },
        end: {
          line: 373,
          column: 4
        }
      },
      "146": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 376,
          column: 17
        }
      },
      "147": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 69
        }
      },
      "148": {
        start: {
          line: 377,
          column: 33
        },
        end: {
          line: 388,
          column: 18
        }
      },
      "149": {
        start: {
          line: 389,
          column: 32
        },
        end: {
          line: 389,
          column: 69
        }
      },
      "150": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 393,
          column: 17
        }
      },
      "151": {
        start: {
          line: 391,
          column: 20
        },
        end: {
          line: 391,
          column: 79
        }
      },
      "152": {
        start: {
          line: 392,
          column: 20
        },
        end: {
          line: 392,
          column: 29
        }
      },
      "153": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 413,
          column: 17
        }
      },
      "154": {
        start: {
          line: 395,
          column: 35
        },
        end: {
          line: 395,
          column: 54
        }
      },
      "155": {
        start: {
          line: 396,
          column: 20
        },
        end: {
          line: 409,
          column: 21
        }
      },
      "156": {
        start: {
          line: 397,
          column: 45
        },
        end: {
          line: 407,
          column: 27
        }
      },
      "157": {
        start: {
          line: 397,
          column: 79
        },
        end: {
          line: 407,
          column: 25
        }
      },
      "158": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 408,
          column: 62
        }
      },
      "159": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 95
        }
      },
      "160": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 35
        }
      },
      "161": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 73
        }
      },
      "162": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 49
        }
      },
      "163": {
        start: {
          line: 426,
          column: 33
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "164": {
        start: {
          line: 431,
          column: 26
        },
        end: {
          line: 431,
          column: 44
        }
      },
      "165": {
        start: {
          line: 432,
          column: 28
        },
        end: {
          line: 432,
          column: 102
        }
      },
      "166": {
        start: {
          line: 432,
          column: 65
        },
        end: {
          line: 432,
          column: 94
        }
      },
      "167": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 32
        }
      },
      "168": {
        start: {
          line: 439,
          column: 34
        },
        end: {
          line: 439,
          column: 92
        }
      },
      "169": {
        start: {
          line: 440,
          column: 33
        },
        end: {
          line: 440,
          column: 91
        }
      },
      "170": {
        start: {
          line: 441,
          column: 26
        },
        end: {
          line: 441,
          column: 44
        }
      },
      "171": {
        start: {
          line: 442,
          column: 27
        },
        end: {
          line: 442,
          column: 93
        }
      },
      "172": {
        start: {
          line: 442,
          column: 63
        },
        end: {
          line: 442,
          column: 92
        }
      },
      "173": {
        start: {
          line: 443,
          column: 26
        },
        end: {
          line: 443,
          column: 91
        }
      },
      "174": {
        start: {
          line: 443,
          column: 61
        },
        end: {
          line: 443,
          column: 90
        }
      },
      "175": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 39
        }
      },
      "176": {
        start: {
          line: 450,
          column: 23
        },
        end: {
          line: 450,
          column: 25
        }
      },
      "177": {
        start: {
          line: 451,
          column: 27
        },
        end: {
          line: 451,
          column: 46
        }
      },
      "178": {
        start: {
          line: 452,
          column: 27
        },
        end: {
          line: 452,
          column: 29
        }
      },
      "179": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "180": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 460,
          column: 13
        }
      },
      "181": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 49
        }
      },
      "182": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 41
        }
      },
      "183": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 73
        }
      },
      "184": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "185": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 45
        }
      },
      "186": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 22
        }
      },
      "187": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 476,
          column: 29
        }
      },
      "188": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 29
        }
      },
      "189": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 478,
          column: 29
        }
      },
      "190": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 29
        }
      },
      "191": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 480,
          column: 29
        }
      },
      "192": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 29
        }
      },
      "193": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 482,
          column: 29
        }
      },
      "194": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 29
        }
      },
      "195": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 26
        }
      },
      "196": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "197": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 505,
          column: 15
        }
      },
      "198": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 89
        }
      },
      "199": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 509,
          column: 84
        }
      },
      "200": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 24
        }
      },
      "201": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "202": {
        start: {
          line: 518,
          column: 33
        },
        end: {
          line: 520,
          column: 14
        }
      },
      "203": {
        start: {
          line: 521,
          column: 12
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "204": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 60
        }
      },
      "205": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 526,
          column: 13
        }
      },
      "206": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 69
        }
      },
      "207": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 77
        }
      },
      "208": {
        start: {
          line: 530,
          column: 31
        },
        end: {
          line: 530,
          column: 74
        }
      },
      "209": {
        start: {
          line: 532,
          column: 31
        },
        end: {
          line: 532,
          column: 33
        }
      },
      "210": {
        start: {
          line: 533,
          column: 12
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "211": {
        start: {
          line: 534,
          column: 16
        },
        end: {
          line: 534,
          column: 63
        }
      },
      "212": {
        start: {
          line: 536,
          column: 17
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "213": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 64
        }
      },
      "214": {
        start: {
          line: 539,
          column: 17
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "215": {
        start: {
          line: 541,
          column: 35
        },
        end: {
          line: 541,
          column: 63
        }
      },
      "216": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 57
        }
      },
      "217": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 545,
          column: 89
        }
      },
      "218": {
        start: {
          line: 548,
          column: 31
        },
        end: {
          line: 548,
          column: 40
        }
      },
      "219": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 567,
          column: 13
        }
      },
      "220": {
        start: {
          line: 550,
          column: 36
        },
        end: {
          line: 550,
          column: 68
        }
      },
      "221": {
        start: {
          line: 551,
          column: 16
        },
        end: {
          line: 556,
          column: 17
        }
      },
      "222": {
        start: {
          line: 552,
          column: 20
        },
        end: {
          line: 555,
          column: 23
        }
      },
      "223": {
        start: {
          line: 557,
          column: 32
        },
        end: {
          line: 557,
          column: 59
        }
      },
      "224": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 566,
          column: 19
        }
      },
      "225": {
        start: {
          line: 568,
          column: 29
        },
        end: {
          line: 568,
          column: 60
        }
      },
      "226": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 578,
          column: 15
        }
      },
      "227": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 83
        }
      },
      "228": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 96
        }
      },
      "229": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 585,
          column: 14
        }
      },
      "230": {
        start: {
          line: 588,
          column: 12
        },
        end: {
          line: 588,
          column: 84
        }
      },
      "231": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 589,
          column: 73
        }
      },
      "232": {
        start: {
          line: 590,
          column: 12
        },
        end: {
          line: 590,
          column: 24
        }
      },
      "233": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 715,
          column: 9
        }
      },
      "234": {
        start: {
          line: 599,
          column: 30
        },
        end: {
          line: 600,
          column: 61
        }
      },
      "235": {
        start: {
          line: 602,
          column: 27
        },
        end: {
          line: 602,
          column: 29
        }
      },
      "236": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 692,
          column: 13
        }
      },
      "237": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 641,
          column: 22
        }
      },
      "238": {
        start: {
          line: 642,
          column: 20
        },
        end: {
          line: 642,
          column: 26
        }
      },
      "239": {
        start: {
          line: 644,
          column: 20
        },
        end: {
          line: 671,
          column: 22
        }
      },
      "240": {
        start: {
          line: 672,
          column: 20
        },
        end: {
          line: 672,
          column: 26
        }
      },
      "241": {
        start: {
          line: 674,
          column: 20
        },
        end: {
          line: 688,
          column: 22
        }
      },
      "242": {
        start: {
          line: 689,
          column: 20
        },
        end: {
          line: 689,
          column: 26
        }
      },
      "243": {
        start: {
          line: 691,
          column: 20
        },
        end: {
          line: 691,
          column: 67
        }
      },
      "244": {
        start: {
          line: 694,
          column: 12
        },
        end: {
          line: 703,
          column: 15
        }
      },
      "245": {
        start: {
          line: 705,
          column: 12
        },
        end: {
          line: 705,
          column: 73
        }
      },
      "246": {
        start: {
          line: 706,
          column: 12
        },
        end: {
          line: 706,
          column: 89
        }
      },
      "247": {
        start: {
          line: 707,
          column: 12
        },
        end: {
          line: 710,
          column: 14
        }
      },
      "248": {
        start: {
          line: 713,
          column: 12
        },
        end: {
          line: 713,
          column: 95
        }
      },
      "249": {
        start: {
          line: 714,
          column: 12
        },
        end: {
          line: 714,
          column: 24
        }
      },
      "250": {
        start: {
          line: 721,
          column: 8
        },
        end: {
          line: 780,
          column: 9
        }
      },
      "251": {
        start: {
          line: 722,
          column: 33
        },
        end: {
          line: 727,
          column: 14
        }
      },
      "252": {
        start: {
          line: 728,
          column: 12
        },
        end: {
          line: 730,
          column: 13
        }
      },
      "253": {
        start: {
          line: 729,
          column: 16
        },
        end: {
          line: 729,
          column: 60
        }
      },
      "254": {
        start: {
          line: 732,
          column: 35
        },
        end: {
          line: 732,
          column: 78
        }
      },
      "255": {
        start: {
          line: 733,
          column: 36
        },
        end: {
          line: 733,
          column: 37
        }
      },
      "256": {
        start: {
          line: 734,
          column: 29
        },
        end: {
          line: 734,
          column: 31
        }
      },
      "257": {
        start: {
          line: 736,
          column: 12
        },
        end: {
          line: 752,
          column: 13
        }
      },
      "258": {
        start: {
          line: 737,
          column: 16
        },
        end: {
          line: 737,
          column: 44
        }
      },
      "259": {
        start: {
          line: 738,
          column: 16
        },
        end: {
          line: 751,
          column: 17
        }
      },
      "260": {
        start: {
          line: 739,
          column: 20
        },
        end: {
          line: 749,
          column: 23
        }
      },
      "261": {
        start: {
          line: 750,
          column: 20
        },
        end: {
          line: 750,
          column: 40
        }
      },
      "262": {
        start: {
          line: 754,
          column: 12
        },
        end: {
          line: 754,
          column: 65
        }
      },
      "263": {
        start: {
          line: 755,
          column: 12
        },
        end: {
          line: 755,
          column: 51
        }
      },
      "264": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 769,
          column: 15
        }
      },
      "265": {
        start: {
          line: 770,
          column: 12
        },
        end: {
          line: 770,
          column: 105
        }
      },
      "266": {
        start: {
          line: 771,
          column: 12
        },
        end: {
          line: 774,
          column: 14
        }
      },
      "267": {
        start: {
          line: 777,
          column: 12
        },
        end: {
          line: 777,
          column: 80
        }
      },
      "268": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 778,
          column: 62
        }
      },
      "269": {
        start: {
          line: 779,
          column: 12
        },
        end: {
          line: 779,
          column: 24
        }
      },
      "270": {
        start: {
          line: 784,
          column: 39
        },
        end: {
          line: 784,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 82
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 82
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 25
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 106
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 31
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 183
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 210
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 38
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 233
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 33
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 256
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 47
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 270
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 62
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 299
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 54
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 309
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 315
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 321,
            column: 5
          }
        },
        loc: {
          start: {
            line: 321,
            column: 38
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 321
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 32
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 330
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 397,
            column: 69
          },
          end: {
            line: 397,
            column: 70
          }
        },
        loc: {
          start: {
            line: 397,
            column: 79
          },
          end: {
            line: 407,
            column: 25
          }
        },
        line: 397
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 25
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 425
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 432,
            column: 52
          },
          end: {
            line: 432,
            column: 53
          }
        },
        loc: {
          start: {
            line: 432,
            column: 65
          },
          end: {
            line: 432,
            column: 94
          }
        },
        line: 432
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 26
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 438
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 442,
            column: 50
          },
          end: {
            line: 442,
            column: 51
          }
        },
        loc: {
          start: {
            line: 442,
            column: 63
          },
          end: {
            line: 442,
            column: 92
          }
        },
        line: 442
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 443,
            column: 48
          },
          end: {
            line: 443,
            column: 49
          }
        },
        loc: {
          start: {
            line: 443,
            column: 61
          },
          end: {
            line: 443,
            column: 90
          }
        },
        line: 443
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 38
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 449
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        loc: {
          start: {
            line: 470,
            column: 48
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 470
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 44
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 489
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 53
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 516
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 596,
            column: 4
          },
          end: {
            line: 596,
            column: 5
          }
        },
        loc: {
          start: {
            line: 596,
            column: 49
          },
          end: {
            line: 716,
            column: 5
          }
        },
        line: 596
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 720,
            column: 4
          },
          end: {
            line: 720,
            column: 5
          }
        },
        loc: {
          start: {
            line: 720,
            column: 44
          },
          end: {
            line: 781,
            column: 5
          }
        },
        line: 720
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: 18,
            column: 13
          },
          end: {
            line: 20,
            column: 9
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 53
          }
        }, {
          start: {
            line: 38,
            column: 57
          },
          end: {
            line: 38,
            column: 59
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 61,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 61,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 51
          },
          end: {
            line: 53,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 51
          },
          end: {
            line: 53,
            column: 76
          }
        }, {
          start: {
            line: 53,
            column: 80
          },
          end: {
            line: 53,
            column: 84
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 55,
            column: 47
          },
          end: {
            line: 55,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 47
          },
          end: {
            line: 55,
            column: 68
          }
        }, {
          start: {
            line: 55,
            column: 72
          },
          end: {
            line: 55,
            column: 76
          }
        }],
        line: 55
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 92,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 92,
            column: 39
          }
        }, {
          start: {
            line: 92,
            column: 43
          },
          end: {
            line: 92,
            column: 45
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        }, {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 125,
            column: 17
          }
        }],
        line: 116
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 125,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 125,
            column: 17
          }
        }, {
          start: {
            line: 123,
            column: 21
          },
          end: {
            line: 125,
            column: 17
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 25
          },
          end: {
            line: 119,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 25
          },
          end: {
            line: 119,
            column: 37
          }
        }, {
          start: {
            line: 119,
            column: 41
          },
          end: {
            line: 119,
            column: 50
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 32
          }
        }, {
          start: {
            line: 133,
            column: 36
          },
          end: {
            line: 133,
            column: 59
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 140,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 140,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "14": {
        loc: {
          start: {
            line: 147,
            column: 20
          },
          end: {
            line: 156,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 20
          },
          end: {
            line: 156,
            column: 21
          }
        }, {
          start: {
            line: 150,
            column: 25
          },
          end: {
            line: 156,
            column: 21
          }
        }],
        line: 147
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 25
          },
          end: {
            line: 156,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 25
          },
          end: {
            line: 156,
            column: 21
          }
        }, {
          start: {
            line: 154,
            column: 25
          },
          end: {
            line: 156,
            column: 21
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 150,
            column: 29
          },
          end: {
            line: 150,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 29
          },
          end: {
            line: 150,
            column: 41
          }
        }, {
          start: {
            line: 150,
            column: 45
          },
          end: {
            line: 150,
            column: 54
          }
        }],
        line: 150
      },
      "17": {
        loc: {
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 163,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 163,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "18": {
        loc: {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 49
          },
          end: {
            line: 167,
            column: 70
          }
        }, {
          start: {
            line: 167,
            column: 73
          },
          end: {
            line: 167,
            column: 82
          }
        }],
        line: 167
      },
      "19": {
        loc: {
          start: {
            line: 168,
            column: 27
          },
          end: {
            line: 168,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 45
          },
          end: {
            line: 168,
            column: 79
          }
        }, {
          start: {
            line: 168,
            column: 82
          },
          end: {
            line: 168,
            column: 83
          }
        }],
        line: 168
      },
      "20": {
        loc: {
          start: {
            line: 168,
            column: 45
          },
          end: {
            line: 168,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 45
          },
          end: {
            line: 168,
            column: 74
          }
        }, {
          start: {
            line: 168,
            column: 78
          },
          end: {
            line: 168,
            column: 79
          }
        }],
        line: 168
      },
      "21": {
        loc: {
          start: {
            line: 169,
            column: 28
          },
          end: {
            line: 169,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 47
          },
          end: {
            line: 169,
            column: 67
          }
        }, {
          start: {
            line: 169,
            column: 70
          },
          end: {
            line: 169,
            column: 79
          }
        }],
        line: 169
      },
      "22": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "23": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "24": {
        loc: {
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 193,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 193,
            column: 21
          }
        }, {
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 42
          }
        }],
        line: 193
      },
      "25": {
        loc: {
          start: {
            line: 204,
            column: 51
          },
          end: {
            line: 204,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 76
          },
          end: {
            line: 204,
            column: 89
          }
        }, {
          start: {
            line: 204,
            column: 92
          },
          end: {
            line: 204,
            column: 107
          }
        }],
        line: 204
      },
      "26": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "27": {
        loc: {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 216,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 216,
            column: 21
          }
        }, {
          start: {
            line: 216,
            column: 25
          },
          end: {
            line: 216,
            column: 42
          }
        }],
        line: 216
      },
      "28": {
        loc: {
          start: {
            line: 227,
            column: 52
          },
          end: {
            line: 227,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 77
          },
          end: {
            line: 227,
            column: 90
          }
        }, {
          start: {
            line: 227,
            column: 93
          },
          end: {
            line: 227,
            column: 108
          }
        }],
        line: 227
      },
      "29": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 239,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 239,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "30": {
        loc: {
          start: {
            line: 245,
            column: 24
          },
          end: {
            line: 245,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 24
          },
          end: {
            line: 245,
            column: 45
          }
        }, {
          start: {
            line: 245,
            column: 49
          },
          end: {
            line: 245,
            column: 51
          }
        }],
        line: 245
      },
      "31": {
        loc: {
          start: {
            line: 270,
            column: 35
          },
          end: {
            line: 270,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 270,
            column: 43
          },
          end: {
            line: 270,
            column: 45
          }
        }],
        line: 270
      },
      "32": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "33": {
        loc: {
          start: {
            line: 340,
            column: 37
          },
          end: {
            line: 340,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 340,
            column: 48
          },
          end: {
            line: 340,
            column: 56
          }
        }, {
          start: {
            line: 340,
            column: 59
          },
          end: {
            line: 340,
            column: 117
          }
        }],
        line: 340
      },
      "34": {
        loc: {
          start: {
            line: 340,
            column: 59
          },
          end: {
            line: 340,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 340,
            column: 73
          },
          end: {
            line: 340,
            column: 105
          }
        }, {
          start: {
            line: 340,
            column: 108
          },
          end: {
            line: 340,
            column: 117
          }
        }],
        line: 340
      },
      "35": {
        loc: {
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 376,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 376,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "36": {
        loc: {
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 393,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 393,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "37": {
        loc: {
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 409,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 409,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "38": {
        loc: {
          start: {
            line: 396,
            column: 24
          },
          end: {
            line: 396,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 24
          },
          end: {
            line: 396,
            column: 43
          }
        }, {
          start: {
            line: 396,
            column: 47
          },
          end: {
            line: 396,
            column: 81
          }
        }],
        line: 396
      },
      "39": {
        loc: {
          start: {
            line: 398,
            column: 34
          },
          end: {
            line: 398,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 398,
            column: 34
          },
          end: {
            line: 398,
            column: 42
          }
        }, {
          start: {
            line: 398,
            column: 46
          },
          end: {
            line: 398,
            column: 83
          }
        }],
        line: 398
      },
      "40": {
        loc: {
          start: {
            line: 399,
            column: 41
          },
          end: {
            line: 399,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 399,
            column: 41
          },
          end: {
            line: 399,
            column: 56
          }
        }, {
          start: {
            line: 399,
            column: 60
          },
          end: {
            line: 399,
            column: 62
          }
        }],
        line: 399
      },
      "41": {
        loc: {
          start: {
            line: 401,
            column: 37
          },
          end: {
            line: 401,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 37
          },
          end: {
            line: 401,
            column: 51
          }
        }, {
          start: {
            line: 401,
            column: 55
          },
          end: {
            line: 401,
            column: 64
          }
        }],
        line: 401
      },
      "42": {
        loc: {
          start: {
            line: 402,
            column: 35
          },
          end: {
            line: 402,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 402,
            column: 35
          },
          end: {
            line: 402,
            column: 47
          }
        }, {
          start: {
            line: 402,
            column: 51
          },
          end: {
            line: 402,
            column: 52
          }
        }],
        line: 402
      },
      "43": {
        loc: {
          start: {
            line: 403,
            column: 36
          },
          end: {
            line: 403,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 36
          },
          end: {
            line: 403,
            column: 46
          }
        }, {
          start: {
            line: 403,
            column: 50
          },
          end: {
            line: 403,
            column: 60
          }
        }, {
          start: {
            line: 403,
            column: 64
          },
          end: {
            line: 403,
            column: 73
          }
        }],
        line: 403
      },
      "44": {
        loc: {
          start: {
            line: 444,
            column: 15
          },
          end: {
            line: 444,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 15
          },
          end: {
            line: 444,
            column: 25
          }
        }, {
          start: {
            line: 444,
            column: 29
          },
          end: {
            line: 444,
            column: 38
          }
        }],
        line: 444
      },
      "45": {
        loc: {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        }, {
          start: {
            line: 458,
            column: 17
          },
          end: {
            line: 460,
            column: 13
          }
        }],
        line: 454
      },
      "46": {
        loc: {
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 454,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 454,
            column: 73
          }
        }, {
          start: {
            line: 454,
            column: 77
          },
          end: {
            line: 454,
            column: 100
          }
        }],
        line: 454
      },
      "47": {
        loc: {
          start: {
            line: 459,
            column: 33
          },
          end: {
            line: 459,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 459,
            column: 48
          },
          end: {
            line: 459,
            column: 54
          }
        }, {
          start: {
            line: 459,
            column: 57
          },
          end: {
            line: 459,
            column: 59
          }
        }],
        line: 459
      },
      "48": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "49": {
        loc: {
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 476,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 476,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "50": {
        loc: {
          start: {
            line: 477,
            column: 8
          },
          end: {
            line: 478,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 8
          },
          end: {
            line: 478,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 477
      },
      "51": {
        loc: {
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 480,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 480,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 479
      },
      "52": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 482,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 482,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "53": {
        loc: {
          start: {
            line: 516,
            column: 38
          },
          end: {
            line: 516,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 516,
            column: 49
          },
          end: {
            line: 516,
            column: 51
          }
        }],
        line: 516
      },
      "54": {
        loc: {
          start: {
            line: 521,
            column: 12
          },
          end: {
            line: 523,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 521,
            column: 12
          },
          end: {
            line: 523,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 521
      },
      "55": {
        loc: {
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 526,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "56": {
        loc: {
          start: {
            line: 533,
            column: 12
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 12
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: 536,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        }],
        line: 533
      },
      "57": {
        loc: {
          start: {
            line: 536,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 536,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: 539,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        }],
        line: 536
      },
      "58": {
        loc: {
          start: {
            line: 539,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 539,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: 544,
            column: 17
          },
          end: {
            line: 546,
            column: 13
          }
        }],
        line: 539
      },
      "59": {
        loc: {
          start: {
            line: 550,
            column: 36
          },
          end: {
            line: 550,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 550,
            column: 36
          },
          end: {
            line: 550,
            column: 55
          }
        }, {
          start: {
            line: 550,
            column: 59
          },
          end: {
            line: 550,
            column: 68
          }
        }],
        line: 550
      },
      "60": {
        loc: {
          start: {
            line: 551,
            column: 16
          },
          end: {
            line: 556,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 551,
            column: 16
          },
          end: {
            line: 556,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 551
      },
      "61": {
        loc: {
          start: {
            line: 562,
            column: 28
          },
          end: {
            line: 562,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 562,
            column: 28
          },
          end: {
            line: 562,
            column: 46
          }
        }, {
          start: {
            line: 562,
            column: 50
          },
          end: {
            line: 562,
            column: 59
          }
        }],
        line: 562
      },
      "62": {
        loc: {
          start: {
            line: 565,
            column: 27
          },
          end: {
            line: 565,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 565,
            column: 27
          },
          end: {
            line: 565,
            column: 44
          }
        }, {
          start: {
            line: 565,
            column: 48
          },
          end: {
            line: 565,
            column: 66
          }
        }],
        line: 565
      },
      "63": {
        loc: {
          start: {
            line: 574,
            column: 28
          },
          end: {
            line: 574,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 574,
            column: 28
          },
          end: {
            line: 574,
            column: 49
          }
        }, {
          start: {
            line: 574,
            column: 53
          },
          end: {
            line: 574,
            column: 55
          }
        }],
        line: 574
      },
      "64": {
        loc: {
          start: {
            line: 603,
            column: 12
          },
          end: {
            line: 692,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 604,
            column: 16
          },
          end: {
            line: 642,
            column: 26
          }
        }, {
          start: {
            line: 643,
            column: 16
          },
          end: {
            line: 672,
            column: 26
          }
        }, {
          start: {
            line: 673,
            column: 16
          },
          end: {
            line: 689,
            column: 26
          }
        }, {
          start: {
            line: 690,
            column: 16
          },
          end: {
            line: 691,
            column: 67
          }
        }],
        line: 603
      },
      "65": {
        loc: {
          start: {
            line: 728,
            column: 12
          },
          end: {
            line: 730,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 728,
            column: 12
          },
          end: {
            line: 730,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 728
      },
      "66": {
        loc: {
          start: {
            line: 732,
            column: 35
          },
          end: {
            line: 732,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 732,
            column: 35
          },
          end: {
            line: 732,
            column: 72
          }
        }, {
          start: {
            line: 732,
            column: 76
          },
          end: {
            line: 732,
            column: 78
          }
        }],
        line: 732
      },
      "67": {
        loc: {
          start: {
            line: 761,
            column: 28
          },
          end: {
            line: 761,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 761,
            column: 28
          },
          end: {
            line: 761,
            column: 49
          }
        }, {
          start: {
            line: 761,
            column: 53
          },
          end: {
            line: 761,
            column: 55
          }
        }],
        line: 761
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts"],
      sourcesContent: ["/* eslint-disable @typescript-eslint/no-explicit-any */\n// import { embeddingService } from './embeddingService'; // Currently unused\nimport BaseService from './base/BaseService';\nimport { ImportStatus } from '@teaching-engine/database';\n// Import pdf-parse dynamically to avoid loading test files during module initialization\nlet pdf: any;\nimport mammoth from 'mammoth';\nimport OpenAI from 'openai';\n\nexport interface ImportProgress {\n  importId: string;\n  status: ImportStatus;\n  totalOutcomes: number;\n  processedOutcomes: number;\n  errors: string[];\n}\n\nexport class CurriculumImportService extends BaseService {\n  private openai: OpenAI | null = null;\n\n  constructor() {\n    super('CurriculumImportService');\n    // Only initialize OpenAI if we have an API key\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (apiKey) {\n      this.openai = new OpenAI({ apiKey });\n    } else {\n      this.logger.warn('OpenAI API key not found - AI features will be disabled');\n    }\n  }\n\n  /**\n   * Confirm import and create curriculum expectations\n   */\n  async confirmImport(importId: string): Promise<{ created: number }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      if (importRecord.status !== ImportStatus.READY_FOR_REVIEW) {\n        throw new Error('Import is not ready for confirmation');\n      }\n\n      // Get parsed subjects from metadata\n      const metadata = importRecord.metadata as any;\n      const subjects = metadata?.parsedSubjects || [];\n\n      let createdCount = 0;\n\n      // Create curriculum expectations\n      for (const subject of subjects) {\n        for (const expectation of subject.expectations) {\n          try {\n            // Check if expectation already exists\n            const existing = await this.prisma.curriculumExpectation.findUnique({\n              where: { code: expectation.code },\n            });\n\n            if (!existing) {\n              await this.prisma.curriculumExpectation.create({\n                data: {\n                  code: expectation.code,\n                  description: expectation.description,\n                  descriptionFr: expectation.descriptionFr || null,\n                  strand: expectation.strand,\n                  substrand: expectation.substrand || null,\n                  grade: expectation.grade,\n                  subject: expectation.subject,\n                },\n              });\n              createdCount++;\n            }\n          } catch (error) {\n            this.logger.warn(\n              { error, code: expectation.code },\n              'Failed to create expectation, skipping',\n            );\n          }\n        }\n      }\n\n      // Update import status\n      await this.updateImportStatus(importId, ImportStatus.COMPLETED);\n      await this.setCompletionTime(importId);\n\n      this.logger.info(\n        { importId, created: createdCount },\n        'Import confirmed and expectations created',\n      );\n\n      return { created: createdCount };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to confirm import');\n      throw error;\n    }\n  }\n\n  /**\n   * Start a new curriculum import session\n   */\n  async startImport(\n    userId: number,\n    grade: number,\n    subject: string,\n    sourceFormat: 'csv' | 'pdf' | 'docx' | 'manual',\n    sourceFile?: string,\n    metadata?: Record<string, unknown>,\n  ): Promise<string> {\n    try {\n      const curriculumImport = await this.prisma.curriculumImport.create({\n        data: {\n          userId,\n          grade,\n          subject,\n          sourceFormat,\n          sourceFile,\n          status: ImportStatus.UPLOADING,\n          metadata: (metadata || {}) as any,\n        },\n      });\n\n      this.logger.info(\n        { importId: curriculumImport.id, userId, grade, subject, sourceFormat },\n        'Started curriculum import session',\n      );\n\n      return curriculumImport.id;\n    } catch (error) {\n      this.logger.error({ error, userId, grade, subject }, 'Failed to start curriculum import');\n      throw new Error('Failed to start import session');\n    }\n  }\n\n  /**\n   * Parse CSV content into curriculum expectations\n   */\n  parseCSV(csvContent: string): Array<{\n    code: string;\n    description: string;\n    subject: string;\n    grade: number;\n    strand?: string;\n    substrand?: string;\n  }> {\n    try {\n      const lines = csvContent.split('\\n');\n      // Parse header line handling quoted values\n      const headerLine = lines[0].toLowerCase();\n      const headers: string[] = [];\n      let current = '';\n      let inQuotes = false;\n\n      for (let j = 0; j < headerLine.length; j++) {\n        const char = headerLine[j];\n\n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === ',' && !inQuotes) {\n          headers.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n          current = '';\n        } else {\n          current += char;\n        }\n      }\n      headers.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n\n      const codeIndex = headers.indexOf('code');\n      const descriptionIndex = headers.indexOf('description');\n      const subjectIndex = headers.indexOf('subject');\n      const gradeIndex = headers.indexOf('grade');\n      const domainIndex = headers.indexOf('domain');\n\n      if (codeIndex === -1 || descriptionIndex === -1) {\n        throw new Error('CSV must contain \"code\" and \"description\" columns');\n      }\n\n      const expectations: Array<{\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        substrand?: string;\n      }> = [];\n\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        // Parse CSV line handling quoted values properly\n        const columns: string[] = [];\n        let current = '';\n        let inQuotes = false;\n\n        for (let j = 0; j < line.length; j++) {\n          const char = line[j];\n\n          if (char === '\"') {\n            inQuotes = !inQuotes;\n          } else if (char === ',' && !inQuotes) {\n            columns.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n            current = '';\n          } else {\n            current += char;\n          }\n        }\n\n        // Don't forget the last column\n        columns.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n\n        if (columns.length < Math.max(codeIndex, descriptionIndex) + 1) {\n          this.logger.warn({ lineNumber: i + 1, line }, 'Skipping invalid CSV line');\n          continue;\n        }\n\n        const expectation = {\n          code: columns[codeIndex],\n          description: columns[descriptionIndex],\n          subject: subjectIndex >= 0 ? columns[subjectIndex] : 'Unknown',\n          grade: gradeIndex >= 0 ? parseInt(columns[gradeIndex]) || 0 : 0,\n          strand: domainIndex >= 0 ? columns[domainIndex] : 'General',\n        };\n\n        expectations.push(expectation);\n      }\n\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse CSV content');\n      throw new Error(`CSV parsing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Extract curriculum expectations from PDF using pdf-parse and AI\n   */\n  async parsePDF(fileBuffer: Buffer): Promise<\n    Array<{\n      code: string;\n      description: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      substrand?: string;\n    }>\n  > {\n    try {\n      this.logger.info('Starting PDF parsing');\n\n      // Lazy load pdf-parse to avoid initialization issues\n      if (!pdf) {\n        pdf = (await import('pdf-parse')).default;\n      }\n\n      // Extract text from PDF\n      const pdfData = await pdf(fileBuffer);\n      const text = pdfData.text;\n\n      if (!text || text.length < 100) {\n        throw new Error('PDF appears to be empty or too short');\n      }\n\n      this.logger.info(`Extracted ${text.length} characters from PDF`);\n\n      // Use AI to parse the curriculum text\n      const expectations = await this.parseTextWithAI(text);\n\n      this.logger.info(`Parsed ${expectations.length} expectations from PDF`);\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse PDF');\n      throw new Error(\n        `PDF parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Extract curriculum expectations from DOCX using mammoth and AI\n   */\n  async parseDOCX(fileBuffer: Buffer): Promise<\n    Array<{\n      code: string;\n      description: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      substrand?: string;\n    }>\n  > {\n    try {\n      this.logger.info('Starting DOCX parsing');\n\n      // Extract text from DOCX\n      const result = await mammoth.extractRawText({ buffer: fileBuffer });\n      const text = result.value;\n\n      if (!text || text.length < 100) {\n        throw new Error('DOCX appears to be empty or too short');\n      }\n\n      this.logger.info(`Extracted ${text.length} characters from DOCX`);\n\n      // Use AI to parse the curriculum text\n      const expectations = await this.parseTextWithAI(text);\n\n      this.logger.info(`Parsed ${expectations.length} expectations from DOCX`);\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse DOCX');\n      throw new Error(\n        `DOCX parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Get import progress\n   */\n  async getImportProgress(importId: string): Promise<ImportProgress | null> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) return null;\n\n      return {\n        importId,\n        status: importRecord.status,\n        totalOutcomes: importRecord.totalOutcomes,\n        processedOutcomes: importRecord.processedOutcomes,\n        errors: (importRecord.errorLog as string[]) || [],\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to get import progress');\n      return null;\n    }\n  }\n\n  /**\n   * Cancel an import session\n   */\n  async cancelImport(importId: string): Promise<boolean> {\n    try {\n      await this.updateImportStatus(importId, ImportStatus.CANCELLED);\n      this.logger.info({ importId }, 'Cancelled curriculum import');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to cancel import');\n      return false;\n    }\n  }\n\n  /**\n   * Get import history for a user\n   */\n  async getImportHistory(userId: number, limit: number = 20): Promise<unknown[]> {\n    try {\n      const imports = await this.prisma.curriculumImport.findMany({\n        where: { userId },\n        orderBy: { createdAt: 'desc' },\n        take: limit,\n        include: {\n          clusters: {\n            select: {\n              id: true,\n              clusterName: true,\n              clusterType: true,\n            },\n          },\n          _count: {\n            select: {\n              curriculumExpectations: true,\n            },\n          },\n        },\n      });\n\n      return imports;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get import history');\n      return [];\n    }\n  }\n\n  // Private helper methods\n\n  private async updateImportStatus(\n    importId: string,\n    status: ImportStatus,\n    totalOutcomes?: number,\n  ): Promise<void> {\n    const updateData: any = { status };\n    if (totalOutcomes !== undefined) {\n      updateData.totalOutcomes = totalOutcomes;\n    }\n\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: updateData,\n    });\n  }\n\n  private async updateProgress(importId: string, processedOutcomes: number): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { processedOutcomes },\n    });\n  }\n\n  private async setCompletionTime(importId: string): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { completedAt: new Date() },\n    });\n  }\n\n  private async logErrors(importId: string, errors: string[]): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { errorLog: errors },\n    });\n  }\n\n  /**\n   * Parse curriculum text using AI to extract expectations\n   */\n  private async parseTextWithAI(text: string): Promise<\n    Array<{\n      code: string;\n      description: string;\n      descriptionFr?: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      strandFr?: string;\n      substrand?: string;\n      substrandFr?: string;\n    }>\n  > {\n    try {\n      // Detect if document is in French or bilingual\n      const isFrench = this.detectLanguage(text);\n      const isBilingual = this.detectBilingual(text);\n      \n      // Split text into chunks if it's too long (GPT-4 has token limits)\n      const chunks = this.chunkText(text, 3000); // ~750 words per chunk\n      const allExpectations: Array<{\n        code: string;\n        description: string;\n        descriptionFr?: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        strandFr?: string;\n        substrand?: string;\n        substrandFr?: string;\n      }> = [];\n\n      for (let i = 0; i < chunks.length; i++) {\n        this.logger.info(`Processing chunk ${i + 1} of ${chunks.length}`);\n\n        const languageInfo = isFrench ? 'French' : isBilingual ? 'bilingual (English and French)' : 'English';\n        const prompt = `You are an expert in curriculum design for elementary education. Extract curriculum expectations from the following ${languageInfo} text.\n\nPlease extract and return in JSON format:\n- Subject name\n- Grade level\n- For each expectation:\n  - Code (e.g., \"A1.1\", \"B2.3\")\n  - Type (\"overall\" or \"specific\")\n  - Description (the full text of the expectation)\n  - Strand (major category like \"Oral Communication\", \"Reading\", etc.)\n  - Domain (if applicable)\n\nReturn ONLY a JSON object with this structure:\n{\n  \"subject\": \"Subject Name\",\n  \"grade\": 1,\n  \"expectations\": [\n    {\n      \"code\": \"A1.1\",\n      \"type\": \"overall\",\n      \"description\": \"Full expectation text\",\n      \"strand\": \"Strand Name\",\n      \"domain\": \"Domain Name (optional)\"\n    }\n  ]\n}\n\nOnly include data you are confident about. Do not invent or hallucinate expectations.\n\nText to parse:\n\"\"\"\n${chunks[i]}\n\"\"\"`;\n\n        if (!this.openai) {\n          throw new Error('OpenAI API key not configured');\n        }\n\n        const response = await this.openai.chat.completions.create({\n          model: 'gpt-4',\n          messages: [\n            {\n              role: 'system',\n              content:\n                'You are an expert curriculum analyst. Extract curriculum expectations accurately.',\n            },\n            { role: 'user', content: prompt },\n          ],\n          temperature: 0.1, // Low temperature for accuracy\n          max_tokens: 2000,\n        });\n\n        const content = response.choices[0]?.message?.content;\n        if (!content) {\n          this.logger.warn(`No content returned for chunk ${i + 1}`);\n          continue;\n        }\n\n        try {\n          const parsed = JSON.parse(content);\n          if (parsed.expectations && Array.isArray(parsed.expectations)) {\n            const expectations = parsed.expectations.map((exp: any) => ({\n              code: exp.code || `AUTO_${i}_${allExpectations.length}`,\n              description: exp.description || '',\n              descriptionFr: exp.descriptionFr,\n              subject: parsed.subject || 'Unknown',\n              grade: parsed.grade || 1,\n              strand: exp.strand || exp.domain || 'General',\n              strandFr: exp.strandFr,\n              substrand: exp.substrand,\n              substrandFr: exp.substrandFr,\n            }));\n\n            allExpectations.push(...expectations);\n          }\n        } catch (parseError) {\n          this.logger.error({ parseError, chunk: i }, 'Failed to parse AI response');\n        }\n      }\n\n      return allExpectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse text with AI');\n      throw new Error('AI parsing failed');\n    }\n  }\n\n  /**\n   * Detect if text is primarily in French\n   */\n  private detectLanguage(text: string): boolean {\n    const frenchIndicators = [\n      'attentes', 'domaine', 'ann\xE9e', '\xE9l\xE8ve', 'apprentissage',\n      'fran\xE7ais', 'math\xE9matiques', 'sciences', '\xE9tudes sociales',\n      'contenus d\\'apprentissage', 'pistes de r\xE9flexion'\n    ];\n    \n    const textLower = text.toLowerCase();\n    const frenchCount = frenchIndicators.filter(indicator => \n      textLower.includes(indicator)\n    ).length;\n    \n    return frenchCount >= 3;\n  }\n  \n  /**\n   * Detect if text contains both English and French\n   */\n  private detectBilingual(text: string): boolean {\n    const englishIndicators = ['expectations', 'strand', 'grade', 'student', 'learning'];\n    const frenchIndicators = ['attentes', 'domaine', 'ann\xE9e', '\xE9l\xE8ve', 'apprentissage'];\n    \n    const textLower = text.toLowerCase();\n    const hasEnglish = englishIndicators.some(indicator => textLower.includes(indicator));\n    const hasFrench = frenchIndicators.some(indicator => textLower.includes(indicator));\n    \n    return hasEnglish && hasFrench;\n  }\n\n  /**\n   * Split text into manageable chunks for AI processing\n   */\n  private chunkText(text: string, maxCharsPerChunk: number): string[] {\n    const chunks: string[] = [];\n    const paragraphs = text.split(/\\n\\n+/);\n    let currentChunk = '';\n\n    for (const paragraph of paragraphs) {\n      if (currentChunk.length + paragraph.length > maxCharsPerChunk && currentChunk.length > 0) {\n        chunks.push(currentChunk.trim());\n        currentChunk = paragraph;\n      } else {\n        currentChunk += (currentChunk ? '\\n\\n' : '') + paragraph;\n      }\n    }\n\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim());\n    }\n\n    return chunks;\n  }\n\n  /**\n   * Determine if an expectation is overall or specific based on code pattern\n   */\n  private determineExpectationType(code: string, description: string): 'overall' | 'specific' {\n    // Common patterns for overall expectations:\n    // - Single letter or number (e.g., \"A\", \"1\")\n    // - Ends with .0 (e.g., \"A1.0\")\n    // - Contains \"overall\" in description\n\n    if (code.length === 1) return 'overall';\n    if (code.endsWith('.0')) return 'overall';\n    if (description.toLowerCase().includes('overall')) return 'overall';\n    if (code.match(/^[A-Z]\\d*$/)) return 'overall'; // e.g., \"A1\", \"B2\"\n\n    // Everything else is specific\n    return 'specific';\n  }\n\n  /**\n   * Store uploaded file content for parsing\n   */\n  async storeUploadedFile(importId: string, file: Express.Multer.File): Promise<void> {\n    try {\n      // Store file metadata and content\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          sourceFile: file.originalname,\n          metadata: {\n            filename: file.originalname,\n            mimetype: file.mimetype,\n            size: file.size,\n            uploadedAt: new Date().toISOString(),\n          },\n          // Store file content as base64 for now (in production, would use cloud storage)\n          rawText: file.buffer.toString('base64'),\n        },\n      });\n\n      this.logger.info(`File stored for import ${importId}: ${file.originalname}`);\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to store uploaded file');\n      throw error;\n    }\n  }\n\n  /**\n   * Parse uploaded file and extract curriculum expectations\n   */\n  async parseUploadedFile(\n    importId: string,\n    _options: { useAI?: boolean } = {},\n  ): Promise<{\n    subjects: Array<{\n      name: string;\n      expectations: Array<{\n        code: string;\n        type: 'overall' | 'specific';\n        description: string;\n        strand: string;\n        substrand?: string;\n        subject: string;\n        grade: number;\n      }>;\n    }>;\n    errors?: string[];\n  }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      if (!importRecord.rawText) {\n        throw new Error('No file content found for parsing');\n      }\n\n      // Update status to processing\n      await this.updateImportStatus(importId, ImportStatus.PROCESSING);\n\n      // Decode the file content from base64\n      const fileBuffer = Buffer.from(importRecord.rawText, 'base64');\n\n      // Parse based on file format\n      let expectations: Array<{\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        substrand?: string;\n      }> = [];\n\n      if (importRecord.sourceFormat === 'pdf') {\n        expectations = await this.parsePDF(fileBuffer);\n      } else if (importRecord.sourceFormat === 'docx') {\n        expectations = await this.parseDOCX(fileBuffer);\n      } else if (importRecord.sourceFormat === 'csv') {\n        // Convert buffer to string for CSV\n        const csvContent = fileBuffer.toString('utf-8');\n        expectations = this.parseCSV(csvContent);\n      } else {\n        throw new Error(`Unsupported file format: ${importRecord.sourceFormat}`);\n      }\n\n      // Group expectations by subject\n      const subjectMap = new Map<string, any>();\n\n      for (const expectation of expectations) {\n        const subjectName = expectation.subject || 'Unknown';\n\n        if (!subjectMap.has(subjectName)) {\n          subjectMap.set(subjectName, {\n            name: subjectName,\n            expectations: [],\n          });\n        }\n\n        const subject = subjectMap.get(subjectName);\n        subject.expectations.push({\n          code: expectation.code,\n          type: this.determineExpectationType(expectation.code, expectation.description),\n          description: expectation.description,\n          strand: expectation.strand || 'General',\n          substrand: expectation.substrand,\n          subject: subjectName,\n          grade: expectation.grade || importRecord.grade,\n        });\n      }\n\n      const subjects = Array.from(subjectMap.values());\n\n      // Store parsed subjects in metadata for later use\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          metadata: {\n            ...((importRecord.metadata as any) || {}),\n            parsedSubjects: subjects,\n          },\n        },\n      });\n\n      // Update status to ready for review\n      await this.updateImportStatus(importId, ImportStatus.READY_FOR_REVIEW);\n\n      this.logger.info(`File parsed for import ${importId}: ${subjects.length} subjects`);\n\n      return {\n        subjects: subjects,\n        errors: [],\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to parse uploaded file');\n      await this.updateImportStatus(importId, ImportStatus.FAILED);\n      throw error;\n    }\n  }\n\n  /**\n   * Load preset curriculum data\n   */\n  async loadPresetCurriculum(\n    userId: number,\n    presetId: string,\n  ): Promise<{\n    sessionId: string;\n    subjects: Array<{\n      name: string;\n      expectations: Array<{\n        code: string;\n        type: 'overall' | 'specific';\n        description: string;\n        strand: string;\n        substrand?: string;\n        subject: string;\n        grade: number;\n      }>;\n    }>;\n  }> {\n    try {\n      // Create new import session for preset\n      const sessionId = await this.startImport(\n        userId,\n        1, // Default grade for presets\n        'Multi-Subject',\n        'manual',\n        `Preset: ${presetId}`,\n      );\n\n      // Mock preset data based on presetId\n      let subjects: Array<{\n        name: string;\n        expectations: Array<{\n          code: string;\n          type: 'overall' | 'specific';\n          description: string;\n          strand: string;\n          substrand?: string;\n          subject: string;\n          grade: number;\n        }>;\n      }> = [];\n\n      switch (presetId) {\n        case 'pei-grade1-french':\n          subjects = [\n            {\n              name: 'Fran\xE7ais Langue Premi\xE8re',\n              expectations: [\n                {\n                  code: 'CO1',\n                  type: 'overall',\n                  description: 'Comprendre des messages oraux en fran\xE7ais',\n                  strand: 'Communication orale',\n                  subject: 'Fran\xE7ais Langue Premi\xE8re',\n                  grade: 1,\n                },\n                {\n                  code: 'CO1.1',\n                  type: 'specific',\n                  description: 'Suivre des instructions orales simples',\n                  strand: 'Communication orale',\n                  substrand: '\xC9coute',\n                  subject: 'Fran\xE7ais Langue Premi\xE8re',\n                  grade: 1,\n                },\n              ],\n            },\n            {\n              name: 'Math\xE9matiques',\n              expectations: [\n                {\n                  code: 'N1',\n                  type: 'overall',\n                  description: 'Comprendre les nombres de 0 \xE0 20',\n                  strand: 'Nombre',\n                  subject: 'Math\xE9matiques',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        case 'ontario-grade1-english':\n          subjects = [\n            {\n              name: 'Language',\n              expectations: [\n                {\n                  code: '1.O1',\n                  type: 'overall',\n                  description: 'Listen in order to understand and respond appropriately',\n                  strand: 'Oral Communication',\n                  subject: 'Language',\n                  grade: 1,\n                },\n              ],\n            },\n            {\n              name: 'Mathematics',\n              expectations: [\n                {\n                  code: '1.N1',\n                  type: 'overall',\n                  description: 'Count to 50 and represent numbers to 20',\n                  strand: 'Number Sense and Numeration',\n                  subject: 'Mathematics',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        case 'bc-grade1-core':\n          subjects = [\n            {\n              name: 'English Language Arts',\n              expectations: [\n                {\n                  code: 'ELA1-O1',\n                  type: 'overall',\n                  description: 'Use speaking and listening to interact with others',\n                  strand: 'Oral Language',\n                  subject: 'English Language Arts',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        default:\n          throw new Error(`Unknown preset: ${presetId}`);\n      }\n\n      // Store parsed subjects in metadata for later use\n      await this.prisma.curriculumImport.update({\n        where: { id: sessionId },\n        data: {\n          metadata: {\n            presetId,\n            parsedSubjects: subjects,\n            loadedAt: new Date().toISOString(),\n          },\n        },\n      });\n\n      // Update import status\n      await this.updateImportStatus(sessionId, 'READY_FOR_REVIEW');\n\n      this.logger.info(`Preset curriculum loaded: ${presetId} for user ${userId}`);\n\n      return {\n        sessionId,\n        subjects,\n      };\n    } catch (error) {\n      this.logger.error({ error, presetId, userId }, 'Failed to load preset curriculum');\n      throw error;\n    }\n  }\n\n  /**\n   * Finalize import and create actual curriculum expectations in the ETFO system\n   */\n  async finalizeImport(\n    importId: string,\n    _userId: number,\n  ): Promise<{\n    totalExpectations: number;\n    subjects: string[];\n  }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n        include: {\n          curriculumExpectations: true,\n        },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      // Get the parsed subjects from the import metadata\n      const parsedSubjects = (importRecord.metadata as any)?.parsedSubjects || [];\n\n      let totalExpectations = 0;\n      const subjects: string[] = [];\n\n      // Create curriculum expectations for each subject\n      for (const subject of parsedSubjects) {\n        subjects.push(subject.name);\n\n        for (const expectation of subject.expectations) {\n          await this.prisma.curriculumExpectation.create({\n            data: {\n              code: expectation.code,\n              description: expectation.description,\n              strand: expectation.strand,\n              substrand: expectation.substrand,\n              grade: expectation.grade,\n              subject: expectation.subject,\n              importId,\n            },\n          });\n          totalExpectations++;\n        }\n      }\n\n      // Update import status to completed\n      await this.updateImportStatus(importId, 'COMPLETED');\n      await this.setCompletionTime(importId);\n\n      // Store final results in metadata\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          metadata: {\n            ...((importRecord.metadata as any) || {}),\n            finalResults: {\n              totalExpectations,\n              subjects,\n              completedAt: new Date().toISOString(),\n            },\n          },\n        },\n      });\n\n      this.logger.info(`Import finalized: ${importId}, created ${totalExpectations} expectations`);\n\n      return {\n        totalExpectations,\n        subjects,\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to finalize import');\n      await this.updateImportStatus(importId, 'FAILED');\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const curriculumImportService = new CurriculumImportService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6c0ea1facfa9defcf39cc81406d0061f003aebc7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zpbfc8jy0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zpbfc8jy0();
/* eslint-disable @typescript-eslint/no-explicit-any */
// import { embeddingService } from './embeddingService'; // Currently unused
import BaseService from './base/BaseService';
import { ImportStatus } from '@teaching-engine/database';
// Import pdf-parse dynamically to avoid loading test files during module initialization
let pdf;
import mammoth from 'mammoth';
import OpenAI from 'openai';
export class CurriculumImportService extends BaseService {
  openai =
  /* istanbul ignore next */
  (cov_zpbfc8jy0().s[0]++, null);
  constructor() {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[0]++;
    cov_zpbfc8jy0().s[1]++;
    super('CurriculumImportService');
    // Only initialize OpenAI if we have an API key
    const apiKey =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[2]++, process.env.OPENAI_API_KEY);
    /* istanbul ignore next */
    cov_zpbfc8jy0().s[3]++;
    if (apiKey) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[0][0]++;
      cov_zpbfc8jy0().s[4]++;
      this.openai = new OpenAI({
        apiKey
      });
    } else {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[0][1]++;
      cov_zpbfc8jy0().s[5]++;
      this.logger.warn('OpenAI API key not found - AI features will be disabled');
    }
  }
  /**
   * Confirm import and create curriculum expectations
   */
  async confirmImport(importId) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[1]++;
    cov_zpbfc8jy0().s[6]++;
    try {
      const importRecord =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[7]++, await this.prisma.curriculumImport.findUnique({
        where: {
          id: importId
        }
      }));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[8]++;
      if (!importRecord) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[1][0]++;
        cov_zpbfc8jy0().s[9]++;
        throw new Error('Import session not found');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[1][1]++;
      }
      cov_zpbfc8jy0().s[10]++;
      if (importRecord.status !== ImportStatus.READY_FOR_REVIEW) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[2][0]++;
        cov_zpbfc8jy0().s[11]++;
        throw new Error('Import is not ready for confirmation');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[2][1]++;
      }
      // Get parsed subjects from metadata
      const metadata =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[12]++, importRecord.metadata);
      const subjects =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[13]++,
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[3][0]++, metadata?.parsedSubjects) ||
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[3][1]++, []));
      let createdCount =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[14]++, 0);
      // Create curriculum expectations
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[15]++;
      for (const subject of subjects) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[16]++;
        for (const expectation of subject.expectations) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[17]++;
          try {
            // Check if expectation already exists
            const existing =
            /* istanbul ignore next */
            (cov_zpbfc8jy0().s[18]++, await this.prisma.curriculumExpectation.findUnique({
              where: {
                code: expectation.code
              }
            }));
            /* istanbul ignore next */
            cov_zpbfc8jy0().s[19]++;
            if (!existing) {
              /* istanbul ignore next */
              cov_zpbfc8jy0().b[4][0]++;
              cov_zpbfc8jy0().s[20]++;
              await this.prisma.curriculumExpectation.create({
                data: {
                  code: expectation.code,
                  description: expectation.description,
                  descriptionFr:
                  /* istanbul ignore next */
                  (cov_zpbfc8jy0().b[5][0]++, expectation.descriptionFr) ||
                  /* istanbul ignore next */
                  (cov_zpbfc8jy0().b[5][1]++, null),
                  strand: expectation.strand,
                  substrand:
                  /* istanbul ignore next */
                  (cov_zpbfc8jy0().b[6][0]++, expectation.substrand) ||
                  /* istanbul ignore next */
                  (cov_zpbfc8jy0().b[6][1]++, null),
                  grade: expectation.grade,
                  subject: expectation.subject
                }
              });
              /* istanbul ignore next */
              cov_zpbfc8jy0().s[21]++;
              createdCount++;
            } else
            /* istanbul ignore next */
            {
              cov_zpbfc8jy0().b[4][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_zpbfc8jy0().s[22]++;
            this.logger.warn({
              error,
              code: expectation.code
            }, 'Failed to create expectation, skipping');
          }
        }
      }
      // Update import status
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[23]++;
      await this.updateImportStatus(importId, ImportStatus.COMPLETED);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[24]++;
      await this.setCompletionTime(importId);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[25]++;
      this.logger.info({
        importId,
        created: createdCount
      }, 'Import confirmed and expectations created');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[26]++;
      return {
        created: createdCount
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[27]++;
      this.logger.error({
        error,
        importId
      }, 'Failed to confirm import');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[28]++;
      throw error;
    }
  }
  /**
   * Start a new curriculum import session
   */
  async startImport(userId, grade, subject, sourceFormat, sourceFile, metadata) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[2]++;
    cov_zpbfc8jy0().s[29]++;
    try {
      const curriculumImport =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[30]++, await this.prisma.curriculumImport.create({
        data: {
          userId,
          grade,
          subject,
          sourceFormat,
          sourceFile,
          status: ImportStatus.UPLOADING,
          metadata:
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[7][0]++, metadata) ||
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[7][1]++, {})
        }
      }));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[31]++;
      this.logger.info({
        importId: curriculumImport.id,
        userId,
        grade,
        subject,
        sourceFormat
      }, 'Started curriculum import session');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[32]++;
      return curriculumImport.id;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[33]++;
      this.logger.error({
        error,
        userId,
        grade,
        subject
      }, 'Failed to start curriculum import');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[34]++;
      throw new Error('Failed to start import session');
    }
  }
  /**
   * Parse CSV content into curriculum expectations
   */
  parseCSV(csvContent) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[3]++;
    cov_zpbfc8jy0().s[35]++;
    try {
      const lines =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[36]++, csvContent.split('\n'));
      // Parse header line handling quoted values
      const headerLine =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[37]++, lines[0].toLowerCase());
      const headers =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[38]++, []);
      let current =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[39]++, '');
      let inQuotes =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[40]++, false);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[41]++;
      for (let j =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[42]++, 0); j < headerLine.length; j++) {
        const char =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[43]++, headerLine[j]);
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[44]++;
        if (char === '"') {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[8][0]++;
          cov_zpbfc8jy0().s[45]++;
          inQuotes = !inQuotes;
        } else {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[8][1]++;
          cov_zpbfc8jy0().s[46]++;
          if (
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[10][0]++, char === ',') &&
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[10][1]++, !inQuotes)) {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[9][0]++;
            cov_zpbfc8jy0().s[47]++;
            headers.push(current.trim().replace(/^"(.*)"$/, '$1'));
            /* istanbul ignore next */
            cov_zpbfc8jy0().s[48]++;
            current = '';
          } else {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[9][1]++;
            cov_zpbfc8jy0().s[49]++;
            current += char;
          }
        }
      }
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[50]++;
      headers.push(current.trim().replace(/^"(.*)"$/, '$1'));
      const codeIndex =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[51]++, headers.indexOf('code'));
      const descriptionIndex =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[52]++, headers.indexOf('description'));
      const subjectIndex =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[53]++, headers.indexOf('subject'));
      const gradeIndex =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[54]++, headers.indexOf('grade'));
      const domainIndex =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[55]++, headers.indexOf('domain'));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[12][0]++, codeIndex === -1) ||
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[12][1]++, descriptionIndex === -1)) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[11][0]++;
        cov_zpbfc8jy0().s[57]++;
        throw new Error('CSV must contain "code" and "description" columns');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[11][1]++;
      }
      const expectations =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[58]++, []);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[59]++;
      for (let i =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[60]++, 1); i < lines.length; i++) {
        const line =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[61]++, lines[i].trim());
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[62]++;
        if (!line) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[13][0]++;
          cov_zpbfc8jy0().s[63]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_zpbfc8jy0().b[13][1]++;
        }
        // Parse CSV line handling quoted values properly
        const columns =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[64]++, []);
        let current =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[65]++, '');
        let inQuotes =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[66]++, false);
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[67]++;
        for (let j =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[68]++, 0); j < line.length; j++) {
          const char =
          /* istanbul ignore next */
          (cov_zpbfc8jy0().s[69]++, line[j]);
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[70]++;
          if (char === '"') {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[14][0]++;
            cov_zpbfc8jy0().s[71]++;
            inQuotes = !inQuotes;
          } else {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[14][1]++;
            cov_zpbfc8jy0().s[72]++;
            if (
            /* istanbul ignore next */
            (cov_zpbfc8jy0().b[16][0]++, char === ',') &&
            /* istanbul ignore next */
            (cov_zpbfc8jy0().b[16][1]++, !inQuotes)) {
              /* istanbul ignore next */
              cov_zpbfc8jy0().b[15][0]++;
              cov_zpbfc8jy0().s[73]++;
              columns.push(current.trim().replace(/^"(.*)"$/, '$1'));
              /* istanbul ignore next */
              cov_zpbfc8jy0().s[74]++;
              current = '';
            } else {
              /* istanbul ignore next */
              cov_zpbfc8jy0().b[15][1]++;
              cov_zpbfc8jy0().s[75]++;
              current += char;
            }
          }
        }
        // Don't forget the last column
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[76]++;
        columns.push(current.trim().replace(/^"(.*)"$/, '$1'));
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[77]++;
        if (columns.length < Math.max(codeIndex, descriptionIndex) + 1) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[17][0]++;
          cov_zpbfc8jy0().s[78]++;
          this.logger.warn({
            lineNumber: i + 1,
            line
          }, 'Skipping invalid CSV line');
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[79]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_zpbfc8jy0().b[17][1]++;
        }
        const expectation =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[80]++, {
          code: columns[codeIndex],
          description: columns[descriptionIndex],
          subject: subjectIndex >= 0 ?
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[18][0]++, columns[subjectIndex]) :
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[18][1]++, 'Unknown'),
          grade: gradeIndex >= 0 ?
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[19][0]++,
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[20][0]++, parseInt(columns[gradeIndex])) ||
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[20][1]++, 0)) :
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[19][1]++, 0),
          strand: domainIndex >= 0 ?
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[21][0]++, columns[domainIndex]) :
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[21][1]++, 'General')
        });
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[81]++;
        expectations.push(expectation);
      }
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[82]++;
      return expectations;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[83]++;
      this.logger.error({
        error
      }, 'Failed to parse CSV content');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[84]++;
      throw new Error(`CSV parsing failed: ${error.message}`);
    }
  }
  /**
   * Extract curriculum expectations from PDF using pdf-parse and AI
   */
  async parsePDF(fileBuffer) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[4]++;
    cov_zpbfc8jy0().s[85]++;
    try {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[86]++;
      this.logger.info('Starting PDF parsing');
      // Lazy load pdf-parse to avoid initialization issues
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[87]++;
      if (!pdf) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[22][0]++;
        cov_zpbfc8jy0().s[88]++;
        pdf = (await import('pdf-parse')).default;
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[22][1]++;
      }
      // Extract text from PDF
      const pdfData =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[89]++, await pdf(fileBuffer));
      const text =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[90]++, pdfData.text);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[91]++;
      if (
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[24][0]++, !text) ||
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[24][1]++, text.length < 100)) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[23][0]++;
        cov_zpbfc8jy0().s[92]++;
        throw new Error('PDF appears to be empty or too short');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[23][1]++;
      }
      cov_zpbfc8jy0().s[93]++;
      this.logger.info(`Extracted ${text.length} characters from PDF`);
      // Use AI to parse the curriculum text
      const expectations =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[94]++, await this.parseTextWithAI(text));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[95]++;
      this.logger.info(`Parsed ${expectations.length} expectations from PDF`);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[96]++;
      return expectations;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[97]++;
      this.logger.error({
        error
      }, 'Failed to parse PDF');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[98]++;
      throw new Error(`PDF parsing failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[25][0]++, error.message) :
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[25][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Extract curriculum expectations from DOCX using mammoth and AI
   */
  async parseDOCX(fileBuffer) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[5]++;
    cov_zpbfc8jy0().s[99]++;
    try {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[100]++;
      this.logger.info('Starting DOCX parsing');
      // Extract text from DOCX
      const result =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[101]++, await mammoth.extractRawText({
        buffer: fileBuffer
      }));
      const text =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[102]++, result.value);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[103]++;
      if (
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[27][0]++, !text) ||
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[27][1]++, text.length < 100)) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[26][0]++;
        cov_zpbfc8jy0().s[104]++;
        throw new Error('DOCX appears to be empty or too short');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[26][1]++;
      }
      cov_zpbfc8jy0().s[105]++;
      this.logger.info(`Extracted ${text.length} characters from DOCX`);
      // Use AI to parse the curriculum text
      const expectations =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[106]++, await this.parseTextWithAI(text));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[107]++;
      this.logger.info(`Parsed ${expectations.length} expectations from DOCX`);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[108]++;
      return expectations;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[109]++;
      this.logger.error({
        error
      }, 'Failed to parse DOCX');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[110]++;
      throw new Error(`DOCX parsing failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[28][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Get import progress
   */
  async getImportProgress(importId) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[6]++;
    cov_zpbfc8jy0().s[111]++;
    try {
      const importRecord =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[112]++, await this.prisma.curriculumImport.findUnique({
        where: {
          id: importId
        }
      }));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[113]++;
      if (!importRecord) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[29][0]++;
        cov_zpbfc8jy0().s[114]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[29][1]++;
      }
      cov_zpbfc8jy0().s[115]++;
      return {
        importId,
        status: importRecord.status,
        totalOutcomes: importRecord.totalOutcomes,
        processedOutcomes: importRecord.processedOutcomes,
        errors:
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[30][0]++, importRecord.errorLog) ||
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[30][1]++, [])
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[116]++;
      this.logger.error({
        error,
        importId
      }, 'Failed to get import progress');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[117]++;
      return null;
    }
  }
  /**
   * Cancel an import session
   */
  async cancelImport(importId) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[7]++;
    cov_zpbfc8jy0().s[118]++;
    try {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[119]++;
      await this.updateImportStatus(importId, ImportStatus.CANCELLED);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[120]++;
      this.logger.info({
        importId
      }, 'Cancelled curriculum import');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[121]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[122]++;
      this.logger.error({
        error,
        importId
      }, 'Failed to cancel import');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[123]++;
      return false;
    }
  }
  /**
   * Get import history for a user
   */
  async getImportHistory(userId, limit =
  /* istanbul ignore next */
  (cov_zpbfc8jy0().b[31][0]++, 20)) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[8]++;
    cov_zpbfc8jy0().s[124]++;
    try {
      const imports =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[125]++, await this.prisma.curriculumImport.findMany({
        where: {
          userId
        },
        orderBy: {
          createdAt: 'desc'
        },
        take: limit,
        include: {
          clusters: {
            select: {
              id: true,
              clusterName: true,
              clusterType: true
            }
          },
          _count: {
            select: {
              curriculumExpectations: true
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[126]++;
      return imports;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[127]++;
      this.logger.error({
        error,
        userId
      }, 'Failed to get import history');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[128]++;
      return [];
    }
  }
  // Private helper methods
  async updateImportStatus(importId, status, totalOutcomes) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[9]++;
    const updateData =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[129]++, {
      status
    });
    /* istanbul ignore next */
    cov_zpbfc8jy0().s[130]++;
    if (totalOutcomes !== undefined) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[32][0]++;
      cov_zpbfc8jy0().s[131]++;
      updateData.totalOutcomes = totalOutcomes;
    } else
    /* istanbul ignore next */
    {
      cov_zpbfc8jy0().b[32][1]++;
    }
    cov_zpbfc8jy0().s[132]++;
    await this.prisma.curriculumImport.update({
      where: {
        id: importId
      },
      data: updateData
    });
  }
  async updateProgress(importId, processedOutcomes) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[10]++;
    cov_zpbfc8jy0().s[133]++;
    await this.prisma.curriculumImport.update({
      where: {
        id: importId
      },
      data: {
        processedOutcomes
      }
    });
  }
  async setCompletionTime(importId) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[11]++;
    cov_zpbfc8jy0().s[134]++;
    await this.prisma.curriculumImport.update({
      where: {
        id: importId
      },
      data: {
        completedAt: new Date()
      }
    });
  }
  async logErrors(importId, errors) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[12]++;
    cov_zpbfc8jy0().s[135]++;
    await this.prisma.curriculumImport.update({
      where: {
        id: importId
      },
      data: {
        errorLog: errors
      }
    });
  }
  /**
   * Parse curriculum text using AI to extract expectations
   */
  async parseTextWithAI(text) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[13]++;
    cov_zpbfc8jy0().s[136]++;
    try {
      // Detect if document is in French or bilingual
      const isFrench =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[137]++, this.detectLanguage(text));
      const isBilingual =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[138]++, this.detectBilingual(text));
      // Split text into chunks if it's too long (GPT-4 has token limits)
      const chunks =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[139]++, this.chunkText(text, 3000)); // ~750 words per chunk
      const allExpectations =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[140]++, []);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[141]++;
      for (let i =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[142]++, 0); i < chunks.length; i++) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[143]++;
        this.logger.info(`Processing chunk ${i + 1} of ${chunks.length}`);
        const languageInfo =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[144]++, isFrench ?
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[33][0]++, 'French') :
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[33][1]++, isBilingual ?
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[34][0]++, 'bilingual (English and French)') :
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[34][1]++, 'English')));
        const prompt =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[145]++, `You are an expert in curriculum design for elementary education. Extract curriculum expectations from the following ${languageInfo} text.

Please extract and return in JSON format:
- Subject name
- Grade level
- For each expectation:
  - Code (e.g., "A1.1", "B2.3")
  - Type ("overall" or "specific")
  - Description (the full text of the expectation)
  - Strand (major category like "Oral Communication", "Reading", etc.)
  - Domain (if applicable)

Return ONLY a JSON object with this structure:
{
  "subject": "Subject Name",
  "grade": 1,
  "expectations": [
    {
      "code": "A1.1",
      "type": "overall",
      "description": "Full expectation text",
      "strand": "Strand Name",
      "domain": "Domain Name (optional)"
    }
  ]
}

Only include data you are confident about. Do not invent or hallucinate expectations.

Text to parse:
"""
${chunks[i]}
"""`);
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[146]++;
        if (!this.openai) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[35][0]++;
          cov_zpbfc8jy0().s[147]++;
          throw new Error('OpenAI API key not configured');
        } else
        /* istanbul ignore next */
        {
          cov_zpbfc8jy0().b[35][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[148]++, await this.openai.chat.completions.create({
          model: 'gpt-4',
          messages: [{
            role: 'system',
            content: 'You are an expert curriculum analyst. Extract curriculum expectations accurately.'
          }, {
            role: 'user',
            content: prompt
          }],
          temperature: 0.1,
          // Low temperature for accuracy
          max_tokens: 2000
        }));
        const content =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[149]++, response.choices[0]?.message?.content);
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[150]++;
        if (!content) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[36][0]++;
          cov_zpbfc8jy0().s[151]++;
          this.logger.warn(`No content returned for chunk ${i + 1}`);
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[152]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_zpbfc8jy0().b[36][1]++;
        }
        cov_zpbfc8jy0().s[153]++;
        try {
          const parsed =
          /* istanbul ignore next */
          (cov_zpbfc8jy0().s[154]++, JSON.parse(content));
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[155]++;
          if (
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[38][0]++, parsed.expectations) &&
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[38][1]++, Array.isArray(parsed.expectations))) {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[37][0]++;
            const expectations =
            /* istanbul ignore next */
            (cov_zpbfc8jy0().s[156]++, parsed.expectations.map(exp => {
              /* istanbul ignore next */
              cov_zpbfc8jy0().f[14]++;
              cov_zpbfc8jy0().s[157]++;
              return {
                code:
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[39][0]++, exp.code) ||
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[39][1]++, `AUTO_${i}_${allExpectations.length}`),
                description:
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[40][0]++, exp.description) ||
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[40][1]++, ''),
                descriptionFr: exp.descriptionFr,
                subject:
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[41][0]++, parsed.subject) ||
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[41][1]++, 'Unknown'),
                grade:
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[42][0]++, parsed.grade) ||
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[42][1]++, 1),
                strand:
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[43][0]++, exp.strand) ||
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[43][1]++, exp.domain) ||
                /* istanbul ignore next */
                (cov_zpbfc8jy0().b[43][2]++, 'General'),
                strandFr: exp.strandFr,
                substrand: exp.substrand,
                substrandFr: exp.substrandFr
              };
            }));
            /* istanbul ignore next */
            cov_zpbfc8jy0().s[158]++;
            allExpectations.push(...expectations);
          } else
          /* istanbul ignore next */
          {
            cov_zpbfc8jy0().b[37][1]++;
          }
        } catch (parseError) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[159]++;
          this.logger.error({
            parseError,
            chunk: i
          }, 'Failed to parse AI response');
        }
      }
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[160]++;
      return allExpectations;
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[161]++;
      this.logger.error({
        error
      }, 'Failed to parse text with AI');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[162]++;
      throw new Error('AI parsing failed');
    }
  }
  /**
   * Detect if text is primarily in French
   */
  detectLanguage(text) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[15]++;
    const frenchIndicators =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[163]++, ['attentes', 'domaine', 'année', 'élève', 'apprentissage', 'français', 'mathématiques', 'sciences', 'études sociales', 'contenus d\'apprentissage', 'pistes de réflexion']);
    const textLower =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[164]++, text.toLowerCase());
    const frenchCount =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[165]++, frenchIndicators.filter(indicator => {
      /* istanbul ignore next */
      cov_zpbfc8jy0().f[16]++;
      cov_zpbfc8jy0().s[166]++;
      return textLower.includes(indicator);
    }).length);
    /* istanbul ignore next */
    cov_zpbfc8jy0().s[167]++;
    return frenchCount >= 3;
  }
  /**
   * Detect if text contains both English and French
   */
  detectBilingual(text) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[17]++;
    const englishIndicators =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[168]++, ['expectations', 'strand', 'grade', 'student', 'learning']);
    const frenchIndicators =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[169]++, ['attentes', 'domaine', 'année', 'élève', 'apprentissage']);
    const textLower =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[170]++, text.toLowerCase());
    const hasEnglish =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[171]++, englishIndicators.some(indicator => {
      /* istanbul ignore next */
      cov_zpbfc8jy0().f[18]++;
      cov_zpbfc8jy0().s[172]++;
      return textLower.includes(indicator);
    }));
    const hasFrench =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[173]++, frenchIndicators.some(indicator => {
      /* istanbul ignore next */
      cov_zpbfc8jy0().f[19]++;
      cov_zpbfc8jy0().s[174]++;
      return textLower.includes(indicator);
    }));
    /* istanbul ignore next */
    cov_zpbfc8jy0().s[175]++;
    return /* istanbul ignore next */(cov_zpbfc8jy0().b[44][0]++, hasEnglish) &&
    /* istanbul ignore next */
    (cov_zpbfc8jy0().b[44][1]++, hasFrench);
  }
  /**
   * Split text into manageable chunks for AI processing
   */
  chunkText(text, maxCharsPerChunk) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[20]++;
    const chunks =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[176]++, []);
    const paragraphs =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[177]++, text.split(/\n\n+/));
    let currentChunk =
    /* istanbul ignore next */
    (cov_zpbfc8jy0().s[178]++, '');
    /* istanbul ignore next */
    cov_zpbfc8jy0().s[179]++;
    for (const paragraph of paragraphs) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[180]++;
      if (
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[46][0]++, currentChunk.length + paragraph.length > maxCharsPerChunk) &&
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[46][1]++, currentChunk.length > 0)) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[45][0]++;
        cov_zpbfc8jy0().s[181]++;
        chunks.push(currentChunk.trim());
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[182]++;
        currentChunk = paragraph;
      } else {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[45][1]++;
        cov_zpbfc8jy0().s[183]++;
        currentChunk += (currentChunk ?
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[47][0]++, '\n\n') :
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[47][1]++, '')) + paragraph;
      }
    }
    /* istanbul ignore next */
    cov_zpbfc8jy0().s[184]++;
    if (currentChunk.trim()) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[48][0]++;
      cov_zpbfc8jy0().s[185]++;
      chunks.push(currentChunk.trim());
    } else
    /* istanbul ignore next */
    {
      cov_zpbfc8jy0().b[48][1]++;
    }
    cov_zpbfc8jy0().s[186]++;
    return chunks;
  }
  /**
   * Determine if an expectation is overall or specific based on code pattern
   */
  determineExpectationType(code, description) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[21]++;
    cov_zpbfc8jy0().s[187]++;
    // Common patterns for overall expectations:
    // - Single letter or number (e.g., "A", "1")
    // - Ends with .0 (e.g., "A1.0")
    // - Contains "overall" in description
    if (code.length === 1) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[49][0]++;
      cov_zpbfc8jy0().s[188]++;
      return 'overall';
    } else
    /* istanbul ignore next */
    {
      cov_zpbfc8jy0().b[49][1]++;
    }
    cov_zpbfc8jy0().s[189]++;
    if (code.endsWith('.0')) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[50][0]++;
      cov_zpbfc8jy0().s[190]++;
      return 'overall';
    } else
    /* istanbul ignore next */
    {
      cov_zpbfc8jy0().b[50][1]++;
    }
    cov_zpbfc8jy0().s[191]++;
    if (description.toLowerCase().includes('overall')) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[51][0]++;
      cov_zpbfc8jy0().s[192]++;
      return 'overall';
    } else
    /* istanbul ignore next */
    {
      cov_zpbfc8jy0().b[51][1]++;
    }
    cov_zpbfc8jy0().s[193]++;
    if (code.match(/^[A-Z]\d*$/)) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().b[52][0]++;
      cov_zpbfc8jy0().s[194]++;
      return 'overall';
    } else
    /* istanbul ignore next */
    {
      cov_zpbfc8jy0().b[52][1]++;
    } // e.g., "A1", "B2"
    // Everything else is specific
    cov_zpbfc8jy0().s[195]++;
    return 'specific';
  }
  /**
   * Store uploaded file content for parsing
   */
  async storeUploadedFile(importId, file) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[22]++;
    cov_zpbfc8jy0().s[196]++;
    try {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[197]++;
      // Store file metadata and content
      await this.prisma.curriculumImport.update({
        where: {
          id: importId
        },
        data: {
          sourceFile: file.originalname,
          metadata: {
            filename: file.originalname,
            mimetype: file.mimetype,
            size: file.size,
            uploadedAt: new Date().toISOString()
          },
          // Store file content as base64 for now (in production, would use cloud storage)
          rawText: file.buffer.toString('base64')
        }
      });
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[198]++;
      this.logger.info(`File stored for import ${importId}: ${file.originalname}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[199]++;
      this.logger.error({
        error,
        importId
      }, 'Failed to store uploaded file');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[200]++;
      throw error;
    }
  }
  /**
   * Parse uploaded file and extract curriculum expectations
   */
  async parseUploadedFile(importId, _options =
  /* istanbul ignore next */
  (cov_zpbfc8jy0().b[53][0]++, {})) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[23]++;
    cov_zpbfc8jy0().s[201]++;
    try {
      const importRecord =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[202]++, await this.prisma.curriculumImport.findUnique({
        where: {
          id: importId
        }
      }));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[203]++;
      if (!importRecord) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[54][0]++;
        cov_zpbfc8jy0().s[204]++;
        throw new Error('Import session not found');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[54][1]++;
      }
      cov_zpbfc8jy0().s[205]++;
      if (!importRecord.rawText) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[55][0]++;
        cov_zpbfc8jy0().s[206]++;
        throw new Error('No file content found for parsing');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[55][1]++;
      }
      // Update status to processing
      cov_zpbfc8jy0().s[207]++;
      await this.updateImportStatus(importId, ImportStatus.PROCESSING);
      // Decode the file content from base64
      const fileBuffer =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[208]++, Buffer.from(importRecord.rawText, 'base64'));
      // Parse based on file format
      let expectations =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[209]++, []);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[210]++;
      if (importRecord.sourceFormat === 'pdf') {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[56][0]++;
        cov_zpbfc8jy0().s[211]++;
        expectations = await this.parsePDF(fileBuffer);
      } else {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[56][1]++;
        cov_zpbfc8jy0().s[212]++;
        if (importRecord.sourceFormat === 'docx') {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[57][0]++;
          cov_zpbfc8jy0().s[213]++;
          expectations = await this.parseDOCX(fileBuffer);
        } else {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[57][1]++;
          cov_zpbfc8jy0().s[214]++;
          if (importRecord.sourceFormat === 'csv') {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[58][0]++;
            // Convert buffer to string for CSV
            const csvContent =
            /* istanbul ignore next */
            (cov_zpbfc8jy0().s[215]++, fileBuffer.toString('utf-8'));
            /* istanbul ignore next */
            cov_zpbfc8jy0().s[216]++;
            expectations = this.parseCSV(csvContent);
          } else {
            /* istanbul ignore next */
            cov_zpbfc8jy0().b[58][1]++;
            cov_zpbfc8jy0().s[217]++;
            throw new Error(`Unsupported file format: ${importRecord.sourceFormat}`);
          }
        }
      }
      // Group expectations by subject
      const subjectMap =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[218]++, new Map());
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[219]++;
      for (const expectation of expectations) {
        const subjectName =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[220]++,
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[59][0]++, expectation.subject) ||
        /* istanbul ignore next */
        (cov_zpbfc8jy0().b[59][1]++, 'Unknown'));
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[221]++;
        if (!subjectMap.has(subjectName)) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[60][0]++;
          cov_zpbfc8jy0().s[222]++;
          subjectMap.set(subjectName, {
            name: subjectName,
            expectations: []
          });
        } else
        /* istanbul ignore next */
        {
          cov_zpbfc8jy0().b[60][1]++;
        }
        const subject =
        /* istanbul ignore next */
        (cov_zpbfc8jy0().s[223]++, subjectMap.get(subjectName));
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[224]++;
        subject.expectations.push({
          code: expectation.code,
          type: this.determineExpectationType(expectation.code, expectation.description),
          description: expectation.description,
          strand:
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[61][0]++, expectation.strand) ||
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[61][1]++, 'General'),
          substrand: expectation.substrand,
          subject: subjectName,
          grade:
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[62][0]++, expectation.grade) ||
          /* istanbul ignore next */
          (cov_zpbfc8jy0().b[62][1]++, importRecord.grade)
        });
      }
      const subjects =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[225]++, Array.from(subjectMap.values()));
      // Store parsed subjects in metadata for later use
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[226]++;
      await this.prisma.curriculumImport.update({
        where: {
          id: importId
        },
        data: {
          metadata: {
            ...(
            /* istanbul ignore next */
            (cov_zpbfc8jy0().b[63][0]++, importRecord.metadata) ||
            /* istanbul ignore next */
            (cov_zpbfc8jy0().b[63][1]++, {})),
            parsedSubjects: subjects
          }
        }
      });
      // Update status to ready for review
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[227]++;
      await this.updateImportStatus(importId, ImportStatus.READY_FOR_REVIEW);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[228]++;
      this.logger.info(`File parsed for import ${importId}: ${subjects.length} subjects`);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[229]++;
      return {
        subjects: subjects,
        errors: []
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[230]++;
      this.logger.error({
        error,
        importId
      }, 'Failed to parse uploaded file');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[231]++;
      await this.updateImportStatus(importId, ImportStatus.FAILED);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[232]++;
      throw error;
    }
  }
  /**
   * Load preset curriculum data
   */
  async loadPresetCurriculum(userId, presetId) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[24]++;
    cov_zpbfc8jy0().s[233]++;
    try {
      // Create new import session for preset
      const sessionId =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[234]++, await this.startImport(userId, 1,
      // Default grade for presets
      'Multi-Subject', 'manual', `Preset: ${presetId}`));
      // Mock preset data based on presetId
      let subjects =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[235]++, []);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[236]++;
      switch (presetId) {
        case 'pei-grade1-french':
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[64][0]++;
          cov_zpbfc8jy0().s[237]++;
          subjects = [{
            name: 'Français Langue Première',
            expectations: [{
              code: 'CO1',
              type: 'overall',
              description: 'Comprendre des messages oraux en français',
              strand: 'Communication orale',
              subject: 'Français Langue Première',
              grade: 1
            }, {
              code: 'CO1.1',
              type: 'specific',
              description: 'Suivre des instructions orales simples',
              strand: 'Communication orale',
              substrand: 'Écoute',
              subject: 'Français Langue Première',
              grade: 1
            }]
          }, {
            name: 'Mathématiques',
            expectations: [{
              code: 'N1',
              type: 'overall',
              description: 'Comprendre les nombres de 0 à 20',
              strand: 'Nombre',
              subject: 'Mathématiques',
              grade: 1
            }]
          }];
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[238]++;
          break;
        case 'ontario-grade1-english':
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[64][1]++;
          cov_zpbfc8jy0().s[239]++;
          subjects = [{
            name: 'Language',
            expectations: [{
              code: '1.O1',
              type: 'overall',
              description: 'Listen in order to understand and respond appropriately',
              strand: 'Oral Communication',
              subject: 'Language',
              grade: 1
            }]
          }, {
            name: 'Mathematics',
            expectations: [{
              code: '1.N1',
              type: 'overall',
              description: 'Count to 50 and represent numbers to 20',
              strand: 'Number Sense and Numeration',
              subject: 'Mathematics',
              grade: 1
            }]
          }];
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[240]++;
          break;
        case 'bc-grade1-core':
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[64][2]++;
          cov_zpbfc8jy0().s[241]++;
          subjects = [{
            name: 'English Language Arts',
            expectations: [{
              code: 'ELA1-O1',
              type: 'overall',
              description: 'Use speaking and listening to interact with others',
              strand: 'Oral Language',
              subject: 'English Language Arts',
              grade: 1
            }]
          }];
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[242]++;
          break;
        default:
          /* istanbul ignore next */
          cov_zpbfc8jy0().b[64][3]++;
          cov_zpbfc8jy0().s[243]++;
          throw new Error(`Unknown preset: ${presetId}`);
      }
      // Store parsed subjects in metadata for later use
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[244]++;
      await this.prisma.curriculumImport.update({
        where: {
          id: sessionId
        },
        data: {
          metadata: {
            presetId,
            parsedSubjects: subjects,
            loadedAt: new Date().toISOString()
          }
        }
      });
      // Update import status
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[245]++;
      await this.updateImportStatus(sessionId, 'READY_FOR_REVIEW');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[246]++;
      this.logger.info(`Preset curriculum loaded: ${presetId} for user ${userId}`);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[247]++;
      return {
        sessionId,
        subjects
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[248]++;
      this.logger.error({
        error,
        presetId,
        userId
      }, 'Failed to load preset curriculum');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[249]++;
      throw error;
    }
  }
  /**
   * Finalize import and create actual curriculum expectations in the ETFO system
   */
  async finalizeImport(importId, _userId) {
    /* istanbul ignore next */
    cov_zpbfc8jy0().f[25]++;
    cov_zpbfc8jy0().s[250]++;
    try {
      const importRecord =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[251]++, await this.prisma.curriculumImport.findUnique({
        where: {
          id: importId
        },
        include: {
          curriculumExpectations: true
        }
      }));
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[252]++;
      if (!importRecord) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().b[65][0]++;
        cov_zpbfc8jy0().s[253]++;
        throw new Error('Import session not found');
      } else
      /* istanbul ignore next */
      {
        cov_zpbfc8jy0().b[65][1]++;
      }
      // Get the parsed subjects from the import metadata
      const parsedSubjects =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[254]++,
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[66][0]++, importRecord.metadata?.parsedSubjects) ||
      /* istanbul ignore next */
      (cov_zpbfc8jy0().b[66][1]++, []));
      let totalExpectations =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[255]++, 0);
      const subjects =
      /* istanbul ignore next */
      (cov_zpbfc8jy0().s[256]++, []);
      // Create curriculum expectations for each subject
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[257]++;
      for (const subject of parsedSubjects) {
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[258]++;
        subjects.push(subject.name);
        /* istanbul ignore next */
        cov_zpbfc8jy0().s[259]++;
        for (const expectation of subject.expectations) {
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[260]++;
          await this.prisma.curriculumExpectation.create({
            data: {
              code: expectation.code,
              description: expectation.description,
              strand: expectation.strand,
              substrand: expectation.substrand,
              grade: expectation.grade,
              subject: expectation.subject,
              importId
            }
          });
          /* istanbul ignore next */
          cov_zpbfc8jy0().s[261]++;
          totalExpectations++;
        }
      }
      // Update import status to completed
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[262]++;
      await this.updateImportStatus(importId, 'COMPLETED');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[263]++;
      await this.setCompletionTime(importId);
      // Store final results in metadata
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[264]++;
      await this.prisma.curriculumImport.update({
        where: {
          id: importId
        },
        data: {
          metadata: {
            ...(
            /* istanbul ignore next */
            (cov_zpbfc8jy0().b[67][0]++, importRecord.metadata) ||
            /* istanbul ignore next */
            (cov_zpbfc8jy0().b[67][1]++, {})),
            finalResults: {
              totalExpectations,
              subjects,
              completedAt: new Date().toISOString()
            }
          }
        }
      });
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[265]++;
      this.logger.info(`Import finalized: ${importId}, created ${totalExpectations} expectations`);
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[266]++;
      return {
        totalExpectations,
        subjects
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[267]++;
      this.logger.error({
        error,
        importId
      }, 'Failed to finalize import');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[268]++;
      await this.updateImportStatus(importId, 'FAILED');
      /* istanbul ignore next */
      cov_zpbfc8jy0().s[269]++;
      throw error;
    }
  }
}
// Export singleton instance
export const curriculumImportService =
/* istanbul ignore next */
(cov_zpbfc8jy0().s[270]++, new CurriculumImportService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,