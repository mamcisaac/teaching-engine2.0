{"version":3,"names":["cov_zpbfc8jy0","actualCoverage","BaseService","ImportStatus","pdf","mammoth","OpenAI","CurriculumImportService","openai","s","constructor","f","apiKey","process","env","OPENAI_API_KEY","b","logger","warn","confirmImport","importId","importRecord","prisma","curriculumImport","findUnique","where","id","Error","status","READY_FOR_REVIEW","metadata","subjects","parsedSubjects","createdCount","subject","expectation","expectations","existing","curriculumExpectation","code","create","data","description","descriptionFr","strand","substrand","grade","error","updateImportStatus","COMPLETED","setCompletionTime","info","created","startImport","userId","sourceFormat","sourceFile","UPLOADING","parseCSV","csvContent","lines","split","headerLine","toLowerCase","headers","current","inQuotes","j","length","char","push","trim","replace","codeIndex","indexOf","descriptionIndex","subjectIndex","gradeIndex","domainIndex","i","line","columns","Math","max","lineNumber","parseInt","message","parsePDF","fileBuffer","default","pdfData","text","parseTextWithAI","parseDOCX","result","extractRawText","buffer","value","getImportProgress","totalOutcomes","processedOutcomes","errors","errorLog","cancelImport","CANCELLED","getImportHistory","limit","imports","findMany","orderBy","createdAt","take","include","clusters","select","clusterName","clusterType","_count","curriculumExpectations","updateData","undefined","update","updateProgress","completedAt","Date","logErrors","isFrench","detectLanguage","isBilingual","detectBilingual","chunks","chunkText","allExpectations","languageInfo","prompt","response","chat","completions","model","messages","role","content","temperature","max_tokens","choices","parsed","JSON","parse","Array","isArray","map","exp","domain","strandFr","substrandFr","parseError","chunk","frenchIndicators","textLower","frenchCount","filter","indicator","includes","englishIndicators","hasEnglish","some","hasFrench","maxCharsPerChunk","paragraphs","currentChunk","paragraph","determineExpectationType","endsWith","match","storeUploadedFile","file","originalname","filename","mimetype","size","uploadedAt","toISOString","rawText","toString","parseUploadedFile","_options","PROCESSING","Buffer","from","subjectMap","Map","subjectName","has","set","name","get","type","values","FAILED","loadPresetCurriculum","presetId","sessionId","loadedAt","finalizeImport","_userId","totalExpectations","finalResults","curriculumImportService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/curriculumImportService.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n// import { embeddingService } from './embeddingService'; // Currently unused\nimport BaseService from './base/BaseService';\nimport { ImportStatus } from '@teaching-engine/database';\n// Import pdf-parse dynamically to avoid loading test files during module initialization\nlet pdf: any;\nimport mammoth from 'mammoth';\nimport OpenAI from 'openai';\n\nexport interface ImportProgress {\n  importId: string;\n  status: ImportStatus;\n  totalOutcomes: number;\n  processedOutcomes: number;\n  errors: string[];\n}\n\nexport class CurriculumImportService extends BaseService {\n  private openai: OpenAI | null = null;\n\n  constructor() {\n    super('CurriculumImportService');\n    // Only initialize OpenAI if we have an API key\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (apiKey) {\n      this.openai = new OpenAI({ apiKey });\n    } else {\n      this.logger.warn('OpenAI API key not found - AI features will be disabled');\n    }\n  }\n\n  /**\n   * Confirm import and create curriculum expectations\n   */\n  async confirmImport(importId: string): Promise<{ created: number }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      if (importRecord.status !== ImportStatus.READY_FOR_REVIEW) {\n        throw new Error('Import is not ready for confirmation');\n      }\n\n      // Get parsed subjects from metadata\n      const metadata = importRecord.metadata as any;\n      const subjects = metadata?.parsedSubjects || [];\n\n      let createdCount = 0;\n\n      // Create curriculum expectations\n      for (const subject of subjects) {\n        for (const expectation of subject.expectations) {\n          try {\n            // Check if expectation already exists\n            const existing = await this.prisma.curriculumExpectation.findUnique({\n              where: { code: expectation.code },\n            });\n\n            if (!existing) {\n              await this.prisma.curriculumExpectation.create({\n                data: {\n                  code: expectation.code,\n                  description: expectation.description,\n                  descriptionFr: expectation.descriptionFr || null,\n                  strand: expectation.strand,\n                  substrand: expectation.substrand || null,\n                  grade: expectation.grade,\n                  subject: expectation.subject,\n                },\n              });\n              createdCount++;\n            }\n          } catch (error) {\n            this.logger.warn(\n              { error, code: expectation.code },\n              'Failed to create expectation, skipping',\n            );\n          }\n        }\n      }\n\n      // Update import status\n      await this.updateImportStatus(importId, ImportStatus.COMPLETED);\n      await this.setCompletionTime(importId);\n\n      this.logger.info(\n        { importId, created: createdCount },\n        'Import confirmed and expectations created',\n      );\n\n      return { created: createdCount };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to confirm import');\n      throw error;\n    }\n  }\n\n  /**\n   * Start a new curriculum import session\n   */\n  async startImport(\n    userId: number,\n    grade: number,\n    subject: string,\n    sourceFormat: 'csv' | 'pdf' | 'docx' | 'manual',\n    sourceFile?: string,\n    metadata?: Record<string, unknown>,\n  ): Promise<string> {\n    try {\n      const curriculumImport = await this.prisma.curriculumImport.create({\n        data: {\n          userId,\n          grade,\n          subject,\n          sourceFormat,\n          sourceFile,\n          status: ImportStatus.UPLOADING,\n          metadata: (metadata || {}) as any,\n        },\n      });\n\n      this.logger.info(\n        { importId: curriculumImport.id, userId, grade, subject, sourceFormat },\n        'Started curriculum import session',\n      );\n\n      return curriculumImport.id;\n    } catch (error) {\n      this.logger.error({ error, userId, grade, subject }, 'Failed to start curriculum import');\n      throw new Error('Failed to start import session');\n    }\n  }\n\n  /**\n   * Parse CSV content into curriculum expectations\n   */\n  parseCSV(csvContent: string): Array<{\n    code: string;\n    description: string;\n    subject: string;\n    grade: number;\n    strand?: string;\n    substrand?: string;\n  }> {\n    try {\n      const lines = csvContent.split('\\n');\n      // Parse header line handling quoted values\n      const headerLine = lines[0].toLowerCase();\n      const headers: string[] = [];\n      let current = '';\n      let inQuotes = false;\n\n      for (let j = 0; j < headerLine.length; j++) {\n        const char = headerLine[j];\n\n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === ',' && !inQuotes) {\n          headers.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n          current = '';\n        } else {\n          current += char;\n        }\n      }\n      headers.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n\n      const codeIndex = headers.indexOf('code');\n      const descriptionIndex = headers.indexOf('description');\n      const subjectIndex = headers.indexOf('subject');\n      const gradeIndex = headers.indexOf('grade');\n      const domainIndex = headers.indexOf('domain');\n\n      if (codeIndex === -1 || descriptionIndex === -1) {\n        throw new Error('CSV must contain \"code\" and \"description\" columns');\n      }\n\n      const expectations: Array<{\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        substrand?: string;\n      }> = [];\n\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        // Parse CSV line handling quoted values properly\n        const columns: string[] = [];\n        let current = '';\n        let inQuotes = false;\n\n        for (let j = 0; j < line.length; j++) {\n          const char = line[j];\n\n          if (char === '\"') {\n            inQuotes = !inQuotes;\n          } else if (char === ',' && !inQuotes) {\n            columns.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n            current = '';\n          } else {\n            current += char;\n          }\n        }\n\n        // Don't forget the last column\n        columns.push(current.trim().replace(/^\"(.*)\"$/, '$1'));\n\n        if (columns.length < Math.max(codeIndex, descriptionIndex) + 1) {\n          this.logger.warn({ lineNumber: i + 1, line }, 'Skipping invalid CSV line');\n          continue;\n        }\n\n        const expectation = {\n          code: columns[codeIndex],\n          description: columns[descriptionIndex],\n          subject: subjectIndex >= 0 ? columns[subjectIndex] : 'Unknown',\n          grade: gradeIndex >= 0 ? parseInt(columns[gradeIndex]) || 0 : 0,\n          strand: domainIndex >= 0 ? columns[domainIndex] : 'General',\n        };\n\n        expectations.push(expectation);\n      }\n\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse CSV content');\n      throw new Error(`CSV parsing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Extract curriculum expectations from PDF using pdf-parse and AI\n   */\n  async parsePDF(fileBuffer: Buffer): Promise<\n    Array<{\n      code: string;\n      description: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      substrand?: string;\n    }>\n  > {\n    try {\n      this.logger.info('Starting PDF parsing');\n\n      // Lazy load pdf-parse to avoid initialization issues\n      if (!pdf) {\n        pdf = (await import('pdf-parse')).default;\n      }\n\n      // Extract text from PDF\n      const pdfData = await pdf(fileBuffer);\n      const text = pdfData.text;\n\n      if (!text || text.length < 100) {\n        throw new Error('PDF appears to be empty or too short');\n      }\n\n      this.logger.info(`Extracted ${text.length} characters from PDF`);\n\n      // Use AI to parse the curriculum text\n      const expectations = await this.parseTextWithAI(text);\n\n      this.logger.info(`Parsed ${expectations.length} expectations from PDF`);\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse PDF');\n      throw new Error(\n        `PDF parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Extract curriculum expectations from DOCX using mammoth and AI\n   */\n  async parseDOCX(fileBuffer: Buffer): Promise<\n    Array<{\n      code: string;\n      description: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      substrand?: string;\n    }>\n  > {\n    try {\n      this.logger.info('Starting DOCX parsing');\n\n      // Extract text from DOCX\n      const result = await mammoth.extractRawText({ buffer: fileBuffer });\n      const text = result.value;\n\n      if (!text || text.length < 100) {\n        throw new Error('DOCX appears to be empty or too short');\n      }\n\n      this.logger.info(`Extracted ${text.length} characters from DOCX`);\n\n      // Use AI to parse the curriculum text\n      const expectations = await this.parseTextWithAI(text);\n\n      this.logger.info(`Parsed ${expectations.length} expectations from DOCX`);\n      return expectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse DOCX');\n      throw new Error(\n        `DOCX parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Get import progress\n   */\n  async getImportProgress(importId: string): Promise<ImportProgress | null> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) return null;\n\n      return {\n        importId,\n        status: importRecord.status,\n        totalOutcomes: importRecord.totalOutcomes,\n        processedOutcomes: importRecord.processedOutcomes,\n        errors: (importRecord.errorLog as string[]) || [],\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to get import progress');\n      return null;\n    }\n  }\n\n  /**\n   * Cancel an import session\n   */\n  async cancelImport(importId: string): Promise<boolean> {\n    try {\n      await this.updateImportStatus(importId, ImportStatus.CANCELLED);\n      this.logger.info({ importId }, 'Cancelled curriculum import');\n      return true;\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to cancel import');\n      return false;\n    }\n  }\n\n  /**\n   * Get import history for a user\n   */\n  async getImportHistory(userId: number, limit: number = 20): Promise<unknown[]> {\n    try {\n      const imports = await this.prisma.curriculumImport.findMany({\n        where: { userId },\n        orderBy: { createdAt: 'desc' },\n        take: limit,\n        include: {\n          clusters: {\n            select: {\n              id: true,\n              clusterName: true,\n              clusterType: true,\n            },\n          },\n          _count: {\n            select: {\n              curriculumExpectations: true,\n            },\n          },\n        },\n      });\n\n      return imports;\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get import history');\n      return [];\n    }\n  }\n\n  // Private helper methods\n\n  private async updateImportStatus(\n    importId: string,\n    status: ImportStatus,\n    totalOutcomes?: number,\n  ): Promise<void> {\n    const updateData: any = { status };\n    if (totalOutcomes !== undefined) {\n      updateData.totalOutcomes = totalOutcomes;\n    }\n\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: updateData,\n    });\n  }\n\n  private async updateProgress(importId: string, processedOutcomes: number): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { processedOutcomes },\n    });\n  }\n\n  private async setCompletionTime(importId: string): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { completedAt: new Date() },\n    });\n  }\n\n  private async logErrors(importId: string, errors: string[]): Promise<void> {\n    await this.prisma.curriculumImport.update({\n      where: { id: importId },\n      data: { errorLog: errors },\n    });\n  }\n\n  /**\n   * Parse curriculum text using AI to extract expectations\n   */\n  private async parseTextWithAI(text: string): Promise<\n    Array<{\n      code: string;\n      description: string;\n      descriptionFr?: string;\n      subject: string;\n      grade: number;\n      strand?: string;\n      strandFr?: string;\n      substrand?: string;\n      substrandFr?: string;\n    }>\n  > {\n    try {\n      // Detect if document is in French or bilingual\n      const isFrench = this.detectLanguage(text);\n      const isBilingual = this.detectBilingual(text);\n      \n      // Split text into chunks if it's too long (GPT-4 has token limits)\n      const chunks = this.chunkText(text, 3000); // ~750 words per chunk\n      const allExpectations: Array<{\n        code: string;\n        description: string;\n        descriptionFr?: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        strandFr?: string;\n        substrand?: string;\n        substrandFr?: string;\n      }> = [];\n\n      for (let i = 0; i < chunks.length; i++) {\n        this.logger.info(`Processing chunk ${i + 1} of ${chunks.length}`);\n\n        const languageInfo = isFrench ? 'French' : isBilingual ? 'bilingual (English and French)' : 'English';\n        const prompt = `You are an expert in curriculum design for elementary education. Extract curriculum expectations from the following ${languageInfo} text.\n\nPlease extract and return in JSON format:\n- Subject name\n- Grade level\n- For each expectation:\n  - Code (e.g., \"A1.1\", \"B2.3\")\n  - Type (\"overall\" or \"specific\")\n  - Description (the full text of the expectation)\n  - Strand (major category like \"Oral Communication\", \"Reading\", etc.)\n  - Domain (if applicable)\n\nReturn ONLY a JSON object with this structure:\n{\n  \"subject\": \"Subject Name\",\n  \"grade\": 1,\n  \"expectations\": [\n    {\n      \"code\": \"A1.1\",\n      \"type\": \"overall\",\n      \"description\": \"Full expectation text\",\n      \"strand\": \"Strand Name\",\n      \"domain\": \"Domain Name (optional)\"\n    }\n  ]\n}\n\nOnly include data you are confident about. Do not invent or hallucinate expectations.\n\nText to parse:\n\"\"\"\n${chunks[i]}\n\"\"\"`;\n\n        if (!this.openai) {\n          throw new Error('OpenAI API key not configured');\n        }\n\n        const response = await this.openai.chat.completions.create({\n          model: 'gpt-4',\n          messages: [\n            {\n              role: 'system',\n              content:\n                'You are an expert curriculum analyst. Extract curriculum expectations accurately.',\n            },\n            { role: 'user', content: prompt },\n          ],\n          temperature: 0.1, // Low temperature for accuracy\n          max_tokens: 2000,\n        });\n\n        const content = response.choices[0]?.message?.content;\n        if (!content) {\n          this.logger.warn(`No content returned for chunk ${i + 1}`);\n          continue;\n        }\n\n        try {\n          const parsed = JSON.parse(content);\n          if (parsed.expectations && Array.isArray(parsed.expectations)) {\n            const expectations = parsed.expectations.map((exp: any) => ({\n              code: exp.code || `AUTO_${i}_${allExpectations.length}`,\n              description: exp.description || '',\n              descriptionFr: exp.descriptionFr,\n              subject: parsed.subject || 'Unknown',\n              grade: parsed.grade || 1,\n              strand: exp.strand || exp.domain || 'General',\n              strandFr: exp.strandFr,\n              substrand: exp.substrand,\n              substrandFr: exp.substrandFr,\n            }));\n\n            allExpectations.push(...expectations);\n          }\n        } catch (parseError) {\n          this.logger.error({ parseError, chunk: i }, 'Failed to parse AI response');\n        }\n      }\n\n      return allExpectations;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to parse text with AI');\n      throw new Error('AI parsing failed');\n    }\n  }\n\n  /**\n   * Detect if text is primarily in French\n   */\n  private detectLanguage(text: string): boolean {\n    const frenchIndicators = [\n      'attentes', 'domaine', 'année', 'élève', 'apprentissage',\n      'français', 'mathématiques', 'sciences', 'études sociales',\n      'contenus d\\'apprentissage', 'pistes de réflexion'\n    ];\n    \n    const textLower = text.toLowerCase();\n    const frenchCount = frenchIndicators.filter(indicator => \n      textLower.includes(indicator)\n    ).length;\n    \n    return frenchCount >= 3;\n  }\n  \n  /**\n   * Detect if text contains both English and French\n   */\n  private detectBilingual(text: string): boolean {\n    const englishIndicators = ['expectations', 'strand', 'grade', 'student', 'learning'];\n    const frenchIndicators = ['attentes', 'domaine', 'année', 'élève', 'apprentissage'];\n    \n    const textLower = text.toLowerCase();\n    const hasEnglish = englishIndicators.some(indicator => textLower.includes(indicator));\n    const hasFrench = frenchIndicators.some(indicator => textLower.includes(indicator));\n    \n    return hasEnglish && hasFrench;\n  }\n\n  /**\n   * Split text into manageable chunks for AI processing\n   */\n  private chunkText(text: string, maxCharsPerChunk: number): string[] {\n    const chunks: string[] = [];\n    const paragraphs = text.split(/\\n\\n+/);\n    let currentChunk = '';\n\n    for (const paragraph of paragraphs) {\n      if (currentChunk.length + paragraph.length > maxCharsPerChunk && currentChunk.length > 0) {\n        chunks.push(currentChunk.trim());\n        currentChunk = paragraph;\n      } else {\n        currentChunk += (currentChunk ? '\\n\\n' : '') + paragraph;\n      }\n    }\n\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim());\n    }\n\n    return chunks;\n  }\n\n  /**\n   * Determine if an expectation is overall or specific based on code pattern\n   */\n  private determineExpectationType(code: string, description: string): 'overall' | 'specific' {\n    // Common patterns for overall expectations:\n    // - Single letter or number (e.g., \"A\", \"1\")\n    // - Ends with .0 (e.g., \"A1.0\")\n    // - Contains \"overall\" in description\n\n    if (code.length === 1) return 'overall';\n    if (code.endsWith('.0')) return 'overall';\n    if (description.toLowerCase().includes('overall')) return 'overall';\n    if (code.match(/^[A-Z]\\d*$/)) return 'overall'; // e.g., \"A1\", \"B2\"\n\n    // Everything else is specific\n    return 'specific';\n  }\n\n  /**\n   * Store uploaded file content for parsing\n   */\n  async storeUploadedFile(importId: string, file: Express.Multer.File): Promise<void> {\n    try {\n      // Store file metadata and content\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          sourceFile: file.originalname,\n          metadata: {\n            filename: file.originalname,\n            mimetype: file.mimetype,\n            size: file.size,\n            uploadedAt: new Date().toISOString(),\n          },\n          // Store file content as base64 for now (in production, would use cloud storage)\n          rawText: file.buffer.toString('base64'),\n        },\n      });\n\n      this.logger.info(`File stored for import ${importId}: ${file.originalname}`);\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to store uploaded file');\n      throw error;\n    }\n  }\n\n  /**\n   * Parse uploaded file and extract curriculum expectations\n   */\n  async parseUploadedFile(\n    importId: string,\n    _options: { useAI?: boolean } = {},\n  ): Promise<{\n    subjects: Array<{\n      name: string;\n      expectations: Array<{\n        code: string;\n        type: 'overall' | 'specific';\n        description: string;\n        strand: string;\n        substrand?: string;\n        subject: string;\n        grade: number;\n      }>;\n    }>;\n    errors?: string[];\n  }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      if (!importRecord.rawText) {\n        throw new Error('No file content found for parsing');\n      }\n\n      // Update status to processing\n      await this.updateImportStatus(importId, ImportStatus.PROCESSING);\n\n      // Decode the file content from base64\n      const fileBuffer = Buffer.from(importRecord.rawText, 'base64');\n\n      // Parse based on file format\n      let expectations: Array<{\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n        strand?: string;\n        substrand?: string;\n      }> = [];\n\n      if (importRecord.sourceFormat === 'pdf') {\n        expectations = await this.parsePDF(fileBuffer);\n      } else if (importRecord.sourceFormat === 'docx') {\n        expectations = await this.parseDOCX(fileBuffer);\n      } else if (importRecord.sourceFormat === 'csv') {\n        // Convert buffer to string for CSV\n        const csvContent = fileBuffer.toString('utf-8');\n        expectations = this.parseCSV(csvContent);\n      } else {\n        throw new Error(`Unsupported file format: ${importRecord.sourceFormat}`);\n      }\n\n      // Group expectations by subject\n      const subjectMap = new Map<string, any>();\n\n      for (const expectation of expectations) {\n        const subjectName = expectation.subject || 'Unknown';\n\n        if (!subjectMap.has(subjectName)) {\n          subjectMap.set(subjectName, {\n            name: subjectName,\n            expectations: [],\n          });\n        }\n\n        const subject = subjectMap.get(subjectName);\n        subject.expectations.push({\n          code: expectation.code,\n          type: this.determineExpectationType(expectation.code, expectation.description),\n          description: expectation.description,\n          strand: expectation.strand || 'General',\n          substrand: expectation.substrand,\n          subject: subjectName,\n          grade: expectation.grade || importRecord.grade,\n        });\n      }\n\n      const subjects = Array.from(subjectMap.values());\n\n      // Store parsed subjects in metadata for later use\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          metadata: {\n            ...((importRecord.metadata as any) || {}),\n            parsedSubjects: subjects,\n          },\n        },\n      });\n\n      // Update status to ready for review\n      await this.updateImportStatus(importId, ImportStatus.READY_FOR_REVIEW);\n\n      this.logger.info(`File parsed for import ${importId}: ${subjects.length} subjects`);\n\n      return {\n        subjects: subjects,\n        errors: [],\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to parse uploaded file');\n      await this.updateImportStatus(importId, ImportStatus.FAILED);\n      throw error;\n    }\n  }\n\n  /**\n   * Load preset curriculum data\n   */\n  async loadPresetCurriculum(\n    userId: number,\n    presetId: string,\n  ): Promise<{\n    sessionId: string;\n    subjects: Array<{\n      name: string;\n      expectations: Array<{\n        code: string;\n        type: 'overall' | 'specific';\n        description: string;\n        strand: string;\n        substrand?: string;\n        subject: string;\n        grade: number;\n      }>;\n    }>;\n  }> {\n    try {\n      // Create new import session for preset\n      const sessionId = await this.startImport(\n        userId,\n        1, // Default grade for presets\n        'Multi-Subject',\n        'manual',\n        `Preset: ${presetId}`,\n      );\n\n      // Mock preset data based on presetId\n      let subjects: Array<{\n        name: string;\n        expectations: Array<{\n          code: string;\n          type: 'overall' | 'specific';\n          description: string;\n          strand: string;\n          substrand?: string;\n          subject: string;\n          grade: number;\n        }>;\n      }> = [];\n\n      switch (presetId) {\n        case 'pei-grade1-french':\n          subjects = [\n            {\n              name: 'Français Langue Première',\n              expectations: [\n                {\n                  code: 'CO1',\n                  type: 'overall',\n                  description: 'Comprendre des messages oraux en français',\n                  strand: 'Communication orale',\n                  subject: 'Français Langue Première',\n                  grade: 1,\n                },\n                {\n                  code: 'CO1.1',\n                  type: 'specific',\n                  description: 'Suivre des instructions orales simples',\n                  strand: 'Communication orale',\n                  substrand: 'Écoute',\n                  subject: 'Français Langue Première',\n                  grade: 1,\n                },\n              ],\n            },\n            {\n              name: 'Mathématiques',\n              expectations: [\n                {\n                  code: 'N1',\n                  type: 'overall',\n                  description: 'Comprendre les nombres de 0 à 20',\n                  strand: 'Nombre',\n                  subject: 'Mathématiques',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        case 'ontario-grade1-english':\n          subjects = [\n            {\n              name: 'Language',\n              expectations: [\n                {\n                  code: '1.O1',\n                  type: 'overall',\n                  description: 'Listen in order to understand and respond appropriately',\n                  strand: 'Oral Communication',\n                  subject: 'Language',\n                  grade: 1,\n                },\n              ],\n            },\n            {\n              name: 'Mathematics',\n              expectations: [\n                {\n                  code: '1.N1',\n                  type: 'overall',\n                  description: 'Count to 50 and represent numbers to 20',\n                  strand: 'Number Sense and Numeration',\n                  subject: 'Mathematics',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        case 'bc-grade1-core':\n          subjects = [\n            {\n              name: 'English Language Arts',\n              expectations: [\n                {\n                  code: 'ELA1-O1',\n                  type: 'overall',\n                  description: 'Use speaking and listening to interact with others',\n                  strand: 'Oral Language',\n                  subject: 'English Language Arts',\n                  grade: 1,\n                },\n              ],\n            },\n          ];\n          break;\n\n        default:\n          throw new Error(`Unknown preset: ${presetId}`);\n      }\n\n      // Store parsed subjects in metadata for later use\n      await this.prisma.curriculumImport.update({\n        where: { id: sessionId },\n        data: {\n          metadata: {\n            presetId,\n            parsedSubjects: subjects,\n            loadedAt: new Date().toISOString(),\n          },\n        },\n      });\n\n      // Update import status\n      await this.updateImportStatus(sessionId, 'READY_FOR_REVIEW');\n\n      this.logger.info(`Preset curriculum loaded: ${presetId} for user ${userId}`);\n\n      return {\n        sessionId,\n        subjects,\n      };\n    } catch (error) {\n      this.logger.error({ error, presetId, userId }, 'Failed to load preset curriculum');\n      throw error;\n    }\n  }\n\n  /**\n   * Finalize import and create actual curriculum expectations in the ETFO system\n   */\n  async finalizeImport(\n    importId: string,\n    _userId: number,\n  ): Promise<{\n    totalExpectations: number;\n    subjects: string[];\n  }> {\n    try {\n      const importRecord = await this.prisma.curriculumImport.findUnique({\n        where: { id: importId },\n        include: {\n          curriculumExpectations: true,\n        },\n      });\n\n      if (!importRecord) {\n        throw new Error('Import session not found');\n      }\n\n      // Get the parsed subjects from the import metadata\n      const parsedSubjects = (importRecord.metadata as any)?.parsedSubjects || [];\n\n      let totalExpectations = 0;\n      const subjects: string[] = [];\n\n      // Create curriculum expectations for each subject\n      for (const subject of parsedSubjects) {\n        subjects.push(subject.name);\n\n        for (const expectation of subject.expectations) {\n          await this.prisma.curriculumExpectation.create({\n            data: {\n              code: expectation.code,\n              description: expectation.description,\n              strand: expectation.strand,\n              substrand: expectation.substrand,\n              grade: expectation.grade,\n              subject: expectation.subject,\n              importId,\n            },\n          });\n          totalExpectations++;\n        }\n      }\n\n      // Update import status to completed\n      await this.updateImportStatus(importId, 'COMPLETED');\n      await this.setCompletionTime(importId);\n\n      // Store final results in metadata\n      await this.prisma.curriculumImport.update({\n        where: { id: importId },\n        data: {\n          metadata: {\n            ...((importRecord.metadata as any) || {}),\n            finalResults: {\n              totalExpectations,\n              subjects,\n              completedAt: new Date().toISOString(),\n            },\n          },\n        },\n      });\n\n      this.logger.info(`Import finalized: ${importId}, created ${totalExpectations} expectations`);\n\n      return {\n        totalExpectations,\n        subjects,\n      };\n    } catch (error) {\n      this.logger.error({ error, importId }, 'Failed to finalize import');\n      await this.updateImportStatus(importId, 'FAILED');\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const curriculumImportService = new CurriculumImportService();\n"],"mappingsyBM;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAzBN;AACA;AACA,OAAOE,WAAW,MAAM,oBAAoB;AAC5C,SAASC,YAAY,QAAQ,2BAA2B;AACxD;AACA,IAAIC,GAAQ;AACZ,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,MAAM,MAAM,QAAQ;AAU3B,OAAM,MAAOC,uBAAwB,SAAQL,WAAW;EAC9CM,MAAM;EAAA;EAAA,CAAAR,aAAA,GAAAS,CAAA,OAAkB,IAAI;EAEpCC,YAAA;IAAA;IAAAV,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACE,KAAK,CAAC,yBAAyB,CAAC;IAChC;IACA,MAAMG,MAAM;IAAA;IAAA,CAAAZ,aAAA,GAAAS,CAAA,OAAGI,OAAO,CAACC,GAAG,CAACC,cAAc;IAAC;IAAAf,aAAA,GAAAS,CAAA;IAC1C,IAAIG,MAAM,EAAE;MAAA;MAAAZ,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MACV,IAAI,CAACD,MAAM,GAAG,IAAIF,MAAM,CAAC;QAAEM;MAAM,CAAE,CAAC;IACtC,CAAC,MAAM;MAAA;MAAAZ,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MACL,IAAI,CAACQ,MAAM,CAACC,IAAI,CAAC,yDAAyD,CAAC;IAC7E;EACF;EAEA;;;EAGA,MAAMC,aAAaA,CAACC,QAAgB;IAAA;IAAApB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAClC,IAAI;MACF,MAAMY,YAAY;MAAA;MAAA,CAAArB,aAAA,GAAAS,CAAA,OAAG,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACC,UAAU,CAAC;QACjEC,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ;OACtB,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACY,YAAY,EAAE;QAAA;QAAArB,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACjB,MAAM,IAAIkB,KAAK,CAAC,0BAA0B,CAAC;MAC7C,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAAAhB,aAAA,GAAAS,CAAA;MAED,IAAIY,YAAY,CAACO,MAAM,KAAKzB,YAAY,CAAC0B,gBAAgB,EAAE;QAAA;QAAA7B,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACzD,MAAM,IAAIkB,KAAK,CAAC,sCAAsC,CAAC;MACzD,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAED;MACA,MAAMc,QAAQ;MAAA;MAAA,CAAA9B,aAAA,GAAAS,CAAA,QAAGY,YAAY,CAACS,QAAe;MAC7C,MAAMC,QAAQ;MAAA;MAAA,CAAA/B,aAAA,GAAAS,CAAA;MAAG;MAAA,CAAAT,aAAA,GAAAgB,CAAA,UAAAc,QAAQ,EAAEE,cAAc;MAAA;MAAA,CAAAhC,aAAA,GAAAgB,CAAA,UAAI,EAAE;MAE/C,IAAIiB,YAAY;MAAA;MAAA,CAAAjC,aAAA,GAAAS,CAAA,QAAG,CAAC;MAEpB;MAAA;MAAAT,aAAA,GAAAS,CAAA;MACA,KAAK,MAAMyB,OAAO,IAAIH,QAAQ,EAAE;QAAA;QAAA/B,aAAA,GAAAS,CAAA;QAC9B,KAAK,MAAM0B,WAAW,IAAID,OAAO,CAACE,YAAY,EAAE;UAAA;UAAApC,aAAA,GAAAS,CAAA;UAC9C,IAAI;YACF;YACA,MAAM4B,QAAQ;YAAA;YAAA,CAAArC,aAAA,GAAAS,CAAA,QAAG,MAAM,IAAI,CAACa,MAAM,CAACgB,qBAAqB,CAACd,UAAU,CAAC;cAClEC,KAAK,EAAE;gBAAEc,IAAI,EAAEJ,WAAW,CAACI;cAAI;aAChC,CAAC;YAAC;YAAAvC,aAAA,GAAAS,CAAA;YAEH,IAAI,CAAC4B,QAAQ,EAAE;cAAA;cAAArC,aAAA,GAAAgB,CAAA;cAAAhB,aAAA,GAAAS,CAAA;cACb,MAAM,IAAI,CAACa,MAAM,CAACgB,qBAAqB,CAACE,MAAM,CAAC;gBAC7CC,IAAI,EAAE;kBACJF,IAAI,EAAEJ,WAAW,CAACI,IAAI;kBACtBG,WAAW,EAAEP,WAAW,CAACO,WAAW;kBACpCC,aAAa;kBAAE;kBAAA,CAAA3C,aAAA,GAAAgB,CAAA,UAAAmB,WAAW,CAACQ,aAAa;kBAAA;kBAAA,CAAA3C,aAAA,GAAAgB,CAAA,UAAI,IAAI;kBAChD4B,MAAM,EAAET,WAAW,CAACS,MAAM;kBAC1BC,SAAS;kBAAE;kBAAA,CAAA7C,aAAA,GAAAgB,CAAA,UAAAmB,WAAW,CAACU,SAAS;kBAAA;kBAAA,CAAA7C,aAAA,GAAAgB,CAAA,UAAI,IAAI;kBACxC8B,KAAK,EAAEX,WAAW,CAACW,KAAK;kBACxBZ,OAAO,EAAEC,WAAW,CAACD;;eAExB,CAAC;cAAC;cAAAlC,aAAA,GAAAS,CAAA;cACHwB,YAAY,EAAE;YAChB,CAAC;YAAA;YAAA;cAAAjC,aAAA,GAAAgB,CAAA;YAAA;UACH,CAAC,CAAC,OAAO+B,KAAK,EAAE;YAAA;YAAA/C,aAAA,GAAAS,CAAA;YACd,IAAI,CAACQ,MAAM,CAACC,IAAI,CACd;cAAE6B,KAAK;cAAER,IAAI,EAAEJ,WAAW,CAACI;YAAI,CAAE,EACjC,wCAAwC,CACzC;UACH;QACF;MACF;MAEA;MAAA;MAAAvC,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAEjB,YAAY,CAAC8C,SAAS,CAAC;MAAC;MAAAjD,aAAA,GAAAS,CAAA;MAChE,MAAM,IAAI,CAACyC,iBAAiB,CAAC9B,QAAQ,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAEvC,IAAI,CAACQ,MAAM,CAACkC,IAAI,CACd;QAAE/B,QAAQ;QAAEgC,OAAO,EAAEnB;MAAY,CAAE,EACnC,2CAA2C,CAC5C;MAAC;MAAAjC,aAAA,GAAAS,CAAA;MAEF,OAAO;QAAE2C,OAAO,EAAEnB;MAAY,CAAE;IAClC,CAAC,CAAC,OAAOc,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAE3B;MAAQ,CAAE,EAAE,0BAA0B,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MACnE,MAAMsC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMM,WAAWA,CACfC,MAAc,EACdR,KAAa,EACbZ,OAAe,EACfqB,YAA+C,EAC/CC,UAAmB,EACnB1B,QAAkC;IAAA;IAAA9B,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAElC,IAAI;MACF,MAAMc,gBAAgB;MAAA;MAAA,CAAAvB,aAAA,GAAAS,CAAA,QAAG,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACiB,MAAM,CAAC;QACjEC,IAAI,EAAE;UACJa,MAAM;UACNR,KAAK;UACLZ,OAAO;UACPqB,YAAY;UACZC,UAAU;UACV5B,MAAM,EAAEzB,YAAY,CAACsD,SAAS;UAC9B3B,QAAQ;UAAG;UAAA,CAAA9B,aAAA,GAAAgB,CAAA,UAAAc,QAAQ;UAAA;UAAA,CAAA9B,aAAA,GAAAgB,CAAA,UAAI,EAAE;;OAE5B,CAAC;MAAC;MAAAhB,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACQ,MAAM,CAACkC,IAAI,CACd;QAAE/B,QAAQ,EAAEG,gBAAgB,CAACG,EAAE;QAAE4B,MAAM;QAAER,KAAK;QAAEZ,OAAO;QAAEqB;MAAY,CAAE,EACvE,mCAAmC,CACpC;MAAC;MAAAvD,aAAA,GAAAS,CAAA;MAEF,OAAOc,gBAAgB,CAACG,EAAE;IAC5B,CAAC,CAAC,OAAOqB,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAEO,MAAM;QAAER,KAAK;QAAEZ;MAAO,CAAE,EAAE,mCAAmC,CAAC;MAAC;MAAAlC,aAAA,GAAAS,CAAA;MAC1F,MAAM,IAAIkB,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;EAEA;;;EAGA+B,QAAQA,CAACC,UAAkB;IAAA;IAAA3D,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAQzB,IAAI;MACF,MAAMmD,KAAK;MAAA;MAAA,CAAA5D,aAAA,GAAAS,CAAA,QAAGkD,UAAU,CAACE,KAAK,CAAC,IAAI,CAAC;MACpC;MACA,MAAMC,UAAU;MAAA;MAAA,CAAA9D,aAAA,GAAAS,CAAA,QAAGmD,KAAK,CAAC,CAAC,CAAC,CAACG,WAAW,EAAE;MACzC,MAAMC,OAAO;MAAA;MAAA,CAAAhE,aAAA,GAAAS,CAAA,QAAa,EAAE;MAC5B,IAAIwD,OAAO;MAAA;MAAA,CAAAjE,aAAA,GAAAS,CAAA,QAAG,EAAE;MAChB,IAAIyD,QAAQ;MAAA;MAAA,CAAAlE,aAAA,GAAAS,CAAA,QAAG,KAAK;MAAC;MAAAT,aAAA,GAAAS,CAAA;MAErB,KAAK,IAAI0D,CAAC;MAAA;MAAA,CAAAnE,aAAA,GAAAS,CAAA,QAAG,CAAC,GAAE0D,CAAC,GAAGL,UAAU,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1C,MAAME,IAAI;QAAA;QAAA,CAAArE,aAAA,GAAAS,CAAA,QAAGqD,UAAU,CAACK,CAAC,CAAC;QAAC;QAAAnE,aAAA,GAAAS,CAAA;QAE3B,IAAI4D,IAAI,KAAK,GAAG,EAAE;UAAA;UAAArE,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAChByD,QAAQ,GAAG,CAACA,QAAQ;QACtB,CAAC,MAAM;UAAA;UAAAlE,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAAA;UAAI;UAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAqD,IAAI,KAAK,GAAG;UAAA;UAAA,CAAArE,aAAA,GAAAgB,CAAA,WAAI,CAACkD,QAAQ,GAAE;YAAA;YAAAlE,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAS,CAAA;YACpCuD,OAAO,CAACM,IAAI,CAACL,OAAO,CAACM,IAAI,EAAE,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAAC;YAAAxE,aAAA,GAAAS,CAAA;YACvDwD,OAAO,GAAG,EAAE;UACd,CAAC,MAAM;YAAA;YAAAjE,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAS,CAAA;YACLwD,OAAO,IAAII,IAAI;UACjB;QAAA;MACF;MAAC;MAAArE,aAAA,GAAAS,CAAA;MACDuD,OAAO,CAACM,IAAI,CAACL,OAAO,CAACM,IAAI,EAAE,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;MAEtD,MAAMC,SAAS;MAAA;MAAA,CAAAzE,aAAA,GAAAS,CAAA,QAAGuD,OAAO,CAACU,OAAO,CAAC,MAAM,CAAC;MACzC,MAAMC,gBAAgB;MAAA;MAAA,CAAA3E,aAAA,GAAAS,CAAA,QAAGuD,OAAO,CAACU,OAAO,CAAC,aAAa,CAAC;MACvD,MAAME,YAAY;MAAA;MAAA,CAAA5E,aAAA,GAAAS,CAAA,QAAGuD,OAAO,CAACU,OAAO,CAAC,SAAS,CAAC;MAC/C,MAAMG,UAAU;MAAA;MAAA,CAAA7E,aAAA,GAAAS,CAAA,QAAGuD,OAAO,CAACU,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMI,WAAW;MAAA;MAAA,CAAA9E,aAAA,GAAAS,CAAA,QAAGuD,OAAO,CAACU,OAAO,CAAC,QAAQ,CAAC;MAAC;MAAA1E,aAAA,GAAAS,CAAA;MAE9C;MAAI;MAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAyD,SAAS,KAAK,CAAC,CAAC;MAAA;MAAA,CAAAzE,aAAA,GAAAgB,CAAA,WAAI2D,gBAAgB,KAAK,CAAC,CAAC,GAAE;QAAA;QAAA3E,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QAC/C,MAAM,IAAIkB,KAAK,CAAC,mDAAmD,CAAC;MACtE,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAED,MAAMoB,YAAY;MAAA;MAAA,CAAApC,aAAA,GAAAS,CAAA,QAOb,EAAE;MAAC;MAAAT,aAAA,GAAAS,CAAA;MAER,KAAK,IAAIsE,CAAC;MAAA;MAAA,CAAA/E,aAAA,GAAAS,CAAA,QAAG,CAAC,GAAEsE,CAAC,GAAGnB,KAAK,CAACQ,MAAM,EAAEW,CAAC,EAAE,EAAE;QACrC,MAAMC,IAAI;QAAA;QAAA,CAAAhF,aAAA,GAAAS,CAAA,QAAGmD,KAAK,CAACmB,CAAC,CAAC,CAACR,IAAI,EAAE;QAAC;QAAAvE,aAAA,GAAAS,CAAA;QAC7B,IAAI,CAACuE,IAAI,EAAE;UAAA;UAAAhF,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAAA;QAAA,CAAS;QAAA;QAAA;UAAAT,aAAA,GAAAgB,CAAA;QAAA;QAEpB;QACA,MAAMiE,OAAO;QAAA;QAAA,CAAAjF,aAAA,GAAAS,CAAA,QAAa,EAAE;QAC5B,IAAIwD,OAAO;QAAA;QAAA,CAAAjE,aAAA,GAAAS,CAAA,QAAG,EAAE;QAChB,IAAIyD,QAAQ;QAAA;QAAA,CAAAlE,aAAA,GAAAS,CAAA,QAAG,KAAK;QAAC;QAAAT,aAAA,GAAAS,CAAA;QAErB,KAAK,IAAI0D,CAAC;QAAA;QAAA,CAAAnE,aAAA,GAAAS,CAAA,QAAG,CAAC,GAAE0D,CAAC,GAAGa,IAAI,CAACZ,MAAM,EAAED,CAAC,EAAE,EAAE;UACpC,MAAME,IAAI;UAAA;UAAA,CAAArE,aAAA,GAAAS,CAAA,QAAGuE,IAAI,CAACb,CAAC,CAAC;UAAC;UAAAnE,aAAA,GAAAS,CAAA;UAErB,IAAI4D,IAAI,KAAK,GAAG,EAAE;YAAA;YAAArE,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAS,CAAA;YAChByD,QAAQ,GAAG,CAACA,QAAQ;UACtB,CAAC,MAAM;YAAA;YAAAlE,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAS,CAAA;YAAA;YAAI;YAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAqD,IAAI,KAAK,GAAG;YAAA;YAAA,CAAArE,aAAA,GAAAgB,CAAA,WAAI,CAACkD,QAAQ,GAAE;cAAA;cAAAlE,aAAA,GAAAgB,CAAA;cAAAhB,aAAA,GAAAS,CAAA;cACpCwE,OAAO,CAACX,IAAI,CAACL,OAAO,CAACM,IAAI,EAAE,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;cAAC;cAAAxE,aAAA,GAAAS,CAAA;cACvDwD,OAAO,GAAG,EAAE;YACd,CAAC,MAAM;cAAA;cAAAjE,aAAA,GAAAgB,CAAA;cAAAhB,aAAA,GAAAS,CAAA;cACLwD,OAAO,IAAII,IAAI;YACjB;UAAA;QACF;QAEA;QAAA;QAAArE,aAAA,GAAAS,CAAA;QACAwE,OAAO,CAACX,IAAI,CAACL,OAAO,CAACM,IAAI,EAAE,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAAC;QAAAxE,aAAA,GAAAS,CAAA;QAEvD,IAAIwE,OAAO,CAACb,MAAM,GAAGc,IAAI,CAACC,GAAG,CAACV,SAAS,EAAEE,gBAAgB,CAAC,GAAG,CAAC,EAAE;UAAA;UAAA3E,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAC9D,IAAI,CAACQ,MAAM,CAACC,IAAI,CAAC;YAAEkE,UAAU,EAAEL,CAAC,GAAG,CAAC;YAAEC;UAAI,CAAE,EAAE,2BAA2B,CAAC;UAAC;UAAAhF,aAAA,GAAAS,CAAA;UAC3E;QACF,CAAC;QAAA;QAAA;UAAAT,aAAA,GAAAgB,CAAA;QAAA;QAED,MAAMmB,WAAW;QAAA;QAAA,CAAAnC,aAAA,GAAAS,CAAA,QAAG;UAClB8B,IAAI,EAAE0C,OAAO,CAACR,SAAS,CAAC;UACxB/B,WAAW,EAAEuC,OAAO,CAACN,gBAAgB,CAAC;UACtCzC,OAAO,EAAE0C,YAAY,IAAI,CAAC;UAAA;UAAA,CAAA5E,aAAA,GAAAgB,CAAA,WAAGiE,OAAO,CAACL,YAAY,CAAC;UAAA;UAAA,CAAA5E,aAAA,GAAAgB,CAAA,WAAG,SAAS;UAC9D8B,KAAK,EAAE+B,UAAU,IAAI,CAAC;UAAA;UAAA,CAAA7E,aAAA,GAAAgB,CAAA;UAAG;UAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAAqE,QAAQ,CAACJ,OAAO,CAACJ,UAAU,CAAC,CAAC;UAAA;UAAA,CAAA7E,aAAA,GAAAgB,CAAA,WAAI,CAAC;UAAA;UAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAG,CAAC;UAC/D4B,MAAM,EAAEkC,WAAW,IAAI,CAAC;UAAA;UAAA,CAAA9E,aAAA,GAAAgB,CAAA,WAAGiE,OAAO,CAACH,WAAW,CAAC;UAAA;UAAA,CAAA9E,aAAA,GAAAgB,CAAA,WAAG,SAAS;SAC5D;QAAC;QAAAhB,aAAA,GAAAS,CAAA;QAEF2B,YAAY,CAACkC,IAAI,CAACnC,WAAW,CAAC;MAChC;MAAC;MAAAnC,aAAA,GAAAS,CAAA;MAED,OAAO2B,YAAY;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA;MAAK,CAAE,EAAE,6BAA6B,CAAC;MAAC;MAAA/C,aAAA,GAAAS,CAAA;MAC5D,MAAM,IAAIkB,KAAK,CAAC,uBAAuBoB,KAAK,CAACuC,OAAO,EAAE,CAAC;IACzD;EACF;EAEA;;;EAGA,MAAMC,QAAQA,CAACC,UAAkB;IAAA;IAAAxF,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAU/B,IAAI;MAAA;MAAAT,aAAA,GAAAS,CAAA;MACF,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,sBAAsB,CAAC;MAExC;MAAA;MAAAnD,aAAA,GAAAS,CAAA;MACA,IAAI,CAACL,GAAG,EAAE;QAAA;QAAAJ,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACRL,GAAG,GAAG,CAAC,MAAM,MAAM,CAAC,WAAW,CAAC,EAAEqF,OAAO;MAC3C,CAAC;MAAA;MAAA;QAAAzF,aAAA,GAAAgB,CAAA;MAAA;MAED;MACA,MAAM0E,OAAO;MAAA;MAAA,CAAA1F,aAAA,GAAAS,CAAA,QAAG,MAAML,GAAG,CAACoF,UAAU,CAAC;MACrC,MAAMG,IAAI;MAAA;MAAA,CAAA3F,aAAA,GAAAS,CAAA,QAAGiF,OAAO,CAACC,IAAI;MAAC;MAAA3F,aAAA,GAAAS,CAAA;MAE1B;MAAI;MAAA,CAAAT,aAAA,GAAAgB,CAAA,YAAC2E,IAAI;MAAA;MAAA,CAAA3F,aAAA,GAAAgB,CAAA,WAAI2E,IAAI,CAACvB,MAAM,GAAG,GAAG,GAAE;QAAA;QAAApE,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QAC9B,MAAM,IAAIkB,KAAK,CAAC,sCAAsC,CAAC;MACzD,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAAAhB,aAAA,GAAAS,CAAA;MAED,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,aAAawC,IAAI,CAACvB,MAAM,sBAAsB,CAAC;MAEhE;MACA,MAAMhC,YAAY;MAAA;MAAA,CAAApC,aAAA,GAAAS,CAAA,QAAG,MAAM,IAAI,CAACmF,eAAe,CAACD,IAAI,CAAC;MAAC;MAAA3F,aAAA,GAAAS,CAAA;MAEtD,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,UAAUf,YAAY,CAACgC,MAAM,wBAAwB,CAAC;MAAC;MAAApE,aAAA,GAAAS,CAAA;MACxE,OAAO2B,YAAY;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA;MAAK,CAAE,EAAE,qBAAqB,CAAC;MAAC;MAAA/C,aAAA,GAAAS,CAAA;MACpD,MAAM,IAAIkB,KAAK,CACb,uBAAuBoB,KAAK,YAAYpB,KAAK;MAAA;MAAA,CAAA3B,aAAA,GAAAgB,CAAA,WAAG+B,KAAK,CAACuC,OAAO;MAAA;MAAA,CAAAtF,aAAA,GAAAgB,CAAA,WAAG,eAAe,GAAE,CAClF;IACH;EACF;EAEA;;;EAGA,MAAM6E,SAASA,CAACL,UAAkB;IAAA;IAAAxF,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAUhC,IAAI;MAAA;MAAAT,aAAA,GAAAS,CAAA;MACF,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,uBAAuB,CAAC;MAEzC;MACA,MAAM2C,MAAM;MAAA;MAAA,CAAA9F,aAAA,GAAAS,CAAA,SAAG,MAAMJ,OAAO,CAAC0F,cAAc,CAAC;QAAEC,MAAM,EAAER;MAAU,CAAE,CAAC;MACnE,MAAMG,IAAI;MAAA;MAAA,CAAA3F,aAAA,GAAAS,CAAA,SAAGqF,MAAM,CAACG,KAAK;MAAC;MAAAjG,aAAA,GAAAS,CAAA;MAE1B;MAAI;MAAA,CAAAT,aAAA,GAAAgB,CAAA,YAAC2E,IAAI;MAAA;MAAA,CAAA3F,aAAA,GAAAgB,CAAA,WAAI2E,IAAI,CAACvB,MAAM,GAAG,GAAG,GAAE;QAAA;QAAApE,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QAC9B,MAAM,IAAIkB,KAAK,CAAC,uCAAuC,CAAC;MAC1D,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAAAhB,aAAA,GAAAS,CAAA;MAED,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,aAAawC,IAAI,CAACvB,MAAM,uBAAuB,CAAC;MAEjE;MACA,MAAMhC,YAAY;MAAA;MAAA,CAAApC,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAACmF,eAAe,CAACD,IAAI,CAAC;MAAC;MAAA3F,aAAA,GAAAS,CAAA;MAEtD,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,UAAUf,YAAY,CAACgC,MAAM,yBAAyB,CAAC;MAAC;MAAApE,aAAA,GAAAS,CAAA;MACzE,OAAO2B,YAAY;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA;MAAK,CAAE,EAAE,sBAAsB,CAAC;MAAC;MAAA/C,aAAA,GAAAS,CAAA;MACrD,MAAM,IAAIkB,KAAK,CACb,wBAAwBoB,KAAK,YAAYpB,KAAK;MAAA;MAAA,CAAA3B,aAAA,GAAAgB,CAAA,WAAG+B,KAAK,CAACuC,OAAO;MAAA;MAAA,CAAAtF,aAAA,GAAAgB,CAAA,WAAG,eAAe,GAAE,CACnF;IACH;EACF;EAEA;;;EAGA,MAAMkF,iBAAiBA,CAAC9E,QAAgB;IAAA;IAAApB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACtC,IAAI;MACF,MAAMY,YAAY;MAAA;MAAA,CAAArB,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACC,UAAU,CAAC;QACjEC,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ;OACtB,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACY,YAAY,EAAE;QAAA;QAAArB,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QAAA,OAAO,IAAI;MAAA,CAAC;MAAA;MAAA;QAAAT,aAAA,GAAAgB,CAAA;MAAA;MAAAhB,aAAA,GAAAS,CAAA;MAE/B,OAAO;QACLW,QAAQ;QACRQ,MAAM,EAAEP,YAAY,CAACO,MAAM;QAC3BuE,aAAa,EAAE9E,YAAY,CAAC8E,aAAa;QACzCC,iBAAiB,EAAE/E,YAAY,CAAC+E,iBAAiB;QACjDC,MAAM;QAAG;QAAA,CAAArG,aAAA,GAAAgB,CAAA,WAAAK,YAAY,CAACiF,QAAqB;QAAA;QAAA,CAAAtG,aAAA,GAAAgB,CAAA,WAAI,EAAE;OAClD;IACH,CAAC,CAAC,OAAO+B,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAE3B;MAAQ,CAAE,EAAE,+BAA+B,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MACxE,OAAO,IAAI;IACb;EACF;EAEA;;;EAGA,MAAM8F,YAAYA,CAACnF,QAAgB;IAAA;IAAApB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACjC,IAAI;MAAA;MAAAT,aAAA,GAAAS,CAAA;MACF,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAEjB,YAAY,CAACqG,SAAS,CAAC;MAAC;MAAAxG,aAAA,GAAAS,CAAA;MAChE,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC;QAAE/B;MAAQ,CAAE,EAAE,6BAA6B,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAC9D,OAAO,IAAI;IACb,CAAC,CAAC,OAAOsC,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAE3B;MAAQ,CAAE,EAAE,yBAAyB,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAClE,OAAO,KAAK;IACd;EACF;EAEA;;;EAGA,MAAMgG,gBAAgBA,CAACnD,MAAc,EAAEoD,KAAA;EAAA;EAAA,CAAA1G,aAAA,GAAAgB,CAAA,WAAgB,EAAE;IAAA;IAAAhB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACvD,IAAI;MACF,MAAMkG,OAAO;MAAA;MAAA,CAAA3G,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACqF,QAAQ,CAAC;QAC1DnF,KAAK,EAAE;UAAE6B;QAAM,CAAE;QACjBuD,OAAO,EAAE;UAAEC,SAAS,EAAE;QAAM,CAAE;QAC9BC,IAAI,EAAEL,KAAK;QACXM,OAAO,EAAE;UACPC,QAAQ,EAAE;YACRC,MAAM,EAAE;cACNxF,EAAE,EAAE,IAAI;cACRyF,WAAW,EAAE,IAAI;cACjBC,WAAW,EAAE;;WAEhB;UACDC,MAAM,EAAE;YACNH,MAAM,EAAE;cACNI,sBAAsB,EAAE;;;;OAI/B,CAAC;MAAC;MAAAtH,aAAA,GAAAS,CAAA;MAEH,OAAOkG,OAAO;IAChB,CAAC,CAAC,OAAO5D,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAEO;MAAM,CAAE,EAAE,8BAA8B,CAAC;MAAC;MAAAtD,aAAA,GAAAS,CAAA;MACrE,OAAO,EAAE;IACX;EACF;EAEA;EAEQ,MAAMuC,kBAAkBA,CAC9B5B,QAAgB,EAChBQ,MAAoB,EACpBuE,aAAsB;IAAA;IAAAnG,aAAA,GAAAW,CAAA;IAEtB,MAAM4G,UAAU;IAAA;IAAA,CAAAvH,aAAA,GAAAS,CAAA,SAAQ;MAAEmB;IAAM,CAAE;IAAC;IAAA5B,aAAA,GAAAS,CAAA;IACnC,IAAI0F,aAAa,KAAKqB,SAAS,EAAE;MAAA;MAAAxH,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MAC/B8G,UAAU,CAACpB,aAAa,GAAGA,aAAa;IAC1C,CAAC;IAAA;IAAA;MAAAnG,aAAA,GAAAgB,CAAA;IAAA;IAAAhB,aAAA,GAAAS,CAAA;IAED,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;MACxChG,KAAK,EAAE;QAAEC,EAAE,EAAEN;MAAQ,CAAE;MACvBqB,IAAI,EAAE8E;KACP,CAAC;EACJ;EAEQ,MAAMG,cAAcA,CAACtG,QAAgB,EAAEgF,iBAAyB;IAAA;IAAApG,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACtE,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;MACxChG,KAAK,EAAE;QAAEC,EAAE,EAAEN;MAAQ,CAAE;MACvBqB,IAAI,EAAE;QAAE2D;MAAiB;KAC1B,CAAC;EACJ;EAEQ,MAAMlD,iBAAiBA,CAAC9B,QAAgB;IAAA;IAAApB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAC9C,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;MACxChG,KAAK,EAAE;QAAEC,EAAE,EAAEN;MAAQ,CAAE;MACvBqB,IAAI,EAAE;QAAEkF,WAAW,EAAE,IAAIC,IAAI;MAAE;KAChC,CAAC;EACJ;EAEQ,MAAMC,SAASA,CAACzG,QAAgB,EAAEiF,MAAgB;IAAA;IAAArG,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACxD,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;MACxChG,KAAK,EAAE;QAAEC,EAAE,EAAEN;MAAQ,CAAE;MACvBqB,IAAI,EAAE;QAAE6D,QAAQ,EAAED;MAAM;KACzB,CAAC;EACJ;EAEA;;;EAGQ,MAAMT,eAAeA,CAACD,IAAY;IAAA;IAAA3F,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAaxC,IAAI;MACF;MACA,MAAMqH,QAAQ;MAAA;MAAA,CAAA9H,aAAA,GAAAS,CAAA,SAAG,IAAI,CAACsH,cAAc,CAACpC,IAAI,CAAC;MAC1C,MAAMqC,WAAW;MAAA;MAAA,CAAAhI,aAAA,GAAAS,CAAA,SAAG,IAAI,CAACwH,eAAe,CAACtC,IAAI,CAAC;MAE9C;MACA,MAAMuC,MAAM;MAAA;MAAA,CAAAlI,aAAA,GAAAS,CAAA,SAAG,IAAI,CAAC0H,SAAS,CAACxC,IAAI,EAAE,IAAI,CAAC,EAAC,CAAC;MAC3C,MAAMyC,eAAe;MAAA;MAAA,CAAApI,aAAA,GAAAS,CAAA,SAUhB,EAAE;MAAC;MAAAT,aAAA,GAAAS,CAAA;MAER,KAAK,IAAIsE,CAAC;MAAA;MAAA,CAAA/E,aAAA,GAAAS,CAAA,SAAG,CAAC,GAAEsE,CAAC,GAAGmD,MAAM,CAAC9D,MAAM,EAAEW,CAAC,EAAE,EAAE;QAAA;QAAA/E,aAAA,GAAAS,CAAA;QACtC,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,oBAAoB4B,CAAC,GAAG,CAAC,OAAOmD,MAAM,CAAC9D,MAAM,EAAE,CAAC;QAEjE,MAAMiE,YAAY;QAAA;QAAA,CAAArI,aAAA,GAAAS,CAAA,SAAGqH,QAAQ;QAAA;QAAA,CAAA9H,aAAA,GAAAgB,CAAA,WAAG,QAAQ;QAAA;QAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAGgH,WAAW;QAAA;QAAA,CAAAhI,aAAA,GAAAgB,CAAA,WAAG,gCAAgC;QAAA;QAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAG,SAAS;QACrG,MAAMsH,MAAM;QAAA;QAAA,CAAAtI,aAAA,GAAAS,CAAA,SAAG,uHAAuH4H,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BxJH,MAAM,CAACnD,CAAC,CAAC;IACP;QAAC;QAAA/E,aAAA,GAAAS,CAAA;QAEG,IAAI,CAAC,IAAI,CAACD,MAAM,EAAE;UAAA;UAAAR,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAChB,MAAM,IAAIkB,KAAK,CAAC,+BAA+B,CAAC;QAClD,CAAC;QAAA;QAAA;UAAA3B,aAAA,GAAAgB,CAAA;QAAA;QAED,MAAMuH,QAAQ;QAAA;QAAA,CAAAvI,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAACD,MAAM,CAACgI,IAAI,CAACC,WAAW,CAACjG,MAAM,CAAC;UACzDkG,KAAK,EAAE,OAAO;UACdC,QAAQ,EAAE,CACR;YACEC,IAAI,EAAE,QAAQ;YACdC,OAAO,EACL;WACH,EACD;YAAED,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAEP;UAAM,CAAE,CAClC;UACDQ,WAAW,EAAE,GAAG;UAAE;UAClBC,UAAU,EAAE;SACb,CAAC;QAEF,MAAMF,OAAO;QAAA;QAAA,CAAA7I,aAAA,GAAAS,CAAA,SAAG8H,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,EAAE1D,OAAO,EAAEuD,OAAO;QAAC;QAAA7I,aAAA,GAAAS,CAAA;QACtD,IAAI,CAACoI,OAAO,EAAE;UAAA;UAAA7I,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UACZ,IAAI,CAACQ,MAAM,CAACC,IAAI,CAAC,iCAAiC6D,CAAC,GAAG,CAAC,EAAE,CAAC;UAAC;UAAA/E,aAAA,GAAAS,CAAA;UAC3D;QACF,CAAC;QAAA;QAAA;UAAAT,aAAA,GAAAgB,CAAA;QAAA;QAAAhB,aAAA,GAAAS,CAAA;QAED,IAAI;UACF,MAAMwI,MAAM;UAAA;UAAA,CAAAjJ,aAAA,GAAAS,CAAA,SAAGyI,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC;UAAC;UAAA7I,aAAA,GAAAS,CAAA;UACnC;UAAI;UAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAiI,MAAM,CAAC7G,YAAY;UAAA;UAAA,CAAApC,aAAA,GAAAgB,CAAA,WAAIoI,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC7G,YAAY,CAAC,GAAE;YAAA;YAAApC,aAAA,GAAAgB,CAAA;YAC7D,MAAMoB,YAAY;YAAA;YAAA,CAAApC,aAAA,GAAAS,CAAA,SAAGwI,MAAM,CAAC7G,YAAY,CAACkH,GAAG,CAAEC,GAAQ,IAAM;cAAA;cAAAvJ,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAS,CAAA;cAAA;gBAC1D8B,IAAI;gBAAE;gBAAA,CAAAvC,aAAA,GAAAgB,CAAA,WAAAuI,GAAG,CAAChH,IAAI;gBAAA;gBAAA,CAAAvC,aAAA,GAAAgB,CAAA,WAAI,QAAQ+D,CAAC,IAAIqD,eAAe,CAAChE,MAAM,EAAE;gBACvD1B,WAAW;gBAAE;gBAAA,CAAA1C,aAAA,GAAAgB,CAAA,WAAAuI,GAAG,CAAC7G,WAAW;gBAAA;gBAAA,CAAA1C,aAAA,GAAAgB,CAAA,WAAI,EAAE;gBAClC2B,aAAa,EAAE4G,GAAG,CAAC5G,aAAa;gBAChCT,OAAO;gBAAE;gBAAA,CAAAlC,aAAA,GAAAgB,CAAA,WAAAiI,MAAM,CAAC/G,OAAO;gBAAA;gBAAA,CAAAlC,aAAA,GAAAgB,CAAA,WAAI,SAAS;gBACpC8B,KAAK;gBAAE;gBAAA,CAAA9C,aAAA,GAAAgB,CAAA,WAAAiI,MAAM,CAACnG,KAAK;gBAAA;gBAAA,CAAA9C,aAAA,GAAAgB,CAAA,WAAI,CAAC;gBACxB4B,MAAM;gBAAE;gBAAA,CAAA5C,aAAA,GAAAgB,CAAA,WAAAuI,GAAG,CAAC3G,MAAM;gBAAA;gBAAA,CAAA5C,aAAA,GAAAgB,CAAA,WAAIuI,GAAG,CAACC,MAAM;gBAAA;gBAAA,CAAAxJ,aAAA,GAAAgB,CAAA,WAAI,SAAS;gBAC7CyI,QAAQ,EAAEF,GAAG,CAACE,QAAQ;gBACtB5G,SAAS,EAAE0G,GAAG,CAAC1G,SAAS;gBACxB6G,WAAW,EAAEH,GAAG,CAACG;eAClB;aAAC,CAAC;YAAC;YAAA1J,aAAA,GAAAS,CAAA;YAEJ2H,eAAe,CAAC9D,IAAI,CAAC,GAAGlC,YAAY,CAAC;UACvC,CAAC;UAAA;UAAA;YAAApC,aAAA,GAAAgB,CAAA;UAAA;QACH,CAAC,CAAC,OAAO2I,UAAU,EAAE;UAAA;UAAA3J,aAAA,GAAAS,CAAA;UACnB,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;YAAE4G,UAAU;YAAEC,KAAK,EAAE7E;UAAC,CAAE,EAAE,6BAA6B,CAAC;QAC5E;MACF;MAAC;MAAA/E,aAAA,GAAAS,CAAA;MAED,OAAO2H,eAAe;IACxB,CAAC,CAAC,OAAOrF,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA;MAAK,CAAE,EAAE,8BAA8B,CAAC;MAAC;MAAA/C,aAAA,GAAAS,CAAA;MAC7D,MAAM,IAAIkB,KAAK,CAAC,mBAAmB,CAAC;IACtC;EACF;EAEA;;;EAGQoG,cAAcA,CAACpC,IAAY;IAAA;IAAA3F,aAAA,GAAAW,CAAA;IACjC,MAAMkJ,gBAAgB;IAAA;IAAA,CAAA7J,aAAA,GAAAS,CAAA,SAAG,CACvB,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,eAAe,EACxD,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,iBAAiB,EAC1D,2BAA2B,EAAE,qBAAqB,CACnD;IAED,MAAMqJ,SAAS;IAAA;IAAA,CAAA9J,aAAA,GAAAS,CAAA,SAAGkF,IAAI,CAAC5B,WAAW,EAAE;IACpC,MAAMgG,WAAW;IAAA;IAAA,CAAA/J,aAAA,GAAAS,CAAA,SAAGoJ,gBAAgB,CAACG,MAAM,CAACC,SAAS,IACnD;MAAA;MAAAjK,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAS,CAAA;MAAA,OAAAqJ,SAAS,CAACI,QAAQ,CAACD,SAAS,CAAC;IAAD,CAAC,CAC9B,CAAC7F,MAAM;IAAC;IAAApE,aAAA,GAAAS,CAAA;IAET,OAAOsJ,WAAW,IAAI,CAAC;EACzB;EAEA;;;EAGQ9B,eAAeA,CAACtC,IAAY;IAAA;IAAA3F,aAAA,GAAAW,CAAA;IAClC,MAAMwJ,iBAAiB;IAAA;IAAA,CAAAnK,aAAA,GAAAS,CAAA,SAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC;IACpF,MAAMoJ,gBAAgB;IAAA;IAAA,CAAA7J,aAAA,GAAAS,CAAA,SAAG,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,eAAe,CAAC;IAEnF,MAAMqJ,SAAS;IAAA;IAAA,CAAA9J,aAAA,GAAAS,CAAA,SAAGkF,IAAI,CAAC5B,WAAW,EAAE;IACpC,MAAMqG,UAAU;IAAA;IAAA,CAAApK,aAAA,GAAAS,CAAA,SAAG0J,iBAAiB,CAACE,IAAI,CAACJ,SAAS,IAAI;MAAA;MAAAjK,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAS,CAAA;MAAA,OAAAqJ,SAAS,CAACI,QAAQ,CAACD,SAAS,CAAC;IAAD,CAAC,CAAC;IACrF,MAAMK,SAAS;IAAA;IAAA,CAAAtK,aAAA,GAAAS,CAAA,SAAGoJ,gBAAgB,CAACQ,IAAI,CAACJ,SAAS,IAAI;MAAA;MAAAjK,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAS,CAAA;MAAA,OAAAqJ,SAAS,CAACI,QAAQ,CAACD,SAAS,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAjK,aAAA,GAAAS,CAAA;IAEpF,OAAO,2BAAAT,aAAA,GAAAgB,CAAA,WAAAoJ,UAAU;IAAA;IAAA,CAAApK,aAAA,GAAAgB,CAAA,WAAIsJ,SAAS;EAChC;EAEA;;;EAGQnC,SAASA,CAACxC,IAAY,EAAE4E,gBAAwB;IAAA;IAAAvK,aAAA,GAAAW,CAAA;IACtD,MAAMuH,MAAM;IAAA;IAAA,CAAAlI,aAAA,GAAAS,CAAA,SAAa,EAAE;IAC3B,MAAM+J,UAAU;IAAA;IAAA,CAAAxK,aAAA,GAAAS,CAAA,SAAGkF,IAAI,CAAC9B,KAAK,CAAC,OAAO,CAAC;IACtC,IAAI4G,YAAY;IAAA;IAAA,CAAAzK,aAAA,GAAAS,CAAA,SAAG,EAAE;IAAC;IAAAT,aAAA,GAAAS,CAAA;IAEtB,KAAK,MAAMiK,SAAS,IAAIF,UAAU,EAAE;MAAA;MAAAxK,aAAA,GAAAS,CAAA;MAClC;MAAI;MAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAyJ,YAAY,CAACrG,MAAM,GAAGsG,SAAS,CAACtG,MAAM,GAAGmG,gBAAgB;MAAA;MAAA,CAAAvK,aAAA,GAAAgB,CAAA,WAAIyJ,YAAY,CAACrG,MAAM,GAAG,CAAC,GAAE;QAAA;QAAApE,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACxFyH,MAAM,CAAC5D,IAAI,CAACmG,YAAY,CAAClG,IAAI,EAAE,CAAC;QAAC;QAAAvE,aAAA,GAAAS,CAAA;QACjCgK,YAAY,GAAGC,SAAS;MAC1B,CAAC,MAAM;QAAA;QAAA1K,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACLgK,YAAY,IAAI,CAACA,YAAY;QAAA;QAAA,CAAAzK,aAAA,GAAAgB,CAAA,WAAG,MAAM;QAAA;QAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAG,EAAE,KAAI0J,SAAS;MAC1D;IACF;IAAC;IAAA1K,aAAA,GAAAS,CAAA;IAED,IAAIgK,YAAY,CAAClG,IAAI,EAAE,EAAE;MAAA;MAAAvE,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MACvByH,MAAM,CAAC5D,IAAI,CAACmG,YAAY,CAAClG,IAAI,EAAE,CAAC;IAClC,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAAgB,CAAA;IAAA;IAAAhB,aAAA,GAAAS,CAAA;IAED,OAAOyH,MAAM;EACf;EAEA;;;EAGQyC,wBAAwBA,CAACpI,IAAY,EAAEG,WAAmB;IAAA;IAAA1C,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAChE;IACA;IACA;IACA;IAEA,IAAI8B,IAAI,CAAC6B,MAAM,KAAK,CAAC,EAAE;MAAA;MAAApE,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAT,aAAA,GAAAgB,CAAA;IAAA;IAAAhB,aAAA,GAAAS,CAAA;IACxC,IAAI8B,IAAI,CAACqI,QAAQ,CAAC,IAAI,CAAC,EAAE;MAAA;MAAA5K,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAT,aAAA,GAAAgB,CAAA;IAAA;IAAAhB,aAAA,GAAAS,CAAA;IAC1C,IAAIiC,WAAW,CAACqB,WAAW,EAAE,CAACmG,QAAQ,CAAC,SAAS,CAAC,EAAE;MAAA;MAAAlK,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAT,aAAA,GAAAgB,CAAA;IAAA;IAAAhB,aAAA,GAAAS,CAAA;IACpE,IAAI8B,IAAI,CAACsI,KAAK,CAAC,YAAY,CAAC,EAAE;MAAA;MAAA7K,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAS,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAT,aAAA,GAAAgB,CAAA;IAAA,EAAC;IAEhD;IAAAhB,aAAA,GAAAS,CAAA;IACA,OAAO,UAAU;EACnB;EAEA;;;EAGA,MAAMqK,iBAAiBA,CAAC1J,QAAgB,EAAE2J,IAAyB;IAAA;IAAA/K,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IACjE,IAAI;MAAA;MAAAT,aAAA,GAAAS,CAAA;MACF;MACA,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;QACxChG,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ,CAAE;QACvBqB,IAAI,EAAE;UACJe,UAAU,EAAEuH,IAAI,CAACC,YAAY;UAC7BlJ,QAAQ,EAAE;YACRmJ,QAAQ,EAAEF,IAAI,CAACC,YAAY;YAC3BE,QAAQ,EAAEH,IAAI,CAACG,QAAQ;YACvBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;YACfC,UAAU,EAAE,IAAIxD,IAAI,EAAE,CAACyD,WAAW;WACnC;UACD;UACAC,OAAO,EAAEP,IAAI,CAAC/E,MAAM,CAACuF,QAAQ,CAAC,QAAQ;;OAEzC,CAAC;MAAC;MAAAvL,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,0BAA0B/B,QAAQ,KAAK2J,IAAI,CAACC,YAAY,EAAE,CAAC;IAC9E,CAAC,CAAC,OAAOjI,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAE3B;MAAQ,CAAE,EAAE,+BAA+B,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MACxE,MAAMsC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMyI,iBAAiBA,CACrBpK,QAAgB,EAChBqK,QAAA;EAAA;EAAA,CAAAzL,aAAA,GAAAgB,CAAA,WAAgC,EAAE;IAAA;IAAAhB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAgBlC,IAAI;MACF,MAAMY,YAAY;MAAA;MAAA,CAAArB,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACC,UAAU,CAAC;QACjEC,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ;OACtB,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACY,YAAY,EAAE;QAAA;QAAArB,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACjB,MAAM,IAAIkB,KAAK,CAAC,0BAA0B,CAAC;MAC7C,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAAAhB,aAAA,GAAAS,CAAA;MAED,IAAI,CAACY,YAAY,CAACiK,OAAO,EAAE;QAAA;QAAAtL,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACzB,MAAM,IAAIkB,KAAK,CAAC,mCAAmC,CAAC;MACtD,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAED;MAAAhB,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAEjB,YAAY,CAACuL,UAAU,CAAC;MAEhE;MACA,MAAMlG,UAAU;MAAA;MAAA,CAAAxF,aAAA,GAAAS,CAAA,SAAGkL,MAAM,CAACC,IAAI,CAACvK,YAAY,CAACiK,OAAO,EAAE,QAAQ,CAAC;MAE9D;MACA,IAAIlJ,YAAY;MAAA;MAAA,CAAApC,aAAA,GAAAS,CAAA,SAOX,EAAE;MAAC;MAAAT,aAAA,GAAAS,CAAA;MAER,IAAIY,YAAY,CAACkC,YAAY,KAAK,KAAK,EAAE;QAAA;QAAAvD,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACvC2B,YAAY,GAAG,MAAM,IAAI,CAACmD,QAAQ,CAACC,UAAU,CAAC;MAChD,CAAC,MAAM;QAAA;QAAAxF,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QAAA,IAAIY,YAAY,CAACkC,YAAY,KAAK,MAAM,EAAE;UAAA;UAAAvD,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAC/C2B,YAAY,GAAG,MAAM,IAAI,CAACyD,SAAS,CAACL,UAAU,CAAC;QACjD,CAAC,MAAM;UAAA;UAAAxF,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAAA,IAAIY,YAAY,CAACkC,YAAY,KAAK,KAAK,EAAE;YAAA;YAAAvD,aAAA,GAAAgB,CAAA;YAC9C;YACA,MAAM2C,UAAU;YAAA;YAAA,CAAA3D,aAAA,GAAAS,CAAA,SAAG+E,UAAU,CAAC+F,QAAQ,CAAC,OAAO,CAAC;YAAC;YAAAvL,aAAA,GAAAS,CAAA;YAChD2B,YAAY,GAAG,IAAI,CAACsB,QAAQ,CAACC,UAAU,CAAC;UAC1C,CAAC,MAAM;YAAA;YAAA3D,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAS,CAAA;YACL,MAAM,IAAIkB,KAAK,CAAC,4BAA4BN,YAAY,CAACkC,YAAY,EAAE,CAAC;UAC1E;QAAA;MAAA;MAEA;MACA,MAAMsI,UAAU;MAAA;MAAA,CAAA7L,aAAA,GAAAS,CAAA,SAAG,IAAIqL,GAAG,EAAe;MAAC;MAAA9L,aAAA,GAAAS,CAAA;MAE1C,KAAK,MAAM0B,WAAW,IAAIC,YAAY,EAAE;QACtC,MAAM2J,WAAW;QAAA;QAAA,CAAA/L,aAAA,GAAAS,CAAA;QAAG;QAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAmB,WAAW,CAACD,OAAO;QAAA;QAAA,CAAAlC,aAAA,GAAAgB,CAAA,WAAI,SAAS;QAAC;QAAAhB,aAAA,GAAAS,CAAA;QAErD,IAAI,CAACoL,UAAU,CAACG,GAAG,CAACD,WAAW,CAAC,EAAE;UAAA;UAAA/L,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAChCoL,UAAU,CAACI,GAAG,CAACF,WAAW,EAAE;YAC1BG,IAAI,EAAEH,WAAW;YACjB3J,YAAY,EAAE;WACf,CAAC;QACJ,CAAC;QAAA;QAAA;UAAApC,aAAA,GAAAgB,CAAA;QAAA;QAED,MAAMkB,OAAO;QAAA;QAAA,CAAAlC,aAAA,GAAAS,CAAA,SAAGoL,UAAU,CAACM,GAAG,CAACJ,WAAW,CAAC;QAAC;QAAA/L,aAAA,GAAAS,CAAA;QAC5CyB,OAAO,CAACE,YAAY,CAACkC,IAAI,CAAC;UACxB/B,IAAI,EAAEJ,WAAW,CAACI,IAAI;UACtB6J,IAAI,EAAE,IAAI,CAACzB,wBAAwB,CAACxI,WAAW,CAACI,IAAI,EAAEJ,WAAW,CAACO,WAAW,CAAC;UAC9EA,WAAW,EAAEP,WAAW,CAACO,WAAW;UACpCE,MAAM;UAAE;UAAA,CAAA5C,aAAA,GAAAgB,CAAA,WAAAmB,WAAW,CAACS,MAAM;UAAA;UAAA,CAAA5C,aAAA,GAAAgB,CAAA,WAAI,SAAS;UACvC6B,SAAS,EAAEV,WAAW,CAACU,SAAS;UAChCX,OAAO,EAAE6J,WAAW;UACpBjJ,KAAK;UAAE;UAAA,CAAA9C,aAAA,GAAAgB,CAAA,WAAAmB,WAAW,CAACW,KAAK;UAAA;UAAA,CAAA9C,aAAA,GAAAgB,CAAA,WAAIK,YAAY,CAACyB,KAAK;SAC/C,CAAC;MACJ;MAEA,MAAMf,QAAQ;MAAA;MAAA,CAAA/B,aAAA,GAAAS,CAAA,SAAG2I,KAAK,CAACwC,IAAI,CAACC,UAAU,CAACQ,MAAM,EAAE,CAAC;MAEhD;MAAA;MAAArM,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;QACxChG,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ,CAAE;QACvBqB,IAAI,EAAE;UACJX,QAAQ,EAAE;YACR;YAAK;YAAA,CAAA9B,aAAA,GAAAgB,CAAA,WAAAK,YAAY,CAACS,QAAgB;YAAA;YAAA,CAAA9B,aAAA,GAAAgB,CAAA,WAAI,EAAE,EAAC;YACzCgB,cAAc,EAAED;;;OAGrB,CAAC;MAEF;MAAA;MAAA/B,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAEjB,YAAY,CAAC0B,gBAAgB,CAAC;MAAC;MAAA7B,aAAA,GAAAS,CAAA;MAEvE,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,0BAA0B/B,QAAQ,KAAKW,QAAQ,CAACqC,MAAM,WAAW,CAAC;MAAC;MAAApE,aAAA,GAAAS,CAAA;MAEpF,OAAO;QACLsB,QAAQ,EAAEA,QAAQ;QAClBsE,MAAM,EAAE;OACT;IACH,CAAC,CAAC,OAAOtD,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAE3B;MAAQ,CAAE,EAAE,+BAA+B,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MACxE,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAEjB,YAAY,CAACmM,MAAM,CAAC;MAAC;MAAAtM,aAAA,GAAAS,CAAA;MAC7D,MAAMsC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMwJ,oBAAoBA,CACxBjJ,MAAc,EACdkJ,QAAgB;IAAA;IAAAxM,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAgBhB,IAAI;MACF;MACA,MAAMgM,SAAS;MAAA;MAAA,CAAAzM,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAAC4C,WAAW,CACtCC,MAAM,EACN,CAAC;MAAE;MACH,eAAe,EACf,QAAQ,EACR,WAAWkJ,QAAQ,EAAE,CACtB;MAED;MACA,IAAIzK,QAAQ;MAAA;MAAA,CAAA/B,aAAA,GAAAS,CAAA,SAWP,EAAE;MAAC;MAAAT,aAAA,GAAAS,CAAA;MAER,QAAQ+L,QAAQ;QACd,KAAK,mBAAmB;UAAA;UAAAxM,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UACtBsB,QAAQ,GAAG,CACT;YACEmK,IAAI,EAAE,0BAA0B;YAChC9J,YAAY,EAAE,CACZ;cACEG,IAAI,EAAE,KAAK;cACX6J,IAAI,EAAE,SAAS;cACf1J,WAAW,EAAE,2CAA2C;cACxDE,MAAM,EAAE,qBAAqB;cAC7BV,OAAO,EAAE,0BAA0B;cACnCY,KAAK,EAAE;aACR,EACD;cACEP,IAAI,EAAE,OAAO;cACb6J,IAAI,EAAE,UAAU;cAChB1J,WAAW,EAAE,wCAAwC;cACrDE,MAAM,EAAE,qBAAqB;cAC7BC,SAAS,EAAE,QAAQ;cACnBX,OAAO,EAAE,0BAA0B;cACnCY,KAAK,EAAE;aACR;WAEJ,EACD;YACEoJ,IAAI,EAAE,eAAe;YACrB9J,YAAY,EAAE,CACZ;cACEG,IAAI,EAAE,IAAI;cACV6J,IAAI,EAAE,SAAS;cACf1J,WAAW,EAAE,kCAAkC;cAC/CE,MAAM,EAAE,QAAQ;cAChBV,OAAO,EAAE,eAAe;cACxBY,KAAK,EAAE;aACR;WAEJ,CACF;UAAC;UAAA9C,aAAA,GAAAS,CAAA;UACF;QAEF,KAAK,wBAAwB;UAAA;UAAAT,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UAC3BsB,QAAQ,GAAG,CACT;YACEmK,IAAI,EAAE,UAAU;YAChB9J,YAAY,EAAE,CACZ;cACEG,IAAI,EAAE,MAAM;cACZ6J,IAAI,EAAE,SAAS;cACf1J,WAAW,EAAE,yDAAyD;cACtEE,MAAM,EAAE,oBAAoB;cAC5BV,OAAO,EAAE,UAAU;cACnBY,KAAK,EAAE;aACR;WAEJ,EACD;YACEoJ,IAAI,EAAE,aAAa;YACnB9J,YAAY,EAAE,CACZ;cACEG,IAAI,EAAE,MAAM;cACZ6J,IAAI,EAAE,SAAS;cACf1J,WAAW,EAAE,yCAAyC;cACtDE,MAAM,EAAE,6BAA6B;cACrCV,OAAO,EAAE,aAAa;cACtBY,KAAK,EAAE;aACR;WAEJ,CACF;UAAC;UAAA9C,aAAA,GAAAS,CAAA;UACF;QAEF,KAAK,gBAAgB;UAAA;UAAAT,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UACnBsB,QAAQ,GAAG,CACT;YACEmK,IAAI,EAAE,uBAAuB;YAC7B9J,YAAY,EAAE,CACZ;cACEG,IAAI,EAAE,SAAS;cACf6J,IAAI,EAAE,SAAS;cACf1J,WAAW,EAAE,oDAAoD;cACjEE,MAAM,EAAE,eAAe;cACvBV,OAAO,EAAE,uBAAuB;cAChCY,KAAK,EAAE;aACR;WAEJ,CACF;UAAC;UAAA9C,aAAA,GAAAS,CAAA;UACF;QAEF;UAAA;UAAAT,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAS,CAAA;UACE,MAAM,IAAIkB,KAAK,CAAC,mBAAmB6K,QAAQ,EAAE,CAAC;MAClD;MAEA;MAAA;MAAAxM,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;QACxChG,KAAK,EAAE;UAAEC,EAAE,EAAE+K;QAAS,CAAE;QACxBhK,IAAI,EAAE;UACJX,QAAQ,EAAE;YACR0K,QAAQ;YACRxK,cAAc,EAAED,QAAQ;YACxB2K,QAAQ,EAAE,IAAI9E,IAAI,EAAE,CAACyD,WAAW;;;OAGrC,CAAC;MAEF;MAAA;MAAArL,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACuC,kBAAkB,CAACyJ,SAAS,EAAE,kBAAkB,CAAC;MAAC;MAAAzM,aAAA,GAAAS,CAAA;MAE7D,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,6BAA6BqJ,QAAQ,aAAalJ,MAAM,EAAE,CAAC;MAAC;MAAAtD,aAAA,GAAAS,CAAA;MAE7E,OAAO;QACLgM,SAAS;QACT1K;OACD;IACH,CAAC,CAAC,OAAOgB,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAEyJ,QAAQ;QAAElJ;MAAM,CAAE,EAAE,kCAAkC,CAAC;MAAC;MAAAtD,aAAA,GAAAS,CAAA;MACnF,MAAMsC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAM4J,cAAcA,CAClBvL,QAAgB,EAChBwL,OAAe;IAAA;IAAA5M,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAS,CAAA;IAKf,IAAI;MACF,MAAMY,YAAY;MAAA;MAAA,CAAArB,aAAA,GAAAS,CAAA,SAAG,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACC,UAAU,CAAC;QACjEC,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ,CAAE;QACvB4F,OAAO,EAAE;UACPM,sBAAsB,EAAE;;OAE3B,CAAC;MAAC;MAAAtH,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACY,YAAY,EAAE;QAAA;QAAArB,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAS,CAAA;QACjB,MAAM,IAAIkB,KAAK,CAAC,0BAA0B,CAAC;MAC7C,CAAC;MAAA;MAAA;QAAA3B,aAAA,GAAAgB,CAAA;MAAA;MAED;MACA,MAAMgB,cAAc;MAAA;MAAA,CAAAhC,aAAA,GAAAS,CAAA;MAAI;MAAA,CAAAT,aAAA,GAAAgB,CAAA,WAAAK,YAAY,CAACS,QAAgB,EAAEE,cAAc;MAAA;MAAA,CAAAhC,aAAA,GAAAgB,CAAA,WAAI,EAAE;MAE3E,IAAI6L,iBAAiB;MAAA;MAAA,CAAA7M,aAAA,GAAAS,CAAA,SAAG,CAAC;MACzB,MAAMsB,QAAQ;MAAA;MAAA,CAAA/B,aAAA,GAAAS,CAAA,SAAa,EAAE;MAE7B;MAAA;MAAAT,aAAA,GAAAS,CAAA;MACA,KAAK,MAAMyB,OAAO,IAAIF,cAAc,EAAE;QAAA;QAAAhC,aAAA,GAAAS,CAAA;QACpCsB,QAAQ,CAACuC,IAAI,CAACpC,OAAO,CAACgK,IAAI,CAAC;QAAC;QAAAlM,aAAA,GAAAS,CAAA;QAE5B,KAAK,MAAM0B,WAAW,IAAID,OAAO,CAACE,YAAY,EAAE;UAAA;UAAApC,aAAA,GAAAS,CAAA;UAC9C,MAAM,IAAI,CAACa,MAAM,CAACgB,qBAAqB,CAACE,MAAM,CAAC;YAC7CC,IAAI,EAAE;cACJF,IAAI,EAAEJ,WAAW,CAACI,IAAI;cACtBG,WAAW,EAAEP,WAAW,CAACO,WAAW;cACpCE,MAAM,EAAET,WAAW,CAACS,MAAM;cAC1BC,SAAS,EAAEV,WAAW,CAACU,SAAS;cAChCC,KAAK,EAAEX,WAAW,CAACW,KAAK;cACxBZ,OAAO,EAAEC,WAAW,CAACD,OAAO;cAC5Bd;;WAEH,CAAC;UAAC;UAAApB,aAAA,GAAAS,CAAA;UACHoM,iBAAiB,EAAE;QACrB;MACF;MAEA;MAAA;MAAA7M,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAE,WAAW,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MACrD,MAAM,IAAI,CAACyC,iBAAiB,CAAC9B,QAAQ,CAAC;MAEtC;MAAA;MAAApB,aAAA,GAAAS,CAAA;MACA,MAAM,IAAI,CAACa,MAAM,CAACC,gBAAgB,CAACkG,MAAM,CAAC;QACxChG,KAAK,EAAE;UAAEC,EAAE,EAAEN;QAAQ,CAAE;QACvBqB,IAAI,EAAE;UACJX,QAAQ,EAAE;YACR;YAAK;YAAA,CAAA9B,aAAA,GAAAgB,CAAA,WAAAK,YAAY,CAACS,QAAgB;YAAA;YAAA,CAAA9B,aAAA,GAAAgB,CAAA,WAAI,EAAE,EAAC;YACzC8L,YAAY,EAAE;cACZD,iBAAiB;cACjB9K,QAAQ;cACR4F,WAAW,EAAE,IAAIC,IAAI,EAAE,CAACyD,WAAW;;;;OAI1C,CAAC;MAAC;MAAArL,aAAA,GAAAS,CAAA;MAEH,IAAI,CAACQ,MAAM,CAACkC,IAAI,CAAC,qBAAqB/B,QAAQ,aAAayL,iBAAiB,eAAe,CAAC;MAAC;MAAA7M,aAAA,GAAAS,CAAA;MAE7F,OAAO;QACLoM,iBAAiB;QACjB9K;OACD;IACH,CAAC,CAAC,OAAOgB,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAS,CAAA;MACd,IAAI,CAACQ,MAAM,CAAC8B,KAAK,CAAC;QAAEA,KAAK;QAAE3B;MAAQ,CAAE,EAAE,2BAA2B,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MACpE,MAAM,IAAI,CAACuC,kBAAkB,CAAC5B,QAAQ,EAAE,QAAQ,CAAC;MAAC;MAAApB,aAAA,GAAAS,CAAA;MAClD,MAAMsC,KAAK;IACb;EACF;;AAGF;AACA,OAAO,MAAMgK,uBAAuB;AAAA;AAAA,CAAA/M,aAAA,GAAAS,CAAA,SAAG,IAAIF,uBAAuB,EAAE","ignoreList":[]}