{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/reportDeadline.test.ts","mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AACtC,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,2BAA2B,EAAE,MAAM,uCAAuC,CAAC;AAEpF,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;AAE9B,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,MAA8C,CAAC;IAEnD,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,GAAG,mBAAmB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,iCAAiC;QACjC,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,IAAI,EAAE;gBACJ,KAAK,EAAE,WAAW,IAAI,CAAC,GAAG,EAAE,cAAc;gBAC1C,QAAQ,EAAE,iBAAiB;gBAC3B,IAAI,EAAE,cAAc;gBACpB,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,IAAI;aACtB,IAAI,CAAC,uBAAuB,CAAC;aAC7B,IAAI,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC;QACtF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QAE1B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mCAAmC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEjC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QACpF,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE7B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,iCAAiC;QACjC,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,IAAI,EAAE;gBACJ,KAAK,EAAE,oBAAoB,IAAI,CAAC,GAAG,EAAE,cAAc;gBACnD,QAAQ,EAAE,iBAAiB;gBAC3B,IAAI,EAAE,kBAAkB;gBACxB,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QAEH,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;YACjC,IAAI,EAAE;gBACJ,SAAS,EAAE,OAAO,CAAC,EAAE;gBACrB,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,EAAE,iBAAiB;gBACxD,gBAAgB,EAAE,CAAC;aACpB;SACF,CAAC,CAAC;QAEH,MAAM,2BAA2B,EAAE,CAAC;QAEpC,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;YAC/C,KAAK,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE;SACvC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/reportDeadline.test.ts"],"sourcesContent":["import { app } from '../../src/index';\nimport { getTestPrismaClient } from '../jest.setup';\nimport { authRequest } from '../test-auth-helper';\nimport { sendReportDeadlineReminders } from '../../src/jobs/reportDeadlineReminder';\n\nconst auth = authRequest(app);\n\ndescribe('report deadlines', () => {\n  let prisma: ReturnType<typeof getTestPrismaClient>;\n\n  beforeAll(async () => {\n    await auth.setup();\n  });\n\n  beforeEach(async () => {\n    prisma = getTestPrismaClient();\n  });\n\n  it('CRUD operations work', async () => {\n    // Create a teacher for this test\n    const teacher = await prisma.user.create({\n      data: {\n        email: `teacher-${Date.now()}@example.com`,\n        password: 'hashed_password',\n        name: 'Test Teacher',\n        role: 'teacher',\n      },\n    });\n\n    const create = await auth\n      .post('/api/report-deadlines')\n      .send({ teacherId: teacher.id, name: 'Midterm', date: '2025-02-01T00:00:00.000Z' });\n    expect(create.status).toBe(201);\n    const id = create.body.id;\n\n    const list = await auth.get(`/api/report-deadlines?teacherId=${teacher.id}`);\n    expect(list.body.length).toBe(1);\n\n    const upd = await auth.put(`/api/report-deadlines/${id}`).send({ name: 'Updated' });\n    expect(upd.status).toBe(200);\n\n    const del = await auth.delete(`/api/report-deadlines/${id}`);\n    expect(del.status).toBe(204);\n  });\n\n  it('sends reminders', async () => {\n    // Create a teacher for this test\n    const teacher = await prisma.user.create({\n      data: {\n        email: `reminder-teacher-${Date.now()}@example.com`,\n        password: 'hashed_password',\n        name: 'Reminder Teacher',\n        role: 'teacher',\n      },\n    });\n\n    await prisma.reportDeadline.create({\n      data: {\n        teacherId: teacher.id,\n        name: 'Final',\n        date: new Date(Date.now() + 86400000), // 1 day from now\n        remindDaysBefore: 1,\n      },\n    });\n\n    await sendReportDeadlineReminders();\n\n    const notes = await prisma.notification.findMany({\n      where: { type: 'ASSESSMENT_REMINDER' },\n    });\n    expect(notes.length).toBeGreaterThan(0);\n  });\n});\n"],"version":3}