d08b84f8e0344542e47ba4cd6be13ca7
import { app } from '../../src/index';
import { getTestPrismaClient } from '../jest.setup';
import { authRequest } from '../test-auth-helper';
import { sendReportDeadlineReminders } from '../../src/jobs/reportDeadlineReminder';
const auth = authRequest(app);
describe('report deadlines', () => {
    let prisma;
    beforeAll(async () => {
        await auth.setup();
    });
    beforeEach(async () => {
        prisma = getTestPrismaClient();
    });
    it('CRUD operations work', async () => {
        // Create a teacher for this test
        const teacher = await prisma.user.create({
            data: {
                email: `teacher-${Date.now()}@example.com`,
                password: 'hashed_password',
                name: 'Test Teacher',
                role: 'teacher',
            },
        });
        const create = await auth
            .post('/api/report-deadlines')
            .send({ teacherId: teacher.id, name: 'Midterm', date: '2025-02-01T00:00:00.000Z' });
        expect(create.status).toBe(201);
        const id = create.body.id;
        const list = await auth.get(`/api/report-deadlines?teacherId=${teacher.id}`);
        expect(list.body.length).toBe(1);
        const upd = await auth.put(`/api/report-deadlines/${id}`).send({ name: 'Updated' });
        expect(upd.status).toBe(200);
        const del = await auth.delete(`/api/report-deadlines/${id}`);
        expect(del.status).toBe(204);
    });
    it('sends reminders', async () => {
        // Create a teacher for this test
        const teacher = await prisma.user.create({
            data: {
                email: `reminder-teacher-${Date.now()}@example.com`,
                password: 'hashed_password',
                name: 'Reminder Teacher',
                role: 'teacher',
            },
        });
        await prisma.reportDeadline.create({
            data: {
                teacherId: teacher.id,
                name: 'Final',
                date: new Date(Date.now() + 86400000), // 1 day from now
                remindDaysBefore: 1,
            },
        });
        await sendReportDeadlineReminders();
        const notes = await prisma.notification.findMany({
            where: { type: 'ASSESSMENT_REMINDER' },
        });
        expect(notes.length).toBeGreaterThan(0);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3JlcG9ydERlYWRsaW5lLnRlc3QudHMiLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFcEYsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRTlCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxNQUE4QyxDQUFDO0lBRW5ELFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwQyxpQ0FBaUM7UUFDakMsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QyxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxFQUFFLFdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxjQUFjO2dCQUMxQyxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixJQUFJLEVBQUUsY0FBYztnQkFDcEIsSUFBSSxFQUFFLFNBQVM7YUFDaEI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUk7YUFDdEIsSUFBSSxDQUFDLHVCQUF1QixDQUFDO2FBQzdCLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLENBQUMsQ0FBQztRQUN0RixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUUxQixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUNBQW1DLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVqQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDcEYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLHlCQUF5QixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQy9CLGlDQUFpQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLElBQUksRUFBRTtnQkFDSixLQUFLLEVBQUUsb0JBQW9CLElBQUksQ0FBQyxHQUFHLEVBQUUsY0FBYztnQkFDbkQsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsSUFBSSxFQUFFLGtCQUFrQjtnQkFDeEIsSUFBSSxFQUFFLFNBQVM7YUFDaEI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO1lBQ2pDLElBQUksRUFBRTtnQkFDSixTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUU7Z0JBQ3JCLElBQUksRUFBRSxPQUFPO2dCQUNiLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsaUJBQWlCO2dCQUN4RCxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3BCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSwyQkFBMkIsRUFBRSxDQUFDO1FBRXBDLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDL0MsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFO1NBQ3ZDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL3JlcG9ydERlYWRsaW5lLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vLi4vc3JjL2luZGV4JztcbmltcG9ydCB7IGdldFRlc3RQcmlzbWFDbGllbnQgfSBmcm9tICcuLi9qZXN0LnNldHVwJztcbmltcG9ydCB7IGF1dGhSZXF1ZXN0IH0gZnJvbSAnLi4vdGVzdC1hdXRoLWhlbHBlcic7XG5pbXBvcnQgeyBzZW5kUmVwb3J0RGVhZGxpbmVSZW1pbmRlcnMgfSBmcm9tICcuLi8uLi9zcmMvam9icy9yZXBvcnREZWFkbGluZVJlbWluZGVyJztcblxuY29uc3QgYXV0aCA9IGF1dGhSZXF1ZXN0KGFwcCk7XG5cbmRlc2NyaWJlKCdyZXBvcnQgZGVhZGxpbmVzJywgKCkgPT4ge1xuICBsZXQgcHJpc21hOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRUZXN0UHJpc21hQ2xpZW50PjtcblxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGF1dGguc2V0dXAoKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgcHJpc21hID0gZ2V0VGVzdFByaXNtYUNsaWVudCgpO1xuICB9KTtcblxuICBpdCgnQ1JVRCBvcGVyYXRpb25zIHdvcmsnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGEgdGVhY2hlciBmb3IgdGhpcyB0ZXN0XG4gICAgY29uc3QgdGVhY2hlciA9IGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIGVtYWlsOiBgdGVhY2hlci0ke0RhdGUubm93KCl9QGV4YW1wbGUuY29tYCxcbiAgICAgICAgcGFzc3dvcmQ6ICdoYXNoZWRfcGFzc3dvcmQnLFxuICAgICAgICBuYW1lOiAnVGVzdCBUZWFjaGVyJyxcbiAgICAgICAgcm9sZTogJ3RlYWNoZXInLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGNyZWF0ZSA9IGF3YWl0IGF1dGhcbiAgICAgIC5wb3N0KCcvYXBpL3JlcG9ydC1kZWFkbGluZXMnKVxuICAgICAgLnNlbmQoeyB0ZWFjaGVySWQ6IHRlYWNoZXIuaWQsIG5hbWU6ICdNaWR0ZXJtJywgZGF0ZTogJzIwMjUtMDItMDFUMDA6MDA6MDAuMDAwWicgfSk7XG4gICAgZXhwZWN0KGNyZWF0ZS5zdGF0dXMpLnRvQmUoMjAxKTtcbiAgICBjb25zdCBpZCA9IGNyZWF0ZS5ib2R5LmlkO1xuXG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IGF1dGguZ2V0KGAvYXBpL3JlcG9ydC1kZWFkbGluZXM/dGVhY2hlcklkPSR7dGVhY2hlci5pZH1gKTtcbiAgICBleHBlY3QobGlzdC5ib2R5Lmxlbmd0aCkudG9CZSgxKTtcblxuICAgIGNvbnN0IHVwZCA9IGF3YWl0IGF1dGgucHV0KGAvYXBpL3JlcG9ydC1kZWFkbGluZXMvJHtpZH1gKS5zZW5kKHsgbmFtZTogJ1VwZGF0ZWQnIH0pO1xuICAgIGV4cGVjdCh1cGQuc3RhdHVzKS50b0JlKDIwMCk7XG5cbiAgICBjb25zdCBkZWwgPSBhd2FpdCBhdXRoLmRlbGV0ZShgL2FwaS9yZXBvcnQtZGVhZGxpbmVzLyR7aWR9YCk7XG4gICAgZXhwZWN0KGRlbC5zdGF0dXMpLnRvQmUoMjA0KTtcbiAgfSk7XG5cbiAgaXQoJ3NlbmRzIHJlbWluZGVycycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBDcmVhdGUgYSB0ZWFjaGVyIGZvciB0aGlzIHRlc3RcbiAgICBjb25zdCB0ZWFjaGVyID0gYXdhaXQgcHJpc21hLnVzZXIuY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgZW1haWw6IGByZW1pbmRlci10ZWFjaGVyLSR7RGF0ZS5ub3coKX1AZXhhbXBsZS5jb21gLFxuICAgICAgICBwYXNzd29yZDogJ2hhc2hlZF9wYXNzd29yZCcsXG4gICAgICAgIG5hbWU6ICdSZW1pbmRlciBUZWFjaGVyJyxcbiAgICAgICAgcm9sZTogJ3RlYWNoZXInLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGF3YWl0IHByaXNtYS5yZXBvcnREZWFkbGluZS5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICB0ZWFjaGVySWQ6IHRlYWNoZXIuaWQsXG4gICAgICAgIG5hbWU6ICdGaW5hbCcsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyA4NjQwMDAwMCksIC8vIDEgZGF5IGZyb20gbm93XG4gICAgICAgIHJlbWluZERheXNCZWZvcmU6IDEsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgYXdhaXQgc2VuZFJlcG9ydERlYWRsaW5lUmVtaW5kZXJzKCk7XG5cbiAgICBjb25zdCBub3RlcyA9IGF3YWl0IHByaXNtYS5ub3RpZmljYXRpb24uZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHsgdHlwZTogJ0FTU0VTU01FTlRfUkVNSU5ERVInIH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KG5vdGVzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9