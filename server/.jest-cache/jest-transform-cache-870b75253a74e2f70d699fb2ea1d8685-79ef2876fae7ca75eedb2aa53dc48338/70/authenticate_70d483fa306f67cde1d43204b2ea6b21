716c2d6dacf319b8708e8447ee8465ce
/**
 * Authentication Middleware
 * Extracts and validates JWT tokens from requests
 */
import jwt from 'jsonwebtoken';
import logger from '@/logger';
// Express Request type is extended in types/express.d.ts
export function authenticate(req, res, next) {
    try {
        // First try to get token from httpOnly cookie
        let token = req.cookies?.authToken;
        // Debug logging (temporary)
        if (process.env.NODE_ENV === 'development') {
            logger.debug('Auth Debug:', {
                hasCookies: !!req.cookies,
                hasAuthToken: !!req.cookies?.authToken,
                authHeader: req.headers['authorization'] ? 'present' : 'missing',
                url: req.url,
            });
        }
        // Fallback to Authorization header for backward compatibility
        if (!token) {
            const authHeader = req.headers['authorization'];
            if (authHeader && authHeader.startsWith('Bearer ')) {
                token = authHeader.split(' ')[1];
            }
        }
        if (!token) {
            res.status(401).json({ error: 'Authentication required' });
            return;
        }
        if (token.length > 1000) {
            // Prevent extremely long tokens
            res.status(401).json({ error: 'Invalid token format' });
            return;
        }
        const secret = process.env.JWT_SECRET;
        if (!secret) {
            logger.error('CRITICAL: JWT_SECRET environment variable not configured');
            res.status(500).json({ error: 'Server configuration error' });
            return;
        }
        const decoded = jwt.verify(token, secret, {
            algorithms: ['HS256'], // Explicitly specify allowed algorithms
            maxAge: '7d', // Maximum token age
        });
        if (!decoded?.userId || !decoded?.email || !decoded?.iat) {
            res.status(403).json({ error: 'Invalid token payload' });
            return;
        }
        // Check token age (extra protection)
        const now = Math.floor(Date.now() / 1000);
        const maxAge = 7 * 24 * 60 * 60; // 7 days in seconds
        if (now - decoded.iat > maxAge) {
            res.status(403).json({ error: 'Token expired' });
            return;
        }
        // Attach user information to request
        req.user = {
            id: Number(decoded.userId),
            email: decoded.email,
        };
        next();
    }
    catch (err) {
        if (err instanceof jwt.TokenExpiredError) {
            res.status(403).json({ error: 'Token expired' });
        }
        else if (err instanceof jwt.JsonWebTokenError) {
            res.status(403).json({ error: 'Invalid token' });
        }
        else {
            logger.error('JWT verification error:', err);
            res.status(403).json({ error: 'Token verification failed' });
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9taWRkbGV3YXJlL2F1dGhlbnRpY2F0ZS50cyIsIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFHSCxPQUFPLEdBQW1CLE1BQU0sY0FBYyxDQUFDO0FBQy9DLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUU5Qix5REFBeUQ7QUFFekQsTUFBTSxVQUFVLFlBQVksQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO0lBQzFFLElBQUksQ0FBQztRQUNILDhDQUE4QztRQUM5QyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQztRQUVuQyw0QkFBNEI7UUFDNUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLEVBQUUsQ0FBQztZQUMzQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtnQkFDMUIsVUFBVSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTztnQkFDekIsWUFBWSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVM7Z0JBQ3RDLFVBQVUsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQ2hFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRzthQUNiLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCw4REFBOEQ7UUFDOUQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ1gsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNoRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7Z0JBQ25ELEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25D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Q0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL21pZGRsZXdhcmUvYXV0aGVudGljYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXV0aGVudGljYXRpb24gTWlkZGxld2FyZVxuICogRXh0cmFjdHMgYW5kIHZhbGlkYXRlcyBKV1QgdG9rZW5zIGZyb20gcmVxdWVzdHNcbiAqL1xuXG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgand0LCB7IEp3dFBheWxvYWQgfSBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IGxvZ2dlciBmcm9tICdAL2xvZ2dlcic7XG5cbi8vIEV4cHJlc3MgUmVxdWVzdCB0eXBlIGlzIGV4dGVuZGVkIGluIHR5cGVzL2V4cHJlc3MuZC50c1xuXG5leHBvcnQgZnVuY3Rpb24gYXV0aGVudGljYXRlKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgLy8gRmlyc3QgdHJ5IHRvIGdldCB0b2tlbiBmcm9tIGh0dHBPbmx5IGNvb2tpZVxuICAgIGxldCB0b2tlbiA9IHJlcS5jb29raWVzPy5hdXRoVG9rZW47XG5cbiAgICAvLyBEZWJ1ZyBsb2dnaW5nICh0ZW1wb3JhcnkpXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ0F1dGggRGVidWc6Jywge1xuICAgICAgICBoYXNDb29raWVzOiAhIXJlcS5jb29raWVzLFxuICAgICAgICBoYXNBdXRoVG9rZW46ICEhcmVxLmNvb2tpZXM/LmF1dGhUb2tlbixcbiAgICAgICAgYXV0aEhlYWRlcjogcmVxLmhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXSA/ICdwcmVzZW50JyA6ICdtaXNzaW5nJyxcbiAgICAgICAgdXJsOiByZXEudXJsLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgdG8gQXV0aG9yaXphdGlvbiBoZWFkZXIgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICBjb25zdCBhdXRoSGVhZGVyID0gcmVxLmhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXTtcbiAgICAgIGlmIChhdXRoSGVhZGVyICYmIGF1dGhIZWFkZXIuc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XG4gICAgICAgIHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRva2VuLmxlbmd0aCA+IDEwMDApIHtcbiAgICAgIC8vIFByZXZlbnQgZXh0cmVtZWx5IGxvbmcgdG9rZW5zXG4gICAgICByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnSW52YWxpZCB0b2tlbiBmb3JtYXQnIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlY3JldCA9IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQ7XG4gICAgaWYgKCFzZWNyZXQpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignQ1JJVElDQUw6IEpXVF9TRUNSRVQgZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdTZXJ2ZXIgY29uZmlndXJhdGlvbiBlcnJvcicgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVjb2RlZCA9IGp3dC52ZXJpZnkodG9rZW4sIHNlY3JldCwge1xuICAgICAgYWxnb3JpdGhtczogWydIUzI1NiddLCAvLyBFeHBsaWNpdGx5IHNwZWNpZnkgYWxsb3dlZCBhbGdvcml0aG1zXG4gICAgICBtYXhBZ2U6ICc3ZCcsIC8vIE1heGltdW0gdG9rZW4gYWdlXG4gICAgfSkgYXMgSnd0UGF5bG9hZDtcblxuICAgIGlmICghZGVjb2RlZD8udXNlcklkIHx8ICFkZWNvZGVkPy5lbWFpbCB8fCAhZGVjb2RlZD8uaWF0KSB7XG4gICAgICByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnSW52YWxpZCB0b2tlbiBwYXlsb2FkJyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB0b2tlbiBhZ2UgKGV4dHJhIHByb3RlY3Rpb24pXG4gICAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgY29uc3QgbWF4QWdlID0gNyAqIDI0ICogNjAgKiA2MDsgLy8gNyBkYXlzIGluIHNlY29uZHNcbiAgICBpZiAobm93IC0gZGVjb2RlZC5pYXQgPiBtYXhBZ2UpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdUb2tlbiBleHBpcmVkJyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggdXNlciBpbmZvcm1hdGlvbiB0byByZXF1ZXN0XG4gICAgcmVxLnVzZXIgPSB7XG4gICAgICBpZDogTnVtYmVyKGRlY29kZWQudXNlcklkKSxcbiAgICAgIGVtYWlsOiBkZWNvZGVkLmVtYWlsLFxuICAgIH07XG5cbiAgICBuZXh0KCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBqd3QuVG9rZW5FeHBpcmVkRXJyb3IpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdUb2tlbiBleHBpcmVkJyB9KTtcbiAgICB9IGVsc2UgaWYgKGVyciBpbnN0YW5jZW9mIGp3dC5Kc29uV2ViVG9rZW5FcnJvcikge1xuICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgdG9rZW4nIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0pXVCB2ZXJpZmljYXRpb24gZXJyb3I6JywgZXJyKTtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdUb2tlbiB2ZXJpZmljYXRpb24gZmFpbGVkJyB9KTtcbiAgICB9XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==