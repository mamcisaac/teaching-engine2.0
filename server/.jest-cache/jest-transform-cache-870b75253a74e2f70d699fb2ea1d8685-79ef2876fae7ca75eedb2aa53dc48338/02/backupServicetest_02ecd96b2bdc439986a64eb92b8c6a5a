80777c1a5ede639d6d39fd5f445d25b4
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { createBackup, restoreBackup } from '../../src/services/backupService';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
describe('backup service', () => {
    const dbPath = path.resolve('test-backup.sqlite');
    const uploads = path.join(__dirname, '../src/uploads');
    beforeAll(async () => {
        process.env.DATABASE_URL = `file:${dbPath}`;
        await fs.writeFile(dbPath, 'data');
        await fs.mkdir(uploads, { recursive: true });
        await fs.writeFile(path.join(uploads, 'file.txt'), 'hi');
    });
    afterAll(async () => {
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
    });
    it('creates and restores backup', async () => {
        const buf = await createBackup();
        await fs.rm(dbPath, { force: true });
        await fs.rm(uploads, { recursive: true, force: true });
        await restoreBackup(buf);
        const fileExists = async (p) => !!(await fs.stat(p).catch(() => false));
        expect(await fileExists(dbPath)).toBe(true);
        expect(await fileExists(path.join(uploads, 'file.txt'))).toBe(true);
    }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2JhY2t1cFNlcnZpY2UudGVzdC50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUUvRSxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTNDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFFdkQsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLFFBQVEsTUFBTSxFQUFFLENBQUM7UUFDNUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDN0MsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzQyxNQUFNLEdBQUcsR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2RCxNQUFNLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEYsTUFBTSxDQUFDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy9pbnRlZ3JhdGlvbi9iYWNrdXBTZXJ2aWNlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBjcmVhdGVCYWNrdXAsIHJlc3RvcmVCYWNrdXAgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYmFja3VwU2VydmljZSc7XG5cbmNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBfX2Rpcm5hbWUgPSBwYXRoLmRpcm5hbWUoX19maWxlbmFtZSk7XG5cbmRlc2NyaWJlKCdiYWNrdXAgc2VydmljZScsICgpID0+IHtcbiAgY29uc3QgZGJQYXRoID0gcGF0aC5yZXNvbHZlKCd0ZXN0LWJhY2t1cC5zcWxpdGUnKTtcbiAgY29uc3QgdXBsb2FkcyA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9zcmMvdXBsb2FkcycpO1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gYGZpbGU6JHtkYlBhdGh9YDtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoZGJQYXRoLCAnZGF0YScpO1xuICAgIGF3YWl0IGZzLm1rZGlyKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLmpvaW4odXBsb2FkcywgJ2ZpbGUudHh0JyksICdoaScpO1xuICB9KTtcblxuICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZnMucm0oZGJQYXRoLCB7IGZvcmNlOiB0cnVlIH0pO1xuICAgIGF3YWl0IGZzLnJtKHVwbG9hZHMsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcbiAgfSk7XG5cbiAgaXQoJ2NyZWF0ZXMgYW5kIHJlc3RvcmVzIGJhY2t1cCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBidWYgPSBhd2FpdCBjcmVhdGVCYWNrdXAoKTtcbiAgICBhd2FpdCBmcy5ybShkYlBhdGgsIHsgZm9yY2U6IHRydWUgfSk7XG4gICAgYXdhaXQgZnMucm0odXBsb2FkcywgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xuICAgIGF3YWl0IHJlc3RvcmVCYWNrdXAoYnVmKTtcbiAgICBjb25zdCBmaWxlRXhpc3RzID0gYXN5bmMgKHA6IHN0cmluZykgPT4gISEoYXdhaXQgZnMuc3RhdChwKS5jYXRjaCgoKSA9PiBmYWxzZSkpO1xuICAgIGV4cGVjdChhd2FpdCBmaWxlRXhpc3RzKGRiUGF0aCkpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGF3YWl0IGZpbGVFeGlzdHMocGF0aC5qb2luKHVwbG9hZHMsICdmaWxlLnR4dCcpKSkudG9CZSh0cnVlKTtcbiAgfSwgMTAwMDApO1xufSk7XG4iXSwidmVyc2lvbiI6M30=