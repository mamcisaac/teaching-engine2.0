b1c179e273498bfcbdd999e525c05503
"use strict";
/**
 * Global database setup for integration tests
 * Runs once before all integration tests
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalSetup;
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
async function globalSetup() {
    // Set test database URL
    process.env.DATABASE_URL = 'file:./test-integration.db';
    process.env.NODE_ENV = 'test';
    // Ensure the database directory exists
    const dbPath = path_1.default.join(process.cwd(), 'test-integration.db');
    const dbDir = path_1.default.dirname(dbPath);
    if (!fs_1.default.existsSync(dbDir)) {
        fs_1.default.mkdirSync(dbDir, { recursive: true });
    }
    // Remove existing test database
    if (fs_1.default.existsSync(dbPath)) {
        fs_1.default.unlinkSync(dbPath);
    }
    if (fs_1.default.existsSync(`${dbPath}-journal`)) {
        fs_1.default.unlinkSync(`${dbPath}-journal`);
    }
    try {
        // Generate Prisma client if needed
        (0, child_process_1.execSync)('pnpm db:generate', { stdio: 'pipe' });
        // Apply migrations
        (0, child_process_1.execSync)('pnpm --filter @teaching-engine/database db:push --skip-seed', { stdio: 'pipe' });
        console.log('✅ Test database setup complete');
    }
    catch (error) {
        console.error('❌ Failed to setup test database:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL3NldHVwL2dsb2JhbC1kYi1zZXR1cC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7OztBQU1ILDhCQWdDQztBQXBDRCxpREFBeUM7QUFDekMsZ0RBQXdCO0FBQ3hCLDRDQUFvQjtBQUVMLEtBQUssVUFBVSxXQUFXO0lBQ3ZDLHdCQUF3QjtJQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyw0QkFBNEIsQ0FBQztJQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFFOUIsdUNBQXVDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFDL0QsTUFBTSxLQUFLLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzFCLFlBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGdDQUFnQztJQUNoQyxJQUFJLFlBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUMxQixZQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFJLFlBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDdkMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sVUFBVSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILG1DQUFtQztRQUNuQyxJQUFBLHdCQUFRLEVBQUMsa0JBQWtCLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUVoRCxtQkFBbUI7UUFDbkIsSUFBQSx3QkFBUSxFQUFDLDZEQUE2RCxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFM0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RCxNQUFNLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci90ZXN0cy9zZXR1cC9nbG9iYWwtZGItc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHbG9iYWwgZGF0YWJhc2Ugc2V0dXAgZm9yIGludGVncmF0aW9uIHRlc3RzXG4gKiBSdW5zIG9uY2UgYmVmb3JlIGFsbCBpbnRlZ3JhdGlvbiB0ZXN0c1xuICovXG5cbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGdsb2JhbFNldHVwKCkge1xuICAvLyBTZXQgdGVzdCBkYXRhYmFzZSBVUkxcbiAgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gJ2ZpbGU6Li90ZXN0LWludGVncmF0aW9uLmRiJztcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG4gIFxuICAvLyBFbnN1cmUgdGhlIGRhdGFiYXNlIGRpcmVjdG9yeSBleGlzdHNcbiAgY29uc3QgZGJQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd0ZXN0LWludGVncmF0aW9uLmRiJyk7XG4gIGNvbnN0IGRiRGlyID0gcGF0aC5kaXJuYW1lKGRiUGF0aCk7XG4gIGlmICghZnMuZXhpc3RzU3luYyhkYkRpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoZGJEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9XG4gIFxuICAvLyBSZW1vdmUgZXhpc3RpbmcgdGVzdCBkYXRhYmFzZVxuICBpZiAoZnMuZXhpc3RzU3luYyhkYlBhdGgpKSB7XG4gICAgZnMudW5saW5rU3luYyhkYlBhdGgpO1xuICB9XG4gIGlmIChmcy5leGlzdHNTeW5jKGAke2RiUGF0aH0tam91cm5hbGApKSB7XG4gICAgZnMudW5saW5rU3luYyhgJHtkYlBhdGh9LWpvdXJuYWxgKTtcbiAgfVxuICBcbiAgdHJ5IHtcbiAgICAvLyBHZW5lcmF0ZSBQcmlzbWEgY2xpZW50IGlmIG5lZWRlZFxuICAgIGV4ZWNTeW5jKCdwbnBtIGRiOmdlbmVyYXRlJywgeyBzdGRpbzogJ3BpcGUnIH0pO1xuICAgIFxuICAgIC8vIEFwcGx5IG1pZ3JhdGlvbnNcbiAgICBleGVjU3luYygncG5wbSAtLWZpbHRlciBAdGVhY2hpbmctZW5naW5lL2RhdGFiYXNlIGRiOnB1c2ggLS1za2lwLXNlZWQnLCB7IHN0ZGlvOiAncGlwZScgfSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+KchSBUZXN0IGRhdGFiYXNlIHNldHVwIGNvbXBsZXRlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzZXR1cCB0ZXN0IGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==