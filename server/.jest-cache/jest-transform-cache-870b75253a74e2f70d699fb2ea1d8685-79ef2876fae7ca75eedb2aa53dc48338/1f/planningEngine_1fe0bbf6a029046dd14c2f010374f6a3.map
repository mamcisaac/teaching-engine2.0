{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/planningEngine.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/planningEngine.ts"],"sourcesContent":["import type { CalendarEvent, UnavailableBlock } from '@teaching-engine/database';\n\nexport interface ScheduleItem {\n  day: number;\n  slotId: number;\n  activityId: number | null;\n}\n\nexport interface DailyBlock {\n  day: number;\n  slotId: number;\n  startMin: number;\n  endMin: number;\n  subjectId?: number | null;\n}\n\nexport interface GenerateScheduleOptions {\n  availableBlocks: DailyBlock[];\n  milestonePriorities: Map<number, number>;\n  pacingStrategy: 'strict' | 'relaxed';\n  preserveBuffer: boolean;\n}\n\nexport function filterAvailableBlocksByCalendar(\n  slots: Array<{\n    id: number;\n    day: number;\n    startMin: number;\n    endMin: number;\n    subjectId: number | null;\n  }>,\n  events: CalendarEvent[],\n  unavailable: UnavailableBlock[] = [],\n  holidays: CalendarEvent[] = [], // Now using CalendarEvent with type 'HOLIDAY'\n): DailyBlock[] {\n  return slots\n    .filter((s) => s.subjectId)\n    .filter((slot) => {\n      // Filter out holidays (CalendarEvents with type 'HOLIDAY' and allDay true)\n      const holidayEvents = holidays.filter(h => h.eventType === 'HOLIDAY' && h.allDay);\n      return !holidayEvents.some((h) => (new Date(h.start).getUTCDay() + 6) % 7 === slot.day);\n    })\n    .filter((slot) => {\n      const dayEvents = events.filter((e) => (new Date(e.start).getUTCDay() + 6) % 7 === slot.day);\n      return dayEvents.every((ev) => {\n        const start = ev.allDay\n          ? 0\n          : new Date(ev.start).getUTCHours() * 60 + new Date(ev.start).getUTCMinutes();\n        const end = ev.allDay\n          ? 1440\n          : new Date(ev.end).getUTCHours() * 60 + new Date(ev.end).getUTCMinutes();\n        return end <= slot.startMin || start >= slot.endMin;\n      });\n    })\n    .filter((slot) => {\n      const dayBlocks = unavailable.filter(\n        (b) => (new Date(b.date).getUTCDay() + 6) % 7 === slot.day,\n      );\n      return dayBlocks.every((b) => b.endMin <= slot.startMin || b.startMin >= slot.endMin);\n    })\n    .map((s) => ({\n      day: s.day,\n      slotId: s.id,\n      startMin: s.startMin,\n      endMin: s.endMin,\n      subjectId: s.subjectId,\n    }));\n}\n\nexport function scheduleBufferBlockPerDay(\n  schedule: ScheduleItem[],\n  blocks: DailyBlock[],\n  preserve: boolean,\n): ScheduleItem[] {\n  if (!preserve) return schedule;\n  const byDay = new Map<number, DailyBlock[]>();\n  for (const b of blocks) {\n    if (!byDay.has(b.day)) byDay.set(b.day, []);\n    byDay.get(b.day)!.push(b);\n  }\n\n  const result = [...schedule];\n  for (const [day, dayBlocks] of byDay.entries()) {\n    const used = new Set(result.filter((s) => s.day === day).map((s) => s.slotId));\n    const free = dayBlocks.find((b) => !used.has(b.slotId));\n    if (free) {\n      result.push({ day, slotId: free.slotId, activityId: null });\n    } else {\n      const idx = result\n        .map((s, i) => [s, i] as const)\n        .filter(([s]) => s.day === day)\n        .pop();\n      if (idx) {\n        const [removed, index] = idx;\n        result.splice(index, 1);\n        result.push({ day, slotId: removed.slotId, activityId: null });\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * TODO: Reimplement using ETFO lesson plans\n * Generate a weekly schedule using ETFO lesson plans and unit plans\n * @param opts Schedule generation options\n * @returns Array of scheduled items mapped to ETFO lesson plans\n */\nexport async function generateWeeklySchedule(\n  _opts: GenerateScheduleOptions,\n): Promise<ScheduleItem[]> {\n  // TODO: Implement scheduling logic using:\n  // - ETFOLessonPlan model for individual lessons\n  // - UnitPlan model for unit-level scheduling\n  // - DayPlan model for daily organization\n  console.warn('generateWeeklySchedule pending reimplementation with ETFO planning models');\n  return [];\n}\n\n/**\n * TODO: Reimplement using ETFO lesson plans and Activity Discovery\n * Generate activity suggestions based on curriculum alignment\n * @param options Filter options for suggestions\n * @returns Array of suggested activities from Activity Discovery service\n */\nexport async function generateSuggestions(\n  _options: { filters?: Record<string, boolean> } = {},\n): Promise<Array<unknown>> {\n  // TODO: Implement suggestion logic using:\n  // - Activity Discovery service for external activities\n  // - ExternalActivity model for activity suggestions\n  // - CurriculumExpectation model for alignment\n  console.warn('generateSuggestions pending reimplementation with Activity Discovery service');\n  return [];\n}\n"],"version":3}