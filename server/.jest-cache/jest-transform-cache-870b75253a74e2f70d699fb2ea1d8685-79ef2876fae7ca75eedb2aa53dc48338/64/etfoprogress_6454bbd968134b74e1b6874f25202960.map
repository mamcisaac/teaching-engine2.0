{"version":3,"names":["cov_15rbv938jl","actualCoverage","Router","prisma","router","s","get","req","res","f","user","id","b","status","json","error","userId","totalExpectations","curriculumExpectation","count","where","import","importedExpectations","totalLongRangePlans","longRangePlan","completedLongRangePlans","goals","not","totalUnitPlans","unitPlan","completedUnitPlans","bigIdeas","totalLessonPlans","eTFOLessonPlan","completedLessonPlans","learningGoals","totalDaybookEntries","daybookEntry","completedDaybookEntries","whatWorked","progressData","curriculumExpectations","total","Math","max","imported","covered","longRangePlans","completed","unitPlans","lessonPlans","daybookEntries","console"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/etfo-progress.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { prisma } from '../prisma';\n\nconst router = Router();\n\n/**\n * GET /api/etfo/progress\n * Get ETFO planning progress across all 5 levels\n */\nrouter.get('/progress', async (req: Request, res) => {\n  try {\n    if (!req.user?.id) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const userId = req.user.id;\n\n    // Get curriculum expectations progress\n    const totalExpectations = await prisma.curriculumExpectation.count({\n      where: {\n        import: { userId },\n      },\n    });\n\n    const importedExpectations = totalExpectations; // All expectations are imported by definition\n\n    // Get long-range plans progress\n    const totalLongRangePlans = await prisma.longRangePlan.count({\n      where: { userId },\n    });\n\n    const completedLongRangePlans = await prisma.longRangePlan.count({\n      where: {\n        userId,\n        // Consider completed if they have goals\n        goals: { not: null },\n      },\n    });\n\n    // Get unit plans progress\n    const totalUnitPlans = await prisma.unitPlan.count({\n      where: { userId },\n    });\n\n    const completedUnitPlans = await prisma.unitPlan.count({\n      where: {\n        userId,\n        // Consider completed if they have big ideas\n        bigIdeas: { not: null },\n      },\n    });\n\n    // Get lesson plans progress\n    const totalLessonPlans = await prisma.eTFOLessonPlan.count({\n      where: { userId },\n    });\n\n    const completedLessonPlans = await prisma.eTFOLessonPlan.count({\n      where: {\n        userId,\n        // Consider completed if they have learning goals\n        learningGoals: { not: null },\n      },\n    });\n\n    // Get daybook entries progress\n    const totalDaybookEntries = await prisma.daybookEntry.count({\n      where: { userId },\n    });\n\n    const completedDaybookEntries = await prisma.daybookEntry.count({\n      where: {\n        userId,\n        // Consider completed if they have reflections\n        whatWorked: { not: null },\n      },\n    });\n\n    const progressData = {\n      curriculumExpectations: {\n        total: Math.max(totalExpectations, 1), // Ensure at least 1 to avoid division by zero\n        imported: importedExpectations,\n        covered: importedExpectations, // For now, imported = covered\n      },\n      longRangePlans: {\n        total: totalLongRangePlans,\n        completed: completedLongRangePlans,\n      },\n      unitPlans: {\n        total: totalUnitPlans,\n        completed: completedUnitPlans,\n      },\n      lessonPlans: {\n        total: totalLessonPlans,\n        completed: completedLessonPlans,\n      },\n      daybookEntries: {\n        total: totalDaybookEntries,\n        completed: completedDaybookEntries,\n      },\n    };\n\n    res.json(progressData);\n  } catch (error) {\n    console.error('Error fetching ETFO progress:', error);\n    res.status(500).json({ error: 'Failed to fetch ETFO progress' });\n  }\n});\n\nexport default router;\n"],"mappings":"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","ignoreList":[]}