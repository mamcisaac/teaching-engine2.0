bfceea778c3829fd9d301c13a3450fce
// Import from the database package
import { PrismaClient } from '@teaching-engine/database';
// Re-export everything from database package (including Prisma namespace)
export * from '@teaching-engine/database';
// Create singleton instance for server usage
const globalForPrisma = globalThis;
// In test environment, use the test client if available
const isTestEnvironment = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID;
// Create a getter that always returns the current test client
const getPrisma = () => {
    if (isTestEnvironment && globalForPrisma.testPrismaClient) {
        return globalForPrisma.testPrismaClient;
    }
    return (globalForPrisma.prisma ??
        new PrismaClient({
            log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
        }));
};
// Create a proxy to always use the current client
export const prisma = new Proxy({}, {
    get(target, prop) {
        const client = getPrisma();
        return client[prop];
    },
    has(target, prop) {
        const client = getPrisma();
        return prop in client;
    },
});
if (process.env.NODE_ENV !== 'production' && !isTestEnvironment) {
    globalForPrisma.prisma = getPrisma();
}
// Re-export PrismaClient
export { PrismaClient };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9wcmlzbWEudHMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ25DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RCwwRUFBMEU7QUFDMUUsY0FBYywyQkFBMkIsQ0FBQztBQUUxQyw2Q0FBNkM7QUFDN0MsTUFBTSxlQUFlLEdBQUcsVUFHdkIsQ0FBQztBQUVGLHdEQUF3RDtBQUN4RCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztBQUV4Riw4REFBOEQ7QUFDOUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFO0lBQ3JCLElBQUksaUJBQWlCLElBQUksZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUQsT0FBTyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7SUFDMUMsQ0FBQztJQUNELE9BQU8sQ0FDTCxlQUFlLENBQUMsTUFBTTtRQUN0QixJQUFJLFlBQVksQ0FBQztZQUNmLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDckYsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrREFBa0Q7QUFDbEQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQXVDLEVBQUU7SUFDdkUsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJO1FBQ2QsTUFBTSxNQUFNLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDM0IsT0FBTyxNQUFNLENBQUMsSUFBK0MsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFDRCxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUk7UUFDZCxNQUFNLE1BQU0sR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUMzQixPQUFPLElBQUksSUFBSSxNQUFNLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNoRSxlQUFlLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQ3ZDLENBQUM7QUFFRCx5QkFBeUI7QUFDekIsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvcHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydCBmcm9tIHRoZSBkYXRhYmFzZSBwYWNrYWdlXG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAdGVhY2hpbmctZW5naW5lL2RhdGFiYXNlJztcblxuLy8gUmUtZXhwb3J0IGV2ZXJ5dGhpbmcgZnJvbSBkYXRhYmFzZSBwYWNrYWdlIChpbmNsdWRpbmcgUHJpc21hIG5hbWVzcGFjZSlcbmV4cG9ydCAqIGZyb20gJ0B0ZWFjaGluZy1lbmdpbmUvZGF0YWJhc2UnO1xuXG4vLyBDcmVhdGUgc2luZ2xldG9uIGluc3RhbmNlIGZvciBzZXJ2ZXIgdXNhZ2VcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogSW5zdGFuY2VUeXBlPHR5cGVvZiBQcmlzbWFDbGllbnQ+IHwgdW5kZWZpbmVkO1xuICB0ZXN0UHJpc21hQ2xpZW50OiBJbnN0YW5jZVR5cGU8dHlwZW9mIFByaXNtYUNsaWVudD4gfCB1bmRlZmluZWQ7XG59O1xuXG4vLyBJbiB0ZXN0IGVudmlyb25tZW50LCB1c2UgdGhlIHRlc3QgY2xpZW50IGlmIGF2YWlsYWJsZVxuY29uc3QgaXNUZXN0RW52aXJvbm1lbnQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnIHx8IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEO1xuXG4vLyBDcmVhdGUgYSBnZXR0ZXIgdGhhdCBhbHdheXMgcmV0dXJucyB0aGUgY3VycmVudCB0ZXN0IGNsaWVudFxuY29uc3QgZ2V0UHJpc21hID0gKCkgPT4ge1xuICBpZiAoaXNUZXN0RW52aXJvbm1lbnQgJiYgZ2xvYmFsRm9yUHJpc21hLnRlc3RQcmlzbWFDbGllbnQpIHtcbiAgICByZXR1cm4gZ2xvYmFsRm9yUHJpc21hLnRlc3RQcmlzbWFDbGllbnQ7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/XG4gICAgbmV3IFByaXNtYUNsaWVudCh7XG4gICAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gWydxdWVyeScsICdlcnJvcicsICd3YXJuJ10gOiBbJ2Vycm9yJ10sXG4gICAgfSlcbiAgKTtcbn07XG5cbi8vIENyZWF0ZSBhIHByb3h5IHRvIGFsd2F5cyB1c2UgdGhlIGN1cnJlbnQgY2xpZW50XG5leHBvcnQgY29uc3QgcHJpc21hID0gbmV3IFByb3h5KHt9IGFzIEluc3RhbmNlVHlwZTx0eXBlb2YgUHJpc21hQ2xpZW50Piwge1xuICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UHJpc21hKCk7XG4gICAgcmV0dXJuIGNsaWVudFtwcm9wIGFzIGtleW9mIEluc3RhbmNlVHlwZTx0eXBlb2YgUHJpc21hQ2xpZW50Pl07XG4gIH0sXG4gIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRQcmlzbWEoKTtcbiAgICByZXR1cm4gcHJvcCBpbiBjbGllbnQ7XG4gIH0sXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVGVzdEVudmlyb25tZW50KSB7XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBnZXRQcmlzbWEoKTtcbn1cblxuLy8gUmUtZXhwb3J0IFByaXNtYUNsaWVudFxuZXhwb3J0IHsgUHJpc21hQ2xpZW50IH07XG4iXSwidmVyc2lvbiI6M30=