{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/mocks/database.mock.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/mocks/database.mock.ts"],"sourcesContent":["/**\n * Optimized Database Mock\n * Provides a complete mock implementation of PrismaClient\n */\n\nimport { jest } from '@jest/globals';\n\n// Helper to create a mock model with all CRUD operations\nconst createMockModel = (modelName: string, options: { useStringIds?: boolean } = {}) => {\n  const mockData = new Map<string, any>();\n  let idCounter = 1;\n  \n  // Models that use CUID format\n  const cuidModels = ['curriculumImport', 'eTFOLessonPlan', 'longRangePlan', 'unitPlan', 'daybookEntry', 'curriculumExpectation'];\n  const shouldUseStringIds = options.useStringIds || cuidModels.includes(modelName);\n\n  const generateId = () => {\n    if (shouldUseStringIds) {\n      // Generate a CUID-like string\n      return `c${Math.random().toString(36).substr(2, 24)}`;\n    }\n    return idCounter++;\n  };\n\n  return {\n    findUnique: jest.fn(({ where }) => {\n      const key = Object.values(where)[0];\n      return Promise.resolve(mockData.get(String(key)) || null);\n    }),\n    \n    findMany: jest.fn(() => {\n      return Promise.resolve(Array.from(mockData.values()));\n    }),\n    \n    findFirst: jest.fn(() => {\n      const values = Array.from(mockData.values());\n      return Promise.resolve(values[0] || null);\n    }),\n    \n    create: jest.fn(({ data }) => {\n      const id = data.id || generateId();\n      const record = { id, ...data, createdAt: new Date(), updatedAt: new Date() };\n      mockData.set(String(id), record);\n      return Promise.resolve(record);\n    }),\n    \n    createMany: jest.fn(({ data }) => {\n      const created = data.map((item: any) => {\n        const id = item.id || generateId();\n        const record = { id, ...item, createdAt: new Date(), updatedAt: new Date() };\n        mockData.set(String(id), record);\n        return record;\n      });\n      return Promise.resolve({ count: created.length });\n    }),\n    \n    update: jest.fn(({ where, data }) => {\n      const key = String(Object.values(where)[0]);\n      const existing = mockData.get(key);\n      if (!existing) throw new Error('Record not found');\n      const updated = { ...existing, ...data, updatedAt: new Date() };\n      mockData.set(key, updated);\n      return Promise.resolve(updated);\n    }),\n    \n    updateMany: jest.fn(() => {\n      return Promise.resolve({ count: mockData.size });\n    }),\n    \n    delete: jest.fn(({ where }) => {\n      const key = String(Object.values(where)[0]);\n      const record = mockData.get(key);\n      if (!record) throw new Error('Record not found');\n      mockData.delete(key);\n      return Promise.resolve(record);\n    }),\n    \n    deleteMany: jest.fn(() => {\n      const count = mockData.size;\n      mockData.clear();\n      return Promise.resolve({ count });\n    }),\n    \n    count: jest.fn(() => Promise.resolve(mockData.size)),\n    aggregate: jest.fn(() => Promise.resolve({})),\n    groupBy: jest.fn(() => Promise.resolve([])),\n    \n    // Test helper to access mock data\n    _getMockData: () => mockData,\n    _reset: () => mockData.clear(),\n  };\n};\n\n// Create mock Prisma client\nexport class PrismaClient {\n  // Connection methods\n  $connect = jest.fn().mockResolvedValue(undefined);\n  $disconnect = jest.fn().mockResolvedValue(undefined);\n  \n  // Transaction support\n  $transaction = jest.fn().mockImplementation((fn) => {\n    if (typeof fn === 'function') {\n      return fn(this);\n    }\n    return Promise.all(fn);\n  });\n  \n  // Raw query methods (optimized)\n  $queryRaw = jest.fn().mockResolvedValue([]);\n  $queryRawUnsafe = jest.fn().mockResolvedValue([]);\n  $executeRaw = jest.fn().mockResolvedValue(0);\n  $executeRawUnsafe = jest.fn().mockResolvedValue(0);\n  \n  // All models\n  user = createMockModel('user');\n  outcome = createMockModel('outcome');\n  outcomeEmbedding = createMockModel('outcomeEmbedding');\n  curriculumExpectation = createMockModel('curriculumExpectation');\n  curriculumExpectationEmbedding = createMockModel('curriculumExpectationEmbedding');\n  curriculumImport = createMockModel('curriculumImport');\n  outcomeCluster = createMockModel('outcomeCluster');\n  subject = createMockModel('subject');\n  milestone = createMockModel('milestone');\n  activity = createMockModel('activity');\n  activityOutcome = createMockModel('activityOutcome');\n  lessonPlan = createMockModel('lessonPlan');\n  lessonPlanActivity = createMockModel('lessonPlanActivity');\n  aISuggestedActivity = createMockModel('aISuggestedActivity');\n  note = createMockModel('note');\n  evidence = createMockModel('evidence');\n  milestone_alert = createMockModel('milestone_alert');\n  notification = createMockModel('notification');\n  studentGoal = createMockModel('studentGoal');\n  goalReflection = createMockModel('goalReflection');\n  assessmentResult = createMockModel('assessmentResult');\n  assessmentTemplate = createMockModel('assessmentTemplate');\n  calendarEvent = createMockModel('calendarEvent');\n  student = createMockModel('student');\n  classRoutine = createMockModel('classRoutine');\n  teacherPreferences = createMockModel('teacherPreferences');\n  dailyPlan = createMockModel('dailyPlan');\n  dailyPlanItem = createMockModel('dailyPlanItem');\n  resource = createMockModel('resource');\n  longRangePlan = createMockModel('longRangePlan');\n  unitPlan = createMockModel('unitPlan');\n  eTFOLessonPlan = createMockModel('eTFOLessonPlan');\n  daybookEntry = createMockModel('daybookEntry');\n\n  // Test helper to reset all mock data\n  _resetAllMocks = () => {\n    Object.values(this).forEach((value) => {\n      if (value && typeof value === 'object' && '_reset' in value) {\n        value._reset();\n      }\n    });\n  };\n}\n\n// Create singleton instance\nexport const prisma = new PrismaClient();\n\n// Export enums and types\nexport const ImportStatus = {\n  UPLOADING: 'UPLOADING',\n  PROCESSING: 'PROCESSING',\n  READY_FOR_REVIEW: 'READY_FOR_REVIEW',\n  CONFIRMED: 'CONFIRMED',\n  COMPLETED: 'COMPLETED',\n  FAILED: 'FAILED',\n  CANCELLED: 'CANCELLED',\n};\n\nexport const Prisma = {\n  PrismaClientKnownRequestError: class PrismaClientKnownRequestError extends Error {\n    code: string;\n    constructor(message: string, code: string) {\n      super(message);\n      this.code = code;\n    }\n  },\n  PrismaClientValidationError: class PrismaClientValidationError extends Error {},\n};"],"version":3}