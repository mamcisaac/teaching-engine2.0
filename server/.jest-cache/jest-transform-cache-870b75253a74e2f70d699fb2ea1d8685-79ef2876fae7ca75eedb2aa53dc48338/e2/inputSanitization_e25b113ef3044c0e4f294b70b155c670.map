{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/inputSanitization.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/middleware/inputSanitization.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { ParsedQs } from 'qs';\nimport { ParamsDictionary } from 'express-serve-static-core';\nimport DOMPurify from 'isomorphic-dompurify';\n\n/**\n * Input sanitization middleware to prevent XSS and injection attacks\n */\nexport function sanitizeInput(req: Request, res: Response, next: NextFunction) {\n  try {\n    // Sanitize request body\n    if (req.body && typeof req.body === 'object') {\n      req.body = sanitizeObject(req.body);\n    }\n\n    // Sanitize query parameters\n    if (req.query && typeof req.query === 'object') {\n      req.query = sanitizeObject(req.query) as ParsedQs;\n    }\n\n    // Sanitize params\n    if (req.params && typeof req.params === 'object') {\n      req.params = sanitizeObject(req.params) as ParamsDictionary;\n    }\n\n    next();\n  } catch (error) {\n    console.error('Input sanitization error:', error);\n    res.status(400).json({ error: 'Invalid input data' });\n  }\n}\n\n/**\n * Recursively sanitize an object's string values\n */\nfunction sanitizeObject(obj: unknown): unknown {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (typeof obj === 'string') {\n    return sanitizeString(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeObject(item));\n  }\n\n  if (typeof obj === 'object') {\n    const sanitized: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      // Sanitize the key as well\n      const sanitizedKey = sanitizeString(key);\n      sanitized[sanitizedKey] = sanitizeObject(value);\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\n/**\n * Sanitize a string value\n */\nfunction sanitizeString(str: string): string {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  // Remove potential XSS vectors\n  let sanitized = str;\n\n  // Remove script tags and event handlers\n  sanitized = DOMPurify.sanitize(sanitized, {\n    ALLOWED_TAGS: [],\n    ALLOWED_ATTR: [],\n    KEEP_CONTENT: true\n  });\n\n  // Remove null bytes and control characters\n  sanitized = sanitized.replace(/\\0/g, '');\n  // eslint-disable-next-line no-control-regex\n  sanitized = sanitized.replace(/[\\x00-\\x1F\\x7F]/g, '');\n\n  // Limit string length to prevent DoS\n  if (sanitized.length > 10000) {\n    sanitized = sanitized.substring(0, 10000);\n  }\n\n  return sanitized;\n}\n\n/**\n * Strict HTML sanitization for rich text content\n */\nexport function sanitizeHtml(dirty: string): string {\n  if (!dirty || typeof dirty !== 'string') {\n    return '';\n  }\n\n  return DOMPurify.sanitize(dirty, {\n    ALLOWED_TAGS: [\n      'p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li',\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote'\n    ],\n    ALLOWED_ATTR: ['class'],\n    FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input', 'iframe'],\n    FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'onfocus', 'onblur'],\n    ALLOW_DATA_ATTR: false,\n    SANITIZE_DOM: true,\n    KEEP_CONTENT: true\n  });\n}\n\n/**\n * Validate and sanitize email addresses\n */\nexport function sanitizeEmail(email: string): string {\n  if (!email || typeof email !== 'string') {\n    return '';\n  }\n\n  // Basic email sanitization\n  let sanitized = email.trim().toLowerCase();\n  \n  // Remove dangerous characters\n  sanitized = sanitized.replace(/[<>'\"]/g, '');\n  \n  // Limit length\n  if (sanitized.length > 255) {\n    sanitized = sanitized.substring(0, 255);\n  }\n\n  return sanitized;\n}\n\n/**\n * Validate and sanitize URLs\n */\nexport function sanitizeUrl(url: string): string {\n  if (!url || typeof url !== 'string') {\n    return '';\n  }\n\n  let sanitized = url.trim();\n\n  // Only allow http/https protocols\n  if (!sanitized.match(/^https?:\\/\\//)) {\n    return '';\n  }\n\n  // Remove dangerous characters\n  sanitized = sanitized.replace(/[<>'\"]/g, '');\n\n  // Limit length\n  if (sanitized.length > 2000) {\n    return '';\n  }\n\n  return sanitized;\n}\n\n/**\n * SQL injection prevention for dynamic queries\n */\nexport function escapeSqlIdentifier(identifier: string): string {\n  if (!identifier || typeof identifier !== 'string') {\n    throw new Error('Invalid SQL identifier');\n  }\n\n  // Allow only alphanumeric and underscore\n  if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(identifier)) {\n    throw new Error('Invalid SQL identifier format');\n  }\n\n  return identifier;\n}\n\nexport default {\n  sanitizeInput,\n  sanitizeHtml,\n  sanitizeEmail,\n  sanitizeUrl,\n  escapeSqlIdentifier\n};"],"version":3}