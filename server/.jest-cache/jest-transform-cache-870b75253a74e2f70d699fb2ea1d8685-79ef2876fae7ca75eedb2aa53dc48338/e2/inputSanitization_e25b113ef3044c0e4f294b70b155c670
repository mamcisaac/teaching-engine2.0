31cde3f100d7119cfa49535ed29a2216
import DOMPurify from 'isomorphic-dompurify';
/**
 * Input sanitization middleware to prevent XSS and injection attacks
 */
export function sanitizeInput(req, res, next) {
    try {
        // Sanitize request body
        if (req.body && typeof req.body === 'object') {
            req.body = sanitizeObject(req.body);
        }
        // Sanitize query parameters
        if (req.query && typeof req.query === 'object') {
            req.query = sanitizeObject(req.query);
        }
        // Sanitize params
        if (req.params && typeof req.params === 'object') {
            req.params = sanitizeObject(req.params);
        }
        next();
    }
    catch (error) {
        console.error('Input sanitization error:', error);
        res.status(400).json({ error: 'Invalid input data' });
    }
}
/**
 * Recursively sanitize an object's string values
 */
function sanitizeObject(obj) {
    if (obj === null || obj === undefined) {
        return obj;
    }
    if (typeof obj === 'string') {
        return sanitizeString(obj);
    }
    if (Array.isArray(obj)) {
        return obj.map(item => sanitizeObject(item));
    }
    if (typeof obj === 'object') {
        const sanitized = {};
        for (const [key, value] of Object.entries(obj)) {
            // Sanitize the key as well
            const sanitizedKey = sanitizeString(key);
            sanitized[sanitizedKey] = sanitizeObject(value);
        }
        return sanitized;
    }
    return obj;
}
/**
 * Sanitize a string value
 */
function sanitizeString(str) {
    if (typeof str !== 'string') {
        return str;
    }
    // Remove potential XSS vectors
    let sanitized = str;
    // Remove script tags and event handlers
    sanitized = DOMPurify.sanitize(sanitized, {
        ALLOWED_TAGS: [],
        ALLOWED_ATTR: [],
        KEEP_CONTENT: true
    });
    // Remove null bytes and control characters
    sanitized = sanitized.replace(/\0/g, '');
    // eslint-disable-next-line no-control-regex
    sanitized = sanitized.replace(/[\x00-\x1F\x7F]/g, '');
    // Limit string length to prevent DoS
    if (sanitized.length > 10000) {
        sanitized = sanitized.substring(0, 10000);
    }
    return sanitized;
}
/**
 * Strict HTML sanitization for rich text content
 */
export function sanitizeHtml(dirty) {
    if (!dirty || typeof dirty !== 'string') {
        return '';
    }
    return DOMPurify.sanitize(dirty, {
        ALLOWED_TAGS: [
            'p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li',
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote'
        ],
        ALLOWED_ATTR: ['class'],
        FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input', 'iframe'],
        FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'onfocus', 'onblur'],
        ALLOW_DATA_ATTR: false,
        SANITIZE_DOM: true,
        KEEP_CONTENT: true
    });
}
/**
 * Validate and sanitize email addresses
 */
export function sanitizeEmail(email) {
    if (!email || typeof email !== 'string') {
        return '';
    }
    // Basic email sanitization
    let sanitized = email.trim().toLowerCase();
    // Remove dangerous characters
    sanitized = sanitized.replace(/[<>'"]/g, '');
    // Limit length
    if (sanitized.length > 255) {
        sanitized = sanitized.substring(0, 255);
    }
    return sanitized;
}
/**
 * Validate and sanitize URLs
 */
export function sanitizeUrl(url) {
    if (!url || typeof url !== 'string') {
        return '';
    }
    let sanitized = url.trim();
    // Only allow http/https protocols
    if (!sanitized.match(/^https?:\/\//)) {
        return '';
    }
    // Remove dangerous characters
    sanitized = sanitized.replace(/[<>'"]/g, '');
    // Limit length
    if (sanitized.length > 2000) {
        return '';
    }
    return sanitized;
}
/**
 * SQL injection prevention for dynamic queries
 */
export function escapeSqlIdentifier(identifier) {
    if (!identifier || typeof identifier !== 'string') {
        throw new Error('Invalid SQL identifier');
    }
    // Allow only alphanumeric and underscore
    if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(identifier)) {
        throw new Error('Invalid SQL identifier format');
    }
    return identifier;
}
export default {
    sanitizeInput,
    sanitizeHtml,
    sanitizeEmail,
    sanitizeUrl,
    escapeSqlIdentifier
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,