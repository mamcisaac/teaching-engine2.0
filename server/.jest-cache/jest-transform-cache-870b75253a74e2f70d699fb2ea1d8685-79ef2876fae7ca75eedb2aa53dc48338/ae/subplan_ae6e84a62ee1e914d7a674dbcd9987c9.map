{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/sub-plan.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/sub-plan.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { z } from 'zod';\nimport { validate } from '../validation';\nimport { generateSubPlan } from '../services/subPlanService';\nimport { prisma } from '../prisma';\n\n// Use global Express Request type with user: { id: number; email: string }\n\nconst router = Router();\n\n// Sub-plan generation schema\nconst subPlanGenerateSchema = z.object({\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Date must be in YYYY-MM-DD format'),\n  days: z.number().int().min(1).max(5).default(1),\n  includeGoals: z.boolean().default(true),\n  includeRoutines: z.boolean().default(true),\n  includePlans: z.boolean().default(true),\n  anonymize: z.boolean().default(false),\n  userId: z.number().int().optional(),\n  saveRecord: z.boolean().default(false),\n  emailTo: z.string().optional(),\n  notes: z.string().max(1000).optional(),\n});\n\n/**\n * Generate substitute plan PDF\n * POST /api/sub-plan/generate\n */\nrouter.post('/generate', validate(subPlanGenerateSchema), async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { date, days, includeGoals, includeRoutines, includePlans, anonymize, saveRecord, emailTo, notes } = req.body;\n\n    // Use the authenticated user's ID if userId not provided in request\n    const targetUserId = req.body.userId || userId;\n\n    const options = {\n      includeGoals,\n      includeRoutines,\n      includePlans,\n      anonymize,\n      userId: targetUserId,\n    };\n\n    const pdfBuffer = await generateSubPlan(date, days, options);\n\n    // Save record if requested\n    if (saveRecord) {\n      await prisma.subPlanRecord.create({\n        data: {\n          userId: targetUserId,\n          date: new Date(date),\n          daysCount: days,\n          content: { emailedTo: emailTo, options: JSON.stringify(options) },\n          includeGoals,\n          includeRoutines,\n          includePlans,\n          anonymized: anonymize,\n          notes: notes,\n        },\n      });\n    }\n\n    // Set PDF headers\n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', `attachment; filename=\"sub-plan-${date}.pdf\"`);\n    res.setHeader('Content-Length', pdfBuffer.length);\n\n    res.send(pdfBuffer);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Get class routines for user\n * GET /api/sub-plan/routines\n */\nrouter.get('/routines', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const targetUserId = req.query.userId ? parseInt(req.query.userId as string, 10) : userId;\n\n    const routines = await prisma.classRoutine.findMany({\n      where: { userId: targetUserId },\n      orderBy: { priority: 'desc' }, // Higher priority first\n    });\n\n    res.json(routines);\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Create or update class routine\n * POST /api/sub-plan/routines\n */\nrouter.post('/routines', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { id, title, description, category, timeOfDay, priority, isActive } = req.body;\n\n    if (id) {\n      // Update existing routine\n      const routine = await prisma.classRoutine.update({\n        where: { id: parseInt(id, 10) },\n        data: {\n          title,\n          description,\n          category,\n          timeOfDay,\n          priority,\n          isActive: isActive !== undefined ? isActive : true,\n        },\n      });\n      res.json(routine);\n    } else {\n      // Create new routine\n      const routine = await prisma.classRoutine.create({\n        data: {\n          userId,\n          title,\n          description,\n          category,\n          timeOfDay,\n          priority: priority || 5,\n          isActive: isActive !== undefined ? isActive : true,\n        },\n      });\n      res.json(routine);\n    }\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Delete class routine\n * DELETE /api/sub-plan/routines/:id\n */\nrouter.delete('/routines/:id', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const routineId = parseInt(req.params.id, 10);\n\n    await prisma.classRoutine.delete({\n      where: { id: routineId },\n    });\n\n    res.json({ success: true });\n  } catch (error) {\n    next(error);\n  }\n});\n\n/**\n * Get sub plan records\n * GET /api/sub-plan/records\n */\nrouter.get('/records', async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const targetUserId = req.query.userId ? parseInt(req.query.userId as string, 10) : userId;\n\n    const records = await prisma.subPlanRecord.findMany({\n      where: { userId: targetUserId },\n      orderBy: { date: 'desc' },\n    });\n\n    res.json(records);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;"],"version":3}