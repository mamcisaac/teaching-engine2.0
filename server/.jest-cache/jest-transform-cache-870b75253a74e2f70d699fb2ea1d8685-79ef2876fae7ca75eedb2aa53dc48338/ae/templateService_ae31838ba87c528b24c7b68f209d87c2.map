{"version":3,"names":["prisma","TemplateService","searchTemplates","userId","options","cov_1kcofx1hj5","f","type","category","subject","gradeMin","gradeMax","isSystem","isPublic","createdByUserId","search","tags","sortBy","b","sortOrder","limit","offset","s","where","OR","undefined","AND","push","lte","gte","mode","process","env","DATABASE_URL","includes","title","contains","description","titleFr","descriptionFr","length","path","array_contains","orderBy","usageCount","averageRating","createdAt","lastUsedAt","templates","total","Promise","all","planTemplate","findMany","take","skip","include","createdByUser","select","id","name","_count","ratings","variations","count","pagination","hasMore","getTemplateById","templateId","template","findFirst","rating","comment","createTemplate","data","keywords","content","unitStructure","lessonStructure","templateData","Error","create","updateTemplate","existing","updateData","update","deleteTemplate","delete","duplicateTemplate","original","duplicated","estimatedWeeks","estimatedMinutes","applyTemplate","customizations","increment","Date","appliedContent","rateTemplate","templateRating","upsert","templateId_userId","reduce","sum","r","getFilterOptions","subjects","grades","categories","not","distinct","uniqueSubjects","map","t","filter","sort","gradeRange","range","min","Math","max","allTags","flatMap","Array","isArray","tag","index","array","indexOf","from","_","i","c","createStarterTemplates","starterTemplates","overview","bigIdeas","learningGoals","essentialQuestions","keyVocabulary","assessments","timing","differentiationStrategies","forStruggling","forAdvanced","forELL","phases","estimatedDays","resources","notes","crossCurricularConnections","communityConnections","objectives","materials","mindsOn","action","consolidation","grouping","accommodations","assessmentType","assessmentNotes","duration","sections","timeAllocation","activities","createdTemplates","created","error","console"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/templateService.ts"],"sourcesContent":["import { prisma } from '../prisma';\nimport { Prisma } from '../prisma';\n\nexport interface TemplateSearchOptions {\n  type?: 'UNIT_PLAN' | 'LESSON_PLAN';\n  category?: 'BY_SUBJECT' | 'BY_GRADE' | 'BY_THEME' | 'BY_SEASON' | 'BY_SKILL' | 'CUSTOM';\n  subject?: string;\n  gradeMin?: number;\n  gradeMax?: number;\n  isSystem?: boolean;\n  isPublic?: boolean;\n  createdByUserId?: number;\n  search?: string;\n  tags?: string[];\n  sortBy?: 'title' | 'usageCount' | 'averageRating' | 'createdAt' | 'lastUsedAt';\n  sortOrder?: 'asc' | 'desc';\n  limit?: number;\n  offset?: number;\n}\n\nexport interface TemplateCreateData {\n  title: string;\n  titleFr?: string;\n  description?: string;\n  descriptionFr?: string;\n  type: 'UNIT_PLAN' | 'LESSON_PLAN';\n  category: 'BY_SUBJECT' | 'BY_GRADE' | 'BY_THEME' | 'BY_SEASON' | 'BY_SKILL' | 'CUSTOM';\n  subject?: string;\n  gradeMin?: number;\n  gradeMax?: number;\n  tags?: string[];\n  keywords?: string[];\n  isPublic?: boolean;\n  content: Record<string, unknown>;\n  estimatedWeeks?: number;\n  unitStructure?: Record<string, unknown>;\n  estimatedMinutes?: number;\n  lessonStructure?: Record<string, unknown>;\n}\n\nexport interface AppliedTemplateData {\n  template: {\n    id: string;\n    title: string;\n    type: string;\n    content: Record<string, unknown>;\n    unitStructure?: Record<string, unknown>;\n    lessonStructure?: Record<string, unknown>;\n    estimatedWeeks?: number;\n    estimatedMinutes?: number;\n  };\n  appliedContent: Record<string, unknown>;\n}\n\n/**\n * Template Service\n * Handles business logic for template management, including creation, search, and application\n */\nexport class TemplateService {\n  /**\n   * Search and filter templates based on criteria\n   */\n  static async searchTemplates(userId: number, options: TemplateSearchOptions) {\n    const {\n      type,\n      category,\n      subject,\n      gradeMin,\n      gradeMax,\n      isSystem,\n      isPublic,\n      createdByUserId,\n      search,\n      tags,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      limit = 20,\n      offset = 0,\n    } = options;\n\n    const where: Prisma.PlanTemplateWhereInput = {\n      OR: [\n        { isSystem: true }, // System templates visible to all\n        { isPublic: true }, // Public templates visible to all\n        { createdByUserId: userId }, // User's own templates\n      ],\n    };\n\n    // Apply filters\n    if (type) where.type = type;\n    if (category) where.category = category;\n    if (subject) where.subject = subject;\n    if (gradeMin !== undefined || gradeMax !== undefined) {\n      where.AND = [];\n      if (gradeMin !== undefined) {\n        where.AND.push({\n          OR: [\n            { gradeMin: { lte: gradeMin } },\n            { gradeMin: null },\n          ],\n        });\n      }\n      if (gradeMax !== undefined) {\n        where.AND.push({\n          OR: [\n            { gradeMax: { gte: gradeMax } },\n            { gradeMax: null },\n          ],\n        });\n      }\n    }\n    if (isSystem !== undefined) where.isSystem = isSystem;\n    if (isPublic !== undefined) where.isPublic = isPublic;\n    if (createdByUserId !== undefined) where.createdByUserId = createdByUserId;\n\n    // Text search with database-specific case handling\n    if (search) {\n      const mode = process.env.DATABASE_URL?.includes('postgresql') \n        ? { mode: 'insensitive' as const } \n        : {};\n        \n      where.OR = [\n        { title: { contains: search, ...mode } },\n        { description: { contains: search, ...mode } },\n        { titleFr: { contains: search, ...mode } },\n        { descriptionFr: { contains: search, ...mode } },\n      ];\n    }\n\n    // Tag filtering - Using JSON array contains for tags\n    if (tags && tags.length > 0) {\n      where.tags = {\n        path: [],\n        array_contains: tags\n      } as Prisma.JsonFilter<\"PlanTemplate\">; // Type assertion for JSON array operations\n    }\n\n    // Sorting\n    const orderBy: Prisma.PlanTemplateOrderByWithRelationInput = {};\n    if (sortBy === 'title') orderBy.title = sortOrder;\n    else if (sortBy === 'usageCount') orderBy.usageCount = sortOrder;\n    else if (sortBy === 'averageRating') orderBy.averageRating = sortOrder;\n    else if (sortBy === 'createdAt') orderBy.createdAt = sortOrder;\n    else if (sortBy === 'lastUsedAt') orderBy.lastUsedAt = sortOrder;\n\n    const [templates, total] = await Promise.all([\n      prisma.planTemplate.findMany({\n        where,\n        orderBy,\n        take: limit,\n        skip: offset,\n        include: {\n          createdByUser: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n          _count: {\n            select: {\n              ratings: true,\n              variations: true,\n            },\n          },\n        },\n      }),\n      prisma.planTemplate.count({ where }),\n    ]);\n\n    return {\n      templates,\n      pagination: {\n        total,\n        limit,\n        offset,\n        hasMore: offset + limit < total,\n      },\n    };\n  }\n\n  /**\n   * Get a template by ID with full details\n   */\n  static async getTemplateById(userId: number, templateId: string) {\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: templateId,\n        OR: [\n          { isSystem: true },\n          { isPublic: true },\n          { createdByUserId: userId },\n        ],\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        ratings: {\n          select: {\n            id: true,\n            userId: true,\n            rating: true,\n            comment: true,\n            createdAt: true,\n          },\n          orderBy: { createdAt: 'desc' },\n          take: 5,\n        },\n        variations: {\n          orderBy: { createdAt: 'desc' },\n        },\n        _count: {\n          select: {\n            ratings: true,\n          },\n        },\n      },\n    });\n\n    return template;\n  }\n\n  /**\n   * Create a new template\n   */\n  static async createTemplate(userId: number, data: TemplateCreateData) {\n    const {\n      tags = [],\n      keywords = [],\n      isPublic = false,\n      content,\n      unitStructure,\n      lessonStructure,\n      ...templateData\n    } = data;\n\n    // Validate grade range\n    if (templateData.gradeMin && templateData.gradeMax && templateData.gradeMin > templateData.gradeMax) {\n      throw new Error('Minimum grade cannot be greater than maximum grade');\n    }\n\n    const template = await prisma.planTemplate.create({\n      data: {\n        ...templateData,\n        createdByUserId: userId,\n        tags,\n        keywords,\n        isPublic,\n        content: content as Prisma.JsonValue,\n        unitStructure: unitStructure as Prisma.JsonValue || null,\n        lessonStructure: lessonStructure as Prisma.JsonValue || null,\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        _count: {\n          select: {\n            ratings: true,\n            variations: true,\n          },\n        },\n      },\n    });\n\n    return template;\n  }\n\n  /**\n   * Update an existing template\n   */\n  static async updateTemplate(userId: number, templateId: string, data: Partial<TemplateCreateData>) {\n    // Verify ownership (only creator can edit)\n    const existing = await prisma.planTemplate.findFirst({\n      where: {\n        id: templateId,\n        createdByUserId: userId,\n        isSystem: false, // System templates cannot be edited\n      },\n    });\n\n    if (!existing) {\n      throw new Error('Template not found or not editable');\n    }\n\n    const { gradeMin, gradeMax, ...updateData } = data;\n\n    // Validate grade range if provided\n    if (gradeMin && gradeMax && gradeMin > gradeMax) {\n      throw new Error('Minimum grade cannot be greater than maximum grade');\n    }\n\n    const template = await prisma.planTemplate.update({\n      where: { id: templateId },\n      data: {\n        ...updateData,\n        gradeMin,\n        gradeMax,\n        content: updateData.content ? updateData.content as Prisma.JsonValue : undefined,\n        unitStructure: updateData.unitStructure ? updateData.unitStructure as Prisma.JsonValue : undefined,\n        lessonStructure: updateData.lessonStructure ? updateData.lessonStructure as Prisma.JsonValue : undefined,\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        variations: true,\n        _count: {\n          select: {\n            ratings: true,\n          },\n        },\n      },\n    });\n\n    return template;\n  }\n\n  /**\n   * Delete a template\n   */\n  static async deleteTemplate(userId: number, templateId: string) {\n    // Verify ownership\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: templateId,\n        createdByUserId: userId,\n        isSystem: false, // System templates cannot be deleted\n      },\n    });\n\n    if (!template) {\n      throw new Error('Template not found or not deletable');\n    }\n\n    await prisma.planTemplate.delete({\n      where: { id: templateId },\n    });\n\n    return true;\n  }\n\n  /**\n   * Duplicate a template\n   */\n  static async duplicateTemplate(userId: number, templateId: string, title?: string, isPublic = false) {\n    const original = await prisma.planTemplate.findFirst({\n      where: {\n        id: templateId,\n        OR: [\n          { isSystem: true },\n          { isPublic: true },\n          { createdByUserId: userId },\n        ],\n      },\n    });\n\n    if (!original) {\n      throw new Error('Template not found');\n    }\n\n    const duplicated = await prisma.planTemplate.create({\n      data: {\n        title: title || `${original.title} (Copy)`,\n        titleFr: original.titleFr ? `${original.titleFr} (Copie)` : null,\n        description: original.description,\n        descriptionFr: original.descriptionFr,\n        type: original.type,\n        category: original.category,\n        subject: original.subject,\n        gradeMin: original.gradeMin,\n        gradeMax: original.gradeMax,\n        tags: original.tags,\n        keywords: original.keywords,\n        createdByUserId: userId,\n        isSystem: false,\n        isPublic,\n        content: original.content as Prisma.JsonValue,\n        estimatedWeeks: original.estimatedWeeks,\n        unitStructure: original.unitStructure as Prisma.JsonValue,\n        estimatedMinutes: original.estimatedMinutes,\n        lessonStructure: original.lessonStructure as Prisma.JsonValue,\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        _count: {\n          select: {\n            ratings: true,\n            variations: true,\n          },\n        },\n      },\n    });\n\n    return duplicated;\n  }\n\n  /**\n   * Apply a template to create new plan data\n   */\n  static async applyTemplate(userId: number, templateId: string, customizations: Record<string, unknown> = {}): Promise<AppliedTemplateData> {\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: templateId,\n        OR: [\n          { isSystem: true },\n          { isPublic: true },\n          { createdByUserId: userId },\n        ],\n      },\n    });\n\n    if (!template) {\n      throw new Error('Template not found');\n    }\n\n    // Update usage tracking\n    await prisma.planTemplate.update({\n      where: { id: template.id },\n      data: {\n        usageCount: { increment: 1 },\n        lastUsedAt: new Date(),\n      },\n    });\n\n    // Merge template content with user customizations\n    const appliedContent = {\n      ...(template.content as Record<string, unknown>),\n      ...(customizations || {}),\n    };\n\n    return {\n      template: {\n        id: template.id,\n        title: template.title,\n        type: template.type,\n        content: appliedContent,\n        unitStructure: template.unitStructure as Record<string, unknown> || undefined,\n        lessonStructure: template.lessonStructure as Record<string, unknown> || undefined,\n        estimatedWeeks: template.estimatedWeeks,\n        estimatedMinutes: template.estimatedMinutes,\n      },\n      appliedContent,\n    };\n  }\n\n  /**\n   * Rate a template\n   */\n  static async rateTemplate(userId: number, templateId: string, rating: number, comment?: string) {\n    if (rating < 1 || rating > 5) {\n      throw new Error('Rating must be between 1 and 5');\n    }\n\n    // Check if template exists and is accessible\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: templateId,\n        OR: [\n          { isSystem: true },\n          { isPublic: true },\n          { createdByUserId: userId },\n        ],\n      },\n    });\n\n    if (!template) {\n      throw new Error('Template not found');\n    }\n\n    // Upsert rating\n    const templateRating = await prisma.templateRating.upsert({\n      where: {\n        templateId_userId: {\n          templateId,\n          userId,\n        },\n      },\n      update: {\n        rating,\n        comment,\n      },\n      create: {\n        templateId,\n        userId,\n        rating,\n        comment,\n      },\n    });\n\n    // Recalculate average rating\n    const ratings = await prisma.templateRating.findMany({\n      where: { templateId },\n      select: { rating: true },\n    });\n\n    const averageRating = ratings.length > 0 \n      ? ratings.reduce((sum, r) => sum + r.rating, 0) / ratings.length \n      : 0;\n\n    await prisma.planTemplate.update({\n      where: { id: templateId },\n      data: { averageRating },\n    });\n\n    return templateRating;\n  }\n\n  /**\n   * Get filter options for template search\n   */\n  static async getFilterOptions(userId: number) {\n    const [subjects, grades, categories, tags] = await Promise.all([\n      prisma.planTemplate.findMany({\n        where: {\n          OR: [\n            { isSystem: true },\n            { isPublic: true },\n            { createdByUserId: userId },\n          ],\n          subject: { not: null },\n        },\n        select: { subject: true },\n        distinct: ['subject'],\n      }),\n      prisma.planTemplate.findMany({\n        where: {\n          AND: [\n            {\n              OR: [\n                { isSystem: true },\n                { isPublic: true },\n                { createdByUserId: userId },\n              ],\n            },\n            {\n              OR: [\n                { gradeMin: { not: null } },\n                { gradeMax: { not: null } },\n              ],\n            },\n          ],\n        },\n        select: { gradeMin: true, gradeMax: true },\n      }),\n      prisma.planTemplate.findMany({\n        select: { category: true },\n        distinct: ['category'],\n      }),\n      prisma.planTemplate.findMany({\n        where: {\n          OR: [\n            { isSystem: true },\n            { isPublic: true },\n            { createdByUserId: userId },\n          ],\n        },\n        select: { tags: true },\n      }),\n    ]);\n\n    const uniqueSubjects = subjects\n      .map(t => t.subject)\n      .filter(s => s !== null)\n      .sort();\n\n    const gradeRange = grades.reduce(\n      (range, template) => {\n        if (template.gradeMin) range.min = Math.min(range.min, template.gradeMin);\n        if (template.gradeMax) range.max = Math.max(range.max, template.gradeMax);\n        return range;\n      },\n      { min: 12, max: 1 }\n    );\n\n    const allTags = tags\n      .flatMap(t => Array.isArray(t.tags) ? t.tags : [])\n      .filter((tag, index, array) => array.indexOf(tag) === index)\n      .sort();\n\n    return {\n      subjects: uniqueSubjects,\n      grades: Array.from({ length: gradeRange.max - gradeRange.min + 1 }, (_, i) => gradeRange.min + i),\n      categories: categories.map(c => c.category),\n      tags: allTags,\n    };\n  }\n\n  /**\n   * Create system starter templates\n   */\n  static async createStarterTemplates() {\n    const starterTemplates = [\n      {\n        title: 'Grade 1 Math - Number Sense Unit',\n        titleFr: 'Mathématiques 1re année - Unité de sens du nombre',\n        description: 'A comprehensive 2-week unit exploring numbers 1-20 with hands-on activities and assessment opportunities.',\n        descriptionFr: 'Une unité complète de 2 semaines explorant les nombres 1-20 avec des activités pratiques et des opportunités d\\'évaluation.',\n        type: 'UNIT_PLAN' as const,\n        category: 'BY_SUBJECT' as const,\n        subject: 'Mathematics',\n        gradeMin: 1,\n        gradeMax: 1,\n        isSystem: true,\n        isPublic: true,\n        estimatedWeeks: 2,\n        tags: ['number-sense', 'hands-on', 'primary', 'counting', 'place-value'],\n        keywords: ['numbers', 'counting', 'math', 'grade-1', 'manipulatives'],\n        content: {\n          overview: 'Students will develop number sense by exploring numbers 1-20 through various concrete, pictorial, and abstract activities.',\n          bigIdeas: 'Numbers have relationships and patterns. Quantities can be represented in multiple ways.',\n          learningGoals: [\n            'Count forward and backward from 1 to 20',\n            'Recognize and represent numbers in different ways',\n            'Compare quantities using more than, less than, equal to',\n            'Solve simple addition and subtraction problems using concrete materials'\n          ],\n          essentialQuestions: [\n            'How do we use numbers in our daily lives?',\n            'What different ways can we show the same quantity?',\n            'How do numbers help us compare amounts?'\n          ],\n          keyVocabulary: ['number', 'count', 'more', 'less', 'equal', 'add', 'subtract', 'altogether'],\n          assessments: [\n            {\n              type: 'diagnostic',\n              description: 'Number recognition and counting assessment',\n              timing: 'Beginning of unit'\n            },\n            {\n              type: 'formative',\n              description: 'Daily number talks and manipulative explorations',\n              timing: 'Throughout unit'\n            },\n            {\n              type: 'summative',\n              description: 'Number representation portfolio',\n              timing: 'End of unit'\n            }\n          ],\n          differentiationStrategies: {\n            forStruggling: [\n              'Use concrete manipulatives for all activities',\n              'Start with smaller number ranges (1-10)',\n              'Provide visual number lines and hundreds charts',\n              'Use peer buddies for support'\n            ],\n            forAdvanced: [\n              'Extend to numbers beyond 20',\n              'Introduce skip counting patterns',\n              'Explore number relationships and patterns',\n              'Create their own number problems'\n            ],\n            forELL: [\n              'Use visual supports and gestures',\n              'Provide number vocabulary cards with pictures',\n              'Use home language connections where possible',\n              'Focus on mathematical language development'\n            ]\n          }\n        },\n        unitStructure: {\n          phases: [\n            {\n              name: 'Number Recognition & Counting',\n              description: 'Building foundational counting skills and number recognition',\n              estimatedDays: 4,\n              learningGoals: ['Count objects accurately', 'Recognize written numerals 1-20']\n            },\n            {\n              name: 'Number Representations',\n              description: 'Exploring different ways to show quantities',\n              estimatedDays: 3,\n              learningGoals: ['Show numbers using manipulatives, pictures, and symbols']\n            },\n            {\n              name: 'Comparing Quantities',\n              description: 'Understanding more than, less than, equal to',\n              estimatedDays: 2,\n              learningGoals: ['Compare sets of objects', 'Use comparison vocabulary']\n            },\n            {\n              name: 'Adding and Subtracting',\n              description: 'Introduction to operations with concrete materials',\n              estimatedDays: 3,\n              learningGoals: ['Solve simple addition and subtraction problems using objects']\n            }\n          ],\n          resources: [\n            { title: 'Counting Bears', type: 'manipulative', notes: '10 bears per student' },\n            { title: 'Number Cards 1-20', type: 'printable', notes: 'Laminate for durability' },\n            { title: 'Ten Frames', type: 'printable', notes: 'Print on cardstock' }\n          ]\n        }\n      },\n      {\n        title: 'Grade 3 Language - Poetry Unit',\n        titleFr: 'Français 3e année - Unité de poésie',\n        description: 'A creative 1-week exploration of poetry forms, writing techniques, and performance.',\n        descriptionFr: 'Une exploration créative d\\'une semaine des formes poétiques, des techniques d\\'écriture et de la performance.',\n        type: 'UNIT_PLAN' as const,\n        category: 'BY_SUBJECT' as const,\n        subject: 'Language Arts',\n        gradeMin: 3,\n        gradeMax: 3,\n        isSystem: true,\n        isPublic: true,\n        estimatedWeeks: 1,\n        tags: ['poetry', 'writing', 'language-arts', 'creative', 'performance'],\n        keywords: ['poems', 'rhyme', 'rhythm', 'writing', 'language'],\n        content: {\n          overview: 'Students will explore various forms of poetry, learn about poetic devices, and create their own poems.',\n          bigIdeas: 'Poetry is a form of expression that uses language creatively. Words can create images, emotions, and experiences.',\n          learningGoals: [\n            'Identify different types of poems and their characteristics',\n            'Use poetic devices like rhyme, rhythm, and alliteration',\n            'Write original poems using various forms',\n            'Present poetry with expression and confidence'\n          ],\n          essentialQuestions: [\n            'How do poets use words to create images and feelings?',\n            'What makes a poem different from other types of writing?',\n            'How can we share poetry to connect with others?'\n          ],\n          keyVocabulary: ['poem', 'rhyme', 'rhythm', 'stanza', 'verse', 'alliteration', 'metaphor', 'simile'],\n          crossCurricularConnections: 'Music (rhythm and beat), Visual Arts (illustrating poems), Drama (performance)'\n        },\n        unitStructure: {\n          phases: [\n            {\n              name: 'Poetry Exploration',\n              description: 'Reading and analyzing different types of poems',\n              estimatedDays: 2,\n              learningGoals: ['Identify poem characteristics', 'Recognize poetic devices']\n            },\n            {\n              name: 'Writing Workshop',\n              description: 'Creating original poems using different forms',\n              estimatedDays: 2,\n              learningGoals: ['Write haiku, acrostic, and free verse poems']\n            },\n            {\n              name: 'Poetry Café',\n              description: 'Sharing and performing student-created poems',\n              estimatedDays: 1,\n              learningGoals: ['Present poems with expression', 'Give constructive feedback']\n            }\n          ]\n        }\n      },\n      {\n        title: 'Grade 5 Science - Simple Machines',\n        titleFr: 'Sciences 5e année - Machines simples',\n        description: 'A 3-week investigation into simple machines, their functions, and applications in daily life.',\n        descriptionFr: 'Une enquête de 3 semaines sur les machines simples, leurs fonctions et leurs applications dans la vie quotidienne.',\n        type: 'UNIT_PLAN' as const,\n        category: 'BY_SUBJECT' as const,\n        subject: 'Science',\n        gradeMin: 5,\n        gradeMax: 5,\n        isSystem: true,\n        isPublic: true,\n        estimatedWeeks: 3,\n        tags: ['simple-machines', 'science', 'inquiry', 'STEM', 'investigation'],\n        keywords: ['machines', 'lever', 'pulley', 'wheel', 'inclined-plane', 'wedge', 'screw'],\n        content: {\n          overview: 'Students will investigate the six types of simple machines through hands-on experiments and real-world applications.',\n          bigIdeas: 'Simple machines make work easier by changing the direction or amount of force needed. They are found everywhere in our daily lives.',\n          learningGoals: [\n            'Identify and classify the six types of simple machines',\n            'Explain how simple machines make work easier',\n            'Conduct investigations to test how simple machines work',\n            'Design and build a compound machine using simple machines'\n          ],\n          essentialQuestions: [\n            'How do simple machines make our lives easier?',\n            'Where do we find simple machines in our daily lives?',\n            'How can we use simple machines to solve problems?'\n          ],\n          keyVocabulary: ['force', 'work', 'lever', 'fulcrum', 'pulley', 'wheel and axle', 'inclined plane', 'wedge', 'screw', 'mechanical advantage'],\n          crossCurricularConnections: 'Mathematics (measuring forces, angles), Technology (design process), Social Studies (history of inventions)'\n        },\n        unitStructure: {\n          phases: [\n            {\n              name: 'Introduction to Simple Machines',\n              description: 'Identifying and classifying simple machines',\n              estimatedDays: 5,\n              learningGoals: ['Identify six types of simple machines', 'Find examples in the environment']\n            },\n            {\n              name: 'Investigating Forces',\n              description: 'Hands-on experiments with each type of machine',\n              estimatedDays: 8,\n              learningGoals: ['Measure and compare forces', 'Test how machines change force direction']\n            },\n            {\n              name: 'Design Challenge',\n              description: 'Creating compound machines to solve problems',\n              estimatedDays: 5,\n              learningGoals: ['Apply design process', 'Combine simple machines effectively']\n            }\n          ]\n        }\n      },\n      {\n        title: 'Cross-Curricular Community Helpers Project',\n        titleFr: 'Projet interdisciplinaire sur les aides communautaires',\n        description: 'A month-long integrated project exploring community helpers across multiple subject areas.',\n        descriptionFr: 'Un projet intégré d\\'un mois explorant les aides communautaires dans plusieurs matières.',\n        type: 'UNIT_PLAN' as const,\n        category: 'BY_THEME' as const,\n        subject: 'Integrated Studies',\n        gradeMin: 1,\n        gradeMax: 3,\n        isSystem: true,\n        isPublic: true,\n        estimatedWeeks: 4,\n        tags: ['community-helpers', 'cross-curricular', 'integrated', 'project-based', 'social-studies'],\n        keywords: ['community', 'helpers', 'jobs', 'careers', 'integrated-learning'],\n        content: {\n          overview: 'Students will explore different community helpers, their roles, and contributions while integrating language arts, mathematics, science, and social studies.',\n          bigIdeas: 'Communities are made up of people who work together to help each other. Everyone has a role to play in making their community a better place.',\n          crossCurricularConnections: 'Language Arts (reading about jobs, writing thank you letters), Mathematics (counting, sorting, graphing community helpers), Science (tools and safety), Social Studies (community roles and responsibilities), Arts (creating helper portraits)',\n          communityConnections: 'Guest speakers from local community (firefighters, police, nurses, teachers), field trips to community locations (fire station, library, post office)'\n        }\n      },\n      {\n        title: 'Math Problem Solving Lesson',\n        titleFr: 'Leçon de résolution de problèmes mathématiques',\n        description: 'A 60-minute lesson focused on developing problem-solving strategies using the three-part lesson structure.',\n        descriptionFr: 'Une leçon de 60 minutes axée sur le développement de stratégies de résolution de problèmes en utilisant la structure de leçon en trois parties.',\n        type: 'LESSON_PLAN' as const,\n        category: 'BY_SKILL' as const,\n        subject: 'Mathematics',\n        gradeMin: 2,\n        gradeMax: 6,\n        isSystem: true,\n        isPublic: true,\n        estimatedMinutes: 60,\n        tags: ['problem-solving', 'mathematics', 'three-part-lesson', 'strategies', 'reasoning'],\n        keywords: ['problem-solving', 'math', 'strategies', 'thinking', 'reasoning'],\n        content: {\n          objectives: [\n            'Apply problem-solving strategies to solve multi-step problems',\n            'Communicate mathematical thinking clearly',\n            'Make connections between different problem-solving approaches'\n          ],\n          materials: [\n            'Chart paper and markers',\n            'Math manipulatives (blocks, counters)',\n            'Problem-solving strategy posters',\n            'Student journals'\n          ],\n          mindsOn: 'Present a visual problem scenario and have students share what they notice and wonder. Activate prior knowledge about problem-solving strategies.',\n          action: 'Students work in pairs to solve a multi-step problem using various strategies. Teacher conferences with groups, asking probing questions to extend thinking.',\n          consolidation: 'Groups share their solutions and strategies. Class discusses different approaches and makes connections between methods.',\n          grouping: 'pairs',\n          accommodations: [\n            'Provide manipulatives for concrete representation',\n            'Offer problems with varying complexity levels',\n            'Use visual supports and graphic organizers'\n          ],\n          assessmentType: 'formative',\n          assessmentNotes: 'Observe student strategy use, communication, and reasoning during problem solving'\n        },\n        lessonStructure: {\n          duration: 60,\n          sections: [\n            {\n              name: 'Minds On',\n              description: 'Activate prior knowledge and introduce problem',\n              timeAllocation: 10,\n              activities: ['Visual problem presentation', 'Notice and wonder', 'Strategy review']\n            },\n            {\n              name: 'Action',\n              description: 'Collaborative problem solving',\n              timeAllocation: 35,\n              activities: ['Partner problem solving', 'Teacher conferencing', 'Strategy application']\n            },\n            {\n              name: 'Consolidation',\n              description: 'Share solutions and make connections',\n              timeAllocation: 15,\n              activities: ['Solution sharing', 'Strategy comparison', 'Reflection']\n            }\n          ]\n        }\n      }\n    ];\n\n    const createdTemplates = [];\n    for (const templateData of starterTemplates) {\n      try {\n        const existing = await prisma.planTemplate.findFirst({\n          where: { title: templateData.title, isSystem: true }\n        });\n\n        if (!existing) {\n          const created = await prisma.planTemplate.create({\n            data: {\n              ...templateData,\n              content: templateData.content as Prisma.JsonValue,\n              unitStructure: templateData.unitStructure as Prisma.JsonValue || null,\n              lessonStructure: templateData.lessonStructure as Prisma.JsonValue || null,\n            },\n          });\n          createdTemplates.push(created);\n        }\n      } catch (error) {\n        console.error(`Error creating template \"${templateData.title}\":`, error);\n      }\n    }\n\n    return createdTemplates;\n  }\n}\n\nexport default TemplateService;"],"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","ignoreList":[]}