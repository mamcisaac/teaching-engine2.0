{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/server-integration.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/server-integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll } from '@jest/globals';\nimport request from 'supertest';\nimport jwt from 'jsonwebtoken';\nimport { app } from '../../src/index';\nimport { getTestPrismaClient } from '../jest.setup';\n\ndescribe('Server Integration Tests', () => {\n  beforeAll(async () => {\n    // Set test environment\n    process.env.NODE_ENV = 'test';\n    process.env.JWT_SECRET = 'test-secret';\n    // Initialize test database client\n    getTestPrismaClient();\n  });\n\n  describe('Health Check', () => {\n    it('should respond to API health check endpoint', async () => {\n      const response = await request(app).get('/api/health');\n\n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({ status: 'ok' });\n    });\n\n    it('should serve client app for root route', async () => {\n      const response = await request(app).get('/');\n\n      expect(response.status).toBe(200);\n      expect(response.text).toContain('<!DOCTYPE html>');\n      expect(response.text).toContain('Curriculum Planner');\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should reject requests without authentication', async () => {\n      const response = await request(app).get('/api/activities');\n\n      expect(response.status).toBe(401);\n    });\n\n    it('should accept requests with valid JWT', async () => {\n      const token = jwt.sign({ userId: '1' }, process.env.JWT_SECRET || 'test-secret');\n\n      const response = await request(app)\n        .get('/api/subjects')\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should reject requests with invalid JWT', async () => {\n      const response = await request(app)\n        .get('/api/subjects')\n        .set('Authorization', 'Bearer invalid-token');\n\n      expect(response.status).toBe(403);\n    });\n  });\n\n  describe('404 Handling', () => {\n    it('should return 404 for non-existent API endpoints', async () => {\n      const response = await request(app).get('/api/non-existent');\n\n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Not Found' });\n    });\n  });\n\n  describe('CORS', () => {\n    it('should include CORS headers', async () => {\n      const response = await request(app).get('/api/health').set('Origin', 'http://localhost:3000');\n\n      expect(response.headers['access-control-allow-origin']).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle malformed JSON', async () => {\n      const token = jwt.sign({ userId: '1' }, process.env.JWT_SECRET || 'test-secret');\n\n      const response = await request(app)\n        .post('/api/subjects')\n        .set('Authorization', `Bearer ${token}`)\n        .set('Content-Type', 'application/json')\n        .send('{\"invalid json}');\n\n      // Express returns 400 for JSON parse errors, but our error handler might return 500\n      expect([400, 500]).toContain(response.status);\n    });\n  });\n});\n"],"version":3}