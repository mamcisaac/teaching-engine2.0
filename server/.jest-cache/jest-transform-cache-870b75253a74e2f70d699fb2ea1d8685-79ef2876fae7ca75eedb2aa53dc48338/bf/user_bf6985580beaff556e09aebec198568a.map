{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/user.ts"],"sourcesContent":["/**\n * User Routes\n * Handles user profile and account management\n */\n\nimport { Router } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport bcrypt from 'bcryptjs';\nimport { asyncHandler } from '@/middleware/errorHandler';\nimport { requireAuth } from '@/middleware/auth';\nimport { validatePassword, hashPassword } from '@/services/authService';\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(1),\n  newPassword: z.string().min(8),\n});\n\nexport function userRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Get user profile\n  router.get('/profile', requireAuth, asyncHandler(async (req, res) => {\n    const userId = (req as any).user.id;\n    \n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        role: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  }));\n\n  // Update password\n  router.put('/password', requireAuth, asyncHandler(async (req, res) => {\n    const userId = (req as any).user.id;\n    const { currentPassword, newPassword } = updatePasswordSchema.parse(req.body);\n    \n    // Validate new password\n    await validatePassword(newPassword);\n    \n    // Get user with password\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n    });\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    // Verify current password\n    const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Current password is incorrect' });\n    }\n    \n    // Hash new password\n    const hashedPassword = await hashPassword(newPassword);\n    \n    // Update password\n    await prisma.user.update({\n      where: { id: userId },\n      data: { password: hashedPassword },\n    });\n    \n    res.json({ message: 'Password updated successfully' });\n  }));\n\n  // Create user (admin only)\n  router.post('/create', requireAuth, asyncHandler(async (req, res) => {\n    const userRole = (req as any).user.role;\n    \n    if (userRole !== 'ADMIN') {\n      return res.status(403).json({ error: 'Forbidden' });\n    }\n    \n    const { email, name, role } = req.body;\n    \n    // Sanitize input\n    const sanitizedName = name.replace(/<[^>]*>/g, ''); // Remove HTML tags\n    \n    const user = await prisma.user.create({\n      data: {\n        email,\n        name: sanitizedName,\n        role: role || 'USER',\n        password: await hashPassword('TempPassword123!'), // Temporary password\n      },\n    });\n    \n    const { password: _, ...userWithoutPassword } = user;\n    res.status(201).json(userWithoutPassword);\n  }));\n\n  // Data validation endpoint\n  router.post('/data/validate', asyncHandler(async (req, res) => {\n    const data = req.body;\n    \n    // Type validation\n    if (data.age !== undefined && typeof data.age !== 'number') {\n      return res.status(400).json({ error: 'Invalid data type: age must be a number' });\n    }\n    \n    if (data.active !== undefined && typeof data.active !== 'boolean') {\n      return res.status(400).json({ error: 'Invalid data type: active must be a boolean' });\n    }\n    \n    if (data.tags !== undefined && !Array.isArray(data.tags)) {\n      return res.status(400).json({ error: 'Invalid data type: tags must be an array' });\n    }\n    \n    if (data.metadata !== undefined && typeof data.metadata !== 'object') {\n      return res.status(400).json({ error: 'Invalid data type: metadata must be an object' });\n    }\n    \n    res.json({ valid: true });\n  }));\n\n  return router;\n}"],"version":3}