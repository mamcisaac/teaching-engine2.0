{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculumImport.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/curriculumImport.ts"],"sourcesContent":["import express from 'express';\nimport multer from 'multer';\nimport { curriculumImportService } from '../services/curriculumImportService';\nimport { clusteringService } from '../services/clusteringService';\nimport logger from '../logger';\n\n// Get auth from the extended request\ninterface AuthenticatedRequest extends express.Request {\n  user?: {\n    userId: string;\n  };\n}\n\nconst router = express.Router();\n\n// Configure multer for file uploads with enhanced security\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n    files: 1, // Only allow 1 file per request\n    fields: 10, // Limit number of fields\n  },\n  fileFilter: (req, file, cb) => {\n    // Sanitize filename\n    const sanitizedFilename = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n    if (sanitizedFilename !== file.originalname) {\n      file.originalname = sanitizedFilename;\n    }\n    \n    // Check file extension as well as MIME type\n    const allowedExtensions = ['.csv', '.pdf', '.docx'];\n    const fileExtension = file.originalname.toLowerCase().substring(file.originalname.lastIndexOf('.'));\n    \n    const allowedTypes = [\n      'text/csv',\n      'application/pdf',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/octet-stream', // Some browsers send this for DOCX\n    ];\n    \n    if (allowedTypes.includes(file.mimetype) && allowedExtensions.includes(fileExtension)) {\n      cb(null, true);\n    } else {\n      cb(new Error(`Invalid file type. Only CSV, PDF, and DOCX files are allowed. Received: ${file.mimetype} with extension ${fileExtension}`));\n    }\n  },\n});\n\n// POST /api/curriculum/import/upload - Upload and parse curriculum file (Planner agent style)\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrouter.post('/upload', upload.single('file') as any, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        error: 'No file uploaded',\n      });\n    }\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n    \n    // Additional file validation\n    if (req.file.size === 0) {\n      return res.status(400).json({\n        error: 'File is empty',\n      });\n    }\n    \n    // Validate file buffer is not null\n    if (!req.file.buffer || req.file.buffer.length === 0) {\n      return res.status(400).json({\n        error: 'Invalid file content',\n      });\n    }\n\n    // Start import session\n    let sourceFormat: 'pdf' | 'docx' | 'csv' | 'manual' = 'manual';\n    if (req.file.mimetype === 'application/pdf') {\n      sourceFormat = 'pdf';\n    } else if (req.file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n      sourceFormat = 'docx';\n    } else if (req.file.mimetype === 'text/csv') {\n      sourceFormat = 'csv';\n    }\n\n    const importId = await curriculumImportService.startImport(\n      parseInt(req.user.userId),\n      1, // Default grade, can be updated later\n      'General', // Default subject, can be updated later\n      sourceFormat,\n    );\n\n    // Store file content for parsing\n    await curriculumImportService.storeUploadedFile(importId, req.file);\n\n    res.json({\n      sessionId: importId,\n      message: 'File uploaded successfully',\n      filename: req.file.originalname,\n    });\n  } catch (error) {\n    console.error('Upload error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to process upload',\n    });\n  }\n});\n\n// POST /api/curriculum/import/parse - Parse uploaded file\nrouter.post('/parse', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { sessionId, useAiExtraction } = req.body;\n\n    if (!sessionId) {\n      return res.status(400).json({\n        error: 'Session ID is required',\n      });\n    }\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Parse the uploaded file\n    const parseResult = await curriculumImportService.parseUploadedFile(sessionId, {\n      useAI: useAiExtraction || true,\n    });\n\n    res.json({\n      message: 'File parsed successfully',\n      subjects: parseResult.subjects,\n      errors: parseResult.errors || [],\n    });\n  } catch (error) {\n    console.error('Parse error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to parse file',\n    });\n  }\n});\n\n// POST /api/curriculum/import/import-preset - Load preset curriculum\nrouter.post('/import-preset', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { presetId } = req.body;\n\n    if (!presetId) {\n      return res.status(400).json({\n        error: 'Preset ID is required',\n      });\n    }\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Load preset curriculum\n    const presetResult = await curriculumImportService.loadPresetCurriculum(\n      parseInt(req.user.userId),\n      presetId,\n    );\n\n    res.json({\n      sessionId: presetResult.sessionId,\n      message: 'Preset curriculum loaded successfully',\n      subjects: presetResult.subjects,\n    });\n  } catch (error) {\n    console.error('Preset load error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to load preset curriculum',\n    });\n  }\n});\n\n// GET /api/curriculum/import/:id/status - Check import status\nrouter.get('/:id/status', async (req: AuthenticatedRequest, res) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    const status = await curriculumImportService.getImportProgress(importId);\n\n    if (!status) {\n      return res.status(404).json({\n        error: 'Import not found',\n      });\n    }\n\n    res.json(status);\n  } catch (error) {\n    console.error('Status check error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to get import status',\n    });\n  }\n});\n\n// POST /api/curriculum/import/:id/confirm - Confirm and finalize import\nrouter.post('/:id/confirm', async (req: AuthenticatedRequest, res) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Check if import exists and is ready\n    const progress = await curriculumImportService.getImportProgress(importId);\n\n    if (!progress) {\n      return res.status(404).json({\n        error: 'Import not found',\n      });\n    }\n\n    if (progress.status !== 'READY_FOR_REVIEW') {\n      return res.status(400).json({\n        error: 'Import is not ready to be confirmed',\n      });\n    }\n\n    // Confirm the import and create expectations\n    const result = await curriculumImportService.confirmImport(importId);\n\n    res.json({\n      message: 'Import confirmed successfully',\n      importId,\n      created: result.created,\n    });\n  } catch (error) {\n    console.error('Confirm import error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to confirm import',\n    });\n  }\n});\n\n// GET /api/curriculum/import/history - Get user's import history\nrouter.get('/history', async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    const limit = parseInt(req.query.limit as string) || 10;\n    // Note: offset is not supported by the service method yet\n\n    const history = await curriculumImportService.getImportHistory(\n      parseInt(req.user.userId),\n      limit,\n    );\n\n    res.json(history);\n  } catch (error) {\n    console.error('History error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to get import history',\n    });\n  }\n});\n\n\n// DELETE /api/curriculum/import/:id - Delete import and associated data\nrouter.delete('/:id', async (req: AuthenticatedRequest, res) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    const result = await curriculumImportService.cancelImport(importId);\n\n    if (!result) {\n      return res.status(404).json({\n        error: 'Import not found',\n      });\n    }\n\n    res.json({ message: 'Import deleted successfully' });\n  } catch (error) {\n    console.error('Delete import error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to delete import',\n    });\n  }\n});\n\n// Phase 5 Routes - Additional clustering functionality\n\n// Start a new curriculum import session\nrouter.post('/start', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { grade, subject, sourceFormat } = req.body;\n\n    if (!grade || !subject || !sourceFormat) {\n      return res\n        .status(400)\n        .json({ error: 'Missing required fields: grade, subject, sourceFormat' });\n    }\n\n    if (!req.user?.userId) {\n      return res.status(401).json({ error: 'User not authenticated' });\n    }\n\n    const importId = await curriculumImportService.startImport(\n      parseInt(req.user.userId),\n      grade,\n      subject,\n      sourceFormat,\n    );\n\n    res.json({ importId, message: 'Import session started successfully' });\n  } catch (error) {\n    logger.error({ error }, 'Failed to start curriculum import');\n    res.status(500).json({ error: 'Failed to start import session' });\n  }\n});\n\n\n// Get import progress\nrouter.get('/:importId/progress', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { importId } = req.params;\n    const progress = await curriculumImportService.getImportProgress(importId);\n\n    if (!progress) {\n      return res.status(404).json({ error: 'Import session not found' });\n    }\n\n    res.json(progress);\n  } catch (error) {\n    logger.error({ error }, 'Failed to get import progress');\n    res.status(500).json({ error: 'Failed to get progress' });\n  }\n});\n\n// Cancel an import session\nrouter.post('/:importId/cancel', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { importId } = req.params;\n    const success = await curriculumImportService.cancelImport(importId);\n\n    if (!success) {\n      return res.status(404).json({ error: 'Import session not found or already completed' });\n    }\n\n    res.json({ message: 'Import cancelled successfully' });\n  } catch (error) {\n    logger.error({ error }, 'Failed to cancel import');\n    res.status(500).json({ error: 'Failed to cancel import' });\n  }\n});\n\n// POST /api/curriculum/import/:id - Finalize import and create curriculum expectations\nrouter.post('/:id', async (req: AuthenticatedRequest, res) => {\n  try {\n    const importId = req.params.id;\n\n    if (!req.user?.userId) {\n      return res.status(401).json({\n        error: 'User not authenticated',\n      });\n    }\n\n    // Get the import session\n    const importRecord = await curriculumImportService.getImportProgress(importId);\n\n    if (!importRecord) {\n      return res.status(404).json({\n        error: 'Import session not found',\n      });\n    }\n\n    if (importRecord.status !== 'READY_FOR_REVIEW') {\n      return res.status(400).json({\n        error: 'Import is not ready to be finalized',\n      });\n    }\n\n    // Finalize the import and create curriculum expectations\n    const result = await curriculumImportService.finalizeImport(importId, parseInt(req.user.userId));\n\n    res.json({\n      message: 'Curriculum imported successfully',\n      totalExpectations: result.totalExpectations,\n      subjects: result.subjects,\n    });\n  } catch (error) {\n    console.error('Finalize import error:', error);\n    res.status(500).json({\n      error: error instanceof Error ? error.message : 'Failed to finalize import',\n    });\n  }\n});\n\n// Clustering Routes (Phase 5)\n\n// Trigger clustering for an import\nrouter.post('/:importId/cluster', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { importId } = req.params;\n    const { options = {} } = req.body;\n\n    const clusters = await clusteringService.clusterExpectations(importId, options);\n\n    res.json({\n      message: 'Clustering completed successfully',\n      clusters,\n    });\n  } catch (error) {\n    logger.error({ error }, 'Failed to cluster expectations');\n    res.status(500).json({ error: 'Failed to cluster expectations' });\n  }\n});\n\n// Re-cluster with different parameters\nrouter.post('/:importId/recluster', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { importId } = req.params;\n    const { options = {} } = req.body;\n\n    const clusters = await clusteringService.reclusterExpectations(importId, options);\n\n    res.json({\n      message: 'Re-clustering completed successfully',\n      clusters,\n    });\n  } catch (error) {\n    logger.error({ error }, 'Failed to re-cluster expectations');\n    res.status(500).json({ error: 'Failed to re-cluster expectations' });\n  }\n});\n\n// Get clusters for an import\nrouter.get('/:importId/clusters', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { importId } = req.params;\n    const clusters = await clusteringService.getClusters(importId);\n\n    res.json(clusters);\n  } catch (error) {\n    logger.error({ error }, 'Failed to get clusters');\n    res.status(500).json({ error: 'Failed to get clusters' });\n  }\n});\n\n// Analyze cluster quality\nrouter.get('/:importId/clusters/quality', async (req: AuthenticatedRequest, res) => {\n  try {\n    const { importId } = req.params;\n    const analysis = await clusteringService.analyzeClusterQuality(importId);\n\n    res.json(analysis);\n  } catch (error) {\n    logger.error({ error }, 'Failed to analyze cluster quality');\n    res.status(500).json({ error: 'Failed to analyze cluster quality' });\n  }\n});\n\nexport default router;\n"],"version":3}