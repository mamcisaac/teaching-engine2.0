{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/helpers/etfo-helpers.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/helpers/etfo-helpers.ts"],"sourcesContent":["import request from 'supertest';\nimport { app } from '../../../src/index';\n\nexport interface TestData {\n  expectationId?: string;\n  longRangePlanId?: string;\n  unitPlanId?: string;\n  lessonPlanId?: string;\n  daybookEntryId?: string;\n}\n\nexport class ETFOTestHelpers {\n  constructor(private authToken: string) {}\n\n  async createExpectation(codePrefix: string = 'TEST') {\n    const response = await request(app)\n      .post('/api/curriculum-expectations')\n      .set('Authorization', `Bearer ${this.authToken}`)\n      .send({\n        code: `${codePrefix}.1.1.${Date.now()}`,\n        description: `${codePrefix} expectation`,\n        strand: 'Test Strand',\n        grade: 1,\n        subject: 'Mathematics',\n      });\n\n    if (response.status !== 201) {\n      throw new Error(`Failed to create expectation: ${response.status} ${JSON.stringify(response.body)}`);\n    }\n\n    return response.body.id;\n  }\n\n  async createLongRangePlan(title: string, expectationIds: string[] = []) {\n    const response = await request(app)\n      .post('/api/long-range-plans')\n      .set('Authorization', `Bearer ${this.authToken}`)\n      .send({\n        title,\n        academicYear: '2024-2025',\n        grade: 1,\n        subject: 'Mathematics',\n        expectationIds,\n      });\n\n    if (response.status !== 201) {\n      throw new Error(`Failed to create long-range plan: ${response.status} ${JSON.stringify(response.body)}`);\n    }\n\n    return response.body.id;\n  }\n\n  async createUnitPlan(title: string, longRangePlanId: string, expectationIds: string[] = []) {\n    const response = await request(app)\n      .post('/api/unit-plans')\n      .set('Authorization', `Bearer ${this.authToken}`)\n      .send({\n        title,\n        longRangePlanId,\n        startDate: '2024-09-01T00:00:00.000Z',\n        endDate: '2024-09-30T23:59:59.999Z',\n        expectationIds,\n      });\n\n    if (response.status !== 201) {\n      throw new Error(`Failed to create unit plan: ${response.status} ${JSON.stringify(response.body)}`);\n    }\n\n    return response.body.id;\n  }\n\n  async createLessonPlan(title: string, unitPlanId: string, expectationIds: string[] = []) {\n    const response = await request(app)\n      .post('/api/etfo-lesson-plans')\n      .set('Authorization', `Bearer ${this.authToken}`)\n      .send({\n        title,\n        unitPlanId,\n        date: '2024-09-15T09:00:00Z',\n        duration: 45,\n        isSubFriendly: false,\n        expectationIds,\n      });\n\n    if (response.status !== 201) {\n      throw new Error(`Failed to create lesson plan: ${response.status} ${JSON.stringify(response.body)}`);\n    }\n\n    return response.body.id;\n  }\n\n  async createDaybookEntry(date: string = '2024-09-15T00:00:00Z', lessonPlanId?: string) {\n    const response = await request(app)\n      .post('/api/daybook-entries')\n      .set('Authorization', `Bearer ${this.authToken}`)\n      .send({\n        date,\n        lessonPlanId,\n        notes: 'Test daybook entry',\n        overallRating: 4,\n      });\n\n    if (response.status !== 201) {\n      throw new Error(`Failed to create daybook entry: ${response.status} ${JSON.stringify(response.body)}`);\n    }\n\n    return response.body.id;\n  }\n\n  /**\n   * Creates the full ETFO hierarchy: Expectation → Long-Range Plan → Unit Plan → Lesson Plan → Daybook Entry\n   */\n  async createCompleteHierarchy(prefix: string = 'HIERARCHY'): Promise<TestData> {\n    const expectationId = await this.createExpectation(prefix);\n    const longRangePlanId = await this.createLongRangePlan(`${prefix} Long-Range Plan`, [expectationId]);\n    const unitPlanId = await this.createUnitPlan(`${prefix} Unit Plan`, longRangePlanId, [expectationId]);\n    const lessonPlanId = await this.createLessonPlan(`${prefix} Lesson Plan`, unitPlanId, [expectationId]);\n    const daybookEntryId = await this.createDaybookEntry(undefined, lessonPlanId);\n\n    return {\n      expectationId,\n      longRangePlanId,\n      unitPlanId,\n      lessonPlanId,\n      daybookEntryId,\n    };\n  }\n}"],"version":3}