{"version":3,"names":["cov_2lb0l3hrsp","actualCoverage","BaseConnector","WebFetch","cheerio","TPTWebConnector","webFetch","baseUrl","s","constructor","f","search","params","activities","searchUrl","buildSearchUrl","html","fetch","$","load","results","parseSearchResults","result","b","price","push","transformToExternalActivity","externalId","extractIdFromUrl","url","source","sourceName","title","description","gradeRange","subjects","join","trim","thumbnailUrl","activityType","inferActivityTypeFromTitle","gradeMin","extractGradeMin","gradeLevel","gradeMax","extractGradeMax","subject","mapTPTSubject","language","materials","duration","estimateDuration","groupSize","pedagogicalApproach","curriculumAlignments","createdBy","author","license","resourceUrls","metadata","rating","reviewCount","isFree","slice","limit","error","console","getActivityDetails","first","text","attr","gradeText","subjectTags","each","i","elem","includes","instructionSections","find","toLowerCase","queryParams","URLSearchParams","query","append","toString","mapToTPTSubject","get","$elem","ratingText","ratingMatch","match","parseFloat","undefined","reviewText","reviewMatch","parseInt","j","subElem","startsWith","segments","split","filter","length","titleLower","defaultGrade","toUpperCase","matches","tptSubject","subjectMap","ELA","Math","Science","French","Spanish","Art","Music","PE","Health","SEL","reverseMap","Mathematics","English","Arts"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/connectors/tptWebConnector.ts"],"sourcesContent":["import { BaseConnector } from './baseConnector';\nimport { SearchParams } from '../activityDiscoveryService';\nimport { ExternalActivity } from '@teaching-engine/database';\nimport { WebFetch } from '../../utils/webFetch';\nimport * as cheerio from 'cheerio';\n\ninterface TPTSearchResult {\n  title: string;\n  url: string;\n  price: string;\n  rating?: number;\n  reviewCount?: number;\n  description?: string;\n  author?: string;\n  thumbnailUrl?: string;\n  gradeRange?: string;\n  subjects?: string[];\n}\n\nexport class TPTWebConnector extends BaseConnector {\n  private webFetch: WebFetch;\n  private readonly baseUrl = 'https://www.teacherspayteachers.com';\n\n  constructor() {\n    super('TeachersPayTeachers');\n    this.webFetch = new WebFetch();\n  }\n\n  async search(\n    params: SearchParams,\n  ): Promise<Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'>[]> {\n    const activities: Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n\n    try {\n      // Build search URL with filters\n      const searchUrl = this.buildSearchUrl(params);\n      const html = await this.webFetch.fetch(searchUrl);\n      const $ = cheerio.load(html);\n\n      // Parse search results\n      const results = this.parseSearchResults($);\n\n      // Convert to ExternalActivity format, focusing on free resources\n      for (const result of results) {\n        // Skip paid resources if we want only free ones\n        if (result.price !== 'FREE' && result.price !== '$0.00') {\n          continue;\n        }\n\n        activities.push(\n          this.transformToExternalActivity({\n            externalId: this.extractIdFromUrl(result.url),\n            source: this.sourceName,\n            url: result.url,\n            title: result.title,\n            description:\n              result.description ||\n              `${result.gradeRange || ''} ${result.subjects?.join(', ') || ''}`.trim(),\n            thumbnailUrl: result.thumbnailUrl,\n            activityType: this.inferActivityTypeFromTitle(result.title),\n            gradeMin: this.extractGradeMin(result.gradeRange || '', params.gradeLevel),\n            gradeMax: this.extractGradeMax(result.gradeRange || '', params.gradeLevel),\n            subject: params.subject || this.mapTPTSubject(result.subjects?.[0]),\n            language: params.language || 'en',\n            materials: [],\n            duration: this.estimateDuration(result.title),\n            groupSize: 'flexible',\n            pedagogicalApproach: ['differentiated-instruction'],\n            curriculumAlignments: [],\n            createdBy: result.author || 'TPT Educator',\n            license: 'TPT Terms of Use',\n            resourceUrls: [result.url],\n            metadata: {\n              rating: result.rating,\n              reviewCount: result.reviewCount,\n              isFree: true,\n            },\n          }),\n        );\n      }\n\n      // Limit results\n      return activities.slice(0, params.limit || 20);\n    } catch (error) {\n      console.error('Error searching TPT:', error);\n      return [];\n    }\n  }\n\n  async getActivityDetails(\n    externalId: string,\n  ): Promise<Omit<ExternalActivity, 'id' | 'createdAt' | 'updatedAt'> | null> {\n    try {\n      const url = `${this.baseUrl}/Product/${externalId}`;\n      const html = await this.webFetch.fetch(url);\n      const $ = cheerio.load(html);\n\n      // Extract detailed information\n      const title = $('h1').first().text().trim();\n      const description =\n        $('.product-description').text().trim() ||\n        $('meta[property=\"og:description\"]').attr('content') ||\n        '';\n\n      const gradeText = $('.grade-range').text() || '';\n      const subjectTags: string[] = [];\n      $('.subject-tag').each((i, elem) => {\n        subjectTags.push($(elem).text().trim());\n      });\n\n      const thumbnailUrl = $('meta[property=\"og:image\"]').attr('content');\n      const author = $('.store-name').text().trim();\n      const price = $('.price-tag').text().trim();\n\n      // Only process free resources\n      if (!price.includes('FREE') && price !== '$0.00') {\n        return null;\n      }\n\n      // Look for materials and instructions\n      const materials: string[] = [];\n      const instructionSections = $('.product-details, .included-materials');\n      instructionSections.find('li').each((i, elem) => {\n        const text = $(elem).text().trim();\n        if (text.toLowerCase().includes('material') || text.toLowerCase().includes('supply')) {\n          materials.push(text);\n        }\n      });\n\n      return this.transformToExternalActivity({\n        externalId,\n        source: this.sourceName,\n        url,\n        title,\n        description,\n        thumbnailUrl,\n        activityType: this.inferActivityTypeFromTitle(title),\n        gradeMin: this.extractGradeMin(gradeText),\n        gradeMax: this.extractGradeMax(gradeText),\n        subject: this.mapTPTSubject(subjectTags[0]),\n        language: 'en',\n        materials,\n        duration: this.estimateDuration(title),\n        groupSize: 'flexible',\n        pedagogicalApproach: ['differentiated-instruction', 'hands-on-learning'],\n        curriculumAlignments: [],\n        createdBy: author,\n        license: 'TPT Terms of Use - Free Resource',\n        resourceUrls: [url],\n      });\n    } catch (error) {\n      console.error('Error fetching TPT activity details:', error);\n      return null;\n    }\n  }\n\n  private buildSearchUrl(params: SearchParams): string {\n    const queryParams = new URLSearchParams();\n\n    // Add search query\n    if (params.query) {\n      queryParams.append('q', params.query);\n    }\n\n    // Add grade filter\n    if (params.gradeLevel) {\n      queryParams.append('grade', params.gradeLevel.toString());\n    }\n\n    // Add subject filter\n    if (params.subject) {\n      queryParams.append('subject', this.mapToTPTSubject(params.subject));\n    }\n\n    // Filter for free resources only\n    queryParams.append('price', 'free');\n\n    // Add language filter if French\n    if (params.language === 'fr') {\n      queryParams.append('q', queryParams.get('q') + ' french franÃ§ais');\n    }\n\n    return `${this.baseUrl}/Browse/Search:${queryParams.toString()}`;\n  }\n\n  private parseSearchResults($: cheerio.CheerioAPI): TPTSearchResult[] {\n    const results: TPTSearchResult[] = [];\n\n    // Parse product cards\n    $('.product-card, .resource-card, .search-result-item').each((i, elem) => {\n      const $elem = $(elem);\n\n      const title = $elem.find('.product-title, .resource-title, h3').first().text().trim();\n      const url = $elem.find('a').first().attr('href');\n      const price = $elem.find('.price, .resource-price').text().trim();\n      const author = $elem.find('.author-name, .store-name').text().trim();\n      const thumbnailUrl = $elem.find('img').first().attr('src');\n\n      // Extract rating\n      const ratingText = $elem.find('.rating').text();\n      const ratingMatch = ratingText.match(/(\\d+\\.?\\d*)/);\n      const rating = ratingMatch ? parseFloat(ratingMatch[1]) : undefined;\n\n      // Extract review count\n      const reviewText = $elem.find('.review-count').text();\n      const reviewMatch = reviewText.match(/\\((\\d+)\\)/);\n      const reviewCount = reviewMatch ? parseInt(reviewMatch[1]) : undefined;\n\n      // Extract grade range\n      const gradeRange = $elem.find('.grade-range, .grades').text().trim();\n\n      // Extract subjects\n      const subjects: string[] = [];\n      $elem.find('.subject-tag, .subject').each((j, subElem) => {\n        subjects.push($(subElem).text().trim());\n      });\n\n      if (title && url) {\n        results.push({\n          title,\n          url: url.startsWith('http') ? url : `${this.baseUrl}${url}`,\n          price,\n          rating,\n          reviewCount,\n          author,\n          thumbnailUrl,\n          gradeRange,\n          subjects,\n        });\n      }\n    });\n\n    return results;\n  }\n\n  private extractIdFromUrl(url: string): string {\n    // Extract product ID from URL patterns like /Product/Activity-Name-123456\n    const match = url.match(/Product\\/[^/]+-(\\d+)/);\n    if (match) {\n      return match[1];\n    }\n\n    // Fallback: use last segment\n    const segments = url.split('/').filter((s) => s.length > 0);\n    return segments[segments.length - 1];\n  }\n\n  private inferActivityTypeFromTitle(title: string): string {\n    const titleLower = title.toLowerCase();\n\n    if (titleLower.includes('worksheet') || titleLower.includes('printable')) {\n      return 'worksheet';\n    } else if (titleLower.includes('lesson plan') || titleLower.includes('unit plan')) {\n      return 'lesson_plan';\n    } else if (\n      titleLower.includes('game') ||\n      titleLower.includes('bingo') ||\n      titleLower.includes('puzzle')\n    ) {\n      return 'game';\n    } else if (\n      titleLower.includes('experiment') ||\n      titleLower.includes('lab') ||\n      titleLower.includes('science')\n    ) {\n      return 'experiment';\n    } else if (titleLower.includes('project') || titleLower.includes('research')) {\n      return 'project';\n    } else if (\n      titleLower.includes('assessment') ||\n      titleLower.includes('test') ||\n      titleLower.includes('quiz')\n    ) {\n      return 'assessment';\n    } else if (titleLower.includes('center') || titleLower.includes('station')) {\n      return 'center_activity';\n    } else if (titleLower.includes('craft') || titleLower.includes('art')) {\n      return 'art_craft';\n    } else if (titleLower.includes('reading') || titleLower.includes('comprehension')) {\n      return 'reading';\n    } else if (titleLower.includes('writing') || titleLower.includes('journal')) {\n      return 'writing';\n    } else if (titleLower.includes('math') || titleLower.includes('number')) {\n      return 'math_activity';\n    }\n\n    return 'handson';\n  }\n\n  private extractGradeMin(gradeRange: string, defaultGrade?: number): number {\n    // Handle patterns like \"1st - 3rd\", \"K-2\", \"Grades 1-5\"\n    const match = gradeRange.match(/(\\d+|K)/i);\n    if (match) {\n      if (match[1].toUpperCase() === 'K') return 0;\n      return parseInt(match[1]);\n    }\n    return defaultGrade || 1;\n  }\n\n  private extractGradeMax(gradeRange: string, defaultGrade?: number): number {\n    // Look for the second number in range\n    const matches = gradeRange.match(/(\\d+|K)[^\\d]*(\\d+)?/i);\n    if (matches && matches[2]) {\n      return parseInt(matches[2]);\n    }\n    // If only one grade found, use it\n    if (matches && matches[1] && matches[1] !== 'K') {\n      return parseInt(matches[1]);\n    }\n    return defaultGrade || 8;\n  }\n\n  private estimateDuration(title: string): number {\n    const titleLower = title.toLowerCase();\n\n    if (titleLower.includes('quick') || titleLower.includes('5 minute')) {\n      return 5;\n    } else if (titleLower.includes('15 minute') || titleLower.includes('warm up')) {\n      return 15;\n    } else if (titleLower.includes('30 minute')) {\n      return 30;\n    } else if (titleLower.includes('full lesson') || titleLower.includes('complete lesson')) {\n      return 45;\n    } else if (titleLower.includes('unit') || titleLower.includes('week')) {\n      return 60;\n    } else if (titleLower.includes('center') || titleLower.includes('station')) {\n      return 20;\n    }\n\n    return 30; // Default duration\n  }\n\n  private mapTPTSubject(tptSubject?: string): string {\n    if (!tptSubject) return 'General';\n\n    const subjectMap: { [key: string]: string } = {\n      'English Language Arts': 'English',\n      ELA: 'English',\n      Math: 'Mathematics',\n      Science: 'Science',\n      'Social Studies': 'Social Studies',\n      French: 'French',\n      Spanish: 'French', // Map to French for our French immersion context\n      Art: 'Arts',\n      Music: 'Arts',\n      'Physical Education': 'Physical Education',\n      PE: 'Physical Education',\n      Health: 'Health',\n      'Character Education': 'Social Emotional Learning',\n      SEL: 'Social Emotional Learning',\n    };\n\n    return subjectMap[tptSubject] || tptSubject;\n  }\n\n  private mapToTPTSubject(subject: string): string {\n    const reverseMap: { [key: string]: string } = {\n      Mathematics: 'Math',\n      English: 'English Language Arts',\n      Science: 'Science',\n      'Social Studies': 'Social Studies',\n      French: 'French',\n      Arts: 'Art',\n      'Physical Education': 'Physical Education',\n      Health: 'Health',\n      'Social Emotional Learning': 'Character Education',\n    };\n\n    return reverseMap[subject] || subject;\n  }\n}\n"],"mappingsoCM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AApCN,SAASE,aAAa,QAAQ,iBAAiB;AAG/C,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAO,KAAKC,OAAO,MAAM,SAAS;AAelC,OAAM,MAAOC,eAAgB,SAAQH,aAAa;EACxCI,QAAQ;EACCC,OAAO;EAAA;EAAA,CAAAP,cAAA,GAAAQ,CAAA,OAAG,qCAAqC;EAEhEC,YAAA;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAQ,CAAA;IACE,KAAK,CAAC,qBAAqB,CAAC;IAAC;IAAAR,cAAA,GAAAQ,CAAA;IAC7B,IAAI,CAACF,QAAQ,GAAG,IAAIH,QAAQ,EAAE;EAChC;EAEA,MAAMQ,MAAMA,CACVC,MAAoB;IAAA;IAAAZ,cAAA,GAAAU,CAAA;IAEpB,MAAMG,UAAU;IAAA;IAAA,CAAAb,cAAA,GAAAQ,CAAA,OAA+D,EAAE;IAAC;IAAAR,cAAA,GAAAQ,CAAA;IAElF,IAAI;MACF;MACA,MAAMM,SAAS;MAAA;MAAA,CAAAd,cAAA,GAAAQ,CAAA,OAAG,IAAI,CAACO,cAAc,CAACH,MAAM,CAAC;MAC7C,MAAMI,IAAI;MAAA;MAAA,CAAAhB,cAAA,GAAAQ,CAAA,OAAG,MAAM,IAAI,CAACF,QAAQ,CAACW,KAAK,CAACH,SAAS,CAAC;MACjD,MAAMI,CAAC;MAAA;MAAA,CAAAlB,cAAA,GAAAQ,CAAA,OAAGJ,OAAO,CAACe,IAAI,CAACH,IAAI,CAAC;MAE5B;MACA,MAAMI,OAAO;MAAA;MAAA,CAAApB,cAAA,GAAAQ,CAAA,OAAG,IAAI,CAACa,kBAAkB,CAACH,CAAC,CAAC;MAE1C;MAAA;MAAAlB,cAAA,GAAAQ,CAAA;MACA,KAAK,MAAMc,MAAM,IAAIF,OAAO,EAAE;QAAA;QAAApB,cAAA,GAAAQ,CAAA;QAC5B;QACA;QAAI;QAAA,CAAAR,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACE,KAAK,KAAK,MAAM;QAAA;QAAA,CAAAxB,cAAA,GAAAuB,CAAA,UAAID,MAAM,CAACE,KAAK,KAAK,OAAO,GAAE;UAAA;UAAAxB,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAQ,CAAA;UACvD;QACF,CAAC;QAAA;QAAA;UAAAR,cAAA,GAAAuB,CAAA;QAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAEDK,UAAU,CAACY,IAAI,CACb,IAAI,CAACC,2BAA2B,CAAC;UAC/BC,UAAU,EAAE,IAAI,CAACC,gBAAgB,CAACN,MAAM,CAACO,GAAG,CAAC;UAC7CC,MAAM,EAAE,IAAI,CAACC,UAAU;UACvBF,GAAG,EAAEP,MAAM,CAACO,GAAG;UACfG,KAAK,EAAEV,MAAM,CAACU,KAAK;UACnBC,WAAW;UACT;UAAA,CAAAjC,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACW,WAAW;UAAA;UAAA,CAAAjC,cAAA,GAAAuB,CAAA,UAClB;UAAG;UAAA,CAAAvB,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACY,UAAU;UAAA;UAAA,CAAAlC,cAAA,GAAAuB,CAAA,UAAI,EAAE;UAAI;UAAA,CAAAvB,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACa,QAAQ,EAAEC,IAAI,CAAC,IAAI,CAAC;UAAA;UAAA,CAAApC,cAAA,GAAAuB,CAAA,UAAI,EAAE,GAAE,CAACc,IAAI,EAAE;UAC1EC,YAAY,EAAEhB,MAAM,CAACgB,YAAY;UACjCC,YAAY,EAAE,IAAI,CAACC,0BAA0B,CAAClB,MAAM,CAACU,KAAK,CAAC;UAC3DS,QAAQ,EAAE,IAAI,CAACC,eAAe;UAAC;UAAA,CAAA1C,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACY,UAAU;UAAA;UAAA,CAAAlC,cAAA,GAAAuB,CAAA,UAAI,EAAE,GAAEX,MAAM,CAAC+B,UAAU,CAAC;UAC1EC,QAAQ,EAAE,IAAI,CAACC,eAAe;UAAC;UAAA,CAAA7C,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACY,UAAU;UAAA;UAAA,CAAAlC,cAAA,GAAAuB,CAAA,UAAI,EAAE,GAAEX,MAAM,CAAC+B,UAAU,CAAC;UAC1EG,OAAO;UAAE;UAAA,CAAA9C,cAAA,GAAAuB,CAAA,UAAAX,MAAM,CAACkC,OAAO;UAAA;UAAA,CAAA9C,cAAA,GAAAuB,CAAA,UAAI,IAAI,CAACwB,aAAa,CAACzB,MAAM,CAACa,QAAQ,GAAG,CAAC,CAAC,CAAC;UACnEa,QAAQ;UAAE;UAAA,CAAAhD,cAAA,GAAAuB,CAAA,UAAAX,MAAM,CAACoC,QAAQ;UAAA;UAAA,CAAAhD,cAAA,GAAAuB,CAAA,UAAI,IAAI;UACjC0B,SAAS,EAAE,EAAE;UACbC,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAAC7B,MAAM,CAACU,KAAK,CAAC;UAC7CoB,SAAS,EAAE,UAAU;UACrBC,mBAAmB,EAAE,CAAC,4BAA4B,CAAC;UACnDC,oBAAoB,EAAE,EAAE;UACxBC,SAAS;UAAE;UAAA,CAAAvD,cAAA,GAAAuB,CAAA,UAAAD,MAAM,CAACkC,MAAM;UAAA;UAAA,CAAAxD,cAAA,GAAAuB,CAAA,UAAI,cAAc;UAC1CkC,OAAO,EAAE,kBAAkB;UAC3BC,YAAY,EAAE,CAACpC,MAAM,CAACO,GAAG,CAAC;UAC1B8B,QAAQ,EAAE;YACRC,MAAM,EAAEtC,MAAM,CAACsC,MAAM;YACrBC,WAAW,EAAEvC,MAAM,CAACuC,WAAW;YAC/BC,MAAM,EAAE;;SAEX,CAAC,CACH;MACH;MAEA;MAAA;MAAA9D,cAAA,GAAAQ,CAAA;MACA,OAAOK,UAAU,CAACkD,KAAK,CAAC,CAAC;MAAE;MAAA,CAAA/D,cAAA,GAAAuB,CAAA,WAAAX,MAAM,CAACoD,KAAK;MAAA;MAAA,CAAAhE,cAAA,GAAAuB,CAAA,WAAI,EAAE,EAAC;IAChD,CAAC,CAAC,OAAO0C,KAAK,EAAE;MAAA;MAAAjE,cAAA,GAAAQ,CAAA;MACd0D,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAAC;MAAAjE,cAAA,GAAAQ,CAAA;MAC7C,OAAO,EAAE;IACX;EACF;EAEA,MAAM2D,kBAAkBA,CACtBxC,UAAkB;IAAA;IAAA3B,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAQ,CAAA;IAElB,IAAI;MACF,MAAMqB,GAAG;MAAA;MAAA,CAAA7B,cAAA,GAAAQ,CAAA,QAAG,GAAG,IAAI,CAACD,OAAO,YAAYoB,UAAU,EAAE;MACnD,MAAMX,IAAI;MAAA;MAAA,CAAAhB,cAAA,GAAAQ,CAAA,QAAG,MAAM,IAAI,CAACF,QAAQ,CAACW,KAAK,CAACY,GAAG,CAAC;MAC3C,MAAMX,CAAC;MAAA;MAAA,CAAAlB,cAAA,GAAAQ,CAAA,QAAGJ,OAAO,CAACe,IAAI,CAACH,IAAI,CAAC;MAE5B;MACA,MAAMgB,KAAK;MAAA;MAAA,CAAAhC,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAAC,IAAI,CAAC,CAACkD,KAAK,EAAE,CAACC,IAAI,EAAE,CAAChC,IAAI,EAAE;MAC3C,MAAMJ,WAAW;MAAA;MAAA,CAAAjC,cAAA,GAAAQ,CAAA;MACf;MAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAL,CAAC,CAAC,sBAAsB,CAAC,CAACmD,IAAI,EAAE,CAAChC,IAAI,EAAE;MAAA;MAAA,CAAArC,cAAA,GAAAuB,CAAA,WACvCL,CAAC,CAAC,iCAAiC,CAAC,CAACoD,IAAI,CAAC,SAAS,CAAC;MAAA;MAAA,CAAAtE,cAAA,GAAAuB,CAAA,WACpD,EAAE;MAEJ,MAAMgD,SAAS;MAAA;MAAA,CAAAvE,cAAA,GAAAQ,CAAA;MAAG;MAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAL,CAAC,CAAC,cAAc,CAAC,CAACmD,IAAI,EAAE;MAAA;MAAA,CAAArE,cAAA,GAAAuB,CAAA,WAAI,EAAE;MAChD,MAAMiD,WAAW;MAAA;MAAA,CAAAxE,cAAA,GAAAQ,CAAA,QAAa,EAAE;MAAC;MAAAR,cAAA,GAAAQ,CAAA;MACjCU,CAAC,CAAC,cAAc,CAAC,CAACuD,IAAI,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAI;QAAA;QAAA3E,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAQ,CAAA;QACjCgE,WAAW,CAAC/C,IAAI,CAACP,CAAC,CAACyD,IAAI,CAAC,CAACN,IAAI,EAAE,CAAChC,IAAI,EAAE,CAAC;MACzC,CAAC,CAAC;MAEF,MAAMC,YAAY;MAAA;MAAA,CAAAtC,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAAC,2BAA2B,CAAC,CAACoD,IAAI,CAAC,SAAS,CAAC;MACnE,MAAMd,MAAM;MAAA;MAAA,CAAAxD,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAAC,aAAa,CAAC,CAACmD,IAAI,EAAE,CAAChC,IAAI,EAAE;MAC7C,MAAMb,KAAK;MAAA;MAAA,CAAAxB,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAAC,YAAY,CAAC,CAACmD,IAAI,EAAE,CAAChC,IAAI,EAAE;MAE3C;MAAA;MAAArC,cAAA,GAAAQ,CAAA;MACA;MAAI;MAAA,CAAAR,cAAA,GAAAuB,CAAA,YAACC,KAAK,CAACoD,QAAQ,CAAC,MAAM,CAAC;MAAA;MAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIC,KAAK,KAAK,OAAO,GAAE;QAAA;QAAAxB,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAChD,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAR,cAAA,GAAAuB,CAAA;MAAA;MAED;MACA,MAAM0B,SAAS;MAAA;MAAA,CAAAjD,cAAA,GAAAQ,CAAA,QAAa,EAAE;MAC9B,MAAMqE,mBAAmB;MAAA;MAAA,CAAA7E,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAAC,uCAAuC,CAAC;MAAC;MAAAlB,cAAA,GAAAQ,CAAA;MACvEqE,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAAC,CAACL,IAAI,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAI;QAAA;QAAA3E,cAAA,GAAAU,CAAA;QAC9C,MAAM2D,IAAI;QAAA;QAAA,CAAArE,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAACyD,IAAI,CAAC,CAACN,IAAI,EAAE,CAAChC,IAAI,EAAE;QAAC;QAAArC,cAAA,GAAAQ,CAAA;QACnC;QAAI;QAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAA8C,IAAI,CAACU,WAAW,EAAE,CAACH,QAAQ,CAAC,UAAU,CAAC;QAAA;QAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAI8C,IAAI,CAACU,WAAW,EAAE,CAACH,QAAQ,CAAC,QAAQ,CAAC,GAAE;UAAA;UAAA5E,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAQ,CAAA;UACpFyC,SAAS,CAACxB,IAAI,CAAC4C,IAAI,CAAC;QACtB,CAAC;QAAA;QAAA;UAAArE,cAAA,GAAAuB,CAAA;QAAA;MACH,CAAC,CAAC;MAAC;MAAAvB,cAAA,GAAAQ,CAAA;MAEH,OAAO,IAAI,CAACkB,2BAA2B,CAAC;QACtCC,UAAU;QACVG,MAAM,EAAE,IAAI,CAACC,UAAU;QACvBF,GAAG;QACHG,KAAK;QACLC,WAAW;QACXK,YAAY;QACZC,YAAY,EAAE,IAAI,CAACC,0BAA0B,CAACR,KAAK,CAAC;QACpDS,QAAQ,EAAE,IAAI,CAACC,eAAe,CAAC6B,SAAS,CAAC;QACzC3B,QAAQ,EAAE,IAAI,CAACC,eAAe,CAAC0B,SAAS,CAAC;QACzCzB,OAAO,EAAE,IAAI,CAACC,aAAa,CAACyB,WAAW,CAAC,CAAC,CAAC,CAAC;QAC3CxB,QAAQ,EAAE,IAAI;QACdC,SAAS;QACTC,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACnB,KAAK,CAAC;QACtCoB,SAAS,EAAE,UAAU;QACrBC,mBAAmB,EAAE,CAAC,4BAA4B,EAAE,mBAAmB,CAAC;QACxEC,oBAAoB,EAAE,EAAE;QACxBC,SAAS,EAAEC,MAAM;QACjBC,OAAO,EAAE,kCAAkC;QAC3CC,YAAY,EAAE,CAAC7B,GAAG;OACnB,CAAC;IACJ,CAAC,CAAC,OAAOoC,KAAK,EAAE;MAAA;MAAAjE,cAAA,GAAAQ,CAAA;MACd0D,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAAC;MAAAjE,cAAA,GAAAQ,CAAA;MAC7D,OAAO,IAAI;IACb;EACF;EAEQO,cAAcA,CAACH,MAAoB;IAAA;IAAAZ,cAAA,GAAAU,CAAA;IACzC,MAAMsE,WAAW;IAAA;IAAA,CAAAhF,cAAA,GAAAQ,CAAA,QAAG,IAAIyE,eAAe,EAAE;IAEzC;IAAA;IAAAjF,cAAA,GAAAQ,CAAA;IACA,IAAII,MAAM,CAACsE,KAAK,EAAE;MAAA;MAAAlF,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAChBwE,WAAW,CAACG,MAAM,CAAC,GAAG,EAAEvE,MAAM,CAACsE,KAAK,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAlF,cAAA,GAAAuB,CAAA;IAAA;IAED;IAAAvB,cAAA,GAAAQ,CAAA;IACA,IAAII,MAAM,CAAC+B,UAAU,EAAE;MAAA;MAAA3C,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MACrBwE,WAAW,CAACG,MAAM,CAAC,OAAO,EAAEvE,MAAM,CAAC+B,UAAU,CAACyC,QAAQ,EAAE,CAAC;IAC3D,CAAC;IAAA;IAAA;MAAApF,cAAA,GAAAuB,CAAA;IAAA;IAED;IAAAvB,cAAA,GAAAQ,CAAA;IACA,IAAII,MAAM,CAACkC,OAAO,EAAE;MAAA;MAAA9C,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAClBwE,WAAW,CAACG,MAAM,CAAC,SAAS,EAAE,IAAI,CAACE,eAAe,CAACzE,MAAM,CAACkC,OAAO,CAAC,CAAC;IACrE,CAAC;IAAA;IAAA;MAAA9C,cAAA,GAAAuB,CAAA;IAAA;IAED;IAAAvB,cAAA,GAAAQ,CAAA;IACAwE,WAAW,CAACG,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IAEnC;IAAA;IAAAnF,cAAA,GAAAQ,CAAA;IACA,IAAII,MAAM,CAACoC,QAAQ,KAAK,IAAI,EAAE;MAAA;MAAAhD,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAC5BwE,WAAW,CAACG,MAAM,CAAC,GAAG,EAAEH,WAAW,CAACM,GAAG,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;IACpE,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAAuB,CAAA;IAAA;IAAAvB,cAAA,GAAAQ,CAAA;IAED,OAAO,GAAG,IAAI,CAACD,OAAO,kBAAkByE,WAAW,CAACI,QAAQ,EAAE,EAAE;EAClE;EAEQ/D,kBAAkBA,CAACH,CAAqB;IAAA;IAAAlB,cAAA,GAAAU,CAAA;IAC9C,MAAMU,OAAO;IAAA;IAAA,CAAApB,cAAA,GAAAQ,CAAA,QAAsB,EAAE;IAErC;IAAA;IAAAR,cAAA,GAAAQ,CAAA;IACAU,CAAC,CAAC,oDAAoD,CAAC,CAACuD,IAAI,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAI;MAAA;MAAA3E,cAAA,GAAAU,CAAA;MACvE,MAAM6E,KAAK;MAAA;MAAA,CAAAvF,cAAA,GAAAQ,CAAA,QAAGU,CAAC,CAACyD,IAAI,CAAC;MAErB,MAAM3C,KAAK;MAAA;MAAA,CAAAhC,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,qCAAqC,CAAC,CAACV,KAAK,EAAE,CAACC,IAAI,EAAE,CAAChC,IAAI,EAAE;MACrF,MAAMR,GAAG;MAAA;MAAA,CAAA7B,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,GAAG,CAAC,CAACV,KAAK,EAAE,CAACE,IAAI,CAAC,MAAM,CAAC;MAChD,MAAM9C,KAAK;MAAA;MAAA,CAAAxB,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,yBAAyB,CAAC,CAACT,IAAI,EAAE,CAAChC,IAAI,EAAE;MACjE,MAAMmB,MAAM;MAAA;MAAA,CAAAxD,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,2BAA2B,CAAC,CAACT,IAAI,EAAE,CAAChC,IAAI,EAAE;MACpE,MAAMC,YAAY;MAAA;MAAA,CAAAtC,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,KAAK,CAAC,CAACV,KAAK,EAAE,CAACE,IAAI,CAAC,KAAK,CAAC;MAE1D;MACA,MAAMkB,UAAU;MAAA;MAAA,CAAAxF,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,SAAS,CAAC,CAACT,IAAI,EAAE;MAC/C,MAAMoB,WAAW;MAAA;MAAA,CAAAzF,cAAA,GAAAQ,CAAA,QAAGgF,UAAU,CAACE,KAAK,CAAC,aAAa,CAAC;MACnD,MAAM9B,MAAM;MAAA;MAAA,CAAA5D,cAAA,GAAAQ,CAAA,QAAGiF,WAAW;MAAA;MAAA,CAAAzF,cAAA,GAAAuB,CAAA,WAAGoE,UAAU,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC;MAAA;MAAA,CAAAzF,cAAA,GAAAuB,CAAA,WAAGqE,SAAS;MAEnE;MACA,MAAMC,UAAU;MAAA;MAAA,CAAA7F,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,eAAe,CAAC,CAACT,IAAI,EAAE;MACrD,MAAMyB,WAAW;MAAA;MAAA,CAAA9F,cAAA,GAAAQ,CAAA,QAAGqF,UAAU,CAACH,KAAK,CAAC,WAAW,CAAC;MACjD,MAAM7B,WAAW;MAAA;MAAA,CAAA7D,cAAA,GAAAQ,CAAA,QAAGsF,WAAW;MAAA;MAAA,CAAA9F,cAAA,GAAAuB,CAAA,WAAGwE,QAAQ,CAACD,WAAW,CAAC,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA9F,cAAA,GAAAuB,CAAA,WAAGqE,SAAS;MAEtE;MACA,MAAM1D,UAAU;MAAA;MAAA,CAAAlC,cAAA,GAAAQ,CAAA,QAAG+E,KAAK,CAACT,IAAI,CAAC,uBAAuB,CAAC,CAACT,IAAI,EAAE,CAAChC,IAAI,EAAE;MAEpE;MACA,MAAMF,QAAQ;MAAA;MAAA,CAAAnC,cAAA,GAAAQ,CAAA,QAAa,EAAE;MAAC;MAAAR,cAAA,GAAAQ,CAAA;MAC9B+E,KAAK,CAACT,IAAI,CAAC,wBAAwB,CAAC,CAACL,IAAI,CAAC,CAACuB,CAAC,EAAEC,OAAO,KAAI;QAAA;QAAAjG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAQ,CAAA;QACvD2B,QAAQ,CAACV,IAAI,CAACP,CAAC,CAAC+E,OAAO,CAAC,CAAC5B,IAAI,EAAE,CAAChC,IAAI,EAAE,CAAC;MACzC,CAAC,CAAC;MAAC;MAAArC,cAAA,GAAAQ,CAAA;MAEH;MAAI;MAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAS,KAAK;MAAA;MAAA,CAAAhC,cAAA,GAAAuB,CAAA,WAAIM,GAAG,GAAE;QAAA;QAAA7B,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAChBY,OAAO,CAACK,IAAI,CAAC;UACXO,KAAK;UACLH,GAAG,EAAEA,GAAG,CAACqE,UAAU,CAAC,MAAM,CAAC;UAAA;UAAA,CAAAlG,cAAA,GAAAuB,CAAA,WAAGM,GAAG;UAAA;UAAA,CAAA7B,cAAA,GAAAuB,CAAA,WAAG,GAAG,IAAI,CAAChB,OAAO,GAAGsB,GAAG,EAAE;UAC3DL,KAAK;UACLoC,MAAM;UACNC,WAAW;UACXL,MAAM;UACNlB,YAAY;UACZJ,UAAU;UACVC;SACD,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAnC,cAAA,GAAAuB,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAvB,cAAA,GAAAQ,CAAA;IAEH,OAAOY,OAAO;EAChB;EAEQQ,gBAAgBA,CAACC,GAAW;IAAA;IAAA7B,cAAA,GAAAU,CAAA;IAClC;IACA,MAAMgF,KAAK;IAAA;IAAA,CAAA1F,cAAA,GAAAQ,CAAA,QAAGqB,GAAG,CAAC6D,KAAK,CAAC,sBAAsB,CAAC;IAAC;IAAA1F,cAAA,GAAAQ,CAAA;IAChD,IAAIkF,KAAK,EAAE;MAAA;MAAA1F,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MACT,OAAOkF,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC;IAAA;IAAA;MAAA1F,cAAA,GAAAuB,CAAA;IAAA;IAED;IACA,MAAM4E,QAAQ;IAAA;IAAA,CAAAnG,cAAA,GAAAQ,CAAA,QAAGqB,GAAG,CAACuE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAE7F,CAAC,IAAK;MAAA;MAAAR,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAQ,CAAA;MAAA,OAAAA,CAAC,CAAC8F,MAAM,GAAG,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAtG,cAAA,GAAAQ,CAAA;IAC5D,OAAO2F,QAAQ,CAACA,QAAQ,CAACG,MAAM,GAAG,CAAC,CAAC;EACtC;EAEQ9D,0BAA0BA,CAACR,KAAa;IAAA;IAAAhC,cAAA,GAAAU,CAAA;IAC9C,MAAM6F,UAAU;IAAA;IAAA,CAAAvG,cAAA,GAAAQ,CAAA,QAAGwB,KAAK,CAAC+C,WAAW,EAAE;IAAC;IAAA/E,cAAA,GAAAQ,CAAA;IAEvC;IAAI;IAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,WAAW,CAAC;IAAA;IAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,WAAW,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MACxE,OAAO,WAAW;IACpB,CAAC,MAAM;MAAA;MAAAR,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAAA;MAAI;MAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,aAAa,CAAC;MAAA;MAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,WAAW,CAAC,GAAE;QAAA;QAAA5E,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QACjF,OAAO,aAAa;MACtB,CAAC,MAAM;QAAA;QAAAR,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAAA;QACL;QAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,MAAM,CAAC;QAAA;QAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAC3BgF,UAAU,CAAC3B,QAAQ,CAAC,OAAO,CAAC;QAAA;QAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAC5BgF,UAAU,CAAC3B,QAAQ,CAAC,QAAQ,CAAC,GAC7B;UAAA;UAAA5E,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAQ,CAAA;UACA,OAAO,MAAM;QACf,CAAC,MAAM;UAAA;UAAAR,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAQ,CAAA;UAAA;UACL;UAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,YAAY,CAAC;UAAA;UAAA,CAAA5E,cAAA,GAAAuB,CAAA,WACjCgF,UAAU,CAAC3B,QAAQ,CAAC,KAAK,CAAC;UAAA;UAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAC1BgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC,GAC9B;YAAA;YAAA5E,cAAA,GAAAuB,CAAA;YAAAvB,cAAA,GAAAQ,CAAA;YACA,OAAO,YAAY;UACrB,CAAC,MAAM;YAAA;YAAAR,cAAA,GAAAuB,CAAA;YAAAvB,cAAA,GAAAQ,CAAA;YAAA;YAAI;YAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC;YAAA;YAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,UAAU,CAAC,GAAE;cAAA;cAAA5E,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAQ,CAAA;cAC5E,OAAO,SAAS;YAClB,CAAC,MAAM;cAAA;cAAAR,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAQ,CAAA;cAAA;cACL;cAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,YAAY,CAAC;cAAA;cAAA,CAAA5E,cAAA,GAAAuB,CAAA,WACjCgF,UAAU,CAAC3B,QAAQ,CAAC,MAAM,CAAC;cAAA;cAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAC3BgF,UAAU,CAAC3B,QAAQ,CAAC,MAAM,CAAC,GAC3B;gBAAA;gBAAA5E,cAAA,GAAAuB,CAAA;gBAAAvB,cAAA,GAAAQ,CAAA;gBACA,OAAO,YAAY;cACrB,CAAC,MAAM;gBAAA;gBAAAR,cAAA,GAAAuB,CAAA;gBAAAvB,cAAA,GAAAQ,CAAA;gBAAA;gBAAI;gBAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,QAAQ,CAAC;gBAAA;gBAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC,GAAE;kBAAA;kBAAA5E,cAAA,GAAAuB,CAAA;kBAAAvB,cAAA,GAAAQ,CAAA;kBAC1E,OAAO,iBAAiB;gBAC1B,CAAC,MAAM;kBAAA;kBAAAR,cAAA,GAAAuB,CAAA;kBAAAvB,cAAA,GAAAQ,CAAA;kBAAA;kBAAI;kBAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,OAAO,CAAC;kBAAA;kBAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,KAAK,CAAC,GAAE;oBAAA;oBAAA5E,cAAA,GAAAuB,CAAA;oBAAAvB,cAAA,GAAAQ,CAAA;oBACrE,OAAO,WAAW;kBACpB,CAAC,MAAM;oBAAA;oBAAAR,cAAA,GAAAuB,CAAA;oBAAAvB,cAAA,GAAAQ,CAAA;oBAAA;oBAAI;oBAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC;oBAAA;oBAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,eAAe,CAAC,GAAE;sBAAA;sBAAA5E,cAAA,GAAAuB,CAAA;sBAAAvB,cAAA,GAAAQ,CAAA;sBACjF,OAAO,SAAS;oBAClB,CAAC,MAAM;sBAAA;sBAAAR,cAAA,GAAAuB,CAAA;sBAAAvB,cAAA,GAAAQ,CAAA;sBAAA;sBAAI;sBAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC;sBAAA;sBAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC,GAAE;wBAAA;wBAAA5E,cAAA,GAAAuB,CAAA;wBAAAvB,cAAA,GAAAQ,CAAA;wBAC3E,OAAO,SAAS;sBAClB,CAAC,MAAM;wBAAA;wBAAAR,cAAA,GAAAuB,CAAA;wBAAAvB,cAAA,GAAAQ,CAAA;wBAAA;wBAAI;wBAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,MAAM,CAAC;wBAAA;wBAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,QAAQ,CAAC,GAAE;0BAAA;0BAAA5E,cAAA,GAAAuB,CAAA;0BAAAvB,cAAA,GAAAQ,CAAA;0BACvE,OAAO,eAAe;wBACxB,CAAC;wBAAA;wBAAA;0BAAAR,cAAA,GAAAuB,CAAA;wBAAA;sBAAD;oBAAA;kBAAA;gBAAA;cAAA;YAAA;UAAA;QAAA;MAAA;IAAA;IAAC;IAAAvB,cAAA,GAAAQ,CAAA;IAED,OAAO,SAAS;EAClB;EAEQkC,eAAeA,CAACR,UAAkB,EAAEsE,YAAqB;IAAA;IAAAxG,cAAA,GAAAU,CAAA;IAC/D;IACA,MAAMgF,KAAK;IAAA;IAAA,CAAA1F,cAAA,GAAAQ,CAAA,SAAG0B,UAAU,CAACwD,KAAK,CAAC,UAAU,CAAC;IAAC;IAAA1F,cAAA,GAAAQ,CAAA;IAC3C,IAAIkF,KAAK,EAAE;MAAA;MAAA1F,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MACT,IAAIkF,KAAK,CAAC,CAAC,CAAC,CAACe,WAAW,EAAE,KAAK,GAAG,EAAE;QAAA;QAAAzG,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAAA,OAAO,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAR,cAAA,GAAAuB,CAAA;MAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAC7C,OAAOuF,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAAA;IAAA;MAAA1F,cAAA,GAAAuB,CAAA;IAAA;IAAAvB,cAAA,GAAAQ,CAAA;IACD,OAAO,2BAAAR,cAAA,GAAAuB,CAAA,WAAAiF,YAAY;IAAA;IAAA,CAAAxG,cAAA,GAAAuB,CAAA,WAAI,CAAC;EAC1B;EAEQsB,eAAeA,CAACX,UAAkB,EAAEsE,YAAqB;IAAA;IAAAxG,cAAA,GAAAU,CAAA;IAC/D;IACA,MAAMgG,OAAO;IAAA;IAAA,CAAA1G,cAAA,GAAAQ,CAAA,SAAG0B,UAAU,CAACwD,KAAK,CAAC,sBAAsB,CAAC;IAAC;IAAA1F,cAAA,GAAAQ,CAAA;IACzD;IAAI;IAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAmF,OAAO;IAAA;IAAA,CAAA1G,cAAA,GAAAuB,CAAA,WAAImF,OAAO,CAAC,CAAC,CAAC,GAAE;MAAA;MAAA1G,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MACzB,OAAOuF,QAAQ,CAACW,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAAuB,CAAA;IAAA;IACD;IAAAvB,cAAA,GAAAQ,CAAA;IACA;IAAI;IAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAmF,OAAO;IAAA;IAAA,CAAA1G,cAAA,GAAAuB,CAAA,WAAImF,OAAO,CAAC,CAAC,CAAC;IAAA;IAAA,CAAA1G,cAAA,GAAAuB,CAAA,WAAImF,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,GAAE;MAAA;MAAA1G,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAC/C,OAAOuF,QAAQ,CAACW,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAAA;IAAA;MAAA1G,cAAA,GAAAuB,CAAA;IAAA;IAAAvB,cAAA,GAAAQ,CAAA;IACD,OAAO,2BAAAR,cAAA,GAAAuB,CAAA,WAAAiF,YAAY;IAAA;IAAA,CAAAxG,cAAA,GAAAuB,CAAA,WAAI,CAAC;EAC1B;EAEQ4B,gBAAgBA,CAACnB,KAAa;IAAA;IAAAhC,cAAA,GAAAU,CAAA;IACpC,MAAM6F,UAAU;IAAA;IAAA,CAAAvG,cAAA,GAAAQ,CAAA,SAAGwB,KAAK,CAAC+C,WAAW,EAAE;IAAC;IAAA/E,cAAA,GAAAQ,CAAA;IAEvC;IAAI;IAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,OAAO,CAAC;IAAA;IAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,UAAU,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MACnE,OAAO,CAAC;IACV,CAAC,MAAM;MAAA;MAAAR,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAAA;MAAI;MAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,WAAW,CAAC;MAAA;MAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC,GAAE;QAAA;QAAA5E,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAC7E,OAAO,EAAE;MACX,CAAC,MAAM;QAAA;QAAAR,cAAA,GAAAuB,CAAA;QAAAvB,cAAA,GAAAQ,CAAA;QAAA,IAAI+F,UAAU,CAAC3B,QAAQ,CAAC,WAAW,CAAC,EAAE;UAAA;UAAA5E,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAQ,CAAA;UAC3C,OAAO,EAAE;QACX,CAAC,MAAM;UAAA;UAAAR,cAAA,GAAAuB,CAAA;UAAAvB,cAAA,GAAAQ,CAAA;UAAA;UAAI;UAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,aAAa,CAAC;UAAA;UAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,iBAAiB,CAAC,GAAE;YAAA;YAAA5E,cAAA,GAAAuB,CAAA;YAAAvB,cAAA,GAAAQ,CAAA;YACvF,OAAO,EAAE;UACX,CAAC,MAAM;YAAA;YAAAR,cAAA,GAAAuB,CAAA;YAAAvB,cAAA,GAAAQ,CAAA;YAAA;YAAI;YAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,MAAM,CAAC;YAAA;YAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,MAAM,CAAC,GAAE;cAAA;cAAA5E,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAQ,CAAA;cACrE,OAAO,EAAE;YACX,CAAC,MAAM;cAAA;cAAAR,cAAA,GAAAuB,CAAA;cAAAvB,cAAA,GAAAQ,CAAA;cAAA;cAAI;cAAA,CAAAR,cAAA,GAAAuB,CAAA,WAAAgF,UAAU,CAAC3B,QAAQ,CAAC,QAAQ,CAAC;cAAA;cAAA,CAAA5E,cAAA,GAAAuB,CAAA,WAAIgF,UAAU,CAAC3B,QAAQ,CAAC,SAAS,CAAC,GAAE;gBAAA;gBAAA5E,cAAA,GAAAuB,CAAA;gBAAAvB,cAAA,GAAAQ,CAAA;gBAC1E,OAAO,EAAE;cACX,CAAC;cAAA;cAAA;gBAAAR,cAAA,GAAAuB,CAAA;cAAA;YAAD;UAAA;QAAA;MAAA;IAAA;IAAC;IAAAvB,cAAA,GAAAQ,CAAA;IAED,OAAO,EAAE,CAAC,CAAC;EACb;EAEQuC,aAAaA,CAAC4D,UAAmB;IAAA;IAAA3G,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAQ,CAAA;IACvC,IAAI,CAACmG,UAAU,EAAE;MAAA;MAAA3G,cAAA,GAAAuB,CAAA;MAAAvB,cAAA,GAAAQ,CAAA;MAAA,OAAO,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAR,cAAA,GAAAuB,CAAA;IAAA;IAElC,MAAMqF,UAAU;IAAA;IAAA,CAAA5G,cAAA,GAAAQ,CAAA,SAA8B;MAC5C,uBAAuB,EAAE,SAAS;MAClCqG,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,aAAa;MACnBC,OAAO,EAAE,SAAS;MAClB,gBAAgB,EAAE,gBAAgB;MAClCC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE,QAAQ;MAAE;MACnBC,GAAG,EAAE,MAAM;MACXC,KAAK,EAAE,MAAM;MACb,oBAAoB,EAAE,oBAAoB;MAC1CC,EAAE,EAAE,oBAAoB;MACxBC,MAAM,EAAE,QAAQ;MAChB,qBAAqB,EAAE,2BAA2B;MAClDC,GAAG,EAAE;KACN;IAAC;IAAAtH,cAAA,GAAAQ,CAAA;IAEF,OAAO,2BAAAR,cAAA,GAAAuB,CAAA,WAAAqF,UAAU,CAACD,UAAU,CAAC;IAAA;IAAA,CAAA3G,cAAA,GAAAuB,CAAA,WAAIoF,UAAU;EAC7C;EAEQtB,eAAeA,CAACvC,OAAe;IAAA;IAAA9C,cAAA,GAAAU,CAAA;IACrC,MAAM6G,UAAU;IAAA;IAAA,CAAAvH,cAAA,GAAAQ,CAAA,SAA8B;MAC5CgH,WAAW,EAAE,MAAM;MACnBC,OAAO,EAAE,uBAAuB;MAChCV,OAAO,EAAE,SAAS;MAClB,gBAAgB,EAAE,gBAAgB;MAClCC,MAAM,EAAE,QAAQ;MAChBU,IAAI,EAAE,KAAK;MACX,oBAAoB,EAAE,oBAAoB;MAC1CL,MAAM,EAAE,QAAQ;MAChB,2BAA2B,EAAE;KAC9B;IAAC;IAAArH,cAAA,GAAAQ,CAAA;IAEF,OAAO,2BAAAR,cAAA,GAAAuB,CAAA,WAAAgG,UAAU,CAACzE,OAAO,CAAC;IAAA;IAAA,CAAA9C,cAAA,GAAAuB,CAAA,WAAIuB,OAAO;EACvC","ignoreList":[]}