ae70c22e49384a6f3e533610bf50ccf7
import request from 'supertest';
import { app } from '../../../src/index';
export class ETFOTestHelpers {
    authToken;
    constructor(authToken) {
        this.authToken = authToken;
    }
    async createExpectation(codePrefix = 'TEST') {
        const response = await request(app)
            .post('/api/curriculum-expectations')
            .set('Authorization', `Bearer ${this.authToken}`)
            .send({
            code: `${codePrefix}.1.1.${Date.now()}`,
            description: `${codePrefix} expectation`,
            strand: 'Test Strand',
            grade: 1,
            subject: 'Mathematics',
        });
        if (response.status !== 201) {
            throw new Error(`Failed to create expectation: ${response.status} ${JSON.stringify(response.body)}`);
        }
        return response.body.id;
    }
    async createLongRangePlan(title, expectationIds = []) {
        const response = await request(app)
            .post('/api/long-range-plans')
            .set('Authorization', `Bearer ${this.authToken}`)
            .send({
            title,
            academicYear: '2024-2025',
            grade: 1,
            subject: 'Mathematics',
            expectationIds,
        });
        if (response.status !== 201) {
            throw new Error(`Failed to create long-range plan: ${response.status} ${JSON.stringify(response.body)}`);
        }
        return response.body.id;
    }
    async createUnitPlan(title, longRangePlanId, expectationIds = []) {
        const response = await request(app)
            .post('/api/unit-plans')
            .set('Authorization', `Bearer ${this.authToken}`)
            .send({
            title,
            longRangePlanId,
            startDate: '2024-09-01T00:00:00.000Z',
            endDate: '2024-09-30T23:59:59.999Z',
            expectationIds,
        });
        if (response.status !== 201) {
            throw new Error(`Failed to create unit plan: ${response.status} ${JSON.stringify(response.body)}`);
        }
        return response.body.id;
    }
    async createLessonPlan(title, unitPlanId, expectationIds = []) {
        const response = await request(app)
            .post('/api/etfo-lesson-plans')
            .set('Authorization', `Bearer ${this.authToken}`)
            .send({
            title,
            unitPlanId,
            date: '2024-09-15T09:00:00Z',
            duration: 45,
            isSubFriendly: false,
            expectationIds,
        });
        if (response.status !== 201) {
            throw new Error(`Failed to create lesson plan: ${response.status} ${JSON.stringify(response.body)}`);
        }
        return response.body.id;
    }
    async createDaybookEntry(date = '2024-09-15T00:00:00Z', lessonPlanId) {
        const response = await request(app)
            .post('/api/daybook-entries')
            .set('Authorization', `Bearer ${this.authToken}`)
            .send({
            date,
            lessonPlanId,
            notes: 'Test daybook entry',
            overallRating: 4,
        });
        if (response.status !== 201) {
            throw new Error(`Failed to create daybook entry: ${response.status} ${JSON.stringify(response.body)}`);
        }
        return response.body.id;
    }
    /**
     * Creates the full ETFO hierarchy: Expectation → Long-Range Plan → Unit Plan → Lesson Plan → Daybook Entry
     */
    async createCompleteHierarchy(prefix = 'HIERARCHY') {
        const expectationId = await this.createExpectation(prefix);
        const longRangePlanId = await this.createLongRangePlan(`${prefix} Long-Range Plan`, [expectationId]);
        const unitPlanId = await this.createUnitPlan(`${prefix} Unit Plan`, longRangePlanId, [expectationId]);
        const lessonPlanId = await this.createLessonPlan(`${prefix} Lesson Plan`, unitPlanId, [expectationId]);
        const daybookEntryId = await this.createDaybookEntry(undefined, lessonPlanId);
        return {
            expectationId,
            longRangePlanId,
            unitPlanId,
            lessonPlanId,
            daybookEntryId,
        };
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3Rlc3RzL2ludGVncmF0aW9uL2hlbHBlcnMvZXRmby1oZWxwZXJzLnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFVekMsTUFBTSxPQUFPLGVBQWU7SUFDTjtJQUFwQixZQUFvQixTQUFpQjtRQUFqQixjQUFTLEdBQVQsU0FBUyxDQUFRO0lBQUcsQ0FBQztJQUV6QyxLQUFLLENBQUMsaUJBQWlCLENBQUMsYUFBcUIsTUFBTTtRQUNqRCxNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7YUFDaEMsSUFBSSxDQUFDLDhCQUE4QixDQUFDO2FBQ3BDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDaEQsSUFBSSxDQUFDO1lBQ0osSUFBSSxFQUFFLEdBQUcsVUFBVSxRQUFRLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN2QyxXQUFXLEVBQUUsR0FBRyxVQUFVLGNBQWM7WUFDeEMsTUFBTSxFQUFFLGFBQWE7WUFDckIsS0FBSyxFQUFFLENBQUM7WUFDUixPQUFPLEVBQUUsYUFBYTtTQUN2QixDQUFDLENBQUM7UUFFTCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkcsQ0FBQztRQUVELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFhLEVBQUUsaUJBQTJCLEVBQUU7UUFDcEUsTUFBTSxRQUFR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QUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekcsQ0FBQztRQUVELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLHVCQUF1QixDQUFDLFNBQWlCLFdBQVc7UUFDeEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0QsTUFBTSxlQUFlLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxNQUFNLGtCQUFrQixFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNyRyxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxNQUFNLFlBQVksRUFBRSxlQUFlLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsTUFBTSxjQUFjLEVBQUUsVUFBVSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN2RyxNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFOUUsT0FBTztZQUNMLGFBQWE7WUFDYixlQUFlO1lBQ2YsVUFBVTtZQUNWLFlBQVk7WUFDWixjQUFjO1NBQ2YsQ0FBQztJQUNKLENBQUM7Q0FDRiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvdGVzdHMvaW50ZWdyYXRpb24vaGVscGVycy9ldGZvLWhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJ0ZXN0JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uLy4uLy4uL3NyYy9pbmRleCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVzdERhdGEge1xuICBleHBlY3RhdGlvbklkPzogc3RyaW5nO1xuICBsb25nUmFuZ2VQbGFuSWQ/OiBzdHJpbmc7XG4gIHVuaXRQbGFuSWQ/OiBzdHJpbmc7XG4gIGxlc3NvblBsYW5JZD86IHN0cmluZztcbiAgZGF5Ym9va0VudHJ5SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBFVEZPVGVzdEhlbHBlcnMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhUb2tlbjogc3RyaW5nKSB7fVxuXG4gIGFzeW5jIGNyZWF0ZUV4cGVjdGF0aW9uKGNvZGVQcmVmaXg6IHN0cmluZyA9ICdURVNUJykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAucG9zdCgnL2FwaS9jdXJyaWN1bHVtLWV4cGVjdGF0aW9ucycpXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3RoaXMuYXV0aFRva2VufWApXG4gICAgICAuc2VuZCh7XG4gICAgICAgIGNvZGU6IGAke2NvZGVQcmVmaXh9LjEuMS4ke0RhdGUubm93KCl9YCxcbiAgICAgICAgZGVzY3JpcHRpb246IGAke2NvZGVQcmVmaXh9IGV4cGVjdGF0aW9uYCxcbiAgICAgICAgc3RyYW5kOiAnVGVzdCBTdHJhbmQnLFxuICAgICAgICBncmFkZTogMSxcbiAgICAgICAgc3ViamVjdDogJ01hdGhlbWF0aWNzJyxcbiAgICAgIH0pO1xuXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgZXhwZWN0YXRpb246ICR7cmVzcG9uc2Uuc3RhdHVzfSAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmJvZHkpfWApO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZS5ib2R5LmlkO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlTG9uZ1JhbmdlUGxhbih0aXRsZTogc3RyaW5nLCBleHBlY3RhdGlvbklkczogc3RyaW5nW10gPSBbXSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAucG9zdCgnL2FwaS9sb25nLXJhbmdlLXBsYW5zJylcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dGhpcy5hdXRoVG9rZW59YClcbiAgICAgIC5zZW5kKHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGFjYWRlbWljWWVhcjogJzIwMjQtMjAyNScsXG4gICAgICAgIGdyYWRlOiAxLFxuICAgICAgICBzdWJqZWN0OiAnTWF0aGVtYXRpY3MnLFxuICAgICAgICBleHBlY3RhdGlvbklkcyxcbiAgICAgIH0pO1xuXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgbG9uZy1yYW5nZSBwbGFuOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5ib2R5KX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuYm9keS5pZDtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVVuaXRQbGFuKHRpdGxlOiBzdHJpbmcsIGxvbmdSYW5nZVBsYW5JZDogc3RyaW5nLCBleHBlY3RhdGlvbklkczogc3RyaW5nW10gPSBbXSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAucG9zdCgnL2FwaS91bml0LXBsYW5zJylcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dGhpcy5hdXRoVG9rZW59YClcbiAgICAgIC5zZW5kKHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGxvbmdSYW5nZVBsYW5JZCxcbiAgICAgICAgc3RhcnREYXRlOiAnMjAyNC0wOS0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgZW5kRGF0ZTogJzIwMjQtMDktMzBUMjM6NTk6NTkuOTk5WicsXG4gICAgICAgIGV4cGVjdGF0aW9uSWRzLFxuICAgICAgfSk7XG5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSB1bml0IHBsYW46ICR7cmVzcG9uc2Uuc3RhdHVzfSAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmJvZHkpfWApO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZS5ib2R5LmlkO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlTGVzc29uUGxhbih0aXRsZTogc3RyaW5nLCB1bml0UGxhbklkOiBzdHJpbmcsIGV4cGVjdGF0aW9uSWRzOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgIC5wb3N0KCcvYXBpL2V0Zm8tbGVzc29uLXBsYW5zJylcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dGhpcy5hdXRoVG9rZW59YClcbiAgICAgIC5zZW5kKHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHVuaXRQbGFuSWQsXG4gICAgICAgIGRhdGU6ICcyMDI0LTA5LTE1VDA5OjAwOjAwWicsXG4gICAgICAgIGR1cmF0aW9uOiA0NSxcbiAgICAgICAgaXNTdWJGcmllbmRseTogZmFsc2UsXG4gICAgICAgIGV4cGVjdGF0aW9uSWRzLFxuICAgICAgfSk7XG5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBsZXNzb24gcGxhbjogJHtyZXNwb25zZS5zdGF0dXN9ICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuYm9keSl9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmJvZHkuaWQ7XG4gIH1cblxuICBhc3luYyBjcmVhdGVEYXlib29rRW50cnkoZGF0ZTogc3RyaW5nID0gJzIwMjQtMDktMTVUMDA6MDA6MDBaJywgbGVzc29uUGxhbklkPzogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgIC5wb3N0KCcvYXBpL2RheWJvb2stZW50cmllcycpXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3RoaXMuYXV0aFRva2VufWApXG4gICAgICAuc2VuZCh7XG4gICAgICAgIGRhdGUsXG4gICAgICAgIGxlc3NvblBsYW5JZCxcbiAgICAgICAgbm90ZXM6ICdUZXN0IGRheWJvb2sgZW50cnknLFxuICAgICAgICBvdmVyYWxsUmF0aW5nOiA0LFxuICAgICAgfSk7XG5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBkYXlib29rIGVudHJ5OiAke3Jlc3BvbnNlLnN0YXR1c30gJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5ib2R5KX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuYm9keS5pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBmdWxsIEVURk8gaGllcmFyY2h5OiBFeHBlY3RhdGlvbiDihpIgTG9uZy1SYW5nZSBQbGFuIOKGkiBVbml0IFBsYW4g4oaSIExlc3NvbiBQbGFuIOKGkiBEYXlib29rIEVudHJ5XG4gICAqL1xuICBhc3luYyBjcmVhdGVDb21wbGV0ZUhpZXJhcmNoeShwcmVmaXg6IHN0cmluZyA9ICdISUVSQVJDSFknKTogUHJvbWlzZTxUZXN0RGF0YT4ge1xuICAgIGNvbnN0IGV4cGVjdGF0aW9uSWQgPSBhd2FpdCB0aGlzLmNyZWF0ZUV4cGVjdGF0aW9uKHByZWZpeCk7XG4gICAgY29uc3QgbG9uZ1JhbmdlUGxhbklkID0gYXdhaXQgdGhpcy5jcmVhdGVMb25nUmFuZ2VQbGFuKGAke3ByZWZpeH0gTG9uZy1SYW5nZSBQbGFuYCwgW2V4cGVjdGF0aW9uSWRdKTtcbiAgICBjb25zdCB1bml0UGxhbklkID0gYXdhaXQgdGhpcy5jcmVhdGVVbml0UGxhbihgJHtwcmVmaXh9IFVuaXQgUGxhbmAsIGxvbmdSYW5nZVBsYW5JZCwgW2V4cGVjdGF0aW9uSWRdKTtcbiAgICBjb25zdCBsZXNzb25QbGFuSWQgPSBhd2FpdCB0aGlzLmNyZWF0ZUxlc3NvblBsYW4oYCR7cHJlZml4fSBMZXNzb24gUGxhbmAsIHVuaXRQbGFuSWQsIFtleHBlY3RhdGlvbklkXSk7XG4gICAgY29uc3QgZGF5Ym9va0VudHJ5SWQgPSBhd2FpdCB0aGlzLmNyZWF0ZURheWJvb2tFbnRyeSh1bmRlZmluZWQsIGxlc3NvblBsYW5JZCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhwZWN0YXRpb25JZCxcbiAgICAgIGxvbmdSYW5nZVBsYW5JZCxcbiAgICAgIHVuaXRQbGFuSWQsXG4gICAgICBsZXNzb25QbGFuSWQsXG4gICAgICBkYXlib29rRW50cnlJZCxcbiAgICB9O1xuICB9XG59Il0sInZlcnNpb24iOjN9