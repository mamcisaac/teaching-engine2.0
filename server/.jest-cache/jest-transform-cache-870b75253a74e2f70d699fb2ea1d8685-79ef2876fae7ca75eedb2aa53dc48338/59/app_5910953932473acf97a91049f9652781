adf0495f0f1c68ef16b81971d9034bfe
/**
 * Express Application Factory
 * Creates and configures the Express application
 */
import express from 'express';
import cors from 'cors';
import { PrismaClient } from '@teaching-engine/database';
import { errorHandler } from '@/middleware/errorHandler';
import { rateLimiter } from '@/middleware/rateLimiter';
import { authRoutes } from '@/routes/auth';
import { userRoutes } from '@/routes/user';
export function createApp(prisma) {
    const app = express();
    // Middleware
    app.use(cors({
        origin: process.env.CLIENT_URL || 'http://localhost:5173',
        credentials: true,
    }));
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));
    // Rate limiting
    app.use('/api/auth', rateLimiter);
    // Health check
    app.get('/health', (req, res) => {
        res.json({ status: 'ok', timestamp: new Date().toISOString() });
    });
    // Routes
    app.use('/api/auth', authRoutes(prisma));
    app.use('/api/user', userRoutes(prisma));
    // 404 handler
    app.use((req, res) => {
        res.status(404).json({ error: 'Route not found' });
    });
    // Error handler
    app.use(errorHandler);
    return app;
}
export async function createTestApp(prisma) {
    // Use provided prisma or create a mock
    const testPrisma = prisma || new PrismaClient();
    const app = createApp(testPrisma);
    // Add test-specific middleware
    if (process.env.NODE_ENV === 'test') {
        app.use((req, res, next) => {
            // Mock authentication for testing
            if (req.headers.authorization === 'Bearer valid.jwt.token') {
                req.user = { id: '123', email: 'test@example.com', role: 'USER' };
            }
            else if (req.headers.authorization === 'Bearer admin.token') {
                req.user = { id: '456', email: 'admin@example.com', role: 'ADMIN' };
            }
            next();
        });
    }
    return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9hcHAudHMiLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxPQUFxRCxNQUFNLFNBQVMsQ0FBQztBQUM1RSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBb0I7SUFDNUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFFdEIsYUFBYTtJQUNiLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ1gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLHVCQUF1QjtRQUN6RCxXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUMsQ0FBQztJQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVoRCxnQkFBZ0I7SUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFbEMsZUFBZTtJQUNmLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVM7SUFDVCxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6QyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUV6QyxjQUFjO0lBQ2QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7SUFFSCxnQkFBZ0I7SUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUV0QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxNQUFxQjtJQUN2RCx1Q0FBdUM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLElBQUksWUFBWSxFQUFFLENBQUM7SUFFaEQsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRWxDLCtCQUErQjtJQUMvQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRSxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3pCLGtDQUFrQztZQUNsQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxLQUFLLHdCQUF3QixFQUFFLENBQUM7Z0JBQzFELEdBQVcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDN0UsQ0FBQztpQkFBTSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxLQUFLLG9CQUFvQixFQUFFLENBQUM7Z0JBQzdELEdBQVcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7WUFDL0UsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXhwcmVzcyBBcHBsaWNhdGlvbiBGYWN0b3J5XG4gKiBDcmVhdGVzIGFuZCBjb25maWd1cmVzIHRoZSBFeHByZXNzIGFwcGxpY2F0aW9uXG4gKi9cblxuaW1wb3J0IGV4cHJlc3MsIHsgRXhwcmVzcywgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAdGVhY2hpbmctZW5naW5lL2RhdGFiYXNlJztcbmltcG9ydCB7IGVycm9ySGFuZGxlciB9IGZyb20gJ0AvbWlkZGxld2FyZS9lcnJvckhhbmRsZXInO1xuaW1wb3J0IHsgcmF0ZUxpbWl0ZXIgfSBmcm9tICdAL21pZGRsZXdhcmUvcmF0ZUxpbWl0ZXInO1xuaW1wb3J0IHsgYXV0aFJvdXRlcyB9IGZyb20gJ0Avcm91dGVzL2F1dGgnO1xuaW1wb3J0IHsgdXNlclJvdXRlcyB9IGZyb20gJ0Avcm91dGVzL3VzZXInO1xuaW1wb3J0IGxvZ2dlciBmcm9tICdAL2xvZ2dlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcHAocHJpc21hOiBQcmlzbWFDbGllbnQpOiBFeHByZXNzIHtcbiAgY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4gIC8vIE1pZGRsZXdhcmVcbiAgYXBwLnVzZShjb3JzKHtcbiAgICBvcmlnaW46IHByb2Nlc3MuZW52LkNMSUVOVF9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6NTE3MycsXG4gICAgY3JlZGVudGlhbHM6IHRydWUsXG4gIH0pKTtcbiAgYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG4gIGFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuXG4gIC8vIFJhdGUgbGltaXRpbmdcbiAgYXBwLnVzZSgnL2FwaS9hdXRoJywgcmF0ZUxpbWl0ZXIpO1xuXG4gIC8vIEhlYWx0aCBjaGVja1xuICBhcHAuZ2V0KCcvaGVhbHRoJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgcmVzLmpzb24oeyBzdGF0dXM6ICdvaycsIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0pO1xuICB9KTtcblxuICAvLyBSb3V0ZXNcbiAgYXBwLnVzZSgnL2FwaS9hdXRoJywgYXV0aFJvdXRlcyhwcmlzbWEpKTtcbiAgYXBwLnVzZSgnL2FwaS91c2VyJywgdXNlclJvdXRlcyhwcmlzbWEpKTtcblxuICAvLyA0MDQgaGFuZGxlclxuICBhcHAudXNlKChyZXEsIHJlcykgPT4ge1xuICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdSb3V0ZSBub3QgZm91bmQnIH0pO1xuICB9KTtcblxuICAvLyBFcnJvciBoYW5kbGVyXG4gIGFwcC51c2UoZXJyb3JIYW5kbGVyKTtcblxuICByZXR1cm4gYXBwO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGVzdEFwcChwcmlzbWE/OiBQcmlzbWFDbGllbnQpOiBQcm9taXNlPEV4cHJlc3M+IHtcbiAgLy8gVXNlIHByb3ZpZGVkIHByaXNtYSBvciBjcmVhdGUgYSBtb2NrXG4gIGNvbnN0IHRlc3RQcmlzbWEgPSBwcmlzbWEgfHwgbmV3IFByaXNtYUNsaWVudCgpO1xuICBcbiAgY29uc3QgYXBwID0gY3JlYXRlQXBwKHRlc3RQcmlzbWEpO1xuICBcbiAgLy8gQWRkIHRlc3Qtc3BlY2lmaWMgbWlkZGxld2FyZVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgIGFwcC51c2UoKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAvLyBNb2NrIGF1dGhlbnRpY2F0aW9uIGZvciB0ZXN0aW5nXG4gICAgICBpZiAocmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9PT0gJ0JlYXJlciB2YWxpZC5qd3QudG9rZW4nKSB7XG4gICAgICAgIChyZXEgYXMgYW55KS51c2VyID0geyBpZDogJzEyMycsIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsIHJvbGU6ICdVU0VSJyB9O1xuICAgICAgfSBlbHNlIGlmIChyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uID09PSAnQmVhcmVyIGFkbWluLnRva2VuJykge1xuICAgICAgICAocmVxIGFzIGFueSkudXNlciA9IHsgaWQ6ICc0NTYnLCBlbWFpbDogJ2FkbWluQGV4YW1wbGUuY29tJywgcm9sZTogJ0FETUlOJyB9O1xuICAgICAgfVxuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICB9XG4gIFxuICByZXR1cm4gYXBwO1xufSJdLCJ2ZXJzaW9uIjozfQ==