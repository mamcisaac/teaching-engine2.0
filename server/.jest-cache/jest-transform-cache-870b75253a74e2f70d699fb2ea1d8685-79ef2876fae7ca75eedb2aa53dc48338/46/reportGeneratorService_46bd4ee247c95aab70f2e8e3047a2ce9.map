{"version":3,"names":["prisma","generateContent","logger","ReportGeneratorService","constructor","prismaClient","cov_qtum8ytde","f","s","b","generateReport","request","student","findUnique","where","id","studentId","include","user","artifacts","createdAt","gte","startDate","lte","endDate","reflections","goals","OR","status","Error","report","reportType","generateProgressReport","generateNarrativeReport","generateTermSummary","generateReportCard","error","sections","length","push","title","language","content","generateProgressFromArtifacts","data","includeGoals","generateGoalsNarrative","overallComments","generateOverallComments","nextSteps","generateNextSteps","studentName","firstName","lastName","period","toLocaleDateString","learningJourney","compileLearningJourney","prompt","narrative","JSON","stringify","subjectProgress","getSubjectProgress","subject","name","generateSubjectSummary","generateTermOverview","generateTermRecommendations","reportCardData","compileReportCardData","comments","generateSubjectComments","grade","outcomes","generateReportCardComments","context","artifactCount","reflectionCount","recentArtifacts","slice","map","a","description","recentReflections","r","activeGoals","filter","g","completedGoals","active","text","completed","sectionsCount","sectionTitles","suggestions","summary","substring","split","trim","subjects","findMany","userId","averageScore","toFixed","overallAverage","reduce","sum","average","weakSubjects","strongSubjects","join","recommendations","scoreToGrade","score","overallGrade","gradeValue","A","B","C","D","F","generateCurriculumCoverageReport","expectations","curriculumExpectation","longRangePlans","longRangePlan","unitPlans","unitPlan","lessonPlans","eTFOLessonPlan","coveredExpectationIds","Set","forEach","plan","exp","add","expectationId","totalExpectations","coveredExpectations","size","coveragePercentage","Math","round","uncoveredExpectations","has","code","strand","coverageByStrand","total","covered","percentage","Object","keys","strandData","generatePlanningProgressReport","daybookEntries","daybookEntry","calculateCompletionRate","plans","isComplete","completionRate","bigIdeas","learningGoals","entry","whatWorked","generateLessonPlanReport","lessonId","lesson","expectation","resources","date","duration","mindsOn","undefined","action","consolidation","materials","Array","isArray","isSubFriendly","hierarchy","curriculumAlignment","reflection","overallRating","wouldReuseLesson","resource","type","url","generateSubstitutePlanReport","basicInfo","activities","opening","main","closing","specialNotes","subNotes","generateUnitOverviewReport","unitId","unit","totalDuration","estimatedHours","lessonSummary","totalLessons","lessons","reportGeneratorService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts"],"sourcesContent":["import { prisma } from '../prisma';\nimport { generateContent } from './llmService';\nimport logger from '../logger';\n\nexport interface ReportGenerationRequest {\n  studentId: number;\n  reportType: 'progress' | 'narrative' | 'term_summary' | 'report_card';\n  termId?: number;\n  subjectId?: number;\n  startDate: Date;\n  endDate: Date;\n  language: 'en' | 'fr';\n  includeAssessments?: boolean;\n  includeAttendance?: boolean;\n  includeGoals?: boolean;\n}\n\nexport interface GeneratedReport {\n  studentName: string;\n  period: string;\n  sections: ReportSection[];\n  overallComments: string;\n  nextSteps: string[];\n}\n\nexport interface ReportSection {\n  title: string;\n  content: string;\n  data?: Record<string, unknown>;\n}\n\n// Type definitions for student data with relations\ninterface StudentWithRelations {\n  id: number;\n  firstName: string;\n  lastName: string;\n  user: { id: number };\n  artifacts: Artifact[];\n  reflections: Reflection[];\n  goals: Goal[];\n}\n\ninterface Artifact {\n  id: number;\n  title: string;\n  description: string | null;\n  createdAt: Date;\n}\n\ninterface Reflection {\n  id: number;\n  content: string;\n  createdAt: Date;\n}\n\ninterface Goal {\n  id: number;\n  text: string;\n  status: string;\n}\n\ninterface SubjectProgress {\n  id: number;\n  name: string;\n  outcomes: string[];\n  averageScore: number;\n  [key: string]: unknown;\n}\n\ninterface SubjectReportCard {\n  id: number;\n  name: string;\n  grade: string;\n  outcomes: string[];\n}\n\n// Type definitions for curriculum and planning reports\nexport interface CurriculumCoverageReport {\n  totalExpectations: number;\n  coveredExpectations: number;\n  coveragePercentage: number;\n  uncoveredExpectations: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  coverageByStrand: Record<\n    string,\n    {\n      total: number;\n      covered: number;\n      percentage: number;\n    }\n  >;\n}\n\nexport interface PlanningProgressReport {\n  longRangePlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  unitPlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  lessonPlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  daybookEntries: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n}\n\nexport interface LessonPlanReport {\n  lesson: {\n    id: string;\n    title: string;\n    date: Date;\n    duration: number;\n    mindsOn?: string;\n    action?: string;\n    consolidation?: string;\n    learningGoals?: string;\n    materials?: string[];\n    isSubFriendly: boolean;\n  };\n  hierarchy: {\n    longRangePlan: {\n      id: string;\n      title: string;\n      subject?: string;\n      grade?: number;\n    };\n    unitPlan: {\n      id: string;\n      title: string;\n    };\n  };\n  curriculumAlignment: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  reflection?: {\n    whatWorked?: string;\n    overallRating?: number;\n    wouldReuseLesson?: boolean;\n  };\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n    url?: string;\n  }>;\n}\n\nexport interface SubstitutePlanReport {\n  title: string;\n  basicInfo: {\n    subject: string;\n    grade: number;\n    duration: number;\n    date: Date;\n  };\n  materials: string[];\n  activities: {\n    opening: string;\n    main: string;\n    closing: string;\n  };\n  specialNotes?: string;\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n    content?: string;\n  }>;\n}\n\nexport interface UnitOverviewReport {\n  unit: {\n    id: string;\n    title: string;\n    description?: string;\n    bigIdeas?: string;\n    startDate: Date;\n    endDate: Date;\n    estimatedHours: number;\n  };\n  hierarchy: {\n    longRangePlan: {\n      id: string;\n      title: string;\n      subject?: string;\n      grade?: number;\n    };\n  };\n  curriculumAlignment: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  lessonSummary: {\n    totalLessons: number;\n    totalDuration: number;\n    lessons: Array<{\n      id: string;\n      title: string;\n      date: Date;\n      duration: number;\n    }>;\n  };\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n  }>;\n}\n\nexport class ReportGeneratorService {\n  private prisma: typeof prisma;\n\n  constructor(prismaClient?: typeof prisma) {\n    this.prisma = prismaClient || prisma;\n  }\n\n  async generateReport(request: ReportGenerationRequest): Promise<GeneratedReport> {\n    try {\n      // Fetch student data\n      const student = await this.prisma.student.findUnique({\n        where: { id: request.studentId },\n        include: {\n          user: true,\n          artifacts: {\n            where: {\n              createdAt: {\n                gte: request.startDate,\n                lte: request.endDate,\n              },\n            },\n          },\n          reflections: {\n            where: {\n              createdAt: {\n                gte: request.startDate,\n                lte: request.endDate,\n              },\n            },\n          },\n          goals: {\n            where: {\n              OR: [{ status: 'active' }, { status: 'completed' }],\n            },\n          },\n        },\n      });\n\n      if (!student) {\n        throw new Error('Student not found');\n      }\n\n      // Generate report based on type\n      let report: GeneratedReport;\n\n      switch (request.reportType) {\n        case 'progress':\n          report = await this.generateProgressReport(student, request);\n          break;\n        case 'narrative':\n          report = await this.generateNarrativeReport(student, request);\n          break;\n        case 'term_summary':\n          report = await this.generateTermSummary(student, request);\n          break;\n        case 'report_card':\n          report = await this.generateReportCard(student, request);\n          break;\n        default:\n          throw new Error('Invalid report type');\n      }\n\n      return report;\n    } catch (error) {\n      logger.error('Failed to generate report:', error);\n      throw error;\n    }\n  }\n\n  private async generateProgressReport(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Assessment functionality removed - focus on artifacts and reflections\n    if (student.artifacts.length > 0 || student.reflections.length > 0) {\n      sections.push({\n        title: request.language === 'fr' ? 'Progrès académique' : 'Academic Progress',\n        content: await this.generateProgressFromArtifacts(\n          student.artifacts,\n          student.reflections,\n          request.language,\n        ),\n        data: { artifacts: student.artifacts, reflections: student.reflections },\n      });\n    }\n\n    // Goals Section\n    if (request.includeGoals && student.goals.length > 0) {\n      sections.push({\n        title: request.language === 'fr' ? 'Objectifs' : 'Goals',\n        content: await this.generateGoalsNarrative(student.goals, request.language),\n        data: { goals: student.goals },\n      });\n    }\n\n    // Overall Comments\n    const overallComments = await this.generateOverallComments(student, sections, request.language);\n\n    // Next Steps\n    const nextSteps = await this.generateNextSteps(student, sections, request.language);\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,\n      sections,\n      overallComments,\n      nextSteps,\n    };\n  }\n\n  private async generateNarrativeReport(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    // Gather comprehensive data\n    const learningJourney = this.compileLearningJourney(student);\n\n    // Generate narrative using LLM\n    const prompt =\n      request.language === 'fr'\n        ? `Générez un rapport narratif détaillé pour ${student.firstName} ${student.lastName}, couvrant la période du ${request.startDate.toLocaleDateString()} au ${request.endDate.toLocaleDateString()}. Incluez les réalisations, les défis et les domaines de croissance.`\n        : `Generate a detailed narrative report for ${student.firstName} ${student.lastName}, covering the period from ${request.startDate.toLocaleDateString()} to ${request.endDate.toLocaleDateString()}. Include achievements, challenges, and areas of growth.`;\n\n    const narrative = await generateContent(prompt, JSON.stringify(learningJourney));\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,\n      sections: [\n        {\n          title: request.language === 'fr' ? 'Rapport narratif' : 'Narrative Report',\n          content: narrative,\n        },\n      ],\n      overallComments: '',\n      nextSteps: [],\n    };\n  }\n\n  private async generateTermSummary(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Get subject-specific progress\n    const subjectProgress = await this.getSubjectProgress(student);\n\n    for (const subject of subjectProgress) {\n      sections.push({\n        title: subject.name,\n        content: await this.generateSubjectSummary(subject, request.language),\n        data: subject,\n      });\n    }\n\n    // Overall term performance\n    const overallComments = await this.generateTermOverview(\n      student,\n      subjectProgress,\n      request.language,\n    );\n\n    // Recommendations for next term\n    const nextSteps = await this.generateTermRecommendations(\n      student,\n      subjectProgress,\n      request.language,\n    );\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: request.language === 'fr' ? 'Résumé du trimestre' : 'Term Summary',\n      sections,\n      overallComments,\n      nextSteps,\n    };\n  }\n\n  private async generateReportCard(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Get formal grades/assessments by subject\n    const reportCardData = await this.compileReportCardData(student);\n\n    for (const subject of reportCardData) {\n      // Generate teacher comments for each subject\n      const comments = await this.generateSubjectComments(subject, student, request.language);\n\n      sections.push({\n        title: subject.name,\n        content: comments,\n        data: {\n          grade: subject.grade,\n          outcomes: subject.outcomes,\n        },\n      });\n    }\n\n    // General comments\n    const overallComments = await this.generateReportCardComments(\n      student,\n      reportCardData,\n      request.language,\n    );\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: request.language === 'fr' ? 'Bulletin scolaire' : 'Report Card',\n      sections,\n      overallComments,\n      nextSteps: [],\n    };\n  }\n\n  // Helper methods\n  private async generateProgressFromArtifacts(\n    artifacts: Artifact[],\n    reflections: Reflection[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const context = {\n      artifactCount: artifacts.length,\n      reflectionCount: reflections.length,\n      recentArtifacts: artifacts\n        .slice(0, 3)\n        .map((a) => ({ title: a.title, description: a.description })),\n      recentReflections: reflections.slice(0, 3).map((r) => ({ content: r.content })),\n    };\n\n    const prompt =\n      language === 'fr'\n        ? `Décrivez le progrès académique basé sur ${artifacts.length} artefacts et ${reflections.length} réflexions.`\n        : `Describe academic progress based on ${artifacts.length} artifacts and ${reflections.length} reflections.`;\n\n    return generateContent(prompt, JSON.stringify(context));\n  }\n\n  private async generateGoalsNarrative(goals: Goal[], language: 'en' | 'fr'): Promise<string> {\n    const activeGoals = goals.filter((g) => g.status === 'active');\n    const completedGoals = goals.filter((g) => g.status === 'completed');\n\n    const context = {\n      active: activeGoals.map((g) => ({ text: g.text })),\n      completed: completedGoals.map((g) => ({ text: g.text })),\n    };\n\n    const prompt =\n      language === 'fr'\n        ? `Décrivez le progrès vers les objectifs de l'élève: ${JSON.stringify(context)}`\n        : `Describe the student's progress toward their goals: ${JSON.stringify(context)}`;\n\n    return generateContent(prompt);\n  }\n\n  private async generateOverallComments(\n    student: StudentWithRelations,\n    sections: ReportSection[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const context = {\n      studentName: `${student.firstName} ${student.lastName}`,\n      sectionsCount: sections.length,\n      sectionTitles: sections.map((s) => s.title),\n    };\n\n    const prompt =\n      language === 'fr'\n        ? `Générez des commentaires généraux positifs et encourageants pour ${context.studentName} basés sur leur rapport de progrès.`\n        : `Generate positive and encouraging overall comments for ${context.studentName} based on their progress report.`;\n\n    return generateContent(prompt, JSON.stringify(context));\n  }\n\n  private async generateNextSteps(\n    student: StudentWithRelations,\n    sections: ReportSection[],\n    language: 'en' | 'fr',\n  ): Promise<string[]> {\n    const prompt =\n      language === 'fr'\n        ? `Suggérez 3-5 prochaines étapes spécifiques pour ${student.firstName} pour continuer leur progrès.`\n        : `Suggest 3-5 specific next steps for ${student.firstName} to continue their progress.`;\n\n    const suggestions = await generateContent(\n      prompt,\n      JSON.stringify(\n        sections.map((s) => ({ title: s.title, summary: s.content.substring(0, 100) })),\n      ),\n    );\n\n    // Parse the suggestions into an array\n    return suggestions\n      .split('\\n')\n      .filter((s) => s.trim().length > 0)\n      .slice(0, 5);\n  }\n\n  private compileLearningJourney(student: StudentWithRelations) {\n    return {\n      artifacts: student.artifacts.map((a) => ({\n        title: a.title,\n        description: a.description,\n        createdAt: a.createdAt,\n      })),\n      reflections: student.reflections.map((r) => ({\n        content: r.content,\n        createdAt: r.createdAt,\n      })),\n      goals: student.goals,\n    };\n  }\n\n  private async getSubjectProgress(\n    student: StudentWithRelations & { user: { id: number } },\n  ): Promise<SubjectProgress[]> {\n    // Simplified subject progress without deep relations\n    const subjects = await this.prisma.subject.findMany({\n      where: { userId: student.user.id },\n    });\n\n    return subjects.map((subject) => ({\n      id: subject.id,\n      name: subject.name,\n      outcomes: [],\n      averageScore: 0, // Assessment functionality removed\n    }));\n  }\n\n  private async generateSubjectSummary(\n    subject: SubjectProgress,\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const prompt =\n      language === 'fr'\n        ? `Résumez la performance de l'élève en ${subject.name} avec une note moyenne de ${subject.averageScore.toFixed(1)}% et couvrant ${subject.outcomes.length} résultats d'apprentissage.`\n        : `Summarize the student's performance in ${subject.name} with an average score of ${subject.averageScore.toFixed(1)}% and covering ${subject.outcomes.length} learning outcomes.`;\n\n    return generateContent(prompt);\n  }\n\n  private async generateTermOverview(\n    student: StudentWithRelations,\n    subjectProgress: SubjectProgress[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const overallAverage =\n      subjectProgress.reduce((sum, s) => sum + s.averageScore, 0) / subjectProgress.length;\n\n    const prompt =\n      language === 'fr'\n        ? `Générez un aperçu du trimestre pour ${student.firstName} avec une moyenne générale de ${overallAverage.toFixed(1)}% à travers ${subjectProgress.length} matières.`\n        : `Generate a term overview for ${student.firstName} with an overall average of ${overallAverage.toFixed(1)}% across ${subjectProgress.length} subjects.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify(subjectProgress.map((s) => ({ name: s.name, average: s.averageScore }))),\n    );\n  }\n\n  private async generateTermRecommendations(\n    student: StudentWithRelations,\n    subjectProgress: SubjectProgress[],\n    language: 'en' | 'fr',\n  ): Promise<string[]> {\n    const weakSubjects = subjectProgress.filter((s) => s.averageScore < 70);\n    const strongSubjects = subjectProgress.filter((s) => s.averageScore >= 85);\n\n    const prompt =\n      language === 'fr'\n        ? `Suggérez 3-5 recommandations pour le prochain trimestre basées sur les forces (${strongSubjects.map((s) => s.name).join(', ')}) et les domaines à améliorer (${weakSubjects.map((s) => s.name).join(', ')}).`\n        : `Suggest 3-5 recommendations for the next term based on strengths (${strongSubjects.map((s) => s.name).join(', ')}) and areas for improvement (${weakSubjects.map((s) => s.name).join(', ')}).`;\n\n    const recommendations = await generateContent(prompt);\n\n    return recommendations\n      .split('\\n')\n      .filter((r) => r.trim().length > 0)\n      .slice(0, 5);\n  }\n\n  private async compileReportCardData(\n    student: StudentWithRelations & { user: { id: number } },\n  ): Promise<SubjectReportCard[]> {\n    const subjects = await this.prisma.subject.findMany({\n      where: { userId: student.user.id },\n    });\n\n    return subjects.map((subject) => ({\n      id: subject.id,\n      name: subject.name,\n      grade: 'N/A', // Assessment functionality removed\n      outcomes: [],\n    }));\n  }\n\n  private scoreToGrade(score: number): string {\n    if (score >= 90) return 'A';\n    if (score >= 80) return 'B';\n    if (score >= 70) return 'C';\n    if (score >= 60) return 'D';\n    return 'F';\n  }\n\n  private async generateSubjectComments(\n    subject: SubjectReportCard,\n    student: StudentWithRelations,\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const prompt =\n      language === 'fr'\n        ? `Générez des commentaires d'enseignant pour ${student.firstName} en ${subject.name} avec une note de ${subject.grade}. Soyez spécifique et encourageant.`\n        : `Generate teacher comments for ${student.firstName} in ${subject.name} with a grade of ${subject.grade}. Be specific and encouraging.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify({\n        outcomes: subject.outcomes.length,\n      }),\n    );\n  }\n\n  private async generateReportCardComments(\n    student: StudentWithRelations,\n    reportCardData: SubjectReportCard[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const overallGrade =\n      reportCardData.reduce((sum, s) => {\n        const gradeValue = { A: 4, B: 3, C: 2, D: 1, F: 0 }[s.grade] || 0;\n        return sum + gradeValue;\n      }, 0) / reportCardData.length;\n\n    const prompt =\n      language === 'fr'\n        ? `Générez des commentaires généraux de bulletin pour ${student.firstName} ${student.lastName} avec une performance globale de ${overallGrade.toFixed(1)}/4.0.`\n        : `Generate overall report card comments for ${student.firstName} ${student.lastName} with an overall performance of ${overallGrade.toFixed(1)}/4.0.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify(reportCardData.map((s) => ({ subject: s.name, grade: s.grade }))),\n    );\n  }\n\n  // Curriculum and Planning Report Methods\n  async generateCurriculumCoverageReport(userId: number): Promise<CurriculumCoverageReport> {\n    try {\n      // Get all curriculum expectations - we'll filter by covered/uncovered later\n      const expectations = await this.prisma.curriculumExpectation.findMany();\n\n      // Get all plans with expectations\n      const longRangePlans = await this.prisma.longRangePlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      const unitPlans = await this.prisma.unitPlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      const lessonPlans = await this.prisma.eTFOLessonPlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      // Collect all covered expectation IDs\n      const coveredExpectationIds = new Set<string>();\n\n      longRangePlans.forEach((plan) => {\n        plan.expectations.forEach((exp) => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      unitPlans.forEach((plan) => {\n        plan.expectations.forEach((exp) => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      lessonPlans.forEach((plan) => {\n        plan.expectations.forEach((exp) => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      // Calculate coverage\n      const totalExpectations = expectations.length;\n      const coveredExpectations = coveredExpectationIds.size;\n      const coveragePercentage =\n        totalExpectations > 0 ? Math.round((coveredExpectations / totalExpectations) * 100) : 0;\n\n      // Find uncovered expectations\n      const uncoveredExpectations = expectations\n        .filter((exp) => !coveredExpectationIds.has(exp.id))\n        .map((exp) => ({\n          id: exp.id,\n          code: exp.code,\n          description: exp.description,\n          strand: exp.strand,\n        }));\n\n      // Calculate coverage by strand\n      const coverageByStrand: Record<\n        string,\n        { total: number; covered: number; percentage: number }\n      > = {};\n\n      expectations.forEach((exp) => {\n        if (!coverageByStrand[exp.strand]) {\n          coverageByStrand[exp.strand] = { total: 0, covered: 0, percentage: 0 };\n        }\n        coverageByStrand[exp.strand].total++;\n        if (coveredExpectationIds.has(exp.id)) {\n          coverageByStrand[exp.strand].covered++;\n        }\n      });\n\n      // Calculate percentages for each strand\n      Object.keys(coverageByStrand).forEach((strand) => {\n        const strandData = coverageByStrand[strand];\n        strandData.percentage =\n          strandData.total > 0 ? Math.round((strandData.covered / strandData.total) * 100) : 0;\n      });\n\n      return {\n        totalExpectations,\n        coveredExpectations,\n        coveragePercentage,\n        uncoveredExpectations,\n        coverageByStrand,\n      };\n    } catch (error) {\n      logger.error('Failed to generate curriculum coverage report:', error);\n      throw error;\n    }\n  }\n\n  async generatePlanningProgressReport(userId: number): Promise<PlanningProgressReport> {\n    try {\n      // Get all planning data for the user\n      const longRangePlans = await this.prisma.longRangePlan.findMany({\n        where: { userId },\n      });\n\n      const unitPlans = await this.prisma.unitPlan.findMany({\n        where: { userId },\n      });\n\n      const lessonPlans = await this.prisma.eTFOLessonPlan.findMany({\n        where: { userId },\n      });\n\n      const daybookEntries = await this.prisma.daybookEntry.findMany({\n        where: { userId },\n      });\n\n      // Calculate completion rates\n      const calculateCompletionRate = <T>(plans: T[], isComplete: (plan: T) => boolean) => {\n        const total = plans.length;\n        const completed = plans.filter(isComplete).length;\n        const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;\n        return { total, completed, completionRate };\n      };\n\n      return {\n        longRangePlans: calculateCompletionRate(\n          longRangePlans,\n          (plan) => plan.goals !== null && plan.goals !== '',\n        ),\n        unitPlans: calculateCompletionRate(\n          unitPlans,\n          (plan) => plan.bigIdeas !== null && plan.bigIdeas !== '',\n        ),\n        lessonPlans: calculateCompletionRate(\n          lessonPlans,\n          (plan) => plan.learningGoals !== null && plan.learningGoals !== '',\n        ),\n        daybookEntries: calculateCompletionRate(\n          daybookEntries,\n          (entry) => entry.whatWorked !== null && entry.whatWorked !== '',\n        ),\n      };\n    } catch (error) {\n      logger.error('Failed to generate planning progress report:', error);\n      throw error;\n    }\n  }\n\n  async generateLessonPlanReport(lessonId: string): Promise<LessonPlanReport> {\n    try {\n      const lesson = await this.prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n          daybookEntry: true,\n          resources: true,\n        },\n      });\n\n      if (!lesson) {\n        throw new Error('Lesson plan not found');\n      }\n\n      return {\n        lesson: {\n          id: lesson.id,\n          title: lesson.title,\n          date: lesson.date,\n          duration: lesson.duration,\n          mindsOn: lesson.mindsOn || undefined,\n          action: lesson.action || undefined,\n          consolidation: lesson.consolidation || undefined,\n          learningGoals: lesson.learningGoals || undefined,\n          materials: Array.isArray(lesson.materials) ? (lesson.materials as string[]) : undefined,\n          isSubFriendly: lesson.isSubFriendly,\n        },\n        hierarchy: {\n          longRangePlan: {\n            id: lesson.unitPlan.longRangePlan.id,\n            title: lesson.unitPlan.longRangePlan.title,\n            subject: lesson.unitPlan.longRangePlan.subject || undefined,\n            grade: lesson.unitPlan.longRangePlan.grade || undefined,\n          },\n          unitPlan: {\n            id: lesson.unitPlan.id,\n            title: lesson.unitPlan.title,\n          },\n        },\n        curriculumAlignment: lesson.expectations.map((exp) => ({\n          id: exp.expectation.id,\n          code: exp.expectation.code,\n          description: exp.expectation.description,\n          strand: exp.expectation.strand,\n        })),\n        reflection: lesson.daybookEntry\n          ? {\n              whatWorked: lesson.daybookEntry.whatWorked || undefined,\n              overallRating: lesson.daybookEntry.overallRating || undefined,\n              wouldReuseLesson: lesson.daybookEntry.wouldReuseLesson || undefined,\n            }\n          : undefined,\n        resources: lesson.resources.map((resource) => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n          url: resource.url || undefined,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate lesson plan report:', error);\n      throw error;\n    }\n  }\n\n  async generateSubstitutePlanReport(lessonId: string): Promise<SubstitutePlanReport> {\n    try {\n      const lesson = await this.prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          resources: true,\n        },\n      });\n\n      if (!lesson) {\n        throw new Error('Lesson plan not found');\n      }\n\n      if (!lesson.isSubFriendly) {\n        throw new Error('Lesson plan is not marked as substitute-friendly');\n      }\n\n      return {\n        title: lesson.title,\n        basicInfo: {\n          subject: lesson.unitPlan.longRangePlan.subject || 'Not specified',\n          grade: lesson.unitPlan.longRangePlan.grade || 0,\n          duration: lesson.duration,\n          date: lesson.date,\n        },\n        materials: Array.isArray(lesson.materials) ? (lesson.materials as string[]) : [],\n        activities: {\n          opening: lesson.mindsOn || '',\n          main: lesson.action || '',\n          closing: lesson.consolidation || '',\n        },\n        specialNotes: lesson.subNotes || undefined,\n        resources: lesson.resources.map((resource) => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n          content: resource.content || undefined,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate substitute plan report:', error);\n      throw error;\n    }\n  }\n\n  async generateUnitOverviewReport(unitId: string): Promise<UnitOverviewReport> {\n    try {\n      const unit = await this.prisma.unitPlan.findUnique({\n        where: { id: unitId },\n        include: {\n          longRangePlan: true,\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n          lessonPlans: true,\n          resources: true,\n        },\n      });\n\n      if (!unit) {\n        throw new Error('Unit plan not found');\n      }\n\n      const totalDuration = unit.lessonPlans.reduce((sum, lesson) => sum + lesson.duration, 0);\n\n      return {\n        unit: {\n          id: unit.id,\n          title: unit.title,\n          description: unit.description || undefined,\n          bigIdeas: unit.bigIdeas || undefined,\n          startDate: unit.startDate,\n          endDate: unit.endDate,\n          estimatedHours: unit.estimatedHours,\n        },\n        hierarchy: {\n          longRangePlan: {\n            id: unit.longRangePlan.id,\n            title: unit.longRangePlan.title,\n            subject: unit.longRangePlan.subject || undefined,\n            grade: unit.longRangePlan.grade || undefined,\n          },\n        },\n        curriculumAlignment: unit.expectations.map((exp) => ({\n          id: exp.expectation.id,\n          code: exp.expectation.code,\n          description: exp.expectation.description,\n          strand: exp.expectation.strand,\n        })),\n        lessonSummary: {\n          totalLessons: unit.lessonPlans.length,\n          totalDuration,\n          lessons: unit.lessonPlans.map((lesson) => ({\n            id: lesson.id,\n            title: lesson.title,\n            date: lesson.date,\n            duration: lesson.duration,\n          })),\n        },\n        resources: unit.resources.map((resource) => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate unit overview report:', error);\n      throw error;\n    }\n  }\n}\n\nexport const reportGeneratorService = new ReportGeneratorService();\n"],"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","ignoreList":[]}