2ccc0ea156b64daee9cbf08bb0e6a51f
/* istanbul ignore next */
function cov_qtum8ytde() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts";
  var hash = "f75644e2ca617dcdc913b925f7737b601f4c8913";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "2": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 38,
          column: 14
        }
      },
      "3": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "4": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 53
        }
      },
      "5": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "6": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 81
        }
      },
      "7": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 26
        }
      },
      "8": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 82
        }
      },
      "9": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "10": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "11": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "12": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 77
        }
      },
      "13": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 26
        }
      },
      "14": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 59
        }
      },
      "15": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 26
        }
      },
      "16": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 62
        }
      },
      "17": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 24
        }
      },
      "18": {
        start: {
          line: 68,
          column: 25
        },
        end: {
          line: 68,
          column: 27
        }
      },
      "19": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "20": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "21": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "22": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "23": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 103
        }
      },
      "24": {
        start: {
          line: 88,
          column: 26
        },
        end: {
          line: 88,
          column: 91
        }
      },
      "25": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "26": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "27": {
        start: {
          line: 101,
          column: 23
        },
        end: {
          line: 103,
          column: 264
        }
      },
      "28": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 88
        }
      },
      "29": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "30": {
        start: {
          line: 119,
          column: 25
        },
        end: {
          line: 119,
          column: 27
        }
      },
      "31": {
        start: {
          line: 121,
          column: 32
        },
        end: {
          line: 121,
          column: 70
        }
      },
      "32": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "33": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "34": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 130,
          column: 107
        }
      },
      "35": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 132,
          column: 108
        }
      },
      "36": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 139,
          column: 10
        }
      },
      "37": {
        start: {
          line: 142,
          column: 25
        },
        end: {
          line: 142,
          column: 27
        }
      },
      "38": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 144,
          column: 72
        }
      },
      "39": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "40": {
        start: {
          line: 147,
          column: 29
        },
        end: {
          line: 147,
          column: 99
        }
      },
      "41": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "42": {
        start: {
          line: 158,
          column: 32
        },
        end: {
          line: 158,
          column: 112
        }
      },
      "43": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "44": {
        start: {
          line: 169,
          column: 24
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "45": {
        start: {
          line: 174,
          column: 29
        },
        end: {
          line: 174,
          column: 75
        }
      },
      "46": {
        start: {
          line: 175,
          column: 67
        },
        end: {
          line: 175,
          column: 89
        }
      },
      "47": {
        start: {
          line: 177,
          column: 23
        },
        end: {
          line: 179,
          column: 120
        }
      },
      "48": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 64
        }
      },
      "49": {
        start: {
          line: 183,
          column: 28
        },
        end: {
          line: 183,
          column: 70
        }
      },
      "50": {
        start: {
          line: 183,
          column: 48
        },
        end: {
          line: 183,
          column: 69
        }
      },
      "51": {
        start: {
          line: 184,
          column: 31
        },
        end: {
          line: 184,
          column: 76
        }
      },
      "52": {
        start: {
          line: 184,
          column: 51
        },
        end: {
          line: 184,
          column: 75
        }
      },
      "53": {
        start: {
          line: 185,
          column: 24
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "54": {
        start: {
          line: 186,
          column: 44
        },
        end: {
          line: 186,
          column: 60
        }
      },
      "55": {
        start: {
          line: 187,
          column: 50
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "56": {
        start: {
          line: 189,
          column: 23
        },
        end: {
          line: 191,
          column: 94
        }
      },
      "57": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 39
        }
      },
      "58": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "59": {
        start: {
          line: 198,
          column: 47
        },
        end: {
          line: 198,
          column: 54
        }
      },
      "60": {
        start: {
          line: 200,
          column: 23
        },
        end: {
          line: 202,
          column: 125
        }
      },
      "61": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 64
        }
      },
      "62": {
        start: {
          line: 206,
          column: 23
        },
        end: {
          line: 208,
          column: 100
        }
      },
      "63": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 209,
          column: 154
        }
      },
      "64": {
        start: {
          line: 209,
          column: 94
        },
        end: {
          line: 209,
          column: 150
        }
      },
      "65": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 214,
          column: 25
        }
      },
      "66": {
        start: {
          line: 213,
          column: 27
        },
        end: {
          line: 213,
          column: 46
        }
      },
      "67": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 228,
          column: 10
        }
      },
      "68": {
        start: {
          line: 218,
          column: 53
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "69": {
        start: {
          line: 223,
          column: 57
        },
        end: {
          line: 226,
          column: 13
        }
      },
      "70": {
        start: {
          line: 232,
          column: 25
        },
        end: {
          line: 234,
          column: 10
        }
      },
      "71": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 240,
          column: 12
        }
      },
      "72": {
        start: {
          line: 235,
          column: 42
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "73": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 245,
          column: 190
        }
      },
      "74": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 39
        }
      },
      "75": {
        start: {
          line: 249,
          column: 31
        },
        end: {
          line: 249,
          column: 115
        }
      },
      "76": {
        start: {
          line: 249,
          column: 66
        },
        end: {
          line: 249,
          column: 86
        }
      },
      "77": {
        start: {
          line: 250,
          column: 23
        },
        end: {
          line: 252,
          column: 165
        }
      },
      "78": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 128
        }
      },
      "79": {
        start: {
          line: 253,
          column: 82
        },
        end: {
          line: 253,
          column: 123
        }
      },
      "80": {
        start: {
          line: 256,
          column: 29
        },
        end: {
          line: 256,
          column: 79
        }
      },
      "81": {
        start: {
          line: 256,
          column: 59
        },
        end: {
          line: 256,
          column: 78
        }
      },
      "82": {
        start: {
          line: 257,
          column: 31
        },
        end: {
          line: 257,
          column: 82
        }
      },
      "83": {
        start: {
          line: 257,
          column: 61
        },
        end: {
          line: 257,
          column: 81
        }
      },
      "84": {
        start: {
          line: 258,
          column: 23
        },
        end: {
          line: 260,
          column: 205
        }
      },
      "85": {
        start: {
          line: 259,
          column: 122
        },
        end: {
          line: 259,
          column: 128
        }
      },
      "86": {
        start: {
          line: 259,
          column: 198
        },
        end: {
          line: 259,
          column: 204
        }
      },
      "87": {
        start: {
          line: 260,
          column: 109
        },
        end: {
          line: 260,
          column: 115
        }
      },
      "88": {
        start: {
          line: 260,
          column: 183
        },
        end: {
          line: 260,
          column: 189
        }
      },
      "89": {
        start: {
          line: 261,
          column: 32
        },
        end: {
          line: 261,
          column: 61
        }
      },
      "90": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 25
        }
      },
      "91": {
        start: {
          line: 264,
          column: 27
        },
        end: {
          line: 264,
          column: 46
        }
      },
      "92": {
        start: {
          line: 268,
          column: 25
        },
        end: {
          line: 270,
          column: 10
        }
      },
      "93": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 276,
          column: 12
        }
      },
      "94": {
        start: {
          line: 271,
          column: 42
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "95": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 280,
          column: 23
        }
      },
      "96": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 23
        }
      },
      "97": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 282,
          column: 23
        }
      },
      "98": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 23
        }
      },
      "99": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 284,
          column: 23
        }
      },
      "100": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 23
        }
      },
      "101": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 286,
          column: 23
        }
      },
      "102": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 23
        }
      },
      "103": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 19
        }
      },
      "104": {
        start: {
          line: 290,
          column: 23
        },
        end: {
          line: 292,
          column: 148
        }
      },
      "105": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 12
        }
      },
      "106": {
        start: {
          line: 298,
          column: 29
        },
        end: {
          line: 301,
          column: 37
        }
      },
      "107": {
        start: {
          line: 299,
          column: 31
        },
        end: {
          line: 299,
          column: 77
        }
      },
      "108": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 36
        }
      },
      "109": {
        start: {
          line: 302,
          column: 23
        },
        end: {
          line: 304,
          column: 161
        }
      },
      "110": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 121
        }
      },
      "111": {
        start: {
          line: 305,
          column: 81
        },
        end: {
          line: 305,
          column: 116
        }
      },
      "112": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "113": {
        start: {
          line: 311,
          column: 33
        },
        end: {
          line: 311,
          column: 83
        }
      },
      "114": {
        start: {
          line: 313,
          column: 35
        },
        end: {
          line: 316,
          column: 14
        }
      },
      "115": {
        start: {
          line: 317,
          column: 30
        },
        end: {
          line: 320,
          column: 14
        }
      },
      "116": {
        start: {
          line: 321,
          column: 32
        },
        end: {
          line: 324,
          column: 14
        }
      },
      "117": {
        start: {
          line: 326,
          column: 42
        },
        end: {
          line: 326,
          column: 51
        }
      },
      "118": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 15
        }
      },
      "119": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 97
        }
      },
      "120": {
        start: {
          line: 328,
          column: 51
        },
        end: {
          line: 328,
          column: 95
        }
      },
      "121": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 15
        }
      },
      "122": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 97
        }
      },
      "123": {
        start: {
          line: 331,
          column: 51
        },
        end: {
          line: 331,
          column: 95
        }
      },
      "124": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 335,
          column: 15
        }
      },
      "125": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 97
        }
      },
      "126": {
        start: {
          line: 334,
          column: 51
        },
        end: {
          line: 334,
          column: 95
        }
      },
      "127": {
        start: {
          line: 337,
          column: 38
        },
        end: {
          line: 337,
          column: 57
        }
      },
      "128": {
        start: {
          line: 338,
          column: 40
        },
        end: {
          line: 338,
          column: 66
        }
      },
      "129": {
        start: {
          line: 339,
          column: 39
        },
        end: {
          line: 339,
          column: 126
        }
      },
      "130": {
        start: {
          line: 341,
          column: 42
        },
        end: {
          line: 348,
          column: 15
        }
      },
      "131": {
        start: {
          line: 342,
          column: 33
        },
        end: {
          line: 342,
          column: 67
        }
      },
      "132": {
        start: {
          line: 343,
          column: 31
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "133": {
        start: {
          line: 350,
          column: 37
        },
        end: {
          line: 350,
          column: 39
        }
      },
      "134": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 359,
          column: 15
        }
      },
      "135": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 354,
          column: 17
        }
      },
      "136": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 353,
          column: 91
        }
      },
      "137": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 53
        }
      },
      "138": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "139": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 59
        }
      },
      "140": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 365,
          column: 15
        }
      },
      "141": {
        start: {
          line: 362,
          column: 35
        },
        end: {
          line: 362,
          column: 59
        }
      },
      "142": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 364,
          column: 105
        }
      },
      "143": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 372,
          column: 14
        }
      },
      "144": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 82
        }
      },
      "145": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 24
        }
      },
      "146": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "147": {
        start: {
          line: 382,
          column: 35
        },
        end: {
          line: 384,
          column: 14
        }
      },
      "148": {
        start: {
          line: 385,
          column: 30
        },
        end: {
          line: 387,
          column: 14
        }
      },
      "149": {
        start: {
          line: 388,
          column: 32
        },
        end: {
          line: 390,
          column: 14
        }
      },
      "150": {
        start: {
          line: 391,
          column: 35
        },
        end: {
          line: 393,
          column: 14
        }
      },
      "151": {
        start: {
          line: 395,
          column: 44
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "152": {
        start: {
          line: 396,
          column: 30
        },
        end: {
          line: 396,
          column: 42
        }
      },
      "153": {
        start: {
          line: 397,
          column: 34
        },
        end: {
          line: 397,
          column: 65
        }
      },
      "154": {
        start: {
          line: 398,
          column: 39
        },
        end: {
          line: 398,
          column: 92
        }
      },
      "155": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 60
        }
      },
      "156": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 406,
          column: 14
        }
      },
      "157": {
        start: {
          line: 402,
          column: 82
        },
        end: {
          line: 402,
          column: 122
        }
      },
      "158": {
        start: {
          line: 403,
          column: 72
        },
        end: {
          line: 403,
          column: 118
        }
      },
      "159": {
        start: {
          line: 404,
          column: 76
        },
        end: {
          line: 404,
          column: 132
        }
      },
      "160": {
        start: {
          line: 405,
          column: 83
        },
        end: {
          line: 405,
          column: 135
        }
      },
      "161": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 80
        }
      },
      "162": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 24
        }
      },
      "163": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 484,
          column: 9
        }
      },
      "164": {
        start: {
          line: 415,
          column: 27
        },
        end: {
          line: 431,
          column: 14
        }
      },
      "165": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "166": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 57
        }
      },
      "167": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 479,
          column: 14
        }
      },
      "168": {
        start: {
          line: 460,
          column: 71
        },
        end: {
          line: 465,
          column: 17
        }
      },
      "169": {
        start: {
          line: 473,
          column: 63
        },
        end: {
          line: 478,
          column: 17
        }
      },
      "170": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 74
        }
      },
      "171": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 24
        }
      },
      "172": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 531,
          column: 9
        }
      },
      "173": {
        start: {
          line: 488,
          column: 27
        },
        end: {
          line: 498,
          column: 14
        }
      },
      "174": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 501,
          column: 13
        }
      },
      "175": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 57
        }
      },
      "176": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 504,
          column: 13
        }
      },
      "177": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 503,
          column: 84
        }
      },
      "178": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 526,
          column: 14
        }
      },
      "179": {
        start: {
          line: 520,
          column: 63
        },
        end: {
          line: 525,
          column: 17
        }
      },
      "180": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 529,
          column: 78
        }
      },
      "181": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 530,
          column: 24
        }
      },
      "182": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 596,
          column: 9
        }
      },
      "183": {
        start: {
          line: 535,
          column: 25
        },
        end: {
          line: 547,
          column: 14
        }
      },
      "184": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 550,
          column: 13
        }
      },
      "185": {
        start: {
          line: 549,
          column: 16
        },
        end: {
          line: 549,
          column: 55
        }
      },
      "186": {
        start: {
          line: 551,
          column: 34
        },
        end: {
          line: 551,
          column: 100
        }
      },
      "187": {
        start: {
          line: 551,
          column: 75
        },
        end: {
          line: 551,
          column: 96
        }
      },
      "188": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 591,
          column: 14
        }
      },
      "189": {
        start: {
          line: 570,
          column: 69
        },
        end: {
          line: 575,
          column: 17
        }
      },
      "190": {
        start: {
          line: 579,
          column: 63
        },
        end: {
          line: 584,
          column: 21
        }
      },
      "191": {
        start: {
          line: 586,
          column: 61
        },
        end: {
          line: 590,
          column: 17
        }
      },
      "192": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 76
        }
      },
      "193": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 24
        }
      },
      "194": {
        start: {
          line: 599,
          column: 38
        },
        end: {
          line: 599,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 34
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 51
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 52
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 97
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 48
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 118
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 47
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 141
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 74
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 168
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 174,
            column: 21
          },
          end: {
            line: 174,
            column: 22
          }
        },
        loc: {
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 75
          }
        },
        line: 174
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 175,
            column: 59
          },
          end: {
            line: 175,
            column: 60
          }
        },
        loc: {
          start: {
            line: 175,
            column: 67
          },
          end: {
            line: 175,
            column: 89
          }
        },
        line: 175
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 50
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 182
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 183,
            column: 41
          },
          end: {
            line: 183,
            column: 42
          }
        },
        loc: {
          start: {
            line: 183,
            column: 48
          },
          end: {
            line: 183,
            column: 69
          }
        },
        line: 183
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 184,
            column: 44
          },
          end: {
            line: 184,
            column: 45
          }
        },
        loc: {
          start: {
            line: 184,
            column: 51
          },
          end: {
            line: 184,
            column: 75
          }
        },
        line: 184
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 186,
            column: 36
          },
          end: {
            line: 186,
            column: 37
          }
        },
        loc: {
          start: {
            line: 186,
            column: 44
          },
          end: {
            line: 186,
            column: 60
          }
        },
        line: 186
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 187,
            column: 42
          },
          end: {
            line: 187,
            column: 43
          }
        },
        loc: {
          start: {
            line: 187,
            column: 50
          },
          end: {
            line: 187,
            column: 66
          }
        },
        line: 187
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 63
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 194
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 198,
            column: 40
          },
          end: {
            line: 198,
            column: 41
          }
        },
        loc: {
          start: {
            line: 198,
            column: 47
          },
          end: {
            line: 198,
            column: 54
          }
        },
        line: 198
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 57
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 205
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 209,
            column: 86
          },
          end: {
            line: 209,
            column: 87
          }
        },
        loc: {
          start: {
            line: 209,
            column: 94
          },
          end: {
            line: 209,
            column: 150
          }
        },
        line: 209
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 213,
            column: 21
          }
        },
        loc: {
          start: {
            line: 213,
            column: 27
          },
          end: {
            line: 213,
            column: 46
          }
        },
        line: 213
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 36
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 216
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 218,
            column: 45
          },
          end: {
            line: 218,
            column: 46
          }
        },
        loc: {
          start: {
            line: 218,
            column: 53
          },
          end: {
            line: 222,
            column: 13
          }
        },
        line: 218
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 223,
            column: 49
          },
          end: {
            line: 223,
            column: 50
          }
        },
        loc: {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 226,
            column: 13
          }
        },
        line: 223
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 38
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 230
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 235,
            column: 29
          }
        },
        loc: {
          start: {
            line: 235,
            column: 42
          },
          end: {
            line: 240,
            column: 9
          }
        },
        line: 235
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 52
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 242
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 67
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 248
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 249,
            column: 54
          },
          end: {
            line: 249,
            column: 55
          }
        },
        loc: {
          start: {
            line: 249,
            column: 66
          },
          end: {
            line: 249,
            column: 86
          }
        },
        line: 249
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 253,
            column: 74
          },
          end: {
            line: 253,
            column: 75
          }
        },
        loc: {
          start: {
            line: 253,
            column: 82
          },
          end: {
            line: 253,
            column: 123
          }
        },
        line: 253
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 74
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 255
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 256,
            column: 52
          },
          end: {
            line: 256,
            column: 53
          }
        },
        loc: {
          start: {
            line: 256,
            column: 59
          },
          end: {
            line: 256,
            column: 78
          }
        },
        line: 256
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 257,
            column: 54
          },
          end: {
            line: 257,
            column: 55
          }
        },
        loc: {
          start: {
            line: 257,
            column: 61
          },
          end: {
            line: 257,
            column: 81
          }
        },
        line: 257
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 259,
            column: 115
          },
          end: {
            line: 259,
            column: 116
          }
        },
        loc: {
          start: {
            line: 259,
            column: 122
          },
          end: {
            line: 259,
            column: 128
          }
        },
        line: 259
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 259,
            column: 191
          },
          end: {
            line: 259,
            column: 192
          }
        },
        loc: {
          start: {
            line: 259,
            column: 198
          },
          end: {
            line: 259,
            column: 204
          }
        },
        line: 259
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 260,
            column: 102
          },
          end: {
            line: 260,
            column: 103
          }
        },
        loc: {
          start: {
            line: 260,
            column: 109
          },
          end: {
            line: 260,
            column: 115
          }
        },
        line: 260
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 260,
            column: 176
          },
          end: {
            line: 260,
            column: 177
          }
        },
        loc: {
          start: {
            line: 260,
            column: 183
          },
          end: {
            line: 260,
            column: 189
          }
        },
        line: 260
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 264,
            column: 21
          }
        },
        loc: {
          start: {
            line: 264,
            column: 27
          },
          end: {
            line: 264,
            column: 46
          }
        },
        line: 264
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 41
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 267
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 271,
            column: 28
          },
          end: {
            line: 271,
            column: 29
          }
        },
        loc: {
          start: {
            line: 271,
            column: 42
          },
          end: {
            line: 276,
            column: 9
          }
        },
        line: 271
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 24
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 278
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 62
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 289
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 72
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 297
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 298,
            column: 51
          },
          end: {
            line: 298,
            column: 52
          }
        },
        loc: {
          start: {
            line: 298,
            column: 63
          },
          end: {
            line: 301,
            column: 9
          }
        },
        line: 298
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 305,
            column: 73
          },
          end: {
            line: 305,
            column: 74
          }
        },
        loc: {
          start: {
            line: 305,
            column: 81
          },
          end: {
            line: 305,
            column: 116
          }
        },
        line: 305
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 51
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 308
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 327,
            column: 35
          },
          end: {
            line: 327,
            column: 36
          }
        },
        loc: {
          start: {
            line: 327,
            column: 45
          },
          end: {
            line: 329,
            column: 13
          }
        },
        line: 327
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 328,
            column: 42
          },
          end: {
            line: 328,
            column: 43
          }
        },
        loc: {
          start: {
            line: 328,
            column: 51
          },
          end: {
            line: 328,
            column: 95
          }
        },
        line: 328
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 330,
            column: 30
          },
          end: {
            line: 330,
            column: 31
          }
        },
        loc: {
          start: {
            line: 330,
            column: 40
          },
          end: {
            line: 332,
            column: 13
          }
        },
        line: 330
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 331,
            column: 42
          },
          end: {
            line: 331,
            column: 43
          }
        },
        loc: {
          start: {
            line: 331,
            column: 51
          },
          end: {
            line: 331,
            column: 95
          }
        },
        line: 331
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 333,
            column: 32
          },
          end: {
            line: 333,
            column: 33
          }
        },
        loc: {
          start: {
            line: 333,
            column: 42
          },
          end: {
            line: 335,
            column: 13
          }
        },
        line: 333
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 334,
            column: 42
          },
          end: {
            line: 334,
            column: 43
          }
        },
        loc: {
          start: {
            line: 334,
            column: 51
          },
          end: {
            line: 334,
            column: 95
          }
        },
        line: 334
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 342,
            column: 24
          },
          end: {
            line: 342,
            column: 25
          }
        },
        loc: {
          start: {
            line: 342,
            column: 33
          },
          end: {
            line: 342,
            column: 67
          }
        },
        line: 342
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 343,
            column: 21
          },
          end: {
            line: 343,
            column: 22
          }
        },
        loc: {
          start: {
            line: 343,
            column: 31
          },
          end: {
            line: 348,
            column: 13
          }
        },
        line: 343
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 351,
            column: 33
          },
          end: {
            line: 351,
            column: 34
          }
        },
        loc: {
          start: {
            line: 351,
            column: 42
          },
          end: {
            line: 359,
            column: 13
          }
        },
        line: 351
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 361,
            column: 50
          },
          end: {
            line: 361,
            column: 51
          }
        },
        loc: {
          start: {
            line: 361,
            column: 62
          },
          end: {
            line: 365,
            column: 13
          }
        },
        line: 361
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 49
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 379
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 395,
            column: 44
          },
          end: {
            line: 395,
            column: 45
          }
        },
        loc: {
          start: {
            line: 395,
            column: 67
          },
          end: {
            line: 400,
            column: 13
          }
        },
        line: 395
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 402,
            column: 72
          },
          end: {
            line: 402,
            column: 73
          }
        },
        loc: {
          start: {
            line: 402,
            column: 82
          },
          end: {
            line: 402,
            column: 122
          }
        },
        line: 402
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 403,
            column: 62
          },
          end: {
            line: 403,
            column: 63
          }
        },
        loc: {
          start: {
            line: 403,
            column: 72
          },
          end: {
            line: 403,
            column: 118
          }
        },
        line: 403
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 404,
            column: 66
          },
          end: {
            line: 404,
            column: 67
          }
        },
        loc: {
          start: {
            line: 404,
            column: 76
          },
          end: {
            line: 404,
            column: 132
          }
        },
        line: 404
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 405,
            column: 72
          },
          end: {
            line: 405,
            column: 73
          }
        },
        loc: {
          start: {
            line: 405,
            column: 83
          },
          end: {
            line: 405,
            column: 135
          }
        },
        line: 405
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 45
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 413
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 460,
            column: 61
          },
          end: {
            line: 460,
            column: 62
          }
        },
        loc: {
          start: {
            line: 460,
            column: 71
          },
          end: {
            line: 465,
            column: 17
          }
        },
        line: 460
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 473,
            column: 48
          },
          end: {
            line: 473,
            column: 49
          }
        },
        loc: {
          start: {
            line: 473,
            column: 63
          },
          end: {
            line: 478,
            column: 17
          }
        },
        line: 473
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 49
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 486
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 520,
            column: 48
          },
          end: {
            line: 520,
            column: 49
          }
        },
        loc: {
          start: {
            line: 520,
            column: 63
          },
          end: {
            line: 525,
            column: 17
          }
        },
        line: 520
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 533,
            column: 4
          },
          end: {
            line: 533,
            column: 5
          }
        },
        loc: {
          start: {
            line: 533,
            column: 45
          },
          end: {
            line: 597,
            column: 5
          }
        },
        line: 533
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 551,
            column: 58
          },
          end: {
            line: 551,
            column: 59
          }
        },
        loc: {
          start: {
            line: 551,
            column: 75
          },
          end: {
            line: 551,
            column: 96
          }
        },
        line: 551
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 570,
            column: 59
          },
          end: {
            line: 570,
            column: 60
          }
        },
        loc: {
          start: {
            line: 570,
            column: 69
          },
          end: {
            line: 575,
            column: 17
          }
        },
        line: 570
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 579,
            column: 50
          },
          end: {
            line: 579,
            column: 51
          }
        },
        loc: {
          start: {
            line: 579,
            column: 63
          },
          end: {
            line: 584,
            column: 21
          }
        },
        line: 579
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 586,
            column: 46
          },
          end: {
            line: 586,
            column: 47
          }
        },
        loc: {
          start: {
            line: 586,
            column: 61
          },
          end: {
            line: 590,
            column: 17
          }
        },
        line: 586
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 7,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 7,
            column: 34
          }
        }, {
          start: {
            line: 7,
            column: 38
          },
          end: {
            line: 7,
            column: 44
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 26
          }
        }, {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 26
          }
        }, {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 53,
            column: 26
          }
        }, {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 26
          }
        }, {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 58,
            column: 59
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 40
          }
        }, {
          start: {
            line: 70,
            column: 44
          },
          end: {
            line: 70,
            column: 74
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 51
          },
          end: {
            line: 72,
            column: 71
          }
        }, {
          start: {
            line: 72,
            column: 74
          },
          end: {
            line: 72,
            column: 93
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 32
          }
        }, {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 60
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 80,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 51
          },
          end: {
            line: 80,
            column: 62
          }
        }, {
          start: {
            line: 80,
            column: 65
          },
          end: {
            line: 80,
            column: 72
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 101,
            column: 23
          },
          end: {
            line: 103,
            column: 264
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 14
          },
          end: {
            line: 102,
            column: 275
          }
        }, {
          start: {
            line: 103,
            column: 14
          },
          end: {
            line: 103,
            column: 264
          }
        }],
        line: 101
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 27
          },
          end: {
            line: 110,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 55
          },
          end: {
            line: 110,
            column: 73
          }
        }, {
          start: {
            line: 110,
            column: 76
          },
          end: {
            line: 110,
            column: 94
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 135,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 48
          },
          end: {
            line: 135,
            column: 69
          }
        }, {
          start: {
            line: 135,
            column: 72
          },
          end: {
            line: 135,
            column: 86
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 161,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 48
          },
          end: {
            line: 161,
            column: 67
          }
        }, {
          start: {
            line: 161,
            column: 70
          },
          end: {
            line: 161,
            column: 83
          }
        }],
        line: 161
      },
      "13": {
        loc: {
          start: {
            line: 177,
            column: 23
          },
          end: {
            line: 179,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 178,
            column: 14
          },
          end: {
            line: 178,
            column: 122
          }
        }, {
          start: {
            line: 179,
            column: 14
          },
          end: {
            line: 179,
            column: 120
          }
        }],
        line: 177
      },
      "14": {
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 191,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 14
          },
          end: {
            line: 190,
            column: 93
          }
        }, {
          start: {
            line: 191,
            column: 14
          },
          end: {
            line: 191,
            column: 94
          }
        }],
        line: 189
      },
      "15": {
        loc: {
          start: {
            line: 200,
            column: 23
          },
          end: {
            line: 202,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 201,
            column: 14
          },
          end: {
            line: 201,
            column: 138
          }
        }, {
          start: {
            line: 202,
            column: 14
          },
          end: {
            line: 202,
            column: 125
          }
        }],
        line: 200
      },
      "16": {
        loc: {
          start: {
            line: 206,
            column: 23
          },
          end: {
            line: 208,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 14
          },
          end: {
            line: 207,
            column: 113
          }
        }, {
          start: {
            line: 208,
            column: 14
          },
          end: {
            line: 208,
            column: 100
          }
        }],
        line: 206
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 23
          },
          end: {
            line: 245,
            column: 190
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 14
          },
          end: {
            line: 244,
            column: 195
          }
        }, {
          start: {
            line: 245,
            column: 14
          },
          end: {
            line: 245,
            column: 190
          }
        }],
        line: 243
      },
      "18": {
        loc: {
          start: {
            line: 250,
            column: 23
          },
          end: {
            line: 252,
            column: 165
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 14
          },
          end: {
            line: 251,
            column: 177
          }
        }, {
          start: {
            line: 252,
            column: 14
          },
          end: {
            line: 252,
            column: 165
          }
        }],
        line: 250
      },
      "19": {
        loc: {
          start: {
            line: 258,
            column: 23
          },
          end: {
            line: 260,
            column: 205
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 14
          },
          end: {
            line: 259,
            column: 220
          }
        }, {
          start: {
            line: 260,
            column: 14
          },
          end: {
            line: 260,
            column: 205
          }
        }],
        line: 258
      },
      "20": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 280,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 280,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "21": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 282,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 282,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "22": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 284,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 284,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "23": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 286,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 286,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "24": {
        loc: {
          start: {
            line: 290,
            column: 23
          },
          end: {
            line: 292,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 14
          },
          end: {
            line: 291,
            column: 167
          }
        }, {
          start: {
            line: 292,
            column: 14
          },
          end: {
            line: 292,
            column: 148
          }
        }],
        line: 290
      },
      "25": {
        loc: {
          start: {
            line: 299,
            column: 31
          },
          end: {
            line: 299,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 31
          },
          end: {
            line: 299,
            column: 72
          }
        }, {
          start: {
            line: 299,
            column: 76
          },
          end: {
            line: 299,
            column: 77
          }
        }],
        line: 299
      },
      "26": {
        loc: {
          start: {
            line: 302,
            column: 23
          },
          end: {
            line: 304,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 14
          },
          end: {
            line: 303,
            column: 171
          }
        }, {
          start: {
            line: 304,
            column: 14
          },
          end: {
            line: 304,
            column: 161
          }
        }],
        line: 302
      },
      "27": {
        loc: {
          start: {
            line: 339,
            column: 39
          },
          end: {
            line: 339,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 339,
            column: 63
          },
          end: {
            line: 339,
            column: 122
          }
        }, {
          start: {
            line: 339,
            column: 125
          },
          end: {
            line: 339,
            column: 126
          }
        }],
        line: 339
      },
      "28": {
        loc: {
          start: {
            line: 352,
            column: 16
          },
          end: {
            line: 354,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 16
          },
          end: {
            line: 354,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "29": {
        loc: {
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "30": {
        loc: {
          start: {
            line: 364,
            column: 20
          },
          end: {
            line: 364,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 364,
            column: 43
          },
          end: {
            line: 364,
            column: 100
          }
        }, {
          start: {
            line: 364,
            column: 103
          },
          end: {
            line: 364,
            column: 104
          }
        }],
        line: 364
      },
      "31": {
        loc: {
          start: {
            line: 398,
            column: 39
          },
          end: {
            line: 398,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 398,
            column: 51
          },
          end: {
            line: 398,
            column: 88
          }
        }, {
          start: {
            line: 398,
            column: 91
          },
          end: {
            line: 398,
            column: 92
          }
        }],
        line: 398
      },
      "32": {
        loc: {
          start: {
            line: 402,
            column: 82
          },
          end: {
            line: 402,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 402,
            column: 82
          },
          end: {
            line: 402,
            column: 101
          }
        }, {
          start: {
            line: 402,
            column: 105
          },
          end: {
            line: 402,
            column: 122
          }
        }],
        line: 402
      },
      "33": {
        loc: {
          start: {
            line: 403,
            column: 72
          },
          end: {
            line: 403,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 72
          },
          end: {
            line: 403,
            column: 94
          }
        }, {
          start: {
            line: 403,
            column: 98
          },
          end: {
            line: 403,
            column: 118
          }
        }],
        line: 403
      },
      "34": {
        loc: {
          start: {
            line: 404,
            column: 76
          },
          end: {
            line: 404,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 76
          },
          end: {
            line: 404,
            column: 103
          }
        }, {
          start: {
            line: 404,
            column: 107
          },
          end: {
            line: 404,
            column: 132
          }
        }],
        line: 404
      },
      "35": {
        loc: {
          start: {
            line: 405,
            column: 83
          },
          end: {
            line: 405,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 83
          },
          end: {
            line: 405,
            column: 108
          }
        }, {
          start: {
            line: 405,
            column: 112
          },
          end: {
            line: 405,
            column: 135
          }
        }],
        line: 405
      },
      "36": {
        loc: {
          start: {
            line: 432,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "37": {
        loc: {
          start: {
            line: 441,
            column: 29
          },
          end: {
            line: 441,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 441,
            column: 29
          },
          end: {
            line: 441,
            column: 43
          }
        }, {
          start: {
            line: 441,
            column: 47
          },
          end: {
            line: 441,
            column: 56
          }
        }],
        line: 441
      },
      "38": {
        loc: {
          start: {
            line: 442,
            column: 28
          },
          end: {
            line: 442,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 28
          },
          end: {
            line: 442,
            column: 41
          }
        }, {
          start: {
            line: 442,
            column: 45
          },
          end: {
            line: 442,
            column: 54
          }
        }],
        line: 442
      },
      "39": {
        loc: {
          start: {
            line: 443,
            column: 35
          },
          end: {
            line: 443,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 35
          },
          end: {
            line: 443,
            column: 55
          }
        }, {
          start: {
            line: 443,
            column: 59
          },
          end: {
            line: 443,
            column: 68
          }
        }],
        line: 443
      },
      "40": {
        loc: {
          start: {
            line: 444,
            column: 35
          },
          end: {
            line: 444,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 35
          },
          end: {
            line: 444,
            column: 55
          }
        }, {
          start: {
            line: 444,
            column: 59
          },
          end: {
            line: 444,
            column: 68
          }
        }],
        line: 444
      },
      "41": {
        loc: {
          start: {
            line: 445,
            column: 31
          },
          end: {
            line: 445,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 445,
            column: 65
          },
          end: {
            line: 445,
            column: 81
          }
        }, {
          start: {
            line: 445,
            column: 84
          },
          end: {
            line: 445,
            column: 93
          }
        }],
        line: 445
      },
      "42": {
        loc: {
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 452,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 452,
            column: 70
          }
        }, {
          start: {
            line: 452,
            column: 74
          },
          end: {
            line: 452,
            column: 83
          }
        }],
        line: 452
      },
      "43": {
        loc: {
          start: {
            line: 453,
            column: 31
          },
          end: {
            line: 453,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 31
          },
          end: {
            line: 453,
            column: 66
          }
        }, {
          start: {
            line: 453,
            column: 70
          },
          end: {
            line: 453,
            column: 79
          }
        }],
        line: 453
      },
      "44": {
        loc: {
          start: {
            line: 466,
            column: 28
          },
          end: {
            line: 472,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 467,
            column: 22
          },
          end: {
            line: 471,
            column: 21
          }
        }, {
          start: {
            line: 472,
            column: 22
          },
          end: {
            line: 472,
            column: 31
          }
        }],
        line: 466
      },
      "45": {
        loc: {
          start: {
            line: 468,
            column: 36
          },
          end: {
            line: 468,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 36
          },
          end: {
            line: 468,
            column: 66
          }
        }, {
          start: {
            line: 468,
            column: 70
          },
          end: {
            line: 468,
            column: 79
          }
        }],
        line: 468
      },
      "46": {
        loc: {
          start: {
            line: 469,
            column: 39
          },
          end: {
            line: 469,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 39
          },
          end: {
            line: 469,
            column: 72
          }
        }, {
          start: {
            line: 469,
            column: 76
          },
          end: {
            line: 469,
            column: 85
          }
        }],
        line: 469
      },
      "47": {
        loc: {
          start: {
            line: 470,
            column: 42
          },
          end: {
            line: 470,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 42
          },
          end: {
            line: 470,
            column: 78
          }
        }, {
          start: {
            line: 470,
            column: 82
          },
          end: {
            line: 470,
            column: 91
          }
        }],
        line: 470
      },
      "48": {
        loc: {
          start: {
            line: 477,
            column: 25
          },
          end: {
            line: 477,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 477,
            column: 25
          },
          end: {
            line: 477,
            column: 37
          }
        }, {
          start: {
            line: 477,
            column: 41
          },
          end: {
            line: 477,
            column: 50
          }
        }],
        line: 477
      },
      "49": {
        loc: {
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 501,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 12
          },
          end: {
            line: 501,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 499
      },
      "50": {
        loc: {
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 504,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 504,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "51": {
        loc: {
          start: {
            line: 508,
            column: 29
          },
          end: {
            line: 508,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 508,
            column: 29
          },
          end: {
            line: 508,
            column: 66
          }
        }, {
          start: {
            line: 508,
            column: 70
          },
          end: {
            line: 508,
            column: 85
          }
        }],
        line: 508
      },
      "52": {
        loc: {
          start: {
            line: 509,
            column: 27
          },
          end: {
            line: 509,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 509,
            column: 27
          },
          end: {
            line: 509,
            column: 62
          }
        }, {
          start: {
            line: 509,
            column: 66
          },
          end: {
            line: 509,
            column: 67
          }
        }],
        line: 509
      },
      "53": {
        loc: {
          start: {
            line: 513,
            column: 27
          },
          end: {
            line: 513,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 513,
            column: 61
          },
          end: {
            line: 513,
            column: 77
          }
        }, {
          start: {
            line: 513,
            column: 80
          },
          end: {
            line: 513,
            column: 82
          }
        }],
        line: 513
      },
      "54": {
        loc: {
          start: {
            line: 515,
            column: 29
          },
          end: {
            line: 515,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 515,
            column: 29
          },
          end: {
            line: 515,
            column: 43
          }
        }, {
          start: {
            line: 515,
            column: 47
          },
          end: {
            line: 515,
            column: 49
          }
        }],
        line: 515
      },
      "55": {
        loc: {
          start: {
            line: 516,
            column: 26
          },
          end: {
            line: 516,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 26
          },
          end: {
            line: 516,
            column: 39
          }
        }, {
          start: {
            line: 516,
            column: 43
          },
          end: {
            line: 516,
            column: 45
          }
        }],
        line: 516
      },
      "56": {
        loc: {
          start: {
            line: 517,
            column: 29
          },
          end: {
            line: 517,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 517,
            column: 29
          },
          end: {
            line: 517,
            column: 49
          }
        }, {
          start: {
            line: 517,
            column: 53
          },
          end: {
            line: 517,
            column: 55
          }
        }],
        line: 517
      },
      "57": {
        loc: {
          start: {
            line: 519,
            column: 30
          },
          end: {
            line: 519,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 30
          },
          end: {
            line: 519,
            column: 45
          }
        }, {
          start: {
            line: 519,
            column: 49
          },
          end: {
            line: 519,
            column: 58
          }
        }],
        line: 519
      },
      "58": {
        loc: {
          start: {
            line: 524,
            column: 29
          },
          end: {
            line: 524,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 524,
            column: 29
          },
          end: {
            line: 524,
            column: 45
          }
        }, {
          start: {
            line: 524,
            column: 49
          },
          end: {
            line: 524,
            column: 58
          }
        }],
        line: 524
      },
      "59": {
        loc: {
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 550,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 550,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 548
      },
      "60": {
        loc: {
          start: {
            line: 556,
            column: 33
          },
          end: {
            line: 556,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 556,
            column: 33
          },
          end: {
            line: 556,
            column: 49
          }
        }, {
          start: {
            line: 556,
            column: 53
          },
          end: {
            line: 556,
            column: 62
          }
        }],
        line: 556
      },
      "61": {
        loc: {
          start: {
            line: 557,
            column: 30
          },
          end: {
            line: 557,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 557,
            column: 30
          },
          end: {
            line: 557,
            column: 43
          }
        }, {
          start: {
            line: 557,
            column: 47
          },
          end: {
            line: 557,
            column: 56
          }
        }],
        line: 557
      },
      "62": {
        loc: {
          start: {
            line: 566,
            column: 33
          },
          end: {
            line: 566,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 566,
            column: 33
          },
          end: {
            line: 566,
            column: 59
          }
        }, {
          start: {
            line: 566,
            column: 63
          },
          end: {
            line: 566,
            column: 72
          }
        }],
        line: 566
      },
      "63": {
        loc: {
          start: {
            line: 567,
            column: 31
          },
          end: {
            line: 567,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 567,
            column: 31
          },
          end: {
            line: 567,
            column: 55
          }
        }, {
          start: {
            line: 567,
            column: 59
          },
          end: {
            line: 567,
            column: 68
          }
        }],
        line: 567
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/reportGeneratorService.ts"],
      sourcesContent: ["import { prisma } from '../prisma';\nimport { generateContent } from './llmService';\nimport logger from '../logger';\n\nexport interface ReportGenerationRequest {\n  studentId: number;\n  reportType: 'progress' | 'narrative' | 'term_summary' | 'report_card';\n  termId?: number;\n  subjectId?: number;\n  startDate: Date;\n  endDate: Date;\n  language: 'en' | 'fr';\n  includeAssessments?: boolean;\n  includeAttendance?: boolean;\n  includeGoals?: boolean;\n}\n\nexport interface GeneratedReport {\n  studentName: string;\n  period: string;\n  sections: ReportSection[];\n  overallComments: string;\n  nextSteps: string[];\n}\n\nexport interface ReportSection {\n  title: string;\n  content: string;\n  data?: Record<string, unknown>;\n}\n\n// Type definitions for student data with relations\ninterface StudentWithRelations {\n  id: number;\n  firstName: string;\n  lastName: string;\n  user: { id: number };\n  artifacts: Artifact[];\n  reflections: Reflection[];\n  goals: Goal[];\n}\n\ninterface Artifact {\n  id: number;\n  title: string;\n  description: string | null;\n  createdAt: Date;\n}\n\ninterface Reflection {\n  id: number;\n  content: string;\n  createdAt: Date;\n}\n\ninterface Goal {\n  id: number;\n  text: string;\n  status: string;\n}\n\ninterface SubjectProgress {\n  id: number;\n  name: string;\n  outcomes: string[];\n  averageScore: number;\n  [key: string]: unknown;\n}\n\ninterface SubjectReportCard {\n  id: number;\n  name: string;\n  grade: string;\n  outcomes: string[];\n}\n\n// Type definitions for curriculum and planning reports\nexport interface CurriculumCoverageReport {\n  totalExpectations: number;\n  coveredExpectations: number;\n  coveragePercentage: number;\n  uncoveredExpectations: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  coverageByStrand: Record<\n    string,\n    {\n      total: number;\n      covered: number;\n      percentage: number;\n    }\n  >;\n}\n\nexport interface PlanningProgressReport {\n  longRangePlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  unitPlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  lessonPlans: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n  daybookEntries: {\n    total: number;\n    completed: number;\n    completionRate: number;\n  };\n}\n\nexport interface LessonPlanReport {\n  lesson: {\n    id: string;\n    title: string;\n    date: Date;\n    duration: number;\n    mindsOn?: string;\n    action?: string;\n    consolidation?: string;\n    learningGoals?: string;\n    materials?: string[];\n    isSubFriendly: boolean;\n  };\n  hierarchy: {\n    longRangePlan: {\n      id: string;\n      title: string;\n      subject?: string;\n      grade?: number;\n    };\n    unitPlan: {\n      id: string;\n      title: string;\n    };\n  };\n  curriculumAlignment: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  reflection?: {\n    whatWorked?: string;\n    overallRating?: number;\n    wouldReuseLesson?: boolean;\n  };\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n    url?: string;\n  }>;\n}\n\nexport interface SubstitutePlanReport {\n  title: string;\n  basicInfo: {\n    subject: string;\n    grade: number;\n    duration: number;\n    date: Date;\n  };\n  materials: string[];\n  activities: {\n    opening: string;\n    main: string;\n    closing: string;\n  };\n  specialNotes?: string;\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n    content?: string;\n  }>;\n}\n\nexport interface UnitOverviewReport {\n  unit: {\n    id: string;\n    title: string;\n    description?: string;\n    bigIdeas?: string;\n    startDate: Date;\n    endDate: Date;\n    estimatedHours: number;\n  };\n  hierarchy: {\n    longRangePlan: {\n      id: string;\n      title: string;\n      subject?: string;\n      grade?: number;\n    };\n  };\n  curriculumAlignment: Array<{\n    id: string;\n    code: string;\n    description: string;\n    strand: string;\n  }>;\n  lessonSummary: {\n    totalLessons: number;\n    totalDuration: number;\n    lessons: Array<{\n      id: string;\n      title: string;\n      date: Date;\n      duration: number;\n    }>;\n  };\n  resources: Array<{\n    id: string;\n    title: string;\n    type: string;\n  }>;\n}\n\nexport class ReportGeneratorService {\n  private prisma: typeof prisma;\n\n  constructor(prismaClient?: typeof prisma) {\n    this.prisma = prismaClient || prisma;\n  }\n\n  async generateReport(request: ReportGenerationRequest): Promise<GeneratedReport> {\n    try {\n      // Fetch student data\n      const student = await this.prisma.student.findUnique({\n        where: { id: request.studentId },\n        include: {\n          user: true,\n          artifacts: {\n            where: {\n              createdAt: {\n                gte: request.startDate,\n                lte: request.endDate,\n              },\n            },\n          },\n          reflections: {\n            where: {\n              createdAt: {\n                gte: request.startDate,\n                lte: request.endDate,\n              },\n            },\n          },\n          goals: {\n            where: {\n              OR: [{ status: 'active' }, { status: 'completed' }],\n            },\n          },\n        },\n      });\n\n      if (!student) {\n        throw new Error('Student not found');\n      }\n\n      // Generate report based on type\n      let report: GeneratedReport;\n\n      switch (request.reportType) {\n        case 'progress':\n          report = await this.generateProgressReport(student, request);\n          break;\n        case 'narrative':\n          report = await this.generateNarrativeReport(student, request);\n          break;\n        case 'term_summary':\n          report = await this.generateTermSummary(student, request);\n          break;\n        case 'report_card':\n          report = await this.generateReportCard(student, request);\n          break;\n        default:\n          throw new Error('Invalid report type');\n      }\n\n      return report;\n    } catch (error) {\n      logger.error('Failed to generate report:', error);\n      throw error;\n    }\n  }\n\n  private async generateProgressReport(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Assessment functionality removed - focus on artifacts and reflections\n    if (student.artifacts.length > 0 || student.reflections.length > 0) {\n      sections.push({\n        title: request.language === 'fr' ? 'Progr\xE8s acad\xE9mique' : 'Academic Progress',\n        content: await this.generateProgressFromArtifacts(\n          student.artifacts,\n          student.reflections,\n          request.language,\n        ),\n        data: { artifacts: student.artifacts, reflections: student.reflections },\n      });\n    }\n\n    // Goals Section\n    if (request.includeGoals && student.goals.length > 0) {\n      sections.push({\n        title: request.language === 'fr' ? 'Objectifs' : 'Goals',\n        content: await this.generateGoalsNarrative(student.goals, request.language),\n        data: { goals: student.goals },\n      });\n    }\n\n    // Overall Comments\n    const overallComments = await this.generateOverallComments(student, sections, request.language);\n\n    // Next Steps\n    const nextSteps = await this.generateNextSteps(student, sections, request.language);\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,\n      sections,\n      overallComments,\n      nextSteps,\n    };\n  }\n\n  private async generateNarrativeReport(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    // Gather comprehensive data\n    const learningJourney = this.compileLearningJourney(student);\n\n    // Generate narrative using LLM\n    const prompt =\n      request.language === 'fr'\n        ? `G\xE9n\xE9rez un rapport narratif d\xE9taill\xE9 pour ${student.firstName} ${student.lastName}, couvrant la p\xE9riode du ${request.startDate.toLocaleDateString()} au ${request.endDate.toLocaleDateString()}. Incluez les r\xE9alisations, les d\xE9fis et les domaines de croissance.`\n        : `Generate a detailed narrative report for ${student.firstName} ${student.lastName}, covering the period from ${request.startDate.toLocaleDateString()} to ${request.endDate.toLocaleDateString()}. Include achievements, challenges, and areas of growth.`;\n\n    const narrative = await generateContent(prompt, JSON.stringify(learningJourney));\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,\n      sections: [\n        {\n          title: request.language === 'fr' ? 'Rapport narratif' : 'Narrative Report',\n          content: narrative,\n        },\n      ],\n      overallComments: '',\n      nextSteps: [],\n    };\n  }\n\n  private async generateTermSummary(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Get subject-specific progress\n    const subjectProgress = await this.getSubjectProgress(student);\n\n    for (const subject of subjectProgress) {\n      sections.push({\n        title: subject.name,\n        content: await this.generateSubjectSummary(subject, request.language),\n        data: subject,\n      });\n    }\n\n    // Overall term performance\n    const overallComments = await this.generateTermOverview(\n      student,\n      subjectProgress,\n      request.language,\n    );\n\n    // Recommendations for next term\n    const nextSteps = await this.generateTermRecommendations(\n      student,\n      subjectProgress,\n      request.language,\n    );\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: request.language === 'fr' ? 'R\xE9sum\xE9 du trimestre' : 'Term Summary',\n      sections,\n      overallComments,\n      nextSteps,\n    };\n  }\n\n  private async generateReportCard(\n    student: StudentWithRelations,\n    request: ReportGenerationRequest,\n  ): Promise<GeneratedReport> {\n    const sections: ReportSection[] = [];\n\n    // Get formal grades/assessments by subject\n    const reportCardData = await this.compileReportCardData(student);\n\n    for (const subject of reportCardData) {\n      // Generate teacher comments for each subject\n      const comments = await this.generateSubjectComments(subject, student, request.language);\n\n      sections.push({\n        title: subject.name,\n        content: comments,\n        data: {\n          grade: subject.grade,\n          outcomes: subject.outcomes,\n        },\n      });\n    }\n\n    // General comments\n    const overallComments = await this.generateReportCardComments(\n      student,\n      reportCardData,\n      request.language,\n    );\n\n    return {\n      studentName: `${student.firstName} ${student.lastName}`,\n      period: request.language === 'fr' ? 'Bulletin scolaire' : 'Report Card',\n      sections,\n      overallComments,\n      nextSteps: [],\n    };\n  }\n\n  // Helper methods\n  private async generateProgressFromArtifacts(\n    artifacts: Artifact[],\n    reflections: Reflection[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const context = {\n      artifactCount: artifacts.length,\n      reflectionCount: reflections.length,\n      recentArtifacts: artifacts\n        .slice(0, 3)\n        .map((a) => ({ title: a.title, description: a.description })),\n      recentReflections: reflections.slice(0, 3).map((r) => ({ content: r.content })),\n    };\n\n    const prompt =\n      language === 'fr'\n        ? `D\xE9crivez le progr\xE8s acad\xE9mique bas\xE9 sur ${artifacts.length} artefacts et ${reflections.length} r\xE9flexions.`\n        : `Describe academic progress based on ${artifacts.length} artifacts and ${reflections.length} reflections.`;\n\n    return generateContent(prompt, JSON.stringify(context));\n  }\n\n  private async generateGoalsNarrative(goals: Goal[], language: 'en' | 'fr'): Promise<string> {\n    const activeGoals = goals.filter((g) => g.status === 'active');\n    const completedGoals = goals.filter((g) => g.status === 'completed');\n\n    const context = {\n      active: activeGoals.map((g) => ({ text: g.text })),\n      completed: completedGoals.map((g) => ({ text: g.text })),\n    };\n\n    const prompt =\n      language === 'fr'\n        ? `D\xE9crivez le progr\xE8s vers les objectifs de l'\xE9l\xE8ve: ${JSON.stringify(context)}`\n        : `Describe the student's progress toward their goals: ${JSON.stringify(context)}`;\n\n    return generateContent(prompt);\n  }\n\n  private async generateOverallComments(\n    student: StudentWithRelations,\n    sections: ReportSection[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const context = {\n      studentName: `${student.firstName} ${student.lastName}`,\n      sectionsCount: sections.length,\n      sectionTitles: sections.map((s) => s.title),\n    };\n\n    const prompt =\n      language === 'fr'\n        ? `G\xE9n\xE9rez des commentaires g\xE9n\xE9raux positifs et encourageants pour ${context.studentName} bas\xE9s sur leur rapport de progr\xE8s.`\n        : `Generate positive and encouraging overall comments for ${context.studentName} based on their progress report.`;\n\n    return generateContent(prompt, JSON.stringify(context));\n  }\n\n  private async generateNextSteps(\n    student: StudentWithRelations,\n    sections: ReportSection[],\n    language: 'en' | 'fr',\n  ): Promise<string[]> {\n    const prompt =\n      language === 'fr'\n        ? `Sugg\xE9rez 3-5 prochaines \xE9tapes sp\xE9cifiques pour ${student.firstName} pour continuer leur progr\xE8s.`\n        : `Suggest 3-5 specific next steps for ${student.firstName} to continue their progress.`;\n\n    const suggestions = await generateContent(\n      prompt,\n      JSON.stringify(\n        sections.map((s) => ({ title: s.title, summary: s.content.substring(0, 100) })),\n      ),\n    );\n\n    // Parse the suggestions into an array\n    return suggestions\n      .split('\\n')\n      .filter((s) => s.trim().length > 0)\n      .slice(0, 5);\n  }\n\n  private compileLearningJourney(student: StudentWithRelations) {\n    return {\n      artifacts: student.artifacts.map((a) => ({\n        title: a.title,\n        description: a.description,\n        createdAt: a.createdAt,\n      })),\n      reflections: student.reflections.map((r) => ({\n        content: r.content,\n        createdAt: r.createdAt,\n      })),\n      goals: student.goals,\n    };\n  }\n\n  private async getSubjectProgress(\n    student: StudentWithRelations & { user: { id: number } },\n  ): Promise<SubjectProgress[]> {\n    // Simplified subject progress without deep relations\n    const subjects = await this.prisma.subject.findMany({\n      where: { userId: student.user.id },\n    });\n\n    return subjects.map((subject) => ({\n      id: subject.id,\n      name: subject.name,\n      outcomes: [],\n      averageScore: 0, // Assessment functionality removed\n    }));\n  }\n\n  private async generateSubjectSummary(\n    subject: SubjectProgress,\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const prompt =\n      language === 'fr'\n        ? `R\xE9sumez la performance de l'\xE9l\xE8ve en ${subject.name} avec une note moyenne de ${subject.averageScore.toFixed(1)}% et couvrant ${subject.outcomes.length} r\xE9sultats d'apprentissage.`\n        : `Summarize the student's performance in ${subject.name} with an average score of ${subject.averageScore.toFixed(1)}% and covering ${subject.outcomes.length} learning outcomes.`;\n\n    return generateContent(prompt);\n  }\n\n  private async generateTermOverview(\n    student: StudentWithRelations,\n    subjectProgress: SubjectProgress[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const overallAverage =\n      subjectProgress.reduce((sum, s) => sum + s.averageScore, 0) / subjectProgress.length;\n\n    const prompt =\n      language === 'fr'\n        ? `G\xE9n\xE9rez un aper\xE7u du trimestre pour ${student.firstName} avec une moyenne g\xE9n\xE9rale de ${overallAverage.toFixed(1)}% \xE0 travers ${subjectProgress.length} mati\xE8res.`\n        : `Generate a term overview for ${student.firstName} with an overall average of ${overallAverage.toFixed(1)}% across ${subjectProgress.length} subjects.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify(subjectProgress.map((s) => ({ name: s.name, average: s.averageScore }))),\n    );\n  }\n\n  private async generateTermRecommendations(\n    student: StudentWithRelations,\n    subjectProgress: SubjectProgress[],\n    language: 'en' | 'fr',\n  ): Promise<string[]> {\n    const weakSubjects = subjectProgress.filter((s) => s.averageScore < 70);\n    const strongSubjects = subjectProgress.filter((s) => s.averageScore >= 85);\n\n    const prompt =\n      language === 'fr'\n        ? `Sugg\xE9rez 3-5 recommandations pour le prochain trimestre bas\xE9es sur les forces (${strongSubjects.map((s) => s.name).join(', ')}) et les domaines \xE0 am\xE9liorer (${weakSubjects.map((s) => s.name).join(', ')}).`\n        : `Suggest 3-5 recommendations for the next term based on strengths (${strongSubjects.map((s) => s.name).join(', ')}) and areas for improvement (${weakSubjects.map((s) => s.name).join(', ')}).`;\n\n    const recommendations = await generateContent(prompt);\n\n    return recommendations\n      .split('\\n')\n      .filter((r) => r.trim().length > 0)\n      .slice(0, 5);\n  }\n\n  private async compileReportCardData(\n    student: StudentWithRelations & { user: { id: number } },\n  ): Promise<SubjectReportCard[]> {\n    const subjects = await this.prisma.subject.findMany({\n      where: { userId: student.user.id },\n    });\n\n    return subjects.map((subject) => ({\n      id: subject.id,\n      name: subject.name,\n      grade: 'N/A', // Assessment functionality removed\n      outcomes: [],\n    }));\n  }\n\n  private scoreToGrade(score: number): string {\n    if (score >= 90) return 'A';\n    if (score >= 80) return 'B';\n    if (score >= 70) return 'C';\n    if (score >= 60) return 'D';\n    return 'F';\n  }\n\n  private async generateSubjectComments(\n    subject: SubjectReportCard,\n    student: StudentWithRelations,\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const prompt =\n      language === 'fr'\n        ? `G\xE9n\xE9rez des commentaires d'enseignant pour ${student.firstName} en ${subject.name} avec une note de ${subject.grade}. Soyez sp\xE9cifique et encourageant.`\n        : `Generate teacher comments for ${student.firstName} in ${subject.name} with a grade of ${subject.grade}. Be specific and encouraging.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify({\n        outcomes: subject.outcomes.length,\n      }),\n    );\n  }\n\n  private async generateReportCardComments(\n    student: StudentWithRelations,\n    reportCardData: SubjectReportCard[],\n    language: 'en' | 'fr',\n  ): Promise<string> {\n    const overallGrade =\n      reportCardData.reduce((sum, s) => {\n        const gradeValue = { A: 4, B: 3, C: 2, D: 1, F: 0 }[s.grade] || 0;\n        return sum + gradeValue;\n      }, 0) / reportCardData.length;\n\n    const prompt =\n      language === 'fr'\n        ? `G\xE9n\xE9rez des commentaires g\xE9n\xE9raux de bulletin pour ${student.firstName} ${student.lastName} avec une performance globale de ${overallGrade.toFixed(1)}/4.0.`\n        : `Generate overall report card comments for ${student.firstName} ${student.lastName} with an overall performance of ${overallGrade.toFixed(1)}/4.0.`;\n\n    return generateContent(\n      prompt,\n      JSON.stringify(reportCardData.map((s) => ({ subject: s.name, grade: s.grade }))),\n    );\n  }\n\n  // Curriculum and Planning Report Methods\n  async generateCurriculumCoverageReport(userId: number): Promise<CurriculumCoverageReport> {\n    try {\n      // Get all curriculum expectations - we'll filter by covered/uncovered later\n      const expectations = await this.prisma.curriculumExpectation.findMany();\n\n      // Get all plans with expectations\n      const longRangePlans = await this.prisma.longRangePlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      const unitPlans = await this.prisma.unitPlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      const lessonPlans = await this.prisma.eTFOLessonPlan.findMany({\n        where: { userId },\n        include: { expectations: true },\n      });\n\n      // Collect all covered expectation IDs\n      const coveredExpectationIds = new Set<string>();\n\n      longRangePlans.forEach((plan) => {\n        plan.expectations.forEach((exp) => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      unitPlans.forEach((plan) => {\n        plan.expectations.forEach((exp) => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      lessonPlans.forEach((plan) => {\n        plan.expectations.forEach((exp) => coveredExpectationIds.add(exp.expectationId));\n      });\n\n      // Calculate coverage\n      const totalExpectations = expectations.length;\n      const coveredExpectations = coveredExpectationIds.size;\n      const coveragePercentage =\n        totalExpectations > 0 ? Math.round((coveredExpectations / totalExpectations) * 100) : 0;\n\n      // Find uncovered expectations\n      const uncoveredExpectations = expectations\n        .filter((exp) => !coveredExpectationIds.has(exp.id))\n        .map((exp) => ({\n          id: exp.id,\n          code: exp.code,\n          description: exp.description,\n          strand: exp.strand,\n        }));\n\n      // Calculate coverage by strand\n      const coverageByStrand: Record<\n        string,\n        { total: number; covered: number; percentage: number }\n      > = {};\n\n      expectations.forEach((exp) => {\n        if (!coverageByStrand[exp.strand]) {\n          coverageByStrand[exp.strand] = { total: 0, covered: 0, percentage: 0 };\n        }\n        coverageByStrand[exp.strand].total++;\n        if (coveredExpectationIds.has(exp.id)) {\n          coverageByStrand[exp.strand].covered++;\n        }\n      });\n\n      // Calculate percentages for each strand\n      Object.keys(coverageByStrand).forEach((strand) => {\n        const strandData = coverageByStrand[strand];\n        strandData.percentage =\n          strandData.total > 0 ? Math.round((strandData.covered / strandData.total) * 100) : 0;\n      });\n\n      return {\n        totalExpectations,\n        coveredExpectations,\n        coveragePercentage,\n        uncoveredExpectations,\n        coverageByStrand,\n      };\n    } catch (error) {\n      logger.error('Failed to generate curriculum coverage report:', error);\n      throw error;\n    }\n  }\n\n  async generatePlanningProgressReport(userId: number): Promise<PlanningProgressReport> {\n    try {\n      // Get all planning data for the user\n      const longRangePlans = await this.prisma.longRangePlan.findMany({\n        where: { userId },\n      });\n\n      const unitPlans = await this.prisma.unitPlan.findMany({\n        where: { userId },\n      });\n\n      const lessonPlans = await this.prisma.eTFOLessonPlan.findMany({\n        where: { userId },\n      });\n\n      const daybookEntries = await this.prisma.daybookEntry.findMany({\n        where: { userId },\n      });\n\n      // Calculate completion rates\n      const calculateCompletionRate = <T>(plans: T[], isComplete: (plan: T) => boolean) => {\n        const total = plans.length;\n        const completed = plans.filter(isComplete).length;\n        const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;\n        return { total, completed, completionRate };\n      };\n\n      return {\n        longRangePlans: calculateCompletionRate(\n          longRangePlans,\n          (plan) => plan.goals !== null && plan.goals !== '',\n        ),\n        unitPlans: calculateCompletionRate(\n          unitPlans,\n          (plan) => plan.bigIdeas !== null && plan.bigIdeas !== '',\n        ),\n        lessonPlans: calculateCompletionRate(\n          lessonPlans,\n          (plan) => plan.learningGoals !== null && plan.learningGoals !== '',\n        ),\n        daybookEntries: calculateCompletionRate(\n          daybookEntries,\n          (entry) => entry.whatWorked !== null && entry.whatWorked !== '',\n        ),\n      };\n    } catch (error) {\n      logger.error('Failed to generate planning progress report:', error);\n      throw error;\n    }\n  }\n\n  async generateLessonPlanReport(lessonId: string): Promise<LessonPlanReport> {\n    try {\n      const lesson = await this.prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n          daybookEntry: true,\n          resources: true,\n        },\n      });\n\n      if (!lesson) {\n        throw new Error('Lesson plan not found');\n      }\n\n      return {\n        lesson: {\n          id: lesson.id,\n          title: lesson.title,\n          date: lesson.date,\n          duration: lesson.duration,\n          mindsOn: lesson.mindsOn || undefined,\n          action: lesson.action || undefined,\n          consolidation: lesson.consolidation || undefined,\n          learningGoals: lesson.learningGoals || undefined,\n          materials: Array.isArray(lesson.materials) ? (lesson.materials as string[]) : undefined,\n          isSubFriendly: lesson.isSubFriendly,\n        },\n        hierarchy: {\n          longRangePlan: {\n            id: lesson.unitPlan.longRangePlan.id,\n            title: lesson.unitPlan.longRangePlan.title,\n            subject: lesson.unitPlan.longRangePlan.subject || undefined,\n            grade: lesson.unitPlan.longRangePlan.grade || undefined,\n          },\n          unitPlan: {\n            id: lesson.unitPlan.id,\n            title: lesson.unitPlan.title,\n          },\n        },\n        curriculumAlignment: lesson.expectations.map((exp) => ({\n          id: exp.expectation.id,\n          code: exp.expectation.code,\n          description: exp.expectation.description,\n          strand: exp.expectation.strand,\n        })),\n        reflection: lesson.daybookEntry\n          ? {\n              whatWorked: lesson.daybookEntry.whatWorked || undefined,\n              overallRating: lesson.daybookEntry.overallRating || undefined,\n              wouldReuseLesson: lesson.daybookEntry.wouldReuseLesson || undefined,\n            }\n          : undefined,\n        resources: lesson.resources.map((resource) => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n          url: resource.url || undefined,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate lesson plan report:', error);\n      throw error;\n    }\n  }\n\n  async generateSubstitutePlanReport(lessonId: string): Promise<SubstitutePlanReport> {\n    try {\n      const lesson = await this.prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonId },\n        include: {\n          unitPlan: {\n            include: {\n              longRangePlan: true,\n            },\n          },\n          resources: true,\n        },\n      });\n\n      if (!lesson) {\n        throw new Error('Lesson plan not found');\n      }\n\n      if (!lesson.isSubFriendly) {\n        throw new Error('Lesson plan is not marked as substitute-friendly');\n      }\n\n      return {\n        title: lesson.title,\n        basicInfo: {\n          subject: lesson.unitPlan.longRangePlan.subject || 'Not specified',\n          grade: lesson.unitPlan.longRangePlan.grade || 0,\n          duration: lesson.duration,\n          date: lesson.date,\n        },\n        materials: Array.isArray(lesson.materials) ? (lesson.materials as string[]) : [],\n        activities: {\n          opening: lesson.mindsOn || '',\n          main: lesson.action || '',\n          closing: lesson.consolidation || '',\n        },\n        specialNotes: lesson.subNotes || undefined,\n        resources: lesson.resources.map((resource) => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n          content: resource.content || undefined,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate substitute plan report:', error);\n      throw error;\n    }\n  }\n\n  async generateUnitOverviewReport(unitId: string): Promise<UnitOverviewReport> {\n    try {\n      const unit = await this.prisma.unitPlan.findUnique({\n        where: { id: unitId },\n        include: {\n          longRangePlan: true,\n          expectations: {\n            include: {\n              expectation: true,\n            },\n          },\n          lessonPlans: true,\n          resources: true,\n        },\n      });\n\n      if (!unit) {\n        throw new Error('Unit plan not found');\n      }\n\n      const totalDuration = unit.lessonPlans.reduce((sum, lesson) => sum + lesson.duration, 0);\n\n      return {\n        unit: {\n          id: unit.id,\n          title: unit.title,\n          description: unit.description || undefined,\n          bigIdeas: unit.bigIdeas || undefined,\n          startDate: unit.startDate,\n          endDate: unit.endDate,\n          estimatedHours: unit.estimatedHours,\n        },\n        hierarchy: {\n          longRangePlan: {\n            id: unit.longRangePlan.id,\n            title: unit.longRangePlan.title,\n            subject: unit.longRangePlan.subject || undefined,\n            grade: unit.longRangePlan.grade || undefined,\n          },\n        },\n        curriculumAlignment: unit.expectations.map((exp) => ({\n          id: exp.expectation.id,\n          code: exp.expectation.code,\n          description: exp.expectation.description,\n          strand: exp.expectation.strand,\n        })),\n        lessonSummary: {\n          totalLessons: unit.lessonPlans.length,\n          totalDuration,\n          lessons: unit.lessonPlans.map((lesson) => ({\n            id: lesson.id,\n            title: lesson.title,\n            date: lesson.date,\n            duration: lesson.duration,\n          })),\n        },\n        resources: unit.resources.map((resource) => ({\n          id: resource.id,\n          title: resource.title,\n          type: resource.type,\n        })),\n      };\n    } catch (error) {\n      logger.error('Failed to generate unit overview report:', error);\n      throw error;\n    }\n  }\n}\n\nexport const reportGeneratorService = new ReportGeneratorService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f75644e2ca617dcdc913b925f7737b601f4c8913"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_qtum8ytde = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_qtum8ytde();
import { prisma } from '../prisma';
import { generateContent } from './llmService';
import logger from '../logger';
export class ReportGeneratorService {
  prisma;
  constructor(prismaClient) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[0]++;
    cov_qtum8ytde().s[0]++;
    this.prisma =
    /* istanbul ignore next */
    (cov_qtum8ytde().b[0][0]++, prismaClient) ||
    /* istanbul ignore next */
    (cov_qtum8ytde().b[0][1]++, prisma);
  }
  async generateReport(request) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[1]++;
    cov_qtum8ytde().s[1]++;
    try {
      // Fetch student data
      const student =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[2]++, await this.prisma.student.findUnique({
        where: {
          id: request.studentId
        },
        include: {
          user: true,
          artifacts: {
            where: {
              createdAt: {
                gte: request.startDate,
                lte: request.endDate
              }
            }
          },
          reflections: {
            where: {
              createdAt: {
                gte: request.startDate,
                lte: request.endDate
              }
            }
          },
          goals: {
            where: {
              OR: [{
                status: 'active'
              }, {
                status: 'completed'
              }]
            }
          }
        }
      }));
      /* istanbul ignore next */
      cov_qtum8ytde().s[3]++;
      if (!student) {
        /* istanbul ignore next */
        cov_qtum8ytde().b[1][0]++;
        cov_qtum8ytde().s[4]++;
        throw new Error('Student not found');
      } else
      /* istanbul ignore next */
      {
        cov_qtum8ytde().b[1][1]++;
      }
      // Generate report based on type
      let report;
      /* istanbul ignore next */
      cov_qtum8ytde().s[5]++;
      switch (request.reportType) {
        case 'progress':
          /* istanbul ignore next */
          cov_qtum8ytde().b[2][0]++;
          cov_qtum8ytde().s[6]++;
          report = await this.generateProgressReport(student, request);
          /* istanbul ignore next */
          cov_qtum8ytde().s[7]++;
          break;
        case 'narrative':
          /* istanbul ignore next */
          cov_qtum8ytde().b[2][1]++;
          cov_qtum8ytde().s[8]++;
          report = await this.generateNarrativeReport(student, request);
          /* istanbul ignore next */
          cov_qtum8ytde().s[9]++;
          break;
        case 'term_summary':
          /* istanbul ignore next */
          cov_qtum8ytde().b[2][2]++;
          cov_qtum8ytde().s[10]++;
          report = await this.generateTermSummary(student, request);
          /* istanbul ignore next */
          cov_qtum8ytde().s[11]++;
          break;
        case 'report_card':
          /* istanbul ignore next */
          cov_qtum8ytde().b[2][3]++;
          cov_qtum8ytde().s[12]++;
          report = await this.generateReportCard(student, request);
          /* istanbul ignore next */
          cov_qtum8ytde().s[13]++;
          break;
        default:
          /* istanbul ignore next */
          cov_qtum8ytde().b[2][4]++;
          cov_qtum8ytde().s[14]++;
          throw new Error('Invalid report type');
      }
      /* istanbul ignore next */
      cov_qtum8ytde().s[15]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[16]++;
      logger.error('Failed to generate report:', error);
      /* istanbul ignore next */
      cov_qtum8ytde().s[17]++;
      throw error;
    }
  }
  async generateProgressReport(student, request) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[2]++;
    const sections =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[18]++, []);
    // Assessment functionality removed - focus on artifacts and reflections
    /* istanbul ignore next */
    cov_qtum8ytde().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_qtum8ytde().b[4][0]++, student.artifacts.length > 0) ||
    /* istanbul ignore next */
    (cov_qtum8ytde().b[4][1]++, student.reflections.length > 0)) {
      /* istanbul ignore next */
      cov_qtum8ytde().b[3][0]++;
      cov_qtum8ytde().s[20]++;
      sections.push({
        title: request.language === 'fr' ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[5][0]++, 'Progrès académique') :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[5][1]++, 'Academic Progress'),
        content: await this.generateProgressFromArtifacts(student.artifacts, student.reflections, request.language),
        data: {
          artifacts: student.artifacts,
          reflections: student.reflections
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_qtum8ytde().b[3][1]++;
    }
    // Goals Section
    cov_qtum8ytde().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_qtum8ytde().b[7][0]++, request.includeGoals) &&
    /* istanbul ignore next */
    (cov_qtum8ytde().b[7][1]++, student.goals.length > 0)) {
      /* istanbul ignore next */
      cov_qtum8ytde().b[6][0]++;
      cov_qtum8ytde().s[22]++;
      sections.push({
        title: request.language === 'fr' ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[8][0]++, 'Objectifs') :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[8][1]++, 'Goals'),
        content: await this.generateGoalsNarrative(student.goals, request.language),
        data: {
          goals: student.goals
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_qtum8ytde().b[6][1]++;
    }
    // Overall Comments
    const overallComments =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[23]++, await this.generateOverallComments(student, sections, request.language));
    // Next Steps
    const nextSteps =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[24]++, await this.generateNextSteps(student, sections, request.language));
    /* istanbul ignore next */
    cov_qtum8ytde().s[25]++;
    return {
      studentName: `${student.firstName} ${student.lastName}`,
      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,
      sections,
      overallComments,
      nextSteps
    };
  }
  async generateNarrativeReport(student, request) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[3]++;
    // Gather comprehensive data
    const learningJourney =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[26]++, this.compileLearningJourney(student));
    // Generate narrative using LLM
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[27]++, request.language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[9][0]++, `Générez un rapport narratif détaillé pour ${student.firstName} ${student.lastName}, couvrant la période du ${request.startDate.toLocaleDateString()} au ${request.endDate.toLocaleDateString()}. Incluez les réalisations, les défis et les domaines de croissance.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[9][1]++, `Generate a detailed narrative report for ${student.firstName} ${student.lastName}, covering the period from ${request.startDate.toLocaleDateString()} to ${request.endDate.toLocaleDateString()}. Include achievements, challenges, and areas of growth.`));
    const narrative =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[28]++, await generateContent(prompt, JSON.stringify(learningJourney)));
    /* istanbul ignore next */
    cov_qtum8ytde().s[29]++;
    return {
      studentName: `${student.firstName} ${student.lastName}`,
      period: `${request.startDate.toLocaleDateString()} - ${request.endDate.toLocaleDateString()}`,
      sections: [{
        title: request.language === 'fr' ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[10][0]++, 'Rapport narratif') :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[10][1]++, 'Narrative Report'),
        content: narrative
      }],
      overallComments: '',
      nextSteps: []
    };
  }
  async generateTermSummary(student, request) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[4]++;
    const sections =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[30]++, []);
    // Get subject-specific progress
    const subjectProgress =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[31]++, await this.getSubjectProgress(student));
    /* istanbul ignore next */
    cov_qtum8ytde().s[32]++;
    for (const subject of subjectProgress) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[33]++;
      sections.push({
        title: subject.name,
        content: await this.generateSubjectSummary(subject, request.language),
        data: subject
      });
    }
    // Overall term performance
    const overallComments =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[34]++, await this.generateTermOverview(student, subjectProgress, request.language));
    // Recommendations for next term
    const nextSteps =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[35]++, await this.generateTermRecommendations(student, subjectProgress, request.language));
    /* istanbul ignore next */
    cov_qtum8ytde().s[36]++;
    return {
      studentName: `${student.firstName} ${student.lastName}`,
      period: request.language === 'fr' ?
      /* istanbul ignore next */
      (cov_qtum8ytde().b[11][0]++, 'Résumé du trimestre') :
      /* istanbul ignore next */
      (cov_qtum8ytde().b[11][1]++, 'Term Summary'),
      sections,
      overallComments,
      nextSteps
    };
  }
  async generateReportCard(student, request) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[5]++;
    const sections =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[37]++, []);
    // Get formal grades/assessments by subject
    const reportCardData =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[38]++, await this.compileReportCardData(student));
    /* istanbul ignore next */
    cov_qtum8ytde().s[39]++;
    for (const subject of reportCardData) {
      // Generate teacher comments for each subject
      const comments =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[40]++, await this.generateSubjectComments(subject, student, request.language));
      /* istanbul ignore next */
      cov_qtum8ytde().s[41]++;
      sections.push({
        title: subject.name,
        content: comments,
        data: {
          grade: subject.grade,
          outcomes: subject.outcomes
        }
      });
    }
    // General comments
    const overallComments =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[42]++, await this.generateReportCardComments(student, reportCardData, request.language));
    /* istanbul ignore next */
    cov_qtum8ytde().s[43]++;
    return {
      studentName: `${student.firstName} ${student.lastName}`,
      period: request.language === 'fr' ?
      /* istanbul ignore next */
      (cov_qtum8ytde().b[12][0]++, 'Bulletin scolaire') :
      /* istanbul ignore next */
      (cov_qtum8ytde().b[12][1]++, 'Report Card'),
      sections,
      overallComments,
      nextSteps: []
    };
  }
  // Helper methods
  async generateProgressFromArtifacts(artifacts, reflections, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[6]++;
    const context =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[44]++, {
      artifactCount: artifacts.length,
      reflectionCount: reflections.length,
      recentArtifacts: artifacts.slice(0, 3).map(a => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[7]++;
        cov_qtum8ytde().s[45]++;
        return {
          title: a.title,
          description: a.description
        };
      }),
      recentReflections: reflections.slice(0, 3).map(r => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[8]++;
        cov_qtum8ytde().s[46]++;
        return {
          content: r.content
        };
      })
    });
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[47]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[13][0]++, `Décrivez le progrès académique basé sur ${artifacts.length} artefacts et ${reflections.length} réflexions.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[13][1]++, `Describe academic progress based on ${artifacts.length} artifacts and ${reflections.length} reflections.`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[48]++;
    return generateContent(prompt, JSON.stringify(context));
  }
  async generateGoalsNarrative(goals, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[9]++;
    const activeGoals =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[49]++, goals.filter(g => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[10]++;
      cov_qtum8ytde().s[50]++;
      return g.status === 'active';
    }));
    const completedGoals =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[51]++, goals.filter(g => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[11]++;
      cov_qtum8ytde().s[52]++;
      return g.status === 'completed';
    }));
    const context =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[53]++, {
      active: activeGoals.map(g => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[12]++;
        cov_qtum8ytde().s[54]++;
        return {
          text: g.text
        };
      }),
      completed: completedGoals.map(g => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[13]++;
        cov_qtum8ytde().s[55]++;
        return {
          text: g.text
        };
      })
    });
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[56]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[14][0]++, `Décrivez le progrès vers les objectifs de l'élève: ${JSON.stringify(context)}`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[14][1]++, `Describe the student's progress toward their goals: ${JSON.stringify(context)}`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[57]++;
    return generateContent(prompt);
  }
  async generateOverallComments(student, sections, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[14]++;
    const context =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[58]++, {
      studentName: `${student.firstName} ${student.lastName}`,
      sectionsCount: sections.length,
      sectionTitles: sections.map(s => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[15]++;
        cov_qtum8ytde().s[59]++;
        return s.title;
      })
    });
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[60]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[15][0]++, `Générez des commentaires généraux positifs et encourageants pour ${context.studentName} basés sur leur rapport de progrès.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[15][1]++, `Generate positive and encouraging overall comments for ${context.studentName} based on their progress report.`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[61]++;
    return generateContent(prompt, JSON.stringify(context));
  }
  async generateNextSteps(student, sections, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[16]++;
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[62]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[16][0]++, `Suggérez 3-5 prochaines étapes spécifiques pour ${student.firstName} pour continuer leur progrès.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[16][1]++, `Suggest 3-5 specific next steps for ${student.firstName} to continue their progress.`));
    const suggestions =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[63]++, await generateContent(prompt, JSON.stringify(sections.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[17]++;
      cov_qtum8ytde().s[64]++;
      return {
        title: s.title,
        summary: s.content.substring(0, 100)
      };
    }))));
    // Parse the suggestions into an array
    /* istanbul ignore next */
    cov_qtum8ytde().s[65]++;
    return suggestions.split('\n').filter(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[18]++;
      cov_qtum8ytde().s[66]++;
      return s.trim().length > 0;
    }).slice(0, 5);
  }
  compileLearningJourney(student) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[19]++;
    cov_qtum8ytde().s[67]++;
    return {
      artifacts: student.artifacts.map(a => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[20]++;
        cov_qtum8ytde().s[68]++;
        return {
          title: a.title,
          description: a.description,
          createdAt: a.createdAt
        };
      }),
      reflections: student.reflections.map(r => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[21]++;
        cov_qtum8ytde().s[69]++;
        return {
          content: r.content,
          createdAt: r.createdAt
        };
      }),
      goals: student.goals
    };
  }
  async getSubjectProgress(student) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[22]++;
    // Simplified subject progress without deep relations
    const subjects =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[70]++, await this.prisma.subject.findMany({
      where: {
        userId: student.user.id
      }
    }));
    /* istanbul ignore next */
    cov_qtum8ytde().s[71]++;
    return subjects.map(subject => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[23]++;
      cov_qtum8ytde().s[72]++;
      return {
        id: subject.id,
        name: subject.name,
        outcomes: [],
        averageScore: 0 // Assessment functionality removed
      };
    });
  }
  async generateSubjectSummary(subject, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[24]++;
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[73]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[17][0]++, `Résumez la performance de l'élève en ${subject.name} avec une note moyenne de ${subject.averageScore.toFixed(1)}% et couvrant ${subject.outcomes.length} résultats d'apprentissage.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[17][1]++, `Summarize the student's performance in ${subject.name} with an average score of ${subject.averageScore.toFixed(1)}% and covering ${subject.outcomes.length} learning outcomes.`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[74]++;
    return generateContent(prompt);
  }
  async generateTermOverview(student, subjectProgress, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[25]++;
    const overallAverage =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[75]++, subjectProgress.reduce((sum, s) => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[26]++;
      cov_qtum8ytde().s[76]++;
      return sum + s.averageScore;
    }, 0) / subjectProgress.length);
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[77]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[18][0]++, `Générez un aperçu du trimestre pour ${student.firstName} avec une moyenne générale de ${overallAverage.toFixed(1)}% à travers ${subjectProgress.length} matières.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[18][1]++, `Generate a term overview for ${student.firstName} with an overall average of ${overallAverage.toFixed(1)}% across ${subjectProgress.length} subjects.`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[78]++;
    return generateContent(prompt, JSON.stringify(subjectProgress.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[27]++;
      cov_qtum8ytde().s[79]++;
      return {
        name: s.name,
        average: s.averageScore
      };
    })));
  }
  async generateTermRecommendations(student, subjectProgress, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[28]++;
    const weakSubjects =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[80]++, subjectProgress.filter(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[29]++;
      cov_qtum8ytde().s[81]++;
      return s.averageScore < 70;
    }));
    const strongSubjects =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[82]++, subjectProgress.filter(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[30]++;
      cov_qtum8ytde().s[83]++;
      return s.averageScore >= 85;
    }));
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[84]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[19][0]++, `Suggérez 3-5 recommandations pour le prochain trimestre basées sur les forces (${strongSubjects.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[31]++;
      cov_qtum8ytde().s[85]++;
      return s.name;
    }).join(', ')}) et les domaines à améliorer (${weakSubjects.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[32]++;
      cov_qtum8ytde().s[86]++;
      return s.name;
    }).join(', ')}).`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[19][1]++, `Suggest 3-5 recommendations for the next term based on strengths (${strongSubjects.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[33]++;
      cov_qtum8ytde().s[87]++;
      return s.name;
    }).join(', ')}) and areas for improvement (${weakSubjects.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[34]++;
      cov_qtum8ytde().s[88]++;
      return s.name;
    }).join(', ')}).`));
    const recommendations =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[89]++, await generateContent(prompt));
    /* istanbul ignore next */
    cov_qtum8ytde().s[90]++;
    return recommendations.split('\n').filter(r => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[35]++;
      cov_qtum8ytde().s[91]++;
      return r.trim().length > 0;
    }).slice(0, 5);
  }
  async compileReportCardData(student) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[36]++;
    const subjects =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[92]++, await this.prisma.subject.findMany({
      where: {
        userId: student.user.id
      }
    }));
    /* istanbul ignore next */
    cov_qtum8ytde().s[93]++;
    return subjects.map(subject => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[37]++;
      cov_qtum8ytde().s[94]++;
      return {
        id: subject.id,
        name: subject.name,
        grade: 'N/A',
        // Assessment functionality removed
        outcomes: []
      };
    });
  }
  scoreToGrade(score) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[38]++;
    cov_qtum8ytde().s[95]++;
    if (score >= 90) {
      /* istanbul ignore next */
      cov_qtum8ytde().b[20][0]++;
      cov_qtum8ytde().s[96]++;
      return 'A';
    } else
    /* istanbul ignore next */
    {
      cov_qtum8ytde().b[20][1]++;
    }
    cov_qtum8ytde().s[97]++;
    if (score >= 80) {
      /* istanbul ignore next */
      cov_qtum8ytde().b[21][0]++;
      cov_qtum8ytde().s[98]++;
      return 'B';
    } else
    /* istanbul ignore next */
    {
      cov_qtum8ytde().b[21][1]++;
    }
    cov_qtum8ytde().s[99]++;
    if (score >= 70) {
      /* istanbul ignore next */
      cov_qtum8ytde().b[22][0]++;
      cov_qtum8ytde().s[100]++;
      return 'C';
    } else
    /* istanbul ignore next */
    {
      cov_qtum8ytde().b[22][1]++;
    }
    cov_qtum8ytde().s[101]++;
    if (score >= 60) {
      /* istanbul ignore next */
      cov_qtum8ytde().b[23][0]++;
      cov_qtum8ytde().s[102]++;
      return 'D';
    } else
    /* istanbul ignore next */
    {
      cov_qtum8ytde().b[23][1]++;
    }
    cov_qtum8ytde().s[103]++;
    return 'F';
  }
  async generateSubjectComments(subject, student, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[39]++;
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[104]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[24][0]++, `Générez des commentaires d'enseignant pour ${student.firstName} en ${subject.name} avec une note de ${subject.grade}. Soyez spécifique et encourageant.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[24][1]++, `Generate teacher comments for ${student.firstName} in ${subject.name} with a grade of ${subject.grade}. Be specific and encouraging.`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[105]++;
    return generateContent(prompt, JSON.stringify({
      outcomes: subject.outcomes.length
    }));
  }
  async generateReportCardComments(student, reportCardData, language) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[40]++;
    const overallGrade =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[106]++, reportCardData.reduce((sum, s) => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[41]++;
      const gradeValue =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[107]++,
      /* istanbul ignore next */
      (cov_qtum8ytde().b[25][0]++, {
        A: 4,
        B: 3,
        C: 2,
        D: 1,
        F: 0
      }[s.grade]) ||
      /* istanbul ignore next */
      (cov_qtum8ytde().b[25][1]++, 0));
      /* istanbul ignore next */
      cov_qtum8ytde().s[108]++;
      return sum + gradeValue;
    }, 0) / reportCardData.length);
    const prompt =
    /* istanbul ignore next */
    (cov_qtum8ytde().s[109]++, language === 'fr' ?
    /* istanbul ignore next */
    (cov_qtum8ytde().b[26][0]++, `Générez des commentaires généraux de bulletin pour ${student.firstName} ${student.lastName} avec une performance globale de ${overallGrade.toFixed(1)}/4.0.`) :
    /* istanbul ignore next */
    (cov_qtum8ytde().b[26][1]++, `Generate overall report card comments for ${student.firstName} ${student.lastName} with an overall performance of ${overallGrade.toFixed(1)}/4.0.`));
    /* istanbul ignore next */
    cov_qtum8ytde().s[110]++;
    return generateContent(prompt, JSON.stringify(reportCardData.map(s => {
      /* istanbul ignore next */
      cov_qtum8ytde().f[42]++;
      cov_qtum8ytde().s[111]++;
      return {
        subject: s.name,
        grade: s.grade
      };
    })));
  }
  // Curriculum and Planning Report Methods
  async generateCurriculumCoverageReport(userId) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[43]++;
    cov_qtum8ytde().s[112]++;
    try {
      // Get all curriculum expectations - we'll filter by covered/uncovered later
      const expectations =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[113]++, await this.prisma.curriculumExpectation.findMany());
      // Get all plans with expectations
      const longRangePlans =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[114]++, await this.prisma.longRangePlan.findMany({
        where: {
          userId
        },
        include: {
          expectations: true
        }
      }));
      const unitPlans =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[115]++, await this.prisma.unitPlan.findMany({
        where: {
          userId
        },
        include: {
          expectations: true
        }
      }));
      const lessonPlans =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[116]++, await this.prisma.eTFOLessonPlan.findMany({
        where: {
          userId
        },
        include: {
          expectations: true
        }
      }));
      // Collect all covered expectation IDs
      const coveredExpectationIds =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[117]++, new Set());
      /* istanbul ignore next */
      cov_qtum8ytde().s[118]++;
      longRangePlans.forEach(plan => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[44]++;
        cov_qtum8ytde().s[119]++;
        plan.expectations.forEach(exp => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[45]++;
          cov_qtum8ytde().s[120]++;
          return coveredExpectationIds.add(exp.expectationId);
        });
      });
      /* istanbul ignore next */
      cov_qtum8ytde().s[121]++;
      unitPlans.forEach(plan => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[46]++;
        cov_qtum8ytde().s[122]++;
        plan.expectations.forEach(exp => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[47]++;
          cov_qtum8ytde().s[123]++;
          return coveredExpectationIds.add(exp.expectationId);
        });
      });
      /* istanbul ignore next */
      cov_qtum8ytde().s[124]++;
      lessonPlans.forEach(plan => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[48]++;
        cov_qtum8ytde().s[125]++;
        plan.expectations.forEach(exp => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[49]++;
          cov_qtum8ytde().s[126]++;
          return coveredExpectationIds.add(exp.expectationId);
        });
      });
      // Calculate coverage
      const totalExpectations =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[127]++, expectations.length);
      const coveredExpectations =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[128]++, coveredExpectationIds.size);
      const coveragePercentage =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[129]++, totalExpectations > 0 ?
      /* istanbul ignore next */
      (cov_qtum8ytde().b[27][0]++, Math.round(coveredExpectations / totalExpectations * 100)) :
      /* istanbul ignore next */
      (cov_qtum8ytde().b[27][1]++, 0));
      // Find uncovered expectations
      const uncoveredExpectations =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[130]++, expectations.filter(exp => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[50]++;
        cov_qtum8ytde().s[131]++;
        return !coveredExpectationIds.has(exp.id);
      }).map(exp => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[51]++;
        cov_qtum8ytde().s[132]++;
        return {
          id: exp.id,
          code: exp.code,
          description: exp.description,
          strand: exp.strand
        };
      }));
      // Calculate coverage by strand
      const coverageByStrand =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[133]++, {});
      /* istanbul ignore next */
      cov_qtum8ytde().s[134]++;
      expectations.forEach(exp => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[52]++;
        cov_qtum8ytde().s[135]++;
        if (!coverageByStrand[exp.strand]) {
          /* istanbul ignore next */
          cov_qtum8ytde().b[28][0]++;
          cov_qtum8ytde().s[136]++;
          coverageByStrand[exp.strand] = {
            total: 0,
            covered: 0,
            percentage: 0
          };
        } else
        /* istanbul ignore next */
        {
          cov_qtum8ytde().b[28][1]++;
        }
        cov_qtum8ytde().s[137]++;
        coverageByStrand[exp.strand].total++;
        /* istanbul ignore next */
        cov_qtum8ytde().s[138]++;
        if (coveredExpectationIds.has(exp.id)) {
          /* istanbul ignore next */
          cov_qtum8ytde().b[29][0]++;
          cov_qtum8ytde().s[139]++;
          coverageByStrand[exp.strand].covered++;
        } else
        /* istanbul ignore next */
        {
          cov_qtum8ytde().b[29][1]++;
        }
      });
      // Calculate percentages for each strand
      /* istanbul ignore next */
      cov_qtum8ytde().s[140]++;
      Object.keys(coverageByStrand).forEach(strand => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[53]++;
        const strandData =
        /* istanbul ignore next */
        (cov_qtum8ytde().s[141]++, coverageByStrand[strand]);
        /* istanbul ignore next */
        cov_qtum8ytde().s[142]++;
        strandData.percentage = strandData.total > 0 ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[30][0]++, Math.round(strandData.covered / strandData.total * 100)) :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[30][1]++, 0);
      });
      /* istanbul ignore next */
      cov_qtum8ytde().s[143]++;
      return {
        totalExpectations,
        coveredExpectations,
        coveragePercentage,
        uncoveredExpectations,
        coverageByStrand
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[144]++;
      logger.error('Failed to generate curriculum coverage report:', error);
      /* istanbul ignore next */
      cov_qtum8ytde().s[145]++;
      throw error;
    }
  }
  async generatePlanningProgressReport(userId) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[54]++;
    cov_qtum8ytde().s[146]++;
    try {
      // Get all planning data for the user
      const longRangePlans =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[147]++, await this.prisma.longRangePlan.findMany({
        where: {
          userId
        }
      }));
      const unitPlans =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[148]++, await this.prisma.unitPlan.findMany({
        where: {
          userId
        }
      }));
      const lessonPlans =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[149]++, await this.prisma.eTFOLessonPlan.findMany({
        where: {
          userId
        }
      }));
      const daybookEntries =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[150]++, await this.prisma.daybookEntry.findMany({
        where: {
          userId
        }
      }));
      // Calculate completion rates
      /* istanbul ignore next */
      cov_qtum8ytde().s[151]++;
      const calculateCompletionRate = (plans, isComplete) => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[55]++;
        const total =
        /* istanbul ignore next */
        (cov_qtum8ytde().s[152]++, plans.length);
        const completed =
        /* istanbul ignore next */
        (cov_qtum8ytde().s[153]++, plans.filter(isComplete).length);
        const completionRate =
        /* istanbul ignore next */
        (cov_qtum8ytde().s[154]++, total > 0 ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[31][0]++, Math.round(completed / total * 100)) :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[31][1]++, 0));
        /* istanbul ignore next */
        cov_qtum8ytde().s[155]++;
        return {
          total,
          completed,
          completionRate
        };
      };
      /* istanbul ignore next */
      cov_qtum8ytde().s[156]++;
      return {
        longRangePlans: calculateCompletionRate(longRangePlans, plan => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[56]++;
          cov_qtum8ytde().s[157]++;
          return /* istanbul ignore next */(cov_qtum8ytde().b[32][0]++, plan.goals !== null) &&
          /* istanbul ignore next */
          (cov_qtum8ytde().b[32][1]++, plan.goals !== '');
        }),
        unitPlans: calculateCompletionRate(unitPlans, plan => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[57]++;
          cov_qtum8ytde().s[158]++;
          return /* istanbul ignore next */(cov_qtum8ytde().b[33][0]++, plan.bigIdeas !== null) &&
          /* istanbul ignore next */
          (cov_qtum8ytde().b[33][1]++, plan.bigIdeas !== '');
        }),
        lessonPlans: calculateCompletionRate(lessonPlans, plan => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[58]++;
          cov_qtum8ytde().s[159]++;
          return /* istanbul ignore next */(cov_qtum8ytde().b[34][0]++, plan.learningGoals !== null) &&
          /* istanbul ignore next */
          (cov_qtum8ytde().b[34][1]++, plan.learningGoals !== '');
        }),
        daybookEntries: calculateCompletionRate(daybookEntries, entry => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[59]++;
          cov_qtum8ytde().s[160]++;
          return /* istanbul ignore next */(cov_qtum8ytde().b[35][0]++, entry.whatWorked !== null) &&
          /* istanbul ignore next */
          (cov_qtum8ytde().b[35][1]++, entry.whatWorked !== '');
        })
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[161]++;
      logger.error('Failed to generate planning progress report:', error);
      /* istanbul ignore next */
      cov_qtum8ytde().s[162]++;
      throw error;
    }
  }
  async generateLessonPlanReport(lessonId) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[60]++;
    cov_qtum8ytde().s[163]++;
    try {
      const lesson =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[164]++, await this.prisma.eTFOLessonPlan.findUnique({
        where: {
          id: lessonId
        },
        include: {
          unitPlan: {
            include: {
              longRangePlan: true
            }
          },
          expectations: {
            include: {
              expectation: true
            }
          },
          daybookEntry: true,
          resources: true
        }
      }));
      /* istanbul ignore next */
      cov_qtum8ytde().s[165]++;
      if (!lesson) {
        /* istanbul ignore next */
        cov_qtum8ytde().b[36][0]++;
        cov_qtum8ytde().s[166]++;
        throw new Error('Lesson plan not found');
      } else
      /* istanbul ignore next */
      {
        cov_qtum8ytde().b[36][1]++;
      }
      cov_qtum8ytde().s[167]++;
      return {
        lesson: {
          id: lesson.id,
          title: lesson.title,
          date: lesson.date,
          duration: lesson.duration,
          mindsOn:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[37][0]++, lesson.mindsOn) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[37][1]++, undefined),
          action:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[38][0]++, lesson.action) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[38][1]++, undefined),
          consolidation:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[39][0]++, lesson.consolidation) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[39][1]++, undefined),
          learningGoals:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[40][0]++, lesson.learningGoals) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[40][1]++, undefined),
          materials: Array.isArray(lesson.materials) ?
          /* istanbul ignore next */
          (cov_qtum8ytde().b[41][0]++, lesson.materials) :
          /* istanbul ignore next */
          (cov_qtum8ytde().b[41][1]++, undefined),
          isSubFriendly: lesson.isSubFriendly
        },
        hierarchy: {
          longRangePlan: {
            id: lesson.unitPlan.longRangePlan.id,
            title: lesson.unitPlan.longRangePlan.title,
            subject:
            /* istanbul ignore next */
            (cov_qtum8ytde().b[42][0]++, lesson.unitPlan.longRangePlan.subject) ||
            /* istanbul ignore next */
            (cov_qtum8ytde().b[42][1]++, undefined),
            grade:
            /* istanbul ignore next */
            (cov_qtum8ytde().b[43][0]++, lesson.unitPlan.longRangePlan.grade) ||
            /* istanbul ignore next */
            (cov_qtum8ytde().b[43][1]++, undefined)
          },
          unitPlan: {
            id: lesson.unitPlan.id,
            title: lesson.unitPlan.title
          }
        },
        curriculumAlignment: lesson.expectations.map(exp => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[61]++;
          cov_qtum8ytde().s[168]++;
          return {
            id: exp.expectation.id,
            code: exp.expectation.code,
            description: exp.expectation.description,
            strand: exp.expectation.strand
          };
        }),
        reflection: lesson.daybookEntry ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[44][0]++, {
          whatWorked:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[45][0]++, lesson.daybookEntry.whatWorked) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[45][1]++, undefined),
          overallRating:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[46][0]++, lesson.daybookEntry.overallRating) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[46][1]++, undefined),
          wouldReuseLesson:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[47][0]++, lesson.daybookEntry.wouldReuseLesson) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[47][1]++, undefined)
        }) :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[44][1]++, undefined),
        resources: lesson.resources.map(resource => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[62]++;
          cov_qtum8ytde().s[169]++;
          return {
            id: resource.id,
            title: resource.title,
            type: resource.type,
            url:
            /* istanbul ignore next */
            (cov_qtum8ytde().b[48][0]++, resource.url) ||
            /* istanbul ignore next */
            (cov_qtum8ytde().b[48][1]++, undefined)
          };
        })
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[170]++;
      logger.error('Failed to generate lesson plan report:', error);
      /* istanbul ignore next */
      cov_qtum8ytde().s[171]++;
      throw error;
    }
  }
  async generateSubstitutePlanReport(lessonId) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[63]++;
    cov_qtum8ytde().s[172]++;
    try {
      const lesson =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[173]++, await this.prisma.eTFOLessonPlan.findUnique({
        where: {
          id: lessonId
        },
        include: {
          unitPlan: {
            include: {
              longRangePlan: true
            }
          },
          resources: true
        }
      }));
      /* istanbul ignore next */
      cov_qtum8ytde().s[174]++;
      if (!lesson) {
        /* istanbul ignore next */
        cov_qtum8ytde().b[49][0]++;
        cov_qtum8ytde().s[175]++;
        throw new Error('Lesson plan not found');
      } else
      /* istanbul ignore next */
      {
        cov_qtum8ytde().b[49][1]++;
      }
      cov_qtum8ytde().s[176]++;
      if (!lesson.isSubFriendly) {
        /* istanbul ignore next */
        cov_qtum8ytde().b[50][0]++;
        cov_qtum8ytde().s[177]++;
        throw new Error('Lesson plan is not marked as substitute-friendly');
      } else
      /* istanbul ignore next */
      {
        cov_qtum8ytde().b[50][1]++;
      }
      cov_qtum8ytde().s[178]++;
      return {
        title: lesson.title,
        basicInfo: {
          subject:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[51][0]++, lesson.unitPlan.longRangePlan.subject) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[51][1]++, 'Not specified'),
          grade:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[52][0]++, lesson.unitPlan.longRangePlan.grade) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[52][1]++, 0),
          duration: lesson.duration,
          date: lesson.date
        },
        materials: Array.isArray(lesson.materials) ?
        /* istanbul ignore next */
        (cov_qtum8ytde().b[53][0]++, lesson.materials) :
        /* istanbul ignore next */
        (cov_qtum8ytde().b[53][1]++, []),
        activities: {
          opening:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[54][0]++, lesson.mindsOn) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[54][1]++, ''),
          main:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[55][0]++, lesson.action) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[55][1]++, ''),
          closing:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[56][0]++, lesson.consolidation) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[56][1]++, '')
        },
        specialNotes:
        /* istanbul ignore next */
        (cov_qtum8ytde().b[57][0]++, lesson.subNotes) ||
        /* istanbul ignore next */
        (cov_qtum8ytde().b[57][1]++, undefined),
        resources: lesson.resources.map(resource => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[64]++;
          cov_qtum8ytde().s[179]++;
          return {
            id: resource.id,
            title: resource.title,
            type: resource.type,
            content:
            /* istanbul ignore next */
            (cov_qtum8ytde().b[58][0]++, resource.content) ||
            /* istanbul ignore next */
            (cov_qtum8ytde().b[58][1]++, undefined)
          };
        })
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[180]++;
      logger.error('Failed to generate substitute plan report:', error);
      /* istanbul ignore next */
      cov_qtum8ytde().s[181]++;
      throw error;
    }
  }
  async generateUnitOverviewReport(unitId) {
    /* istanbul ignore next */
    cov_qtum8ytde().f[65]++;
    cov_qtum8ytde().s[182]++;
    try {
      const unit =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[183]++, await this.prisma.unitPlan.findUnique({
        where: {
          id: unitId
        },
        include: {
          longRangePlan: true,
          expectations: {
            include: {
              expectation: true
            }
          },
          lessonPlans: true,
          resources: true
        }
      }));
      /* istanbul ignore next */
      cov_qtum8ytde().s[184]++;
      if (!unit) {
        /* istanbul ignore next */
        cov_qtum8ytde().b[59][0]++;
        cov_qtum8ytde().s[185]++;
        throw new Error('Unit plan not found');
      } else
      /* istanbul ignore next */
      {
        cov_qtum8ytde().b[59][1]++;
      }
      const totalDuration =
      /* istanbul ignore next */
      (cov_qtum8ytde().s[186]++, unit.lessonPlans.reduce((sum, lesson) => {
        /* istanbul ignore next */
        cov_qtum8ytde().f[66]++;
        cov_qtum8ytde().s[187]++;
        return sum + lesson.duration;
      }, 0));
      /* istanbul ignore next */
      cov_qtum8ytde().s[188]++;
      return {
        unit: {
          id: unit.id,
          title: unit.title,
          description:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[60][0]++, unit.description) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[60][1]++, undefined),
          bigIdeas:
          /* istanbul ignore next */
          (cov_qtum8ytde().b[61][0]++, unit.bigIdeas) ||
          /* istanbul ignore next */
          (cov_qtum8ytde().b[61][1]++, undefined),
          startDate: unit.startDate,
          endDate: unit.endDate,
          estimatedHours: unit.estimatedHours
        },
        hierarchy: {
          longRangePlan: {
            id: unit.longRangePlan.id,
            title: unit.longRangePlan.title,
            subject:
            /* istanbul ignore next */
            (cov_qtum8ytde().b[62][0]++, unit.longRangePlan.subject) ||
            /* istanbul ignore next */
            (cov_qtum8ytde().b[62][1]++, undefined),
            grade:
            /* istanbul ignore next */
            (cov_qtum8ytde().b[63][0]++, unit.longRangePlan.grade) ||
            /* istanbul ignore next */
            (cov_qtum8ytde().b[63][1]++, undefined)
          }
        },
        curriculumAlignment: unit.expectations.map(exp => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[67]++;
          cov_qtum8ytde().s[189]++;
          return {
            id: exp.expectation.id,
            code: exp.expectation.code,
            description: exp.expectation.description,
            strand: exp.expectation.strand
          };
        }),
        lessonSummary: {
          totalLessons: unit.lessonPlans.length,
          totalDuration,
          lessons: unit.lessonPlans.map(lesson => {
            /* istanbul ignore next */
            cov_qtum8ytde().f[68]++;
            cov_qtum8ytde().s[190]++;
            return {
              id: lesson.id,
              title: lesson.title,
              date: lesson.date,
              duration: lesson.duration
            };
          })
        },
        resources: unit.resources.map(resource => {
          /* istanbul ignore next */
          cov_qtum8ytde().f[69]++;
          cov_qtum8ytde().s[191]++;
          return {
            id: resource.id,
            title: resource.title,
            type: resource.type
          };
        })
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_qtum8ytde().s[192]++;
      logger.error('Failed to generate unit overview report:', error);
      /* istanbul ignore next */
      cov_qtum8ytde().s[193]++;
      throw error;
    }
  }
}
export const reportGeneratorService =
/* istanbul ignore next */
(cov_qtum8ytde().s[194]++, new ReportGeneratorService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcmlzbWEiLCJnZW5lcmF0ZUNvbnRlbnQiLCJsb2dnZXIiLCJSZXBvcnRHZW5lcmF0b3JTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJwcmlzbWFDbGllbnQiLCJjb3ZfcXR1bTh5dGRlIiwiZiIsInMiLCJiIiwiZ2VuZXJhdGVSZXBvcnQiLCJyZXF1ZXN0Iiwic3R1ZGVudCIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImlkIiwic3R1ZGVudElkIiwiaW5jbHVkZSIsInVzZXIiLCJhcnRpZmFjdHMiLCJjcmVhdGVkQXQiLCJndGUiLCJzdGFydERhdGUiLCJsdGUiLCJlbmREYXRlIiwicmVmbGVjdGlvbnMiLCJnb2FscyIsIk9SIiwic3RhdHVzIiwiRXJyb3IiLCJyZXBvcnQiLCJyZXBvcnRUeXBlIiwiZ2VuZXJhdGVQcm9ncmVzc1JlcG9ydCIsImdlbmVyYXRlTmFycmF0aXZlUmVwb3J0IiwiZ2VuZXJhdGVUZXJtU3VtbWFyeSIsImdlbmVyYXRlUmVwb3J0Q2FyZCIsImVycm9yIiwic2VjdGlvbnMiLCJsZW5ndGgiLCJwdXNoIiwidGl0bGUiLCJsYW5ndWFnZSIsImNvbnRlbnQiLCJnZW5lcmF0ZVByb2dyZXNzRnJvbUFydGlmYWN0cyIsImRhdGEiLCJpbmNsdWRlR29hbHMiLCJnZW5lcmF0ZUdvYWxzTmFycmF0aXZlIiwib3ZlcmFsbENvbW1lbnRzIiwiZ2VuZXJhdGVPdmVyYWxsQ29tbWVudHMiLCJuZXh0U3RlcHMiLCJnZW5lcmF0ZU5leHRTdGVwcyIsInN0dWRlbnROYW1lIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwZXJpb2QiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJsZWFybmluZ0pvdXJuZXkiLCJjb21waWxlTGVhcm5pbmdKb3VybmV5IiwicHJvbXB0IiwibmFycmF0aXZlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN1YmplY3RQcm9ncmVzcyIsImdldFN1YmplY3RQcm9ncmVzcyIsInN1YmplY3QiLCJuYW1lIiwiZ2VuZXJhdGVTdWJqZWN0U3VtbWFyeSIsImdlbmVyYXRlVGVybU92ZXJ2aWV3IiwiZ2VuZXJhdGVUZXJtUmVjb21tZW5kYXRpb25zIiwicmVwb3J0Q2FyZERhdGEiLCJjb21waWxlUmVwb3J0Q2FyZERhdGEiLCJjb21tZW50cyIsImdlbmVyYXRlU3ViamVjdENvbW1lbnRzIiwiZ3JhZGUiLCJvdXRjb21lcyIsImdlbmVyYXRlUmVwb3J0Q2FyZENvbW1lbnRzIiwiY29udGV4dCIsImFydGlmYWN0Q291bnQiLCJyZWZsZWN0aW9uQ291bnQiLCJyZWNlbnRBcnRpZmFjdHMiLCJzbGljZSIsIm1hcCIsImEiLCJkZXNjcmlwdGlvbiIsInJlY2VudFJlZmxlY3Rpb25zIiwiciIsImFjdGl2ZUdvYWxzIiwiZmlsdGVyIiwiZyIsImNvbXBsZXRlZEdvYWxzIiwiYWN0aXZlIiwidGV4dCIsImNvbXBsZXRlZCIsInNlY3Rpb25zQ291bnQiLCJzZWN0aW9uVGl0bGVzIiwic3VnZ2VzdGlvbnMiLCJzdW1tYXJ5Iiwic3Vic3RyaW5nIiwic3BsaXQiLCJ0cmltIiwic3ViamVjdHMiLCJmaW5kTWFueSIsInVzZXJJZCIsImF2ZXJhZ2VTY29yZSIsInRvRml4ZWQiLCJvdmVyYWxsQXZlcmFnZSIsInJlZHVjZSIsInN1bSIsImF2ZXJhZ2UiLCJ3ZWFrU3ViamVjdHMiLCJzdHJvbmdTdWJqZWN0cyIsImpvaW4iLCJyZWNvbW1lbmRhdGlvbnMiLCJzY29yZVRvR3JhZGUiLCJzY29yZSIsIm92ZXJhbGxHcmFkZSIsImdyYWRlVmFsdWUiLCJBIiwiQiIsIkMiLCJEIiwiRiIsImdlbmVyYXRlQ3VycmljdWx1bUNvdmVyYWdlUmVwb3J0IiwiZXhwZWN0YXRpb25zIiwiY3VycmljdWx1bUV4cGVjdGF0aW9uIiwibG9uZ1JhbmdlUGxhbnMiLCJsb25nUmFuZ2VQbGFuIiwidW5pdFBsYW5zIiwidW5pdFBsYW4iLCJsZXNzb25QbGFucyIsImVURk9MZXNzb25QbGFuIiwiY292ZXJlZEV4cGVjdGF0aW9uSWRzIiwiU2V0IiwiZm9yRWFjaCIsInBsYW4iLCJleHAiLCJhZGQiLCJleHBlY3RhdGlvbklkIiwidG90YWxFeHBlY3RhdGlvbnMiLCJjb3ZlcmVkRXhwZWN0YXRpb25zIiwic2l6ZSIsImNvdmVyYWdlUGVyY2VudGFnZSIsIk1hdGgiLCJyb3VuZCIsInVuY292ZXJlZEV4cGVjdGF0aW9ucyIsImhhcyIsImNvZGUiLCJzdHJhbmQiLCJjb3ZlcmFnZUJ5U3RyYW5kIiwidG90YWwiLCJjb3ZlcmVkIiwicGVyY2VudGFnZSIsIk9iamVjdCIsImtleXMiLCJzdHJhbmREYXRhIiwiZ2VuZXJhdGVQbGFubmluZ1Byb2dyZXNzUmVwb3J0IiwiZGF5Ym9va0VudHJpZXMiLCJkYXlib29rRW50cnkiLCJjYWxjdWxhdGVDb21wbGV0aW9uUmF0ZSIsInBsYW5zIiwiaXNDb21wbGV0ZSIsImNvbXBsZXRpb25SYXRlIiwiYmlnSWRlYXMiLCJsZWFybmluZ0dvYWxzIiwiZW50cnkiLCJ3aGF0V29ya2VkIiwiZ2VuZXJhdGVMZXNzb25QbGFuUmVwb3J0IiwibGVzc29uSWQiLCJsZXNzb24iLCJleHBlY3RhdGlvbiIsInJlc291cmNlcyIsImRhdGUiLCJkdXJhdGlvbiIsIm1pbmRzT24iLCJ1bmRlZmluZWQiLCJhY3Rpb24iLCJjb25zb2xpZGF0aW9uIiwibWF0ZXJpYWxzIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNTdWJGcmllbmRseSIsImhpZXJhcmNoeSIsImN1cnJpY3VsdW1BbGlnbm1lbnQiLCJyZWZsZWN0aW9uIiwib3ZlcmFsbFJhdGluZyIsIndvdWxkUmV1c2VMZXNzb24iLCJyZXNvdXJjZSIsInR5cGUiLCJ1cmwiLCJnZW5lcmF0ZVN1YnN0aXR1dGVQbGFuUmVwb3J0IiwiYmFzaWNJbmZvIiwiYWN0aXZpdGllcyIsIm9wZW5pbmciLCJtYWluIiwiY2xvc2luZyIsInNwZWNpYWxOb3RlcyIsInN1Yk5vdGVzIiwiZ2VuZXJhdGVVbml0T3ZlcnZpZXdSZXBvcnQiLCJ1bml0SWQiLCJ1bml0IiwidG90YWxEdXJhdGlvbiIsImVzdGltYXRlZEhvdXJzIiwibGVzc29uU3VtbWFyeSIsInRvdGFsTGVzc29ucyIsImxlc3NvbnMiLCJyZXBvcnRHZW5lcmF0b3JTZXJ2aWNlIl0sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9zZXJ2aWNlcy9yZXBvcnRHZW5lcmF0b3JTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4uL3ByaXNtYSc7XG5pbXBvcnQgeyBnZW5lcmF0ZUNvbnRlbnQgfSBmcm9tICcuL2xsbVNlcnZpY2UnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9ydEdlbmVyYXRpb25SZXF1ZXN0IHtcbiAgc3R1ZGVudElkOiBudW1iZXI7XG4gIHJlcG9ydFR5cGU6ICdwcm9ncmVzcycgfCAnbmFycmF0aXZlJyB8ICd0ZXJtX3N1bW1hcnknIHwgJ3JlcG9ydF9jYXJkJztcbiAgdGVybUlkPzogbnVtYmVyO1xuICBzdWJqZWN0SWQ/OiBudW1iZXI7XG4gIHN0YXJ0RGF0ZTogRGF0ZTtcbiAgZW5kRGF0ZTogRGF0ZTtcbiAgbGFuZ3VhZ2U6ICdlbicgfCAnZnInO1xuICBpbmNsdWRlQXNzZXNzbWVudHM/OiBib29sZWFuO1xuICBpbmNsdWRlQXR0ZW5kYW5jZT86IGJvb2xlYW47XG4gIGluY2x1ZGVHb2Fscz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGVkUmVwb3J0IHtcbiAgc3R1ZGVudE5hbWU6IHN0cmluZztcbiAgcGVyaW9kOiBzdHJpbmc7XG4gIHNlY3Rpb25zOiBSZXBvcnRTZWN0aW9uW107XG4gIG92ZXJhbGxDb21tZW50czogc3RyaW5nO1xuICBuZXh0U3RlcHM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9ydFNlY3Rpb24ge1xuICB0aXRsZTogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn1cblxuLy8gVHlwZSBkZWZpbml0aW9ucyBmb3Igc3R1ZGVudCBkYXRhIHdpdGggcmVsYXRpb25zXG5pbnRlcmZhY2UgU3R1ZGVudFdpdGhSZWxhdGlvbnMge1xuICBpZDogbnVtYmVyO1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgdXNlcjogeyBpZDogbnVtYmVyIH07XG4gIGFydGlmYWN0czogQXJ0aWZhY3RbXTtcbiAgcmVmbGVjdGlvbnM6IFJlZmxlY3Rpb25bXTtcbiAgZ29hbHM6IEdvYWxbXTtcbn1cblxuaW50ZXJmYWNlIEFydGlmYWN0IHtcbiAgaWQ6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZyB8IG51bGw7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbn1cblxuaW50ZXJmYWNlIFJlZmxlY3Rpb24ge1xuICBpZDogbnVtYmVyO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbn1cblxuaW50ZXJmYWNlIEdvYWwge1xuICBpZDogbnVtYmVyO1xuICB0ZXh0OiBzdHJpbmc7XG4gIHN0YXR1czogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU3ViamVjdFByb2dyZXNzIHtcbiAgaWQ6IG51bWJlcjtcbiAgbmFtZTogc3RyaW5nO1xuICBvdXRjb21lczogc3RyaW5nW107XG4gIGF2ZXJhZ2VTY29yZTogbnVtYmVyO1xuICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xufVxuXG5pbnRlcmZhY2UgU3ViamVjdFJlcG9ydENhcmQge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIGdyYWRlOiBzdHJpbmc7XG4gIG91dGNvbWVzOiBzdHJpbmdbXTtcbn1cblxuLy8gVHlwZSBkZWZpbml0aW9ucyBmb3IgY3VycmljdWx1bSBhbmQgcGxhbm5pbmcgcmVwb3J0c1xuZXhwb3J0IGludGVyZmFjZSBDdXJyaWN1bHVtQ292ZXJhZ2VSZXBvcnQge1xuICB0b3RhbEV4cGVjdGF0aW9uczogbnVtYmVyO1xuICBjb3ZlcmVkRXhwZWN0YXRpb25zOiBudW1iZXI7XG4gIGNvdmVyYWdlUGVyY2VudGFnZTogbnVtYmVyO1xuICB1bmNvdmVyZWRFeHBlY3RhdGlvbnM6IEFycmF5PHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHN0cmFuZDogc3RyaW5nO1xuICB9PjtcbiAgY292ZXJhZ2VCeVN0cmFuZDogUmVjb3JkPFxuICAgIHN0cmluZyxcbiAgICB7XG4gICAgICB0b3RhbDogbnVtYmVyO1xuICAgICAgY292ZXJlZDogbnVtYmVyO1xuICAgICAgcGVyY2VudGFnZTogbnVtYmVyO1xuICAgIH1cbiAgPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbGFubmluZ1Byb2dyZXNzUmVwb3J0IHtcbiAgbG9uZ1JhbmdlUGxhbnM6IHtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIGNvbXBsZXRlZDogbnVtYmVyO1xuICAgIGNvbXBsZXRpb25SYXRlOiBudW1iZXI7XG4gIH07XG4gIHVuaXRQbGFuczoge1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgY29tcGxldGVkOiBudW1iZXI7XG4gICAgY29tcGxldGlvblJhdGU6IG51bWJlcjtcbiAgfTtcbiAgbGVzc29uUGxhbnM6IHtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIGNvbXBsZXRlZDogbnVtYmVyO1xuICAgIGNvbXBsZXRpb25SYXRlOiBudW1iZXI7XG4gIH07XG4gIGRheWJvb2tFbnRyaWVzOiB7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBjb21wbGV0ZWQ6IG51bWJlcjtcbiAgICBjb21wbGV0aW9uUmF0ZTogbnVtYmVyO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlc3NvblBsYW5SZXBvcnQge1xuICBsZXNzb246IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgIG1pbmRzT24/OiBzdHJpbmc7XG4gICAgYWN0aW9uPzogc3RyaW5nO1xuICAgIGNvbnNvbGlkYXRpb24/OiBzdHJpbmc7XG4gICAgbGVhcm5pbmdHb2Fscz86IHN0cmluZztcbiAgICBtYXRlcmlhbHM/OiBzdHJpbmdbXTtcbiAgICBpc1N1YkZyaWVuZGx5OiBib29sZWFuO1xuICB9O1xuICBoaWVyYXJjaHk6IHtcbiAgICBsb25nUmFuZ2VQbGFuOiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgIHN1YmplY3Q/OiBzdHJpbmc7XG4gICAgICBncmFkZT86IG51bWJlcjtcbiAgICB9O1xuICAgIHVuaXRQbGFuOiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgICAgdGl0bGU6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBjdXJyaWN1bHVtQWxpZ25tZW50OiBBcnJheTx7XG4gICAgaWQ6IHN0cmluZztcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBzdHJhbmQ6IHN0cmluZztcbiAgfT47XG4gIHJlZmxlY3Rpb24/OiB7XG4gICAgd2hhdFdvcmtlZD86IHN0cmluZztcbiAgICBvdmVyYWxsUmF0aW5nPzogbnVtYmVyO1xuICAgIHdvdWxkUmV1c2VMZXNzb24/OiBib29sZWFuO1xuICB9O1xuICByZXNvdXJjZXM6IEFycmF5PHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHVybD86IHN0cmluZztcbiAgfT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic3RpdHV0ZVBsYW5SZXBvcnQge1xuICB0aXRsZTogc3RyaW5nO1xuICBiYXNpY0luZm86IHtcbiAgICBzdWJqZWN0OiBzdHJpbmc7XG4gICAgZ3JhZGU6IG51bWJlcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgIGRhdGU6IERhdGU7XG4gIH07XG4gIG1hdGVyaWFsczogc3RyaW5nW107XG4gIGFjdGl2aXRpZXM6IHtcbiAgICBvcGVuaW5nOiBzdHJpbmc7XG4gICAgbWFpbjogc3RyaW5nO1xuICAgIGNsb3Npbmc6IHN0cmluZztcbiAgfTtcbiAgc3BlY2lhbE5vdGVzPzogc3RyaW5nO1xuICByZXNvdXJjZXM6IEFycmF5PHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGNvbnRlbnQ/OiBzdHJpbmc7XG4gIH0+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuaXRPdmVydmlld1JlcG9ydCB7XG4gIHVuaXQ6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgYmlnSWRlYXM/OiBzdHJpbmc7XG4gICAgc3RhcnREYXRlOiBEYXRlO1xuICAgIGVuZERhdGU6IERhdGU7XG4gICAgZXN0aW1hdGVkSG91cnM6IG51bWJlcjtcbiAgfTtcbiAgaGllcmFyY2h5OiB7XG4gICAgbG9uZ1JhbmdlUGxhbjoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICBzdWJqZWN0Pzogc3RyaW5nO1xuICAgICAgZ3JhZGU/OiBudW1iZXI7XG4gICAgfTtcbiAgfTtcbiAgY3VycmljdWx1bUFsaWdubWVudDogQXJyYXk8e1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgc3RyYW5kOiBzdHJpbmc7XG4gIH0+O1xuICBsZXNzb25TdW1tYXJ5OiB7XG4gICAgdG90YWxMZXNzb25zOiBudW1iZXI7XG4gICAgdG90YWxEdXJhdGlvbjogbnVtYmVyO1xuICAgIGxlc3NvbnM6IEFycmF5PHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICB0aXRsZTogc3RyaW5nO1xuICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgfT47XG4gIH07XG4gIHJlc291cmNlczogQXJyYXk8e1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gIH0+O1xufVxuXG5leHBvcnQgY2xhc3MgUmVwb3J0R2VuZXJhdG9yU2VydmljZSB7XG4gIHByaXZhdGUgcHJpc21hOiB0eXBlb2YgcHJpc21hO1xuXG4gIGNvbnN0cnVjdG9yKHByaXNtYUNsaWVudD86IHR5cGVvZiBwcmlzbWEpIHtcbiAgICB0aGlzLnByaXNtYSA9IHByaXNtYUNsaWVudCB8fCBwcmlzbWE7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZVJlcG9ydChyZXF1ZXN0OiBSZXBvcnRHZW5lcmF0aW9uUmVxdWVzdCk6IFByb21pc2U8R2VuZXJhdGVkUmVwb3J0PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZldGNoIHN0dWRlbnQgZGF0YVxuICAgICAgY29uc3Qgc3R1ZGVudCA9IGF3YWl0IHRoaXMucHJpc21hLnN0dWRlbnQuZmluZFVuaXF1ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiByZXF1ZXN0LnN0dWRlbnRJZCB9LFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgdXNlcjogdHJ1ZSxcbiAgICAgICAgICBhcnRpZmFjdHM6IHtcbiAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgICAgICAgIGd0ZTogcmVxdWVzdC5zdGFydERhdGUsXG4gICAgICAgICAgICAgICAgbHRlOiByZXF1ZXN0LmVuZERhdGUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVmbGVjdGlvbnM6IHtcbiAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICAgICAgICAgIGd0ZTogcmVxdWVzdC5zdGFydERhdGUsXG4gICAgICAgICAgICAgICAgbHRlOiByZXF1ZXN0LmVuZERhdGUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ29hbHM6IHtcbiAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgIE9SOiBbeyBzdGF0dXM6ICdhY3RpdmUnIH0sIHsgc3RhdHVzOiAnY29tcGxldGVkJyB9XSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXN0dWRlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHVkZW50IG5vdCBmb3VuZCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSByZXBvcnQgYmFzZWQgb24gdHlwZVxuICAgICAgbGV0IHJlcG9ydDogR2VuZXJhdGVkUmVwb3J0O1xuXG4gICAgICBzd2l0Y2ggKHJlcXVlc3QucmVwb3J0VHlwZSkge1xuICAgICAgICBjYXNlICdwcm9ncmVzcyc6XG4gICAgICAgICAgcmVwb3J0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVByb2dyZXNzUmVwb3J0KHN0dWRlbnQsIHJlcXVlc3QpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICduYXJyYXRpdmUnOlxuICAgICAgICAgIHJlcG9ydCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVOYXJyYXRpdmVSZXBvcnQoc3R1ZGVudCwgcmVxdWVzdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Rlcm1fc3VtbWFyeSc6XG4gICAgICAgICAgcmVwb3J0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVRlcm1TdW1tYXJ5KHN0dWRlbnQsIHJlcXVlc3QpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZXBvcnRfY2FyZCc6XG4gICAgICAgICAgcmVwb3J0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVJlcG9ydENhcmQoc3R1ZGVudCwgcmVxdWVzdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlcG9ydCB0eXBlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXBvcnQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHJlcG9ydDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUHJvZ3Jlc3NSZXBvcnQoXG4gICAgc3R1ZGVudDogU3R1ZGVudFdpdGhSZWxhdGlvbnMsXG4gICAgcmVxdWVzdDogUmVwb3J0R2VuZXJhdGlvblJlcXVlc3QsXG4gICk6IFByb21pc2U8R2VuZXJhdGVkUmVwb3J0PiB7XG4gICAgY29uc3Qgc2VjdGlvbnM6IFJlcG9ydFNlY3Rpb25bXSA9IFtdO1xuXG4gICAgLy8gQXNzZXNzbWVudCBmdW5jdGlvbmFsaXR5IHJlbW92ZWQgLSBmb2N1cyBvbiBhcnRpZmFjdHMgYW5kIHJlZmxlY3Rpb25zXG4gICAgaWYgKHN0dWRlbnQuYXJ0aWZhY3RzLmxlbmd0aCA+IDAgfHwgc3R1ZGVudC5yZWZsZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IHJlcXVlc3QubGFuZ3VhZ2UgPT09ICdmcicgPyAnUHJvZ3LDqHMgYWNhZMOpbWlxdWUnIDogJ0FjYWRlbWljIFByb2dyZXNzJyxcbiAgICAgICAgY29udGVudDogYXdhaXQgdGhpcy5nZW5lcmF0ZVByb2dyZXNzRnJvbUFydGlmYWN0cyhcbiAgICAgICAgICBzdHVkZW50LmFydGlmYWN0cyxcbiAgICAgICAgICBzdHVkZW50LnJlZmxlY3Rpb25zLFxuICAgICAgICAgIHJlcXVlc3QubGFuZ3VhZ2UsXG4gICAgICAgICksXG4gICAgICAgIGRhdGE6IHsgYXJ0aWZhY3RzOiBzdHVkZW50LmFydGlmYWN0cywgcmVmbGVjdGlvbnM6IHN0dWRlbnQucmVmbGVjdGlvbnMgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEdvYWxzIFNlY3Rpb25cbiAgICBpZiAocmVxdWVzdC5pbmNsdWRlR29hbHMgJiYgc3R1ZGVudC5nb2Fscy5sZW5ndGggPiAwKSB7XG4gICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IHJlcXVlc3QubGFuZ3VhZ2UgPT09ICdmcicgPyAnT2JqZWN0aWZzJyA6ICdHb2FscycsXG4gICAgICAgIGNvbnRlbnQ6IGF3YWl0IHRoaXMuZ2VuZXJhdGVHb2Fsc05hcnJhdGl2ZShzdHVkZW50LmdvYWxzLCByZXF1ZXN0Lmxhbmd1YWdlKSxcbiAgICAgICAgZGF0YTogeyBnb2Fsczogc3R1ZGVudC5nb2FscyB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcmFsbCBDb21tZW50c1xuICAgIGNvbnN0IG92ZXJhbGxDb21tZW50cyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVPdmVyYWxsQ29tbWVudHMoc3R1ZGVudCwgc2VjdGlvbnMsIHJlcXVlc3QubGFuZ3VhZ2UpO1xuXG4gICAgLy8gTmV4dCBTdGVwc1xuICAgIGNvbnN0IG5leHRTdGVwcyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVOZXh0U3RlcHMoc3R1ZGVudCwgc2VjdGlvbnMsIHJlcXVlc3QubGFuZ3VhZ2UpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0dWRlbnROYW1lOiBgJHtzdHVkZW50LmZpcnN0TmFtZX0gJHtzdHVkZW50Lmxhc3ROYW1lfWAsXG4gICAgICBwZXJpb2Q6IGAke3JlcXVlc3Quc3RhcnREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfSAtICR7cmVxdWVzdC5lbmREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfWAsXG4gICAgICBzZWN0aW9ucyxcbiAgICAgIG92ZXJhbGxDb21tZW50cyxcbiAgICAgIG5leHRTdGVwcyxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZU5hcnJhdGl2ZVJlcG9ydChcbiAgICBzdHVkZW50OiBTdHVkZW50V2l0aFJlbGF0aW9ucyxcbiAgICByZXF1ZXN0OiBSZXBvcnRHZW5lcmF0aW9uUmVxdWVzdCxcbiAgKTogUHJvbWlzZTxHZW5lcmF0ZWRSZXBvcnQ+IHtcbiAgICAvLyBHYXRoZXIgY29tcHJlaGVuc2l2ZSBkYXRhXG4gICAgY29uc3QgbGVhcm5pbmdKb3VybmV5ID0gdGhpcy5jb21waWxlTGVhcm5pbmdKb3VybmV5KHN0dWRlbnQpO1xuXG4gICAgLy8gR2VuZXJhdGUgbmFycmF0aXZlIHVzaW5nIExMTVxuICAgIGNvbnN0IHByb21wdCA9XG4gICAgICByZXF1ZXN0Lmxhbmd1YWdlID09PSAnZnInXG4gICAgICAgID8gYEfDqW7DqXJleiB1biByYXBwb3J0IG5hcnJhdGlmIGTDqXRhaWxsw6kgcG91ciAke3N0dWRlbnQuZmlyc3ROYW1lfSAke3N0dWRlbnQubGFzdE5hbWV9LCBjb3V2cmFudCBsYSBww6lyaW9kZSBkdSAke3JlcXVlc3Quc3RhcnREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfSBhdSAke3JlcXVlc3QuZW5kRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0uIEluY2x1ZXogbGVzIHLDqWFsaXNhdGlvbnMsIGxlcyBkw6lmaXMgZXQgbGVzIGRvbWFpbmVzIGRlIGNyb2lzc2FuY2UuYFxuICAgICAgICA6IGBHZW5lcmF0ZSBhIGRldGFpbGVkIG5hcnJhdGl2ZSByZXBvcnQgZm9yICR7c3R1ZGVudC5maXJzdE5hbWV9ICR7c3R1ZGVudC5sYXN0TmFtZX0sIGNvdmVyaW5nIHRoZSBwZXJpb2QgZnJvbSAke3JlcXVlc3Quc3RhcnREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfSB0byAke3JlcXVlc3QuZW5kRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0uIEluY2x1ZGUgYWNoaWV2ZW1lbnRzLCBjaGFsbGVuZ2VzLCBhbmQgYXJlYXMgb2YgZ3Jvd3RoLmA7XG5cbiAgICBjb25zdCBuYXJyYXRpdmUgPSBhd2FpdCBnZW5lcmF0ZUNvbnRlbnQocHJvbXB0LCBKU09OLnN0cmluZ2lmeShsZWFybmluZ0pvdXJuZXkpKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdHVkZW50TmFtZTogYCR7c3R1ZGVudC5maXJzdE5hbWV9ICR7c3R1ZGVudC5sYXN0TmFtZX1gLFxuICAgICAgcGVyaW9kOiBgJHtyZXF1ZXN0LnN0YXJ0RGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0gLSAke3JlcXVlc3QuZW5kRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX1gLFxuICAgICAgc2VjdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiByZXF1ZXN0Lmxhbmd1YWdlID09PSAnZnInID8gJ1JhcHBvcnQgbmFycmF0aWYnIDogJ05hcnJhdGl2ZSBSZXBvcnQnLFxuICAgICAgICAgIGNvbnRlbnQ6IG5hcnJhdGl2ZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBvdmVyYWxsQ29tbWVudHM6ICcnLFxuICAgICAgbmV4dFN0ZXBzOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVRlcm1TdW1tYXJ5KFxuICAgIHN0dWRlbnQ6IFN0dWRlbnRXaXRoUmVsYXRpb25zLFxuICAgIHJlcXVlc3Q6IFJlcG9ydEdlbmVyYXRpb25SZXF1ZXN0LFxuICApOiBQcm9taXNlPEdlbmVyYXRlZFJlcG9ydD4ge1xuICAgIGNvbnN0IHNlY3Rpb25zOiBSZXBvcnRTZWN0aW9uW10gPSBbXTtcblxuICAgIC8vIEdldCBzdWJqZWN0LXNwZWNpZmljIHByb2dyZXNzXG4gICAgY29uc3Qgc3ViamVjdFByb2dyZXNzID0gYXdhaXQgdGhpcy5nZXRTdWJqZWN0UHJvZ3Jlc3Moc3R1ZGVudCk7XG5cbiAgICBmb3IgKGNvbnN0IHN1YmplY3Qgb2Ygc3ViamVjdFByb2dyZXNzKSB7XG4gICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IHN1YmplY3QubmFtZSxcbiAgICAgICAgY29udGVudDogYXdhaXQgdGhpcy5nZW5lcmF0ZVN1YmplY3RTdW1tYXJ5KHN1YmplY3QsIHJlcXVlc3QubGFuZ3VhZ2UpLFxuICAgICAgICBkYXRhOiBzdWJqZWN0LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcmFsbCB0ZXJtIHBlcmZvcm1hbmNlXG4gICAgY29uc3Qgb3ZlcmFsbENvbW1lbnRzID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVRlcm1PdmVydmlldyhcbiAgICAgIHN0dWRlbnQsXG4gICAgICBzdWJqZWN0UHJvZ3Jlc3MsXG4gICAgICByZXF1ZXN0Lmxhbmd1YWdlLFxuICAgICk7XG5cbiAgICAvLyBSZWNvbW1lbmRhdGlvbnMgZm9yIG5leHQgdGVybVxuICAgIGNvbnN0IG5leHRTdGVwcyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVUZXJtUmVjb21tZW5kYXRpb25zKFxuICAgICAgc3R1ZGVudCxcbiAgICAgIHN1YmplY3RQcm9ncmVzcyxcbiAgICAgIHJlcXVlc3QubGFuZ3VhZ2UsXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdHVkZW50TmFtZTogYCR7c3R1ZGVudC5maXJzdE5hbWV9ICR7c3R1ZGVudC5sYXN0TmFtZX1gLFxuICAgICAgcGVyaW9kOiByZXF1ZXN0Lmxhbmd1YWdlID09PSAnZnInID8gJ1LDqXN1bcOpIGR1IHRyaW1lc3RyZScgOiAnVGVybSBTdW1tYXJ5JyxcbiAgICAgIHNlY3Rpb25zLFxuICAgICAgb3ZlcmFsbENvbW1lbnRzLFxuICAgICAgbmV4dFN0ZXBzLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUmVwb3J0Q2FyZChcbiAgICBzdHVkZW50OiBTdHVkZW50V2l0aFJlbGF0aW9ucyxcbiAgICByZXF1ZXN0OiBSZXBvcnRHZW5lcmF0aW9uUmVxdWVzdCxcbiAgKTogUHJvbWlzZTxHZW5lcmF0ZWRSZXBvcnQ+IHtcbiAgICBjb25zdCBzZWN0aW9uczogUmVwb3J0U2VjdGlvbltdID0gW107XG5cbiAgICAvLyBHZXQgZm9ybWFsIGdyYWRlcy9hc3Nlc3NtZW50cyBieSBzdWJqZWN0XG4gICAgY29uc3QgcmVwb3J0Q2FyZERhdGEgPSBhd2FpdCB0aGlzLmNvbXBpbGVSZXBvcnRDYXJkRGF0YShzdHVkZW50KTtcblxuICAgIGZvciAoY29uc3Qgc3ViamVjdCBvZiByZXBvcnRDYXJkRGF0YSkge1xuICAgICAgLy8gR2VuZXJhdGUgdGVhY2hlciBjb21tZW50cyBmb3IgZWFjaCBzdWJqZWN0XG4gICAgICBjb25zdCBjb21tZW50cyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVTdWJqZWN0Q29tbWVudHMoc3ViamVjdCwgc3R1ZGVudCwgcmVxdWVzdC5sYW5ndWFnZSk7XG5cbiAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICB0aXRsZTogc3ViamVjdC5uYW1lLFxuICAgICAgICBjb250ZW50OiBjb21tZW50cyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGdyYWRlOiBzdWJqZWN0LmdyYWRlLFxuICAgICAgICAgIG91dGNvbWVzOiBzdWJqZWN0Lm91dGNvbWVzLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhbCBjb21tZW50c1xuICAgIGNvbnN0IG92ZXJhbGxDb21tZW50cyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVSZXBvcnRDYXJkQ29tbWVudHMoXG4gICAgICBzdHVkZW50LFxuICAgICAgcmVwb3J0Q2FyZERhdGEsXG4gICAgICByZXF1ZXN0Lmxhbmd1YWdlLFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3R1ZGVudE5hbWU6IGAke3N0dWRlbnQuZmlyc3ROYW1lfSAke3N0dWRlbnQubGFzdE5hbWV9YCxcbiAgICAgIHBlcmlvZDogcmVxdWVzdC5sYW5ndWFnZSA9PT0gJ2ZyJyA/ICdCdWxsZXRpbiBzY29sYWlyZScgOiAnUmVwb3J0IENhcmQnLFxuICAgICAgc2VjdGlvbnMsXG4gICAgICBvdmVyYWxsQ29tbWVudHMsXG4gICAgICBuZXh0U3RlcHM6IFtdLFxuICAgIH07XG4gIH1cblxuICAvLyBIZWxwZXIgbWV0aG9kc1xuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUHJvZ3Jlc3NGcm9tQXJ0aWZhY3RzKFxuICAgIGFydGlmYWN0czogQXJ0aWZhY3RbXSxcbiAgICByZWZsZWN0aW9uczogUmVmbGVjdGlvbltdLFxuICAgIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgYXJ0aWZhY3RDb3VudDogYXJ0aWZhY3RzLmxlbmd0aCxcbiAgICAgIHJlZmxlY3Rpb25Db3VudDogcmVmbGVjdGlvbnMubGVuZ3RoLFxuICAgICAgcmVjZW50QXJ0aWZhY3RzOiBhcnRpZmFjdHNcbiAgICAgICAgLnNsaWNlKDAsIDMpXG4gICAgICAgIC5tYXAoKGEpID0+ICh7IHRpdGxlOiBhLnRpdGxlLCBkZXNjcmlwdGlvbjogYS5kZXNjcmlwdGlvbiB9KSksXG4gICAgICByZWNlbnRSZWZsZWN0aW9uczogcmVmbGVjdGlvbnMuc2xpY2UoMCwgMykubWFwKChyKSA9PiAoeyBjb250ZW50OiByLmNvbnRlbnQgfSkpLFxuICAgIH07XG5cbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgRMOpY3JpdmV6IGxlIHByb2dyw6hzIGFjYWTDqW1pcXVlIGJhc8OpIHN1ciAke2FydGlmYWN0cy5sZW5ndGh9IGFydGVmYWN0cyBldCAke3JlZmxlY3Rpb25zLmxlbmd0aH0gcsOpZmxleGlvbnMuYFxuICAgICAgICA6IGBEZXNjcmliZSBhY2FkZW1pYyBwcm9ncmVzcyBiYXNlZCBvbiAke2FydGlmYWN0cy5sZW5ndGh9IGFydGlmYWN0cyBhbmQgJHtyZWZsZWN0aW9ucy5sZW5ndGh9IHJlZmxlY3Rpb25zLmA7XG5cbiAgICByZXR1cm4gZ2VuZXJhdGVDb250ZW50KHByb21wdCwgSlNPTi5zdHJpbmdpZnkoY29udGV4dCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZUdvYWxzTmFycmF0aXZlKGdvYWxzOiBHb2FsW10sIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgYWN0aXZlR29hbHMgPSBnb2Fscy5maWx0ZXIoKGcpID0+IGcuc3RhdHVzID09PSAnYWN0aXZlJyk7XG4gICAgY29uc3QgY29tcGxldGVkR29hbHMgPSBnb2Fscy5maWx0ZXIoKGcpID0+IGcuc3RhdHVzID09PSAnY29tcGxldGVkJyk7XG5cbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgYWN0aXZlOiBhY3RpdmVHb2Fscy5tYXAoKGcpID0+ICh7IHRleHQ6IGcudGV4dCB9KSksXG4gICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZEdvYWxzLm1hcCgoZykgPT4gKHsgdGV4dDogZy50ZXh0IH0pKSxcbiAgICB9O1xuXG4gICAgY29uc3QgcHJvbXB0ID1cbiAgICAgIGxhbmd1YWdlID09PSAnZnInXG4gICAgICAgID8gYETDqWNyaXZleiBsZSBwcm9ncsOocyB2ZXJzIGxlcyBvYmplY3RpZnMgZGUgbCfDqWzDqHZlOiAke0pTT04uc3RyaW5naWZ5KGNvbnRleHQpfWBcbiAgICAgICAgOiBgRGVzY3JpYmUgdGhlIHN0dWRlbnQncyBwcm9ncmVzcyB0b3dhcmQgdGhlaXIgZ29hbHM6ICR7SlNPTi5zdHJpbmdpZnkoY29udGV4dCl9YDtcblxuICAgIHJldHVybiBnZW5lcmF0ZUNvbnRlbnQocHJvbXB0KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVPdmVyYWxsQ29tbWVudHMoXG4gICAgc3R1ZGVudDogU3R1ZGVudFdpdGhSZWxhdGlvbnMsXG4gICAgc2VjdGlvbnM6IFJlcG9ydFNlY3Rpb25bXSxcbiAgICBsYW5ndWFnZTogJ2VuJyB8ICdmcicsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIHN0dWRlbnROYW1lOiBgJHtzdHVkZW50LmZpcnN0TmFtZX0gJHtzdHVkZW50Lmxhc3ROYW1lfWAsXG4gICAgICBzZWN0aW9uc0NvdW50OiBzZWN0aW9ucy5sZW5ndGgsXG4gICAgICBzZWN0aW9uVGl0bGVzOiBzZWN0aW9ucy5tYXAoKHMpID0+IHMudGl0bGUpLFxuICAgIH07XG5cbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgR8OpbsOpcmV6IGRlcyBjb21tZW50YWlyZXMgZ8OpbsOpcmF1eCBwb3NpdGlmcyBldCBlbmNvdXJhZ2VhbnRzIHBvdXIgJHtjb250ZXh0LnN0dWRlbnROYW1lfSBiYXPDqXMgc3VyIGxldXIgcmFwcG9ydCBkZSBwcm9ncsOocy5gXG4gICAgICAgIDogYEdlbmVyYXRlIHBvc2l0aXZlIGFuZCBlbmNvdXJhZ2luZyBvdmVyYWxsIGNvbW1lbnRzIGZvciAke2NvbnRleHQuc3R1ZGVudE5hbWV9IGJhc2VkIG9uIHRoZWlyIHByb2dyZXNzIHJlcG9ydC5gO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRlQ29udGVudChwcm9tcHQsIEpTT04uc3RyaW5naWZ5KGNvbnRleHQpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVOZXh0U3RlcHMoXG4gICAgc3R1ZGVudDogU3R1ZGVudFdpdGhSZWxhdGlvbnMsXG4gICAgc2VjdGlvbnM6IFJlcG9ydFNlY3Rpb25bXSxcbiAgICBsYW5ndWFnZTogJ2VuJyB8ICdmcicsXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgU3VnZ8OpcmV6IDMtNSBwcm9jaGFpbmVzIMOpdGFwZXMgc3DDqWNpZmlxdWVzIHBvdXIgJHtzdHVkZW50LmZpcnN0TmFtZX0gcG91ciBjb250aW51ZXIgbGV1ciBwcm9ncsOocy5gXG4gICAgICAgIDogYFN1Z2dlc3QgMy01IHNwZWNpZmljIG5leHQgc3RlcHMgZm9yICR7c3R1ZGVudC5maXJzdE5hbWV9IHRvIGNvbnRpbnVlIHRoZWlyIHByb2dyZXNzLmA7XG5cbiAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGF3YWl0IGdlbmVyYXRlQ29udGVudChcbiAgICAgIHByb21wdCxcbiAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBzZWN0aW9ucy5tYXAoKHMpID0+ICh7IHRpdGxlOiBzLnRpdGxlLCBzdW1tYXJ5OiBzLmNvbnRlbnQuc3Vic3RyaW5nKDAsIDEwMCkgfSkpLFxuICAgICAgKSxcbiAgICApO1xuXG4gICAgLy8gUGFyc2UgdGhlIHN1Z2dlc3Rpb25zIGludG8gYW4gYXJyYXlcbiAgICByZXR1cm4gc3VnZ2VzdGlvbnNcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5maWx0ZXIoKHMpID0+IHMudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAuc2xpY2UoMCwgNSk7XG4gIH1cblxuICBwcml2YXRlIGNvbXBpbGVMZWFybmluZ0pvdXJuZXkoc3R1ZGVudDogU3R1ZGVudFdpdGhSZWxhdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXJ0aWZhY3RzOiBzdHVkZW50LmFydGlmYWN0cy5tYXAoKGEpID0+ICh7XG4gICAgICAgIHRpdGxlOiBhLnRpdGxlLFxuICAgICAgICBkZXNjcmlwdGlvbjogYS5kZXNjcmlwdGlvbixcbiAgICAgICAgY3JlYXRlZEF0OiBhLmNyZWF0ZWRBdCxcbiAgICAgIH0pKSxcbiAgICAgIHJlZmxlY3Rpb25zOiBzdHVkZW50LnJlZmxlY3Rpb25zLm1hcCgocikgPT4gKHtcbiAgICAgICAgY29udGVudDogci5jb250ZW50LFxuICAgICAgICBjcmVhdGVkQXQ6IHIuY3JlYXRlZEF0LFxuICAgICAgfSkpLFxuICAgICAgZ29hbHM6IHN0dWRlbnQuZ29hbHMsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0U3ViamVjdFByb2dyZXNzKFxuICAgIHN0dWRlbnQ6IFN0dWRlbnRXaXRoUmVsYXRpb25zICYgeyB1c2VyOiB7IGlkOiBudW1iZXIgfSB9LFxuICApOiBQcm9taXNlPFN1YmplY3RQcm9ncmVzc1tdPiB7XG4gICAgLy8gU2ltcGxpZmllZCBzdWJqZWN0IHByb2dyZXNzIHdpdGhvdXQgZGVlcCByZWxhdGlvbnNcbiAgICBjb25zdCBzdWJqZWN0cyA9IGF3YWl0IHRoaXMucHJpc21hLnN1YmplY3QuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHsgdXNlcklkOiBzdHVkZW50LnVzZXIuaWQgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzdWJqZWN0cy5tYXAoKHN1YmplY3QpID0+ICh7XG4gICAgICBpZDogc3ViamVjdC5pZCxcbiAgICAgIG5hbWU6IHN1YmplY3QubmFtZSxcbiAgICAgIG91dGNvbWVzOiBbXSxcbiAgICAgIGF2ZXJhZ2VTY29yZTogMCwgLy8gQXNzZXNzbWVudCBmdW5jdGlvbmFsaXR5IHJlbW92ZWRcbiAgICB9KSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlU3ViamVjdFN1bW1hcnkoXG4gICAgc3ViamVjdDogU3ViamVjdFByb2dyZXNzLFxuICAgIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgUsOpc3VtZXogbGEgcGVyZm9ybWFuY2UgZGUgbCfDqWzDqHZlIGVuICR7c3ViamVjdC5uYW1lfSBhdmVjIHVuZSBub3RlIG1veWVubmUgZGUgJHtzdWJqZWN0LmF2ZXJhZ2VTY29yZS50b0ZpeGVkKDEpfSUgZXQgY291dnJhbnQgJHtzdWJqZWN0Lm91dGNvbWVzLmxlbmd0aH0gcsOpc3VsdGF0cyBkJ2FwcHJlbnRpc3NhZ2UuYFxuICAgICAgICA6IGBTdW1tYXJpemUgdGhlIHN0dWRlbnQncyBwZXJmb3JtYW5jZSBpbiAke3N1YmplY3QubmFtZX0gd2l0aCBhbiBhdmVyYWdlIHNjb3JlIG9mICR7c3ViamVjdC5hdmVyYWdlU2NvcmUudG9GaXhlZCgxKX0lIGFuZCBjb3ZlcmluZyAke3N1YmplY3Qub3V0Y29tZXMubGVuZ3RofSBsZWFybmluZyBvdXRjb21lcy5gO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRlQ29udGVudChwcm9tcHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVRlcm1PdmVydmlldyhcbiAgICBzdHVkZW50OiBTdHVkZW50V2l0aFJlbGF0aW9ucyxcbiAgICBzdWJqZWN0UHJvZ3Jlc3M6IFN1YmplY3RQcm9ncmVzc1tdLFxuICAgIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBvdmVyYWxsQXZlcmFnZSA9XG4gICAgICBzdWJqZWN0UHJvZ3Jlc3MucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuYXZlcmFnZVNjb3JlLCAwKSAvIHN1YmplY3RQcm9ncmVzcy5sZW5ndGg7XG5cbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgR8OpbsOpcmV6IHVuIGFwZXLDp3UgZHUgdHJpbWVzdHJlIHBvdXIgJHtzdHVkZW50LmZpcnN0TmFtZX0gYXZlYyB1bmUgbW95ZW5uZSBnw6luw6lyYWxlIGRlICR7b3ZlcmFsbEF2ZXJhZ2UudG9GaXhlZCgxKX0lIMOgIHRyYXZlcnMgJHtzdWJqZWN0UHJvZ3Jlc3MubGVuZ3RofSBtYXRpw6hyZXMuYFxuICAgICAgICA6IGBHZW5lcmF0ZSBhIHRlcm0gb3ZlcnZpZXcgZm9yICR7c3R1ZGVudC5maXJzdE5hbWV9IHdpdGggYW4gb3ZlcmFsbCBhdmVyYWdlIG9mICR7b3ZlcmFsbEF2ZXJhZ2UudG9GaXhlZCgxKX0lIGFjcm9zcyAke3N1YmplY3RQcm9ncmVzcy5sZW5ndGh9IHN1YmplY3RzLmA7XG5cbiAgICByZXR1cm4gZ2VuZXJhdGVDb250ZW50KFxuICAgICAgcHJvbXB0LFxuICAgICAgSlNPTi5zdHJpbmdpZnkoc3ViamVjdFByb2dyZXNzLm1hcCgocykgPT4gKHsgbmFtZTogcy5uYW1lLCBhdmVyYWdlOiBzLmF2ZXJhZ2VTY29yZSB9KSkpLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlVGVybVJlY29tbWVuZGF0aW9ucyhcbiAgICBzdHVkZW50OiBTdHVkZW50V2l0aFJlbGF0aW9ucyxcbiAgICBzdWJqZWN0UHJvZ3Jlc3M6IFN1YmplY3RQcm9ncmVzc1tdLFxuICAgIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyxcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IHdlYWtTdWJqZWN0cyA9IHN1YmplY3RQcm9ncmVzcy5maWx0ZXIoKHMpID0+IHMuYXZlcmFnZVNjb3JlIDwgNzApO1xuICAgIGNvbnN0IHN0cm9uZ1N1YmplY3RzID0gc3ViamVjdFByb2dyZXNzLmZpbHRlcigocykgPT4gcy5hdmVyYWdlU2NvcmUgPj0gODUpO1xuXG4gICAgY29uc3QgcHJvbXB0ID1cbiAgICAgIGxhbmd1YWdlID09PSAnZnInXG4gICAgICAgID8gYFN1Z2fDqXJleiAzLTUgcmVjb21tYW5kYXRpb25zIHBvdXIgbGUgcHJvY2hhaW4gdHJpbWVzdHJlIGJhc8OpZXMgc3VyIGxlcyBmb3JjZXMgKCR7c3Ryb25nU3ViamVjdHMubWFwKChzKSA9PiBzLm5hbWUpLmpvaW4oJywgJyl9KSBldCBsZXMgZG9tYWluZXMgw6AgYW3DqWxpb3JlciAoJHt3ZWFrU3ViamVjdHMubWFwKChzKSA9PiBzLm5hbWUpLmpvaW4oJywgJyl9KS5gXG4gICAgICAgIDogYFN1Z2dlc3QgMy01IHJlY29tbWVuZGF0aW9ucyBmb3IgdGhlIG5leHQgdGVybSBiYXNlZCBvbiBzdHJlbmd0aHMgKCR7c3Ryb25nU3ViamVjdHMubWFwKChzKSA9PiBzLm5hbWUpLmpvaW4oJywgJyl9KSBhbmQgYXJlYXMgZm9yIGltcHJvdmVtZW50ICgke3dlYWtTdWJqZWN0cy5tYXAoKHMpID0+IHMubmFtZSkuam9pbignLCAnKX0pLmA7XG5cbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBhd2FpdCBnZW5lcmF0ZUNvbnRlbnQocHJvbXB0KTtcblxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnNcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5maWx0ZXIoKHIpID0+IHIudHJpbSgpLmxlbmd0aCA+IDApXG4gICAgICAuc2xpY2UoMCwgNSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvbXBpbGVSZXBvcnRDYXJkRGF0YShcbiAgICBzdHVkZW50OiBTdHVkZW50V2l0aFJlbGF0aW9ucyAmIHsgdXNlcjogeyBpZDogbnVtYmVyIH0gfSxcbiAgKTogUHJvbWlzZTxTdWJqZWN0UmVwb3J0Q2FyZFtdPiB7XG4gICAgY29uc3Qgc3ViamVjdHMgPSBhd2FpdCB0aGlzLnByaXNtYS5zdWJqZWN0LmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7IHVzZXJJZDogc3R1ZGVudC51c2VyLmlkIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3ViamVjdHMubWFwKChzdWJqZWN0KSA9PiAoe1xuICAgICAgaWQ6IHN1YmplY3QuaWQsXG4gICAgICBuYW1lOiBzdWJqZWN0Lm5hbWUsXG4gICAgICBncmFkZTogJ04vQScsIC8vIEFzc2Vzc21lbnQgZnVuY3Rpb25hbGl0eSByZW1vdmVkXG4gICAgICBvdXRjb21lczogW10sXG4gICAgfSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzY29yZVRvR3JhZGUoc2NvcmU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKHNjb3JlID49IDkwKSByZXR1cm4gJ0EnO1xuICAgIGlmIChzY29yZSA+PSA4MCkgcmV0dXJuICdCJztcbiAgICBpZiAoc2NvcmUgPj0gNzApIHJldHVybiAnQyc7XG4gICAgaWYgKHNjb3JlID49IDYwKSByZXR1cm4gJ0QnO1xuICAgIHJldHVybiAnRic7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlU3ViamVjdENvbW1lbnRzKFxuICAgIHN1YmplY3Q6IFN1YmplY3RSZXBvcnRDYXJkLFxuICAgIHN0dWRlbnQ6IFN0dWRlbnRXaXRoUmVsYXRpb25zLFxuICAgIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgR8OpbsOpcmV6IGRlcyBjb21tZW50YWlyZXMgZCdlbnNlaWduYW50IHBvdXIgJHtzdHVkZW50LmZpcnN0TmFtZX0gZW4gJHtzdWJqZWN0Lm5hbWV9IGF2ZWMgdW5lIG5vdGUgZGUgJHtzdWJqZWN0LmdyYWRlfS4gU295ZXogc3DDqWNpZmlxdWUgZXQgZW5jb3VyYWdlYW50LmBcbiAgICAgICAgOiBgR2VuZXJhdGUgdGVhY2hlciBjb21tZW50cyBmb3IgJHtzdHVkZW50LmZpcnN0TmFtZX0gaW4gJHtzdWJqZWN0Lm5hbWV9IHdpdGggYSBncmFkZSBvZiAke3N1YmplY3QuZ3JhZGV9LiBCZSBzcGVjaWZpYyBhbmQgZW5jb3VyYWdpbmcuYDtcblxuICAgIHJldHVybiBnZW5lcmF0ZUNvbnRlbnQoXG4gICAgICBwcm9tcHQsXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG91dGNvbWVzOiBzdWJqZWN0Lm91dGNvbWVzLmxlbmd0aCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUmVwb3J0Q2FyZENvbW1lbnRzKFxuICAgIHN0dWRlbnQ6IFN0dWRlbnRXaXRoUmVsYXRpb25zLFxuICAgIHJlcG9ydENhcmREYXRhOiBTdWJqZWN0UmVwb3J0Q2FyZFtdLFxuICAgIGxhbmd1YWdlOiAnZW4nIHwgJ2ZyJyxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBvdmVyYWxsR3JhZGUgPVxuICAgICAgcmVwb3J0Q2FyZERhdGEucmVkdWNlKChzdW0sIHMpID0+IHtcbiAgICAgICAgY29uc3QgZ3JhZGVWYWx1ZSA9IHsgQTogNCwgQjogMywgQzogMiwgRDogMSwgRjogMCB9W3MuZ3JhZGVdIHx8IDA7XG4gICAgICAgIHJldHVybiBzdW0gKyBncmFkZVZhbHVlO1xuICAgICAgfSwgMCkgLyByZXBvcnRDYXJkRGF0YS5sZW5ndGg7XG5cbiAgICBjb25zdCBwcm9tcHQgPVxuICAgICAgbGFuZ3VhZ2UgPT09ICdmcidcbiAgICAgICAgPyBgR8OpbsOpcmV6IGRlcyBjb21tZW50YWlyZXMgZ8OpbsOpcmF1eCBkZSBidWxsZXRpbiBwb3VyICR7c3R1ZGVudC5maXJzdE5hbWV9ICR7c3R1ZGVudC5sYXN0TmFtZX0gYXZlYyB1bmUgcGVyZm9ybWFuY2UgZ2xvYmFsZSBkZSAke292ZXJhbGxHcmFkZS50b0ZpeGVkKDEpfS80LjAuYFxuICAgICAgICA6IGBHZW5lcmF0ZSBvdmVyYWxsIHJlcG9ydCBjYXJkIGNvbW1lbnRzIGZvciAke3N0dWRlbnQuZmlyc3ROYW1lfSAke3N0dWRlbnQubGFzdE5hbWV9IHdpdGggYW4gb3ZlcmFsbCBwZXJmb3JtYW5jZSBvZiAke292ZXJhbGxHcmFkZS50b0ZpeGVkKDEpfS80LjAuYDtcblxuICAgIHJldHVybiBnZW5lcmF0ZUNvbnRlbnQoXG4gICAgICBwcm9tcHQsXG4gICAgICBKU09OLnN0cmluZ2lmeShyZXBvcnRDYXJkRGF0YS5tYXAoKHMpID0+ICh7IHN1YmplY3Q6IHMubmFtZSwgZ3JhZGU6IHMuZ3JhZGUgfSkpKSxcbiAgICApO1xuICB9XG5cbiAgLy8gQ3VycmljdWx1bSBhbmQgUGxhbm5pbmcgUmVwb3J0IE1ldGhvZHNcbiAgYXN5bmMgZ2VuZXJhdGVDdXJyaWN1bHVtQ292ZXJhZ2VSZXBvcnQodXNlcklkOiBudW1iZXIpOiBQcm9taXNlPEN1cnJpY3VsdW1Db3ZlcmFnZVJlcG9ydD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgYWxsIGN1cnJpY3VsdW0gZXhwZWN0YXRpb25zIC0gd2UnbGwgZmlsdGVyIGJ5IGNvdmVyZWQvdW5jb3ZlcmVkIGxhdGVyXG4gICAgICBjb25zdCBleHBlY3RhdGlvbnMgPSBhd2FpdCB0aGlzLnByaXNtYS5jdXJyaWN1bHVtRXhwZWN0YXRpb24uZmluZE1hbnkoKTtcblxuICAgICAgLy8gR2V0IGFsbCBwbGFucyB3aXRoIGV4cGVjdGF0aW9uc1xuICAgICAgY29uc3QgbG9uZ1JhbmdlUGxhbnMgPSBhd2FpdCB0aGlzLnByaXNtYS5sb25nUmFuZ2VQbGFuLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgICAgIGluY2x1ZGU6IHsgZXhwZWN0YXRpb25zOiB0cnVlIH0sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdW5pdFBsYW5zID0gYXdhaXQgdGhpcy5wcmlzbWEudW5pdFBsYW4uZmluZE1hbnkoe1xuICAgICAgICB3aGVyZTogeyB1c2VySWQgfSxcbiAgICAgICAgaW5jbHVkZTogeyBleHBlY3RhdGlvbnM6IHRydWUgfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBsZXNzb25QbGFucyA9IGF3YWl0IHRoaXMucHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgICAgIGluY2x1ZGU6IHsgZXhwZWN0YXRpb25zOiB0cnVlIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQ29sbGVjdCBhbGwgY292ZXJlZCBleHBlY3RhdGlvbiBJRHNcbiAgICAgIGNvbnN0IGNvdmVyZWRFeHBlY3RhdGlvbklkcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gICAgICBsb25nUmFuZ2VQbGFucy5mb3JFYWNoKChwbGFuKSA9PiB7XG4gICAgICAgIHBsYW4uZXhwZWN0YXRpb25zLmZvckVhY2goKGV4cCkgPT4gY292ZXJlZEV4cGVjdGF0aW9uSWRzLmFkZChleHAuZXhwZWN0YXRpb25JZCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHVuaXRQbGFucy5mb3JFYWNoKChwbGFuKSA9PiB7XG4gICAgICAgIHBsYW4uZXhwZWN0YXRpb25zLmZvckVhY2goKGV4cCkgPT4gY292ZXJlZEV4cGVjdGF0aW9uSWRzLmFkZChleHAuZXhwZWN0YXRpb25JZCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGxlc3NvblBsYW5zLmZvckVhY2goKHBsYW4pID0+IHtcbiAgICAgICAgcGxhbi5leHBlY3RhdGlvbnMuZm9yRWFjaCgoZXhwKSA9PiBjb3ZlcmVkRXhwZWN0YXRpb25JZHMuYWRkKGV4cC5leHBlY3RhdGlvbklkKSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGNvdmVyYWdlXG4gICAgICBjb25zdCB0b3RhbEV4cGVjdGF0aW9ucyA9IGV4cGVjdGF0aW9ucy5sZW5ndGg7XG4gICAgICBjb25zdCBjb3ZlcmVkRXhwZWN0YXRpb25zID0gY292ZXJlZEV4cGVjdGF0aW9uSWRzLnNpemU7XG4gICAgICBjb25zdCBjb3ZlcmFnZVBlcmNlbnRhZ2UgPVxuICAgICAgICB0b3RhbEV4cGVjdGF0aW9ucyA+IDAgPyBNYXRoLnJvdW5kKChjb3ZlcmVkRXhwZWN0YXRpb25zIC8gdG90YWxFeHBlY3RhdGlvbnMpICogMTAwKSA6IDA7XG5cbiAgICAgIC8vIEZpbmQgdW5jb3ZlcmVkIGV4cGVjdGF0aW9uc1xuICAgICAgY29uc3QgdW5jb3ZlcmVkRXhwZWN0YXRpb25zID0gZXhwZWN0YXRpb25zXG4gICAgICAgIC5maWx0ZXIoKGV4cCkgPT4gIWNvdmVyZWRFeHBlY3RhdGlvbklkcy5oYXMoZXhwLmlkKSlcbiAgICAgICAgLm1hcCgoZXhwKSA9PiAoe1xuICAgICAgICAgIGlkOiBleHAuaWQsXG4gICAgICAgICAgY29kZTogZXhwLmNvZGUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGV4cC5kZXNjcmlwdGlvbixcbiAgICAgICAgICBzdHJhbmQ6IGV4cC5zdHJhbmQsXG4gICAgICAgIH0pKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGNvdmVyYWdlIGJ5IHN0cmFuZFxuICAgICAgY29uc3QgY292ZXJhZ2VCeVN0cmFuZDogUmVjb3JkPFxuICAgICAgICBzdHJpbmcsXG4gICAgICAgIHsgdG90YWw6IG51bWJlcjsgY292ZXJlZDogbnVtYmVyOyBwZXJjZW50YWdlOiBudW1iZXIgfVxuICAgICAgPiA9IHt9O1xuXG4gICAgICBleHBlY3RhdGlvbnMuZm9yRWFjaCgoZXhwKSA9PiB7XG4gICAgICAgIGlmICghY292ZXJhZ2VCeVN0cmFuZFtleHAuc3RyYW5kXSkge1xuICAgICAgICAgIGNvdmVyYWdlQnlTdHJhbmRbZXhwLnN0cmFuZF0gPSB7IHRvdGFsOiAwLCBjb3ZlcmVkOiAwLCBwZXJjZW50YWdlOiAwIH07XG4gICAgICAgIH1cbiAgICAgICAgY292ZXJhZ2VCeVN0cmFuZFtleHAuc3RyYW5kXS50b3RhbCsrO1xuICAgICAgICBpZiAoY292ZXJlZEV4cGVjdGF0aW9uSWRzLmhhcyhleHAuaWQpKSB7XG4gICAgICAgICAgY292ZXJhZ2VCeVN0cmFuZFtleHAuc3RyYW5kXS5jb3ZlcmVkKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudGFnZXMgZm9yIGVhY2ggc3RyYW5kXG4gICAgICBPYmplY3Qua2V5cyhjb3ZlcmFnZUJ5U3RyYW5kKS5mb3JFYWNoKChzdHJhbmQpID0+IHtcbiAgICAgICAgY29uc3Qgc3RyYW5kRGF0YSA9IGNvdmVyYWdlQnlTdHJhbmRbc3RyYW5kXTtcbiAgICAgICAgc3RyYW5kRGF0YS5wZXJjZW50YWdlID1cbiAgICAgICAgICBzdHJhbmREYXRhLnRvdGFsID4gMCA/IE1hdGgucm91bmQoKHN0cmFuZERhdGEuY292ZXJlZCAvIHN0cmFuZERhdGEudG90YWwpICogMTAwKSA6IDA7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWxFeHBlY3RhdGlvbnMsXG4gICAgICAgIGNvdmVyZWRFeHBlY3RhdGlvbnMsXG4gICAgICAgIGNvdmVyYWdlUGVyY2VudGFnZSxcbiAgICAgICAgdW5jb3ZlcmVkRXhwZWN0YXRpb25zLFxuICAgICAgICBjb3ZlcmFnZUJ5U3RyYW5kLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgY3VycmljdWx1bSBjb3ZlcmFnZSByZXBvcnQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2VuZXJhdGVQbGFubmluZ1Byb2dyZXNzUmVwb3J0KHVzZXJJZDogbnVtYmVyKTogUHJvbWlzZTxQbGFubmluZ1Byb2dyZXNzUmVwb3J0PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBhbGwgcGxhbm5pbmcgZGF0YSBmb3IgdGhlIHVzZXJcbiAgICAgIGNvbnN0IGxvbmdSYW5nZVBsYW5zID0gYXdhaXQgdGhpcy5wcmlzbWEubG9uZ1JhbmdlUGxhbi5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IHVzZXJJZCB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHVuaXRQbGFucyA9IGF3YWl0IHRoaXMucHJpc21hLnVuaXRQbGFuLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbGVzc29uUGxhbnMgPSBhd2FpdCB0aGlzLnByaXNtYS5lVEZPTGVzc29uUGxhbi5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IHVzZXJJZCB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGRheWJvb2tFbnRyaWVzID0gYXdhaXQgdGhpcy5wcmlzbWEuZGF5Ym9va0VudHJ5LmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGNvbXBsZXRpb24gcmF0ZXNcbiAgICAgIGNvbnN0IGNhbGN1bGF0ZUNvbXBsZXRpb25SYXRlID0gPFQ+KHBsYW5zOiBUW10sIGlzQ29tcGxldGU6IChwbGFuOiBUKSA9PiBib29sZWFuKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvdGFsID0gcGxhbnMubGVuZ3RoO1xuICAgICAgICBjb25zdCBjb21wbGV0ZWQgPSBwbGFucy5maWx0ZXIoaXNDb21wbGV0ZSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBjb21wbGV0aW9uUmF0ZSA9IHRvdGFsID4gMCA/IE1hdGgucm91bmQoKGNvbXBsZXRlZCAvIHRvdGFsKSAqIDEwMCkgOiAwO1xuICAgICAgICByZXR1cm4geyB0b3RhbCwgY29tcGxldGVkLCBjb21wbGV0aW9uUmF0ZSB9O1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9uZ1JhbmdlUGxhbnM6IGNhbGN1bGF0ZUNvbXBsZXRpb25SYXRlKFxuICAgICAgICAgIGxvbmdSYW5nZVBsYW5zLFxuICAgICAgICAgIChwbGFuKSA9PiBwbGFuLmdvYWxzICE9PSBudWxsICYmIHBsYW4uZ29hbHMgIT09ICcnLFxuICAgICAgICApLFxuICAgICAgICB1bml0UGxhbnM6IGNhbGN1bGF0ZUNvbXBsZXRpb25SYXRlKFxuICAgICAgICAgIHVuaXRQbGFucyxcbiAgICAgICAgICAocGxhbikgPT4gcGxhbi5iaWdJZGVhcyAhPT0gbnVsbCAmJiBwbGFuLmJpZ0lkZWFzICE9PSAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgbGVzc29uUGxhbnM6IGNhbGN1bGF0ZUNvbXBsZXRpb25SYXRlKFxuICAgICAgICAgIGxlc3NvblBsYW5zLFxuICAgICAgICAgIChwbGFuKSA9PiBwbGFuLmxlYXJuaW5nR29hbHMgIT09IG51bGwgJiYgcGxhbi5sZWFybmluZ0dvYWxzICE9PSAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgZGF5Ym9va0VudHJpZXM6IGNhbGN1bGF0ZUNvbXBsZXRpb25SYXRlKFxuICAgICAgICAgIGRheWJvb2tFbnRyaWVzLFxuICAgICAgICAgIChlbnRyeSkgPT4gZW50cnkud2hhdFdvcmtlZCAhPT0gbnVsbCAmJiBlbnRyeS53aGF0V29ya2VkICE9PSAnJyxcbiAgICAgICAgKSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHBsYW5uaW5nIHByb2dyZXNzIHJlcG9ydDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZUxlc3NvblBsYW5SZXBvcnQobGVzc29uSWQ6IHN0cmluZyk6IFByb21pc2U8TGVzc29uUGxhblJlcG9ydD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBsZXNzb24gPSBhd2FpdCB0aGlzLnByaXNtYS5lVEZPTGVzc29uUGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IGxlc3NvbklkIH0sXG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICB1bml0UGxhbjoge1xuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICBsb25nUmFuZ2VQbGFuOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4cGVjdGF0aW9uczoge1xuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICBleHBlY3RhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXlib29rRW50cnk6IHRydWUsXG4gICAgICAgICAgcmVzb3VyY2VzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghbGVzc29uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTGVzc29uIHBsYW4gbm90IGZvdW5kJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlc3Nvbjoge1xuICAgICAgICAgIGlkOiBsZXNzb24uaWQsXG4gICAgICAgICAgdGl0bGU6IGxlc3Nvbi50aXRsZSxcbiAgICAgICAgICBkYXRlOiBsZXNzb24uZGF0ZSxcbiAgICAgICAgICBkdXJhdGlvbjogbGVzc29uLmR1cmF0aW9uLFxuICAgICAgICAgIG1pbmRzT246IGxlc3Nvbi5taW5kc09uIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBhY3Rpb246IGxlc3Nvbi5hY3Rpb24gfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGNvbnNvbGlkYXRpb246IGxlc3Nvbi5jb25zb2xpZGF0aW9uIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBsZWFybmluZ0dvYWxzOiBsZXNzb24ubGVhcm5pbmdHb2FscyB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgbWF0ZXJpYWxzOiBBcnJheS5pc0FycmF5KGxlc3Nvbi5tYXRlcmlhbHMpID8gKGxlc3Nvbi5tYXRlcmlhbHMgYXMgc3RyaW5nW10pIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzU3ViRnJpZW5kbHk6IGxlc3Nvbi5pc1N1YkZyaWVuZGx5LFxuICAgICAgICB9LFxuICAgICAgICBoaWVyYXJjaHk6IHtcbiAgICAgICAgICBsb25nUmFuZ2VQbGFuOiB7XG4gICAgICAgICAgICBpZDogbGVzc29uLnVuaXRQbGFuLmxvbmdSYW5nZVBsYW4uaWQsXG4gICAgICAgICAgICB0aXRsZTogbGVzc29uLnVuaXRQbGFuLmxvbmdSYW5nZVBsYW4udGl0bGUsXG4gICAgICAgICAgICBzdWJqZWN0OiBsZXNzb24udW5pdFBsYW4ubG9uZ1JhbmdlUGxhbi5zdWJqZWN0IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGdyYWRlOiBsZXNzb24udW5pdFBsYW4ubG9uZ1JhbmdlUGxhbi5ncmFkZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1bml0UGxhbjoge1xuICAgICAgICAgICAgaWQ6IGxlc3Nvbi51bml0UGxhbi5pZCxcbiAgICAgICAgICAgIHRpdGxlOiBsZXNzb24udW5pdFBsYW4udGl0bGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgY3VycmljdWx1bUFsaWdubWVudDogbGVzc29uLmV4cGVjdGF0aW9ucy5tYXAoKGV4cCkgPT4gKHtcbiAgICAgICAgICBpZDogZXhwLmV4cGVjdGF0aW9uLmlkLFxuICAgICAgICAgIGNvZGU6IGV4cC5leHBlY3RhdGlvbi5jb2RlLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBleHAuZXhwZWN0YXRpb24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgc3RyYW5kOiBleHAuZXhwZWN0YXRpb24uc3RyYW5kLFxuICAgICAgICB9KSksXG4gICAgICAgIHJlZmxlY3Rpb246IGxlc3Nvbi5kYXlib29rRW50cnlcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgd2hhdFdvcmtlZDogbGVzc29uLmRheWJvb2tFbnRyeS53aGF0V29ya2VkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgb3ZlcmFsbFJhdGluZzogbGVzc29uLmRheWJvb2tFbnRyeS5vdmVyYWxsUmF0aW5nIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgd291bGRSZXVzZUxlc3NvbjogbGVzc29uLmRheWJvb2tFbnRyeS53b3VsZFJldXNlTGVzc29uIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVzb3VyY2VzOiBsZXNzb24ucmVzb3VyY2VzLm1hcCgocmVzb3VyY2UpID0+ICh7XG4gICAgICAgICAgaWQ6IHJlc291cmNlLmlkLFxuICAgICAgICAgIHRpdGxlOiByZXNvdXJjZS50aXRsZSxcbiAgICAgICAgICB0eXBlOiByZXNvdXJjZS50eXBlLFxuICAgICAgICAgIHVybDogcmVzb3VyY2UudXJsIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgfSkpLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgbGVzc29uIHBsYW4gcmVwb3J0OicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlU3Vic3RpdHV0ZVBsYW5SZXBvcnQobGVzc29uSWQ6IHN0cmluZyk6IFByb21pc2U8U3Vic3RpdHV0ZVBsYW5SZXBvcnQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbGVzc29uID0gYXdhaXQgdGhpcy5wcmlzbWEuZVRGT0xlc3NvblBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiBsZXNzb25JZCB9LFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgdW5pdFBsYW46IHtcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgbG9uZ1JhbmdlUGxhbjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNvdXJjZXM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFsZXNzb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMZXNzb24gcGxhbiBub3QgZm91bmQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFsZXNzb24uaXNTdWJGcmllbmRseSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xlc3NvbiBwbGFuIGlzIG5vdCBtYXJrZWQgYXMgc3Vic3RpdHV0ZS1mcmllbmRseScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogbGVzc29uLnRpdGxlLFxuICAgICAgICBiYXNpY0luZm86IHtcbiAgICAgICAgICBzdWJqZWN0OiBsZXNzb24udW5pdFBsYW4ubG9uZ1JhbmdlUGxhbi5zdWJqZWN0IHx8ICdOb3Qgc3BlY2lmaWVkJyxcbiAgICAgICAgICBncmFkZTogbGVzc29uLnVuaXRQbGFuLmxvbmdSYW5nZVBsYW4uZ3JhZGUgfHwgMCxcbiAgICAgICAgICBkdXJhdGlvbjogbGVzc29uLmR1cmF0aW9uLFxuICAgICAgICAgIGRhdGU6IGxlc3Nvbi5kYXRlLFxuICAgICAgICB9LFxuICAgICAgICBtYXRlcmlhbHM6IEFycmF5LmlzQXJyYXkobGVzc29uLm1hdGVyaWFscykgPyAobGVzc29uLm1hdGVyaWFscyBhcyBzdHJpbmdbXSkgOiBbXSxcbiAgICAgICAgYWN0aXZpdGllczoge1xuICAgICAgICAgIG9wZW5pbmc6IGxlc3Nvbi5taW5kc09uIHx8ICcnLFxuICAgICAgICAgIG1haW46IGxlc3Nvbi5hY3Rpb24gfHwgJycsXG4gICAgICAgICAgY2xvc2luZzogbGVzc29uLmNvbnNvbGlkYXRpb24gfHwgJycsXG4gICAgICAgIH0sXG4gICAgICAgIHNwZWNpYWxOb3RlczogbGVzc29uLnN1Yk5vdGVzIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcmVzb3VyY2VzOiBsZXNzb24ucmVzb3VyY2VzLm1hcCgocmVzb3VyY2UpID0+ICh7XG4gICAgICAgICAgaWQ6IHJlc291cmNlLmlkLFxuICAgICAgICAgIHRpdGxlOiByZXNvdXJjZS50aXRsZSxcbiAgICAgICAgICB0eXBlOiByZXNvdXJjZS50eXBlLFxuICAgICAgICAgIGNvbnRlbnQ6IHJlc291cmNlLmNvbnRlbnQgfHwgdW5kZWZpbmVkLFxuICAgICAgICB9KSksXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBzdWJzdGl0dXRlIHBsYW4gcmVwb3J0OicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlVW5pdE92ZXJ2aWV3UmVwb3J0KHVuaXRJZDogc3RyaW5nKTogUHJvbWlzZTxVbml0T3ZlcnZpZXdSZXBvcnQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdW5pdCA9IGF3YWl0IHRoaXMucHJpc21hLnVuaXRQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogdW5pdElkIH0sXG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICBsb25nUmFuZ2VQbGFuOiB0cnVlLFxuICAgICAgICAgIGV4cGVjdGF0aW9uczoge1xuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICBleHBlY3RhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsZXNzb25QbGFuczogdHJ1ZSxcbiAgICAgICAgICByZXNvdXJjZXM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCF1bml0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5pdCBwbGFuIG5vdCBmb3VuZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0b3RhbER1cmF0aW9uID0gdW5pdC5sZXNzb25QbGFucy5yZWR1Y2UoKHN1bSwgbGVzc29uKSA9PiBzdW0gKyBsZXNzb24uZHVyYXRpb24sIDApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bml0OiB7XG4gICAgICAgICAgaWQ6IHVuaXQuaWQsXG4gICAgICAgICAgdGl0bGU6IHVuaXQudGl0bGUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHVuaXQuZGVzY3JpcHRpb24gfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGJpZ0lkZWFzOiB1bml0LmJpZ0lkZWFzIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydERhdGU6IHVuaXQuc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IHVuaXQuZW5kRGF0ZSxcbiAgICAgICAgICBlc3RpbWF0ZWRIb3VyczogdW5pdC5lc3RpbWF0ZWRIb3VycyxcbiAgICAgICAgfSxcbiAgICAgICAgaGllcmFyY2h5OiB7XG4gICAgICAgICAgbG9uZ1JhbmdlUGxhbjoge1xuICAgICAgICAgICAgaWQ6IHVuaXQubG9uZ1JhbmdlUGxhbi5pZCxcbiAgICAgICAgICAgIHRpdGxlOiB1bml0LmxvbmdSYW5nZVBsYW4udGl0bGUsXG4gICAgICAgICAgICBzdWJqZWN0OiB1bml0LmxvbmdSYW5nZVBsYW4uc3ViamVjdCB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBncmFkZTogdW5pdC5sb25nUmFuZ2VQbGFuLmdyYWRlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBjdXJyaWN1bHVtQWxpZ25tZW50OiB1bml0LmV4cGVjdGF0aW9ucy5tYXAoKGV4cCkgPT4gKHtcbiAgICAgICAgICBpZDogZXhwLmV4cGVjdGF0aW9uLmlkLFxuICAgICAgICAgIGNvZGU6IGV4cC5leHBlY3RhdGlvbi5jb2RlLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBleHAuZXhwZWN0YXRpb24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgc3RyYW5kOiBleHAuZXhwZWN0YXRpb24uc3RyYW5kLFxuICAgICAgICB9KSksXG4gICAgICAgIGxlc3NvblN1bW1hcnk6IHtcbiAgICAgICAgICB0b3RhbExlc3NvbnM6IHVuaXQubGVzc29uUGxhbnMubGVuZ3RoLFxuICAgICAgICAgIHRvdGFsRHVyYXRpb24sXG4gICAgICAgICAgbGVzc29uczogdW5pdC5sZXNzb25QbGFucy5tYXAoKGxlc3NvbikgPT4gKHtcbiAgICAgICAgICAgIGlkOiBsZXNzb24uaWQsXG4gICAgICAgICAgICB0aXRsZTogbGVzc29uLnRpdGxlLFxuICAgICAgICAgICAgZGF0ZTogbGVzc29uLmRhdGUsXG4gICAgICAgICAgICBkdXJhdGlvbjogbGVzc29uLmR1cmF0aW9uLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VzOiB1bml0LnJlc291cmNlcy5tYXAoKHJlc291cmNlKSA9PiAoe1xuICAgICAgICAgIGlkOiByZXNvdXJjZS5pZCxcbiAgICAgICAgICB0aXRsZTogcmVzb3VyY2UudGl0bGUsXG4gICAgICAgICAgdHlwZTogcmVzb3VyY2UudHlwZSxcbiAgICAgICAgfSkpLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgdW5pdCBvdmVydmlldyByZXBvcnQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZXBvcnRHZW5lcmF0b3JTZXJ2aWNlID0gbmV3IFJlcG9ydEdlbmVyYXRvclNlcnZpY2UoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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