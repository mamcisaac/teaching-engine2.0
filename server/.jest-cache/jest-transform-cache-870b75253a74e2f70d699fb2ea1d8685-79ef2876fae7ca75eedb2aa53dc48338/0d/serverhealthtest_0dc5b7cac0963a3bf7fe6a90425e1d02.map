{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/server-health.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/server-health.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll } from '@jest/globals';\nimport request from 'supertest';\nimport { app } from '../../src/index';\nimport { getTestPrismaClient } from '../jest.setup';\nimport jwt from 'jsonwebtoken';\n\ndescribe('Server Health Check', () => {\n  beforeAll(() => {\n    // Initialize test database client\n    getTestPrismaClient();\n  });\n\n  it('should respond to API health check endpoint', async () => {\n    const response = await request(app).get('/api/health');\n    \n    expect(response.status).toBe(200);\n    expect(response.body).toMatchObject({ \n      status: 'ok',\n      healthy: true\n    });\n    // The response includes additional performance details\n    expect(response.body.details).toBeDefined();\n  });\n\n  it('should handle 404 for non-existent endpoints', async () => {\n    const response = await request(app).get('/api/non-existent-endpoint');\n    \n    // API routes require authentication, so unmatched routes return 401\n    expect(response.status).toBe(401);\n  });\n\n  it('should require authentication for protected endpoints', async () => {\n    const response = await request(app).get('/api/activities');\n    \n    expect(response.status).toBe(401);\n    // The response body might be empty or have error message\n    expect(response.body).toBeDefined();\n  });\n\n  it('should accept authenticated requests', async () => {\n    // Create a valid user in the database first\n    const prisma = getTestPrismaClient();\n    const user = await prisma.user.create({\n      data: {\n        email: 'test@example.com',\n        name: 'Test User',\n        password: 'dummy',\n        role: 'teacher'\n      }\n    });\n    \n    const token = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email,\n        iat: Math.floor(Date.now() / 1000)\n      }, \n      process.env.JWT_SECRET || 'test-secret',\n      { algorithm: 'HS256' }\n    );\n    \n    const response = await request(app)\n      .get('/api/students')\n      .set('Authorization', `Bearer ${token}`);\n    \n    expect(response.status).toBe(200);\n    expect(Array.isArray(response.body)).toBe(true);\n  });\n});"],"version":3}