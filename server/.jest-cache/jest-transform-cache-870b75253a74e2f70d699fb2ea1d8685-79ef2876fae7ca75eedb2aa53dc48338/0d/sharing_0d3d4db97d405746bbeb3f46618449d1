64c9ac89a5a4facc7e7ddf2c7f6751b5
/**
 * Plan Sharing Routes
 * Handles sharing of lesson plans, units, and other planning resources
 */
import { Router } from 'express';
import { z } from 'zod';
import { authenticate } from '@/middleware/authenticate';
import { asyncHandler } from '@/middleware/errorHandler';
import logger from '@/logger';
import { addDays } from 'date-fns';
// Validation schemas
const sharePlanSchema = z.object({
    planType: z.enum(['long-range', 'unit', 'lesson', 'daybook']),
    planId: z.string(),
    shareWith: z.union([
        z.object({
            type: z.literal('user'),
            email: z.string().email(),
        }),
        z.object({
            type: z.literal('team'),
            teamId: z.string(),
        }),
        z.object({
            type: z.literal('link'),
            expiresInDays: z.number().int().min(1).max(365).optional(),
        }),
    ]),
    permissions: z
        .object({
        canEdit: z.boolean().optional(),
        canCopy: z.boolean().optional(),
        canComment: z.boolean().optional(),
        canReshare: z.boolean().optional(),
    })
        .optional(),
    message: z.string().optional(),
});
const updateSharePermissionsSchema = z.object({
    canEdit: z.boolean().optional(),
    canCopy: z.boolean().optional(),
    canComment: z.boolean().optional(),
    canReshare: z.boolean().optional(),
});
export function sharingRoutes(prisma) {
    const router = Router();
    // Apply authentication to all routes
    router.use(authenticate);
    // Helper function to check plan ownership
    async function checkPlanOwnership(planType, planId, userId) {
        switch (planType) {
            case 'long-range': {
                const lrPlan = await prisma.longRangePlan.findUnique({
                    where: { id: planId },
                });
                return lrPlan?.userId === userId;
            }
            case 'unit': {
                const unitPlan = await prisma.unitPlan.findUnique({
                    where: { id: planId },
                });
                return unitPlan?.userId === userId;
            }
            case 'lesson': {
                const lessonPlan = await prisma.eTFOLessonPlan.findUnique({
                    where: { id: planId },
                });
                return lessonPlan?.userId === userId;
            }
            case 'daybook': {
                const daybookEntry = await prisma.daybookEntry.findUnique({
                    where: { id: planId },
                });
                return daybookEntry?.userId === userId;
            }
            default:
                return false;
        }
    }
    // Get all shared plans (both sent and received)
    router.get('/plans', asyncHandler(async (req, res) => {
        const userId = req.user.id;
        const { type, direction } = req.query;
        const whereClause = {};
        if (direction === 'sent') {
            whereClause.sharedById = userId;
        }
        else if (direction === 'received') {
            whereClause.sharedWithId = userId;
        }
        else {
            whereClause.OR = [{ sharedById: userId }, { sharedWithId: userId }];
        }
        if (type) {
            whereClause.planType = type;
        }
        const sharedPlans = await prisma.sharedPlan.findMany({
            where: whereClause,
            include: {
                sharedBy: {
                    select: { id: true, name: true, email: true },
                },
                sharedWith: {
                    select: { id: true, name: true, email: true },
                },
            },
            orderBy: { sharedAt: 'desc' },
        });
        // Fetch plan details for each shared plan
        const plansWithDetails = await Promise.all(sharedPlans.map(async (share) => {
            let planDetails = null;
            switch (share.planType) {
                case 'long-range':
                    planDetails = await prisma.longRangePlan.findUnique({
                        where: { id: share.planId },
                        select: { id: true, title: true, academicYear: true, grade: true, subject: true },
                    });
                    break;
                case 'unit':
                    planDetails = await prisma.unitPlan.findUnique({
                        where: { id: share.planId },
                        select: { id: true, title: true, startDate: true, endDate: true },
                    });
                    break;
                case 'lesson':
                    planDetails = await prisma.eTFOLessonPlan.findUnique({
                        where: { id: share.planId },
                        select: { id: true, title: true, date: true, grade: true, subject: true },
                    });
                    break;
                case 'daybook':
                    planDetails = await prisma.daybookEntry.findUnique({
                        where: { id: share.planId },
                        select: { id: true, date: true },
                    });
                    break;
            }
            return {
                ...share,
                planDetails,
            };
        }));
        res.json(plansWithDetails);
    }));
    // Share a plan
    router.post('/plans', asyncHandler(async (req, res) => {
        const userId = req.user.id;
        const { planType, planId, shareWith, permissions = {}, message, } = sharePlanSchema.parse(req.body);
        // Check if user owns the plan
        const isOwner = await checkPlanOwnership(planType, planId, userId);
        if (!isOwner) {
            return res.status(403).json({ error: 'You do not have permission to share this plan' });
        }
        let sharedPlan;
        if (shareWith.type === 'user') {
            // Share with specific user
            const targetUser = await prisma.user.findUnique({
                where: { email: shareWith.email },
            });
            if (!targetUser) {
                return res.status(404).json({ error: 'User not found' });
            }
            if (targetUser.id === userId) {
                return res.status(400).json({ error: 'Cannot share with yourself' });
            }
            // Check if already shared
            const existingShare = await prisma.sharedPlan.findFirst({
                where: {
                    planType,
                    planId,
                    sharedById: userId,
                    sharedWithId: targetUser.id,
                },
            });
            if (existingShare) {
                return res.status(409).json({ error: 'Plan is already shared with this user' });
            }
            sharedPlan = await prisma.sharedPlan.create({
                data: {
                    planType,
                    planId,
                    sharedById: userId,
                    sharedWithId: targetUser.id,
                    ...permissions,
                    message,
                },
                include: {
                    sharedBy: {
                        select: { id: true, name: true, email: true },
                    },
                    sharedWith: {
                        select: { id: true, name: true, email: true },
                    },
                },
            });
            // TODO: Send email notification
        }
        else if (shareWith.type === 'team') {
            // Share with team
            const team = await prisma.team.findUnique({
                where: { id: shareWith.teamId },
            });
            if (!team) {
                return res.status(404).json({ error: 'Team not found' });
            }
            // Check if user is a member of the team
            const isMember = await prisma.teamMember.findUnique({
                where: { teamId_userId: { teamId: shareWith.teamId, userId } },
            });
            if (!isMember) {
                return res
                    .status(403)
                    .json({ error: 'You must be a team member to share with the team' });
            }
            sharedPlan = await prisma.sharedPlan.create({
                data: {
                    planType,
                    planId,
                    sharedById: userId,
                    teamId: shareWith.teamId,
                    ...permissions,
                    message,
                },
                include: {
                    sharedBy: {
                        select: { id: true, name: true, email: true },
                    },
                },
            });
        }
        else {
            // Create public sharing link
            const expiresAt = shareWith.expiresInDays
                ? addDays(new Date(), shareWith.expiresInDays)
                : undefined;
            sharedPlan = await prisma.sharedPlan.create({
                data: {
                    planType,
                    planId,
                    sharedById: userId,
                    isPublicLink: true,
                    linkExpiresAt: expiresAt,
                    ...permissions,
                    message,
                },
                include: {
                    sharedBy: {
                        select: { id: true, name: true, email: true },
                    },
                },
            });
        }
        logger.info(`Plan shared: ${planType}/${planId} by user ${userId}`);
        res.status(201).json(sharedPlan);
    }));
    // Get shared plan by share code
    router.get('/plans/:shareCode', asyncHandler(async (req, res) => {
        const { shareCode } = req.params;
        const userId = req.user.id;
        const sharedPlan = await prisma.sharedPlan.findUnique({
            where: { shareCode },
            include: {
                sharedBy: {
                    select: { id: true, name: true, email: true },
                },
            },
        });
        if (!sharedPlan) {
            return res.status(404).json({ error: 'Shared plan not found' });
        }
        // Check access permissions
        const hasAccess = sharedPlan.isPublicLink ||
            sharedPlan.sharedById === userId ||
            sharedPlan.sharedWithId === userId;
        if (!hasAccess && sharedPlan.teamId) {
            // Check team membership
            const isMember = await prisma.teamMember.findFirst({
                where: { teamId: sharedPlan.teamId, userId },
            });
            if (!isMember) {
                return res.status(403).json({ error: 'Access denied' });
            }
        }
        else if (!hasAccess) {
            return res.status(403).json({ error: 'Access denied' });
        }
        // Check if link has expired
        if (sharedPlan.linkExpiresAt && new Date() > sharedPlan.linkExpiresAt) {
            return res.status(410).json({ error: 'Share link has expired' });
        }
        // Update view count
        await prisma.sharedPlan.update({
            where: { id: sharedPlan.id },
            data: {
                viewCount: { increment: 1 },
                lastViewedAt: new Date(),
            },
        });
        // Fetch plan details
        let planDetails = null;
        switch (sharedPlan.planType) {
            case 'long-range':
                planDetails = await prisma.longRangePlan.findUnique({
                    where: { id: sharedPlan.planId },
                    include: {
                        expectations: {
                            include: { expectation: true },
                        },
                        unitPlans: {
                            select: { id: true, title: true, startDate: true, endDate: true },
                        },
                    },
                });
                break;
            case 'unit':
                planDetails = await prisma.unitPlan.findUnique({
                    where: { id: sharedPlan.planId },
                    include: {
                        expectations: {
                            include: { expectation: true },
                        },
                        lessonPlans: {
                            select: { id: true, title: true, date: true },
                        },
                        resources: true,
                    },
                });
                break;
            case 'lesson':
                planDetails = await prisma.eTFOLessonPlan.findUnique({
                    where: { id: sharedPlan.planId },
                    include: {
                        expectations: {
                            include: { expectation: true },
                        },
                        resources: true,
                    },
                });
                break;
            case 'daybook':
                planDetails = await prisma.daybookEntry.findUnique({
                    where: { id: sharedPlan.planId },
                    include: {
                        expectations: {
                            include: { expectation: true },
                        },
                    },
                });
                break;
        }
        res.json({
            share: sharedPlan,
            plan: planDetails,
        });
    }));
    // Update share permissions
    router.patch('/plans/:shareId', asyncHandler(async (req, res) => {
        const { shareId } = req.params;
        const userId = req.user.id;
        const updates = updateSharePermissionsSchema.parse(req.body);
        const sharedPlan = await prisma.sharedPlan.findUnique({
            where: { id: shareId },
        });
        if (!sharedPlan) {
            return res.status(404).json({ error: 'Shared plan not found' });
        }
        // Only the sharer can update permissions
        if (sharedPlan.sharedById !== userId) {
            return res.status(403).json({ error: 'Only the plan owner can update share permissions' });
        }
        const updated = await prisma.sharedPlan.update({
            where: { id: shareId },
            data: updates,
            include: {
                sharedBy: {
                    select: { id: true, name: true, email: true },
                },
                sharedWith: {
                    select: { id: true, name: true, email: true },
                },
            },
        });
        res.json(updated);
    }));
    // Revoke share
    router.delete('/plans/:shareId', asyncHandler(async (req, res) => {
        const { shareId } = req.params;
        const userId = req.user.id;
        const sharedPlan = await prisma.sharedPlan.findUnique({
            where: { id: shareId },
        });
        if (!sharedPlan) {
            return res.status(404).json({ error: 'Shared plan not found' });
        }
        // Only the sharer can revoke
        if (sharedPlan.sharedById !== userId) {
            return res.status(403).json({ error: 'Only the plan owner can revoke sharing' });
        }
        await prisma.sharedPlan.delete({
            where: { id: shareId },
        });
        logger.info(`Share revoked: ${shareId} by user ${userId}`);
        res.status(204).send();
    }));
    // Copy shared plan
    router.post('/plans/:shareCode/copy', asyncHandler(async (req, res) => {
        const { shareCode } = req.params;
        const userId = req.user.id;
        const sharedPlan = await prisma.sharedPlan.findUnique({
            where: { shareCode },
        });
        if (!sharedPlan) {
            return res.status(404).json({ error: 'Shared plan not found' });
        }
        // Check if user has copy permission
        if (!sharedPlan.canCopy) {
            return res.status(403).json({ error: 'Copying this plan is not allowed' });
        }
        // Check access
        const hasAccess = sharedPlan.isPublicLink || sharedPlan.sharedWithId === userId;
        if (!hasAccess && sharedPlan.teamId) {
            const isMember = await prisma.teamMember.findFirst({
                where: { teamId: sharedPlan.teamId, userId },
            });
            if (!isMember) {
                return res.status(403).json({ error: 'Access denied' });
            }
        }
        else if (!hasAccess) {
            return res.status(403).json({ error: 'Access denied' });
        }
        // Copy the plan based on type
        let copiedPlan;
        switch (sharedPlan.planType) {
            case 'lesson': {
                const originalLesson = await prisma.eTFOLessonPlan.findUnique({
                    where: { id: sharedPlan.planId },
                    include: {
                        expectations: true,
                        resources: true,
                    },
                });
                if (!originalLesson) {
                    return res.status(404).json({ error: 'Original plan not found' });
                }
                // Get user's unit plans to select from
                const userUnitPlans = await prisma.unitPlan.findMany({
                    where: { userId },
                    select: { id: true },
                    take: 1,
                });
                if (userUnitPlans.length === 0) {
                    return res
                        .status(400)
                        .json({ error: 'You need at least one unit plan to copy lessons' });
                }
                copiedPlan = await prisma.eTFOLessonPlan.create({
                    data: {
                        userId,
                        title: `${originalLesson.title} (Copy)`,
                        unitPlanId: userUnitPlans[0].id, // TODO: Allow user to select unit
                        grade: originalLesson.grade,
                        subject: originalLesson.subject,
                        language: originalLesson.language,
                        date: new Date(),
                        duration: originalLesson.duration,
                        mindsOn: originalLesson.mindsOn,
                        action: originalLesson.action,
                        consolidation: originalLesson.consolidation,
                        learningGoals: originalLesson.learningGoals,
                        materials: originalLesson.materials,
                        grouping: originalLesson.grouping,
                        titleFr: originalLesson.titleFr,
                        mindsOnFr: originalLesson.mindsOnFr,
                        actionFr: originalLesson.actionFr,
                        consolidationFr: originalLesson.consolidationFr,
                        learningGoalsFr: originalLesson.learningGoalsFr,
                        accommodations: originalLesson.accommodations,
                        modifications: originalLesson.modifications,
                        extensions: originalLesson.extensions,
                        assessmentType: originalLesson.assessmentType,
                        assessmentNotes: originalLesson.assessmentNotes,
                        isSubFriendly: originalLesson.isSubFriendly,
                        subNotes: originalLesson.subNotes,
                        expectations: {
                            create: originalLesson.expectations.map((e) => ({
                                expectationId: e.expectationId,
                            })),
                        },
                    },
                });
                break;
            }
            // TODO: Implement copying for other plan types
            default:
                return res.status(400).json({ error: 'Copying this plan type is not yet supported' });
        }
        // Update copy count
        await prisma.sharedPlan.update({
            where: { id: sharedPlan.id },
            data: { copyCount: { increment: 1 } },
        });
        logger.info(`Plan copied: ${sharedPlan.planType}/${sharedPlan.planId} by user ${userId}`);
        res.status(201).json(copiedPlan);
    }));
    return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9yb3V0ZXMvc2hhcmluZy50cyIsIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWpDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDeEIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMvQixRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdELE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2xCLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDdkIsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUU7U0FDMUIsQ0FBQztRQUNGLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDdkIsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7U0FDbkIsQ0FBQztRQUNGLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDdkIsYUFBYSxFQUFFLENB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QU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsNkNBQTZDLEVBQUUsQ0FBQyxDQUFDO1FBQzFGLENBQUM7UUFFRCxvQkFBb0I7UUFDcEIsTUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUM3QixLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRTtZQUM1QixJQUFJLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsVUFBVSxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsTUFBTSxZQUFZLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDMUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9yb3V0ZXMvc2hhcmluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBsYW4gU2hhcmluZyBSb3V0ZXNcbiAqIEhhbmRsZXMgc2hhcmluZyBvZiBsZXNzb24gcGxhbnMsIHVuaXRzLCBhbmQgb3RoZXIgcGxhbm5pbmcgcmVzb3VyY2VzXG4gKi9cblxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAdGVhY2hpbmctZW5naW5lL2RhdGFiYXNlJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgYXV0aGVudGljYXRlIH0gZnJvbSAnQC9taWRkbGV3YXJlL2F1dGhlbnRpY2F0ZSc7XG5pbXBvcnQgeyBhc3luY0hhbmRsZXIgfSBmcm9tICdAL21pZGRsZXdhcmUvZXJyb3JIYW5kbGVyJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnQC9sb2dnZXInO1xuaW1wb3J0IHsgYWRkRGF5cyB9IGZyb20gJ2RhdGUtZm5zJztcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzXG5jb25zdCBzaGFyZVBsYW5TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHBsYW5UeXBlOiB6LmVudW0oWydsb25nLXJhbmdlJywgJ3VuaXQnLCAnbGVzc29uJywgJ2RheWJvb2snXSksXG4gIHBsYW5JZDogei5zdHJpbmcoKSxcbiAgc2hhcmVXaXRoOiB6LnVuaW9uKFtcbiAgICB6Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6LmxpdGVyYWwoJ3VzZXInKSxcbiAgICAgIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgdHlwZTogei5saXRlcmFsKCd0ZWFtJyksXG4gICAgICB0ZWFtSWQ6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgdHlwZTogei5saXRlcmFsKCdsaW5rJyksXG4gICAgICBleHBpcmVzSW5EYXlzOiB6Lm51bWJlcigpLmludCgpLm1pbigxKS5tYXgoMzY1KS5vcHRpb25hbCgpLFxuICAgIH0pLFxuICBdKSxcbiAgcGVybWlzc2lvbnM6IHpcbiAgICAub2JqZWN0KHtcbiAgICAgIGNhbkVkaXQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgICBjYW5Db3B5OiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgICAgY2FuQ29tbWVudDogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICAgIGNhblJlc2hhcmU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbiAgbWVzc2FnZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IHVwZGF0ZVNoYXJlUGVybWlzc2lvbnNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGNhbkVkaXQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIGNhbkNvcHk6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIGNhbkNvbW1lbnQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIGNhblJlc2hhcmU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNoYXJpbmdSb3V0ZXMocHJpc21hOiBQcmlzbWFDbGllbnQpOiBSb3V0ZXIge1xuICBjb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuICAvLyBBcHBseSBhdXRoZW50aWNhdGlvbiB0byBhbGwgcm91dGVzXG4gIHJvdXRlci51c2UoYXV0aGVudGljYXRlKTtcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgcGxhbiBvd25lcnNoaXBcbiAgYXN5bmMgZnVuY3Rpb24gY2hlY2tQbGFuT3duZXJzaGlwKFxuICAgIHBsYW5UeXBlOiBzdHJpbmcsXG4gICAgcGxhbklkOiBzdHJpbmcsXG4gICAgdXNlcklkOiBudW1iZXIsXG4gICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHN3aXRjaCAocGxhblR5cGUpIHtcbiAgICAgIGNhc2UgJ2xvbmctcmFuZ2UnOiB7XG4gICAgICAgIGNvbnN0IGxyUGxhbiA9IGF3YWl0IHByaXNtYS5sb25nUmFuZ2VQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBwbGFuSWQgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsclBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfVxuXG4gICAgICBjYXNlICd1bml0Jzoge1xuICAgICAgICBjb25zdCB1bml0UGxhbiA9IGF3YWl0IHByaXNtYS51bml0UGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogcGxhbklkIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdFBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdsZXNzb24nOiB7XG4gICAgICAgIGNvbnN0IGxlc3NvblBsYW4gPSBhd2FpdCBwcmlzbWEuZVRGT0xlc3NvblBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgaWQ6IHBsYW5JZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxlc3NvblBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdkYXlib29rJzoge1xuICAgICAgICBjb25zdCBkYXlib29rRW50cnkgPSBhd2FpdCBwcmlzbWEuZGF5Ym9va0VudHJ5LmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBwbGFuSWQgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXlib29rRW50cnk/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGFsbCBzaGFyZWQgcGxhbnMgKGJvdGggc2VudCBhbmQgcmVjZWl2ZWQpXG4gIHJvdXRlci5nZXQoXG4gICAgJy9wbGFucycsXG4gICAgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIhLmlkO1xuICAgICAgY29uc3QgeyB0eXBlLCBkaXJlY3Rpb24gfSA9IHJlcS5xdWVyeTtcblxuICAgICAgY29uc3Qgd2hlcmVDbGF1c2U6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdzZW50Jykge1xuICAgICAgICB3aGVyZUNsYXVzZS5zaGFyZWRCeUlkID0gdXNlcklkO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyZWNlaXZlZCcpIHtcbiAgICAgICAgd2hlcmVDbGF1c2Uuc2hhcmVkV2l0aElkID0gdXNlcklkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2hlcmVDbGF1c2UuT1IgPSBbeyBzaGFyZWRCeUlkOiB1c2VySWQgfSwgeyBzaGFyZWRXaXRoSWQ6IHVzZXJJZCB9XTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgd2hlcmVDbGF1c2UucGxhblR5cGUgPSB0eXBlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzaGFyZWRQbGFucyA9IGF3YWl0IHByaXNtYS5zaGFyZWRQbGFuLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHdoZXJlQ2xhdXNlLFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgc2hhcmVkQnk6IHtcbiAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgZW1haWw6IHRydWUgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNoYXJlZFdpdGg6IHtcbiAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgZW1haWw6IHRydWUgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBvcmRlckJ5OiB7IHNoYXJlZEF0OiAnZGVzYycgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGZXRjaCBwbGFuIGRldGFpbHMgZm9yIGVhY2ggc2hhcmVkIHBsYW5cbiAgICAgIGNvbnN0IHBsYW5zV2l0aERldGFpbHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgc2hhcmVkUGxhbnMubWFwKGFzeW5jIChzaGFyZSkgPT4ge1xuICAgICAgICAgIGxldCBwbGFuRGV0YWlscyA9IG51bGw7XG5cbiAgICAgICAgICBzd2l0Y2ggKHNoYXJlLnBsYW5UeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdsb25nLXJhbmdlJzpcbiAgICAgICAgICAgICAgcGxhbkRldGFpbHMgPSBhd2FpdCBwcmlzbWEubG9uZ1JhbmdlUGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmUucGxhbklkIH0sXG4gICAgICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCB0aXRsZTogdHJ1ZSwgYWNhZGVtaWNZZWFyOiB0cnVlLCBncmFkZTogdHJ1ZSwgc3ViamVjdDogdHJ1ZSB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3VuaXQnOlxuICAgICAgICAgICAgICBwbGFuRGV0YWlscyA9IGF3YWl0IHByaXNtYS51bml0UGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmUucGxhbklkIH0sXG4gICAgICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCB0aXRsZTogdHJ1ZSwgc3RhcnREYXRlOiB0cnVlLCBlbmREYXRlOiB0cnVlIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbGVzc29uJzpcbiAgICAgICAgICAgICAgcGxhbkRldGFpbHMgPSBhd2FpdCBwcmlzbWEuZVRGT0xlc3NvblBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHNoYXJlLnBsYW5JZCB9LFxuICAgICAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgdGl0bGU6IHRydWUsIGRhdGU6IHRydWUsIGdyYWRlOiB0cnVlLCBzdWJqZWN0OiB0cnVlIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZGF5Ym9vayc6XG4gICAgICAgICAgICAgIHBsYW5EZXRhaWxzID0gYXdhaXQgcHJpc21hLmRheWJvb2tFbnRyeS5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmUucGxhbklkIH0sXG4gICAgICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBkYXRlOiB0cnVlIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc2hhcmUsXG4gICAgICAgICAgICBwbGFuRGV0YWlscyxcbiAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICk7XG5cbiAgICAgIHJlcy5qc29uKHBsYW5zV2l0aERldGFpbHMpO1xuICAgIH0pLFxuICApO1xuXG4gIC8vIFNoYXJlIGEgcGxhblxuICByb3V0ZXIucG9zdChcbiAgICAnL3BsYW5zJyxcbiAgICBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBjb25zdCB1c2VySWQgPSByZXEudXNlciEuaWQ7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBsYW5UeXBlLFxuICAgICAgICBwbGFuSWQsXG4gICAgICAgIHNoYXJlV2l0aCxcbiAgICAgICAgcGVybWlzc2lvbnMgPSB7fSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgIH0gPSBzaGFyZVBsYW5TY2hlbWEucGFyc2UocmVxLmJvZHkpO1xuXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIG93bnMgdGhlIHBsYW5cbiAgICAgIGNvbnN0IGlzT3duZXIgPSBhd2FpdCBjaGVja1BsYW5Pd25lcnNoaXAocGxhblR5cGUsIHBsYW5JZCwgdXNlcklkKTtcbiAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ1lvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHNoYXJlIHRoaXMgcGxhbicgfSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBzaGFyZWRQbGFuO1xuXG4gICAgICBpZiAoc2hhcmVXaXRoLnR5cGUgPT09ICd1c2VyJykge1xuICAgICAgICAvLyBTaGFyZSB3aXRoIHNwZWNpZmljIHVzZXJcbiAgICAgICAgY29uc3QgdGFyZ2V0VXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGVtYWlsOiBzaGFyZVdpdGguZW1haWwgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF0YXJnZXRVc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdVc2VyIG5vdCBmb3VuZCcgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0VXNlci5pZCA9PT0gdXNlcklkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdDYW5ub3Qgc2hhcmUgd2l0aCB5b3Vyc2VsZicgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBhbHJlYWR5IHNoYXJlZFxuICAgICAgICBjb25zdCBleGlzdGluZ1NoYXJlID0gYXdhaXQgcHJpc21hLnNoYXJlZFBsYW4uZmluZEZpcnN0KHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgcGxhblR5cGUsXG4gICAgICAgICAgICBwbGFuSWQsXG4gICAgICAgICAgICBzaGFyZWRCeUlkOiB1c2VySWQsXG4gICAgICAgICAgICBzaGFyZWRXaXRoSWQ6IHRhcmdldFVzZXIuaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nU2hhcmUpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDkpLmpzb24oeyBlcnJvcjogJ1BsYW4gaXMgYWxyZWFkeSBzaGFyZWQgd2l0aCB0aGlzIHVzZXInIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hhcmVkUGxhbiA9IGF3YWl0IHByaXNtYS5zaGFyZWRQbGFuLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcGxhblR5cGUsXG4gICAgICAgICAgICBwbGFuSWQsXG4gICAgICAgICAgICBzaGFyZWRCeUlkOiB1c2VySWQsXG4gICAgICAgICAgICBzaGFyZWRXaXRoSWQ6IHRhcmdldFVzZXIuaWQsXG4gICAgICAgICAgICAuLi5wZXJtaXNzaW9ucyxcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICBzaGFyZWRCeToge1xuICAgICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIGVtYWlsOiB0cnVlIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hhcmVkV2l0aDoge1xuICAgICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIGVtYWlsOiB0cnVlIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRPRE86IFNlbmQgZW1haWwgbm90aWZpY2F0aW9uXG4gICAgICB9IGVsc2UgaWYgKHNoYXJlV2l0aC50eXBlID09PSAndGVhbScpIHtcbiAgICAgICAgLy8gU2hhcmUgd2l0aCB0ZWFtXG4gICAgICAgIGNvbnN0IHRlYW0gPSBhd2FpdCBwcmlzbWEudGVhbS5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVXaXRoLnRlYW1JZCB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXRlYW0pIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1RlYW0gbm90IGZvdW5kJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHVzZXIgaXMgYSBtZW1iZXIgb2YgdGhlIHRlYW1cbiAgICAgICAgY29uc3QgaXNNZW1iZXIgPSBhd2FpdCBwcmlzbWEudGVhbU1lbWJlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyB0ZWFtSWRfdXNlcklkOiB7IHRlYW1JZDogc2hhcmVXaXRoLnRlYW1JZCwgdXNlcklkIH0gfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFpc01lbWJlcikge1xuICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIC5zdGF0dXMoNDAzKVxuICAgICAgICAgICAgLmpzb24oeyBlcnJvcjogJ1lvdSBtdXN0IGJlIGEgdGVhbSBtZW1iZXIgdG8gc2hhcmUgd2l0aCB0aGUgdGVhbScgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFyZWRQbGFuID0gYXdhaXQgcHJpc21hLnNoYXJlZFBsYW4uY3JlYXRlKHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwbGFuVHlwZSxcbiAgICAgICAgICAgIHBsYW5JZCxcbiAgICAgICAgICAgIHNoYXJlZEJ5SWQ6IHVzZXJJZCxcbiAgICAgICAgICAgIHRlYW1JZDogc2hhcmVXaXRoLnRlYW1JZCxcbiAgICAgICAgICAgIC4uLnBlcm1pc3Npb25zLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgIHNoYXJlZEJ5OiB7XG4gICAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgZW1haWw6IHRydWUgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDcmVhdGUgcHVibGljIHNoYXJpbmcgbGlua1xuICAgICAgICBjb25zdCBleHBpcmVzQXQgPSBzaGFyZVdpdGguZXhwaXJlc0luRGF5c1xuICAgICAgICAgID8gYWRkRGF5cyhuZXcgRGF0ZSgpLCBzaGFyZVdpdGguZXhwaXJlc0luRGF5cylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBzaGFyZWRQbGFuID0gYXdhaXQgcHJpc21hLnNoYXJlZFBsYW4uY3JlYXRlKHtcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwbGFuVHlwZSxcbiAgICAgICAgICAgIHBsYW5JZCxcbiAgICAgICAgICAgIHNoYXJlZEJ5SWQ6IHVzZXJJZCxcbiAgICAgICAgICAgIGlzUHVibGljTGluazogdHJ1ZSxcbiAgICAgICAgICAgIGxpbmtFeHBpcmVzQXQ6IGV4cGlyZXNBdCxcbiAgICAgICAgICAgIC4uLnBlcm1pc3Npb25zLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgIHNoYXJlZEJ5OiB7XG4gICAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgZW1haWw6IHRydWUgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlci5pbmZvKGBQbGFuIHNoYXJlZDogJHtwbGFuVHlwZX0vJHtwbGFuSWR9IGJ5IHVzZXIgJHt1c2VySWR9YCk7XG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbihzaGFyZWRQbGFuKTtcbiAgICB9KSxcbiAgKTtcblxuICAvLyBHZXQgc2hhcmVkIHBsYW4gYnkgc2hhcmUgY29kZVxuICByb3V0ZXIuZ2V0KFxuICAgICcvcGxhbnMvOnNoYXJlQ29kZScsXG4gICAgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICAgY29uc3QgeyBzaGFyZUNvZGUgfSA9IHJlcS5wYXJhbXM7XG4gICAgICBjb25zdCB1c2VySWQgPSByZXEudXNlciEuaWQ7XG5cbiAgICAgIGNvbnN0IHNoYXJlZFBsYW4gPSBhd2FpdCBwcmlzbWEuc2hhcmVkUGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgc2hhcmVDb2RlIH0sXG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICBzaGFyZWRCeToge1xuICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCBlbWFpbDogdHJ1ZSB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFzaGFyZWRQbGFuKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnU2hhcmVkIHBsYW4gbm90IGZvdW5kJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgYWNjZXNzIHBlcm1pc3Npb25zXG4gICAgICBjb25zdCBoYXNBY2Nlc3MgPVxuICAgICAgICBzaGFyZWRQbGFuLmlzUHVibGljTGluayB8fFxuICAgICAgICBzaGFyZWRQbGFuLnNoYXJlZEJ5SWQgPT09IHVzZXJJZCB8fFxuICAgICAgICBzaGFyZWRQbGFuLnNoYXJlZFdpdGhJZCA9PT0gdXNlcklkO1xuXG4gICAgICBpZiAoIWhhc0FjY2VzcyAmJiBzaGFyZWRQbGFuLnRlYW1JZCkge1xuICAgICAgICAvLyBDaGVjayB0ZWFtIG1lbWJlcnNoaXBcbiAgICAgICAgY29uc3QgaXNNZW1iZXIgPSBhd2FpdCBwcmlzbWEudGVhbU1lbWJlci5maW5kRmlyc3Qoe1xuICAgICAgICAgIHdoZXJlOiB7IHRlYW1JZDogc2hhcmVkUGxhbi50ZWFtSWQsIHVzZXJJZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc01lbWJlcikge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnQWNjZXNzIGRlbmllZCcgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWhhc0FjY2Vzcykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBsaW5rIGhhcyBleHBpcmVkXG4gICAgICBpZiAoc2hhcmVkUGxhbi5saW5rRXhwaXJlc0F0ICYmIG5ldyBEYXRlKCkgPiBzaGFyZWRQbGFuLmxpbmtFeHBpcmVzQXQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDEwKS5qc29uKHsgZXJyb3I6ICdTaGFyZSBsaW5rIGhhcyBleHBpcmVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHZpZXcgY291bnRcbiAgICAgIGF3YWl0IHByaXNtYS5zaGFyZWRQbGFuLnVwZGF0ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiBzaGFyZWRQbGFuLmlkIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB2aWV3Q291bnQ6IHsgaW5jcmVtZW50OiAxIH0sXG4gICAgICAgICAgbGFzdFZpZXdlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIEZldGNoIHBsYW4gZGV0YWlsc1xuICAgICAgbGV0IHBsYW5EZXRhaWxzID0gbnVsbDtcblxuICAgICAgc3dpdGNoIChzaGFyZWRQbGFuLnBsYW5UeXBlKSB7XG4gICAgICAgIGNhc2UgJ2xvbmctcmFuZ2UnOlxuICAgICAgICAgIHBsYW5EZXRhaWxzID0gYXdhaXQgcHJpc21hLmxvbmdSYW5nZVBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVkUGxhbi5wbGFuSWQgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgZXhwZWN0YXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZTogeyBleHBlY3RhdGlvbjogdHJ1ZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB1bml0UGxhbnM6IHtcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIHRpdGxlOiB0cnVlLCBzdGFydERhdGU6IHRydWUsIGVuZERhdGU6IHRydWUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndW5pdCc6XG4gICAgICAgICAgcGxhbkRldGFpbHMgPSBhd2FpdCBwcmlzbWEudW5pdFBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVkUGxhbi5wbGFuSWQgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgZXhwZWN0YXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZTogeyBleHBlY3RhdGlvbjogdHJ1ZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBsZXNzb25QbGFuczoge1xuICAgICAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgdGl0bGU6IHRydWUsIGRhdGU6IHRydWUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVzb3VyY2VzOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsZXNzb24nOlxuICAgICAgICAgIHBsYW5EZXRhaWxzID0gYXdhaXQgcHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHNoYXJlZFBsYW4ucGxhbklkIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgIGV4cGVjdGF0aW9uczoge1xuICAgICAgICAgICAgICAgIGluY2x1ZGU6IHsgZXhwZWN0YXRpb246IHRydWUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVzb3VyY2VzOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdkYXlib29rJzpcbiAgICAgICAgICBwbGFuRGV0YWlscyA9IGF3YWl0IHByaXNtYS5kYXlib29rRW50cnkuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVkUGxhbi5wbGFuSWQgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgZXhwZWN0YXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZTogeyBleHBlY3RhdGlvbjogdHJ1ZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBzaGFyZTogc2hhcmVkUGxhbixcbiAgICAgICAgcGxhbjogcGxhbkRldGFpbHMsXG4gICAgICB9KTtcbiAgICB9KSxcbiAgKTtcblxuICAvLyBVcGRhdGUgc2hhcmUgcGVybWlzc2lvbnNcbiAgcm91dGVyLnBhdGNoKFxuICAgICcvcGxhbnMvOnNoYXJlSWQnLFxuICAgIGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnN0IHsgc2hhcmVJZCB9ID0gcmVxLnBhcmFtcztcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyIS5pZDtcbiAgICAgIGNvbnN0IHVwZGF0ZXMgPSB1cGRhdGVTaGFyZVBlcm1pc3Npb25zU2NoZW1hLnBhcnNlKHJlcS5ib2R5KTtcblxuICAgICAgY29uc3Qgc2hhcmVkUGxhbiA9IGF3YWl0IHByaXNtYS5zaGFyZWRQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVJZCB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghc2hhcmVkUGxhbikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1NoYXJlZCBwbGFuIG5vdCBmb3VuZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgdGhlIHNoYXJlciBjYW4gdXBkYXRlIHBlcm1pc3Npb25zXG4gICAgICBpZiAoc2hhcmVkUGxhbi5zaGFyZWRCeUlkICE9PSB1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdPbmx5IHRoZSBwbGFuIG93bmVyIGNhbiB1cGRhdGUgc2hhcmUgcGVybWlzc2lvbnMnIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGRhdGVkID0gYXdhaXQgcHJpc21hLnNoYXJlZFBsYW4udXBkYXRlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHNoYXJlSWQgfSxcbiAgICAgICAgZGF0YTogdXBkYXRlcyxcbiAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgIHNoYXJlZEJ5OiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIGVtYWlsOiB0cnVlIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaGFyZWRXaXRoOiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIGVtYWlsOiB0cnVlIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICByZXMuanNvbih1cGRhdGVkKTtcbiAgICB9KSxcbiAgKTtcblxuICAvLyBSZXZva2Ugc2hhcmVcbiAgcm91dGVyLmRlbGV0ZShcbiAgICAnL3BsYW5zLzpzaGFyZUlkJyxcbiAgICBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBjb25zdCB7IHNoYXJlSWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgICBjb25zdCB1c2VySWQgPSByZXEudXNlciEuaWQ7XG5cbiAgICAgIGNvbnN0IHNoYXJlZFBsYW4gPSBhd2FpdCBwcmlzbWEuc2hhcmVkUGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHNoYXJlSWQgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXNoYXJlZFBsYW4pIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdTaGFyZWQgcGxhbiBub3QgZm91bmQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IHRoZSBzaGFyZXIgY2FuIHJldm9rZVxuICAgICAgaWYgKHNoYXJlZFBsYW4uc2hhcmVkQnlJZCAhPT0gdXNlcklkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnT25seSB0aGUgcGxhbiBvd25lciBjYW4gcmV2b2tlIHNoYXJpbmcnIH0pO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBwcmlzbWEuc2hhcmVkUGxhbi5kZWxldGUoe1xuICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVJZCB9LFxuICAgICAgfSk7XG5cbiAgICAgIGxvZ2dlci5pbmZvKGBTaGFyZSByZXZva2VkOiAke3NoYXJlSWR9IGJ5IHVzZXIgJHt1c2VySWR9YCk7XG4gICAgICByZXMuc3RhdHVzKDIwNCkuc2VuZCgpO1xuICAgIH0pLFxuICApO1xuXG4gIC8vIENvcHkgc2hhcmVkIHBsYW5cbiAgcm91dGVyLnBvc3QoXG4gICAgJy9wbGFucy86c2hhcmVDb2RlL2NvcHknLFxuICAgIGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnN0IHsgc2hhcmVDb2RlIH0gPSByZXEucGFyYW1zO1xuICAgICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIhLmlkO1xuXG4gICAgICBjb25zdCBzaGFyZWRQbGFuID0gYXdhaXQgcHJpc21hLnNoYXJlZFBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgIHdoZXJlOiB7IHNoYXJlQ29kZSB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghc2hhcmVkUGxhbikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1NoYXJlZCBwbGFuIG5vdCBmb3VuZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgaGFzIGNvcHkgcGVybWlzc2lvblxuICAgICAgaWYgKCFzaGFyZWRQbGFuLmNhbkNvcHkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdDb3B5aW5nIHRoaXMgcGxhbiBpcyBub3QgYWxsb3dlZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGFjY2Vzc1xuICAgICAgY29uc3QgaGFzQWNjZXNzID0gc2hhcmVkUGxhbi5pc1B1YmxpY0xpbmsgfHwgc2hhcmVkUGxhbi5zaGFyZWRXaXRoSWQgPT09IHVzZXJJZDtcblxuICAgICAgaWYgKCFoYXNBY2Nlc3MgJiYgc2hhcmVkUGxhbi50ZWFtSWQpIHtcbiAgICAgICAgY29uc3QgaXNNZW1iZXIgPSBhd2FpdCBwcmlzbWEudGVhbU1lbWJlci5maW5kRmlyc3Qoe1xuICAgICAgICAgIHdoZXJlOiB7IHRlYW1JZDogc2hhcmVkUGxhbi50ZWFtSWQsIHVzZXJJZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc01lbWJlcikge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IGVycm9yOiAnQWNjZXNzIGRlbmllZCcgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWhhc0FjY2Vzcykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IHRoZSBwbGFuIGJhc2VkIG9uIHR5cGVcbiAgICAgIGxldCBjb3BpZWRQbGFuO1xuXG4gICAgICBzd2l0Y2ggKHNoYXJlZFBsYW4ucGxhblR5cGUpIHtcbiAgICAgICAgY2FzZSAnbGVzc29uJzoge1xuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGVzc29uID0gYXdhaXQgcHJpc21hLmVURk9MZXNzb25QbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgd2hlcmU6IHsgaWQ6IHNoYXJlZFBsYW4ucGxhbklkIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgIGV4cGVjdGF0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgICAgcmVzb3VyY2VzOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICghb3JpZ2luYWxMZXNzb24pIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnT3JpZ2luYWwgcGxhbiBub3QgZm91bmQnIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEdldCB1c2VyJ3MgdW5pdCBwbGFucyB0byBzZWxlY3QgZnJvbVxuICAgICAgICAgIGNvbnN0IHVzZXJVbml0UGxhbnMgPSBhd2FpdCBwcmlzbWEudW5pdFBsYW4uZmluZE1hbnkoe1xuICAgICAgICAgICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHRha2U6IDEsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodXNlclVuaXRQbGFucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAgICAgICAgIC5qc29uKHsgZXJyb3I6ICdZb3UgbmVlZCBhdCBsZWFzdCBvbmUgdW5pdCBwbGFuIHRvIGNvcHkgbGVzc29ucycgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29waWVkUGxhbiA9IGF3YWl0IHByaXNtYS5lVEZPTGVzc29uUGxhbi5jcmVhdGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgIHRpdGxlOiBgJHtvcmlnaW5hbExlc3Nvbi50aXRsZX0gKENvcHkpYCxcbiAgICAgICAgICAgICAgdW5pdFBsYW5JZDogdXNlclVuaXRQbGFuc1swXS5pZCwgLy8gVE9ETzogQWxsb3cgdXNlciB0byBzZWxlY3QgdW5pdFxuICAgICAgICAgICAgICBncmFkZTogb3JpZ2luYWxMZXNzb24uZ3JhZGUsXG4gICAgICAgICAgICAgIHN1YmplY3Q6IG9yaWdpbmFsTGVzc29uLnN1YmplY3QsXG4gICAgICAgICAgICAgIGxhbmd1YWdlOiBvcmlnaW5hbExlc3Nvbi5sYW5ndWFnZSxcbiAgICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgZHVyYXRpb246IG9yaWdpbmFsTGVzc29uLmR1cmF0aW9uLFxuICAgICAgICAgICAgICBtaW5kc09uOiBvcmlnaW5hbExlc3Nvbi5taW5kc09uLFxuICAgICAgICAgICAgICBhY3Rpb246IG9yaWdpbmFsTGVzc29uLmFjdGlvbixcbiAgICAgICAgICAgICAgY29uc29saWRhdGlvbjogb3JpZ2luYWxMZXNzb24uY29uc29saWRhdGlvbixcbiAgICAgICAgICAgICAgbGVhcm5pbmdHb2Fsczogb3JpZ2luYWxMZXNzb24ubGVhcm5pbmdHb2FscyxcbiAgICAgICAgICAgICAgbWF0ZXJpYWxzOiBvcmlnaW5hbExlc3Nvbi5tYXRlcmlhbHMsXG4gICAgICAgICAgICAgIGdyb3VwaW5nOiBvcmlnaW5hbExlc3Nvbi5ncm91cGluZyxcbiAgICAgICAgICAgICAgdGl0bGVGcjogb3JpZ2luYWxMZXNzb24udGl0bGVGcixcbiAgICAgICAgICAgICAgbWluZHNPbkZyOiBvcmlnaW5hbExlc3Nvbi5taW5kc09uRnIsXG4gICAgICAgICAgICAgIGFjdGlvbkZyOiBvcmlnaW5hbExlc3Nvbi5hY3Rpb25GcixcbiAgICAgICAgICAgICAgY29uc29saWRhdGlvbkZyOiBvcmlnaW5hbExlc3Nvbi5jb25zb2xpZGF0aW9uRnIsXG4gICAgICAgICAgICAgIGxlYXJuaW5nR29hbHNGcjogb3JpZ2luYWxMZXNzb24ubGVhcm5pbmdHb2Fsc0ZyLFxuICAgICAgICAgICAgICBhY2NvbW1vZGF0aW9uczogb3JpZ2luYWxMZXNzb24uYWNjb21tb2RhdGlvbnMsXG4gICAgICAgICAgICAgIG1vZGlmaWNhdGlvbnM6IG9yaWdpbmFsTGVzc29uLm1vZGlmaWNhdGlvbnMsXG4gICAgICAgICAgICAgIGV4dGVuc2lvbnM6IG9yaWdpbmFsTGVzc29uLmV4dGVuc2lvbnMsXG4gICAgICAgICAgICAgIGFzc2Vzc21lbnRUeXBlOiBvcmlnaW5hbExlc3Nvbi5hc3Nlc3NtZW50VHlwZSxcbiAgICAgICAgICAgICAgYXNzZXNzbWVudE5vdGVzOiBvcmlnaW5hbExlc3Nvbi5hc3Nlc3NtZW50Tm90ZXMsXG4gICAgICAgICAgICAgIGlzU3ViRnJpZW5kbHk6IG9yaWdpbmFsTGVzc29uLmlzU3ViRnJpZW5kbHksXG4gICAgICAgICAgICAgIHN1Yk5vdGVzOiBvcmlnaW5hbExlc3Nvbi5zdWJOb3RlcyxcbiAgICAgICAgICAgICAgZXhwZWN0YXRpb25zOiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlOiBvcmlnaW5hbExlc3Nvbi5leHBlY3RhdGlvbnMubWFwKChlKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgZXhwZWN0YXRpb25JZDogZS5leHBlY3RhdGlvbklkLFxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgY29weWluZyBmb3Igb3RoZXIgcGxhbiB0eXBlc1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnQ29weWluZyB0aGlzIHBsYW4gdHlwZSBpcyBub3QgeWV0IHN1cHBvcnRlZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBjb3B5IGNvdW50XG4gICAgICBhd2FpdCBwcmlzbWEuc2hhcmVkUGxhbi51cGRhdGUoe1xuICAgICAgICB3aGVyZTogeyBpZDogc2hhcmVkUGxhbi5pZCB9LFxuICAgICAgICBkYXRhOiB7IGNvcHlDb3VudDogeyBpbmNyZW1lbnQ6IDEgfSB9LFxuICAgICAgfSk7XG5cbiAgICAgIGxvZ2dlci5pbmZvKGBQbGFuIGNvcGllZDogJHtzaGFyZWRQbGFuLnBsYW5UeXBlfS8ke3NoYXJlZFBsYW4ucGxhbklkfSBieSB1c2VyICR7dXNlcklkfWApO1xuICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oY29waWVkUGxhbik7XG4gICAgfSksXG4gICk7XG5cbiAgcmV0dXJuIHJvdXRlcjtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==