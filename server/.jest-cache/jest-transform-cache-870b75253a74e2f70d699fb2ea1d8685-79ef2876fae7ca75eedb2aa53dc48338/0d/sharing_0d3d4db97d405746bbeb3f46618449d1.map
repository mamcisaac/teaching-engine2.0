{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/sharing.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/sharing.ts"],"sourcesContent":["/**\n * Plan Sharing Routes\n * Handles sharing of lesson plans, units, and other planning resources\n */\n\nimport { Router } from 'express';\nimport { PrismaClient } from '@teaching-engine/database';\nimport { z } from 'zod';\nimport { authenticate } from '@/middleware/authenticate';\nimport { asyncHandler } from '@/middleware/errorHandler';\nimport logger from '@/logger';\nimport { addDays } from 'date-fns';\n\n// Validation schemas\nconst sharePlanSchema = z.object({\n  planType: z.enum(['long-range', 'unit', 'lesson', 'daybook']),\n  planId: z.string(),\n  shareWith: z.union([\n    z.object({\n      type: z.literal('user'),\n      email: z.string().email(),\n    }),\n    z.object({\n      type: z.literal('team'),\n      teamId: z.string(),\n    }),\n    z.object({\n      type: z.literal('link'),\n      expiresInDays: z.number().int().min(1).max(365).optional(),\n    }),\n  ]),\n  permissions: z\n    .object({\n      canEdit: z.boolean().optional(),\n      canCopy: z.boolean().optional(),\n      canComment: z.boolean().optional(),\n      canReshare: z.boolean().optional(),\n    })\n    .optional(),\n  message: z.string().optional(),\n});\n\nconst updateSharePermissionsSchema = z.object({\n  canEdit: z.boolean().optional(),\n  canCopy: z.boolean().optional(),\n  canComment: z.boolean().optional(),\n  canReshare: z.boolean().optional(),\n});\n\nexport function sharingRoutes(prisma: PrismaClient): Router {\n  const router = Router();\n\n  // Apply authentication to all routes\n  router.use(authenticate);\n\n  // Helper function to check plan ownership\n  async function checkPlanOwnership(\n    planType: string,\n    planId: string,\n    userId: number,\n  ): Promise<boolean> {\n    switch (planType) {\n      case 'long-range': {\n        const lrPlan = await prisma.longRangePlan.findUnique({\n          where: { id: planId },\n        });\n        return lrPlan?.userId === userId;\n      }\n\n      case 'unit': {\n        const unitPlan = await prisma.unitPlan.findUnique({\n          where: { id: planId },\n        });\n        return unitPlan?.userId === userId;\n      }\n\n      case 'lesson': {\n        const lessonPlan = await prisma.eTFOLessonPlan.findUnique({\n          where: { id: planId },\n        });\n        return lessonPlan?.userId === userId;\n      }\n\n      case 'daybook': {\n        const daybookEntry = await prisma.daybookEntry.findUnique({\n          where: { id: planId },\n        });\n        return daybookEntry?.userId === userId;\n      }\n\n      default:\n        return false;\n    }\n  }\n\n  // Get all shared plans (both sent and received)\n  router.get(\n    '/plans',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const { type, direction } = req.query;\n\n      const whereClause: Record<string, unknown> = {};\n\n      if (direction === 'sent') {\n        whereClause.sharedById = userId;\n      } else if (direction === 'received') {\n        whereClause.sharedWithId = userId;\n      } else {\n        whereClause.OR = [{ sharedById: userId }, { sharedWithId: userId }];\n      }\n\n      if (type) {\n        whereClause.planType = type;\n      }\n\n      const sharedPlans = await prisma.sharedPlan.findMany({\n        where: whereClause,\n        include: {\n          sharedBy: {\n            select: { id: true, name: true, email: true },\n          },\n          sharedWith: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n        orderBy: { sharedAt: 'desc' },\n      });\n\n      // Fetch plan details for each shared plan\n      const plansWithDetails = await Promise.all(\n        sharedPlans.map(async (share) => {\n          let planDetails = null;\n\n          switch (share.planType) {\n            case 'long-range':\n              planDetails = await prisma.longRangePlan.findUnique({\n                where: { id: share.planId },\n                select: { id: true, title: true, academicYear: true, grade: true, subject: true },\n              });\n              break;\n\n            case 'unit':\n              planDetails = await prisma.unitPlan.findUnique({\n                where: { id: share.planId },\n                select: { id: true, title: true, startDate: true, endDate: true },\n              });\n              break;\n\n            case 'lesson':\n              planDetails = await prisma.eTFOLessonPlan.findUnique({\n                where: { id: share.planId },\n                select: { id: true, title: true, date: true, grade: true, subject: true },\n              });\n              break;\n\n            case 'daybook':\n              planDetails = await prisma.daybookEntry.findUnique({\n                where: { id: share.planId },\n                select: { id: true, date: true },\n              });\n              break;\n          }\n\n          return {\n            ...share,\n            planDetails,\n          };\n        }),\n      );\n\n      res.json(plansWithDetails);\n    }),\n  );\n\n  // Share a plan\n  router.post(\n    '/plans',\n    asyncHandler(async (req, res) => {\n      const userId = req.user!.id;\n      const {\n        planType,\n        planId,\n        shareWith,\n        permissions = {},\n        message,\n      } = sharePlanSchema.parse(req.body);\n\n      // Check if user owns the plan\n      const isOwner = await checkPlanOwnership(planType, planId, userId);\n      if (!isOwner) {\n        return res.status(403).json({ error: 'You do not have permission to share this plan' });\n      }\n\n      let sharedPlan;\n\n      if (shareWith.type === 'user') {\n        // Share with specific user\n        const targetUser = await prisma.user.findUnique({\n          where: { email: shareWith.email },\n        });\n\n        if (!targetUser) {\n          return res.status(404).json({ error: 'User not found' });\n        }\n\n        if (targetUser.id === userId) {\n          return res.status(400).json({ error: 'Cannot share with yourself' });\n        }\n\n        // Check if already shared\n        const existingShare = await prisma.sharedPlan.findFirst({\n          where: {\n            planType,\n            planId,\n            sharedById: userId,\n            sharedWithId: targetUser.id,\n          },\n        });\n\n        if (existingShare) {\n          return res.status(409).json({ error: 'Plan is already shared with this user' });\n        }\n\n        sharedPlan = await prisma.sharedPlan.create({\n          data: {\n            planType,\n            planId,\n            sharedById: userId,\n            sharedWithId: targetUser.id,\n            ...permissions,\n            message,\n          },\n          include: {\n            sharedBy: {\n              select: { id: true, name: true, email: true },\n            },\n            sharedWith: {\n              select: { id: true, name: true, email: true },\n            },\n          },\n        });\n\n        // TODO: Send email notification\n      } else if (shareWith.type === 'team') {\n        // Share with team\n        const team = await prisma.team.findUnique({\n          where: { id: shareWith.teamId },\n        });\n\n        if (!team) {\n          return res.status(404).json({ error: 'Team not found' });\n        }\n\n        // Check if user is a member of the team\n        const isMember = await prisma.teamMember.findUnique({\n          where: { teamId_userId: { teamId: shareWith.teamId, userId } },\n        });\n\n        if (!isMember) {\n          return res\n            .status(403)\n            .json({ error: 'You must be a team member to share with the team' });\n        }\n\n        sharedPlan = await prisma.sharedPlan.create({\n          data: {\n            planType,\n            planId,\n            sharedById: userId,\n            teamId: shareWith.teamId,\n            ...permissions,\n            message,\n          },\n          include: {\n            sharedBy: {\n              select: { id: true, name: true, email: true },\n            },\n          },\n        });\n      } else {\n        // Create public sharing link\n        const expiresAt = shareWith.expiresInDays\n          ? addDays(new Date(), shareWith.expiresInDays)\n          : undefined;\n\n        sharedPlan = await prisma.sharedPlan.create({\n          data: {\n            planType,\n            planId,\n            sharedById: userId,\n            isPublicLink: true,\n            linkExpiresAt: expiresAt,\n            ...permissions,\n            message,\n          },\n          include: {\n            sharedBy: {\n              select: { id: true, name: true, email: true },\n            },\n          },\n        });\n      }\n\n      logger.info(`Plan shared: ${planType}/${planId} by user ${userId}`);\n      res.status(201).json(sharedPlan);\n    }),\n  );\n\n  // Get shared plan by share code\n  router.get(\n    '/plans/:shareCode',\n    asyncHandler(async (req, res) => {\n      const { shareCode } = req.params;\n      const userId = req.user!.id;\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { shareCode },\n        include: {\n          sharedBy: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Check access permissions\n      const hasAccess =\n        sharedPlan.isPublicLink ||\n        sharedPlan.sharedById === userId ||\n        sharedPlan.sharedWithId === userId;\n\n      if (!hasAccess && sharedPlan.teamId) {\n        // Check team membership\n        const isMember = await prisma.teamMember.findFirst({\n          where: { teamId: sharedPlan.teamId, userId },\n        });\n        if (!isMember) {\n          return res.status(403).json({ error: 'Access denied' });\n        }\n      } else if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      // Check if link has expired\n      if (sharedPlan.linkExpiresAt && new Date() > sharedPlan.linkExpiresAt) {\n        return res.status(410).json({ error: 'Share link has expired' });\n      }\n\n      // Update view count\n      await prisma.sharedPlan.update({\n        where: { id: sharedPlan.id },\n        data: {\n          viewCount: { increment: 1 },\n          lastViewedAt: new Date(),\n        },\n      });\n\n      // Fetch plan details\n      let planDetails = null;\n\n      switch (sharedPlan.planType) {\n        case 'long-range':\n          planDetails = await prisma.longRangePlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n              unitPlans: {\n                select: { id: true, title: true, startDate: true, endDate: true },\n              },\n            },\n          });\n          break;\n\n        case 'unit':\n          planDetails = await prisma.unitPlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n              lessonPlans: {\n                select: { id: true, title: true, date: true },\n              },\n              resources: true,\n            },\n          });\n          break;\n\n        case 'lesson':\n          planDetails = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n              resources: true,\n            },\n          });\n          break;\n\n        case 'daybook':\n          planDetails = await prisma.daybookEntry.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: {\n                include: { expectation: true },\n              },\n            },\n          });\n          break;\n      }\n\n      res.json({\n        share: sharedPlan,\n        plan: planDetails,\n      });\n    }),\n  );\n\n  // Update share permissions\n  router.patch(\n    '/plans/:shareId',\n    asyncHandler(async (req, res) => {\n      const { shareId } = req.params;\n      const userId = req.user!.id;\n      const updates = updateSharePermissionsSchema.parse(req.body);\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { id: shareId },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Only the sharer can update permissions\n      if (sharedPlan.sharedById !== userId) {\n        return res.status(403).json({ error: 'Only the plan owner can update share permissions' });\n      }\n\n      const updated = await prisma.sharedPlan.update({\n        where: { id: shareId },\n        data: updates,\n        include: {\n          sharedBy: {\n            select: { id: true, name: true, email: true },\n          },\n          sharedWith: {\n            select: { id: true, name: true, email: true },\n          },\n        },\n      });\n\n      res.json(updated);\n    }),\n  );\n\n  // Revoke share\n  router.delete(\n    '/plans/:shareId',\n    asyncHandler(async (req, res) => {\n      const { shareId } = req.params;\n      const userId = req.user!.id;\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { id: shareId },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Only the sharer can revoke\n      if (sharedPlan.sharedById !== userId) {\n        return res.status(403).json({ error: 'Only the plan owner can revoke sharing' });\n      }\n\n      await prisma.sharedPlan.delete({\n        where: { id: shareId },\n      });\n\n      logger.info(`Share revoked: ${shareId} by user ${userId}`);\n      res.status(204).send();\n    }),\n  );\n\n  // Copy shared plan\n  router.post(\n    '/plans/:shareCode/copy',\n    asyncHandler(async (req, res) => {\n      const { shareCode } = req.params;\n      const userId = req.user!.id;\n\n      const sharedPlan = await prisma.sharedPlan.findUnique({\n        where: { shareCode },\n      });\n\n      if (!sharedPlan) {\n        return res.status(404).json({ error: 'Shared plan not found' });\n      }\n\n      // Check if user has copy permission\n      if (!sharedPlan.canCopy) {\n        return res.status(403).json({ error: 'Copying this plan is not allowed' });\n      }\n\n      // Check access\n      const hasAccess = sharedPlan.isPublicLink || sharedPlan.sharedWithId === userId;\n\n      if (!hasAccess && sharedPlan.teamId) {\n        const isMember = await prisma.teamMember.findFirst({\n          where: { teamId: sharedPlan.teamId, userId },\n        });\n        if (!isMember) {\n          return res.status(403).json({ error: 'Access denied' });\n        }\n      } else if (!hasAccess) {\n        return res.status(403).json({ error: 'Access denied' });\n      }\n\n      // Copy the plan based on type\n      let copiedPlan;\n\n      switch (sharedPlan.planType) {\n        case 'lesson': {\n          const originalLesson = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: sharedPlan.planId },\n            include: {\n              expectations: true,\n              resources: true,\n            },\n          });\n\n          if (!originalLesson) {\n            return res.status(404).json({ error: 'Original plan not found' });\n          }\n\n          // Get user's unit plans to select from\n          const userUnitPlans = await prisma.unitPlan.findMany({\n            where: { userId },\n            select: { id: true },\n            take: 1,\n          });\n\n          if (userUnitPlans.length === 0) {\n            return res\n              .status(400)\n              .json({ error: 'You need at least one unit plan to copy lessons' });\n          }\n\n          copiedPlan = await prisma.eTFOLessonPlan.create({\n            data: {\n              userId,\n              title: `${originalLesson.title} (Copy)`,\n              unitPlanId: userUnitPlans[0].id, // TODO: Allow user to select unit\n              grade: originalLesson.grade,\n              subject: originalLesson.subject,\n              language: originalLesson.language,\n              date: new Date(),\n              duration: originalLesson.duration,\n              mindsOn: originalLesson.mindsOn,\n              action: originalLesson.action,\n              consolidation: originalLesson.consolidation,\n              learningGoals: originalLesson.learningGoals,\n              materials: originalLesson.materials,\n              grouping: originalLesson.grouping,\n              titleFr: originalLesson.titleFr,\n              mindsOnFr: originalLesson.mindsOnFr,\n              actionFr: originalLesson.actionFr,\n              consolidationFr: originalLesson.consolidationFr,\n              learningGoalsFr: originalLesson.learningGoalsFr,\n              accommodations: originalLesson.accommodations,\n              modifications: originalLesson.modifications,\n              extensions: originalLesson.extensions,\n              assessmentType: originalLesson.assessmentType,\n              assessmentNotes: originalLesson.assessmentNotes,\n              isSubFriendly: originalLesson.isSubFriendly,\n              subNotes: originalLesson.subNotes,\n              expectations: {\n                create: originalLesson.expectations.map((e) => ({\n                  expectationId: e.expectationId,\n                })),\n              },\n            },\n          });\n          break;\n        }\n\n        // TODO: Implement copying for other plan types\n        default:\n          return res.status(400).json({ error: 'Copying this plan type is not yet supported' });\n      }\n\n      // Update copy count\n      await prisma.sharedPlan.update({\n        where: { id: sharedPlan.id },\n        data: { copyCount: { increment: 1 } },\n      });\n\n      logger.info(`Plan copied: ${sharedPlan.planType}/${sharedPlan.planId} by user ${userId}`);\n      res.status(201).json(copiedPlan);\n    }),\n  );\n\n  return router;\n}\n"],"version":3}