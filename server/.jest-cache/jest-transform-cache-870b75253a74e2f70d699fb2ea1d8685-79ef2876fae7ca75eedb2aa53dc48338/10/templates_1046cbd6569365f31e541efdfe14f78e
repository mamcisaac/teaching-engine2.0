3eebd6e1ba4f45d32f46a0af8198cc4f
/* istanbul ignore next */
function cov_2nsoolrvhk() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/templates.ts";
  var hash = "445548153f7faeaa2e8dfac5ef3be9c320535c19";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/templates.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 23
        }
      },
      "1": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 95,
          column: 2
        }
      },
      "2": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 59
        }
      },
      "3": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 114,
          column: 2
        }
      },
      "4": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 227,
          column: 3
        }
      },
      "5": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "6": {
        start: {
          line: 118,
          column: 23
        },
        end: {
          line: 118,
          column: 40
        }
      },
      "7": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "8": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 67
        }
      },
      "9": {
        start: {
          line: 122,
          column: 32
        },
        end: {
          line: 122,
          column: 73
        }
      },
      "10": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "11": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 93
        }
      },
      "12": {
        start: {
          line: 128,
          column: 182
        },
        end: {
          line: 128,
          column: 202
        }
      },
      "13": {
        start: {
          line: 129,
          column: 22
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "14": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 138,
          column: 30
        }
      },
      "15": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 30
        }
      },
      "16": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 140,
          column: 38
        }
      },
      "17": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 38
        }
      },
      "18": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 142,
          column: 36
        }
      },
      "19": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 36
        }
      },
      "20": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "21": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 27
        }
      },
      "22": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "23": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "24": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "25": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 153,
          column: 19
        }
      },
      "26": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 157,
          column: 38
        }
      },
      "27": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 38
        }
      },
      "28": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 159,
          column: 38
        }
      },
      "29": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 38
        }
      },
      "30": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 161,
          column: 52
        }
      },
      "31": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 52
        }
      },
      "32": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "33": {
        start: {
          line: 164,
          column: 25
        },
        end: {
          line: 166,
          column: 20
        }
      },
      "34": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 172,
          column: 14
        }
      },
      "35": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "36": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 179,
          column: 14
        }
      },
      "37": {
        start: {
          line: 182,
          column: 24
        },
        end: {
          line: 182,
          column: 26
        }
      },
      "38": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 192,
          column: 43
        }
      },
      "39": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 38
        }
      },
      "40": {
        start: {
          line: 185,
          column: 13
        },
        end: {
          line: 192,
          column: 43
        }
      },
      "41": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 43
        }
      },
      "42": {
        start: {
          line: 187,
          column: 13
        },
        end: {
          line: 192,
          column: 43
        }
      },
      "43": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 46
        }
      },
      "44": {
        start: {
          line: 189,
          column: 13
        },
        end: {
          line: 192,
          column: 43
        }
      },
      "45": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 42
        }
      },
      "46": {
        start: {
          line: 191,
          column: 13
        },
        end: {
          line: 192,
          column: 43
        }
      },
      "47": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 43
        }
      },
      "48": {
        start: {
          line: 193,
          column: 26
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "49": {
        start: {
          line: 213,
          column: 22
        },
        end: {
          line: 213,
          column: 64
        }
      },
      "50": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "51": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 19
        }
      },
      "52": {
        start: {
          line: 229,
          column: 0
        },
        end: {
          line: 276,
          column: 3
        }
      },
      "53": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "54": {
        start: {
          line: 231,
          column: 23
        },
        end: {
          line: 231,
          column: 40
        }
      },
      "55": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "56": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 67
        }
      },
      "57": {
        start: {
          line: 235,
          column: 25
        },
        end: {
          line: 267,
          column: 10
        }
      },
      "58": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "59": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 73
        }
      },
      "60": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 27
        }
      },
      "61": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 19
        }
      },
      "62": {
        start: {
          line: 278,
          column: 0
        },
        end: {
          line: 322,
          column: 3
        }
      },
      "63": {
        start: {
          line: 279,
          column: 4
        },
        end: {
          line: 321,
          column: 5
        }
      },
      "64": {
        start: {
          line: 280,
          column: 23
        },
        end: {
          line: 280,
          column: 40
        }
      },
      "65": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "66": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 67
        }
      },
      "67": {
        start: {
          line: 284,
          column: 121
        },
        end: {
          line: 284,
          column: 129
        }
      },
      "68": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "69": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 105
        }
      },
      "70": {
        start: {
          line: 291,
          column: 25
        },
        end: {
          line: 316,
          column: 10
        }
      },
      "71": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 39
        }
      },
      "72": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "73": {
        start: {
          line: 324,
          column: 0
        },
        end: {
          line: 373,
          column: 3
        }
      },
      "74": {
        start: {
          line: 325,
          column: 4
        },
        end: {
          line: 372,
          column: 5
        }
      },
      "75": {
        start: {
          line: 326,
          column: 23
        },
        end: {
          line: 326,
          column: 40
        }
      },
      "76": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "77": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 67
        }
      },
      "78": {
        start: {
          line: 331,
          column: 25
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "79": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "80": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 89
        }
      },
      "81": {
        start: {
          line: 341,
          column: 54
        },
        end: {
          line: 341,
          column: 62
        }
      },
      "82": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "83": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 105
        }
      },
      "84": {
        start: {
          line: 346,
          column: 25
        },
        end: {
          line: 367,
          column: 10
        }
      },
      "85": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 27
        }
      },
      "86": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 19
        }
      },
      "87": {
        start: {
          line: 375,
          column: 0
        },
        end: {
          line: 400,
          column: 3
        }
      },
      "88": {
        start: {
          line: 376,
          column: 4
        },
        end: {
          line: 399,
          column: 5
        }
      },
      "89": {
        start: {
          line: 377,
          column: 23
        },
        end: {
          line: 377,
          column: 40
        }
      },
      "90": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "91": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 67
        }
      },
      "92": {
        start: {
          line: 382,
          column: 25
        },
        end: {
          line: 388,
          column: 10
        }
      },
      "93": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "94": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 90
        }
      },
      "95": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 394,
          column: 11
        }
      },
      "96": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 30
        }
      },
      "97": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 19
        }
      },
      "98": {
        start: {
          line: 402,
          column: 0
        },
        end: {
          line: 460,
          column: 3
        }
      },
      "99": {
        start: {
          line: 403,
          column: 4
        },
        end: {
          line: 459,
          column: 5
        }
      },
      "100": {
        start: {
          line: 404,
          column: 23
        },
        end: {
          line: 404,
          column: 40
        }
      },
      "101": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "102": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 67
        }
      },
      "103": {
        start: {
          line: 408,
          column: 44
        },
        end: {
          line: 408,
          column: 52
        }
      },
      "104": {
        start: {
          line: 409,
          column: 25
        },
        end: {
          line: 414,
          column: 10
        }
      },
      "105": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "106": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 73
        }
      },
      "107": {
        start: {
          line: 418,
          column: 27
        },
        end: {
          line: 454,
          column: 10
        }
      },
      "108": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 41
        }
      },
      "109": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 19
        }
      },
      "110": {
        start: {
          line: 462,
          column: 0
        },
        end: {
          line: 508,
          column: 3
        }
      },
      "111": {
        start: {
          line: 463,
          column: 4
        },
        end: {
          line: 507,
          column: 5
        }
      },
      "112": {
        start: {
          line: 464,
          column: 23
        },
        end: {
          line: 464,
          column: 40
        }
      },
      "113": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "114": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 67
        }
      },
      "115": {
        start: {
          line: 468,
          column: 40
        },
        end: {
          line: 468,
          column: 48
        }
      },
      "116": {
        start: {
          line: 469,
          column: 25
        },
        end: {
          line: 474,
          column: 10
        }
      },
      "117": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "118": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 73
        }
      },
      "119": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 485,
          column: 11
        }
      },
      "120": {
        start: {
          line: 487,
          column: 31
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "121": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 503,
          column: 11
        }
      },
      "122": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 506,
          column: 19
        }
      },
      "123": {
        start: {
          line: 510,
          column: 0
        },
        end: {
          line: 564,
          column: 3
        }
      },
      "124": {
        start: {
          line: 511,
          column: 4
        },
        end: {
          line: 563,
          column: 5
        }
      },
      "125": {
        start: {
          line: 512,
          column: 23
        },
        end: {
          line: 512,
          column: 40
        }
      },
      "126": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "127": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 67
        }
      },
      "128": {
        start: {
          line: 516,
          column: 36
        },
        end: {
          line: 516,
          column: 44
        }
      },
      "129": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 519,
          column: 9
        }
      },
      "130": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 518,
          column: 85
        }
      },
      "131": {
        start: {
          line: 521,
          column: 25
        },
        end: {
          line: 526,
          column: 10
        }
      },
      "132": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "133": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 528,
          column: 73
        }
      },
      "134": {
        start: {
          line: 531,
          column: 31
        },
        end: {
          line: 548,
          column: 10
        }
      },
      "135": {
        start: {
          line: 550,
          column: 24
        },
        end: {
          line: 553,
          column: 10
        }
      },
      "136": {
        start: {
          line: 554,
          column: 30
        },
        end: {
          line: 554,
          column: 117
        }
      },
      "137": {
        start: {
          line: 554,
          column: 78
        },
        end: {
          line: 554,
          column: 92
        }
      },
      "138": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 558,
          column: 11
        }
      },
      "139": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 559,
          column: 33
        }
      },
      "140": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 562,
          column: 19
        }
      },
      "141": {
        start: {
          line: 566,
          column: 0
        },
        end: {
          line: 630,
          column: 3
        }
      },
      "142": {
        start: {
          line: 567,
          column: 4
        },
        end: {
          line: 629,
          column: 5
        }
      },
      "143": {
        start: {
          line: 568,
          column: 23
        },
        end: {
          line: 568,
          column: 40
        }
      },
      "144": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 571,
          column: 9
        }
      },
      "145": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 570,
          column: 67
        }
      },
      "146": {
        start: {
          line: 572,
          column: 53
        },
        end: {
          line: 604,
          column: 10
        }
      },
      "147": {
        start: {
          line: 605,
          column: 31
        },
        end: {
          line: 608,
          column: 19
        }
      },
      "148": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 606,
          column: 33
        }
      },
      "149": {
        start: {
          line: 607,
          column: 27
        },
        end: {
          line: 607,
          column: 37
        }
      },
      "150": {
        start: {
          line: 609,
          column: 27
        },
        end: {
          line: 615,
          column: 31
        }
      },
      "151": {
        start: {
          line: 610,
          column: 12
        },
        end: {
          line: 611,
          column: 67
        }
      },
      "152": {
        start: {
          line: 611,
          column: 16
        },
        end: {
          line: 611,
          column: 67
        }
      },
      "153": {
        start: {
          line: 612,
          column: 12
        },
        end: {
          line: 613,
          column: 67
        }
      },
      "154": {
        start: {
          line: 613,
          column: 16
        },
        end: {
          line: 613,
          column: 67
        }
      },
      "155": {
        start: {
          line: 614,
          column: 12
        },
        end: {
          line: 614,
          column: 25
        }
      },
      "156": {
        start: {
          line: 616,
          column: 24
        },
        end: {
          line: 619,
          column: 19
        }
      },
      "157": {
        start: {
          line: 617,
          column: 29
        },
        end: {
          line: 617,
          column: 64
        }
      },
      "158": {
        start: {
          line: 618,
          column: 43
        },
        end: {
          line: 618,
          column: 71
        }
      },
      "159": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 625,
          column: 11
        }
      },
      "160": {
        start: {
          line: 622,
          column: 90
        },
        end: {
          line: 622,
          column: 108
        }
      },
      "161": {
        start: {
          line: 623,
          column: 46
        },
        end: {
          line: 623,
          column: 56
        }
      },
      "162": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 628,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        loc: {
          start: {
            line: 116,
            column: 43
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 116
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 229,
            column: 19
          },
          end: {
            line: 229,
            column: 20
          }
        },
        loc: {
          start: {
            line: 229,
            column: 46
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 229
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 278,
            column: 49
          },
          end: {
            line: 278,
            column: 50
          }
        },
        loc: {
          start: {
            line: 278,
            column: 76
          },
          end: {
            line: 322,
            column: 1
          }
        },
        line: 278
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 324,
            column: 51
          },
          end: {
            line: 324,
            column: 52
          }
        },
        loc: {
          start: {
            line: 324,
            column: 78
          },
          end: {
            line: 373,
            column: 1
          }
        },
        line: 324
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 375,
            column: 22
          },
          end: {
            line: 375,
            column: 23
          }
        },
        loc: {
          start: {
            line: 375,
            column: 49
          },
          end: {
            line: 400,
            column: 1
          }
        },
        line: 375
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 402,
            column: 30
          },
          end: {
            line: 402,
            column: 31
          }
        },
        loc: {
          start: {
            line: 402,
            column: 57
          },
          end: {
            line: 460,
            column: 1
          }
        },
        line: 402
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 462,
            column: 26
          },
          end: {
            line: 462,
            column: 27
          }
        },
        loc: {
          start: {
            line: 462,
            column: 53
          },
          end: {
            line: 508,
            column: 1
          }
        },
        line: 462
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 510,
            column: 25
          },
          end: {
            line: 510,
            column: 26
          }
        },
        loc: {
          start: {
            line: 510,
            column: 52
          },
          end: {
            line: 564,
            column: 1
          }
        },
        line: 510
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 554,
            column: 66
          },
          end: {
            line: 554,
            column: 67
          }
        },
        loc: {
          start: {
            line: 554,
            column: 78
          },
          end: {
            line: 554,
            column: 92
          }
        },
        line: 554
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 566,
            column: 32
          },
          end: {
            line: 566,
            column: 33
          }
        },
        loc: {
          start: {
            line: 566,
            column: 59
          },
          end: {
            line: 630,
            column: 1
          }
        },
        line: 566
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 606,
            column: 17
          },
          end: {
            line: 606,
            column: 18
          }
        },
        loc: {
          start: {
            line: 606,
            column: 24
          },
          end: {
            line: 606,
            column: 33
          }
        },
        line: 606
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 607,
            column: 20
          },
          end: {
            line: 607,
            column: 21
          }
        },
        loc: {
          start: {
            line: 607,
            column: 27
          },
          end: {
            line: 607,
            column: 37
          }
        },
        line: 607
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 609,
            column: 41
          },
          end: {
            line: 609,
            column: 42
          }
        },
        loc: {
          start: {
            line: 609,
            column: 62
          },
          end: {
            line: 615,
            column: 9
          }
        },
        line: 609
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 617,
            column: 21
          },
          end: {
            line: 617,
            column: 22
          }
        },
        loc: {
          start: {
            line: 617,
            column: 29
          },
          end: {
            line: 617,
            column: 64
          }
        },
        line: 617
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 618,
            column: 20
          },
          end: {
            line: 618,
            column: 21
          }
        },
        loc: {
          start: {
            line: 618,
            column: 43
          },
          end: {
            line: 618,
            column: 71
          }
        },
        line: 618
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 622,
            column: 80
          },
          end: {
            line: 622,
            column: 81
          }
        },
        loc: {
          start: {
            line: 622,
            column: 90
          },
          end: {
            line: 622,
            column: 108
          }
        },
        line: 622
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 623,
            column: 39
          },
          end: {
            line: 623,
            column: 40
          }
        },
        loc: {
          start: {
            line: 623,
            column: 46
          },
          end: {
            line: 623,
            column: 56
          }
        },
        line: 623
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 118,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 118,
            column: 35
          }
        }, {
          start: {
            line: 118,
            column: 39
          },
          end: {
            line: 118,
            column: 40
          }
        }],
        line: 118
      },
      "1": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "2": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "3": {
        loc: {
          start: {
            line: 128,
            column: 112
          },
          end: {
            line: 128,
            column: 132
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 121
          },
          end: {
            line: 128,
            column: 132
          }
        }],
        line: 128
      },
      "4": {
        loc: {
          start: {
            line: 128,
            column: 134
          },
          end: {
            line: 128,
            column: 152
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 146
          },
          end: {
            line: 128,
            column: 152
          }
        }],
        line: 128
      },
      "5": {
        loc: {
          start: {
            line: 128,
            column: 154
          },
          end: {
            line: 128,
            column: 164
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 162
          },
          end: {
            line: 128,
            column: 164
          }
        }],
        line: 128
      },
      "6": {
        loc: {
          start: {
            line: 128,
            column: 166
          },
          end: {
            line: 128,
            column: 176
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 175
          },
          end: {
            line: 128,
            column: 176
          }
        }],
        line: 128
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 138,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 138,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 140,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 140,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "9": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 142,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 142,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 34
          }
        }, {
          start: {
            line: 143,
            column: 38
          },
          end: {
            line: 143,
            column: 60
          }
        }],
        line: 143
      },
      "12": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 157,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 157,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "15": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "16": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 161,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 161,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "17": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "18": {
        loc: {
          start: {
            line: 164,
            column: 25
          },
          end: {
            line: 166,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 18
          },
          end: {
            line: 165,
            column: 41
          }
        }, {
          start: {
            line: 166,
            column: 18
          },
          end: {
            line: 166,
            column: 20
          }
        }],
        line: 164
      },
      "19": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "20": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 16
          }
        }, {
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 175,
            column: 35
          }
        }],
        line: 175
      },
      "21": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 192,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 192,
            column: 43
          }
        }, {
          start: {
            line: 185,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }],
        line: 183
      },
      "22": {
        loc: {
          start: {
            line: 185,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }, {
          start: {
            line: 187,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }],
        line: 185
      },
      "23": {
        loc: {
          start: {
            line: 187,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }, {
          start: {
            line: 189,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }],
        line: 187
      },
      "24": {
        loc: {
          start: {
            line: 189,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }, {
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }],
        line: 189
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 192,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 35
          }
        }, {
          start: {
            line: 231,
            column: 39
          },
          end: {
            line: 231,
            column: 40
          }
        }],
        line: 231
      },
      "27": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "28": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "29": {
        loc: {
          start: {
            line: 280,
            column: 23
          },
          end: {
            line: 280,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 23
          },
          end: {
            line: 280,
            column: 35
          }
        }, {
          start: {
            line: 280,
            column: 39
          },
          end: {
            line: 280,
            column: 40
          }
        }],
        line: 280
      },
      "30": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "31": {
        loc: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 284,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 284,
            column: 25
          }
        }],
        line: 284
      },
      "32": {
        loc: {
          start: {
            line: 284,
            column: 27
          },
          end: {
            line: 284,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 284,
            column: 38
          },
          end: {
            line: 284,
            column: 40
          }
        }],
        line: 284
      },
      "33": {
        loc: {
          start: {
            line: 284,
            column: 42
          },
          end: {
            line: 284,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 284,
            column: 53
          },
          end: {
            line: 284,
            column: 58
          }
        }],
        line: 284
      },
      "34": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "35": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 288,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 33
          }
        }, {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 287,
            column: 33
          }
        }, {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 57
          }
        }],
        line: 286
      },
      "36": {
        loc: {
          start: {
            line: 299,
            column: 31
          },
          end: {
            line: 299,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 31
          },
          end: {
            line: 299,
            column: 44
          }
        }, {
          start: {
            line: 299,
            column: 48
          },
          end: {
            line: 299,
            column: 52
          }
        }],
        line: 299
      },
      "37": {
        loc: {
          start: {
            line: 300,
            column: 33
          },
          end: {
            line: 300,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 33
          },
          end: {
            line: 300,
            column: 48
          }
        }, {
          start: {
            line: 300,
            column: 52
          },
          end: {
            line: 300,
            column: 56
          }
        }],
        line: 300
      },
      "38": {
        loc: {
          start: {
            line: 326,
            column: 23
          },
          end: {
            line: 326,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 23
          },
          end: {
            line: 326,
            column: 35
          }
        }, {
          start: {
            line: 326,
            column: 39
          },
          end: {
            line: 326,
            column: 40
          }
        }],
        line: 326
      },
      "39": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "40": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "41": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "42": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 20
          }
        }, {
          start: {
            line: 343,
            column: 24
          },
          end: {
            line: 343,
            column: 32
          }
        }, {
          start: {
            line: 343,
            column: 36
          },
          end: {
            line: 343,
            column: 55
          }
        }],
        line: 343
      },
      "43": {
        loc: {
          start: {
            line: 377,
            column: 23
          },
          end: {
            line: 377,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 23
          },
          end: {
            line: 377,
            column: 35
          }
        }, {
          start: {
            line: 377,
            column: 39
          },
          end: {
            line: 377,
            column: 40
          }
        }],
        line: 377
      },
      "44": {
        loc: {
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "45": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "46": {
        loc: {
          start: {
            line: 404,
            column: 23
          },
          end: {
            line: 404,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 23
          },
          end: {
            line: 404,
            column: 35
          }
        }, {
          start: {
            line: 404,
            column: 39
          },
          end: {
            line: 404,
            column: 40
          }
        }],
        line: 404
      },
      "47": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "48": {
        loc: {
          start: {
            line: 408,
            column: 23
          },
          end: {
            line: 408,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 408,
            column: 34
          },
          end: {
            line: 408,
            column: 39
          }
        }],
        line: 408
      },
      "49": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "50": {
        loc: {
          start: {
            line: 420,
            column: 23
          },
          end: {
            line: 420,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 23
          },
          end: {
            line: 420,
            column: 28
          }
        }, {
          start: {
            line: 420,
            column: 32
          },
          end: {
            line: 420,
            column: 58
          }
        }],
        line: 420
      },
      "51": {
        loc: {
          start: {
            line: 421,
            column: 25
          },
          end: {
            line: 421,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 421,
            column: 44
          },
          end: {
            line: 421,
            column: 73
          }
        }, {
          start: {
            line: 421,
            column: 76
          },
          end: {
            line: 421,
            column: 80
          }
        }],
        line: 421
      },
      "52": {
        loc: {
          start: {
            line: 464,
            column: 23
          },
          end: {
            line: 464,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 23
          },
          end: {
            line: 464,
            column: 35
          }
        }, {
          start: {
            line: 464,
            column: 39
          },
          end: {
            line: 464,
            column: 40
          }
        }],
        line: 464
      },
      "53": {
        loc: {
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 8
          },
          end: {
            line: 467,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "54": {
        loc: {
          start: {
            line: 468,
            column: 16
          },
          end: {
            line: 468,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 468,
            column: 33
          },
          end: {
            line: 468,
            column: 35
          }
        }],
        line: 468
      },
      "55": {
        loc: {
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "56": {
        loc: {
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 489,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 489,
            column: 30
          }
        }, {
          start: {
            line: 489,
            column: 34
          },
          end: {
            line: 489,
            column: 36
          }
        }],
        line: 489
      },
      "57": {
        loc: {
          start: {
            line: 512,
            column: 23
          },
          end: {
            line: 512,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 23
          },
          end: {
            line: 512,
            column: 35
          }
        }, {
          start: {
            line: 512,
            column: 39
          },
          end: {
            line: 512,
            column: 40
          }
        }],
        line: 512
      },
      "58": {
        loc: {
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "59": {
        loc: {
          start: {
            line: 517,
            column: 8
          },
          end: {
            line: 519,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 517,
            column: 8
          },
          end: {
            line: 519,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 517
      },
      "60": {
        loc: {
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 517,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 517,
            column: 19
          }
        }, {
          start: {
            line: 517,
            column: 23
          },
          end: {
            line: 517,
            column: 33
          }
        }, {
          start: {
            line: 517,
            column: 37
          },
          end: {
            line: 517,
            column: 47
          }
        }],
        line: 517
      },
      "61": {
        loc: {
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "62": {
        loc: {
          start: {
            line: 554,
            column: 30
          },
          end: {
            line: 554,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 554,
            column: 51
          },
          end: {
            line: 554,
            column: 113
          }
        }, {
          start: {
            line: 554,
            column: 116
          },
          end: {
            line: 554,
            column: 117
          }
        }],
        line: 554
      },
      "63": {
        loc: {
          start: {
            line: 568,
            column: 23
          },
          end: {
            line: 568,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 568,
            column: 23
          },
          end: {
            line: 568,
            column: 35
          }
        }, {
          start: {
            line: 568,
            column: 39
          },
          end: {
            line: 568,
            column: 40
          }
        }],
        line: 568
      },
      "64": {
        loc: {
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 571,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 571,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 569
      },
      "65": {
        loc: {
          start: {
            line: 610,
            column: 12
          },
          end: {
            line: 611,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 610,
            column: 12
          },
          end: {
            line: 611,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 610
      },
      "66": {
        loc: {
          start: {
            line: 612,
            column: 12
          },
          end: {
            line: 613,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 612,
            column: 12
          },
          end: {
            line: 613,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 612
      },
      "67": {
        loc: {
          start: {
            line: 617,
            column: 29
          },
          end: {
            line: 617,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 617,
            column: 53
          },
          end: {
            line: 617,
            column: 59
          }
        }, {
          start: {
            line: 617,
            column: 62
          },
          end: {
            line: 617,
            column: 64
          }
        }],
        line: 617
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0],
      "33": [0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/templates.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/templates.ts"],
      sourcesContent: ["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate } from '../validation';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schemas\nconst templateCreateSchema = z.object({\n  title: z\n    .string()\n    .min(1)\n    .max(255)\n    .regex(/^[^<>]*$/, 'Title cannot contain HTML tags'),\n  titleFr: z\n    .string()\n    .max(255)\n    .regex(/^[^<>]*$/, 'French title cannot contain HTML tags')\n    .optional(),\n  description: z.string().max(2000).optional(),\n  descriptionFr: z.string().max(2000).optional(),\n  type: z.enum(['UNIT_PLAN', 'LESSON_PLAN']),\n  category: z.enum(['BY_SUBJECT', 'BY_GRADE', 'BY_THEME', 'BY_SEASON', 'BY_SKILL', 'CUSTOM']),\n  subject: z.string().max(100).optional(),\n  gradeMin: z.number().int().min(1).max(12).optional(),\n  gradeMax: z.number().int().min(1).max(12).optional(),\n  tags: z.array(z.string().max(50)).max(20).optional(),\n  keywords: z.array(z.string().max(50)).max(20).optional(),\n  isPublic: z.boolean().optional(),\n  estimatedWeeks: z.number().int().positive().max(52).optional(),\n  estimatedMinutes: z.number().int().positive().max(480).optional(),\n  content: z.object({\n    // Unit Plan fields\n    overview: z.string().optional(),\n    learningGoals: z.array(z.string()).optional(),\n    bigIdeas: z.string().optional(),\n    essentialQuestions: z.array(z.string()).optional(),\n    assessments: z.array(z.record(z.unknown())).optional(),\n    activities: z.array(z.record(z.unknown())).optional(),\n    successCriteria: z.array(z.string()).optional(),\n    keyVocabulary: z.array(z.string()).optional(),\n    crossCurricularConnections: z.string().optional(),\n    differentiationStrategies: z\n      .object({\n        forStruggling: z.array(z.string()).optional(),\n        forAdvanced: z.array(z.string()).optional(),\n        forELL: z.array(z.string()).optional(),\n        forIEP: z.array(z.string()).optional(),\n      })\n      .optional(),\n    // Lesson Plan fields\n    objectives: z.array(z.string()).optional(),\n    materials: z.array(z.string()).optional(),\n    mindsOn: z.string().optional(),\n    action: z.string().optional(),\n    consolidation: z.string().optional(),\n    grouping: z.string().optional(),\n    accommodations: z.array(z.string()).optional(),\n    modifications: z.array(z.string()).optional(),\n    extensions: z.array(z.string()).optional(),\n    assessmentType: z.string().optional(),\n    assessmentNotes: z.string().optional(),\n  }),\n  unitStructure: z\n    .object({\n      phases: z\n        .array(\n          z.object({\n            name: z.string(),\n            description: z.string().optional(),\n            estimatedDays: z.number().optional(),\n            learningGoals: z.array(z.string()).optional(),\n          }),\n        )\n        .optional(),\n      resources: z\n        .array(\n          z.object({\n            title: z.string(),\n            type: z.string(),\n            url: z.string().optional(),\n            notes: z.string().optional(),\n          }),\n        )\n        .optional(),\n    })\n    .optional(),\n  lessonStructure: z\n    .object({\n      duration: z.number().optional(),\n      sections: z\n        .array(\n          z.object({\n            name: z.string(),\n            description: z.string(),\n            timeAllocation: z.number().optional(),\n            activities: z.array(z.string()).optional(),\n          }),\n        )\n        .optional(),\n    })\n    .optional(),\n});\n\nconst templateUpdateSchema = templateCreateSchema.partial();\n\nconst templateSearchSchema = z.object({\n  type: z.enum(['UNIT_PLAN', 'LESSON_PLAN']).optional(),\n  category: z\n    .enum(['BY_SUBJECT', 'BY_GRADE', 'BY_THEME', 'BY_SEASON', 'BY_SKILL', 'CUSTOM'])\n    .optional(),\n  subject: z.string().optional(),\n  gradeMin: z.number().int().min(1).max(12).optional(),\n  gradeMax: z.number().int().min(1).max(12).optional(),\n  isSystem: z.boolean().optional(),\n  isPublic: z.boolean().optional(),\n  createdByUserId: z.number().int().optional(),\n  search: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  sortBy: z.enum(['title', 'usageCount', 'averageRating', 'createdAt', 'lastUsedAt']).optional(),\n  sortOrder: z.enum(['asc', 'desc']).optional(),\n  limit: z.number().int().min(1).max(100).optional(),\n  offset: z.number().int().min(0).optional(),\n});\n\n// Get all templates with filtering and search\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const queryValidation = templateSearchSchema.safeParse(req.query);\n    if (!queryValidation.success) {\n      return res\n        .status(400)\n        .json({ error: 'Invalid query parameters', details: queryValidation.error });\n    }\n\n    const {\n      type,\n      category,\n      subject,\n      gradeMin,\n      gradeMax,\n      isSystem,\n      isPublic,\n      createdByUserId,\n      search,\n      tags,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      limit = 20,\n      offset = 0,\n    } = queryValidation.data;\n\n    const where: Prisma.PlanTemplateWhereInput = {\n      OR: [\n        { isSystem: true }, // System templates visible to all\n        { isPublic: true }, // Public templates visible to all\n        { createdByUserId: userId }, // User's own templates\n      ],\n    };\n\n    // Apply filters\n    if (type) where.type = type;\n    if (category) where.category = category;\n    if (subject) where.subject = subject;\n    if (gradeMin !== undefined || gradeMax !== undefined) {\n      where.AND = [];\n      if (gradeMin !== undefined) {\n        where.AND.push({\n          OR: [{ gradeMin: { lte: gradeMin } }, { gradeMin: null }],\n        });\n      }\n      if (gradeMax !== undefined) {\n        where.AND.push({\n          OR: [{ gradeMax: { gte: gradeMax } }, { gradeMax: null }],\n        });\n      }\n    }\n    if (isSystem !== undefined) where.isSystem = isSystem;\n    if (isPublic !== undefined) where.isPublic = isPublic;\n    if (createdByUserId !== undefined) where.createdByUserId = createdByUserId;\n\n    // Text search with database-specific case handling\n    if (search) {\n      const mode = process.env.DATABASE_URL?.includes('postgresql')\n        ? { mode: 'insensitive' as const }\n        : {};\n\n      where.OR = [\n        { title: { contains: search, ...mode } },\n        { description: { contains: search, ...mode } },\n        { titleFr: { contains: search, ...mode } },\n        { descriptionFr: { contains: search, ...mode } },\n      ];\n    }\n\n    // Tag filtering - Using JSON array contains for tags\n    if (tags && tags.length > 0) {\n      where.tags = {\n        path: [],\n        array_contains: tags,\n      } as Prisma.JsonFilter; // Type assertion for JSON array operations\n    }\n\n    // Sorting\n    const orderBy: Prisma.PlanTemplateOrderByWithRelationInput = {};\n    if (sortBy === 'title') orderBy.title = sortOrder;\n    else if (sortBy === 'usageCount') orderBy.usageCount = sortOrder;\n    else if (sortBy === 'averageRating') orderBy.averageRating = sortOrder;\n    else if (sortBy === 'createdAt') orderBy.createdAt = sortOrder;\n    else if (sortBy === 'lastUsedAt') orderBy.lastUsedAt = sortOrder;\n\n    const templates = await prisma.planTemplate.findMany({\n      where,\n      orderBy,\n      take: limit,\n      skip: offset,\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        _count: {\n          select: {\n            ratings: true,\n            variations: true,\n          },\n        },\n      },\n    });\n\n    const total = await prisma.planTemplate.count({ where });\n\n    res.json({\n      templates,\n      pagination: {\n        total,\n        limit,\n        offset,\n        hasMore: offset + limit < total,\n      },\n    });\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single template\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: req.params.id,\n        OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        ratings: {\n          select: {\n            id: true,\n            userId: true,\n            rating: true,\n            comment: true,\n            createdAt: true,\n          },\n          orderBy: { createdAt: 'desc' },\n          take: 5,\n        },\n        variations: {\n          orderBy: { createdAt: 'desc' },\n        },\n        _count: {\n          select: {\n            ratings: true,\n          },\n        },\n      },\n    });\n\n    if (!template) {\n      return res.status(404).json({ error: 'Template not found' });\n    }\n\n    res.json(template);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new template\nrouter.post('/', validate(templateCreateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const {\n      tags = [],\n      keywords = [],\n      isPublic = false,\n      content,\n      unitStructure,\n      lessonStructure,\n      ...templateData\n    } = req.body;\n\n    // Validate grade range\n    if (\n      templateData.gradeMin &&\n      templateData.gradeMax &&\n      templateData.gradeMin > templateData.gradeMax\n    ) {\n      return res.status(400).json({ error: 'Minimum grade cannot be greater than maximum grade' });\n    }\n\n    const template = await prisma.planTemplate.create({\n      data: {\n        ...templateData,\n        createdByUserId: userId,\n        tags,\n        keywords,\n        isPublic,\n        content,\n        unitStructure: unitStructure || null,\n        lessonStructure: lessonStructure || null,\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        _count: {\n          select: {\n            ratings: true,\n            variations: true,\n          },\n        },\n      },\n    });\n\n    res.status(201).json(template);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a template\nrouter.put('/:id', validate(templateUpdateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership (only creator can edit)\n    const existing = await prisma.planTemplate.findFirst({\n      where: {\n        id: req.params.id,\n        createdByUserId: userId,\n        isSystem: false, // System templates cannot be edited\n      },\n    });\n\n    if (!existing) {\n      return res.status(404).json({ error: 'Template not found or not editable' });\n    }\n\n    const { gradeMin, gradeMax, ...updateData } = req.body;\n\n    // Validate grade range if provided\n    if (gradeMin && gradeMax && gradeMin > gradeMax) {\n      return res.status(400).json({ error: 'Minimum grade cannot be greater than maximum grade' });\n    }\n\n    const template = await prisma.planTemplate.update({\n      where: { id: req.params.id },\n      data: {\n        ...updateData,\n        gradeMin,\n        gradeMax,\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        variations: true,\n        _count: {\n          select: {\n            ratings: true,\n          },\n        },\n      },\n    });\n\n    res.json(template);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a template\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: req.params.id,\n        createdByUserId: userId,\n        isSystem: false, // System templates cannot be deleted\n      },\n    });\n\n    if (!template) {\n      return res.status(404).json({ error: 'Template not found or not deletable' });\n    }\n\n    await prisma.planTemplate.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Duplicate a template\nrouter.post('/:id/duplicate', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { title, isPublic = false } = req.body;\n\n    const original = await prisma.planTemplate.findFirst({\n      where: {\n        id: req.params.id,\n        OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n      },\n    });\n\n    if (!original) {\n      return res.status(404).json({ error: 'Template not found' });\n    }\n\n    const duplicated = await prisma.planTemplate.create({\n      data: {\n        title: title || `${original.title} (Copy)`,\n        titleFr: original.titleFr ? `${original.titleFr} (Copie)` : null,\n        description: original.description,\n        descriptionFr: original.descriptionFr,\n        type: original.type,\n        category: original.category,\n        subject: original.subject,\n        gradeMin: original.gradeMin,\n        gradeMax: original.gradeMax,\n        tags: original.tags,\n        keywords: original.keywords,\n        createdByUserId: userId,\n        isSystem: false,\n        isPublic,\n        content: original.content,\n        estimatedWeeks: original.estimatedWeeks,\n        unitStructure: original.unitStructure,\n        estimatedMinutes: original.estimatedMinutes,\n        lessonStructure: original.lessonStructure,\n      },\n      include: {\n        createdByUser: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n        _count: {\n          select: {\n            ratings: true,\n            variations: true,\n          },\n        },\n      },\n    });\n\n    res.status(201).json(duplicated);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Apply template to create a new plan\nrouter.post('/:id/apply', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { customizations = {} } = req.body;\n\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: req.params.id,\n        OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n      },\n    });\n\n    if (!template) {\n      return res.status(404).json({ error: 'Template not found' });\n    }\n\n    // Update usage tracking\n    await prisma.planTemplate.update({\n      where: { id: template.id },\n      data: {\n        usageCount: { increment: 1 },\n        lastUsedAt: new Date(),\n      },\n    });\n\n    // Merge template content with user customizations\n    const appliedContent = {\n      ...(template.content as Record<string, unknown>),\n      ...(customizations || {}),\n    };\n\n    res.json({\n      template: {\n        id: template.id,\n        title: template.title,\n        type: template.type,\n        content: appliedContent,\n        unitStructure: template.unitStructure,\n        lessonStructure: template.lessonStructure,\n        estimatedWeeks: template.estimatedWeeks,\n        estimatedMinutes: template.estimatedMinutes,\n      },\n      appliedContent,\n    });\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Rate a template\nrouter.post('/:id/rate', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { rating, comment } = req.body;\n\n    if (!rating || rating < 1 || rating > 5) {\n      return res.status(400).json({ error: 'Rating must be between 1 and 5' });\n    }\n\n    // Check if template exists and is accessible\n    const template = await prisma.planTemplate.findFirst({\n      where: {\n        id: req.params.id,\n        OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n      },\n    });\n\n    if (!template) {\n      return res.status(404).json({ error: 'Template not found' });\n    }\n\n    // Upsert rating\n    const templateRating = await prisma.templateRating.upsert({\n      where: {\n        templateId_userId: {\n          templateId: req.params.id,\n          userId,\n        },\n      },\n      update: {\n        rating,\n        comment,\n      },\n      create: {\n        templateId: req.params.id,\n        userId,\n        rating,\n        comment,\n      },\n    });\n\n    // Recalculate average rating\n    const ratings = await prisma.templateRating.findMany({\n      where: { templateId: req.params.id },\n      select: { rating: true },\n    });\n\n    const averageRating =\n      ratings.length > 0 ? ratings.reduce((sum, r) => sum + r.rating, 0) / ratings.length : 0;\n\n    await prisma.planTemplate.update({\n      where: { id: req.params.id },\n      data: { averageRating },\n    });\n\n    res.json(templateRating);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get categories and subjects for filtering\nrouter.get('/metadata/options', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const [subjects, grades, categories, tags] = await Promise.all([\n      prisma.planTemplate.findMany({\n        where: {\n          OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n          subject: { not: null },\n        },\n        select: { subject: true },\n        distinct: ['subject'],\n      }),\n      prisma.planTemplate.findMany({\n        where: {\n          AND: [\n            {\n              OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n            },\n            {\n              OR: [{ gradeMin: { not: null } }, { gradeMax: { not: null } }],\n            },\n          ],\n        },\n        select: { gradeMin: true, gradeMax: true },\n      }),\n      prisma.planTemplate.findMany({\n        select: { category: true },\n        distinct: ['category'],\n      }),\n      prisma.planTemplate.findMany({\n        where: {\n          OR: [{ isSystem: true }, { isPublic: true }, { createdByUserId: userId }],\n        },\n        select: { tags: true },\n      }),\n    ]);\n\n    const uniqueSubjects = subjects\n      .map((t) => t.subject)\n      .filter((s) => s !== null)\n      .sort();\n\n    const gradeRange = grades.reduce(\n      (range, template) => {\n        if (template.gradeMin) range.min = Math.min(range.min, template.gradeMin);\n        if (template.gradeMax) range.max = Math.max(range.max, template.gradeMax);\n        return range;\n      },\n      { min: 12, max: 1 },\n    );\n\n    const allTags = tags\n      .flatMap((t) => (Array.isArray(t.tags) ? t.tags : []))\n      .filter((tag, index, array) => array.indexOf(tag) === index)\n      .sort();\n\n    res.json({\n      subjects: uniqueSubjects,\n      grades: Array.from(\n        { length: gradeRange.max - gradeRange.min + 1 },\n        (_, i) => gradeRange.min + i,\n      ),\n      categories: categories.map((c) => c.category),\n      tags: allTags,\n    });\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "445548153f7faeaa2e8dfac5ef3be9c320535c19"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nsoolrvhk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nsoolrvhk();
import { Router } from 'express';
import { prisma } from '../prisma';
import { validate } from '../validation';
import { z } from 'zod';
const router =
/* istanbul ignore next */
(cov_2nsoolrvhk().s[0]++, Router());
// Validation schemas
const templateCreateSchema =
/* istanbul ignore next */
(cov_2nsoolrvhk().s[1]++, z.object({
  title: z.string().min(1).max(255).regex(/^[^<>]*$/, 'Title cannot contain HTML tags'),
  titleFr: z.string().max(255).regex(/^[^<>]*$/, 'French title cannot contain HTML tags').optional(),
  description: z.string().max(2000).optional(),
  descriptionFr: z.string().max(2000).optional(),
  type: z.enum(['UNIT_PLAN', 'LESSON_PLAN']),
  category: z.enum(['BY_SUBJECT', 'BY_GRADE', 'BY_THEME', 'BY_SEASON', 'BY_SKILL', 'CUSTOM']),
  subject: z.string().max(100).optional(),
  gradeMin: z.number().int().min(1).max(12).optional(),
  gradeMax: z.number().int().min(1).max(12).optional(),
  tags: z.array(z.string().max(50)).max(20).optional(),
  keywords: z.array(z.string().max(50)).max(20).optional(),
  isPublic: z.boolean().optional(),
  estimatedWeeks: z.number().int().positive().max(52).optional(),
  estimatedMinutes: z.number().int().positive().max(480).optional(),
  content: z.object({
    // Unit Plan fields
    overview: z.string().optional(),
    learningGoals: z.array(z.string()).optional(),
    bigIdeas: z.string().optional(),
    essentialQuestions: z.array(z.string()).optional(),
    assessments: z.array(z.record(z.unknown())).optional(),
    activities: z.array(z.record(z.unknown())).optional(),
    successCriteria: z.array(z.string()).optional(),
    keyVocabulary: z.array(z.string()).optional(),
    crossCurricularConnections: z.string().optional(),
    differentiationStrategies: z.object({
      forStruggling: z.array(z.string()).optional(),
      forAdvanced: z.array(z.string()).optional(),
      forELL: z.array(z.string()).optional(),
      forIEP: z.array(z.string()).optional()
    }).optional(),
    // Lesson Plan fields
    objectives: z.array(z.string()).optional(),
    materials: z.array(z.string()).optional(),
    mindsOn: z.string().optional(),
    action: z.string().optional(),
    consolidation: z.string().optional(),
    grouping: z.string().optional(),
    accommodations: z.array(z.string()).optional(),
    modifications: z.array(z.string()).optional(),
    extensions: z.array(z.string()).optional(),
    assessmentType: z.string().optional(),
    assessmentNotes: z.string().optional()
  }),
  unitStructure: z.object({
    phases: z.array(z.object({
      name: z.string(),
      description: z.string().optional(),
      estimatedDays: z.number().optional(),
      learningGoals: z.array(z.string()).optional()
    })).optional(),
    resources: z.array(z.object({
      title: z.string(),
      type: z.string(),
      url: z.string().optional(),
      notes: z.string().optional()
    })).optional()
  }).optional(),
  lessonStructure: z.object({
    duration: z.number().optional(),
    sections: z.array(z.object({
      name: z.string(),
      description: z.string(),
      timeAllocation: z.number().optional(),
      activities: z.array(z.string()).optional()
    })).optional()
  }).optional()
}));
const templateUpdateSchema =
/* istanbul ignore next */
(cov_2nsoolrvhk().s[2]++, templateCreateSchema.partial());
const templateSearchSchema =
/* istanbul ignore next */
(cov_2nsoolrvhk().s[3]++, z.object({
  type: z.enum(['UNIT_PLAN', 'LESSON_PLAN']).optional(),
  category: z.enum(['BY_SUBJECT', 'BY_GRADE', 'BY_THEME', 'BY_SEASON', 'BY_SKILL', 'CUSTOM']).optional(),
  subject: z.string().optional(),
  gradeMin: z.number().int().min(1).max(12).optional(),
  gradeMax: z.number().int().min(1).max(12).optional(),
  isSystem: z.boolean().optional(),
  isPublic: z.boolean().optional(),
  createdByUserId: z.number().int().optional(),
  search: z.string().optional(),
  tags: z.array(z.string()).optional(),
  sortBy: z.enum(['title', 'usageCount', 'averageRating', 'createdAt', 'lastUsedAt']).optional(),
  sortOrder: z.enum(['asc', 'desc']).optional(),
  limit: z.number().int().min(1).max(100).optional(),
  offset: z.number().int().min(0).optional()
}));
// Get all templates with filtering and search
/* istanbul ignore next */
cov_2nsoolrvhk().s[4]++;
router.get('/', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[0]++;
  cov_2nsoolrvhk().s[5]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[6]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[0][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[0][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[7]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[1][0]++;
      cov_2nsoolrvhk().s[8]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[1][1]++;
    }
    const queryValidation =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[9]++, templateSearchSchema.safeParse(req.query));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[10]++;
    if (!queryValidation.success) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[2][0]++;
      cov_2nsoolrvhk().s[11]++;
      return res.status(400).json({
        error: 'Invalid query parameters',
        details: queryValidation.error
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[2][1]++;
    }
    const {
      type,
      category,
      subject,
      gradeMin,
      gradeMax,
      isSystem,
      isPublic,
      createdByUserId,
      search,
      tags,
      sortBy =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[3][0]++, 'createdAt'),
      sortOrder =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[4][0]++, 'desc'),
      limit =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[5][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[6][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[12]++, queryValidation.data);
    const where =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[13]++, {
      OR: [{
        isSystem: true
      },
      // System templates visible to all
      {
        isPublic: true
      },
      // Public templates visible to all
      {
        createdByUserId: userId
      } // User's own templates
      ]
    });
    // Apply filters
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[14]++;
    if (type) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[7][0]++;
      cov_2nsoolrvhk().s[15]++;
      where.type = type;
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[7][1]++;
    }
    cov_2nsoolrvhk().s[16]++;
    if (category) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[8][0]++;
      cov_2nsoolrvhk().s[17]++;
      where.category = category;
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[8][1]++;
    }
    cov_2nsoolrvhk().s[18]++;
    if (subject) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[9][0]++;
      cov_2nsoolrvhk().s[19]++;
      where.subject = subject;
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[9][1]++;
    }
    cov_2nsoolrvhk().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[11][0]++, gradeMin !== undefined) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[11][1]++, gradeMax !== undefined)) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[10][0]++;
      cov_2nsoolrvhk().s[21]++;
      where.AND = [];
      /* istanbul ignore next */
      cov_2nsoolrvhk().s[22]++;
      if (gradeMin !== undefined) {
        /* istanbul ignore next */
        cov_2nsoolrvhk().b[12][0]++;
        cov_2nsoolrvhk().s[23]++;
        where.AND.push({
          OR: [{
            gradeMin: {
              lte: gradeMin
            }
          }, {
            gradeMin: null
          }]
        });
      } else
      /* istanbul ignore next */
      {
        cov_2nsoolrvhk().b[12][1]++;
      }
      cov_2nsoolrvhk().s[24]++;
      if (gradeMax !== undefined) {
        /* istanbul ignore next */
        cov_2nsoolrvhk().b[13][0]++;
        cov_2nsoolrvhk().s[25]++;
        where.AND.push({
          OR: [{
            gradeMax: {
              gte: gradeMax
            }
          }, {
            gradeMax: null
          }]
        });
      } else
      /* istanbul ignore next */
      {
        cov_2nsoolrvhk().b[13][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[10][1]++;
    }
    cov_2nsoolrvhk().s[26]++;
    if (isSystem !== undefined) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[14][0]++;
      cov_2nsoolrvhk().s[27]++;
      where.isSystem = isSystem;
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[14][1]++;
    }
    cov_2nsoolrvhk().s[28]++;
    if (isPublic !== undefined) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[15][0]++;
      cov_2nsoolrvhk().s[29]++;
      where.isPublic = isPublic;
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[15][1]++;
    }
    cov_2nsoolrvhk().s[30]++;
    if (createdByUserId !== undefined) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[16][0]++;
      cov_2nsoolrvhk().s[31]++;
      where.createdByUserId = createdByUserId;
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[16][1]++;
    }
    // Text search with database-specific case handling
    cov_2nsoolrvhk().s[32]++;
    if (search) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[17][0]++;
      const mode =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().s[33]++, process.env.DATABASE_URL?.includes('postgresql') ?
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[18][0]++, {
        mode: 'insensitive'
      }) :
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[18][1]++, {}));
      /* istanbul ignore next */
      cov_2nsoolrvhk().s[34]++;
      where.OR = [{
        title: {
          contains: search,
          ...mode
        }
      }, {
        description: {
          contains: search,
          ...mode
        }
      }, {
        titleFr: {
          contains: search,
          ...mode
        }
      }, {
        descriptionFr: {
          contains: search,
          ...mode
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[17][1]++;
    }
    // Tag filtering - Using JSON array contains for tags
    cov_2nsoolrvhk().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[20][0]++, tags) &&
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[20][1]++, tags.length > 0)) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[19][0]++;
      cov_2nsoolrvhk().s[36]++;
      where.tags = {
        path: [],
        array_contains: tags
      }; // Type assertion for JSON array operations
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[19][1]++;
    }
    // Sorting
    const orderBy =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[37]++, {});
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[38]++;
    if (sortBy === 'title') {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[21][0]++;
      cov_2nsoolrvhk().s[39]++;
      orderBy.title = sortOrder;
    } else {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[21][1]++;
      cov_2nsoolrvhk().s[40]++;
      if (sortBy === 'usageCount') {
        /* istanbul ignore next */
        cov_2nsoolrvhk().b[22][0]++;
        cov_2nsoolrvhk().s[41]++;
        orderBy.usageCount = sortOrder;
      } else {
        /* istanbul ignore next */
        cov_2nsoolrvhk().b[22][1]++;
        cov_2nsoolrvhk().s[42]++;
        if (sortBy === 'averageRating') {
          /* istanbul ignore next */
          cov_2nsoolrvhk().b[23][0]++;
          cov_2nsoolrvhk().s[43]++;
          orderBy.averageRating = sortOrder;
        } else {
          /* istanbul ignore next */
          cov_2nsoolrvhk().b[23][1]++;
          cov_2nsoolrvhk().s[44]++;
          if (sortBy === 'createdAt') {
            /* istanbul ignore next */
            cov_2nsoolrvhk().b[24][0]++;
            cov_2nsoolrvhk().s[45]++;
            orderBy.createdAt = sortOrder;
          } else {
            /* istanbul ignore next */
            cov_2nsoolrvhk().b[24][1]++;
            cov_2nsoolrvhk().s[46]++;
            if (sortBy === 'lastUsedAt') {
              /* istanbul ignore next */
              cov_2nsoolrvhk().b[25][0]++;
              cov_2nsoolrvhk().s[47]++;
              orderBy.lastUsedAt = sortOrder;
            } else
            /* istanbul ignore next */
            {
              cov_2nsoolrvhk().b[25][1]++;
            }
          }
        }
      }
    }
    const templates =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[48]++, await prisma.planTemplate.findMany({
      where,
      orderBy,
      take: limit,
      skip: offset,
      include: {
        createdByUser: {
          select: {
            id: true,
            name: true
          }
        },
        _count: {
          select: {
            ratings: true,
            variations: true
          }
        }
      }
    }));
    const total =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[49]++, await prisma.planTemplate.count({
      where
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[50]++;
    res.json({
      templates,
      pagination: {
        total,
        limit,
        offset,
        hasMore: offset + limit < total
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[51]++;
    _next(err);
  }
});
// Get a single template
/* istanbul ignore next */
cov_2nsoolrvhk().s[52]++;
router.get('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[1]++;
  cov_2nsoolrvhk().s[53]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[54]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[26][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[26][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[55]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[27][0]++;
      cov_2nsoolrvhk().s[56]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[27][1]++;
    }
    const template =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[57]++, await prisma.planTemplate.findFirst({
      where: {
        id: req.params.id,
        OR: [{
          isSystem: true
        }, {
          isPublic: true
        }, {
          createdByUserId: userId
        }]
      },
      include: {
        createdByUser: {
          select: {
            id: true,
            name: true
          }
        },
        ratings: {
          select: {
            id: true,
            userId: true,
            rating: true,
            comment: true,
            createdAt: true
          },
          orderBy: {
            createdAt: 'desc'
          },
          take: 5
        },
        variations: {
          orderBy: {
            createdAt: 'desc'
          }
        },
        _count: {
          select: {
            ratings: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[58]++;
    if (!template) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[28][0]++;
      cov_2nsoolrvhk().s[59]++;
      return res.status(404).json({
        error: 'Template not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[28][1]++;
    }
    cov_2nsoolrvhk().s[60]++;
    res.json(template);
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[61]++;
    _next(err);
  }
});
// Create a new template
/* istanbul ignore next */
cov_2nsoolrvhk().s[62]++;
router.post('/', validate(templateCreateSchema), async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[2]++;
  cov_2nsoolrvhk().s[63]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[64]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[29][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[29][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[65]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[30][0]++;
      cov_2nsoolrvhk().s[66]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[30][1]++;
    }
    const {
      tags =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[31][0]++, []),
      keywords =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[32][0]++, []),
      isPublic =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[33][0]++, false),
      content,
      unitStructure,
      lessonStructure,
      ...templateData
    } =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[67]++, req.body);
    // Validate grade range
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[35][0]++, templateData.gradeMin) &&
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[35][1]++, templateData.gradeMax) &&
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[35][2]++, templateData.gradeMin > templateData.gradeMax)) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[34][0]++;
      cov_2nsoolrvhk().s[69]++;
      return res.status(400).json({
        error: 'Minimum grade cannot be greater than maximum grade'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[34][1]++;
    }
    const template =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[70]++, await prisma.planTemplate.create({
      data: {
        ...templateData,
        createdByUserId: userId,
        tags,
        keywords,
        isPublic,
        content,
        unitStructure:
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[36][0]++, unitStructure) ||
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[36][1]++, null),
        lessonStructure:
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[37][0]++, lessonStructure) ||
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[37][1]++, null)
      },
      include: {
        createdByUser: {
          select: {
            id: true,
            name: true
          }
        },
        _count: {
          select: {
            ratings: true,
            variations: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[71]++;
    res.status(201).json(template);
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[72]++;
    _next(err);
  }
});
// Update a template
/* istanbul ignore next */
cov_2nsoolrvhk().s[73]++;
router.put('/:id', validate(templateUpdateSchema), async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[3]++;
  cov_2nsoolrvhk().s[74]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[75]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[38][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[38][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[76]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[39][0]++;
      cov_2nsoolrvhk().s[77]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[39][1]++;
    }
    // Verify ownership (only creator can edit)
    const existing =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[78]++, await prisma.planTemplate.findFirst({
      where: {
        id: req.params.id,
        createdByUserId: userId,
        isSystem: false // System templates cannot be edited
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[79]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[40][0]++;
      cov_2nsoolrvhk().s[80]++;
      return res.status(404).json({
        error: 'Template not found or not editable'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[40][1]++;
    }
    const {
      gradeMin,
      gradeMax,
      ...updateData
    } =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[81]++, req.body);
    // Validate grade range if provided
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[42][0]++, gradeMin) &&
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[42][1]++, gradeMax) &&
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[42][2]++, gradeMin > gradeMax)) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[41][0]++;
      cov_2nsoolrvhk().s[83]++;
      return res.status(400).json({
        error: 'Minimum grade cannot be greater than maximum grade'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[41][1]++;
    }
    const template =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[84]++, await prisma.planTemplate.update({
      where: {
        id: req.params.id
      },
      data: {
        ...updateData,
        gradeMin,
        gradeMax
      },
      include: {
        createdByUser: {
          select: {
            id: true,
            name: true
          }
        },
        variations: true,
        _count: {
          select: {
            ratings: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[85]++;
    res.json(template);
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[86]++;
    _next(err);
  }
});
// Delete a template
/* istanbul ignore next */
cov_2nsoolrvhk().s[87]++;
router.delete('/:id', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[4]++;
  cov_2nsoolrvhk().s[88]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[89]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[43][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[43][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[90]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[44][0]++;
      cov_2nsoolrvhk().s[91]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[44][1]++;
    }
    // Verify ownership
    const template =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[92]++, await prisma.planTemplate.findFirst({
      where: {
        id: req.params.id,
        createdByUserId: userId,
        isSystem: false // System templates cannot be deleted
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[93]++;
    if (!template) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[45][0]++;
      cov_2nsoolrvhk().s[94]++;
      return res.status(404).json({
        error: 'Template not found or not deletable'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[45][1]++;
    }
    cov_2nsoolrvhk().s[95]++;
    await prisma.planTemplate.delete({
      where: {
        id: req.params.id
      }
    });
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[96]++;
    res.status(204).end();
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[97]++;
    _next(err);
  }
});
// Duplicate a template
/* istanbul ignore next */
cov_2nsoolrvhk().s[98]++;
router.post('/:id/duplicate', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[5]++;
  cov_2nsoolrvhk().s[99]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[100]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[46][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[46][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[101]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[47][0]++;
      cov_2nsoolrvhk().s[102]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[47][1]++;
    }
    const {
      title,
      isPublic =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[48][0]++, false)
    } =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[103]++, req.body);
    const original =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[104]++, await prisma.planTemplate.findFirst({
      where: {
        id: req.params.id,
        OR: [{
          isSystem: true
        }, {
          isPublic: true
        }, {
          createdByUserId: userId
        }]
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[105]++;
    if (!original) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[49][0]++;
      cov_2nsoolrvhk().s[106]++;
      return res.status(404).json({
        error: 'Template not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[49][1]++;
    }
    const duplicated =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[107]++, await prisma.planTemplate.create({
      data: {
        title:
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[50][0]++, title) ||
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[50][1]++, `${original.title} (Copy)`),
        titleFr: original.titleFr ?
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[51][0]++, `${original.titleFr} (Copie)`) :
        /* istanbul ignore next */
        (cov_2nsoolrvhk().b[51][1]++, null),
        description: original.description,
        descriptionFr: original.descriptionFr,
        type: original.type,
        category: original.category,
        subject: original.subject,
        gradeMin: original.gradeMin,
        gradeMax: original.gradeMax,
        tags: original.tags,
        keywords: original.keywords,
        createdByUserId: userId,
        isSystem: false,
        isPublic,
        content: original.content,
        estimatedWeeks: original.estimatedWeeks,
        unitStructure: original.unitStructure,
        estimatedMinutes: original.estimatedMinutes,
        lessonStructure: original.lessonStructure
      },
      include: {
        createdByUser: {
          select: {
            id: true,
            name: true
          }
        },
        _count: {
          select: {
            ratings: true,
            variations: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[108]++;
    res.status(201).json(duplicated);
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[109]++;
    _next(err);
  }
});
// Apply template to create a new plan
/* istanbul ignore next */
cov_2nsoolrvhk().s[110]++;
router.post('/:id/apply', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[6]++;
  cov_2nsoolrvhk().s[111]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[112]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[52][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[52][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[113]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[53][0]++;
      cov_2nsoolrvhk().s[114]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[53][1]++;
    }
    const {
      customizations =
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[54][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[115]++, req.body);
    const template =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[116]++, await prisma.planTemplate.findFirst({
      where: {
        id: req.params.id,
        OR: [{
          isSystem: true
        }, {
          isPublic: true
        }, {
          createdByUserId: userId
        }]
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[117]++;
    if (!template) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[55][0]++;
      cov_2nsoolrvhk().s[118]++;
      return res.status(404).json({
        error: 'Template not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[55][1]++;
    }
    // Update usage tracking
    cov_2nsoolrvhk().s[119]++;
    await prisma.planTemplate.update({
      where: {
        id: template.id
      },
      data: {
        usageCount: {
          increment: 1
        },
        lastUsedAt: new Date()
      }
    });
    // Merge template content with user customizations
    const appliedContent =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[120]++, {
      ...template.content,
      ...(
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[56][0]++, customizations) ||
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[56][1]++, {}))
    });
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[121]++;
    res.json({
      template: {
        id: template.id,
        title: template.title,
        type: template.type,
        content: appliedContent,
        unitStructure: template.unitStructure,
        lessonStructure: template.lessonStructure,
        estimatedWeeks: template.estimatedWeeks,
        estimatedMinutes: template.estimatedMinutes
      },
      appliedContent
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[122]++;
    _next(err);
  }
});
// Rate a template
/* istanbul ignore next */
cov_2nsoolrvhk().s[123]++;
router.post('/:id/rate', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[7]++;
  cov_2nsoolrvhk().s[124]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[125]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[57][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[57][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[126]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[58][0]++;
      cov_2nsoolrvhk().s[127]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[58][1]++;
    }
    const {
      rating,
      comment
    } =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[128]++, req.body);
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[129]++;
    if (
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[60][0]++, !rating) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[60][1]++, rating < 1) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[60][2]++, rating > 5)) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[59][0]++;
      cov_2nsoolrvhk().s[130]++;
      return res.status(400).json({
        error: 'Rating must be between 1 and 5'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[59][1]++;
    }
    // Check if template exists and is accessible
    const template =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[131]++, await prisma.planTemplate.findFirst({
      where: {
        id: req.params.id,
        OR: [{
          isSystem: true
        }, {
          isPublic: true
        }, {
          createdByUserId: userId
        }]
      }
    }));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[132]++;
    if (!template) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[61][0]++;
      cov_2nsoolrvhk().s[133]++;
      return res.status(404).json({
        error: 'Template not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[61][1]++;
    }
    // Upsert rating
    const templateRating =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[134]++, await prisma.templateRating.upsert({
      where: {
        templateId_userId: {
          templateId: req.params.id,
          userId
        }
      },
      update: {
        rating,
        comment
      },
      create: {
        templateId: req.params.id,
        userId,
        rating,
        comment
      }
    }));
    // Recalculate average rating
    const ratings =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[135]++, await prisma.templateRating.findMany({
      where: {
        templateId: req.params.id
      },
      select: {
        rating: true
      }
    }));
    const averageRating =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[136]++, ratings.length > 0 ?
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[62][0]++, ratings.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_2nsoolrvhk().f[8]++;
      cov_2nsoolrvhk().s[137]++;
      return sum + r.rating;
    }, 0) / ratings.length) :
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[62][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[138]++;
    await prisma.planTemplate.update({
      where: {
        id: req.params.id
      },
      data: {
        averageRating
      }
    });
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[139]++;
    res.json(templateRating);
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[140]++;
    _next(err);
  }
});
// Get categories and subjects for filtering
/* istanbul ignore next */
cov_2nsoolrvhk().s[141]++;
router.get('/metadata/options', async (req, res, _next) => {
  /* istanbul ignore next */
  cov_2nsoolrvhk().f[9]++;
  cov_2nsoolrvhk().s[142]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[143]++,
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[63][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_2nsoolrvhk().b[63][1]++, 0));
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[144]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2nsoolrvhk().b[64][0]++;
      cov_2nsoolrvhk().s[145]++;
      return res.status(401).json({
        error: 'Unauthorized'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2nsoolrvhk().b[64][1]++;
    }
    const [subjects, grades, categories, tags] =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[146]++, await Promise.all([prisma.planTemplate.findMany({
      where: {
        OR: [{
          isSystem: true
        }, {
          isPublic: true
        }, {
          createdByUserId: userId
        }],
        subject: {
          not: null
        }
      },
      select: {
        subject: true
      },
      distinct: ['subject']
    }), prisma.planTemplate.findMany({
      where: {
        AND: [{
          OR: [{
            isSystem: true
          }, {
            isPublic: true
          }, {
            createdByUserId: userId
          }]
        }, {
          OR: [{
            gradeMin: {
              not: null
            }
          }, {
            gradeMax: {
              not: null
            }
          }]
        }]
      },
      select: {
        gradeMin: true,
        gradeMax: true
      }
    }), prisma.planTemplate.findMany({
      select: {
        category: true
      },
      distinct: ['category']
    }), prisma.planTemplate.findMany({
      where: {
        OR: [{
          isSystem: true
        }, {
          isPublic: true
        }, {
          createdByUserId: userId
        }]
      },
      select: {
        tags: true
      }
    })]));
    const uniqueSubjects =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[147]++, subjects.map(t => {
      /* istanbul ignore next */
      cov_2nsoolrvhk().f[10]++;
      cov_2nsoolrvhk().s[148]++;
      return t.subject;
    }).filter(s => {
      /* istanbul ignore next */
      cov_2nsoolrvhk().f[11]++;
      cov_2nsoolrvhk().s[149]++;
      return s !== null;
    }).sort());
    const gradeRange =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[150]++, grades.reduce((range, template) => {
      /* istanbul ignore next */
      cov_2nsoolrvhk().f[12]++;
      cov_2nsoolrvhk().s[151]++;
      if (template.gradeMin) {
        /* istanbul ignore next */
        cov_2nsoolrvhk().b[65][0]++;
        cov_2nsoolrvhk().s[152]++;
        range.min = Math.min(range.min, template.gradeMin);
      } else
      /* istanbul ignore next */
      {
        cov_2nsoolrvhk().b[65][1]++;
      }
      cov_2nsoolrvhk().s[153]++;
      if (template.gradeMax) {
        /* istanbul ignore next */
        cov_2nsoolrvhk().b[66][0]++;
        cov_2nsoolrvhk().s[154]++;
        range.max = Math.max(range.max, template.gradeMax);
      } else
      /* istanbul ignore next */
      {
        cov_2nsoolrvhk().b[66][1]++;
      }
      cov_2nsoolrvhk().s[155]++;
      return range;
    }, {
      min: 12,
      max: 1
    }));
    const allTags =
    /* istanbul ignore next */
    (cov_2nsoolrvhk().s[156]++, tags.flatMap(t => {
      /* istanbul ignore next */
      cov_2nsoolrvhk().f[13]++;
      cov_2nsoolrvhk().s[157]++;
      return Array.isArray(t.tags) ?
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[67][0]++, t.tags) :
      /* istanbul ignore next */
      (cov_2nsoolrvhk().b[67][1]++, []);
    }).filter((tag, index, array) => {
      /* istanbul ignore next */
      cov_2nsoolrvhk().f[14]++;
      cov_2nsoolrvhk().s[158]++;
      return array.indexOf(tag) === index;
    }).sort());
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[159]++;
    res.json({
      subjects: uniqueSubjects,
      grades: Array.from({
        length: gradeRange.max - gradeRange.min + 1
      }, (_, i) => {
        /* istanbul ignore next */
        cov_2nsoolrvhk().f[15]++;
        cov_2nsoolrvhk().s[160]++;
        return gradeRange.min + i;
      }),
      categories: categories.map(c => {
        /* istanbul ignore next */
        cov_2nsoolrvhk().f[16]++;
        cov_2nsoolrvhk().s[161]++;
        return c.category;
      }),
      tags: allTags
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_2nsoolrvhk().s[162]++;
    _next(err);
  }
});
export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm5zb29scnZoayIsImFjdHVhbENvdmVyYWdlIiwiUm91dGVyIiwicHJpc21hIiwidmFsaWRhdGUiLCJ6Iiwicm91dGVyIiwicyIsInRlbXBsYXRlQ3JlYXRlU2NoZW1hIiwib2JqZWN0IiwidGl0bGUiLCJzdHJpbmciLCJtaW4iLCJtYXgiLCJyZWdleCIsInRpdGxlRnIiLCJvcHRpb25hbCIsImRlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb25GciIsInR5cGUiLCJlbnVtIiwiY2F0ZWdvcnkiLCJzdWJqZWN0IiwiZ3JhZGVNaW4iLCJudW1iZXIiLCJpbnQiLCJncmFkZU1heCIsInRhZ3MiLCJhcnJheSIsImtleXdvcmRzIiwiaXNQdWJsaWMiLCJib29sZWFuIiwiZXN0aW1hdGVkV2Vla3MiLCJwb3NpdGl2ZSIsImVzdGltYXRlZE1pbnV0ZXMiLCJjb250ZW50Iiwib3ZlcnZpZXciLCJsZWFybmluZ0dvYWxzIiwiYmlnSWRlYXMiLCJlc3NlbnRpYWxRdWVzdGlvbnMiLCJhc3Nlc3NtZW50cyIsInJlY29yZCIsInVua25vd24iLCJhY3Rpdml0aWVzIiwic3VjY2Vzc0NyaXRlcmlhIiwia2V5Vm9jYWJ1bGFyeSIsImNyb3NzQ3VycmljdWxhckNvbm5lY3Rpb25zIiwiZGlmZmVyZW50aWF0aW9uU3RyYXRlZ2llcyIsImZvclN0cnVnZ2xpbmciLCJmb3JBZHZhbmNlZCIsImZvckVMTCIsImZvcklFUCIsIm9iamVjdGl2ZXMiLCJtYXRlcmlhbHMiLCJtaW5kc09uIiwiYWN0aW9uIiwiY29uc29saWRhdGlvbiIsImdyb3VwaW5nIiwiYWNjb21tb2RhdGlvbnMiLCJtb2RpZmljYXRpb25zIiwiZXh0ZW5zaW9ucyIsImFzc2Vzc21lbnRUeXBlIiwiYXNzZXNzbWVudE5vdGVzIiwidW5pdFN0cnVjdHVyZSIsInBoYXNlcyIsIm5hbWUiLCJlc3RpbWF0ZWREYXlzIiwicmVzb3VyY2VzIiwidXJsIiwibm90ZXMiLCJsZXNzb25TdHJ1Y3R1cmUiLCJkdXJhdGlvbiIsInNlY3Rpb25zIiwidGltZUFsbG9jYXRpb24iLCJ0ZW1wbGF0ZVVwZGF0ZVNjaGVtYSIsInBhcnRpYWwiLCJ0ZW1wbGF0ZVNlYXJjaFNjaGVtYSIsImlzU3lzdGVtIiwiY3JlYXRlZEJ5VXNlcklkIiwic2VhcmNoIiwic29ydEJ5Iiwic29ydE9yZGVyIiwibGltaXQiLCJvZmZzZXQiLCJnZXQiLCJyZXEiLCJyZXMiLCJfbmV4dCIsImYiLCJ1c2VySWQiLCJiIiwidXNlciIsImlkIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwicXVlcnlWYWxpZGF0aW9uIiwic2FmZVBhcnNlIiwicXVlcnkiLCJzdWNjZXNzIiwiZGV0YWlscyIsImRhdGEiLCJ3aGVyZSIsIk9SIiwidW5kZWZpbmVkIiwiQU5EIiwicHVzaCIsImx0ZSIsImd0ZSIsIm1vZGUiLCJwcm9jZXNzIiwiZW52IiwiREFUQUJBU0VfVVJMIiwiaW5jbHVkZXMiLCJjb250YWlucyIsImxlbmd0aCIsInBhdGgiLCJhcnJheV9jb250YWlucyIsIm9yZGVyQnkiLCJ1c2FnZUNvdW50IiwiYXZlcmFnZVJhdGluZyIsImNyZWF0ZWRBdCIsImxhc3RVc2VkQXQiLCJ0ZW1wbGF0ZXMiLCJwbGFuVGVtcGxhdGUiLCJmaW5kTWFueSIsInRha2UiLCJza2lwIiwiaW5jbHVkZSIsImNyZWF0ZWRCeVVzZXIiLCJzZWxlY3QiLCJfY291bnQiLCJyYXRpbmdzIiwidmFyaWF0aW9ucyIsInRvdGFsIiwiY291bnQiLCJwYWdpbmF0aW9uIiwiaGFzTW9yZSIsImVyciIsInRlbXBsYXRlIiwiZmluZEZpcnN0IiwicGFyYW1zIiwicmF0aW5nIiwiY29tbWVudCIsInBvc3QiLCJ0ZW1wbGF0ZURhdGEiLCJib2R5IiwiY3JlYXRlIiwicHV0IiwiZXhpc3RpbmciLCJ1cGRhdGVEYXRhIiwidXBkYXRlIiwiZGVsZXRlIiwiZW5kIiwib3JpZ2luYWwiLCJkdXBsaWNhdGVkIiwiY3VzdG9taXphdGlvbnMiLCJpbmNyZW1lbnQiLCJEYXRlIiwiYXBwbGllZENvbnRlbnQiLCJ0ZW1wbGF0ZVJhdGluZyIsInVwc2VydCIsInRlbXBsYXRlSWRfdXNlcklkIiwidGVtcGxhdGVJZCIsInJlZHVjZSIsInN1bSIsInIiLCJzdWJqZWN0cyIsImdyYWRlcyIsImNhdGVnb3JpZXMiLCJQcm9taXNlIiwiYWxsIiwibm90IiwiZGlzdGluY3QiLCJ1bmlxdWVTdWJqZWN0cyIsIm1hcCIsInQiLCJmaWx0ZXIiLCJzb3J0IiwiZ3JhZGVSYW5nZSIsInJhbmdlIiwiTWF0aCIsImFsbFRhZ3MiLCJmbGF0TWFwIiwiQXJyYXkiLCJpc0FycmF5IiwidGFnIiwiaW5kZXgiLCJpbmRleE9mIiwiZnJvbSIsIl8iLCJpIiwiYyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWNoYWVsbWNpc2FhYy9HaXRIdWIvdGVhY2hpbmctZW5naW5lMi4wL3NlcnZlci9zcmMvcm91dGVzL3RlbXBsYXRlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIsIFJlcXVlc3QgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IFByaXNtYSB9IGZyb20gJy4uL3ByaXNtYSc7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICcuLi9wcmlzbWEnO1xuaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tICcuLi92YWxpZGF0aW9uJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzXG5jb25zdCB0ZW1wbGF0ZUNyZWF0ZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdGl0bGU6IHpcbiAgICAuc3RyaW5nKClcbiAgICAubWluKDEpXG4gICAgLm1heCgyNTUpXG4gICAgLnJlZ2V4KC9eW148Pl0qJC8sICdUaXRsZSBjYW5ub3QgY29udGFpbiBIVE1MIHRhZ3MnKSxcbiAgdGl0bGVGcjogelxuICAgIC5zdHJpbmcoKVxuICAgIC5tYXgoMjU1KVxuICAgIC5yZWdleCgvXltePD5dKiQvLCAnRnJlbmNoIHRpdGxlIGNhbm5vdCBjb250YWluIEhUTUwgdGFncycpXG4gICAgLm9wdGlvbmFsKCksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm1heCgyMDAwKS5vcHRpb25hbCgpLFxuICBkZXNjcmlwdGlvbkZyOiB6LnN0cmluZygpLm1heCgyMDAwKS5vcHRpb25hbCgpLFxuICB0eXBlOiB6LmVudW0oWydVTklUX1BMQU4nLCAnTEVTU09OX1BMQU4nXSksXG4gIGNhdGVnb3J5OiB6LmVudW0oWydCWV9TVUJKRUNUJywgJ0JZX0dSQURFJywgJ0JZX1RIRU1FJywgJ0JZX1NFQVNPTicsICdCWV9TS0lMTCcsICdDVVNUT00nXSksXG4gIHN1YmplY3Q6IHouc3RyaW5nKCkubWF4KDEwMCkub3B0aW9uYWwoKSxcbiAgZ3JhZGVNaW46IHoubnVtYmVyKCkuaW50KCkubWluKDEpLm1heCgxMikub3B0aW9uYWwoKSxcbiAgZ3JhZGVNYXg6IHoubnVtYmVyKCkuaW50KCkubWluKDEpLm1heCgxMikub3B0aW9uYWwoKSxcbiAgdGFnczogei5hcnJheSh6LnN0cmluZygpLm1heCg1MCkpLm1heCgyMCkub3B0aW9uYWwoKSxcbiAga2V5d29yZHM6IHouYXJyYXkoei5zdHJpbmcoKS5tYXgoNTApKS5tYXgoMjApLm9wdGlvbmFsKCksXG4gIGlzUHVibGljOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICBlc3RpbWF0ZWRXZWVrczogei5udW1iZXIoKS5pbnQoKS5wb3NpdGl2ZSgpLm1heCg1Mikub3B0aW9uYWwoKSxcbiAgZXN0aW1hdGVkTWludXRlczogei5udW1iZXIoKS5pbnQoKS5wb3NpdGl2ZSgpLm1heCg0ODApLm9wdGlvbmFsKCksXG4gIGNvbnRlbnQ6IHoub2JqZWN0KHtcbiAgICAvLyBVbml0IFBsYW4gZmllbGRzXG4gICAgb3ZlcnZpZXc6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBsZWFybmluZ0dvYWxzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAgYmlnSWRlYXM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBlc3NlbnRpYWxRdWVzdGlvbnM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgICBhc3Nlc3NtZW50czogei5hcnJheSh6LnJlY29yZCh6LnVua25vd24oKSkpLm9wdGlvbmFsKCksXG4gICAgYWN0aXZpdGllczogei5hcnJheSh6LnJlY29yZCh6LnVua25vd24oKSkpLm9wdGlvbmFsKCksXG4gICAgc3VjY2Vzc0NyaXRlcmlhOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAga2V5Vm9jYWJ1bGFyeTogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICAgIGNyb3NzQ3VycmljdWxhckNvbm5lY3Rpb25zOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgZGlmZmVyZW50aWF0aW9uU3RyYXRlZ2llczogelxuICAgICAgLm9iamVjdCh7XG4gICAgICAgIGZvclN0cnVnZ2xpbmc6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgICAgICAgZm9yQWR2YW5jZWQ6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgICAgICAgZm9yRUxMOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAgICAgIGZvcklFUDogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb25hbCgpLFxuICAgIC8vIExlc3NvbiBQbGFuIGZpZWxkc1xuICAgIG9iamVjdGl2ZXM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgICBtYXRlcmlhbHM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgICBtaW5kc09uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgYWN0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgY29uc29saWRhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwaW5nOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgYWNjb21tb2RhdGlvbnM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgICBtb2RpZmljYXRpb25zOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAgZXh0ZW5zaW9uczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICAgIGFzc2Vzc21lbnRUeXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgYXNzZXNzbWVudE5vdGVzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIH0pLFxuICB1bml0U3RydWN0dXJlOiB6XG4gICAgLm9iamVjdCh7XG4gICAgICBwaGFzZXM6IHpcbiAgICAgICAgLmFycmF5KFxuICAgICAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgZXN0aW1hdGVkRGF5czogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgbGVhcm5pbmdHb2Fsczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICAgICAgICAgIH0pLFxuICAgICAgICApXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgICAgcmVzb3VyY2VzOiB6XG4gICAgICAgIC5hcnJheShcbiAgICAgICAgICB6Lm9iamVjdCh7XG4gICAgICAgICAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICAgICAgICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICB1cmw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgIG5vdGVzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbiAgbGVzc29uU3RydWN0dXJlOiB6XG4gICAgLm9iamVjdCh7XG4gICAgICBkdXJhdGlvbjogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgc2VjdGlvbnM6IHpcbiAgICAgICAgLmFycmF5KFxuICAgICAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKSxcbiAgICAgICAgICAgIHRpbWVBbGxvY2F0aW9uOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICBhY3Rpdml0aWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCB0ZW1wbGF0ZVVwZGF0ZVNjaGVtYSA9IHRlbXBsYXRlQ3JlYXRlU2NoZW1hLnBhcnRpYWwoKTtcblxuY29uc3QgdGVtcGxhdGVTZWFyY2hTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHR5cGU6IHouZW51bShbJ1VOSVRfUExBTicsICdMRVNTT05fUExBTiddKS5vcHRpb25hbCgpLFxuICBjYXRlZ29yeTogelxuICAgIC5lbnVtKFsnQllfU1VCSkVDVCcsICdCWV9HUkFERScsICdCWV9USEVNRScsICdCWV9TRUFTT04nLCAnQllfU0tJTEwnLCAnQ1VTVE9NJ10pXG4gICAgLm9wdGlvbmFsKCksXG4gIHN1YmplY3Q6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZ3JhZGVNaW46IHoubnVtYmVyKCkuaW50KCkubWluKDEpLm1heCgxMikub3B0aW9uYWwoKSxcbiAgZ3JhZGVNYXg6IHoubnVtYmVyKCkuaW50KCkubWluKDEpLm1heCgxMikub3B0aW9uYWwoKSxcbiAgaXNTeXN0ZW06IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIGlzUHVibGljOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICBjcmVhdGVkQnlVc2VySWQ6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKSxcbiAgc2VhcmNoOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHRhZ3M6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgc29ydEJ5OiB6LmVudW0oWyd0aXRsZScsICd1c2FnZUNvdW50JywgJ2F2ZXJhZ2VSYXRpbmcnLCAnY3JlYXRlZEF0JywgJ2xhc3RVc2VkQXQnXSkub3B0aW9uYWwoKSxcbiAgc29ydE9yZGVyOiB6LmVudW0oWydhc2MnLCAnZGVzYyddKS5vcHRpb25hbCgpLFxuICBsaW1pdDogei5udW1iZXIoKS5pbnQoKS5taW4oMSkubWF4KDEwMCkub3B0aW9uYWwoKSxcbiAgb2Zmc2V0OiB6Lm51bWJlcigpLmludCgpLm1pbigwKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIEdldCBhbGwgdGVtcGxhdGVzIHdpdGggZmlsdGVyaW5nIGFuZCBzZWFyY2hcbnJvdXRlci5nZXQoJy8nLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVZhbGlkYXRpb24gPSB0ZW1wbGF0ZVNlYXJjaFNjaGVtYS5zYWZlUGFyc2UocmVxLnF1ZXJ5KTtcbiAgICBpZiAoIXF1ZXJ5VmFsaWRhdGlvbi5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAuanNvbih7IGVycm9yOiAnSW52YWxpZCBxdWVyeSBwYXJhbWV0ZXJzJywgZGV0YWlsczogcXVlcnlWYWxpZGF0aW9uLmVycm9yIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICBjYXRlZ29yeSxcbiAgICAgIHN1YmplY3QsXG4gICAgICBncmFkZU1pbixcbiAgICAgIGdyYWRlTWF4LFxuICAgICAgaXNTeXN0ZW0sXG4gICAgICBpc1B1YmxpYyxcbiAgICAgIGNyZWF0ZWRCeVVzZXJJZCxcbiAgICAgIHNlYXJjaCxcbiAgICAgIHRhZ3MsXG4gICAgICBzb3J0QnkgPSAnY3JlYXRlZEF0JyxcbiAgICAgIHNvcnRPcmRlciA9ICdkZXNjJyxcbiAgICAgIGxpbWl0ID0gMjAsXG4gICAgICBvZmZzZXQgPSAwLFxuICAgIH0gPSBxdWVyeVZhbGlkYXRpb24uZGF0YTtcblxuICAgIGNvbnN0IHdoZXJlOiBQcmlzbWEuUGxhblRlbXBsYXRlV2hlcmVJbnB1dCA9IHtcbiAgICAgIE9SOiBbXG4gICAgICAgIHsgaXNTeXN0ZW06IHRydWUgfSwgLy8gU3lzdGVtIHRlbXBsYXRlcyB2aXNpYmxlIHRvIGFsbFxuICAgICAgICB7IGlzUHVibGljOiB0cnVlIH0sIC8vIFB1YmxpYyB0ZW1wbGF0ZXMgdmlzaWJsZSB0byBhbGxcbiAgICAgICAgeyBjcmVhdGVkQnlVc2VySWQ6IHVzZXJJZCB9LCAvLyBVc2VyJ3Mgb3duIHRlbXBsYXRlc1xuICAgICAgXSxcbiAgICB9O1xuXG4gICAgLy8gQXBwbHkgZmlsdGVyc1xuICAgIGlmICh0eXBlKSB3aGVyZS50eXBlID0gdHlwZTtcbiAgICBpZiAoY2F0ZWdvcnkpIHdoZXJlLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgaWYgKHN1YmplY3QpIHdoZXJlLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgIGlmIChncmFkZU1pbiAhPT0gdW5kZWZpbmVkIHx8IGdyYWRlTWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdoZXJlLkFORCA9IFtdO1xuICAgICAgaWYgKGdyYWRlTWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd2hlcmUuQU5ELnB1c2goe1xuICAgICAgICAgIE9SOiBbeyBncmFkZU1pbjogeyBsdGU6IGdyYWRlTWluIH0gfSwgeyBncmFkZU1pbjogbnVsbCB9XSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZ3JhZGVNYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB3aGVyZS5BTkQucHVzaCh7XG4gICAgICAgICAgT1I6IFt7IGdyYWRlTWF4OiB7IGd0ZTogZ3JhZGVNYXggfSB9LCB7IGdyYWRlTWF4OiBudWxsIH1dLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzU3lzdGVtICE9PSB1bmRlZmluZWQpIHdoZXJlLmlzU3lzdGVtID0gaXNTeXN0ZW07XG4gICAgaWYgKGlzUHVibGljICE9PSB1bmRlZmluZWQpIHdoZXJlLmlzUHVibGljID0gaXNQdWJsaWM7XG4gICAgaWYgKGNyZWF0ZWRCeVVzZXJJZCAhPT0gdW5kZWZpbmVkKSB3aGVyZS5jcmVhdGVkQnlVc2VySWQgPSBjcmVhdGVkQnlVc2VySWQ7XG5cbiAgICAvLyBUZXh0IHNlYXJjaCB3aXRoIGRhdGFiYXNlLXNwZWNpZmljIGNhc2UgaGFuZGxpbmdcbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICBjb25zdCBtb2RlID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMPy5pbmNsdWRlcygncG9zdGdyZXNxbCcpXG4gICAgICAgID8geyBtb2RlOiAnaW5zZW5zaXRpdmUnIGFzIGNvbnN0IH1cbiAgICAgICAgOiB7fTtcblxuICAgICAgd2hlcmUuT1IgPSBbXG4gICAgICAgIHsgdGl0bGU6IHsgY29udGFpbnM6IHNlYXJjaCwgLi4ubW9kZSB9IH0sXG4gICAgICAgIHsgZGVzY3JpcHRpb246IHsgY29udGFpbnM6IHNlYXJjaCwgLi4ubW9kZSB9IH0sXG4gICAgICAgIHsgdGl0bGVGcjogeyBjb250YWluczogc2VhcmNoLCAuLi5tb2RlIH0gfSxcbiAgICAgICAgeyBkZXNjcmlwdGlvbkZyOiB7IGNvbnRhaW5zOiBzZWFyY2gsIC4uLm1vZGUgfSB9LFxuICAgICAgXTtcbiAgICB9XG5cbiAgICAvLyBUYWcgZmlsdGVyaW5nIC0gVXNpbmcgSlNPTiBhcnJheSBjb250YWlucyBmb3IgdGFnc1xuICAgIGlmICh0YWdzICYmIHRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgd2hlcmUudGFncyA9IHtcbiAgICAgICAgcGF0aDogW10sXG4gICAgICAgIGFycmF5X2NvbnRhaW5zOiB0YWdzLFxuICAgICAgfSBhcyBQcmlzbWEuSnNvbkZpbHRlcjsgLy8gVHlwZSBhc3NlcnRpb24gZm9yIEpTT04gYXJyYXkgb3BlcmF0aW9uc1xuICAgIH1cblxuICAgIC8vIFNvcnRpbmdcbiAgICBjb25zdCBvcmRlckJ5OiBQcmlzbWEuUGxhblRlbXBsYXRlT3JkZXJCeVdpdGhSZWxhdGlvbklucHV0ID0ge307XG4gICAgaWYgKHNvcnRCeSA9PT0gJ3RpdGxlJykgb3JkZXJCeS50aXRsZSA9IHNvcnRPcmRlcjtcbiAgICBlbHNlIGlmIChzb3J0QnkgPT09ICd1c2FnZUNvdW50Jykgb3JkZXJCeS51c2FnZUNvdW50ID0gc29ydE9yZGVyO1xuICAgIGVsc2UgaWYgKHNvcnRCeSA9PT0gJ2F2ZXJhZ2VSYXRpbmcnKSBvcmRlckJ5LmF2ZXJhZ2VSYXRpbmcgPSBzb3J0T3JkZXI7XG4gICAgZWxzZSBpZiAoc29ydEJ5ID09PSAnY3JlYXRlZEF0Jykgb3JkZXJCeS5jcmVhdGVkQXQgPSBzb3J0T3JkZXI7XG4gICAgZWxzZSBpZiAoc29ydEJ5ID09PSAnbGFzdFVzZWRBdCcpIG9yZGVyQnkubGFzdFVzZWRBdCA9IHNvcnRPcmRlcjtcblxuICAgIGNvbnN0IHRlbXBsYXRlcyA9IGF3YWl0IHByaXNtYS5wbGFuVGVtcGxhdGUuZmluZE1hbnkoe1xuICAgICAgd2hlcmUsXG4gICAgICBvcmRlckJ5LFxuICAgICAgdGFrZTogbGltaXQsXG4gICAgICBza2lwOiBvZmZzZXQsXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIGNyZWF0ZWRCeVVzZXI6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIHJhdGluZ3M6IHRydWUsXG4gICAgICAgICAgICB2YXJpYXRpb25zOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgdG90YWwgPSBhd2FpdCBwcmlzbWEucGxhblRlbXBsYXRlLmNvdW50KHsgd2hlcmUgfSk7XG5cbiAgICByZXMuanNvbih7XG4gICAgICB0ZW1wbGF0ZXMsXG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIHRvdGFsLFxuICAgICAgICBsaW1pdCxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBoYXNNb3JlOiBvZmZzZXQgKyBsaW1pdCA8IHRvdGFsLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIEdldCBhIHNpbmdsZSB0ZW1wbGF0ZVxucm91dGVyLmdldCgnLzppZCcsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQgfHwgMDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgcHJpc21hLnBsYW5UZW1wbGF0ZS5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHJlcS5wYXJhbXMuaWQsXG4gICAgICAgIE9SOiBbeyBpc1N5c3RlbTogdHJ1ZSB9LCB7IGlzUHVibGljOiB0cnVlIH0sIHsgY3JlYXRlZEJ5VXNlcklkOiB1c2VySWQgfV0sXG4gICAgICB9LFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICBjcmVhdGVkQnlVc2VyOiB7XG4gICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmF0aW5nczoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICB1c2VySWQ6IHRydWUsXG4gICAgICAgICAgICByYXRpbmc6IHRydWUsXG4gICAgICAgICAgICBjb21tZW50OiB0cnVlLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3JkZXJCeTogeyBjcmVhdGVkQXQ6ICdkZXNjJyB9LFxuICAgICAgICAgIHRha2U6IDUsXG4gICAgICAgIH0sXG4gICAgICAgIHZhcmlhdGlvbnM6IHtcbiAgICAgICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sXG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgcmF0aW5nczogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnVGVtcGxhdGUgbm90IGZvdW5kJyB9KTtcbiAgICB9XG5cbiAgICByZXMuanNvbih0ZW1wbGF0ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBDcmVhdGUgYSBuZXcgdGVtcGxhdGVcbnJvdXRlci5wb3N0KCcvJywgdmFsaWRhdGUodGVtcGxhdGVDcmVhdGVTY2hlbWEpLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICB0YWdzID0gW10sXG4gICAgICBrZXl3b3JkcyA9IFtdLFxuICAgICAgaXNQdWJsaWMgPSBmYWxzZSxcbiAgICAgIGNvbnRlbnQsXG4gICAgICB1bml0U3RydWN0dXJlLFxuICAgICAgbGVzc29uU3RydWN0dXJlLFxuICAgICAgLi4udGVtcGxhdGVEYXRhXG4gICAgfSA9IHJlcS5ib2R5O1xuXG4gICAgLy8gVmFsaWRhdGUgZ3JhZGUgcmFuZ2VcbiAgICBpZiAoXG4gICAgICB0ZW1wbGF0ZURhdGEuZ3JhZGVNaW4gJiZcbiAgICAgIHRlbXBsYXRlRGF0YS5ncmFkZU1heCAmJlxuICAgICAgdGVtcGxhdGVEYXRhLmdyYWRlTWluID4gdGVtcGxhdGVEYXRhLmdyYWRlTWF4XG4gICAgKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ01pbmltdW0gZ3JhZGUgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIGdyYWRlJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IHByaXNtYS5wbGFuVGVtcGxhdGUuY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgLi4udGVtcGxhdGVEYXRhLFxuICAgICAgICBjcmVhdGVkQnlVc2VySWQ6IHVzZXJJZCxcbiAgICAgICAgdGFncyxcbiAgICAgICAga2V5d29yZHMsXG4gICAgICAgIGlzUHVibGljLFxuICAgICAgICBjb250ZW50LFxuICAgICAgICB1bml0U3RydWN0dXJlOiB1bml0U3RydWN0dXJlIHx8IG51bGwsXG4gICAgICAgIGxlc3NvblN0cnVjdHVyZTogbGVzc29uU3RydWN0dXJlIHx8IG51bGwsXG4gICAgICB9LFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICBjcmVhdGVkQnlVc2VyOiB7XG4gICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICByYXRpbmdzOiB0cnVlLFxuICAgICAgICAgICAgdmFyaWF0aW9uczogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHRlbXBsYXRlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIFVwZGF0ZSBhIHRlbXBsYXRlXG5yb3V0ZXIucHV0KCcvOmlkJywgdmFsaWRhdGUodGVtcGxhdGVVcGRhdGVTY2hlbWEpLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgb3duZXJzaGlwIChvbmx5IGNyZWF0b3IgY2FuIGVkaXQpXG4gICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBwcmlzbWEucGxhblRlbXBsYXRlLmZpbmRGaXJzdCh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBpZDogcmVxLnBhcmFtcy5pZCxcbiAgICAgICAgY3JlYXRlZEJ5VXNlcklkOiB1c2VySWQsXG4gICAgICAgIGlzU3lzdGVtOiBmYWxzZSwgLy8gU3lzdGVtIHRlbXBsYXRlcyBjYW5ub3QgYmUgZWRpdGVkXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCFleGlzdGluZykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdUZW1wbGF0ZSBub3QgZm91bmQgb3Igbm90IGVkaXRhYmxlJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGdyYWRlTWluLCBncmFkZU1heCwgLi4udXBkYXRlRGF0YSB9ID0gcmVxLmJvZHk7XG5cbiAgICAvLyBWYWxpZGF0ZSBncmFkZSByYW5nZSBpZiBwcm92aWRlZFxuICAgIGlmIChncmFkZU1pbiAmJiBncmFkZU1heCAmJiBncmFkZU1pbiA+IGdyYWRlTWF4KSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ01pbmltdW0gZ3JhZGUgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIGdyYWRlJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IHByaXNtYS5wbGFuVGVtcGxhdGUudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiByZXEucGFyYW1zLmlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIC4uLnVwZGF0ZURhdGEsXG4gICAgICAgIGdyYWRlTWluLFxuICAgICAgICBncmFkZU1heCxcbiAgICAgIH0sXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIGNyZWF0ZWRCeVVzZXI6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB2YXJpYXRpb25zOiB0cnVlLFxuICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgIHJhdGluZ3M6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXMuanNvbih0ZW1wbGF0ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9uZXh0KGVycik7XG4gIH1cbn0pO1xuXG4vLyBEZWxldGUgYSB0ZW1wbGF0ZVxucm91dGVyLmRlbGV0ZSgnLzppZCcsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQgfHwgMDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIC8vIFZlcmlmeSBvd25lcnNoaXBcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IHByaXNtYS5wbGFuVGVtcGxhdGUuZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlkOiByZXEucGFyYW1zLmlkLFxuICAgICAgICBjcmVhdGVkQnlVc2VySWQ6IHVzZXJJZCxcbiAgICAgICAgaXNTeXN0ZW06IGZhbHNlLCAvLyBTeXN0ZW0gdGVtcGxhdGVzIGNhbm5vdCBiZSBkZWxldGVkXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdUZW1wbGF0ZSBub3QgZm91bmQgb3Igbm90IGRlbGV0YWJsZScgfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgcHJpc21hLnBsYW5UZW1wbGF0ZS5kZWxldGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHJlcS5wYXJhbXMuaWQgfSxcbiAgICB9KTtcblxuICAgIHJlcy5zdGF0dXMoMjA0KS5lbmQoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIER1cGxpY2F0ZSBhIHRlbXBsYXRlXG5yb3V0ZXIucG9zdCgnLzppZC9kdXBsaWNhdGUnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXMsIF9uZXh0KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkIHx8IDA7XG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHRpdGxlLCBpc1B1YmxpYyA9IGZhbHNlIH0gPSByZXEuYm9keTtcblxuICAgIGNvbnN0IG9yaWdpbmFsID0gYXdhaXQgcHJpc21hLnBsYW5UZW1wbGF0ZS5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHJlcS5wYXJhbXMuaWQsXG4gICAgICAgIE9SOiBbeyBpc1N5c3RlbTogdHJ1ZSB9LCB7IGlzUHVibGljOiB0cnVlIH0sIHsgY3JlYXRlZEJ5VXNlcklkOiB1c2VySWQgfV0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCFvcmlnaW5hbCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICdUZW1wbGF0ZSBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGR1cGxpY2F0ZWQgPSBhd2FpdCBwcmlzbWEucGxhblRlbXBsYXRlLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIHRpdGxlOiB0aXRsZSB8fCBgJHtvcmlnaW5hbC50aXRsZX0gKENvcHkpYCxcbiAgICAgICAgdGl0bGVGcjogb3JpZ2luYWwudGl0bGVGciA/IGAke29yaWdpbmFsLnRpdGxlRnJ9IChDb3BpZSlgIDogbnVsbCxcbiAgICAgICAgZGVzY3JpcHRpb246IG9yaWdpbmFsLmRlc2NyaXB0aW9uLFxuICAgICAgICBkZXNjcmlwdGlvbkZyOiBvcmlnaW5hbC5kZXNjcmlwdGlvbkZyLFxuICAgICAgICB0eXBlOiBvcmlnaW5hbC50eXBlLFxuICAgICAgICBjYXRlZ29yeTogb3JpZ2luYWwuY2F0ZWdvcnksXG4gICAgICAgIHN1YmplY3Q6IG9yaWdpbmFsLnN1YmplY3QsXG4gICAgICAgIGdyYWRlTWluOiBvcmlnaW5hbC5ncmFkZU1pbixcbiAgICAgICAgZ3JhZGVNYXg6IG9yaWdpbmFsLmdyYWRlTWF4LFxuICAgICAgICB0YWdzOiBvcmlnaW5hbC50YWdzLFxuICAgICAgICBrZXl3b3Jkczogb3JpZ2luYWwua2V5d29yZHMsXG4gICAgICAgIGNyZWF0ZWRCeVVzZXJJZDogdXNlcklkLFxuICAgICAgICBpc1N5c3RlbTogZmFsc2UsXG4gICAgICAgIGlzUHVibGljLFxuICAgICAgICBjb250ZW50OiBvcmlnaW5hbC5jb250ZW50LFxuICAgICAgICBlc3RpbWF0ZWRXZWVrczogb3JpZ2luYWwuZXN0aW1hdGVkV2Vla3MsXG4gICAgICAgIHVuaXRTdHJ1Y3R1cmU6IG9yaWdpbmFsLnVuaXRTdHJ1Y3R1cmUsXG4gICAgICAgIGVzdGltYXRlZE1pbnV0ZXM6IG9yaWdpbmFsLmVzdGltYXRlZE1pbnV0ZXMsXG4gICAgICAgIGxlc3NvblN0cnVjdHVyZTogb3JpZ2luYWwubGVzc29uU3RydWN0dXJlLFxuICAgICAgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgY3JlYXRlZEJ5VXNlcjoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIF9jb3VudDoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgcmF0aW5nczogdHJ1ZSxcbiAgICAgICAgICAgIHZhcmlhdGlvbnM6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXMuc3RhdHVzKDIwMSkuanNvbihkdXBsaWNhdGVkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIEFwcGx5IHRlbXBsYXRlIHRvIGNyZWF0ZSBhIG5ldyBwbGFuXG5yb3V0ZXIucG9zdCgnLzppZC9hcHBseScsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQgfHwgMDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY3VzdG9taXphdGlvbnMgPSB7fSB9ID0gcmVxLmJvZHk7XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IHByaXNtYS5wbGFuVGVtcGxhdGUuZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlkOiByZXEucGFyYW1zLmlkLFxuICAgICAgICBPUjogW3sgaXNTeXN0ZW06IHRydWUgfSwgeyBpc1B1YmxpYzogdHJ1ZSB9LCB7IGNyZWF0ZWRCeVVzZXJJZDogdXNlcklkIH1dLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnVGVtcGxhdGUgbm90IGZvdW5kJyB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdXNhZ2UgdHJhY2tpbmdcbiAgICBhd2FpdCBwcmlzbWEucGxhblRlbXBsYXRlLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogdGVtcGxhdGUuaWQgfSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdXNhZ2VDb3VudDogeyBpbmNyZW1lbnQ6IDEgfSxcbiAgICAgICAgbGFzdFVzZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBNZXJnZSB0ZW1wbGF0ZSBjb250ZW50IHdpdGggdXNlciBjdXN0b21pemF0aW9uc1xuICAgIGNvbnN0IGFwcGxpZWRDb250ZW50ID0ge1xuICAgICAgLi4uKHRlbXBsYXRlLmNvbnRlbnQgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pLFxuICAgICAgLi4uKGN1c3RvbWl6YXRpb25zIHx8IHt9KSxcbiAgICB9O1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgdGVtcGxhdGU6IHtcbiAgICAgICAgaWQ6IHRlbXBsYXRlLmlkLFxuICAgICAgICB0aXRsZTogdGVtcGxhdGUudGl0bGUsXG4gICAgICAgIHR5cGU6IHRlbXBsYXRlLnR5cGUsXG4gICAgICAgIGNvbnRlbnQ6IGFwcGxpZWRDb250ZW50LFxuICAgICAgICB1bml0U3RydWN0dXJlOiB0ZW1wbGF0ZS51bml0U3RydWN0dXJlLFxuICAgICAgICBsZXNzb25TdHJ1Y3R1cmU6IHRlbXBsYXRlLmxlc3NvblN0cnVjdHVyZSxcbiAgICAgICAgZXN0aW1hdGVkV2Vla3M6IHRlbXBsYXRlLmVzdGltYXRlZFdlZWtzLFxuICAgICAgICBlc3RpbWF0ZWRNaW51dGVzOiB0ZW1wbGF0ZS5lc3RpbWF0ZWRNaW51dGVzLFxuICAgICAgfSxcbiAgICAgIGFwcGxpZWRDb250ZW50LFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfbmV4dChlcnIpO1xuICB9XG59KTtcblxuLy8gUmF0ZSBhIHRlbXBsYXRlXG5yb3V0ZXIucG9zdCgnLzppZC9yYXRlJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzLCBfbmV4dCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyPy5pZCB8fCAwO1xuICAgIGlmICghdXNlcklkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyByYXRpbmcsIGNvbW1lbnQgfSA9IHJlcS5ib2R5O1xuXG4gICAgaWYgKCFyYXRpbmcgfHwgcmF0aW5nIDwgMSB8fCByYXRpbmcgPiA1KSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ1JhdGluZyBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNScgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGVtcGxhdGUgZXhpc3RzIGFuZCBpcyBhY2Nlc3NpYmxlXG4gICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCBwcmlzbWEucGxhblRlbXBsYXRlLmZpbmRGaXJzdCh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBpZDogcmVxLnBhcmFtcy5pZCxcbiAgICAgICAgT1I6IFt7IGlzU3lzdGVtOiB0cnVlIH0sIHsgaXNQdWJsaWM6IHRydWUgfSwgeyBjcmVhdGVkQnlVc2VySWQ6IHVzZXJJZCB9XSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1RlbXBsYXRlIG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuXG4gICAgLy8gVXBzZXJ0IHJhdGluZ1xuICAgIGNvbnN0IHRlbXBsYXRlUmF0aW5nID0gYXdhaXQgcHJpc21hLnRlbXBsYXRlUmF0aW5nLnVwc2VydCh7XG4gICAgICB3aGVyZToge1xuICAgICAgICB0ZW1wbGF0ZUlkX3VzZXJJZDoge1xuICAgICAgICAgIHRlbXBsYXRlSWQ6IHJlcS5wYXJhbXMuaWQsXG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHVwZGF0ZToge1xuICAgICAgICByYXRpbmcsXG4gICAgICAgIGNvbW1lbnQsXG4gICAgICB9LFxuICAgICAgY3JlYXRlOiB7XG4gICAgICAgIHRlbXBsYXRlSWQ6IHJlcS5wYXJhbXMuaWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgcmF0aW5nLFxuICAgICAgICBjb21tZW50LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFJlY2FsY3VsYXRlIGF2ZXJhZ2UgcmF0aW5nXG4gICAgY29uc3QgcmF0aW5ncyA9IGF3YWl0IHByaXNtYS50ZW1wbGF0ZVJhdGluZy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogeyB0ZW1wbGF0ZUlkOiByZXEucGFyYW1zLmlkIH0sXG4gICAgICBzZWxlY3Q6IHsgcmF0aW5nOiB0cnVlIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBhdmVyYWdlUmF0aW5nID1cbiAgICAgIHJhdGluZ3MubGVuZ3RoID4gMCA/IHJhdGluZ3MucmVkdWNlKChzdW0sIHIpID0+IHN1bSArIHIucmF0aW5nLCAwKSAvIHJhdGluZ3MubGVuZ3RoIDogMDtcblxuICAgIGF3YWl0IHByaXNtYS5wbGFuVGVtcGxhdGUudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiByZXEucGFyYW1zLmlkIH0sXG4gICAgICBkYXRhOiB7IGF2ZXJhZ2VSYXRpbmcgfSxcbiAgICB9KTtcblxuICAgIHJlcy5qc29uKHRlbXBsYXRlUmF0aW5nKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbi8vIEdldCBjYXRlZ29yaWVzIGFuZCBzdWJqZWN0cyBmb3IgZmlsdGVyaW5nXG5yb3V0ZXIuZ2V0KCcvbWV0YWRhdGEvb3B0aW9ucycsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlcywgX25leHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlcj8uaWQgfHwgMDtcbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IFtzdWJqZWN0cywgZ3JhZGVzLCBjYXRlZ29yaWVzLCB0YWdzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHByaXNtYS5wbGFuVGVtcGxhdGUuZmluZE1hbnkoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIE9SOiBbeyBpc1N5c3RlbTogdHJ1ZSB9LCB7IGlzUHVibGljOiB0cnVlIH0sIHsgY3JlYXRlZEJ5VXNlcklkOiB1c2VySWQgfV0sXG4gICAgICAgICAgc3ViamVjdDogeyBub3Q6IG51bGwgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0OiB7IHN1YmplY3Q6IHRydWUgfSxcbiAgICAgICAgZGlzdGluY3Q6IFsnc3ViamVjdCddLFxuICAgICAgfSksXG4gICAgICBwcmlzbWEucGxhblRlbXBsYXRlLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICBBTkQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgT1I6IFt7IGlzU3lzdGVtOiB0cnVlIH0sIHsgaXNQdWJsaWM6IHRydWUgfSwgeyBjcmVhdGVkQnlVc2VySWQ6IHVzZXJJZCB9XSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIE9SOiBbeyBncmFkZU1pbjogeyBub3Q6IG51bGwgfSB9LCB7IGdyYWRlTWF4OiB7IG5vdDogbnVsbCB9IH1dLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBzZWxlY3Q6IHsgZ3JhZGVNaW46IHRydWUsIGdyYWRlTWF4OiB0cnVlIH0sXG4gICAgICB9KSxcbiAgICAgIHByaXNtYS5wbGFuVGVtcGxhdGUuZmluZE1hbnkoe1xuICAgICAgICBzZWxlY3Q6IHsgY2F0ZWdvcnk6IHRydWUgfSxcbiAgICAgICAgZGlzdGluY3Q6IFsnY2F0ZWdvcnknXSxcbiAgICAgIH0pLFxuICAgICAgcHJpc21hLnBsYW5UZW1wbGF0ZS5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgT1I6IFt7IGlzU3lzdGVtOiB0cnVlIH0sIHsgaXNQdWJsaWM6IHRydWUgfSwgeyBjcmVhdGVkQnlVc2VySWQ6IHVzZXJJZCB9XSxcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0OiB7IHRhZ3M6IHRydWUgfSxcbiAgICAgIH0pLFxuICAgIF0pO1xuXG4gICAgY29uc3QgdW5pcXVlU3ViamVjdHMgPSBzdWJqZWN0c1xuICAgICAgLm1hcCgodCkgPT4gdC5zdWJqZWN0KVxuICAgICAgLmZpbHRlcigocykgPT4gcyAhPT0gbnVsbClcbiAgICAgIC5zb3J0KCk7XG5cbiAgICBjb25zdCBncmFkZVJhbmdlID0gZ3JhZGVzLnJlZHVjZShcbiAgICAgIChyYW5nZSwgdGVtcGxhdGUpID0+IHtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmdyYWRlTWluKSByYW5nZS5taW4gPSBNYXRoLm1pbihyYW5nZS5taW4sIHRlbXBsYXRlLmdyYWRlTWluKTtcbiAgICAgICAgaWYgKHRlbXBsYXRlLmdyYWRlTWF4KSByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHRlbXBsYXRlLmdyYWRlTWF4KTtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgICAgfSxcbiAgICAgIHsgbWluOiAxMiwgbWF4OiAxIH0sXG4gICAgKTtcblxuICAgIGNvbnN0IGFsbFRhZ3MgPSB0YWdzXG4gICAgICAuZmxhdE1hcCgodCkgPT4gKEFycmF5LmlzQXJyYXkodC50YWdzKSA/IHQudGFncyA6IFtdKSlcbiAgICAgIC5maWx0ZXIoKHRhZywgaW5kZXgsIGFycmF5KSA9PiBhcnJheS5pbmRleE9mKHRhZykgPT09IGluZGV4KVxuICAgICAgLnNvcnQoKTtcblxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1YmplY3RzOiB1bmlxdWVTdWJqZWN0cyxcbiAgICAgIGdyYWRlczogQXJyYXkuZnJvbShcbiAgICAgICAgeyBsZW5ndGg6IGdyYWRlUmFuZ2UubWF4IC0gZ3JhZGVSYW5nZS5taW4gKyAxIH0sXG4gICAgICAgIChfLCBpKSA9PiBncmFkZVJhbmdlLm1pbiArIGksXG4gICAgICApLFxuICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcy5tYXAoKGMpID0+IGMuY2F0ZWdvcnkpLFxuICAgICAgdGFnczogYWxsVGFncyxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX25leHQoZXJyKTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWtCSztJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBbEJMLFNBQVNFLE1BQU0sUUFBaUIsU0FBUztBQUV6QyxTQUFTQyxNQUFNLFFBQVEsV0FBVztBQUNsQyxTQUFTQyxRQUFRLFFBQVEs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R0FBQU8sQ0FBQSxTQUFHb0IsSUFBSSxDQUNqQjRKLE9BQU8sQ0FBRVAsQ0FBQyxJQUFNO01BQUE7TUFBQWhMLGNBQUEsR0FBQXdGLENBQUE7TUFBQXhGLGNBQUEsR0FBQU8sQ0FBQTtNQUFBLE9BQUFpTCxLQUFLLENBQUNDLE9BQU8sQ0FBQ1QsQ0FBQyxDQUFDckosSUFBSSxDQUFDO01BQUE7TUFBQSxDQUFBM0IsY0FBQSxHQUFBMEYsQ0FBQSxXQUFHc0YsQ0FBQyxDQUFDckosSUFBSTtNQUFBO01BQUEsQ0FBQTNCLGNBQUEsR0FBQTBGLENBQUEsV0FBRyxFQUFFO0lBQUYsQ0FBRyxDQUFDLENBQ3JEdUYsTUFBTSxDQUFDLENBQUNTLEdBQUcsRUFBRUMsS0FBSyxFQUFFL0osS0FBSyxLQUFLO01BQUE7TUFBQTVCLGNBQUEsR0FBQXdGLENBQUE7TUFBQXhGLGNBQUEsR0FBQU8sQ0FBQTtNQUFBLE9BQUFxQixLQUFLLENBQUNnSyxPQUFPLENBQUNGLEdBQUcsQ0FBQyxLQUFLQyxLQUFLO0lBQUwsQ0FBSyxDQUFDLENBQzNEVCxJQUFJLEVBQUU7SUFBQztJQUFBbEwsY0FBQSxHQUFBTyxDQUFBO0lBRVYrRSxHQUFHLENBQUNRLElBQUksQ0FBQztNQUNQeUUsUUFBUSxFQUFFTyxjQUFjO01BQ3hCTixNQUFNLEVBQUVnQixLQUFLLENBQUNLLElBQUksQ0FDaEI7UUFBRTFFLE1BQU0sRUFBRWdFLFVBQVUsQ0FBQ3RLLEdBQUcsR0FBR3NLLFVBQVUsQ0FBQ3ZLLEdBQUcsR0FBRztNQUFDLENBQUUsRUFDL0MsQ0FBQ2tMLENBQUMsRUFBRUMsQ0FBQyxLQUFLO1FBQUE7UUFBQS9MLGNBQUEsR0FBQXdGLENBQUE7UUFBQXhGLGNBQUEsR0FBQU8sQ0FBQTtRQUFBLE9BQUE0SyxVQUFVLENBQUN2SyxHQUFHLEdBQUdtTCxDQUFDO01BQUQsQ0FBQyxDQUM3QjtNQUNEdEIsVUFBVSxFQUFFQSxVQUFVLENBQUNNLEdBQUcsQ0FBRWlCLENBQUMsSUFBSztRQUFBO1FBQUFoTSxjQUFBLEdBQUF3RixDQUFBO1FBQUF4RixjQUFBLEdBQUFPLENBQUE7UUFBQSxPQUFBeUwsQ0FBQyxDQUFDM0ssUUFBUTtNQUFSLENBQVEsQ0FBQztNQUM3Q00sSUFBSSxFQUFFMko7S0FDUCxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU81QyxHQUFHLEVBQUU7SUFBQTtJQUFBMUksY0FBQSxHQUFBTyxDQUFBO0lBQ1pnRixLQUFLLENBQUNtRCxHQUFHLENBQUM7RUFDWjtBQUNGLENBQUMsQ0FBQztBQUVGLGVBQWVwSSxNQUFNIiwiaWdub3JlTGlzdCI6W119