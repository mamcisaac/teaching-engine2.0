{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/daybook-entries.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/daybook-entries.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate } from '../validation';\nimport { z } from 'zod';\n\nconst router = Router();\n\ninterface DaybookEntryForAnalytics {\n  date: Date | string;\n  rating?: number | null;\n  overallRating?: number | null;\n  studentEngagement?: string | null;\n  whatWorked?: string | null;\n  whatDidntWork?: string | null;\n  studentChallenges?: string | null;\n  nextSteps?: string | null;\n  wouldReuseLesson?: boolean | null;\n  lessonPlan?: {\n    unitPlan?: {\n      longRangePlan?: {\n        subject?: string;\n      } | null;\n    } | null;\n  } | null;\n}\n\n// Analytics helper functions\nfunction calculateTrends(entries: DaybookEntryForAnalytics[]): {\n  ratingTrend: string;\n  engagementTrend: string;\n} {\n  if (entries.length < 2) {\n    return { ratingTrend: 'insufficient_data', engagementTrend: 'insufficient_data' };\n  }\n\n  // Sort entries by date to analyze trends over time\n  const sortedEntries = entries.sort(\n    (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),\n  );\n\n  // Calculate rating trend\n  const ratingsWithValues = sortedEntries.filter((e) => e.rating !== null);\n  let ratingTrend = 'stable';\n\n  if (ratingsWithValues.length >= 3) {\n    const firstHalf = ratingsWithValues.slice(0, Math.ceil(ratingsWithValues.length / 2));\n    const secondHalf = ratingsWithValues.slice(Math.floor(ratingsWithValues.length / 2));\n\n    const firstAvg =\n      firstHalf.reduce((sum, e) => sum + (e.rating ?? e.overallRating ?? 0), 0) / firstHalf.length;\n    const secondAvg =\n      secondHalf.reduce((sum, e) => sum + (e.rating ?? e.overallRating ?? 0), 0) /\n      secondHalf.length;\n\n    const diff = secondAvg - firstAvg;\n    if (diff > 0.3) ratingTrend = 'improving';\n    else if (diff < -0.3) ratingTrend = 'declining';\n  }\n\n  // Calculate engagement trend by analyzing studentEngagement text\n  const engagementEntries = sortedEntries.filter((e) => e.studentEngagement);\n  let engagementTrend = 'stable';\n\n  if (engagementEntries.length >= 2) {\n    const recentEntries = engagementEntries.slice(-3); // Last 3 entries\n    const positiveWords = ['engaged', 'active', 'interested', 'excited', 'participated', 'focused'];\n    const negativeWords = ['disengaged', 'distracted', 'bored', 'struggled', 'off-task'];\n\n    let positiveCount = 0;\n    let negativeCount = 0;\n\n    recentEntries.forEach((entry) => {\n      const text = entry.studentEngagement.toLowerCase();\n      positiveWords.forEach((word) => {\n        if (text.includes(word)) positiveCount++;\n      });\n      negativeWords.forEach((word) => {\n        if (text.includes(word)) negativeCount++;\n      });\n    });\n\n    if (positiveCount > negativeCount) engagementTrend = 'improving';\n    else if (negativeCount > positiveCount) engagementTrend = 'declining';\n  }\n\n  return { ratingTrend, engagementTrend };\n}\n\nfunction extractCommonThemes(entries: DaybookEntryForAnalytics[]): {\n  successes: string[];\n  challenges: string[];\n  improvements: string[];\n} {\n  const successWords = new Map<string, number>();\n  const challengeWords = new Map<string, number>();\n  const improvementWords = new Map<string, number>();\n\n  entries.forEach((entry) => {\n    // Extract themes from whatWorked\n    if (entry.whatWorked) {\n      const words = extractKeywords(entry.whatWorked);\n      words.forEach((word) => {\n        successWords.set(word, (successWords.get(word) || 0) + 1);\n      });\n    }\n\n    // Extract themes from whatDidntWork and studentChallenges\n    if (entry.whatDidntWork || entry.studentChallenges) {\n      const text = `${entry.whatDidntWork || ''} ${entry.studentChallenges || ''}`;\n      const words = extractKeywords(text);\n      words.forEach((word) => {\n        challengeWords.set(word, (challengeWords.get(word) || 0) + 1);\n      });\n    }\n\n    // Extract themes from nextSteps\n    if (entry.nextSteps) {\n      const words = extractKeywords(entry.nextSteps);\n      words.forEach((word) => {\n        improvementWords.set(word, (improvementWords.get(word) || 0) + 1);\n      });\n    }\n  });\n\n  // Get top themes (minimum 2 occurrences)\n  const getTopThemes = (wordMap: Map<string, number>) => {\n    return Array.from(wordMap.entries())\n      .filter(([_, count]) => count >= 2)\n      .sort(([_, a], [__, b]) => b - a)\n      .slice(0, 5)\n      .map(([word, count]) => `${word} (${count} mentions)`);\n  };\n\n  return {\n    successes: getTopThemes(successWords),\n    challenges: getTopThemes(challengeWords),\n    improvements: getTopThemes(improvementWords),\n  };\n}\n\nfunction extractKeywords(text: string): string[] {\n  // Simple keyword extraction - remove common words and extract meaningful terms\n  const commonWords = new Set([\n    'the',\n    'a',\n    'an',\n    'and',\n    'or',\n    'but',\n    'in',\n    'on',\n    'at',\n    'to',\n    'for',\n    'of',\n    'with',\n    'by',\n    'was',\n    'were',\n    'is',\n    'are',\n    'be',\n    'been',\n    'have',\n    'has',\n    'had',\n    'do',\n    'does',\n    'did',\n    'will',\n    'would',\n    'could',\n    'should',\n    'may',\n    'might',\n    'can',\n    'this',\n    'that',\n    'these',\n    'those',\n  ]);\n\n  return text\n    .toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter((word) => word.length > 3 && !commonWords.has(word))\n    .slice(0, 10); // Limit to prevent noise\n}\n\nfunction generateRecommendations(entries: DaybookEntryForAnalytics[]): string[] {\n  const recommendations: string[] = [];\n\n  if (entries.length === 0) {\n    return ['Start documenting your daily teaching experiences to build insights over time.'];\n  }\n\n  // Analyze rating patterns\n  const ratedEntries = entries.filter((e) => e.rating !== null);\n  if (ratedEntries.length > 0) {\n    const avgRating = ratedEntries.reduce((sum, e) => sum + e.rating, 0) / ratedEntries.length;\n    const lowRatedEntries = ratedEntries.filter((e) => e.rating < 3);\n\n    if (avgRating < 3.5) {\n      recommendations.push(\n        'Consider reviewing lessons with lower ratings to identify improvement patterns.',\n      );\n    }\n\n    if (lowRatedEntries.length > ratedEntries.length * 0.3) {\n      recommendations.push(\n        'Focus on documenting what worked well in higher-rated lessons for replication.',\n      );\n    }\n  }\n\n  // Check reflection completeness\n  const reflectiveEntries = entries.filter(\n    (e) =>\n      e.whatWorked || e.whatDidntWork || e.studentEngagement || e.studentChallenges || e.nextSteps,\n  );\n\n  if (reflectiveEntries.length < entries.length * 0.5) {\n    recommendations.push(\n      'Increase reflection depth by completing more reflection fields for better insights.',\n    );\n  }\n\n  // Analyze reuse patterns\n  const reusedEntries = entries.filter((e) => e.wouldReuseLesson === true);\n  if (reusedEntries.length > 0) {\n    recommendations.push(\n      'Document successful strategies from reusable lessons for your teaching resource bank.',\n    );\n  }\n\n  // Time-based recommendations\n  const recentEntries = entries.filter((e) => {\n    const entryDate = new Date(e.date);\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    return entryDate >= oneWeekAgo;\n  });\n\n  if (recentEntries.length === 0) {\n    recommendations.push(\n      'Regular reflection helps identify patterns - try to document lessons weekly.',\n    );\n  }\n\n  return recommendations.length > 0\n    ? recommendations\n    : [\n        'Continue documenting your teaching experiences to build a comprehensive reflection database.',\n        'Focus on noting both successes and challenges to maximize learning opportunities.',\n      ];\n}\n\n// Validation schemas\nconst daybookEntryCreateSchema = z.object({\n  date: z.string().datetime(),\n  lessonPlanId: z.string().optional(),\n  whatWorked: z.string().optional(),\n  whatWorkedFr: z.string().optional(),\n  whatDidntWork: z.string().optional(),\n  whatDidntWorkFr: z.string().optional(),\n  nextSteps: z.string().optional(),\n  nextStepsFr: z.string().optional(),\n  studentEngagement: z.string().optional(),\n  studentChallenges: z.string().optional(),\n  studentSuccesses: z.string().optional(),\n  notes: z.string().optional(),\n  notesFr: z.string().optional(),\n  privateNotes: z.string().optional(),\n  overallRating: z.number().int().min(1).max(5).optional(),\n  wouldReuseLesson: z.boolean().optional(),\n  expectationCoverage: z\n    .array(\n      z.object({\n        expectationId: z.string(),\n        coverage: z.enum(['introduced', 'developing', 'consolidated']),\n      }),\n    )\n    .optional(),\n});\n\nconst daybookEntryUpdateSchema = daybookEntryCreateSchema.partial();\n\n// Get all daybook entries for the authenticated user\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { startDate, endDate, hasLessonPlan, rating } = req.query;\n\n    const where: Prisma.DaybookEntryWhereInput = { userId };\n\n    if (startDate || endDate) {\n      where.date = {};\n      if (startDate) where.date.gte = new Date(String(startDate));\n      if (endDate) where.date.lte = new Date(String(endDate));\n    }\n\n    if (hasLessonPlan !== undefined) {\n      where.lessonPlanId = hasLessonPlan === 'true' ? { not: null } : null;\n    }\n\n    if (rating) {\n      where.overallRating = Number(rating);\n    }\n\n    const entries = await prisma.daybookEntry.findMany({\n      where,\n      orderBy: { date: 'desc' },\n      include: {\n        lessonPlan: {\n          select: {\n            id: true,\n            title: true,\n            unitPlan: {\n              select: {\n                id: true,\n                title: true,\n                longRangePlan: {\n                  select: {\n                    subject: true,\n                    grade: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n        _count: {\n          select: { expectations: true },\n        },\n      },\n    });\n\n    res.json(entries);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single daybook entry\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const entry = await prisma.daybookEntry.findFirst({\n      where: {\n        id: req.params.id,\n        userId,\n      },\n      include: {\n        lessonPlan: {\n          include: {\n            unitPlan: {\n              include: {\n                longRangePlan: true,\n              },\n            },\n            expectations: {\n              include: { expectation: true },\n            },\n            resources: true,\n          },\n        },\n        expectations: {\n          include: {\n            expectation: true,\n          },\n        },\n      },\n    });\n\n    if (!entry) {\n      return res.status(404).json({ error: 'Daybook entry not found' });\n    }\n\n    res.json(entry);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new daybook entry\nrouter.post('/', validate(daybookEntryCreateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationCoverage, ...entryData } = req.body;\n\n    // If linking to a lesson plan, verify ownership and no existing entry\n    if (entryData.lessonPlanId) {\n      const lessonPlan = await prisma.eTFOLessonPlan.findFirst({\n        where: {\n          id: entryData.lessonPlanId,\n          userId,\n        },\n        include: {\n          daybookEntry: true,\n        },\n      });\n\n      if (!lessonPlan) {\n        return res.status(404).json({ error: 'Lesson plan not found' });\n      }\n\n      if (lessonPlan.daybookEntry) {\n        return res.status(400).json({\n          error: 'Lesson plan already has a daybook entry',\n        });\n      }\n    }\n\n    const entry = await prisma.daybookEntry.create({\n      data: {\n        ...entryData,\n        userId,\n        date: new Date(entryData.date),\n      },\n      include: {\n        lessonPlan: {\n          select: {\n            id: true,\n            title: true,\n            unitPlan: {\n              select: {\n                id: true,\n                title: true,\n                longRangePlan: {\n                  select: {\n                    subject: true,\n                    grade: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n        _count: {\n          select: { expectations: true },\n        },\n      },\n    });\n\n    // Add expectation coverage if provided\n    if (expectationCoverage && expectationCoverage.length > 0) {\n      await prisma.daybookEntryExpectation.createMany({\n        data: expectationCoverage.map((ec: { expectationId: string; coverage: string }) => ({\n          daybookEntryId: entry.id,\n          expectationId: ec.expectationId,\n          coverage: ec.coverage,\n        })),\n      });\n\n      // Refetch with expectations\n      const updatedEntry = await prisma.daybookEntry.findUnique({\n        where: { id: entry.id },\n        include: {\n          lessonPlan: {\n            select: {\n              id: true,\n              title: true,\n              unitPlan: {\n                select: {\n                  id: true,\n                  title: true,\n                  longRangePlan: {\n                    select: {\n                      subject: true,\n                      grade: true,\n                    },\n                  },\n                },\n              },\n            },\n          },\n          expectations: {\n            include: { expectation: true },\n          },\n        },\n      });\n\n      return res.status(201).json(updatedEntry);\n    }\n\n    res.status(201).json(entry);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a daybook entry\nrouter.put('/:id', validate(daybookEntryUpdateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationCoverage, ...updateData } = req.body;\n\n    // Verify ownership\n    const existing = await prisma.daybookEntry.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!existing) {\n      return res.status(404).json({ error: 'Daybook entry not found' });\n    }\n\n    // Prepare update data\n    const data: Prisma.DaybookEntryUpdateInput = { ...updateData };\n    if (updateData.date) data.date = new Date(updateData.date);\n\n    // Update the entry\n    const entry = await prisma.daybookEntry.update({\n      where: { id: req.params.id },\n      data,\n    });\n\n    // Update expectation coverage if provided\n    if (expectationCoverage !== undefined) {\n      // Remove existing coverage\n      await prisma.daybookEntryExpectation.deleteMany({\n        where: { daybookEntryId: entry.id },\n      });\n\n      // Add new coverage\n      if (expectationCoverage.length > 0) {\n        await prisma.daybookEntryExpectation.createMany({\n          data: expectationCoverage.map((ec: { expectationId: string; coverage: string }) => ({\n            daybookEntryId: entry.id,\n            expectationId: ec.expectationId,\n            coverage: ec.coverage,\n          })),\n        });\n      }\n    }\n\n    // Refetch with updated relationships\n    const updatedEntry = await prisma.daybookEntry.findUnique({\n      where: { id: entry.id },\n      include: {\n        lessonPlan: {\n          include: {\n            unitPlan: {\n              include: {\n                longRangePlan: true,\n              },\n            },\n          },\n        },\n        expectations: {\n          include: { expectation: true },\n        },\n      },\n    });\n\n    res.json(updatedEntry);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a daybook entry\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership\n    const entry = await prisma.daybookEntry.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!entry) {\n      return res.status(404).json({ error: 'Daybook entry not found' });\n    }\n\n    await prisma.daybookEntry.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get daybook insights and patterns\nrouter.get('/insights/summary', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { startDate, endDate, subject } = req.query;\n\n    const where: Prisma.DaybookEntryWhereInput = { userId };\n\n    if (startDate || endDate) {\n      where.date = {};\n      if (startDate) where.date.gte = new Date(String(startDate));\n      if (endDate) where.date.lte = new Date(String(endDate));\n    }\n\n    if (subject) {\n      where.lessonPlan = {\n        unitPlan: {\n          longRangePlan: {\n            subject: String(subject),\n          },\n        },\n      };\n    }\n\n    // Get all entries for the period\n    const entries = await prisma.daybookEntry.findMany({\n      where,\n      select: {\n        id: true,\n        date: true,\n        overallRating: true,\n        wouldReuseLesson: true,\n        whatWorked: true,\n        whatDidntWork: true,\n        studentEngagement: true,\n        studentChallenges: true,\n        lessonPlan: {\n          select: {\n            unitPlan: {\n              select: {\n                longRangePlan: {\n                  select: { subject: true },\n                },\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Calculate insights\n    const totalEntries = entries.length;\n    const entriesWithRating = entries.filter((e) => e.overallRating !== null);\n    const avgRating =\n      entriesWithRating.length > 0\n        ? entriesWithRating.reduce((sum, e) => sum + (e.overallRating ?? 0), 0) /\n          entriesWithRating.length\n        : null;\n\n    const reuseStats = entries.filter((e) => e.wouldReuseLesson !== null);\n    const reusePercentage =\n      reuseStats.length > 0\n        ? Math.round(\n            (reuseStats.filter((e) => e.wouldReuseLesson).length / reuseStats.length) * 100,\n          )\n        : null;\n\n    // Common themes (would need NLP for real implementation)\n    const insights = {\n      period: {\n        start: startDate || 'all time',\n        end: endDate || 'present',\n      },\n      summary: {\n        totalEntries,\n        averageRating: avgRating ? Number(avgRating.toFixed(2)) : null,\n        reusePercentage,\n        entriesWithReflections: entries.filter(\n          (e) => e.whatWorked || e.whatDidntWork || e.studentEngagement || e.studentChallenges,\n        ).length,\n      },\n      trends: calculateTrends(entries),\n      commonThemes: extractCommonThemes(entries),\n      recommendations: generateRecommendations(entries),\n    };\n\n    res.json(insights);\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],"version":3}