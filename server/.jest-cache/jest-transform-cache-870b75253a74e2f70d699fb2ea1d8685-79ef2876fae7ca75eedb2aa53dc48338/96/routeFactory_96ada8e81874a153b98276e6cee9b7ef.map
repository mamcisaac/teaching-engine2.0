{"version":3,"names":["Router","z","authMiddleware","createCrudRoutes","options","cov_na9wdwddj","f","router","s","modelName","prismaModel","createSchema","updateSchema","querySchema","middleware","b","includeRelations","orderBy","id","transformResponse","data","beforeCreate","afterCreate","beforeUpdate","afterUpdate","beforeDelete","afterDelete","use","get","req","res","query","parse","page","limit","search","filters","skip","Number","where","OR","name","contains","mode","title","items","total","Promise","all","findMany","include","take","count","json","map","totalPages","Math","ceil","error","console","status","message","parseInt","params","item","findUnique","post","body","user","userId","create","ZodError","errors","put","existing","update","delete","send"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/utils/routeFactory.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\nimport { z } from 'zod';\nimport { authMiddleware } from '../middleware/auth';\n\n// Base interface for models that might have userId\ninterface BaseModel {\n  id: number;\n  userId?: number;\n}\n\ninterface RouteFactoryOptions<T extends BaseModel = BaseModel> {\n  modelName: string;\n  prismaModel: {\n    findMany: (args: Record<string, unknown>) => Promise<T[]>;\n    findUnique: (args: Record<string, unknown>) => Promise<T | null>;\n    create: (args: Record<string, unknown>) => Promise<T>;\n    update: (args: Record<string, unknown>) => Promise<T>;\n    delete: (args: Record<string, unknown>) => Promise<T>;\n    count: (args: Record<string, unknown>) => Promise<number>;\n  };\n  createSchema?: z.ZodSchema<Record<string, unknown>>;\n  updateSchema?: z.ZodSchema<Record<string, unknown>>;\n  querySchema?: z.ZodSchema<Record<string, unknown>>;\n  middleware?: Array<(req: Request, res: Response, next: NextFunction) => void>;\n  includeRelations?: Record<string, boolean | object>;\n  orderBy?: Record<string, 'asc' | 'desc'>;\n  transformResponse?: (data: T) => T;\n  beforeCreate?: (\n    data: Record<string, unknown>,\n    req: Request,\n  ) => Promise<Record<string, unknown>> | Record<string, unknown>;\n  afterCreate?: (data: T, req: Request) => Promise<void> | void;\n  beforeUpdate?: (\n    id: number,\n    data: Record<string, unknown>,\n    req: Request,\n  ) => Promise<Record<string, unknown>> | Record<string, unknown>;\n  afterUpdate?: (data: T, req: Request) => Promise<void> | void;\n  beforeDelete?: (id: number, req: Request) => Promise<void> | void;\n  afterDelete?: (id: number, req: Request) => Promise<void> | void;\n}\n\nexport function createCrudRoutes<T extends BaseModel = BaseModel>(\n  options: RouteFactoryOptions<T>,\n): Router {\n  const router = Router();\n  const {\n    modelName,\n    prismaModel,\n    createSchema,\n    updateSchema,\n    querySchema,\n    middleware = [authMiddleware],\n    includeRelations = {},\n    orderBy = { id: 'desc' },\n    transformResponse = (data) => data,\n    beforeCreate,\n    afterCreate,\n    beforeUpdate,\n    afterUpdate,\n    beforeDelete,\n    afterDelete,\n  } = options;\n\n  // Apply middleware to all routes\n  router.use(middleware);\n\n  // GET - List all with optional query params\n  router.get('/', async (req: Request, res: Response) => {\n    try {\n      const query = querySchema ? querySchema.parse(req.query) : req.query;\n\n      const { page = 1, limit = 20, search, ...filters } = query;\n      const skip = (Number(page) - 1) * Number(limit);\n\n      const where = search\n        ? {\n            OR: [\n              { name: { contains: search, mode: 'insensitive' } },\n              { title: { contains: search, mode: 'insensitive' } },\n              // Add more searchable fields as needed\n            ],\n            ...filters,\n          }\n        : filters;\n\n      const [items, total] = await Promise.all([\n        prismaModel.findMany({\n          where,\n          include: includeRelations,\n          orderBy,\n          skip,\n          take: Number(limit),\n        }),\n        prismaModel.count({ where }),\n      ]);\n\n      res.json({\n        items: items.map(transformResponse),\n        total,\n        page: Number(page),\n        limit: Number(limit),\n        totalPages: Math.ceil(total / Number(limit)),\n      });\n    } catch (error) {\n      console.error(`Error fetching ${modelName}s:`, error);\n      res.status(500).json({ message: `Failed to fetch ${modelName}s` });\n    }\n  });\n\n  // GET - Get single by ID\n  router.get('/:id', async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n\n      const item = await prismaModel.findUnique({\n        where: { id },\n        include: includeRelations,\n      });\n\n      if (!item) {\n        return res.status(404).json({ message: `${modelName} not found` });\n      }\n\n      res.json(transformResponse(item));\n    } catch (error) {\n      console.error(`Error fetching ${modelName}:`, error);\n      res.status(500).json({ message: `Failed to fetch ${modelName}` });\n    }\n  });\n\n  // POST - Create new\n  router.post('/', async (req: Request, res: Response) => {\n    try {\n      let data = createSchema ? createSchema.parse(req.body) : req.body;\n\n      // Add user ID if authenticated\n      if (req.user) {\n        data.userId = req.user.id;\n      }\n\n      // Run before create hook\n      if (beforeCreate) {\n        data = await beforeCreate(data, req);\n      }\n\n      const item = await prismaModel.create({\n        data,\n        include: includeRelations,\n      });\n\n      // Run after create hook\n      if (afterCreate) {\n        await afterCreate(item, req);\n      }\n\n      res.status(201).json(transformResponse(item));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid data', errors: error.errors });\n      }\n      console.error(`Error creating ${modelName}:`, error);\n      res.status(500).json({ message: `Failed to create ${modelName}` });\n    }\n  });\n\n  // PUT - Update by ID\n  router.put('/:id', async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      let data = updateSchema ? updateSchema.parse(req.body) : req.body;\n\n      // Check if item exists\n      const existing = await prismaModel.findUnique({ where: { id } });\n      if (!existing) {\n        return res.status(404).json({ message: `${modelName} not found` });\n      }\n\n      // Check ownership if user ID exists\n      if (req.user && existing.userId && existing.userId !== req.user.id) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n\n      // Run before update hook\n      if (beforeUpdate) {\n        data = await beforeUpdate(id, data, req);\n      }\n\n      const item = await prismaModel.update({\n        where: { id },\n        data,\n        include: includeRelations,\n      });\n\n      // Run after update hook\n      if (afterUpdate) {\n        await afterUpdate(item, req);\n      }\n\n      res.json(transformResponse(item));\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid data', errors: error.errors });\n      }\n      console.error(`Error updating ${modelName}:`, error);\n      res.status(500).json({ message: `Failed to update ${modelName}` });\n    }\n  });\n\n  // DELETE - Delete by ID\n  router.delete('/:id', async (req: Request, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n\n      // Check if item exists\n      const existing = await prismaModel.findUnique({ where: { id } });\n      if (!existing) {\n        return res.status(404).json({ message: `${modelName} not found` });\n      }\n\n      // Check ownership if user ID exists\n      if (req.user && existing.userId && existing.userId !== req.user.id) {\n        return res.status(403).json({ message: 'Unauthorized' });\n      }\n\n      // Run before delete hook\n      if (beforeDelete) {\n        await beforeDelete(id, req);\n      }\n\n      await prismaModel.delete({ where: { id } });\n\n      // Run after delete hook\n      if (afterDelete) {\n        await afterDelete(id, req);\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(`Error deleting ${modelName}:`, error);\n      res.status(500).json({ message: `Failed to delete ${modelName}` });\n    }\n  });\n\n  return router;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAM,QAAyC,SAAS;AACjE,SAASC,CAAC,QAAQ,KAAK;AACvB,SAASC,cAAc,QAAQ,oBAAoB;AAwCnD,OAAM,SAAUC,gBAAgBA,CAC9BC,OAA+B;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAE/B,MAAMC,MAAM;EAAA;EAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGR,MAAM,EAAE;EACvB,MAAM;IACJS,SAAS;IACTC,WAAW;IACXC,YAAY;IACZC,YAAY;IACZC,WAAW;IACXC,UAAU;IAAA;IAAA,CAAAT,aAAA,GAAAU,CAAA,UAAG,CAACb,cAAc,CAAC;IAC7Bc,gBAAgB;IAAA;IAAA,CAAAX,aAAA,GAAAU,CAAA,UAAG,EAAE;IACrBE,OAAO;IAAA;IAAA,CAAAZ,aAAA,GAAAU,CAAA,UAAG;MAAEG,EAAE,EAAE;IAAM,CAAE;IACxBC,iBAAiB;IAAA;IAAA,CAAAd,aAAA,GAAAU,CAAA,UAAIK,IAAI,IAAKA;MAAAA;MAAAA,sBAAA;MAAAA,sBAAA;MAAAA,MAAA,CAAAA,IAAI;IAAJ,CAAI;IAClCC,YAAY;IACZC,WAAW;IACXC,YAAY;IACZC,WAAW;IACXC,YAAY;IACZC;EAAW,CACZ;EAAA;EAAA,CAAArB,aAAA,GAAAG,CAAA,OAAGJ,OAAO;EAEX;EAAA;EAAAC,aAAA,GAAAG,CAAA;EACAD,MAAM,CAACoB,GAAG,CAACb,UAAU,CAAC;EAEtB;EAAA;EAAAT,aAAA,GAAAG,CAAA;EACAD,MAAM,CAACqB,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAY,EAAEC,GAAa,KAAI;IAAA;IAAAzB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAG,CAAA;IACpD,IAAI;MACF,MAAMuB,KAAK;MAAA;MAAA,CAAA1B,aAAA,GAAAG,CAAA,OAAGK,WAAW;MAAA;MAAA,CAAAR,aAAA,GAAAU,CAAA,UAAGF,WAAW,CAACmB,KAAK,CAACH,GAAG,CAACE,KAAK,CAAC;MAAA;MAAA,CAAA1B,aAAA,GAAAU,CAAA,UAAGc,GAAG,CAACE,KAAK;MAEpE,MAAM;QAAEE,IAAI;QAAA;QAAA,CAAA5B,aAAA,GAAAU,CAAA,UAAG,CAAC;QAAEmB,KAAK;QAAA;QAAA,CAAA7B,aAAA,GAAAU,CAAA,UAAG,EAAE;QAAEoB,MAAM;QAAE,GAAGC;MAAO,CAAE;MAAA;MAAA,CAAA/B,aAAA,GAAAG,CAAA,OAAGuB,KAAK;MAC1D,MAAMM,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAG,CAAA,OAAG,CAAC8B,MAAM,CAACL,IAAI,CAAC,GAAG,CAAC,IAAIK,MAAM,CAACJ,KAAK,CAAC;MAE/C,MAAMK,KAAK;MAAA;MAAA,CAAAlC,aAAA,GAAAG,CAAA,OAAG2B,MAAM;MAAA;MAAA,CAAA9B,aAAA,GAAAU,CAAA,UAChB;QACEyB,EAAE,EAAE,CACF;UAAEC,IAAI,EAAE;YAAEC,QAAQ,EAAEP,MAAM;YAAEQ,IAAI,EAAE;UAAa;QAAE,CAAE,EACnD;UAAEC,KAAK,EAAE;YAAEF,QAAQ,EAAEP,MAAM;YAAEQ,IAAI,EAAE;UAAa;QAAE;QAClD;QAAA,CACD;QACD,GAAGP;OACJ;MAAA;MAAA,CAAA/B,aAAA,GAAAU,CAAA,UACDqB,OAAO;MAEX,MAAM,CAACS,KAAK,EAAEC,KAAK,CAAC;MAAA;MAAA,CAAAzC,aAAA,GAAAG,CAAA,QAAG,MAAMuC,OAAO,CAACC,GAAG,CAAC,CACvCtC,WAAW,CAACuC,QAAQ,CAAC;QACnBV,KAAK;QACLW,OAAO,EAAElC,gBAAgB;QACzBC,OAAO;QACPoB,IAAI;QACJc,IAAI,EAAEb,MAAM,CAACJ,KAAK;OACnB,CAAC,EACFxB,WAAW,CAAC0C,KAAK,CAAC;QAAEb;MAAK,CAAE,CAAC,CAC7B,CAAC;MAAC;MAAAlC,aAAA,GAAAG,CAAA;MAEHsB,GAAG,CAACuB,IAAI,CAAC;QACPR,KAAK,EAAEA,KAAK,CAACS,GAAG,CAACnC,iBAAiB,CAAC;QACnC2B,KAAK;QACLb,IAAI,EAAEK,MAAM,CAACL,IAAI,CAAC;QAClBC,KAAK,EAAEI,MAAM,CAACJ,KAAK,CAAC;QACpBqB,UAAU,EAAEC,IAAI,CAACC,IAAI,CAACX,KAAK,GAAGR,MAAM,CAACJ,KAAK,CAAC;OAC5C,CAAC;IACJ,CAAC,CAAC,OAAOwB,KAAK,EAAE;MAAA;MAAArD,aAAA,GAAAG,CAAA;MACdmD,OAAO,CAACD,KAAK,CAAC,kBAAkBjD,SAAS,IAAI,EAAEiD,KAAK,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MACtDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;QAAEQ,OAAO,EAAE,mBAAmBpD,SAAS;MAAG,CAAE,CAAC;IACpE;EACF,CAAC,CAAC;EAEF;EAAA;EAAAJ,aAAA,GAAAG,CAAA;EACAD,MAAM,CAACqB,GAAG,CAAC,MAAM,EAAE,OAAOC,GAAY,EAAEC,GAAa,KAAI;IAAA;IAAAzB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAG,CAAA;IACvD,IAAI;MACF,MAAMU,EAAE;MAAA;MAAA,CAAAb,aAAA,GAAAG,CAAA,QAAGsD,QAAQ,CAACjC,GAAG,CAACkC,MAAM,CAAC7C,EAAE,CAAC;MAElC,MAAM8C,IAAI;MAAA;MAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG,MAAME,WAAW,CAACuD,UAAU,CAAC;QACxC1B,KAAK,EAAE;UAAErB;QAAE,CAAE;QACbgC,OAAO,EAAElC;OACV,CAAC;MAAC;MAAAX,aAAA,GAAAG,CAAA;MAEH,IAAI,CAACwD,IAAI,EAAE;QAAA;QAAA3D,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACT,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE,GAAGpD,SAAS;QAAY,CAAE,CAAC;MACpE,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MAEDsB,GAAG,CAACuB,IAAI,CAAClC,iBAAiB,CAAC6C,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA;MAAArD,aAAA,GAAAG,CAAA;MACdmD,OAAO,CAACD,KAAK,CAAC,kBAAkBjD,SAAS,GAAG,EAAEiD,KAAK,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MACrDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;QAAEQ,OAAO,EAAE,mBAAmBpD,SAAS;MAAE,CAAE,CAAC;IACnE;EACF,CAAC,CAAC;EAEF;EAAA;EAAAJ,aAAA,GAAAG,CAAA;EACAD,MAAM,CAAC2D,IAAI,CAAC,GAAG,EAAE,OAAOrC,GAAY,EAAEC,GAAa,KAAI;IAAA;IAAAzB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAG,CAAA;IACrD,IAAI;MACF,IAAIY,IAAI;MAAA;MAAA,CAAAf,aAAA,GAAAG,CAAA,QAAGG,YAAY;MAAA;MAAA,CAAAN,aAAA,GAAAU,CAAA,UAAGJ,YAAY,CAACqB,KAAK,CAACH,GAAG,CAACsC,IAAI,CAAC;MAAA;MAAA,CAAA9D,aAAA,GAAAU,CAAA,UAAGc,GAAG,CAACsC,IAAI;MAEjE;MAAA;MAAA9D,aAAA,GAAAG,CAAA;MACA,IAAIqB,GAAG,CAACuC,IAAI,EAAE;QAAA;QAAA/D,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACZY,IAAI,CAACiD,MAAM,GAAGxC,GAAG,CAACuC,IAAI,CAAClD,EAAE;MAC3B,CAAC;MAAA;MAAA;QAAAb,aAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,aAAA,GAAAG,CAAA;MACA,IAAIa,YAAY,EAAE;QAAA;QAAAhB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAChBY,IAAI,GAAG,MAAMC,YAAY,CAACD,IAAI,EAAES,GAAG,CAAC;MACtC,CAAC;MAAA;MAAA;QAAAxB,aAAA,GAAAU,CAAA;MAAA;MAED,MAAMiD,IAAI;MAAA;MAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG,MAAME,WAAW,CAAC4D,MAAM,CAAC;QACpClD,IAAI;QACJ8B,OAAO,EAAElC;OACV,CAAC;MAEF;MAAA;MAAAX,aAAA,GAAAG,CAAA;MACA,IAAIc,WAAW,EAAE;QAAA;QAAAjB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACf,MAAMc,WAAW,CAAC0C,IAAI,EAAEnC,GAAG,CAAC;MAC9B,CAAC;MAAA;MAAA;QAAAxB,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MAEDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAClC,iBAAiB,CAAC6C,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA;MAAArD,aAAA,GAAAG,CAAA;MACd,IAAIkD,KAAK,YAAYzD,CAAC,CAACsE,QAAQ,EAAE;QAAA;QAAAlE,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAC/B,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE,cAAc;UAAEW,MAAM,EAAEd,KAAK,CAACc;QAAM,CAAE,CAAC;MAChF,CAAC;MAAA;MAAA;QAAAnE,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MACDmD,OAAO,CAACD,KAAK,CAAC,kBAAkBjD,SAAS,GAAG,EAAEiD,KAAK,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MACrDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;QAAEQ,OAAO,EAAE,oBAAoBpD,SAAS;MAAE,CAAE,CAAC;IACpE;EACF,CAAC,CAAC;EAEF;EAAA;EAAAJ,aAAA,GAAAG,CAAA;EACAD,MAAM,CAACkE,GAAG,CAAC,MAAM,EAAE,OAAO5C,GAAY,EAAEC,GAAa,KAAI;IAAA;IAAAzB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAG,CAAA;IACvD,IAAI;MACF,MAAMU,EAAE;MAAA;MAAA,CAAAb,aAAA,GAAAG,CAAA,QAAGsD,QAAQ,CAACjC,GAAG,CAACkC,MAAM,CAAC7C,EAAE,CAAC;MAClC,IAAIE,IAAI;MAAA;MAAA,CAAAf,aAAA,GAAAG,CAAA,QAAGI,YAAY;MAAA;MAAA,CAAAP,aAAA,GAAAU,CAAA,WAAGH,YAAY,CAACoB,KAAK,CAACH,GAAG,CAACsC,IAAI,CAAC;MAAA;MAAA,CAAA9D,aAAA,GAAAU,CAAA,WAAGc,GAAG,CAACsC,IAAI;MAEjE;MACA,MAAMO,QAAQ;MAAA;MAAA,CAAArE,aAAA,GAAAG,CAAA,QAAG,MAAME,WAAW,CAACuD,UAAU,CAAC;QAAE1B,KAAK,EAAE;UAAErB;QAAE;MAAE,CAAE,CAAC;MAAC;MAAAb,aAAA,GAAAG,CAAA;MACjE,IAAI,CAACkE,QAAQ,EAAE;QAAA;QAAArE,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACb,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE,GAAGpD,SAAS;QAAY,CAAE,CAAC;MACpE,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,aAAA,GAAAG,CAAA;MACA;MAAI;MAAA,CAAAH,aAAA,GAAAU,CAAA,WAAAc,GAAG,CAACuC,IAAI;MAAA;MAAA,CAAA/D,aAAA,GAAAU,CAAA,WAAI2D,QAAQ,CAACL,MAAM;MAAA;MAAA,CAAAhE,aAAA,GAAAU,CAAA,WAAI2D,QAAQ,CAACL,MAAM,KAAKxC,GAAG,CAACuC,IAAI,CAAClD,EAAE,GAAE;QAAA;QAAAb,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAClE,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE;QAAc,CAAE,CAAC;MAC1D,CAAC;MAAA;MAAA;QAAAxD,aAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,aAAA,GAAAG,CAAA;MACA,IAAIe,YAAY,EAAE;QAAA;QAAAlB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAChBY,IAAI,GAAG,MAAMG,YAAY,CAACL,EAAE,EAAEE,IAAI,EAAES,GAAG,CAAC;MAC1C,CAAC;MAAA;MAAA;QAAAxB,aAAA,GAAAU,CAAA;MAAA;MAED,MAAMiD,IAAI;MAAA;MAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG,MAAME,WAAW,CAACiE,MAAM,CAAC;QACpCpC,KAAK,EAAE;UAAErB;QAAE,CAAE;QACbE,IAAI;QACJ8B,OAAO,EAAElC;OACV,CAAC;MAEF;MAAA;MAAAX,aAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,EAAE;QAAA;QAAAnB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACf,MAAMgB,WAAW,CAACwC,IAAI,EAAEnC,GAAG,CAAC;MAC9B,CAAC;MAAA;MAAA;QAAAxB,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MAEDsB,GAAG,CAACuB,IAAI,CAAClC,iBAAiB,CAAC6C,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA;MAAArD,aAAA,GAAAG,CAAA;MACd,IAAIkD,KAAK,YAAYzD,CAAC,CAACsE,QAAQ,EAAE;QAAA;QAAAlE,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAC/B,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE,cAAc;UAAEW,MAAM,EAAEd,KAAK,CAACc;QAAM,CAAE,CAAC;MAChF,CAAC;MAAA;MAAA;QAAAnE,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MACDmD,OAAO,CAACD,KAAK,CAAC,kBAAkBjD,SAAS,GAAG,EAAEiD,KAAK,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MACrDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;QAAEQ,OAAO,EAAE,oBAAoBpD,SAAS;MAAE,CAAE,CAAC;IACpE;EACF,CAAC,CAAC;EAEF;EAAA;EAAAJ,aAAA,GAAAG,CAAA;EACAD,MAAM,CAACqE,MAAM,CAAC,MAAM,EAAE,OAAO/C,GAAY,EAAEC,GAAa,KAAI;IAAA;IAAAzB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAG,CAAA;IAC1D,IAAI;MACF,MAAMU,EAAE;MAAA;MAAA,CAAAb,aAAA,GAAAG,CAAA,QAAGsD,QAAQ,CAACjC,GAAG,CAACkC,MAAM,CAAC7C,EAAE,CAAC;MAElC;MACA,MAAMwD,QAAQ;MAAA;MAAA,CAAArE,aAAA,GAAAG,CAAA,QAAG,MAAME,WAAW,CAACuD,UAAU,CAAC;QAAE1B,KAAK,EAAE;UAAErB;QAAE;MAAE,CAAE,CAAC;MAAC;MAAAb,aAAA,GAAAG,CAAA;MACjE,IAAI,CAACkE,QAAQ,EAAE;QAAA;QAAArE,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACb,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE,GAAGpD,SAAS;QAAY,CAAE,CAAC;MACpE,CAAC;MAAA;MAAA;QAAAJ,aAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,aAAA,GAAAG,CAAA;MACA;MAAI;MAAA,CAAAH,aAAA,GAAAU,CAAA,WAAAc,GAAG,CAACuC,IAAI;MAAA;MAAA,CAAA/D,aAAA,GAAAU,CAAA,WAAI2D,QAAQ,CAACL,MAAM;MAAA;MAAA,CAAAhE,aAAA,GAAAU,CAAA,WAAI2D,QAAQ,CAACL,MAAM,KAAKxC,GAAG,CAACuC,IAAI,CAAClD,EAAE,GAAE;QAAA;QAAAb,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAClE,OAAOsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;UAAEQ,OAAO,EAAE;QAAc,CAAE,CAAC;MAC1D,CAAC;MAAA;MAAA;QAAAxD,aAAA,GAAAU,CAAA;MAAA;MAED;MAAAV,aAAA,GAAAG,CAAA;MACA,IAAIiB,YAAY,EAAE;QAAA;QAAApB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAChB,MAAMiB,YAAY,CAACP,EAAE,EAAEW,GAAG,CAAC;MAC7B,CAAC;MAAA;MAAA;QAAAxB,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MAED,MAAME,WAAW,CAACkE,MAAM,CAAC;QAAErC,KAAK,EAAE;UAAErB;QAAE;MAAE,CAAE,CAAC;MAE3C;MAAA;MAAAb,aAAA,GAAAG,CAAA;MACA,IAAIkB,WAAW,EAAE;QAAA;QAAArB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACf,MAAMkB,WAAW,CAACR,EAAE,EAAEW,GAAG,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAAxB,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MAEDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACiB,IAAI,EAAE;IACxB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MAAA;MAAArD,aAAA,GAAAG,CAAA;MACdmD,OAAO,CAACD,KAAK,CAAC,kBAAkBjD,SAAS,GAAG,EAAEiD,KAAK,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MACrDsB,GAAG,CAAC8B,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;QAAEQ,OAAO,EAAE,oBAAoBpD,SAAS;MAAE,CAAE,CAAC;IACpE;EACF,CAAC,CAAC;EAAC;EAAAJ,aAAA,GAAAG,CAAA;EAEH,OAAOD,MAAM;AACf","ignoreList":[]}