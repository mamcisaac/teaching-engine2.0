{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/calendarEvents.test.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/calendarEvents.test.ts"],"sourcesContent":["import { app } from '../../src/index';\nimport { authRequest } from '../test-auth-helper';\nimport { getTestPrismaClient } from '../jest.setup';\nimport { setupAuthenticatedTest } from './test-setup-helpers';\n\ndescribe('calendar events', () => {\n  const auth = authRequest(app);\n  let prisma: ReturnType<typeof getTestPrismaClient>;\n\n  beforeAll(async () => {\n    prisma = getTestPrismaClient();\n  });\n\n  beforeEach(async () => {\n    // Setup auth for each test to handle database resets\n    await setupAuthenticatedTest(prisma, auth);\n  });\n\n  it('creates and lists events', async () => {\n    const res = await auth.post('/api/calendar-events').send({\n      title: 'PD Day',\n      start: '2025-01-02T00:00:00.000Z',\n      end: '2025-01-02T23:59:59.000Z',\n      allDay: true,\n      eventType: 'PD_DAY',\n    });\n    expect(res.status).toBe(201);\n\n    const list = await auth.get('/api/calendar-events?from=2025-01-01&to=2025-01-03');\n    expect(list.status).toBe(200);\n    expect(list.body.length).toBe(1);\n    expect(list.body[0].title).toBe('PD Day');\n  });\n\n  it('handles date range queries', async () => {\n    // Create events in different date ranges\n    await auth.post('/api/calendar-events').send({\n      title: 'Event 1',\n      start: '2025-01-05T00:00:00.000Z',\n      end: '2025-01-05T23:59:59.000Z',\n      allDay: true,\n      eventType: 'HOLIDAY',\n    });\n\n    await auth.post('/api/calendar-events').send({\n      title: 'Event 2',\n      start: '2025-01-15T00:00:00.000Z',\n      end: '2025-01-15T23:59:59.000Z',\n      allDay: true,\n      eventType: 'HOLIDAY',\n    });\n\n    // Query for specific date range\n    const list = await auth.get('/api/calendar-events?from=2025-01-10&to=2025-01-20');\n    expect(list.status).toBe(200);\n    expect(list.body.length).toBe(1);\n    expect(list.body[0].title).toBe('Event 2');\n  });\n\n  it('updates calendar events', async () => {\n    // Create an event\n    const createRes = await auth.post('/api/calendar-events').send({\n      title: 'Original Title',\n      start: '2025-02-01T00:00:00.000Z',\n      end: '2025-02-01T23:59:59.000Z',\n      allDay: true,\n      eventType: 'HOLIDAY',\n    });\n    expect(createRes.status).toBe(201);\n    const eventId = createRes.body.id;\n\n    // Update the event\n    const updateRes = await auth.put(`/api/calendar-events/${eventId}`).send({\n      title: 'Updated Title',\n      eventType: 'PD_DAY',\n    });\n    expect(updateRes.status).toBe(200);\n    expect(updateRes.body.title).toBe('Updated Title');\n    expect(updateRes.body.eventType).toBe('PD_DAY');\n  });\n\n  it('deletes calendar events', async () => {\n    // Create an event\n    const createRes = await auth.post('/api/calendar-events').send({\n      title: 'To Delete',\n      start: '2025-03-01T00:00:00.000Z',\n      end: '2025-03-01T23:59:59.000Z',\n      allDay: true,\n      eventType: 'HOLIDAY',\n    });\n    expect(createRes.status).toBe(201);\n    const eventId = createRes.body.id;\n\n    // Delete the event\n    const deleteRes = await auth.delete(`/api/calendar-events/${eventId}`);\n    expect(deleteRes.status).toBe(204);\n\n    // Verify it's deleted\n    const list = await auth.get('/api/calendar-events?from=2025-03-01&to=2025-03-01');\n    expect(list.status).toBe(200);\n    expect(list.body.length).toBe(0);\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle empty data scenarios gracefully', async () => {\n      // Query with no events\n      const list = await auth.get('/api/calendar-events?from=2030-01-01&to=2030-12-31');\n      expect(list.status).toBe(200);\n      expect(list.body).toEqual([]);\n    });\n\n    it('should handle invalid date formats', async () => {\n      const res = await auth.post('/api/calendar-events').send({\n        title: 'Invalid Date Event',\n        start: 'invalid-date',\n        end: '2025-01-01T00:00:00.000Z',\n        eventType: 'HOLIDAY',\n      });\n      expect(res.status).toBe(400);\n    });\n\n    it('should handle overlapping events', async () => {\n      // Create first event\n      await auth.post('/api/calendar-events').send({\n        title: 'Event A',\n        start: '2025-04-01T10:00:00.000Z',\n        end: '2025-04-01T12:00:00.000Z',\n        eventType: 'CUSTOM',\n      });\n\n      // Create overlapping event - should succeed\n      const res = await auth.post('/api/calendar-events').send({\n        title: 'Event B',\n        start: '2025-04-01T11:00:00.000Z',\n        end: '2025-04-01T13:00:00.000Z',\n        eventType: 'CUSTOM',\n      });\n      expect(res.status).toBe(201);\n    });\n\n    it('should validate required fields', async () => {\n      const res = await auth.post('/api/calendar-events').send({\n        // Missing required fields\n        eventType: 'HOLIDAY',\n      });\n      expect(res.status).toBe(400);\n    });\n  });\n});\n"],"version":3}