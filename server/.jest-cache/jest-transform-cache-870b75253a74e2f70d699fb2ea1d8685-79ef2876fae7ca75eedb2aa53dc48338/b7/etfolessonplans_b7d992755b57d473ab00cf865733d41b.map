{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/etfo-lesson-plans.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/routes/etfo-lesson-plans.ts"],"sourcesContent":["import { Router, Request } from 'express';\nimport { Prisma } from '../prisma';\nimport { prisma } from '../prisma';\nimport { validate } from '../validation';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Validation schemas\nconst lessonPlanCreateSchema = z.object({\n  title: z.string().min(1),\n  titleFr: z.string().optional(),\n  unitPlanId: z.string().min(1),\n  date: z.string().datetime(),\n  duration: z.number().int().positive(),\n  mindsOn: z.string().optional(),\n  mindsOnFr: z.string().optional(),\n  action: z.string().optional(),\n  actionFr: z.string().optional(),\n  consolidation: z.string().optional(),\n  consolidationFr: z.string().optional(),\n  learningGoals: z.string().optional(),\n  learningGoalsFr: z.string().optional(),\n  materials: z.array(z.string()).optional(),\n  grouping: z.string().optional(),\n  accommodations: z.array(z.string()).optional(),\n  modifications: z.array(z.string()).optional(),\n  extensions: z.array(z.string()).optional(),\n  assessmentType: z.enum(['diagnostic', 'formative', 'summative']).optional(),\n  assessmentNotes: z.string().optional(),\n  isSubFriendly: z.boolean().optional(),\n  subNotes: z.string().optional(),\n  expectationIds: z.array(z.string()).optional(),\n});\n\nconst lessonPlanUpdateSchema = lessonPlanCreateSchema.partial().omit({ unitPlanId: true });\n\n// Get all lesson plans for the authenticated user\nrouter.get('/', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { unitPlanId, startDate, endDate, isSubFriendly } = req.query;\n\n    const where: Prisma.ETFOLessonPlanWhereInput = { userId };\n    if (unitPlanId) where.unitPlanId = String(unitPlanId);\n    if (isSubFriendly !== undefined) where.isSubFriendly = isSubFriendly === 'true';\n    if (startDate || endDate) {\n      where.date = {};\n      if (startDate) where.date.gte = new Date(String(startDate));\n      if (endDate) where.date.lte = new Date(String(endDate));\n    }\n\n    const lessonPlans = await prisma.eTFOLessonPlan.findMany({\n      where,\n      orderBy: { date: 'asc' },\n      include: {\n        unitPlan: {\n          select: {\n            id: true,\n            title: true,\n            longRangePlan: {\n              select: {\n                subject: true,\n                grade: true,\n              },\n            },\n          },\n        },\n        daybookEntry: {\n          select: {\n            id: true,\n            overallRating: true,\n            wouldReuseLesson: true,\n          },\n        },\n        _count: {\n          select: {\n            expectations: true,\n            resources: true,\n          },\n        },\n      },\n    });\n\n    res.json(lessonPlans);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Get a single lesson plan\nrouter.get('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const lessonPlan = await prisma.eTFOLessonPlan.findFirst({\n      where: {\n        id: req.params.id,\n        userId,\n      },\n      include: {\n        unitPlan: {\n          include: {\n            longRangePlan: true,\n          },\n        },\n        expectations: {\n          include: {\n            expectation: true,\n          },\n          orderBy: {\n            expectation: { code: 'asc' },\n          },\n        },\n        resources: {\n          orderBy: { createdAt: 'desc' },\n        },\n        daybookEntry: true,\n      },\n    });\n\n    if (!lessonPlan) {\n      return res.status(404).json({ error: 'Lesson plan not found' });\n    }\n\n    res.json(lessonPlan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Create a new lesson plan\nrouter.post('/', validate(lessonPlanCreateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationIds, materials, accommodations, modifications, extensions, ...planData } =\n      req.body;\n\n    // Verify user owns the unit plan\n    const unitPlan = await prisma.unitPlan.findFirst({\n      where: {\n        id: planData.unitPlanId,\n        userId,\n      },\n    });\n\n    if (!unitPlan) {\n      return res.status(404).json({ error: 'Unit plan not found' });\n    }\n\n    const lessonPlan = await prisma.eTFOLessonPlan.create({\n      data: {\n        ...planData,\n        userId,\n        date: new Date(planData.date),\n        materials: materials || [],\n        accommodations: accommodations || [],\n        modifications: modifications || [],\n        extensions: extensions || [],\n      },\n      include: {\n        unitPlan: {\n          select: {\n            id: true,\n            title: true,\n            longRangePlan: {\n              select: {\n                subject: true,\n                grade: true,\n              },\n            },\n          },\n        },\n        _count: {\n          select: {\n            expectations: true,\n            resources: true,\n          },\n        },\n      },\n    });\n\n    // Link curriculum expectations if provided\n    if (expectationIds && expectationIds.length > 0) {\n      // Validate expectation IDs exist\n      const validExpectations = await prisma.curriculumExpectation.findMany({\n        where: { id: { in: expectationIds } },\n        select: { id: true },\n      });\n\n      if (validExpectations.length !== expectationIds.length) {\n        return res.status(400).json({\n          error: 'One or more curriculum expectations not found',\n          provided: expectationIds,\n          found: validExpectations.map((e) => e.id),\n        });\n      }\n\n      await prisma.eTFOLessonPlanExpectation.createMany({\n        data: expectationIds.map((expectationId: string) => ({\n          lessonPlanId: lessonPlan.id,\n          expectationId,\n        })),\n      });\n\n      // Refetch with expectations\n      const updatedPlan = await prisma.eTFOLessonPlan.findUnique({\n        where: { id: lessonPlan.id },\n        include: {\n          unitPlan: {\n            select: {\n              id: true,\n              title: true,\n              longRangePlan: {\n                select: {\n                  subject: true,\n                  grade: true,\n                },\n              },\n            },\n          },\n          expectations: {\n            include: { expectation: true },\n          },\n          _count: {\n            select: { resources: true },\n          },\n        },\n      });\n\n      return res.status(201).json(updatedPlan);\n    }\n\n    res.status(201).json(lessonPlan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Update a lesson plan\nrouter.put('/:id', validate(lessonPlanUpdateSchema), async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { expectationIds, materials, accommodations, modifications, extensions, ...updateData } =\n      req.body;\n\n    // Verify ownership\n    const existing = await prisma.eTFOLessonPlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!existing) {\n      return res.status(404).json({ error: 'Lesson plan not found' });\n    }\n\n    // Prepare update data\n    const data: Prisma.ETFOLessonPlanUpdateInput = { ...updateData };\n    if (updateData.date) data.date = new Date(updateData.date);\n    if (materials !== undefined) data.materials = materials;\n    if (accommodations !== undefined) data.accommodations = accommodations;\n    if (modifications !== undefined) data.modifications = modifications;\n    if (extensions !== undefined) data.extensions = extensions;\n\n    // Update the plan\n    const lessonPlan = await prisma.eTFOLessonPlan.update({\n      where: { id: req.params.id },\n      data,\n    });\n\n    // Update expectations if provided\n    if (expectationIds !== undefined) {\n      // Remove existing expectations\n      await prisma.eTFOLessonPlanExpectation.deleteMany({\n        where: { lessonPlanId: lessonPlan.id },\n      });\n\n      // Add new expectations\n      if (expectationIds.length > 0) {\n        await prisma.eTFOLessonPlanExpectation.createMany({\n          data: expectationIds.map((expectationId: string) => ({\n            lessonPlanId: lessonPlan.id,\n            expectationId,\n          })),\n        });\n      }\n    }\n\n    // Refetch with updated relationships\n    const updatedPlan = await prisma.eTFOLessonPlan.findUnique({\n      where: { id: lessonPlan.id },\n      include: {\n        unitPlan: {\n          include: {\n            longRangePlan: true,\n          },\n        },\n        expectations: {\n          include: { expectation: true },\n        },\n        resources: true,\n        daybookEntry: true,\n      },\n    });\n\n    res.json(updatedPlan);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a lesson plan\nrouter.delete('/:id', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership and check for dependencies\n    const lessonPlan = await prisma.eTFOLessonPlan.findFirst({\n      where: { id: req.params.id, userId },\n      include: {\n        daybookEntry: true,\n      },\n    });\n\n    if (!lessonPlan) {\n      return res.status(404).json({ error: 'Lesson plan not found' });\n    }\n\n    if (lessonPlan.daybookEntry) {\n      return res.status(400).json({\n        error: 'Cannot delete lesson plan with existing daybook entry',\n      });\n    }\n\n    await prisma.eTFOLessonPlan.delete({\n      where: { id: req.params.id },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Add a resource to lesson plan\nrouter.post('/:id/resources', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { title, type, url, content } = req.body;\n\n    if (!title || !type) {\n      return res.status(400).json({ error: 'Title and type are required' });\n    }\n\n    // Verify ownership\n    const lessonPlan = await prisma.eTFOLessonPlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!lessonPlan) {\n      return res.status(404).json({ error: 'Lesson plan not found' });\n    }\n\n    const resource = await prisma.eTFOLessonPlanResource.create({\n      data: {\n        lessonPlanId: req.params.id,\n        title,\n        type,\n        url,\n        content,\n      },\n    });\n\n    res.status(201).json(resource);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Delete a resource\nrouter.delete('/:id/resources/:resourceId', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    // Verify ownership through lesson plan\n    const resource = await prisma.eTFOLessonPlanResource.findFirst({\n      where: {\n        id: req.params.resourceId,\n        lessonPlan: {\n          id: req.params.id,\n          userId,\n        },\n      },\n    });\n\n    if (!resource) {\n      return res.status(404).json({ error: 'Resource not found' });\n    }\n\n    await prisma.eTFOLessonPlanResource.delete({\n      where: { id: req.params.resourceId },\n    });\n\n    res.status(204).end();\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Generate substitute-friendly version\nrouter.post('/:id/sub-version', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const lessonPlan = await prisma.eTFOLessonPlan.findFirst({\n      where: { id: req.params.id, userId },\n      include: {\n        unitPlan: {\n          include: { longRangePlan: true },\n        },\n        expectations: { include: { expectation: true } },\n        resources: true,\n      },\n    });\n\n    if (!lessonPlan) {\n      return res.status(404).json({ error: 'Lesson plan not found' });\n    }\n\n    // Generate substitute-friendly version of the lesson plan\n    const subVersion = {\n      title: lessonPlan.title,\n      date: lessonPlan.date,\n      duration: lessonPlan.duration,\n      subject: lessonPlan.unitPlan.longRangePlan.subject,\n      grade: lessonPlan.unitPlan.longRangePlan.grade,\n      materials: lessonPlan.materials,\n      grouping: lessonPlan.grouping || 'Whole class',\n      activities: {\n        opening: lessonPlan.mindsOn || 'See detailed plan',\n        main: lessonPlan.action || 'See detailed plan',\n        closing: lessonPlan.consolidation || 'See detailed plan',\n      },\n      specialNotes: lessonPlan.subNotes,\n      resources: lessonPlan.resources.filter((r) => r.type !== 'teacher-only'),\n    };\n\n    res.json(subVersion);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Reschedule a lesson plan\nrouter.put('/:id/reschedule', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { newDate } = req.body;\n    if (!newDate) {\n      return res.status(400).json({ error: 'New date is required' });\n    }\n\n    // Validate the lesson exists and belongs to the user\n    const lessonPlan = await prisma.eTFOLessonPlan.findFirst({\n      where: { id: req.params.id, userId },\n    });\n\n    if (!lessonPlan) {\n      return res.status(404).json({ error: 'Lesson plan not found' });\n    }\n\n    // Update the lesson date\n    const updatedLesson = await prisma.eTFOLessonPlan.update({\n      where: { id: req.params.id },\n      data: { date: new Date(newDate) },\n      include: {\n        unitPlan: {\n          select: {\n            id: true,\n            title: true,\n            longRangePlan: {\n              select: {\n                subject: true,\n                grade: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    res.json(updatedLesson);\n  } catch (err) {\n    _next(err);\n  }\n});\n\n// Duplicate a lesson plan\nrouter.post('/duplicate', async (req: Request, res, _next) => {\n  try {\n    const userId = req.user?.id || 0;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    const { sourceId, title, notes } = req.body;\n\n    if (!sourceId || !title) {\n      return res.status(400).json({ error: 'Source ID and title are required' });\n    }\n\n    // Fetch the source lesson plan with all relations\n    const sourceLesson = await prisma.eTFOLessonPlan.findFirst({\n      where: { id: sourceId, userId },\n      include: {\n        expectations: true,\n        resources: true,\n      },\n    });\n\n    if (!sourceLesson) {\n      return res.status(404).json({ error: 'Source lesson plan not found' });\n    }\n\n    // Create the duplicate in a transaction\n    const result = await prisma.$transaction(async (tx) => {\n      // Create the duplicate lesson plan\n      const {\n        id: _id,\n        userId: _userId,\n        createdAt: _createdAt,\n        updatedAt: _updatedAt,\n        expectations,\n        resources,\n        ...lessonData\n      } = sourceLesson;\n\n      const newLesson = await tx.eTFOLessonPlan.create({\n        data: {\n          ...lessonData,\n          userId,\n          title,\n          date: new Date(), // Set to today by default\n          subNotes: notes || `Duplicated from \"${sourceLesson.title}\"`,\n        },\n      });\n\n      // Copy expectations\n      if (expectations.length > 0) {\n        await tx.eTFOLessonPlanExpectation.createMany({\n          data: expectations.map((exp) => ({\n            lessonPlanId: newLesson.id,\n            expectationId: exp.expectationId,\n          })),\n        });\n      }\n\n      // Copy resources\n      if (resources.length > 0) {\n        await tx.eTFOLessonPlanResource.createMany({\n          data: resources.map(\n            ({ id: _id, lessonPlanId: _lessonPlanId, createdAt: _createdAt, ...resource }) => ({\n              ...resource,\n              lessonPlanId: newLesson.id,\n            }),\n          ),\n        });\n      }\n\n      return newLesson;\n    });\n\n    res.status(201).json(result);\n  } catch (err) {\n    _next(err);\n  }\n});\n\nexport default router;\n"],"version":3}