{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/setup/integration.setup.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/setup/integration.setup.ts"],"sourcesContent":["/**\n * Integration Test Setup\n * \n * Configures the test environment for integration tests\n * with real database connections and minimal mocking.\n */\n\nimport { jest } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\nimport { TextEncoder, TextDecoder } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// Polyfill for Node.js environment\nglobal.TextEncoder = TextEncoder;\nglobal.TextDecoder = TextDecoder as any;\n\n// Set test environment\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'integration-test-secret';\nprocess.env.OPENAI_API_KEY = 'test-api-key';\n\n// Use test database\nconst testDbPath = path.join(process.cwd(), 'tests', 'test-integration.db');\nprocess.env.DATABASE_URL = `file:${testDbPath}`;\n\n// Configure Jest for integration tests\njest.setTimeout(15000); // 15 second timeout for integration tests\n\n// Still mock expensive external services\njest.mock('openai');\njest.mock('@aws-sdk/client-s3');\njest.mock('node-cron', () => ({\n  schedule: jest.fn(),\n}));\n\n// Create test database connection pool\nlet prismaClient: PrismaClient | null = null;\n\n/**\n * Get or create Prisma client for tests\n */\nexport function getTestPrismaClient(): PrismaClient {\n  if (!prismaClient) {\n    prismaClient = new PrismaClient({\n      datasources: {\n        db: {\n          url: process.env.DATABASE_URL,\n        },\n      },\n      log: process.env.DEBUG_TESTS === 'true' ? ['query', 'error', 'warn'] : ['error'],\n    });\n  }\n  return prismaClient;\n}\n\n/**\n * Setup test database\n */\nasync function setupTestDatabase() {\n  const prisma = getTestPrismaClient();\n  \n  try {\n    // Ensure database directory exists\n    const dbDir = path.dirname(testDbPath);\n    await fs.mkdir(dbDir, { recursive: true });\n    \n    // Run migrations\n    await prisma.$executeRawUnsafe(`\n      CREATE TABLE IF NOT EXISTS \"User\" (\n        \"id\" TEXT NOT NULL PRIMARY KEY,\n        \"email\" TEXT NOT NULL UNIQUE,\n        \"password\" TEXT NOT NULL,\n        \"name\" TEXT NOT NULL,\n        \"role\" TEXT NOT NULL DEFAULT 'TEACHER',\n        \"createdAt\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        \"updatedAt\" DATETIME NOT NULL\n      );\n    `);\n    \n    await prisma.$executeRawUnsafe(`\n      CREATE TABLE IF NOT EXISTS \"Student\" (\n        \"id\" TEXT NOT NULL PRIMARY KEY,\n        \"name\" TEXT NOT NULL,\n        \"gradeLevel\" TEXT NOT NULL,\n        \"userId\" TEXT NOT NULL,\n        \"createdAt\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        \"updatedAt\" DATETIME NOT NULL,\n        FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE\n      );\n    `);\n    \n    await prisma.$executeRawUnsafe(`\n      CREATE TABLE IF NOT EXISTS \"LessonPlan\" (\n        \"id\" TEXT NOT NULL PRIMARY KEY,\n        \"title\" TEXT NOT NULL,\n        \"subject\" TEXT NOT NULL,\n        \"gradeLevel\" TEXT NOT NULL,\n        \"duration\" INTEGER NOT NULL,\n        \"date\" DATETIME NOT NULL,\n        \"content\" TEXT,\n        \"userId\" TEXT NOT NULL,\n        \"createdAt\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        \"updatedAt\" DATETIME NOT NULL,\n        FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE\n      );\n    `);\n    \n    await prisma.$executeRawUnsafe(`\n      CREATE TABLE IF NOT EXISTS \"CurriculumExpectation\" (\n        \"id\" TEXT NOT NULL PRIMARY KEY,\n        \"code\" TEXT NOT NULL UNIQUE,\n        \"description\" TEXT NOT NULL,\n        \"subject\" TEXT NOT NULL,\n        \"gradeLevel\" TEXT NOT NULL,\n        \"strand\" TEXT NOT NULL,\n        \"createdAt\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        \"updatedAt\" DATETIME NOT NULL\n      );\n    `);\n    \n    await prisma.$executeRawUnsafe(`\n      CREATE TABLE IF NOT EXISTS \"UnitPlan\" (\n        \"id\" TEXT NOT NULL PRIMARY KEY,\n        \"title\" TEXT NOT NULL,\n        \"subject\" TEXT NOT NULL,\n        \"gradeLevel\" TEXT NOT NULL,\n        \"startDate\" DATETIME NOT NULL,\n        \"endDate\" DATETIME NOT NULL,\n        \"description\" TEXT,\n        \"userId\" TEXT NOT NULL,\n        \"createdAt\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        \"updatedAt\" DATETIME NOT NULL,\n        FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE\n      );\n    `);\n    \n  } catch (error) {\n    console.error('Failed to setup test database:', error);\n    throw error;\n  }\n}\n\n/**\n * Clean test database\n */\nasync function cleanTestDatabase() {\n  const prisma = getTestPrismaClient();\n  \n  try {\n    // Clean all tables in reverse dependency order\n    await prisma.$executeRawUnsafe('DELETE FROM \"LessonPlan\"');\n    await prisma.$executeRawUnsafe('DELETE FROM \"UnitPlan\"');\n    await prisma.$executeRawUnsafe('DELETE FROM \"Student\"');\n    await prisma.$executeRawUnsafe('DELETE FROM \"CurriculumExpectation\"');\n    await prisma.$executeRawUnsafe('DELETE FROM \"User\"');\n  } catch (error) {\n    console.error('Failed to clean test database:', error);\n  }\n}\n\n// Global setup - run once before all tests\nbeforeAll(async () => {\n  await setupTestDatabase();\n});\n\n// Clean database before each test for isolation\nbeforeEach(async () => {\n  await cleanTestDatabase();\n});\n\n// Global teardown - run once after all tests\nafterAll(async () => {\n  if (prismaClient) {\n    await prismaClient.$disconnect();\n  }\n  \n  // Remove test database file\n  try {\n    await fs.unlink(testDbPath);\n    await fs.unlink(`${testDbPath}-journal`);\n  } catch {\n    // Ignore errors\n  }\n});\n\n// Integration test helpers\nglobal.integrationTestHelpers = {\n  /**\n   * Create a test app instance\n   */\n  createTestApp: async () => {\n    // Import app without starting the server\n    const { app } = await import('../../src/app');\n    return app;\n  },\n  \n  /**\n   * Seed basic test data\n   */\n  seedTestData: async () => {\n    const prisma = getTestPrismaClient();\n    const bcrypt = await import('bcryptjs');\n    \n    // Create test user\n    const user = await prisma.user.create({\n      data: {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        password: await bcrypt.hash('password123', 10),\n        name: 'Test Teacher',\n        role: 'TEACHER',\n      },\n    });\n    \n    // Create test students\n    const students = await Promise.all([\n      prisma.student.create({\n        data: {\n          id: 'student-1',\n          name: 'Alice Johnson',\n          gradeLevel: '3',\n          userId: user.id,\n        },\n      }),\n      prisma.student.create({\n        data: {\n          id: 'student-2',\n          name: 'Bob Smith',\n          gradeLevel: '3',\n          userId: user.id,\n        },\n      }),\n    ]);\n    \n    // Create test curriculum expectations\n    const expectations = await Promise.all([\n      prisma.curriculumExpectation.create({\n        data: {\n          id: 'expect-1',\n          code: 'MATH-3-NS-1',\n          description: 'Read, represent, compare, and order whole numbers to 1000',\n          subject: 'Math',\n          gradeLevel: '3',\n          strand: 'Number Sense',\n        },\n      }),\n      prisma.curriculumExpectation.create({\n        data: {\n          id: 'expect-2',\n          code: 'SCI-3-UE-1',\n          description: 'Investigate the physical properties of soil',\n          subject: 'Science',\n          gradeLevel: '3',\n          strand: 'Understanding Earth',\n        },\n      }),\n    ]);\n    \n    return { user, students, expectations };\n  },\n  \n  /**\n   * Wait for async operations\n   */\n  waitForAsync: async (ms: number = 100) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  },\n};\n\n// Export test configuration\nexport const integrationTestConfig = {\n  timeout: 15000,\n  retries: 1,\n  bail: false,\n};"],"version":3}