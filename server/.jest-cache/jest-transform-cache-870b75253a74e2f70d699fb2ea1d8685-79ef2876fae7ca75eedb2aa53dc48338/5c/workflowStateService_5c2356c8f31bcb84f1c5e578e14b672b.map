{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/workflowStateService.ts","mappings":"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","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/workflowStateService.ts"],"sourcesContent":["import BaseService from './base/BaseService';\nimport { prisma } from '../prisma';\n\nexport interface WorkflowState {\n  userId: number;\n  currentLevel: ETFOLevel;\n  completedLevels: ETFOLevel[];\n  accessibleLevels: ETFOLevel[];\n  blockedLevels: ETFOLevel[];\n  progress: LevelProgress[];\n}\n\nexport interface LevelProgress {\n  level: ETFOLevel;\n  isComplete: boolean;\n  isAccessible: boolean;\n  progressPercentage: number;\n  completedItems: number;\n  totalItems: number;\n  blockedReason?: string;\n}\n\nexport enum ETFOLevel {\n  CURRICULUM_EXPECTATIONS = 'CURRICULUM_EXPECTATIONS',\n  LONG_RANGE_PLANS = 'LONG_RANGE_PLANS',\n  UNIT_PLANS = 'UNIT_PLANS',\n  LESSON_PLANS = 'LESSON_PLANS',\n  DAYBOOK_ENTRIES = 'DAYBOOK_ENTRIES',\n}\n\nexport const ETFO_LEVEL_SEQUENCE = [\n  ETFOLevel.CURRICULUM_EXPECTATIONS,\n  ETFOLevel.LONG_RANGE_PLANS,\n  ETFOLevel.UNIT_PLANS,\n  ETFOLevel.LESSON_PLANS,\n  ETFOLevel.DAYBOOK_ENTRIES,\n];\n\nexport const ETFO_LEVEL_METADATA = {\n  [ETFOLevel.CURRICULUM_EXPECTATIONS]: {\n    name: 'Curriculum Expectations',\n    description: 'Import and organize curriculum standards',\n    requiredFields: ['code', 'description', 'strand'],\n    completionCriteria: 'At least one curriculum expectation imported',\n  },\n  [ETFOLevel.LONG_RANGE_PLANS]: {\n    name: 'Long-Range Plans',\n    description: 'Create year/term overview with major units',\n    requiredFields: ['title', 'startDate', 'endDate', 'goals'],\n    completionCriteria: 'At least one long-range plan with goals defined',\n  },\n  [ETFOLevel.UNIT_PLANS]: {\n    name: 'Unit Plans',\n    description: 'Develop detailed instructional units',\n    requiredFields: ['title', 'bigIdeas', 'learningGoals', 'curriculumExpectations'],\n    completionCriteria: 'At least one unit plan with big ideas and linked expectations',\n  },\n  [ETFOLevel.LESSON_PLANS]: {\n    name: 'Lesson Plans',\n    description: 'Plan individual teaching sessions',\n    requiredFields: ['title', 'learningGoals', 'materials', 'activities'],\n    completionCriteria: 'At least one lesson plan with complete details',\n  },\n  [ETFOLevel.DAYBOOK_ENTRIES]: {\n    name: 'Daybook Entries',\n    description: 'Maintain daily planning records',\n    requiredFields: ['date', 'activities', 'reflections'],\n    completionCriteria: 'At least one daybook entry with reflections',\n  },\n};\n\nexport class WorkflowStateService extends BaseService {\n  constructor() {\n    super('WorkflowStateService');\n  }\n\n  /**\n   * Get the current workflow state for a user\n   */\n  async getUserWorkflowState(userId: number): Promise<WorkflowState> {\n    try {\n      const progress = await this.calculateAllLevelProgress(userId);\n      const completedLevels = this.getCompletedLevels(progress);\n      const currentLevel = this.getCurrentLevel(progress);\n      const accessibleLevels = this.getAccessibleLevels(progress);\n      const blockedLevels = this.getBlockedLevels(progress);\n\n      return {\n        userId,\n        currentLevel,\n        completedLevels,\n        accessibleLevels,\n        blockedLevels,\n        progress,\n      };\n    } catch (error) {\n      this.logger.error({ error, userId }, 'Failed to get user workflow state');\n      throw error;\n    }\n  }\n\n  /**\n   * Check if a user can access a specific level\n   */\n  async canAccessLevel(\n    userId: number,\n    level: ETFOLevel,\n  ): Promise<{ canAccess: boolean; reason?: string }> {\n    try {\n      const levelIndex = ETFO_LEVEL_SEQUENCE.indexOf(level);\n\n      // First level is always accessible\n      if (levelIndex === 0) {\n        return { canAccess: true };\n      }\n\n      // Check if all previous levels are complete\n      for (let i = 0; i < levelIndex; i++) {\n        const previousLevel = ETFO_LEVEL_SEQUENCE[i];\n        const isComplete = await this.isLevelComplete(userId, previousLevel);\n\n        if (!isComplete) {\n          return {\n            canAccess: false,\n            reason: `Must complete ${ETFO_LEVEL_METADATA[previousLevel].name} first`,\n          };\n        }\n      }\n\n      return { canAccess: true };\n    } catch (error) {\n      this.logger.error({ error, userId, level }, 'Failed to check level access');\n      return { canAccess: false, reason: 'Error checking access permissions' };\n    }\n  }\n\n  /**\n   * Calculate progress for all levels\n   */\n  private async calculateAllLevelProgress(userId: number): Promise<LevelProgress[]> {\n    const progress: LevelProgress[] = [];\n\n    for (const level of ETFO_LEVEL_SEQUENCE) {\n      const levelProgress = await this.calculateLevelProgress(userId, level);\n      progress.push(levelProgress);\n    }\n\n    return progress;\n  }\n\n  /**\n   * Calculate progress for a specific level\n   */\n  private async calculateLevelProgress(userId: number, level: ETFOLevel): Promise<LevelProgress> {\n    switch (level) {\n      case ETFOLevel.CURRICULUM_EXPECTATIONS:\n        return this.calculateCurriculumProgress(userId);\n      case ETFOLevel.LONG_RANGE_PLANS:\n        return this.calculateLongRangeProgress(userId);\n      case ETFOLevel.UNIT_PLANS:\n        return this.calculateUnitProgress(userId);\n      case ETFOLevel.LESSON_PLANS:\n        return this.calculateLessonProgress(userId);\n      case ETFOLevel.DAYBOOK_ENTRIES:\n        return this.calculateDaybookProgress(userId);\n      default:\n        throw new Error(`Unknown level: ${level}`);\n    }\n  }\n\n  private async calculateCurriculumProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.curriculumExpectation.count({\n      where: {\n        import: { userId },\n      },\n    });\n\n    return {\n      level: ETFOLevel.CURRICULUM_EXPECTATIONS,\n      isComplete: total > 0,\n      isAccessible: true,\n      progressPercentage: total > 0 ? 100 : 0,\n      completedItems: total,\n      totalItems: Math.max(total, 1), // At least 1 to avoid division by zero\n    };\n  }\n\n  private async calculateLongRangeProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.longRangePlan.count({ where: { userId } });\n    const completed = await prisma.longRangePlan.count({\n      where: {\n        userId,\n        goals: { not: null },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.CURRICULUM_EXPECTATIONS);\n\n    return {\n      level: ETFOLevel.LONG_RANGE_PLANS,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Curriculum Expectations first' : undefined,\n    };\n  }\n\n  private async calculateUnitProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.unitPlan.count({ where: { userId } });\n    const completed = await prisma.unitPlan.count({\n      where: {\n        userId,\n        bigIdeas: { not: null },\n        expectations: {\n          some: {},\n        },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.LONG_RANGE_PLANS);\n\n    return {\n      level: ETFOLevel.UNIT_PLANS,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Long-Range Plans first' : undefined,\n    };\n  }\n\n  private async calculateLessonProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.eTFOLessonPlan.count({ where: { userId } });\n    const completed = await prisma.eTFOLessonPlan.count({\n      where: {\n        userId,\n        learningGoals: { not: null },\n        materials: { not: null },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.UNIT_PLANS);\n\n    return {\n      level: ETFOLevel.LESSON_PLANS,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Unit Plans first' : undefined,\n    };\n  }\n\n  private async calculateDaybookProgress(userId: number): Promise<LevelProgress> {\n    const total = await prisma.daybookEntry.count({ where: { userId } });\n    const completed = await prisma.daybookEntry.count({\n      where: {\n        userId,\n        whatWorked: { not: null },\n      },\n    });\n\n    const isAccessible = await this.isLevelComplete(userId, ETFOLevel.LESSON_PLANS);\n\n    return {\n      level: ETFOLevel.DAYBOOK_ENTRIES,\n      isComplete: completed > 0,\n      isAccessible,\n      progressPercentage: total > 0 ? (completed / total) * 100 : 0,\n      completedItems: completed,\n      totalItems: Math.max(total, 1),\n      blockedReason: !isAccessible ? 'Complete Lesson Plans first' : undefined,\n    };\n  }\n\n  private async isLevelComplete(userId: number, level: ETFOLevel): Promise<boolean> {\n    const progress = await this.calculateLevelProgress(userId, level);\n    return progress.isComplete;\n  }\n\n  private getCompletedLevels(progress: LevelProgress[]): ETFOLevel[] {\n    return progress.filter((p) => p.isComplete).map((p) => p.level);\n  }\n\n  private getCurrentLevel(progress: LevelProgress[]): ETFOLevel {\n    // Find the first incomplete but accessible level\n    const current = progress.find((p) => !p.isComplete && p.isAccessible);\n    if (current) return current.level;\n\n    // If all accessible levels are complete, return the last completed level\n    const lastCompleted = progress.filter((p) => p.isComplete).pop();\n    if (lastCompleted) return lastCompleted.level;\n\n    // Default to first level\n    return ETFOLevel.CURRICULUM_EXPECTATIONS;\n  }\n\n  private getAccessibleLevels(progress: LevelProgress[]): ETFOLevel[] {\n    return progress.filter((p) => p.isAccessible).map((p) => p.level);\n  }\n\n  private getBlockedLevels(progress: LevelProgress[]): ETFOLevel[] {\n    return progress.filter((p) => !p.isAccessible).map((p) => p.level);\n  }\n\n  /**\n   * Validate that a level has all required fields completed\n   */\n  async validateLevelCompletion(\n    userId: number,\n    level: ETFOLevel,\n    entityId: string,\n  ): Promise<{ isValid: boolean; missingFields: string[] }> {\n    const _metadata = ETFO_LEVEL_METADATA[level];\n    const missingFields: string[] = [];\n\n    try {\n      switch (level) {\n        case ETFOLevel.CURRICULUM_EXPECTATIONS: {\n          const expectation = await prisma.curriculumExpectation.findUnique({\n            where: { id: entityId },\n          });\n          if (!expectation) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!expectation.code) missingFields.push('code');\n          if (!expectation.description) missingFields.push('description');\n          if (!expectation.strand) missingFields.push('strand');\n          break;\n        }\n\n        case ETFOLevel.LONG_RANGE_PLANS: {\n          const lrp = await prisma.longRangePlan.findUnique({\n            where: { id: entityId },\n          });\n          if (!lrp) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!lrp.title) missingFields.push('title');\n          // Long-range plans don't have specific start/end dates, they span the academic year\n          if (!lrp.goals) missingFields.push('goals');\n          break;\n        }\n\n        case ETFOLevel.UNIT_PLANS: {\n          const unit = await prisma.unitPlan.findUnique({\n            where: { id: entityId },\n            include: { expectations: true },\n          });\n          if (!unit) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!unit.title) missingFields.push('title');\n          if (!unit.bigIdeas) missingFields.push('bigIdeas');\n          // learningGoals is not a field on UnitPlan, it's on ETFOLessonPlan\n          if (unit.expectations.length === 0) missingFields.push('expectations');\n          break;\n        }\n\n        case ETFOLevel.LESSON_PLANS: {\n          const lesson = await prisma.eTFOLessonPlan.findUnique({\n            where: { id: entityId },\n          });\n          if (!lesson) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!lesson.title) missingFields.push('title');\n          if (!lesson.learningGoals) missingFields.push('learningGoals');\n          if (!lesson.materials) missingFields.push('materials');\n          // activities is not a field on ETFOLessonPlan\n          break;\n        }\n\n        case ETFOLevel.DAYBOOK_ENTRIES: {\n          const daybook = await prisma.daybookEntry.findUnique({\n            where: { id: entityId },\n          });\n          if (!daybook) return { isValid: false, missingFields: ['entity not found'] };\n\n          if (!daybook.date) missingFields.push('date');\n          // activities is not a field on DaybookEntry\n          if (!daybook.whatWorked && !daybook.whatDidntWork) missingFields.push('reflections');\n          break;\n        }\n      }\n\n      return {\n        isValid: missingFields.length === 0,\n        missingFields,\n      };\n    } catch (error) {\n      this.logger.error({ error, userId, level, entityId }, 'Failed to validate level completion');\n      return { isValid: false, missingFields: ['validation error'] };\n    }\n  }\n}\n\nexport const workflowStateService = new WorkflowStateService();\n"],"version":3}