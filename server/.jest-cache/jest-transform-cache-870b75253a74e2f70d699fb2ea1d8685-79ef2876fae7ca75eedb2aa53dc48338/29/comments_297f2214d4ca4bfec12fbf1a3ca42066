ddee7d257f5ae826d38e593625e6af86
/**
 * Plan Comments Routes
 * Handles commenting and feedback on shared plans
 */
import { Router } from 'express';
import { z } from 'zod';
import { authenticate } from '@/middleware/authenticate';
import { asyncHandler } from '@/middleware/errorHandler';
import logger from '@/logger';
// Validation schemas
const createCommentSchema = z.object({
    planType: z.enum(['long-range', 'unit', 'lesson', 'daybook']),
    planId: z.string(),
    content: z.string().min(1).max(5000),
    parentId: z.string().optional(),
});
const updateCommentSchema = z.object({
    content: z.string().min(1).max(5000).optional(),
    isResolved: z.boolean().optional(),
    isPinned: z.boolean().optional(),
});
export function commentRoutes(prisma) {
    const router = Router();
    // Apply authentication to all routes
    router.use(authenticate);
    // Helper function to check if user has access to comment on a plan
    async function checkCommentAccess(planType, planId, userId) {
        // Check if user owns the plan
        let isOwner = false;
        switch (planType) {
            case 'long-range': {
                const lrPlan = await prisma.longRangePlan.findUnique({
                    where: { id: planId },
                });
                isOwner = lrPlan?.userId === userId;
                break;
            }
            case 'unit': {
                const unitPlan = await prisma.unitPlan.findUnique({
                    where: { id: planId },
                });
                isOwner = unitPlan?.userId === userId;
                break;
            }
            case 'lesson': {
                const lessonPlan = await prisma.eTFOLessonPlan.findUnique({
                    where: { id: planId },
                });
                isOwner = lessonPlan?.userId === userId;
                break;
            }
            case 'daybook': {
                const daybookEntry = await prisma.daybookEntry.findUnique({
                    where: { id: planId },
                });
                isOwner = daybookEntry?.userId === userId;
                break;
            }
        }
        if (isOwner)
            return true;
        // Check if plan is shared with user and commenting is allowed
        const sharedPlan = await prisma.sharedPlan.findFirst({
            where: {
                planType,
                planId,
                OR: [
                    { sharedWithId: userId },
                    { teamId: { not: null } },
                ],
                canComment: true,
            },
        });
        if (sharedPlan) {
            // If shared with team, check team membership
            if (sharedPlan.teamId) {
                const isMember = await prisma.teamMember.findFirst({
                    where: { teamId: sharedPlan.teamId, userId },
                });
                return !!isMember;
            }
            return true;
        }
        return false;
    }
    // Get comments for a plan
    router.get('/', asyncHandler(async (req, res) => {
        const userId = req.user.id;
        const { planType, planId } = req.query;
        if (!planType || !planId) {
            return res.status(400).json({ error: 'planType and planId are required' });
        }
        // Check access
        const hasAccess = await checkCommentAccess(planType, planId, userId);
        if (!hasAccess) {
            return res.status(403).json({ error: 'Access denied' });
        }
        const comments = await prisma.planComment.findMany({
            where: {
                planType: planType,
                planId: planId,
                parentId: null, // Only get top-level comments
            },
            include: {
                user: {
                    select: { id: true, name: true, email: true },
                },
                replies: {
                    include: {
                        user: {
                            select: { id: true, name: true, email: true },
                        },
                    },
                    orderBy: { createdAt: 'asc' },
                },
            },
            orderBy: [
                { isPinned: 'desc' },
                { createdAt: 'desc' },
            ],
        });
        res.json(comments);
    }));
    // Create a comment
    router.post('/', asyncHandler(async (req, res) => {
        const userId = req.user.id;
        const { planType, planId, content, parentId } = createCommentSchema.parse(req.body);
        // Check access
        const hasAccess = await checkCommentAccess(planType, planId, userId);
        if (!hasAccess) {
            return res.status(403).json({ error: 'You do not have permission to comment on this plan' });
        }
        // If replying to a comment, verify parent exists
        if (parentId) {
            const parentComment = await prisma.planComment.findUnique({
                where: { id: parentId },
            });
            if (!parentComment || parentComment.planType !== planType || parentComment.planId !== planId) {
                return res.status(400).json({ error: 'Invalid parent comment' });
            }
        }
        const comment = await prisma.planComment.create({
            data: {
                planType,
                planId,
                userId,
                content,
                parentId,
            },
            include: {
                user: {
                    select: { id: true, name: true, email: true },
                },
            },
        });
        logger.info(`Comment created on ${planType}/${planId} by user ${userId}`);
        res.status(201).json(comment);
    }));
    // Update a comment
    router.patch('/:commentId', asyncHandler(async (req, res) => {
        const { commentId } = req.params;
        const userId = req.user.id;
        const updates = updateCommentSchema.parse(req.body);
        const comment = await prisma.planComment.findUnique({
            where: { id: commentId },
        });
        if (!comment) {
            return res.status(404).json({ error: 'Comment not found' });
        }
        // Check permissions
        const isAuthor = comment.userId === userId;
        const hasAccess = await checkCommentAccess(comment.planType, comment.planId, userId);
        if (!hasAccess) {
            return res.status(403).json({ error: 'Access denied' });
        }
        // Only author can edit content
        if (updates.content !== undefined && !isAuthor) {
            return res.status(403).json({ error: 'Only the comment author can edit the content' });
        }
        // Plan owner can pin/resolve comments
        const planOwnerChecks = {
            'long-range': async () => {
                const plan = await prisma.longRangePlan.findUnique({
                    where: { id: comment.planId },
                });
                return plan?.userId === userId;
            },
            'unit': async () => {
                const plan = await prisma.unitPlan.findUnique({
                    where: { id: comment.planId },
                });
                return plan?.userId === userId;
            },
            'lesson': async () => {
                const plan = await prisma.eTFOLessonPlan.findUnique({
                    where: { id: comment.planId },
                });
                return plan?.userId === userId;
            },
            'daybook': async () => {
                const plan = await prisma.daybookEntry.findUnique({
                    where: { id: comment.planId },
                });
                return plan?.userId === userId;
            },
        };
        const isPlanOwner = await planOwnerChecks[comment.planType]?.();
        if ((updates.isPinned !== undefined || updates.isResolved !== undefined) && !isPlanOwner) {
            return res.status(403).json({ error: 'Only the plan owner can pin or resolve comments' });
        }
        const updated = await prisma.planComment.update({
            where: { id: commentId },
            data: updates,
            include: {
                user: {
                    select: { id: true, name: true, email: true },
                },
            },
        });
        res.json(updated);
    }));
    // Delete a comment
    router.delete('/:commentId', asyncHandler(async (req, res) => {
        const { commentId } = req.params;
        const userId = req.user.id;
        const comment = await prisma.planComment.findUnique({
            where: { id: commentId },
            include: {
                _count: {
                    select: { replies: true },
                },
            },
        });
        if (!comment) {
            return res.status(404).json({ error: 'Comment not found' });
        }
        // Only author can delete their comment
        if (comment.userId !== userId) {
            return res.status(403).json({ error: 'Only the comment author can delete the comment' });
        }
        // Don't allow deletion if there are replies
        if (comment._count.replies > 0) {
            return res.status(400).json({ error: 'Cannot delete a comment with replies' });
        }
        await prisma.planComment.delete({
            where: { id: commentId },
        });
        logger.info(`Comment ${commentId} deleted by user ${userId}`);
        res.status(204).send();
    }));
    // Get comment statistics for a plan
    router.get('/stats', asyncHandler(async (req, res) => {
        const userId = req.user.id;
        const { planType, planId } = req.query;
        if (!planType || !planId) {
            return res.status(400).json({ error: 'planType and planId are required' });
        }
        // Check access
        const hasAccess = await checkCommentAccess(planType, planId, userId);
        if (!hasAccess) {
            return res.status(403).json({ error: 'Access denied' });
        }
        const [total, resolved, unresolved] = await Promise.all([
            prisma.planComment.count({
                where: {
                    planType: planType,
                    planId: planId,
                },
            }),
            prisma.planComment.count({
                where: {
                    planType: planType,
                    planId: planId,
                    isResolved: true,
                },
            }),
            prisma.planComment.count({
                where: {
                    planType: planType,
                    planId: planId,
                    isResolved: false,
                },
            }),
        ]);
        res.json({
            total,
            resolved,
            unresolved,
        });
    }));
    return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21pY2hhZWxtY2lzYWFjL0dpdEh1Yi90ZWFjaGluZy1lbmdpbmUyLjAvc2VydmVyL3NyYy9yb3V0ZXMvY29tbWVudHMudHMiLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVqQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBRTlCLHFCQUFxQjtBQUNyQixNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3RCxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNsQixPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3BDLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQ2hDLENBQUMsQ0FBQztBQUVILE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNuQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQy9DLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQ2pDLENBQUMsQ0FB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QWU7UUFDZixNQUFNLFNBQVMsR0FBRyxNQUFNLGtCQUFrQixDQUFDLFFBQWtCLEVBQUUsTUFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDZixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUN0RCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztnQkFDdkIsS0FBSyxFQUFFO29CQUNMLFFBQVEsRUFBRSxRQUFrQjtvQkFDNUIsTUFBTSxFQUFFLE1BQWdCO2lCQUN6QjthQUNGLENBQUM7WUFDRixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztnQkFDdkIsS0FBSyxFQUFFO29CQUNMLFFBQVEsRUFBRSxRQUFrQjtvQkFDNUIsTUFBTSxFQUFFLE1BQWdCO29CQUN4QixVQUFVLEVBQUUsSUFBSTtpQkFDakI7YUFDRixDQUFDO1lBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7Z0JBQ3ZCLEtBQUssRUFBRTtvQkFDTCxRQUFRLEVBQUUsUUFBa0I7b0JBQzVCLE1BQU0sRUFBRSxNQUFnQjtvQkFDeEIsVUFBVSxFQUFFLEtBQUs7aUJBQ2xCO2FBQ0YsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDUCxLQUFLO1lBQ0wsUUFBUTtZQUNSLFVBQVU7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRUosT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWljaGFlbG1jaXNhYWMvR2l0SHViL3RlYWNoaW5nLWVuZ2luZTIuMC9zZXJ2ZXIvc3JjL3JvdXRlcy9jb21tZW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBsYW4gQ29tbWVudHMgUm91dGVzXG4gKiBIYW5kbGVzIGNvbW1lbnRpbmcgYW5kIGZlZWRiYWNrIG9uIHNoYXJlZCBwbGFuc1xuICovXG5cbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHRlYWNoaW5nLWVuZ2luZS9kYXRhYmFzZSc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IGF1dGhlbnRpY2F0ZSB9IGZyb20gJ0AvbWlkZGxld2FyZS9hdXRoZW50aWNhdGUnO1xuaW1wb3J0IHsgYXN5bmNIYW5kbGVyIH0gZnJvbSAnQC9taWRkbGV3YXJlL2Vycm9ySGFuZGxlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0AvbG9nZ2VyJztcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzXG5jb25zdCBjcmVhdGVDb21tZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICBwbGFuVHlwZTogei5lbnVtKFsnbG9uZy1yYW5nZScsICd1bml0JywgJ2xlc3NvbicsICdkYXlib29rJ10pLFxuICBwbGFuSWQ6IHouc3RyaW5nKCksXG4gIGNvbnRlbnQ6IHouc3RyaW5nKCkubWluKDEpLm1heCg1MDAwKSxcbiAgcGFyZW50SWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCB1cGRhdGVDb21tZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICBjb250ZW50OiB6LnN0cmluZygpLm1pbigxKS5tYXgoNTAwMCkub3B0aW9uYWwoKSxcbiAgaXNSZXNvbHZlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgaXNQaW5uZWQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRSb3V0ZXMocHJpc21hOiBQcmlzbWFDbGllbnQpOiBSb3V0ZXIge1xuICBjb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuICAvLyBBcHBseSBhdXRoZW50aWNhdGlvbiB0byBhbGwgcm91dGVzXG4gIHJvdXRlci51c2UoYXV0aGVudGljYXRlKTtcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdXNlciBoYXMgYWNjZXNzIHRvIGNvbW1lbnQgb24gYSBwbGFuXG4gIGFzeW5jIGZ1bmN0aW9uIGNoZWNrQ29tbWVudEFjY2VzcyhwbGFuVHlwZTogc3RyaW5nLCBwbGFuSWQ6IHN0cmluZywgdXNlcklkOiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAvLyBDaGVjayBpZiB1c2VyIG93bnMgdGhlIHBsYW5cbiAgICBsZXQgaXNPd25lciA9IGZhbHNlO1xuICAgIHN3aXRjaCAocGxhblR5cGUpIHtcbiAgICAgIGNhc2UgJ2xvbmctcmFuZ2UnOiB7XG4gICAgICAgIGNvbnN0IGxyUGxhbiA9IGF3YWl0IHByaXNtYS5sb25nUmFuZ2VQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBwbGFuSWQgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlzT3duZXIgPSBsclBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSAndW5pdCc6IHtcbiAgICAgICAgY29uc3QgdW5pdFBsYW4gPSBhd2FpdCBwcmlzbWEudW5pdFBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgaWQ6IHBsYW5JZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaXNPd25lciA9IHVuaXRQbGFuPy51c2VySWQgPT09IHVzZXJJZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2xlc3Nvbic6IHtcbiAgICAgICAgY29uc3QgbGVzc29uUGxhbiA9IGF3YWl0IHByaXNtYS5lVEZPTGVzc29uUGxhbi5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyBpZDogcGxhbklkIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpc093bmVyID0gbGVzc29uUGxhbj8udXNlcklkID09PSB1c2VySWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdkYXlib29rJzoge1xuICAgICAgICBjb25zdCBkYXlib29rRW50cnkgPSBhd2FpdCBwcmlzbWEuZGF5Ym9va0VudHJ5LmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBwbGFuSWQgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlzT3duZXIgPSBkYXlib29rRW50cnk/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPd25lcikgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBDaGVjayBpZiBwbGFuIGlzIHNoYXJlZCB3aXRoIHVzZXIgYW5kIGNvbW1lbnRpbmcgaXMgYWxsb3dlZFxuICAgIGNvbnN0IHNoYXJlZFBsYW4gPSBhd2FpdCBwcmlzbWEuc2hhcmVkUGxhbi5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgcGxhblR5cGUsXG4gICAgICAgIHBsYW5JZCxcbiAgICAgICAgT1I6IFtcbiAgICAgICAgICB7IHNoYXJlZFdpdGhJZDogdXNlcklkIH0sXG4gICAgICAgICAgeyB0ZWFtSWQ6IHsgbm90OiBudWxsIH0gfSxcbiAgICAgICAgXSxcbiAgICAgICAgY2FuQ29tbWVudDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoc2hhcmVkUGxhbikge1xuICAgICAgLy8gSWYgc2hhcmVkIHdpdGggdGVhbSwgY2hlY2sgdGVhbSBtZW1iZXJzaGlwXG4gICAgICBpZiAoc2hhcmVkUGxhbi50ZWFtSWQpIHtcbiAgICAgICAgY29uc3QgaXNNZW1iZXIgPSBhd2FpdCBwcmlzbWEudGVhbU1lbWJlci5maW5kRmlyc3Qoe1xuICAgICAgICAgIHdoZXJlOiB7IHRlYW1JZDogc2hhcmVkUGxhbi50ZWFtSWQsIHVzZXJJZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICEhaXNNZW1iZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBHZXQgY29tbWVudHMgZm9yIGEgcGxhblxuICByb3V0ZXIuZ2V0KCcvJywgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyIS5pZDtcbiAgICBjb25zdCB7IHBsYW5UeXBlLCBwbGFuSWQgfSA9IHJlcS5xdWVyeTtcblxuICAgIGlmICghcGxhblR5cGUgfHwgIXBsYW5JZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdwbGFuVHlwZSBhbmQgcGxhbklkIGFyZSByZXF1aXJlZCcgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYWNjZXNzXG4gICAgY29uc3QgaGFzQWNjZXNzID0gYXdhaXQgY2hlY2tDb21tZW50QWNjZXNzKHBsYW5UeXBlIGFzIHN0cmluZywgcGxhbklkIGFzIHN0cmluZywgdXNlcklkKTtcbiAgICBpZiAoIWhhc0FjY2Vzcykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdBY2Nlc3MgZGVuaWVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21tZW50cyA9IGF3YWl0IHByaXNtYS5wbGFuQ29tbWVudC5maW5kTWFueSh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBwbGFuVHlwZTogcGxhblR5cGUgYXMgc3RyaW5nLFxuICAgICAgICBwbGFuSWQ6IHBsYW5JZCBhcyBzdHJpbmcsXG4gICAgICAgIHBhcmVudElkOiBudWxsLCAvLyBPbmx5IGdldCB0b3AtbGV2ZWwgY29tbWVudHNcbiAgICAgIH0sXG4gICAgICBpbmNsdWRlOiB7XG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIGVtYWlsOiB0cnVlIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlcGxpZXM6IHtcbiAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgZW1haWw6IHRydWUgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2FzYycgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBvcmRlckJ5OiBbXG4gICAgICAgIHsgaXNQaW5uZWQ6ICdkZXNjJyB9LFxuICAgICAgICB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgcmVzLmpzb24oY29tbWVudHMpO1xuICB9KSk7XG5cbiAgLy8gQ3JlYXRlIGEgY29tbWVudFxuICByb3V0ZXIucG9zdCgnLycsIGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlciEuaWQ7XG4gICAgY29uc3QgeyBwbGFuVHlwZSwgcGxhbklkLCBjb250ZW50LCBwYXJlbnRJZCB9ID0gY3JlYXRlQ29tbWVudFNjaGVtYS5wYXJzZShyZXEuYm9keSk7XG5cbiAgICAvLyBDaGVjayBhY2Nlc3NcbiAgICBjb25zdCBoYXNBY2Nlc3MgPSBhd2FpdCBjaGVja0NvbW1lbnRBY2Nlc3MocGxhblR5cGUsIHBsYW5JZCwgdXNlcklkKTtcbiAgICBpZiAoIWhhc0FjY2Vzcykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byBjb21tZW50IG9uIHRoaXMgcGxhbicgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgcmVwbHlpbmcgdG8gYSBjb21tZW50LCB2ZXJpZnkgcGFyZW50IGV4aXN0c1xuICAgIGlmIChwYXJlbnRJZCkge1xuICAgICAgY29uc3QgcGFyZW50Q29tbWVudCA9IGF3YWl0IHByaXNtYS5wbGFuQ29tbWVudC5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHBhcmVudElkIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFwYXJlbnRDb21tZW50IHx8IHBhcmVudENvbW1lbnQucGxhblR5cGUgIT09IHBsYW5UeXBlIHx8IHBhcmVudENvbW1lbnQucGxhbklkICE9PSBwbGFuSWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHBhcmVudCBjb21tZW50JyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb21tZW50ID0gYXdhaXQgcHJpc21hLnBsYW5Db21tZW50LmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIHBsYW5UeXBlLFxuICAgICAgICBwbGFuSWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgcGFyZW50SWQsXG4gICAgICB9LFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlLCBlbWFpbDogdHJ1ZSB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGxvZ2dlci5pbmZvKGBDb21tZW50IGNyZWF0ZWQgb24gJHtwbGFuVHlwZX0vJHtwbGFuSWR9IGJ5IHVzZXIgJHt1c2VySWR9YCk7XG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24oY29tbWVudCk7XG4gIH0pKTtcblxuICAvLyBVcGRhdGUgYSBjb21tZW50XG4gIHJvdXRlci5wYXRjaCgnLzpjb21tZW50SWQnLCBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgeyBjb21tZW50SWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIhLmlkO1xuICAgIGNvbnN0IHVwZGF0ZXMgPSB1cGRhdGVDb21tZW50U2NoZW1hLnBhcnNlKHJlcS5ib2R5KTtcblxuICAgIGNvbnN0IGNvbW1lbnQgPSBhd2FpdCBwcmlzbWEucGxhbkNvbW1lbnQuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBpZDogY29tbWVudElkIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWNvbW1lbnQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnQ29tbWVudCBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHBlcm1pc3Npb25zXG4gICAgY29uc3QgaXNBdXRob3IgPSBjb21tZW50LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgIGNvbnN0IGhhc0FjY2VzcyA9IGF3YWl0IGNoZWNrQ29tbWVudEFjY2Vzcyhjb21tZW50LnBsYW5UeXBlLCBjb21tZW50LnBsYW5JZCwgdXNlcklkKTtcblxuICAgIGlmICghaGFzQWNjZXNzKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgIH1cblxuICAgIC8vIE9ubHkgYXV0aG9yIGNhbiBlZGl0IGNvbnRlbnRcbiAgICBpZiAodXBkYXRlcy5jb250ZW50ICE9PSB1bmRlZmluZWQgJiYgIWlzQXV0aG9yKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ09ubHkgdGhlIGNvbW1lbnQgYXV0aG9yIGNhbiBlZGl0IHRoZSBjb250ZW50JyB9KTtcbiAgICB9XG5cbiAgICAvLyBQbGFuIG93bmVyIGNhbiBwaW4vcmVzb2x2ZSBjb21tZW50c1xuICAgIGNvbnN0IHBsYW5Pd25lckNoZWNrczogUmVjb3JkPHN0cmluZywgKCkgPT4gUHJvbWlzZTxib29sZWFuPj4gPSB7XG4gICAgICAnbG9uZy1yYW5nZSc6IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcGxhbiA9IGF3YWl0IHByaXNtYS5sb25nUmFuZ2VQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBjb21tZW50LnBsYW5JZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfSxcbiAgICAgICd1bml0JzogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwbGFuID0gYXdhaXQgcHJpc21hLnVuaXRQbGFuLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBjb21tZW50LnBsYW5JZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfSxcbiAgICAgICdsZXNzb24nOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYW4gPSBhd2FpdCBwcmlzbWEuZVRGT0xlc3NvblBsYW4uZmluZFVuaXF1ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgaWQ6IGNvbW1lbnQucGxhbklkIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhbj8udXNlcklkID09PSB1c2VySWQ7XG4gICAgICB9LFxuICAgICAgJ2RheWJvb2snOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYW4gPSBhd2FpdCBwcmlzbWEuZGF5Ym9va0VudHJ5LmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiBjb21tZW50LnBsYW5JZCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYW4/LnVzZXJJZCA9PT0gdXNlcklkO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3QgaXNQbGFuT3duZXIgPSBhd2FpdCBwbGFuT3duZXJDaGVja3NbY29tbWVudC5wbGFuVHlwZV0/LigpO1xuXG4gICAgaWYgKCh1cGRhdGVzLmlzUGlubmVkICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlcy5pc1Jlc29sdmVkICE9PSB1bmRlZmluZWQpICYmICFpc1BsYW5Pd25lcikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdPbmx5IHRoZSBwbGFuIG93bmVyIGNhbiBwaW4gb3IgcmVzb2x2ZSBjb21tZW50cycgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IHByaXNtYS5wbGFuQ29tbWVudC51cGRhdGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IGNvbW1lbnRJZCB9LFxuICAgICAgZGF0YTogdXBkYXRlcyxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSwgZW1haWw6IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXMuanNvbih1cGRhdGVkKTtcbiAgfSkpO1xuXG4gIC8vIERlbGV0ZSBhIGNvbW1lbnRcbiAgcm91dGVyLmRlbGV0ZSgnLzpjb21tZW50SWQnLCBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgeyBjb21tZW50SWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIhLmlkO1xuXG4gICAgY29uc3QgY29tbWVudCA9IGF3YWl0IHByaXNtYS5wbGFuQ29tbWVudC5maW5kVW5pcXVlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiBjb21tZW50SWQgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgc2VsZWN0OiB7IHJlcGxpZXM6IHRydWUgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWNvbW1lbnQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnQ29tbWVudCBub3QgZm91bmQnIH0pO1xuICAgIH1cblxuICAgIC8vIE9ubHkgYXV0aG9yIGNhbiBkZWxldGUgdGhlaXIgY29tbWVudFxuICAgIGlmIChjb21tZW50LnVzZXJJZCAhPT0gdXNlcklkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ09ubHkgdGhlIGNvbW1lbnQgYXV0aG9yIGNhbiBkZWxldGUgdGhlIGNvbW1lbnQnIH0pO1xuICAgIH1cblxuICAgIC8vIERvbid0IGFsbG93IGRlbGV0aW9uIGlmIHRoZXJlIGFyZSByZXBsaWVzXG4gICAgaWYgKGNvbW1lbnQuX2NvdW50LnJlcGxpZXMgPiAwKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0Nhbm5vdCBkZWxldGUgYSBjb21tZW50IHdpdGggcmVwbGllcycgfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgcHJpc21hLnBsYW5Db21tZW50LmRlbGV0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogY29tbWVudElkIH0sXG4gICAgfSk7XG5cbiAgICBsb2dnZXIuaW5mbyhgQ29tbWVudCAke2NvbW1lbnRJZH0gZGVsZXRlZCBieSB1c2VyICR7dXNlcklkfWApO1xuICAgIHJlcy5zdGF0dXMoMjA0KS5zZW5kKCk7XG4gIH0pKTtcblxuICAvLyBHZXQgY29tbWVudCBzdGF0aXN0aWNzIGZvciBhIHBsYW5cbiAgcm91dGVyLmdldCgnL3N0YXRzJywgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyIS5pZDtcbiAgICBjb25zdCB7IHBsYW5UeXBlLCBwbGFuSWQgfSA9IHJlcS5xdWVyeTtcblxuICAgIGlmICghcGxhblR5cGUgfHwgIXBsYW5JZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdwbGFuVHlwZSBhbmQgcGxhbklkIGFyZSByZXF1aXJlZCcgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYWNjZXNzXG4gICAgY29uc3QgaGFzQWNjZXNzID0gYXdhaXQgY2hlY2tDb21tZW50QWNjZXNzKHBsYW5UeXBlIGFzIHN0cmluZywgcGxhbklkIGFzIHN0cmluZywgdXNlcklkKTtcbiAgICBpZiAoIWhhc0FjY2Vzcykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdBY2Nlc3MgZGVuaWVkJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBbdG90YWwsIHJlc29sdmVkLCB1bnJlc29sdmVkXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHByaXNtYS5wbGFuQ29tbWVudC5jb3VudCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgcGxhblR5cGU6IHBsYW5UeXBlIGFzIHN0cmluZyxcbiAgICAgICAgICBwbGFuSWQ6IHBsYW5JZCBhcyBzdHJpbmcsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIHByaXNtYS5wbGFuQ29tbWVudC5jb3VudCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgcGxhblR5cGU6IHBsYW5UeXBlIGFzIHN0cmluZyxcbiAgICAgICAgICBwbGFuSWQ6IHBsYW5JZCBhcyBzdHJpbmcsXG4gICAgICAgICAgaXNSZXNvbHZlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICAgcHJpc21hLnBsYW5Db21tZW50LmNvdW50KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICBwbGFuVHlwZTogcGxhblR5cGUgYXMgc3RyaW5nLFxuICAgICAgICAgIHBsYW5JZDogcGxhbklkIGFzIHN0cmluZyxcbiAgICAgICAgICBpc1Jlc29sdmVkOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIF0pO1xuXG4gICAgcmVzLmpzb24oe1xuICAgICAgdG90YWwsXG4gICAgICByZXNvbHZlZCxcbiAgICAgIHVucmVzb2x2ZWQsXG4gICAgfSk7XG4gIH0pKTtcblxuICByZXR1cm4gcm91dGVyO1xufSJdLCJ2ZXJzaW9uIjozfQ==