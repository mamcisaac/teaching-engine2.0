518b93f57ea27812b66d6eff6da46c20
/* istanbul ignore next */
function cov_2kiq5f5o7l() {
  var path = "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/embeddingService.ts";
  var hash = "2a2a274117ba1ba79886e3636bc225d5f4ddffc1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/embeddingService.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "1": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 19
        }
      },
      "2": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 18
        }
      },
      "3": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 21
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 24
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "7": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 93
        }
      },
      "8": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 24
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "10": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 29,
          column: 14
        }
      },
      "11": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "12": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 97
        }
      },
      "13": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 36,
          column: 18
        }
      },
      "14": {
        start: {
          line: 38,
          column: 30
        },
        end: {
          line: 38,
          column: 70
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 40,
          column: 28
        }
      },
      "16": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 28
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "18": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 117
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "20": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 104
        }
      },
      "21": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 24
        }
      },
      "22": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 99
        }
      },
      "24": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 22
        }
      },
      "25": {
        start: {
          line: 69,
          column: 24
        },
        end: {
          line: 69,
          column: 26
        }
      },
      "26": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 70,
          column: 81
        }
      },
      "27": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "28": {
        start: {
          line: 71,
          column: 21
        },
        end: {
          line: 71,
          column: 22
        }
      },
      "29": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "30": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 137
        }
      },
      "31": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "32": {
        start: {
          line: 75,
          column: 37
        },
        end: {
          line: 75,
          column: 67
        }
      },
      "33": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 46
        }
      },
      "34": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 80,
          column: 17
        }
      },
      "35": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 59
        }
      },
      "36": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 101
        }
      },
      "37": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 23
        }
      },
      "38": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "39": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "41": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 99
        }
      },
      "42": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "43": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "44": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 68
        }
      },
      "45": {
        start: {
          line: 110,
          column: 25
        },
        end: {
          line: 110,
          column: 26
        }
      },
      "46": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 21
        }
      },
      "47": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 21
        }
      },
      "48": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "49": {
        start: {
          line: 113,
          column: 21
        },
        end: {
          line: 113,
          column: 22
        }
      },
      "50": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 56
        }
      },
      "51": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 51
        }
      },
      "52": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 51
        }
      },
      "53": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 33
        }
      },
      "54": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 33
        }
      },
      "55": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "56": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 21
        }
      },
      "57": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 44
        }
      },
      "58": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "59": {
        start: {
          line: 130,
          column: 36
        },
        end: {
          line: 130,
          column: 74
        }
      },
      "60": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 132,
          column: 26
        }
      },
      "61": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 26
        }
      },
      "62": {
        start: {
          line: 134,
          column: 34
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "63": {
        start: {
          line: 142,
          column: 33
        },
        end: {
          line: 156,
          column: 32
        }
      },
      "64": {
        start: {
          line: 143,
          column: 31
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "65": {
        start: {
          line: 154,
          column: 34
        },
        end: {
          line: 154,
          column: 62
        }
      },
      "66": {
        start: {
          line: 155,
          column: 32
        },
        end: {
          line: 155,
          column: 59
        }
      },
      "67": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 32
        }
      },
      "68": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 95
        }
      },
      "69": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 22
        }
      },
      "70": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "71": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "72": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 66
        }
      },
      "73": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 25
        }
      },
      "74": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "75": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "76": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "77": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "78": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 68
        }
      },
      "79": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "80": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 102
        }
      },
      "81": {
        start: {
          line: 195,
          column: 36
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "82": {
        start: {
          line: 195,
          column: 71
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "83": {
        start: {
          line: 199,
          column: 28
        },
        end: {
          line: 199,
          column: 79
        }
      },
      "84": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 122
        }
      },
      "85": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 34
        }
      },
      "86": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 82
        }
      },
      "87": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 21
        }
      },
      "88": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "89": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "90": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 66
        }
      },
      "91": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 26
        }
      },
      "92": {
        start: {
          line: 218,
          column: 36
        },
        end: {
          line: 218,
          column: 82
        }
      },
      "93": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 220,
          column: 26
        }
      },
      "94": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 26
        }
      },
      "95": {
        start: {
          line: 222,
          column: 34
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "96": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 241,
          column: 32
        }
      },
      "97": {
        start: {
          line: 228,
          column: 31
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "98": {
        start: {
          line: 239,
          column: 34
        },
        end: {
          line: 239,
          column: 62
        }
      },
      "99": {
        start: {
          line: 240,
          column: 32
        },
        end: {
          line: 240,
          column: 59
        }
      },
      "100": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 32
        }
      },
      "101": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 94
        }
      },
      "102": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 22
        }
      },
      "103": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "104": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 257,
          column: 14
        }
      },
      "105": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "106": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 263,
          column: 18
        }
      },
      "107": {
        start: {
          line: 266,
          column: 32
        },
        end: {
          line: 269,
          column: 14
        }
      },
      "108": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "109": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 74
        }
      },
      "110": {
        start: {
          line: 274,
          column: 25
        },
        end: {
          line: 274,
          column: 74
        }
      },
      "111": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 69
        }
      },
      "112": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 105
        }
      },
      "113": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 24
        }
      },
      "114": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "115": {
        start: {
          line: 287,
          column: 27
        },
        end: {
          line: 289,
          column: 14
        }
      },
      "116": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 111
        }
      },
      "117": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 32
        }
      },
      "118": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 84
        }
      },
      "119": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 21
        }
      },
      "120": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 301,
          column: 24
        }
      },
      "121": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 24
        }
      },
      "122": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "123": {
        start: {
          line: 302,
          column: 27
        },
        end: {
          line: 302,
          column: 28
        }
      },
      "124": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "125": {
        start: {
          line: 304,
          column: 33
        },
        end: {
          line: 308,
          column: 18
        }
      },
      "126": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 311,
          column: 17
        }
      },
      "127": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 104
        }
      },
      "128": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 50
        }
      },
      "129": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 319,
          column: 58
        }
      },
      "130": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 323,
          column: 17
        }
      },
      "131": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 93
        }
      },
      "132": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 322,
          column: 32
        }
      },
      "133": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 82
        }
      },
      "134": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 20
        }
      },
      "135": {
        start: {
          line: 331,
          column: 24
        },
        end: {
          line: 331,
          column: 26
        }
      },
      "136": {
        start: {
          line: 333,
          column: 35
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "137": {
        start: {
          line: 335,
          column: 57
        },
        end: {
          line: 335,
          column: 64
        }
      },
      "138": {
        start: {
          line: 338,
          column: 28
        },
        end: {
          line: 338,
          column: 87
        }
      },
      "139": {
        start: {
          line: 338,
          column: 68
        },
        end: {
          line: 338,
          column: 85
        }
      },
      "140": {
        start: {
          line: 339,
          column: 25
        },
        end: {
          line: 339,
          column: 74
        }
      },
      "141": {
        start: {
          line: 339,
          column: 48
        },
        end: {
          line: 339,
          column: 73
        }
      },
      "142": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "143": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 346,
          column: 15
        }
      },
      "144": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "145": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "146": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "147": {
        start: {
          line: 353,
          column: 29
        },
        end: {
          line: 357,
          column: 14
        }
      },
      "148": {
        start: {
          line: 355,
          column: 46
        },
        end: {
          line: 355,
          column: 55
        }
      },
      "149": {
        start: {
          line: 359,
          column: 31
        },
        end: {
          line: 363,
          column: 15
        }
      },
      "150": {
        start: {
          line: 359,
          column: 72
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "151": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 366,
          column: 15
        }
      },
      "152": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 40
        }
      },
      "153": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 138
        }
      },
      "154": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 108
        }
      },
      "155": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 23
        }
      },
      "156": {
        start: {
          line: 376,
          column: 24
        },
        end: {
          line: 376,
          column: 26
        }
      },
      "157": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "158": {
        start: {
          line: 377,
          column: 21
        },
        end: {
          line: 377,
          column: 22
        }
      },
      "159": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 56
        }
      },
      "160": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 23
        }
      },
      "161": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 65
        }
      },
      "162": {
        start: {
          line: 383,
          column: 40
        },
        end: {
          line: 383,
          column: 63
        }
      },
      "163": {
        start: {
          line: 387,
          column: 32
        },
        end: {
          line: 387,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 34
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 49
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 64
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 91
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 106
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 78
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 128
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 143,
            column: 21
          },
          end: {
            line: 143,
            column: 22
          }
        },
        loc: {
          start: {
            line: 143,
            column: 31
          },
          end: {
            line: 153,
            column: 13
          }
        },
        line: 143
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 24
          },
          end: {
            line: 154,
            column: 25
          }
        },
        loc: {
          start: {
            line: 154,
            column: 34
          },
          end: {
            line: 154,
            column: 62
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 23
          }
        },
        loc: {
          start: {
            line: 155,
            column: 32
          },
          end: {
            line: 155,
            column: 59
          }
        },
        line: 155
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 61
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 167
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 195,
            column: 53
          },
          end: {
            line: 195,
            column: 54
          }
        },
        loc: {
          start: {
            line: 195,
            column: 71
          },
          end: {
            line: 198,
            column: 13
          }
        },
        line: 195
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 76
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 211
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 228,
            column: 21
          },
          end: {
            line: 228,
            column: 22
          }
        },
        loc: {
          start: {
            line: 228,
            column: 31
          },
          end: {
            line: 238,
            column: 13
          }
        },
        line: 228
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 239,
            column: 25
          }
        },
        loc: {
          start: {
            line: 239,
            column: 34
          },
          end: {
            line: 239,
            column: 62
          }
        },
        line: 239
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 240,
            column: 22
          },
          end: {
            line: 240,
            column: 23
          }
        },
        loc: {
          start: {
            line: 240,
            column: 32
          },
          end: {
            line: 240,
            column: 59
          }
        },
        line: 240
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 57
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 252
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 38
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 285
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 40
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 299
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 330,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        loc: {
          start: {
            line: 330,
            column: 30
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 330
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 335,
            column: 47
          },
          end: {
            line: 335,
            column: 48
          }
        },
        loc: {
          start: {
            line: 335,
            column: 57
          },
          end: {
            line: 335,
            column: 64
          }
        },
        line: 335
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 338,
            column: 59
          },
          end: {
            line: 338,
            column: 60
          }
        },
        loc: {
          start: {
            line: 338,
            column: 68
          },
          end: {
            line: 338,
            column: 85
          }
        },
        line: 338
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 339,
            column: 38
          },
          end: {
            line: 339,
            column: 39
          }
        },
        loc: {
          start: {
            line: 339,
            column: 48
          },
          end: {
            line: 339,
            column: 73
          }
        },
        line: 339
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 355,
            column: 36
          },
          end: {
            line: 355,
            column: 37
          }
        },
        loc: {
          start: {
            line: 355,
            column: 46
          },
          end: {
            line: 355,
            column: 55
          }
        },
        line: 355
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 359,
            column: 49
          },
          end: {
            line: 359,
            column: 50
          }
        },
        loc: {
          start: {
            line: 359,
            column: 72
          },
          end: {
            line: 363,
            column: 13
          }
        },
        line: 359
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 45
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 375
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 19
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 382
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 383,
            column: 27
          },
          end: {
            line: 383,
            column: 28
          }
        },
        loc: {
          start: {
            line: 383,
            column: 40
          },
          end: {
            line: 383,
            column: 63
          }
        },
        line: 383
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 40,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 40,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 19
          },
          end: {
            line: 96,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 31
          },
          end: {
            line: 96,
            column: 50
          }
        }, {
          start: {
            line: 96,
            column: 53
          },
          end: {
            line: 96,
            column: 57
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 23
          }
        }, {
          start: {
            line: 120,
            column: 27
          },
          end: {
            line: 120,
            column: 38
          }
        }],
        line: 120
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 49
          },
          end: {
            line: 128,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 61
          },
          end: {
            line: 128,
            column: 64
          }
        }],
        line: 128
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 66
          },
          end: {
            line: 128,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 128,
            column: 74
          },
          end: {
            line: 128,
            column: 76
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 132,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 132,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "12": {
        loc: {
          start: {
            line: 167,
            column: 36
          },
          end: {
            line: 167,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 167,
            column: 54
          },
          end: {
            line: 167,
            column: 59
          }
        }],
        line: 167
      },
      "13": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "14": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: 180,
            column: 17
          },
          end: {
            line: 188,
            column: 13
          }
        }],
        line: 174
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 211,
            column: 47
          },
          end: {
            line: 211,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 211,
            column: 55
          },
          end: {
            line: 211,
            column: 57
          }
        }],
        line: 211
      },
      "17": {
        loc: {
          start: {
            line: 211,
            column: 59
          },
          end: {
            line: 211,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 211,
            column: 71
          },
          end: {
            line: 211,
            column: 74
          }
        }],
        line: 211
      },
      "18": {
        loc: {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "19": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 220,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 220,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "20": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "21": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "22": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 301,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 301,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "23": {
        loc: {
          start: {
            line: 309,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "24": {
        loc: {
          start: {
            line: 316,
            column: 27
          },
          end: {
            line: 316,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 52
          },
          end: {
            line: 316,
            column: 65
          }
        }, {
          start: {
            line: 316,
            column: 68
          },
          end: {
            line: 316,
            column: 81
          }
        }],
        line: 316
      },
      "25": {
        loc: {
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 323,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 323,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "26": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/embeddingService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/embeddingService.ts"],
      sourcesContent: ["import { openai } from './llmService';\nimport BaseService from './base/BaseService';\n\nexport interface EmbeddingResult {\n  expectationId: string;\n  embedding: number[];\n  model: string;\n}\n\nexport class EmbeddingService extends BaseService {\n  private readonly model = 'text-embedding-3-small';\n  private readonly batchSize = 100; // OpenAI API batch limit\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000; // ms\n\n  constructor() {\n    super('EmbeddingService');\n  }\n\n  /**\n   * Check if embedding service is available\n   */\n  isEmbeddingServiceAvailable(): boolean {\n    return !!openai;\n  }\n\n  /**\n   * Generate embedding for a single curriculum expectation\n   */\n  async generateEmbedding(expectationId: string, text: string): Promise<EmbeddingResult | null> {\n    if (!openai) {\n      this.logger.warn('OpenAI API key not configured, skipping embedding generation');\n      return null;\n    }\n\n    try {\n      // Check if embedding already exists\n      const existing = await this.prisma.curriculumExpectationEmbedding.findUnique({\n        where: { expectationId },\n      });\n\n      if (existing) {\n        this.logger.debug({ expectationId }, 'Embedding already exists for expectation');\n        return {\n          expectationId,\n          embedding: existing.embedding as number[],\n          model: existing.model,\n        };\n      }\n\n      const embedding = await this.generateEmbeddingVector(text);\n      if (!embedding) return null;\n\n      // Store in database\n      await this.prisma.curriculumExpectationEmbedding.create({\n        data: {\n          expectationId,\n          embedding,\n          model: this.model,\n        },\n      });\n\n      this.logger.info(\n        { expectationId, model: this.model },\n        'Generated and stored embedding for expectation',\n      );\n\n      return {\n        expectationId,\n        embedding,\n        model: this.model,\n      };\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to generate embedding for expectation');\n      return null;\n    }\n  }\n\n  /**\n   * Generate embeddings for multiple expectations in batches\n   */\n  async generateBatchEmbeddings(\n    expectations: { id: string; text: string }[],\n  ): Promise<EmbeddingResult[]> {\n    if (!openai) {\n      this.logger.warn('OpenAI API key not configured, skipping batch embedding generation');\n      return [];\n    }\n\n    const results: EmbeddingResult[] = [];\n    const batches = this.createEmbeddingBatches(expectations, this.batchSize);\n\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      this.logger.info(\n        { batchIndex: i + 1, totalBatches: batches.length, batchSize: batch.length },\n        'Processing embedding batch',\n      );\n\n      try {\n        const batchResults = await this.processBatch(batch);\n        results.push(...batchResults);\n\n        // Add delay between batches to respect rate limits\n        if (i < batches.length - 1) {\n          await this.sleepEmbed(this.retryDelay);\n        }\n      } catch (error) {\n        this.logger.error({ error, batchIndex: i + 1 }, 'Failed to process embedding batch');\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get embedding for an expectation (from cache or generate new)\n   */\n  async getEmbedding(expectationId: string): Promise<number[] | null> {\n    try {\n      const embedding = await this.prisma.curriculumExpectationEmbedding.findUnique({\n        where: { expectationId },\n      });\n\n      return embedding ? (embedding.embedding as number[]) : null;\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to get embedding for expectation');\n      return null;\n    }\n  }\n\n  /**\n   * Calculate cosine similarity between two embeddings\n   */\n  calculateSimilarity(embedding1: number[], embedding2: number[]): number {\n    if (embedding1.length !== embedding2.length) {\n      throw new Error('Embeddings must have the same length');\n    }\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < embedding1.length; i++) {\n      dotProduct += embedding1[i] * embedding2[i];\n      norm1 += embedding1[i] * embedding1[i];\n      norm2 += embedding2[i] * embedding2[i];\n    }\n\n    norm1 = Math.sqrt(norm1);\n    norm2 = Math.sqrt(norm2);\n\n    if (norm1 === 0 || norm2 === 0) {\n      return 0;\n    }\n\n    return dotProduct / (norm1 * norm2);\n  }\n\n  /**\n   * Find similar expectations based on embedding similarity\n   */\n  async findSimilarExpectations(\n    expectationId: string,\n    threshold: number = 0.8,\n    limit: number = 10,\n  ): Promise<\n    {\n      expectationId: string;\n      similarity: number;\n      expectation?: {\n        id: string;\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n      };\n    }[]\n  > {\n    try {\n      const targetEmbedding = await this.getEmbedding(expectationId);\n      if (!targetEmbedding) return [];\n\n      // Get all embeddings with expectation data (optimized for current dataset size)\n      const allEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n        where: {\n          expectationId: { not: expectationId },\n        },\n        include: {\n          expectation: true,\n        },\n      });\n\n      const similarities = allEmbeddings\n        .map((emb) => ({\n          expectationId: emb.expectationId,\n          similarity: this.calculateSimilarity(targetEmbedding, emb.embedding as number[]),\n          expectation: {\n            id: emb.expectation.id,\n            code: emb.expectation.code,\n            description: emb.expectation.description,\n            subject: emb.expectation.subject,\n            grade: emb.expectation.grade,\n          },\n        }))\n        .filter((item) => item.similarity >= threshold)\n        .sort((a, b) => b.similarity - a.similarity)\n        .slice(0, limit);\n\n      return similarities;\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to find similar expectations');\n      return [];\n    }\n  }\n\n  /**\n   * Generate embeddings for all expectations missing them\n   */\n  async generateMissingEmbeddings(forceRegenerate: boolean = false): Promise<number> {\n    try {\n      if (!openai) {\n        this.logger.warn('OpenAI API key not configured');\n        return 0;\n      }\n\n      let expectations;\n      if (forceRegenerate) {\n        // Get all expectations\n        expectations = await this.prisma.curriculumExpectation.findMany({\n          select: { id: true, code: true, description: true },\n        });\n      } else {\n        // Get expectations without embeddings\n        expectations = await this.prisma.curriculumExpectation.findMany({\n          where: {\n            embedding: null,\n          },\n          select: { id: true, code: true, description: true },\n        });\n      }\n\n      if (expectations.length === 0) {\n        this.logger.info('No expectations need embeddings');\n        return 0;\n      }\n\n      this.logger.info({ count: expectations.length }, 'Found expectations needing embeddings');\n\n      // Prepare data for batch processing\n      const expectationData = expectations.map((expectation) => ({\n        id: expectation.id,\n        text: `${expectation.code}: ${expectation.description}`,\n      }));\n\n      const results = await this.generateBatchEmbeddings(expectationData);\n\n      this.logger.info(\n        { total: expectations.length, generated: results.length },\n        'Finished generating embeddings',\n      );\n\n      return results.length;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to generate missing embeddings');\n      return 0;\n    }\n  }\n\n  /**\n   * Search expectations by text similarity\n   */\n  async searchExpectationsByText(\n    searchText: string,\n    limit: number = 20,\n    threshold: number = 0.7,\n  ): Promise<\n    {\n      expectationId: string;\n      similarity: number;\n      expectation: {\n        id: string;\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n      };\n    }[]\n  > {\n    try {\n      if (!openai) {\n        this.logger.warn('OpenAI API key not configured');\n        return [];\n      }\n\n      // Generate embedding for search text\n      const searchEmbedding = await this.generateEmbeddingVector(searchText);\n      if (!searchEmbedding) return [];\n\n      // Get all embeddings with expectation data\n      const allEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n        include: {\n          expectation: true,\n        },\n      });\n\n      const similarities = allEmbeddings\n        .map((emb) => ({\n          expectationId: emb.expectationId,\n          similarity: this.calculateSimilarity(searchEmbedding, emb.embedding as number[]),\n          expectation: {\n            id: emb.expectation.id,\n            code: emb.expectation.code,\n            description: emb.expectation.description,\n            subject: emb.expectation.subject,\n            grade: emb.expectation.grade,\n          },\n        }))\n        .filter((item) => item.similarity >= threshold)\n        .sort((a, b) => b.similarity - a.similarity)\n        .slice(0, limit);\n\n      return similarities;\n    } catch (error) {\n      this.logger.error({ error, searchText }, 'Failed to search expectations by text');\n      return [];\n    }\n  }\n\n  /**\n   * Get or create embedding for a specific expectation\n   */\n  async getOrCreateExpectationEmbedding(expectationId: string): Promise<EmbeddingResult | null> {\n    try {\n      // Check if embedding exists\n      const existing = await this.prisma.curriculumExpectationEmbedding.findUnique({\n        where: { expectationId },\n      });\n\n      if (existing) {\n        return {\n          expectationId,\n          embedding: existing.embedding as number[],\n          model: existing.model,\n        };\n      }\n\n      // Get expectation details\n      const expectation = await this.prisma.curriculumExpectation.findUnique({\n        where: { id: expectationId },\n        select: { code: true, description: true },\n      });\n\n      if (!expectation) {\n        throw new Error(`Expectation ${expectationId} not found`);\n      }\n\n      // Generate embedding\n      const text = `${expectation.code}: ${expectation.description}`;\n      return await this.generateEmbedding(expectationId, text);\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to get or create expectation embedding');\n      return null;\n    }\n  }\n\n  /**\n   * Cleanup old embeddings for a specific model\n   */\n  async cleanupOldEmbeddings(model: string): Promise<number> {\n    try {\n      const result = await this.prisma.curriculumExpectationEmbedding.deleteMany({\n        where: { model: { not: model } },\n      });\n\n      this.logger.info(\n        { deletedCount: result.count, currentModel: model },\n        'Cleaned up old embeddings',\n      );\n\n      return result.count;\n    } catch (error) {\n      this.logger.error({ error, model }, 'Failed to cleanup old embeddings');\n      return 0;\n    }\n  }\n\n  // Private helper methods\n\n  async generateEmbeddingVector(text: string): Promise<number[] | null> {\n    if (!openai) return null;\n\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n      try {\n        const response = await openai.embeddings.create({\n          model: this.model,\n          input: text,\n          encoding_format: 'float',\n        });\n\n        if (response.usage?.total_tokens) {\n          this.logger.debug({ tokens: response.usage.total_tokens }, 'Embedding tokens used');\n        }\n\n        return response.data[0].embedding;\n      } catch (error: unknown) {\n        this.logger.warn(\n          {\n            error: error instanceof Error ? error.message : String(error),\n            attempt,\n            maxRetries: this.maxRetries,\n          },\n          'Embedding generation attempt failed',\n        );\n\n        if (attempt === this.maxRetries) {\n          this.logger.error({ error }, 'All embedding generation attempts failed');\n          return null;\n        }\n\n        // Exponential backoff\n        await this.sleepEmbed(this.retryDelay * Math.pow(2, attempt - 1));\n      }\n    }\n\n    return null;\n  }\n\n  private async processBatch(batch: { id: string; text: string }[]): Promise<EmbeddingResult[]> {\n    const results: EmbeddingResult[] = [];\n\n    // Check for existing embeddings\n    const existingEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n      where: {\n        expectationId: { in: batch.map((item) => item.id) },\n      },\n    });\n\n    const existingIds = new Set(existingEmbeddings.map((emb) => emb.expectationId));\n    const newItems = batch.filter((item) => !existingIds.has(item.id));\n\n    // Add existing embeddings to results\n    for (const existing of existingEmbeddings) {\n      results.push({\n        expectationId: existing.expectationId,\n        embedding: existing.embedding as number[],\n        model: existing.model,\n      });\n    }\n\n    if (newItems.length === 0) {\n      return results;\n    }\n\n    // Generate embeddings for new items\n    try {\n      const response = await openai!.embeddings.create({\n        model: this.model,\n        input: newItems.map((item) => item.text),\n        encoding_format: 'float',\n      });\n\n      // Store new embeddings\n      const embeddings = response.data.map((embedding, index) => ({\n        expectationId: newItems[index].id,\n        embedding: embedding.embedding,\n        model: this.model,\n      }));\n\n      await this.prisma.curriculumExpectationEmbedding.createMany({\n        data: embeddings,\n      });\n\n      results.push(...embeddings);\n\n      this.logger.info(\n        { newEmbeddings: newItems.length, totalTokens: response.usage?.total_tokens },\n        'Generated batch embeddings',\n      );\n    } catch (error) {\n      this.logger.error(\n        { error, batchSize: newItems.length },\n        'Failed to generate batch embeddings',\n      );\n    }\n\n    return results;\n  }\n\n  private createEmbeddingBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n\n  private sleepEmbed(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const embeddingService = new EmbeddingService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2a2a274117ba1ba79886e3636bc225d5f4ddffc1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kiq5f5o7l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kiq5f5o7l();
import { openai } from './llmService';
import BaseService from './base/BaseService';
export class EmbeddingService extends BaseService {
  model =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().s[0]++, 'text-embedding-3-small');
  batchSize =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().s[1]++, 100); // OpenAI API batch limit
  maxRetries =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().s[2]++, 3);
  retryDelay =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().s[3]++, 1000); // ms
  constructor() {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[0]++;
    cov_2kiq5f5o7l().s[4]++;
    super('EmbeddingService');
  }
  /**
   * Check if embedding service is available
   */
  isEmbeddingServiceAvailable() {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[1]++;
    cov_2kiq5f5o7l().s[5]++;
    return !!openai;
  }
  /**
   * Generate embedding for a single curriculum expectation
   */
  async generateEmbedding(expectationId, text) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[2]++;
    cov_2kiq5f5o7l().s[6]++;
    if (!openai) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().b[0][0]++;
      cov_2kiq5f5o7l().s[7]++;
      this.logger.warn('OpenAI API key not configured, skipping embedding generation');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[8]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2kiq5f5o7l().b[0][1]++;
    }
    cov_2kiq5f5o7l().s[9]++;
    try {
      // Check if embedding already exists
      const existing =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[10]++, await this.prisma.curriculumExpectationEmbedding.findUnique({
        where: {
          expectationId
        }
      }));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[11]++;
      if (existing) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[1][0]++;
        cov_2kiq5f5o7l().s[12]++;
        this.logger.debug({
          expectationId
        }, 'Embedding already exists for expectation');
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[13]++;
        return {
          expectationId,
          embedding: existing.embedding,
          model: existing.model
        };
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[1][1]++;
      }
      const embedding =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[14]++, await this.generateEmbeddingVector(text));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[15]++;
      if (!embedding) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[2][0]++;
        cov_2kiq5f5o7l().s[16]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[2][1]++;
      }
      // Store in database
      cov_2kiq5f5o7l().s[17]++;
      await this.prisma.curriculumExpectationEmbedding.create({
        data: {
          expectationId,
          embedding,
          model: this.model
        }
      });
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[18]++;
      this.logger.info({
        expectationId,
        model: this.model
      }, 'Generated and stored embedding for expectation');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[19]++;
      return {
        expectationId,
        embedding,
        model: this.model
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[20]++;
      this.logger.error({
        error,
        expectationId
      }, 'Failed to generate embedding for expectation');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[21]++;
      return null;
    }
  }
  /**
   * Generate embeddings for multiple expectations in batches
   */
  async generateBatchEmbeddings(expectations) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[3]++;
    cov_2kiq5f5o7l().s[22]++;
    if (!openai) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().b[3][0]++;
      cov_2kiq5f5o7l().s[23]++;
      this.logger.warn('OpenAI API key not configured, skipping batch embedding generation');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[24]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2kiq5f5o7l().b[3][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[25]++, []);
    const batches =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[26]++, this.createEmbeddingBatches(expectations, this.batchSize));
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[27]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[28]++, 0); i < batches.length; i++) {
      const batch =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[29]++, batches[i]);
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[30]++;
      this.logger.info({
        batchIndex: i + 1,
        totalBatches: batches.length,
        batchSize: batch.length
      }, 'Processing embedding batch');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[31]++;
      try {
        const batchResults =
        /* istanbul ignore next */
        (cov_2kiq5f5o7l().s[32]++, await this.processBatch(batch));
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[33]++;
        results.push(...batchResults);
        // Add delay between batches to respect rate limits
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[34]++;
        if (i < batches.length - 1) {
          /* istanbul ignore next */
          cov_2kiq5f5o7l().b[4][0]++;
          cov_2kiq5f5o7l().s[35]++;
          await this.sleepEmbed(this.retryDelay);
        } else
        /* istanbul ignore next */
        {
          cov_2kiq5f5o7l().b[4][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[36]++;
        this.logger.error({
          error,
          batchIndex: i + 1
        }, 'Failed to process embedding batch');
      }
    }
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[37]++;
    return results;
  }
  /**
   * Get embedding for an expectation (from cache or generate new)
   */
  async getEmbedding(expectationId) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[4]++;
    cov_2kiq5f5o7l().s[38]++;
    try {
      const embedding =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[39]++, await this.prisma.curriculumExpectationEmbedding.findUnique({
        where: {
          expectationId
        }
      }));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[40]++;
      return embedding ?
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().b[5][0]++, embedding.embedding) :
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().b[5][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[41]++;
      this.logger.error({
        error,
        expectationId
      }, 'Failed to get embedding for expectation');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[42]++;
      return null;
    }
  }
  /**
   * Calculate cosine similarity between two embeddings
   */
  calculateSimilarity(embedding1, embedding2) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[5]++;
    cov_2kiq5f5o7l().s[43]++;
    if (embedding1.length !== embedding2.length) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().b[6][0]++;
      cov_2kiq5f5o7l().s[44]++;
      throw new Error('Embeddings must have the same length');
    } else
    /* istanbul ignore next */
    {
      cov_2kiq5f5o7l().b[6][1]++;
    }
    let dotProduct =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[45]++, 0);
    let norm1 =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[46]++, 0);
    let norm2 =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[47]++, 0);
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[48]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[49]++, 0); i < embedding1.length; i++) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[50]++;
      dotProduct += embedding1[i] * embedding2[i];
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[51]++;
      norm1 += embedding1[i] * embedding1[i];
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[52]++;
      norm2 += embedding2[i] * embedding2[i];
    }
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[53]++;
    norm1 = Math.sqrt(norm1);
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[54]++;
    norm2 = Math.sqrt(norm2);
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().b[8][0]++, norm1 === 0) ||
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().b[8][1]++, norm2 === 0)) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().b[7][0]++;
      cov_2kiq5f5o7l().s[56]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2kiq5f5o7l().b[7][1]++;
    }
    cov_2kiq5f5o7l().s[57]++;
    return dotProduct / (norm1 * norm2);
  }
  /**
   * Find similar expectations based on embedding similarity
   */
  async findSimilarExpectations(expectationId, threshold =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().b[9][0]++, 0.8), limit =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().b[10][0]++, 10)) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[6]++;
    cov_2kiq5f5o7l().s[58]++;
    try {
      const targetEmbedding =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[59]++, await this.getEmbedding(expectationId));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[60]++;
      if (!targetEmbedding) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[11][0]++;
        cov_2kiq5f5o7l().s[61]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[11][1]++;
      }
      // Get all embeddings with expectation data (optimized for current dataset size)
      const allEmbeddings =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[62]++, await this.prisma.curriculumExpectationEmbedding.findMany({
        where: {
          expectationId: {
            not: expectationId
          }
        },
        include: {
          expectation: true
        }
      }));
      const similarities =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[63]++, allEmbeddings.map(emb => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[7]++;
        cov_2kiq5f5o7l().s[64]++;
        return {
          expectationId: emb.expectationId,
          similarity: this.calculateSimilarity(targetEmbedding, emb.embedding),
          expectation: {
            id: emb.expectation.id,
            code: emb.expectation.code,
            description: emb.expectation.description,
            subject: emb.expectation.subject,
            grade: emb.expectation.grade
          }
        };
      }).filter(item => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[8]++;
        cov_2kiq5f5o7l().s[65]++;
        return item.similarity >= threshold;
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[9]++;
        cov_2kiq5f5o7l().s[66]++;
        return b.similarity - a.similarity;
      }).slice(0, limit));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[67]++;
      return similarities;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[68]++;
      this.logger.error({
        error,
        expectationId
      }, 'Failed to find similar expectations');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[69]++;
      return [];
    }
  }
  /**
   * Generate embeddings for all expectations missing them
   */
  async generateMissingEmbeddings(forceRegenerate =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().b[12][0]++, false)) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[10]++;
    cov_2kiq5f5o7l().s[70]++;
    try {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[71]++;
      if (!openai) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[13][0]++;
        cov_2kiq5f5o7l().s[72]++;
        this.logger.warn('OpenAI API key not configured');
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[73]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[13][1]++;
      }
      let expectations;
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[74]++;
      if (forceRegenerate) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[14][0]++;
        cov_2kiq5f5o7l().s[75]++;
        // Get all expectations
        expectations = await this.prisma.curriculumExpectation.findMany({
          select: {
            id: true,
            code: true,
            description: true
          }
        });
      } else {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[14][1]++;
        cov_2kiq5f5o7l().s[76]++;
        // Get expectations without embeddings
        expectations = await this.prisma.curriculumExpectation.findMany({
          where: {
            embedding: null
          },
          select: {
            id: true,
            code: true,
            description: true
          }
        });
      }
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[77]++;
      if (expectations.length === 0) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[15][0]++;
        cov_2kiq5f5o7l().s[78]++;
        this.logger.info('No expectations need embeddings');
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[79]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[15][1]++;
      }
      cov_2kiq5f5o7l().s[80]++;
      this.logger.info({
        count: expectations.length
      }, 'Found expectations needing embeddings');
      // Prepare data for batch processing
      const expectationData =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[81]++, expectations.map(expectation => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[11]++;
        cov_2kiq5f5o7l().s[82]++;
        return {
          id: expectation.id,
          text: `${expectation.code}: ${expectation.description}`
        };
      }));
      const results =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[83]++, await this.generateBatchEmbeddings(expectationData));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[84]++;
      this.logger.info({
        total: expectations.length,
        generated: results.length
      }, 'Finished generating embeddings');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[85]++;
      return results.length;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[86]++;
      this.logger.error({
        error
      }, 'Failed to generate missing embeddings');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[87]++;
      return 0;
    }
  }
  /**
   * Search expectations by text similarity
   */
  async searchExpectationsByText(searchText, limit =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().b[16][0]++, 20), threshold =
  /* istanbul ignore next */
  (cov_2kiq5f5o7l().b[17][0]++, 0.7)) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[12]++;
    cov_2kiq5f5o7l().s[88]++;
    try {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[89]++;
      if (!openai) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[18][0]++;
        cov_2kiq5f5o7l().s[90]++;
        this.logger.warn('OpenAI API key not configured');
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[91]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[18][1]++;
      }
      // Generate embedding for search text
      const searchEmbedding =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[92]++, await this.generateEmbeddingVector(searchText));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[93]++;
      if (!searchEmbedding) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[19][0]++;
        cov_2kiq5f5o7l().s[94]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[19][1]++;
      }
      // Get all embeddings with expectation data
      const allEmbeddings =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[95]++, await this.prisma.curriculumExpectationEmbedding.findMany({
        include: {
          expectation: true
        }
      }));
      const similarities =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[96]++, allEmbeddings.map(emb => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[13]++;
        cov_2kiq5f5o7l().s[97]++;
        return {
          expectationId: emb.expectationId,
          similarity: this.calculateSimilarity(searchEmbedding, emb.embedding),
          expectation: {
            id: emb.expectation.id,
            code: emb.expectation.code,
            description: emb.expectation.description,
            subject: emb.expectation.subject,
            grade: emb.expectation.grade
          }
        };
      }).filter(item => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[14]++;
        cov_2kiq5f5o7l().s[98]++;
        return item.similarity >= threshold;
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[15]++;
        cov_2kiq5f5o7l().s[99]++;
        return b.similarity - a.similarity;
      }).slice(0, limit));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[100]++;
      return similarities;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[101]++;
      this.logger.error({
        error,
        searchText
      }, 'Failed to search expectations by text');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[102]++;
      return [];
    }
  }
  /**
   * Get or create embedding for a specific expectation
   */
  async getOrCreateExpectationEmbedding(expectationId) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[16]++;
    cov_2kiq5f5o7l().s[103]++;
    try {
      // Check if embedding exists
      const existing =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[104]++, await this.prisma.curriculumExpectationEmbedding.findUnique({
        where: {
          expectationId
        }
      }));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[105]++;
      if (existing) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[20][0]++;
        cov_2kiq5f5o7l().s[106]++;
        return {
          expectationId,
          embedding: existing.embedding,
          model: existing.model
        };
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[20][1]++;
      }
      // Get expectation details
      const expectation =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[107]++, await this.prisma.curriculumExpectation.findUnique({
        where: {
          id: expectationId
        },
        select: {
          code: true,
          description: true
        }
      }));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[108]++;
      if (!expectation) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().b[21][0]++;
        cov_2kiq5f5o7l().s[109]++;
        throw new Error(`Expectation ${expectationId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_2kiq5f5o7l().b[21][1]++;
      }
      // Generate embedding
      const text =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[110]++, `${expectation.code}: ${expectation.description}`);
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[111]++;
      return await this.generateEmbedding(expectationId, text);
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[112]++;
      this.logger.error({
        error,
        expectationId
      }, 'Failed to get or create expectation embedding');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[113]++;
      return null;
    }
  }
  /**
   * Cleanup old embeddings for a specific model
   */
  async cleanupOldEmbeddings(model) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[17]++;
    cov_2kiq5f5o7l().s[114]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[115]++, await this.prisma.curriculumExpectationEmbedding.deleteMany({
        where: {
          model: {
            not: model
          }
        }
      }));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[116]++;
      this.logger.info({
        deletedCount: result.count,
        currentModel: model
      }, 'Cleaned up old embeddings');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[117]++;
      return result.count;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[118]++;
      this.logger.error({
        error,
        model
      }, 'Failed to cleanup old embeddings');
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[119]++;
      return 0;
    }
  }
  // Private helper methods
  async generateEmbeddingVector(text) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[18]++;
    cov_2kiq5f5o7l().s[120]++;
    if (!openai) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().b[22][0]++;
      cov_2kiq5f5o7l().s[121]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2kiq5f5o7l().b[22][1]++;
    }
    cov_2kiq5f5o7l().s[122]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[123]++, 1); attempt <= this.maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[124]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_2kiq5f5o7l().s[125]++, await openai.embeddings.create({
          model: this.model,
          input: text,
          encoding_format: 'float'
        }));
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[126]++;
        if (response.usage?.total_tokens) {
          /* istanbul ignore next */
          cov_2kiq5f5o7l().b[23][0]++;
          cov_2kiq5f5o7l().s[127]++;
          this.logger.debug({
            tokens: response.usage.total_tokens
          }, 'Embedding tokens used');
        } else
        /* istanbul ignore next */
        {
          cov_2kiq5f5o7l().b[23][1]++;
        }
        cov_2kiq5f5o7l().s[128]++;
        return response.data[0].embedding;
      } catch (error) {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[129]++;
        this.logger.warn({
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kiq5f5o7l().b[24][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kiq5f5o7l().b[24][1]++, String(error)),
          attempt,
          maxRetries: this.maxRetries
        }, 'Embedding generation attempt failed');
        /* istanbul ignore next */
        cov_2kiq5f5o7l().s[130]++;
        if (attempt === this.maxRetries) {
          /* istanbul ignore next */
          cov_2kiq5f5o7l().b[25][0]++;
          cov_2kiq5f5o7l().s[131]++;
          this.logger.error({
            error
          }, 'All embedding generation attempts failed');
          /* istanbul ignore next */
          cov_2kiq5f5o7l().s[132]++;
          return null;
        } else
        /* istanbul ignore next */
        {
          cov_2kiq5f5o7l().b[25][1]++;
        }
        // Exponential backoff
        cov_2kiq5f5o7l().s[133]++;
        await this.sleepEmbed(this.retryDelay * Math.pow(2, attempt - 1));
      }
    }
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[134]++;
    return null;
  }
  async processBatch(batch) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[19]++;
    const results =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[135]++, []);
    // Check for existing embeddings
    const existingEmbeddings =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[136]++, await this.prisma.curriculumExpectationEmbedding.findMany({
      where: {
        expectationId: {
          in: batch.map(item => {
            /* istanbul ignore next */
            cov_2kiq5f5o7l().f[20]++;
            cov_2kiq5f5o7l().s[137]++;
            return item.id;
          })
        }
      }
    }));
    const existingIds =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[138]++, new Set(existingEmbeddings.map(emb => {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().f[21]++;
      cov_2kiq5f5o7l().s[139]++;
      return emb.expectationId;
    })));
    const newItems =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[140]++, batch.filter(item => {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().f[22]++;
      cov_2kiq5f5o7l().s[141]++;
      return !existingIds.has(item.id);
    }));
    // Add existing embeddings to results
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[142]++;
    for (const existing of existingEmbeddings) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[143]++;
      results.push({
        expectationId: existing.expectationId,
        embedding: existing.embedding,
        model: existing.model
      });
    }
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[144]++;
    if (newItems.length === 0) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().b[26][0]++;
      cov_2kiq5f5o7l().s[145]++;
      return results;
    } else
    /* istanbul ignore next */
    {
      cov_2kiq5f5o7l().b[26][1]++;
    }
    // Generate embeddings for new items
    cov_2kiq5f5o7l().s[146]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[147]++, await openai.embeddings.create({
        model: this.model,
        input: newItems.map(item => {
          /* istanbul ignore next */
          cov_2kiq5f5o7l().f[23]++;
          cov_2kiq5f5o7l().s[148]++;
          return item.text;
        }),
        encoding_format: 'float'
      }));
      // Store new embeddings
      const embeddings =
      /* istanbul ignore next */
      (cov_2kiq5f5o7l().s[149]++, response.data.map((embedding, index) => {
        /* istanbul ignore next */
        cov_2kiq5f5o7l().f[24]++;
        cov_2kiq5f5o7l().s[150]++;
        return {
          expectationId: newItems[index].id,
          embedding: embedding.embedding,
          model: this.model
        };
      }));
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[151]++;
      await this.prisma.curriculumExpectationEmbedding.createMany({
        data: embeddings
      });
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[152]++;
      results.push(...embeddings);
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[153]++;
      this.logger.info({
        newEmbeddings: newItems.length,
        totalTokens: response.usage?.total_tokens
      }, 'Generated batch embeddings');
    } catch (error) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[154]++;
      this.logger.error({
        error,
        batchSize: newItems.length
      }, 'Failed to generate batch embeddings');
    }
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[155]++;
    return results;
  }
  createEmbeddingBatches(items, batchSize) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[25]++;
    const batches =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[156]++, []);
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[157]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2kiq5f5o7l().s[158]++, 0); i < items.length; i += batchSize) {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().s[159]++;
      batches.push(items.slice(i, i + batchSize));
    }
    /* istanbul ignore next */
    cov_2kiq5f5o7l().s[160]++;
    return batches;
  }
  sleepEmbed(ms) {
    /* istanbul ignore next */
    cov_2kiq5f5o7l().f[26]++;
    cov_2kiq5f5o7l().s[161]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_2kiq5f5o7l().f[27]++;
      cov_2kiq5f5o7l().s[162]++;
      return setTimeout(resolve, ms);
    });
  }
}
// Export singleton instance
export const embeddingService =
/* istanbul ignore next */
(cov_2kiq5f5o7l().s[163]++, new EmbeddingService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,