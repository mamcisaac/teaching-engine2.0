{"version":3,"names":["cov_2kiq5f5o7l","actualCoverage","openai","BaseService","EmbeddingService","model","s","batchSize","maxRetries","retryDelay","constructor","f","isEmbeddingServiceAvailable","generateEmbedding","expectationId","text","b","logger","warn","existing","prisma","curriculumExpectationEmbedding","findUnique","where","debug","embedding","generateEmbeddingVector","create","data","info","error","generateBatchEmbeddings","expectations","results","batches","createEmbeddingBatches","i","length","batch","batchIndex","totalBatches","batchResults","processBatch","push","sleepEmbed","getEmbedding","calculateSimilarity","embedding1","embedding2","Error","dotProduct","norm1","norm2","Math","sqrt","findSimilarExpectations","threshold","limit","targetEmbedding","allEmbeddings","findMany","not","include","expectation","similarities","map","emb","similarity","id","code","description","subject","grade","filter","item","sort","a","slice","generateMissingEmbeddings","forceRegenerate","curriculumExpectation","select","count","expectationData","total","generated","searchExpectationsByText","searchText","searchEmbedding","getOrCreateExpectationEmbedding","cleanupOldEmbeddings","result","deleteMany","deletedCount","currentModel","attempt","response","embeddings","input","encoding_format","usage","total_tokens","tokens","message","String","pow","existingEmbeddings","in","existingIds","Set","newItems","has","index","createMany","newEmbeddings","totalTokens","items","ms","Promise","resolve","setTimeout","embeddingService"],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/src/services/embeddingService.ts"],"sourcesContent":["import { openai } from './llmService';\nimport BaseService from './base/BaseService';\n\nexport interface EmbeddingResult {\n  expectationId: string;\n  embedding: number[];\n  model: string;\n}\n\nexport class EmbeddingService extends BaseService {\n  private readonly model = 'text-embedding-3-small';\n  private readonly batchSize = 100; // OpenAI API batch limit\n  private readonly maxRetries = 3;\n  private readonly retryDelay = 1000; // ms\n\n  constructor() {\n    super('EmbeddingService');\n  }\n\n  /**\n   * Check if embedding service is available\n   */\n  isEmbeddingServiceAvailable(): boolean {\n    return !!openai;\n  }\n\n  /**\n   * Generate embedding for a single curriculum expectation\n   */\n  async generateEmbedding(expectationId: string, text: string): Promise<EmbeddingResult | null> {\n    if (!openai) {\n      this.logger.warn('OpenAI API key not configured, skipping embedding generation');\n      return null;\n    }\n\n    try {\n      // Check if embedding already exists\n      const existing = await this.prisma.curriculumExpectationEmbedding.findUnique({\n        where: { expectationId },\n      });\n\n      if (existing) {\n        this.logger.debug({ expectationId }, 'Embedding already exists for expectation');\n        return {\n          expectationId,\n          embedding: existing.embedding as number[],\n          model: existing.model,\n        };\n      }\n\n      const embedding = await this.generateEmbeddingVector(text);\n      if (!embedding) return null;\n\n      // Store in database\n      await this.prisma.curriculumExpectationEmbedding.create({\n        data: {\n          expectationId,\n          embedding,\n          model: this.model,\n        },\n      });\n\n      this.logger.info(\n        { expectationId, model: this.model },\n        'Generated and stored embedding for expectation',\n      );\n\n      return {\n        expectationId,\n        embedding,\n        model: this.model,\n      };\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to generate embedding for expectation');\n      return null;\n    }\n  }\n\n  /**\n   * Generate embeddings for multiple expectations in batches\n   */\n  async generateBatchEmbeddings(\n    expectations: { id: string; text: string }[],\n  ): Promise<EmbeddingResult[]> {\n    if (!openai) {\n      this.logger.warn('OpenAI API key not configured, skipping batch embedding generation');\n      return [];\n    }\n\n    const results: EmbeddingResult[] = [];\n    const batches = this.createEmbeddingBatches(expectations, this.batchSize);\n\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      this.logger.info(\n        { batchIndex: i + 1, totalBatches: batches.length, batchSize: batch.length },\n        'Processing embedding batch',\n      );\n\n      try {\n        const batchResults = await this.processBatch(batch);\n        results.push(...batchResults);\n\n        // Add delay between batches to respect rate limits\n        if (i < batches.length - 1) {\n          await this.sleepEmbed(this.retryDelay);\n        }\n      } catch (error) {\n        this.logger.error({ error, batchIndex: i + 1 }, 'Failed to process embedding batch');\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get embedding for an expectation (from cache or generate new)\n   */\n  async getEmbedding(expectationId: string): Promise<number[] | null> {\n    try {\n      const embedding = await this.prisma.curriculumExpectationEmbedding.findUnique({\n        where: { expectationId },\n      });\n\n      return embedding ? (embedding.embedding as number[]) : null;\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to get embedding for expectation');\n      return null;\n    }\n  }\n\n  /**\n   * Calculate cosine similarity between two embeddings\n   */\n  calculateSimilarity(embedding1: number[], embedding2: number[]): number {\n    if (embedding1.length !== embedding2.length) {\n      throw new Error('Embeddings must have the same length');\n    }\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < embedding1.length; i++) {\n      dotProduct += embedding1[i] * embedding2[i];\n      norm1 += embedding1[i] * embedding1[i];\n      norm2 += embedding2[i] * embedding2[i];\n    }\n\n    norm1 = Math.sqrt(norm1);\n    norm2 = Math.sqrt(norm2);\n\n    if (norm1 === 0 || norm2 === 0) {\n      return 0;\n    }\n\n    return dotProduct / (norm1 * norm2);\n  }\n\n  /**\n   * Find similar expectations based on embedding similarity\n   */\n  async findSimilarExpectations(\n    expectationId: string,\n    threshold: number = 0.8,\n    limit: number = 10,\n  ): Promise<\n    {\n      expectationId: string;\n      similarity: number;\n      expectation?: {\n        id: string;\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n      };\n    }[]\n  > {\n    try {\n      const targetEmbedding = await this.getEmbedding(expectationId);\n      if (!targetEmbedding) return [];\n\n      // Get all embeddings with expectation data (optimized for current dataset size)\n      const allEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n        where: {\n          expectationId: { not: expectationId },\n        },\n        include: {\n          expectation: true,\n        },\n      });\n\n      const similarities = allEmbeddings\n        .map((emb) => ({\n          expectationId: emb.expectationId,\n          similarity: this.calculateSimilarity(targetEmbedding, emb.embedding as number[]),\n          expectation: {\n            id: emb.expectation.id,\n            code: emb.expectation.code,\n            description: emb.expectation.description,\n            subject: emb.expectation.subject,\n            grade: emb.expectation.grade,\n          },\n        }))\n        .filter((item) => item.similarity >= threshold)\n        .sort((a, b) => b.similarity - a.similarity)\n        .slice(0, limit);\n\n      return similarities;\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to find similar expectations');\n      return [];\n    }\n  }\n\n  /**\n   * Generate embeddings for all expectations missing them\n   */\n  async generateMissingEmbeddings(forceRegenerate: boolean = false): Promise<number> {\n    try {\n      if (!openai) {\n        this.logger.warn('OpenAI API key not configured');\n        return 0;\n      }\n\n      let expectations;\n      if (forceRegenerate) {\n        // Get all expectations\n        expectations = await this.prisma.curriculumExpectation.findMany({\n          select: { id: true, code: true, description: true },\n        });\n      } else {\n        // Get expectations without embeddings\n        expectations = await this.prisma.curriculumExpectation.findMany({\n          where: {\n            embedding: null,\n          },\n          select: { id: true, code: true, description: true },\n        });\n      }\n\n      if (expectations.length === 0) {\n        this.logger.info('No expectations need embeddings');\n        return 0;\n      }\n\n      this.logger.info({ count: expectations.length }, 'Found expectations needing embeddings');\n\n      // Prepare data for batch processing\n      const expectationData = expectations.map((expectation) => ({\n        id: expectation.id,\n        text: `${expectation.code}: ${expectation.description}`,\n      }));\n\n      const results = await this.generateBatchEmbeddings(expectationData);\n\n      this.logger.info(\n        { total: expectations.length, generated: results.length },\n        'Finished generating embeddings',\n      );\n\n      return results.length;\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to generate missing embeddings');\n      return 0;\n    }\n  }\n\n  /**\n   * Search expectations by text similarity\n   */\n  async searchExpectationsByText(\n    searchText: string,\n    limit: number = 20,\n    threshold: number = 0.7,\n  ): Promise<\n    {\n      expectationId: string;\n      similarity: number;\n      expectation: {\n        id: string;\n        code: string;\n        description: string;\n        subject: string;\n        grade: number;\n      };\n    }[]\n  > {\n    try {\n      if (!openai) {\n        this.logger.warn('OpenAI API key not configured');\n        return [];\n      }\n\n      // Generate embedding for search text\n      const searchEmbedding = await this.generateEmbeddingVector(searchText);\n      if (!searchEmbedding) return [];\n\n      // Get all embeddings with expectation data\n      const allEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n        include: {\n          expectation: true,\n        },\n      });\n\n      const similarities = allEmbeddings\n        .map((emb) => ({\n          expectationId: emb.expectationId,\n          similarity: this.calculateSimilarity(searchEmbedding, emb.embedding as number[]),\n          expectation: {\n            id: emb.expectation.id,\n            code: emb.expectation.code,\n            description: emb.expectation.description,\n            subject: emb.expectation.subject,\n            grade: emb.expectation.grade,\n          },\n        }))\n        .filter((item) => item.similarity >= threshold)\n        .sort((a, b) => b.similarity - a.similarity)\n        .slice(0, limit);\n\n      return similarities;\n    } catch (error) {\n      this.logger.error({ error, searchText }, 'Failed to search expectations by text');\n      return [];\n    }\n  }\n\n  /**\n   * Get or create embedding for a specific expectation\n   */\n  async getOrCreateExpectationEmbedding(expectationId: string): Promise<EmbeddingResult | null> {\n    try {\n      // Check if embedding exists\n      const existing = await this.prisma.curriculumExpectationEmbedding.findUnique({\n        where: { expectationId },\n      });\n\n      if (existing) {\n        return {\n          expectationId,\n          embedding: existing.embedding as number[],\n          model: existing.model,\n        };\n      }\n\n      // Get expectation details\n      const expectation = await this.prisma.curriculumExpectation.findUnique({\n        where: { id: expectationId },\n        select: { code: true, description: true },\n      });\n\n      if (!expectation) {\n        throw new Error(`Expectation ${expectationId} not found`);\n      }\n\n      // Generate embedding\n      const text = `${expectation.code}: ${expectation.description}`;\n      return await this.generateEmbedding(expectationId, text);\n    } catch (error) {\n      this.logger.error({ error, expectationId }, 'Failed to get or create expectation embedding');\n      return null;\n    }\n  }\n\n  /**\n   * Cleanup old embeddings for a specific model\n   */\n  async cleanupOldEmbeddings(model: string): Promise<number> {\n    try {\n      const result = await this.prisma.curriculumExpectationEmbedding.deleteMany({\n        where: { model: { not: model } },\n      });\n\n      this.logger.info(\n        { deletedCount: result.count, currentModel: model },\n        'Cleaned up old embeddings',\n      );\n\n      return result.count;\n    } catch (error) {\n      this.logger.error({ error, model }, 'Failed to cleanup old embeddings');\n      return 0;\n    }\n  }\n\n  // Private helper methods\n\n  async generateEmbeddingVector(text: string): Promise<number[] | null> {\n    if (!openai) return null;\n\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\n      try {\n        const response = await openai.embeddings.create({\n          model: this.model,\n          input: text,\n          encoding_format: 'float',\n        });\n\n        if (response.usage?.total_tokens) {\n          this.logger.debug({ tokens: response.usage.total_tokens }, 'Embedding tokens used');\n        }\n\n        return response.data[0].embedding;\n      } catch (error: unknown) {\n        this.logger.warn(\n          {\n            error: error instanceof Error ? error.message : String(error),\n            attempt,\n            maxRetries: this.maxRetries,\n          },\n          'Embedding generation attempt failed',\n        );\n\n        if (attempt === this.maxRetries) {\n          this.logger.error({ error }, 'All embedding generation attempts failed');\n          return null;\n        }\n\n        // Exponential backoff\n        await this.sleepEmbed(this.retryDelay * Math.pow(2, attempt - 1));\n      }\n    }\n\n    return null;\n  }\n\n  private async processBatch(batch: { id: string; text: string }[]): Promise<EmbeddingResult[]> {\n    const results: EmbeddingResult[] = [];\n\n    // Check for existing embeddings\n    const existingEmbeddings = await this.prisma.curriculumExpectationEmbedding.findMany({\n      where: {\n        expectationId: { in: batch.map((item) => item.id) },\n      },\n    });\n\n    const existingIds = new Set(existingEmbeddings.map((emb) => emb.expectationId));\n    const newItems = batch.filter((item) => !existingIds.has(item.id));\n\n    // Add existing embeddings to results\n    for (const existing of existingEmbeddings) {\n      results.push({\n        expectationId: existing.expectationId,\n        embedding: existing.embedding as number[],\n        model: existing.model,\n      });\n    }\n\n    if (newItems.length === 0) {\n      return results;\n    }\n\n    // Generate embeddings for new items\n    try {\n      const response = await openai!.embeddings.create({\n        model: this.model,\n        input: newItems.map((item) => item.text),\n        encoding_format: 'float',\n      });\n\n      // Store new embeddings\n      const embeddings = response.data.map((embedding, index) => ({\n        expectationId: newItems[index].id,\n        embedding: embedding.embedding,\n        model: this.model,\n      }));\n\n      await this.prisma.curriculumExpectationEmbedding.createMany({\n        data: embeddings,\n      });\n\n      results.push(...embeddings);\n\n      this.logger.info(\n        { newEmbeddings: newItems.length, totalTokens: response.usage?.total_tokens },\n        'Generated batch embeddings',\n      );\n    } catch (error) {\n      this.logger.error(\n        { error, batchSize: newItems.length },\n        'Failed to generate batch embeddings',\n      );\n    }\n\n    return results;\n  }\n\n  private createEmbeddingBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    return batches;\n  }\n\n  private sleepEmbed(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const embeddingService = new EmbeddingService();\n"],"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","ignoreList":[]}