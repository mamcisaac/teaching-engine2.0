{"file":"/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/email-service.test.ts","mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAC5F,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AACzF,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AACnF,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AACtC,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,iCAAiC,CAAC;AAErF,wCAAwC;AACxC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,IAAI,gBAAwD,CAAC;IAC7D,IAAI,YAAoB,CAAC;IACzB,IAAI,QAKH,CAAC;IACF,IAAI,IAA+D,CAAC;IACpE,8BAA8B;IAC9B,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;IAE9B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;QACnB,gBAAgB,GAAG,mBAAmB,EAAE,CAAC;QAEzC,kDAAkD;QAClD,eAAe,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE;YAC5D,MAAM,gBAAgB,CAAC,SAAS,CAC9B,EAAE,EACF,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,UAAU;gBACR,CAAC,CAAC;oBACE,QAAQ,EAAE,UAAU,CAAC,QAAQ;oBAC7B,OAAO,EAAE,UAAU,CAAC,OAAO;iBAC5B;gBACH,CAAC,CAAC,SAAS,CACd,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,mBAAmB;QACnB,MAAM,EAAE,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,QAAQ,GAAG;YACT,KAAK,EAAE,WAAW,EAAE,cAAc;YAClC,QAAQ,EAAE,YAAY,EAAE,EAAE;YAC1B,IAAI,EAAE,WAAW,EAAE,EAAE;YACrB,IAAI,EAAE,SAAS;SAChB,CAAC;QAEF,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAChE,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,IAAI,EAAE;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,cAAc;gBACxB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,iBAAiB,EAAE,IAAI;aACxB;SACF,CAAC,CAAC;QAEH,iBAAiB;QACjB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;YAClD,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;SAC5B,CAAC,CAAC;QAEH,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACnE,iBAAiB,EAAE,CAAC;YACpB,MAAM,qBAAqB,EAAE,CAAC;QAChC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAChD,CAAC;gBAAS,CAAC;YACT,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,yBAAyB,GAAG,KAAK,IAAI,EAAE;QAC3C,MAAM,gBAAgB,CAAC,WAAW,EAAE,CAAC;QAErC,qBAAqB;QACrB,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAChE,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,QAAQ,EAAE,cAAc;oBACxB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,iBAAiB,EAAE,IAAI;iBACxB;aACF,CAAC,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,yBAAyB,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,IAAI,CAAC,kGAAkG,EAAE,KAAK,IAAI,EAAE;YACrH,MAAM,yBAAyB,EAAE,CAAC;YAClC,2CAA2C;YAC3C,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC3C,IAAI,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;aACvE,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC3C,IAAI,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;aACvE,CAAC,CAAC;YAEH,gEAAgE;YAChE,MAAM,YAAY,GAAG;gBACnB,iBAAiB,EAAE;gBACnB,iBAAiB,EAAE;aACpB,CAAC;YAEF,oBAAoB;YACpB,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;gBAChD,IAAI,EAAE;oBACJ,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,KAAK,EAAE,kCAAkC;oBACzC,OAAO,EAAE,sCAAsC;oBAC/C,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC;oBACtC,QAAQ,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAChC,MAAM,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAC9B,IAAI,EAAE,UAAU;oBAChB,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE,oFAAoF;yBAC9F;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,kBAAkB;YAClB,MAAM,OAAO,GAAG,MAAM,IAAI;iBACvB,IAAI,CAAC,oBAAoB,UAAU,CAAC,EAAE,OAAO,CAAC;iBAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,YAAY,EAAE,CAAC,CAAC;YAElD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAElC,0BAA0B;YAC1B,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,oBAAoB;YACpB,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YAEjC,kBAAkB,CAAC,UAAW,EAAE;gBAC9B,OAAO,EAAE,kCAAkC;gBAC3C,IAAI,EAAE,qCAAqC;aAC5C,CAAC,CAAC;YAEH,wBAAwB;YACxB,MAAM,CAAC,UAAW,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,UAAU,GAAG,UAAW,CAAC,WAAY,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACnD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,6FAA6F,EAAE,KAAK,IAAI,EAAE;YAChH,gDAAgD;YAChD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;gBAChD,IAAI,EAAE;oBACJ,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,KAAK,EAAE,kBAAkB;oBACzB,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,EAAE;oBACd,QAAQ,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAChC,MAAM,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAC9B,IAAI,EAAE,UAAU;oBAChB,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;iBAChE;aACF,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,MAAM,IAAI;iBACvB,IAAI,CAAC,oBAAoB,UAAU,CAAC,EAAE,OAAO,CAAC;iBAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,YAAY,EAAE,CAAC,CAAC;YAElD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAElC,6BAA6B;YAC7B,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,yFAAyF,EAAE,KAAK,IAAI,EAAE;YAC5G,gEAAgE;YAChE,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC/C,IAAI,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;aAC7E,CAAC,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBACjD,IAAI,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;aAC/E,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;gBAChD,IAAI,EAAE;oBACJ,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,KAAK,EAAE,iBAAiB;oBACxB,OAAO,EAAE,kBAAkB;oBAC3B,UAAU,EAAE,CAAC,YAAY,CAAC,EAAE,EAAE,cAAc,CAAC,EAAE,CAAC;oBAChD,QAAQ,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAChC,MAAM,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAC9B,IAAI,EAAE,UAAU;oBAChB,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;iBAChE;aACF,CAAC,CAAC;YAEH,gDAAgD;YAChD,MAAM,OAAO,GAAG,MAAM,IAAI;iBACvB,IAAI,CAAC,oBAAoB,UAAU,CAAC,EAAE,OAAO,CAAC;iBAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,YAAY,EAAE,CAAC,CAAC;YAElD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjC,kDAAkD;YAClD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,UAAU,GAAG,CAAC,iBAAiB,EAAE,EAAE,iBAAiB,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC;YAEnF,MAAM,OAAO,GAAG,iBAAiB,CAAC;YAClC,MAAM,IAAI,GAAG,mCAAmC,CAAC;YAEjD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAEhF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAEtC,8BAA8B;YAC9B,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC5B,kBAAkB,CAAC,KAAM,EAAE;oBACzB,OAAO;oBACP,IAAI;iBACL,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,eAAe,GAAG,CAAC,iBAAiB,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACnE,MAAM,iBAAiB,GAAG,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;YACjE,MAAM,aAAa,GAAG,CAAC,GAAG,eAAe,EAAE,GAAG,iBAAiB,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,cAAc,CAClD,aAAa,EACb,WAAW,EACX,cAAc,CACf,CAAC;YAEF,+CAA+C;YAC/C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,YAAY,CAAC;YAC7B,MAAM,IAAI,GAAG,8BAA8B,CAAC;YAE5C,6CAA6C;YAC7C,MAAM,MAAM,CACV,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC,CACjF,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAEzB,mCAAmC;YACnC,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/B,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;gBAC5B,EAAE,EAAE,CAAC,SAAS,CAAC;gBACf,OAAO;gBACP,IAAI;aACL,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH;;;;WAIG;QACH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,wCAAwC;YACxC,MAAM,YAAY,GAAG,gBAAgB,CAAC,SAAS,CAAC;YAChD,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAExF,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YAEtC,MAAM,MAAM,CACV,gBAAgB,CAAC,kBAAkB,CACjC,SAAS,EACT,WAAW,EACX,aAAa,EACb,SAAS,EACT,CAAC,EACD,EAAE,CACH,CACF,CAAC,OAAO,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC;YAE3D,4BAA4B;YAC5B,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,iBAAiB,CAAC;YAClC,MAAM,IAAI,GAAG;;;;;;gDAM6B,CAAC;YAE3C,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YACjG,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC9C,IAAI,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;aAC5E,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG;;;;;;;;;;;OAWnB,CAAC;YAEF,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;gBAChD,IAAI,EAAE;oBACJ,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,KAAK,EAAE,iBAAiB;oBACxB,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC;oBAC5B,QAAQ,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAChC,MAAM,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;oBAC9B,IAAI,EAAE,UAAU;oBAChB,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;iBACtD;aACF,CAAC,CAAC;YAEH,MAAM,IAAI;iBACP,IAAI,CAAC,oBAAoB,UAAU,CAAC,EAAE,OAAO,CAAC;iBAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,YAAY,EAAE,CAAC,CAAC;YAElD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YAChE,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,kCAAkC,CAAC;YACnD,MAAM,IAAI,GAAG,sEAAsE,CAAC;YAEpF,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,UAAU,CAAC;YAC3B,MAAM,IAAI,GAAG,2BAA2B,CAAC;YAEzC,gDAAgD;YAChD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAC5B,qEAAqE,CACtE,CAAC;YACF,MAAM,UAAU,GAAG;gBACjB,QAAQ,EAAE,mBAAmB;gBAC7B,OAAO,EAAE,UAAU;aACpB,CAAC;YAEF,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAElF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE1C,MAAM,kBAAkB,GAAG,KAAK,CAAC,WAAY,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC9D,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACvD,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,2BAA2B,CAAC;YAC5C,MAAM,IAAI,GAAG,iCAAiC,CAAC;YAE/C,gFAAgF;YAChF,yFAAyF;YACzF,MAAM,WAAW,GAAG;gBAClB,QAAQ,EAAE,eAAe;gBACzB,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;aACtC,CAAC;YAEF,MAAM,WAAW,GAAG;gBAClB,QAAQ,EAAE,eAAe;gBACzB,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;aACtC,CAAC;YAEF,yCAAyC;YACzC,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,GAAG,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;YAE1F,2CAA2C;YAC3C,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,GAAG,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;YAE1F,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,8CAA8C;YAC9C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YAE3D,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,eAAe,CAAC;YAChC,MAAM,IAAI,GAAG,8BAA8B,CAAC;YAE5C,iDAAiD;YACjD,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACnF,MAAM,UAAU,GAAG;gBACjB,QAAQ,EAAE,iBAAiB;gBAC3B,OAAO,EAAE,aAAa;aACvB,CAAC;YAEF,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAElF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,kBAAkB,GAAG,KAAK,CAAC,WAAY,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,SAAS,GAAG,iBAAiB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,uBAAuB,CAAC;YACxC,MAAM,IAAI,GAAG,6BAA6B,CAAC;YAE3C,MAAM,UAAU,GAAG;gBACjB,QAAQ,EAAE,gBAAgB;gBAC1B,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,eAAe;aAC1C,CAAC;YAEF,MAAM,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAElF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,WAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/michaelmcisaac/GitHub/teaching-engine2.0/server/tests/integration/email-service.test.ts"],"sourcesContent":["import { describe, beforeAll, afterAll, beforeEach, it, expect, jest } from '@jest/globals';\nimport { authRequest } from '../test-auth-helper';\nimport { prisma } from '../../src/prisma';\nimport { getTestEmailService, resetTestEmailService } from '../helpers/testEmailService';\nimport { generateTestEmail, expectEmailContent } from '../helpers/emailTestHelper';\nimport { randomBytes } from 'crypto';\nimport bcrypt from 'bcryptjs';\nimport { app } from '../../src/index';\nimport { setEmailHandler, clearEmailHandler } from '../../src/services/emailService';\n\n// Increase test timeout for email tests\njest.setTimeout(60000);\n\ndescribe('Email Service Integration Tests', () => {\n  let testEmailService: ReturnType<typeof getTestEmailService>;\n  let teacherToken: string;\n  let testUser: {\n    email: string;\n    password: string;\n    name: string;\n    role: 'teacher';\n  };\n  let user: { id: number; email: string; name: string; role: string };\n  // prisma is imported directly\n  const auth = authRequest(app);\n\n  beforeAll(async () => {\n    await auth.setup();\n    testEmailService = getTestEmailService();\n\n    // Set up email handler to capture emails in tests\n    setEmailHandler(async (to, subject, text, html, attachment) => {\n      await testEmailService.sendEmail(\n        to,\n        subject,\n        text,\n        html,\n        attachment\n          ? {\n              filename: attachment.filename,\n              content: attachment.content,\n            }\n          : undefined,\n      );\n    });\n\n    // Create test user\n    const id = randomBytes(4).toString('hex');\n    testUser = {\n      email: `teacher-${id}@example.com`,\n      password: `password-${id}`,\n      name: `Teacher ${id}`,\n      role: 'teacher',\n    };\n\n    const hashedPassword = await bcrypt.hash(testUser.password, 10);\n    user = await prisma.user.create({\n      data: {\n        email: testUser.email,\n        password: hashedPassword,\n        name: testUser.name,\n        role: testUser.role,\n        preferredLanguage: 'en',\n      },\n    });\n\n    // Get auth token\n    const loginRes = await auth.post('/api/login').send({\n      email: testUser.email,\n      password: testUser.password,\n    });\n\n    teacherToken = loginRes.body.token;\n  });\n\n  afterAll(async () => {\n    try {\n      await prisma.user.deleteMany({ where: { email: testUser.email } });\n      clearEmailHandler();\n      await resetTestEmailService();\n    } catch (error) {\n      console.error('Error during cleanup:', error);\n    } finally {\n      await prisma.$disconnect();\n    }\n  });\n\n  const clearEmailsAndPrepareTest = async () => {\n    await testEmailService.clearEmails();\n    \n    // Ensure user exists\n    const currentUser = await prisma.user.findUnique({ where: { id: user.id } });\n    if (!currentUser) {\n      const hashedPassword = await bcrypt.hash(testUser.password, 10);\n      await prisma.user.create({\n        data: {\n          id: user.id,\n          email: testUser.email,\n          password: hashedPassword,\n          name: testUser.name,\n          role: testUser.role,\n          preferredLanguage: 'en',\n        },\n      });\n    }\n    \n    return user;\n  };\n\n  beforeEach(async () => {\n    await clearEmailsAndPrepareTest();\n  });\n\n  describe('Newsletter Email Tests', () => {\n    it.skip('sends newsletter with PDF attachment to parent contacts - DISABLED (ParentContact model removed)', async () => {\n      await clearEmailsAndPrepareTest();\n      // Create test students and parent contacts\n      const student1 = await prisma.student.create({\n        data: { firstName: 'John', lastName: 'Jr', grade: 1, userId: user.id },\n      });\n      const student2 = await prisma.student.create({\n        data: { firstName: 'Jane', lastName: 'Jr', grade: 1, userId: user.id },\n      });\n\n      // Create parent emails for testing (using test email addresses)\n      const parentEmails = [\n        generateTestEmail(),\n        generateTestEmail(),\n      ];\n\n      // Create newsletter\n      const newsletter = await prisma.newsletter.create({\n        data: {\n          userId: user.id,\n          title: 'Weekly Newsletter - Test Edition',\n          titleFr: 'Bulletin hebdomadaire - Édition test',\n          studentIds: [student1.id, student2.id],\n          dateFrom: new Date('2024-01-01'),\n          dateTo: new Date('2024-01-07'),\n          tone: 'friendly',\n          sections: [\n            {\n              type: 'content',\n              content: '<h1>Weekly Newsletter</h1><p>This is a test newsletter with important updates.</p>',\n            },\n          ],\n        },\n      });\n\n      // Send newsletter\n      const sendRes = await auth\n        .post(`/api/newsletters/${newsletter.id}/send`)\n        .set('Authorization', `Bearer ${teacherToken}`);\n\n      expect(sendRes.status).toBe(200);\n      expect(sendRes.body.sent).toBe(2);\n\n      // Verify emails were sent\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(2);\n\n      // Check first email\n      const firstEmail = emails[0];\n      expect(firstEmail).toBeDefined();\n\n      expectEmailContent(firstEmail!, {\n        subject: 'Weekly Newsletter - Test Edition',\n        text: 'Please see the attached newsletter.',\n      });\n\n      // Verify PDF attachment\n      expect(firstEmail!.attachments).toHaveLength(1);\n      const attachment = firstEmail!.attachments![0];\n      expect(attachment.filename).toBe('newsletter.pdf');\n      expect(attachment.contentType).toContain('pdf');\n      expect(attachment.content).toBeInstanceOf(Buffer);\n      expect(attachment.content.length).toBeGreaterThan(0);\n    });\n\n    it.skip('handles newsletter sending with no parent contacts - DISABLED (ParentContact model removed)', async () => {\n      // Create newsletter without any parent contacts\n      const newsletter = await prisma.newsletter.create({\n        data: {\n          userId: user.id,\n          title: 'Empty Newsletter',\n          titleFr: 'Bulletin vide',\n          studentIds: [],\n          dateFrom: new Date('2024-01-01'),\n          dateTo: new Date('2024-01-07'),\n          tone: 'friendly',\n          sections: [{ type: 'content', content: '<p>Test content</p>' }],\n        },\n      });\n\n      const sendRes = await auth\n        .post(`/api/newsletters/${newsletter.id}/send`)\n        .set('Authorization', `Bearer ${teacherToken}`);\n\n      expect(sendRes.status).toBe(200);\n      expect(sendRes.body.sent).toBe(0);\n\n      // Verify no emails were sent\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(0);\n    });\n\n    it.skip('handles newsletter sending failures gracefully - DISABLED (ParentContact model removed)', async () => {\n      // Create students and parent contacts with invalid email format\n      const validStudent = await prisma.student.create({\n        data: { firstName: 'Valid', lastName: 'Student', grade: 1, userId: user.id },\n      });\n      const invalidStudent = await prisma.student.create({\n        data: { firstName: 'Invalid', lastName: 'Student', grade: 1, userId: user.id },\n      });\n\n      const newsletter = await prisma.newsletter.create({\n        data: {\n          userId: user.id,\n          title: 'Test Newsletter',\n          titleFr: 'Bulletin de test',\n          studentIds: [validStudent.id, invalidStudent.id],\n          dateFrom: new Date('2024-01-01'),\n          dateTo: new Date('2024-01-07'),\n          tone: 'friendly',\n          sections: [{ type: 'content', content: '<p>Test content</p>' }],\n        },\n      });\n\n      // Newsletter sending should not fail completely\n      const sendRes = await auth\n        .post(`/api/newsletters/${newsletter.id}/send`)\n        .set('Authorization', `Bearer ${teacherToken}`);\n\n      expect(sendRes.status).toBe(200);\n      // Should report attempted sends even if some fail\n      expect(sendRes.body.sent).toBe(2);\n    });\n  });\n\n  describe('Bulk Email Operations', () => {\n    it('sends bulk emails to multiple recipients', async () => {\n      const recipients = [generateTestEmail(), generateTestEmail(), generateTestEmail()];\n\n      const subject = 'Bulk Email Test';\n      const text = 'This is a bulk email test message';\n\n      const result = await testEmailService.sendBulkEmails(recipients, subject, text);\n\n      expect(result.sent).toBe(3);\n      expect(result.failed).toHaveLength(0);\n\n      // Verify all emails were sent\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(3);\n\n      recipients.forEach((recipient) => {\n        const email = emails.find((e) => e.to.includes(recipient));\n        expect(email).toBeDefined();\n        expectEmailContent(email!, {\n          subject,\n          text,\n        });\n      });\n    });\n\n    it('handles partial failures in bulk email sending', async () => {\n      const validRecipients = [generateTestEmail(), generateTestEmail()];\n      const invalidRecipients = ['invalid-email-1', 'invalid-email-2'];\n      const allRecipients = [...validRecipients, ...invalidRecipients];\n\n      const result = await testEmailService.sendBulkEmails(\n        allRecipients,\n        'Bulk Test',\n        'Test message',\n      );\n\n      // Should have some successes and some failures\n      expect(result.sent).toBeGreaterThan(0);\n      expect(result.failed).toHaveLength(2);\n      expect(result.failed).toEqual(expect.arrayContaining(invalidRecipients));\n    });\n  });\n\n  describe('Email Retry Mechanism', () => {\n    it('retries failed email sends', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'Retry Test';\n      const text = 'This email should be retried';\n\n      // First attempt should succeed after retries\n      await expect(\n        testEmailService.sendEmailWithRetry(recipient, subject, text, undefined, 3, 100),\n      ).resolves.not.toThrow();\n\n      // Verify email was eventually sent\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n      expectEmailContent(emails[0], {\n        to: [recipient],\n        subject,\n        text,\n      });\n    });\n\n    /**\n     * @todo This test uses jest.spyOn and should test real retry behavior\n     * @mocked sendEmail - prevents testing actual retry mechanism with real email service\n     * @not-fully-implemented - should test retries with actual network failures\n     */\n    it('fails after maximum retry attempts', async () => {\n      // Mock the send function to always fail\n      const originalSend = testEmailService.sendEmail;\n      jest.spyOn(testEmailService, 'sendEmail').mockRejectedValue(new Error('Network error'));\n\n      const recipient = generateTestEmail();\n\n      await expect(\n        testEmailService.sendEmailWithRetry(\n          recipient,\n          'Fail Test',\n          'Should fail',\n          undefined,\n          2,\n          50,\n        ),\n      ).rejects.toThrow('Failed to send email after 2 attempts');\n\n      // Restore original function\n      jest.spyOn(testEmailService, 'sendEmail').mockImplementation(originalSend);\n    });\n  });\n\n  describe('Email Content and Formatting', () => {\n    it('preserves email content formatting', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'Formatting Test';\n      const text = `This is a multi-line email\n      \n      With proper formatting:\n      - Bullet point 1\n      - Bullet point 2\n      \n      And special characters: áéíóú & <symbols>`;\n\n      await testEmailService.sendEmail(recipient, subject, text);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n\n      const email = emails[0];\n      expect(email.text).toBe(text);\n      expect(email.subject).toBe(subject);\n    });\n\n    it.skip('handles HTML content in newsletters - DISABLED (ParentContact model removed)', async () => {\n      const htmlStudent = await prisma.student.create({\n        data: { firstName: 'HTML', lastName: 'Student', grade: 1, userId: user.id },\n      });\n\n      const htmlContent = `\n        <html>\n          <body>\n            <h1 style=\"color: blue;\">Weekly Newsletter</h1>\n            <p>This newsletter contains <strong>HTML formatting</strong>.</p>\n            <ul>\n              <li>Item 1</li>\n              <li>Item 2</li>\n            </ul>\n          </body>\n        </html>\n      `;\n\n      const newsletter = await prisma.newsletter.create({\n        data: {\n          userId: user.id,\n          title: 'HTML Newsletter',\n          titleFr: 'Bulletin HTML',\n          studentIds: [htmlStudent.id],\n          dateFrom: new Date('2024-01-01'),\n          dateTo: new Date('2024-01-07'),\n          tone: 'friendly',\n          sections: [{ type: 'content', content: htmlContent }],\n        },\n      });\n\n      await auth\n        .post(`/api/newsletters/${newsletter.id}/send`)\n        .set('Authorization', `Bearer ${teacherToken}`);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n\n      const email = emails[0];\n      expect(email.html || email.text).toContain('Weekly Newsletter');\n      expect(email.html || email.text).toContain('HTML formatting');\n    });\n\n    it('handles Unicode characters correctly', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'Unicode Test: émojis 🎉 français';\n      const text = 'Bonjour! Voici un test avec des caractères spéciaux: àáâãäåæçèéêë 🌟';\n\n      await testEmailService.sendEmail(recipient, subject, text);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n\n      const email = emails[0];\n      expect(email.subject).toBe(subject);\n      expect(email.text).toBe(text);\n    });\n  });\n\n  describe('Email Attachment Handling', () => {\n    it('handles PDF attachments correctly', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'PDF Test';\n      const text = 'Email with PDF attachment';\n\n      // Create a simple PDF buffer (mock PDF content)\n      const pdfContent = Buffer.from(\n        '%PDF-1.4\\n1 0 obj\\n<< /Type /Catalog /Pages 2 0 R >>\\nendobj\\n%%EOF',\n      );\n      const attachment = {\n        filename: 'test-document.pdf',\n        content: pdfContent,\n      };\n\n      await testEmailService.sendEmail(recipient, subject, text, undefined, attachment);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n\n      const email = emails[0];\n      expect(email.attachments).toHaveLength(1);\n\n      const receivedAttachment = email.attachments![0];\n      expect(receivedAttachment.filename).toBe('test-document.pdf');\n      expect(receivedAttachment.content).toEqual(pdfContent);\n      expect(receivedAttachment.contentType).toContain('pdf');\n    });\n\n    it('handles multiple attachments', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'Multiple Attachments Test';\n      const text = 'Email with multiple attachments';\n\n      // For this test, we'll simulate multiple attachments by sending multiple emails\n      // In a real scenario, you'd modify the sendEmail function to accept multiple attachments\n      const attachment1 = {\n        filename: 'document1.pdf',\n        content: Buffer.from('PDF content 1'),\n      };\n\n      const attachment2 = {\n        filename: 'document2.pdf',\n        content: Buffer.from('PDF content 2'),\n      };\n\n      // Send first email with first attachment\n      await testEmailService.sendEmail(recipient, subject + ' 1', text, undefined, attachment1);\n\n      // Send second email with second attachment\n      await testEmailService.sendEmail(recipient, subject + ' 2', text, undefined, attachment2);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(2);\n\n      // Verify both attachments were sent correctly\n      const email1 = emails.find((e) => e.subject.includes('1'));\n      const email2 = emails.find((e) => e.subject.includes('2'));\n\n      expect(email1?.attachments?.[0].filename).toBe('document1.pdf');\n      expect(email2?.attachments?.[0].filename).toBe('document2.pdf');\n    });\n\n    it('handles attachment encoding correctly', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'Encoding Test';\n      const text = 'Email with binary attachment';\n\n      // Create binary content with various byte values\n      const binaryContent = Buffer.from([0, 1, 2, 3, 255, 254, 253, 252, 127, 128, 129]);\n      const attachment = {\n        filename: 'binary-file.bin',\n        content: binaryContent,\n      };\n\n      await testEmailService.sendEmail(recipient, subject, text, undefined, attachment);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n\n      const email = emails[0];\n      const receivedAttachment = email.attachments![0];\n      expect(receivedAttachment.content).toEqual(binaryContent);\n    });\n\n    it('handles empty attachments gracefully', async () => {\n      const recipient = generateTestEmail();\n      const subject = 'Empty Attachment Test';\n      const text = 'Email with empty attachment';\n\n      const attachment = {\n        filename: 'empty-file.txt',\n        content: Buffer.alloc(0), // Empty buffer\n      };\n\n      await testEmailService.sendEmail(recipient, subject, text, undefined, attachment);\n\n      const emails = await testEmailService.getEmails();\n      expect(emails).toHaveLength(1);\n\n      const email = emails[0];\n      expect(email.attachments).toHaveLength(1);\n      expect(email.attachments![0].content).toHaveLength(0);\n    });\n  });\n});\n"],"version":3}