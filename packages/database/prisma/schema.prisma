datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}



model Subject {
  id         Int        @id @default(autoincrement())
  name       String
  nameEn     String?
  nameFr     String?
  milestones Milestone[]
  timetableSlots TimetableSlot[]
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
}

model Milestone {
  id         Int       @id @default(autoincrement())
  title      String
  titleEn    String?
  titleFr    String?
  subjectId  Int
  subject    Subject   @relation(fields: [subjectId], references: [id])
  activities Activity[]
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  description String?
  descriptionEn String?
  descriptionFr String?
  targetDate DateTime?
  startDate  DateTime?
  endDate    DateTime?
  estHours   Int?
  deadline   ReportDeadline? @relation(fields: [deadlineId], references: [id])
  deadlineId Int?
  outcomes   MilestoneOutcome[]
  smartGoals SmartGoal[]
}

model Activity {
  id          Int       @id @default(autoincrement())
  title       String
  titleEn     String?
  titleFr     String?
  activityType ActivityType @default(LESSON)
  milestoneId Int
  /// Position of the activity within its milestone
  orderIndex  Int       @default(0)
  milestone   Milestone  @relation(fields: [milestoneId], references: [id])
  userId      Int?
  user        User?      @relation(fields: [userId], references: [id])
  durationMins Int?
  privateNote  String?
  privateNoteEn String?
  privateNoteFr String?
  publicNote   String?
  publicNoteEn String?
  publicNoteFr String?
  /// Comma-separated list of needed materials
  materialsText String?
  materialsTextEn String?
  materialsTextFr String?
  /// Optional list of activity tags (e.g. "HandsOn")
  tags         Json     @default("[]")
  /// True if suitable for substitute teachers
  isSubFriendly Boolean  @default(true)
  /// Mark as generic fallback activity for the subject
  isFallback   Boolean   @default(false)
  completedAt  DateTime?
  weeklySchedules WeeklySchedule[]
  resources   Resource[]
  dailyPlanItems DailyPlanItem[]
  notes       Note[]
  outcomes    ActivityOutcome[]
  thematicUnits ThematicUnitActivity[]
  cognatePairs CognateActivity[]
  mediaResources MediaResourceActivity[]
  parentMessages ParentMessageActivity[]
  @@index([milestoneId, orderIndex])
}

model LessonPlan {
  id         Int             @id @default(autoincrement())
  weekStart  DateTime        @unique
  schedule   WeeklySchedule[]
  dailyPlans DailyPlan[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model TimetableSlot {
  id        Int      @id @default(autoincrement())
  day       Int
  startMin  Int
  endMin    Int
  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])
  weeklySchedules WeeklySchedule[]
  dailyPlanItems DailyPlanItem[]
}

model WeeklySchedule {
  id          Int        @id @default(autoincrement())
  day         Int
  lessonPlanId Int
  lessonPlan  LessonPlan @relation(fields: [lessonPlanId], references: [id])
  activityId  Int
  activity    Activity   @relation(fields: [activityId], references: [id])
  slotId      Int?
  slot        TimetableSlot? @relation(fields: [slotId], references: [id])
}

model TeacherPreferences {
  id             Int    @id @default(autoincrement())
  teachingStyles String
  pacePreference String
  prepTime       Int
  /**
   * JSON object storing contact info for sub plans
   * e.g. { "principal": "Name", "office": "555-1234" }
   */
  subPlanContacts Json?
  /// Special procedures or notes for substitute teachers
  subPlanProcedures String?
}

model SubstituteInfo {
  id         Int      @id @default(autoincrement())
  teacherId  Int
  teacher    User     @relation(fields: [teacherId], references: [id])
  procedures String?
  allergies  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Resource {
  id         Int      @id @default(autoincrement())
  filename   String
  url        String
  type       String
  size       Int
  activityId Int?
  activity   Activity? @relation(fields: [activityId], references: [id])
  createdAt  DateTime @default(now())
}

model MaterialList {
  id        Int      @id @default(autoincrement())
  weekStart DateTime
  items     String
  prepared  Boolean  @default(false)
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String?
  dueDate   DateTime?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  title     String
  titleEn   String?
  titleFr   String?
  content   String
  contentEn String?
  contentFr String?
  rawDraft  String?
  rawDraftEn String?
  rawDraftFr String?
  polishedDraft String?
  polishedDraftEn String?
  polishedDraftFr String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParentMessage {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  title        String
  timeframe    String
  contentFr    String
  contentEn    String
  linkedOutcomes ParentMessageOutcome[]
  linkedActivities ParentMessageActivity[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DailyPlan {
  id           Int            @id @default(autoincrement())
  date         DateTime
  lessonPlanId Int
  lessonPlan   LessonPlan     @relation(fields: [lessonPlanId], references: [id])
  items        DailyPlanItem[]
  notes        Note[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model DailyPlanItem {
  id          Int          @id @default(autoincrement())
  startMin    Int
  endMin      Int
  slotId      Int?
  slot        TimetableSlot? @relation(fields: [slotId], references: [id])
  activityId  Int?
  activity    Activity?    @relation(fields: [activityId], references: [id])
  notes       String?
  dailyPlanId Int
  dailyPlan   DailyPlan    @relation(fields: [dailyPlanId], references: [id])
}

model Note {
  id          Int       @id @default(autoincrement())
  content     String
  public      Boolean   @default(false)
  activityId  Int?
  activity    Activity? @relation(fields: [activityId], references: [id])
  dailyPlanId Int?
  dailyPlan   DailyPlan? @relation(fields: [dailyPlanId], references: [id])
  createdAt   DateTime  @default(now())
}


model ParentContact {
  id          Int    @id @default(autoincrement())
  name        String
  email       String  @unique
  studentName String
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  role     String   @default("teacher")
  preferredLanguage String @default("en")
  subjects Subject[]
  milestones Milestone[]
  activities Activity[]
  events    CalendarEvent[]
  unavailableBlocks UnavailableBlock[]
  reportDeadlines ReportDeadline[]
  yearPlanEntries YearPlanEntry[]
  shareLinks ShareLink[]
  equipmentBookings EquipmentBooking[]
  substituteInfos SubstituteInfo[]
  smartGoals SmartGoal[]
  oralRoutineTemplates OralRoutineTemplate[]
  dailyOralRoutines DailyOralRoutine[]
  thematicUnits ThematicUnit[]
  cognatePairs CognatePair[]
  assessmentTemplates AssessmentTemplate[]
  mediaResources MediaResource[]
  parentMessages ParentMessage[]
}

enum ActivityType {
  LESSON
  ASSESSMENT
}

enum CalendarEventType {
  PD_DAY
  ASSEMBLY
  TRIP
  HOLIDAY
  CUSTOM
}

enum CalendarEventSource {
  MANUAL
  ICAL_FEED
  SYSTEM
}

model CalendarEvent {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  start       DateTime
  end         DateTime
  allDay      Boolean             @default(false)
  eventType   CalendarEventType
  source      CalendarEventSource @default(MANUAL)
  teacherId   Int?
  teacher     User?               @relation(fields: [teacherId], references: [id])
  schoolId    Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum UnavailableBlockType {
  TEACHER_ABSENCE
  STUDENT_PULL_OUT
}

model UnavailableBlock {
  id                Int                  @id @default(autoincrement())
  teacherId         Int?
  teacher           User?               @relation(fields: [teacherId], references: [id])
  date              DateTime
  startMin          Int
  endMin            Int
  reason            String
  blockType         UnavailableBlockType
  affectedStudentIds String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ReportDeadline {
  id               Int      @id @default(autoincrement())
  teacherId        Int
  teacher          User     @relation(fields: [teacherId], references: [id])
  name             String
  date             DateTime
  remindDaysBefore Int      @default(14)
  milestones       Milestone[]
}


enum YearPlanEntryType {
  UNIT
  ASSESSMENT
  EVENT
}

model YearPlanEntry {
  id        Int              @id @default(autoincrement())
  teacherId Int
  teacher   User             @relation(fields: [teacherId], references: [id])
  entryType YearPlanEntryType
  title     String
  start     DateTime
  end       DateTime
  colorCode String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum ShareLinkType {
  YEAR_PLAN
}

model ShareLink {
  id        Int           @id @default(autoincrement())
  token     String        @unique
  type      ShareLinkType
  teacherId Int
  teacher   User          @relation(fields: [teacherId], references: [id])
  year      Int
  expiresAt DateTime
  createdAt DateTime      @default(now())
}

enum EquipmentBookingStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
}

model EquipmentBooking {
  id            Int                    @id @default(autoincrement())
  teacherId     Int
  teacher       User                   @relation(fields: [teacherId], references: [id])
  resourceName  String
  neededBy      DateTime
  leadTimeDays  Int                    @default(14)
  status        EquipmentBookingStatus @default(REQUESTED)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model Holiday {
  id   Int      @id @default(autoincrement())
  date DateTime
  name String
}

model Outcome {
  id          String   @id @default(cuid())
  subject     String
  grade       Int
  code        String   @unique
  description String
  domain      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  milestones  MilestoneOutcome[]
  activities  ActivityOutcome[]
  smartGoals  SmartGoal[]
  oralRoutines OralRoutineOutcome[]
  thematicUnits ThematicUnitOutcome[]
  cognatePairs CognateOutcome[]
  mediaResources MediaResourceOutcome[]
  parentMessages ParentMessageOutcome[]
}

model MilestoneOutcome {
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId Int
  outcome     Outcome   @relation(fields: [outcomeId], references: [id])
  outcomeId   String
  @@id([milestoneId, outcomeId])
}

model ActivityOutcome {
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  Int
  outcome     Outcome   @relation(fields: [outcomeId], references: [id])
  outcomeId   String
  @@id([activityId, outcomeId])
}

model SmartGoal {
  id            Int        @id @default(autoincrement())
  outcomeId     String
  outcome       Outcome    @relation(fields: [outcomeId], references: [id])
  milestoneId   Int?
  milestone     Milestone? @relation(fields: [milestoneId], references: [id])
  description   String
  targetDate    DateTime
  targetValue   Int
  observedValue Int?
  userId        Int
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OralRoutineTemplate {
  id            Int                      @id @default(autoincrement())
  title         String
  titleEn       String?
  titleFr       String?
  description   String?
  descriptionEn String?
  descriptionFr String?
  userId        Int
  user          User                     @relation(fields: [userId], references: [id])
  outcomes      OralRoutineOutcome[]
  dailyRoutines DailyOralRoutine[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

model DailyOralRoutine {
  id            Int                 @id @default(autoincrement())
  date          DateTime
  templateId    Int
  template      OralRoutineTemplate @relation(fields: [templateId], references: [id])
  completed     Boolean             @default(false)
  notes         String?
  participation Int?
  userId        Int
  user          User                @relation(fields: [userId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model OralRoutineOutcome {
  template   OralRoutineTemplate @relation(fields: [templateId], references: [id])
  templateId Int
  outcome    Outcome             @relation(fields: [outcomeId], references: [id])
  outcomeId  String
  @@id([templateId, outcomeId])
}

model ThematicUnit {
  id           Int        @id @default(autoincrement())
  title        String
  titleEn      String?
  titleFr      String?
  description  String?
  descriptionEn String?
  descriptionFr String?
  startDate    DateTime
  endDate      DateTime
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  outcomes     ThematicUnitOutcome[]
  activities   ThematicUnitActivity[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ThematicUnitOutcome {
  thematicUnit   ThematicUnit @relation(fields: [thematicUnitId], references: [id])
  thematicUnitId Int
  outcome        Outcome      @relation(fields: [outcomeId], references: [id])
  outcomeId      String
  @@id([thematicUnitId, outcomeId])
}

model ThematicUnitActivity {
  thematicUnit   ThematicUnit @relation(fields: [thematicUnitId], references: [id])
  thematicUnitId Int
  activity       Activity     @relation(fields: [activityId], references: [id])
  activityId     Int
  @@id([thematicUnitId, activityId])
}

model CognatePair {
  id               Int                    @id @default(autoincrement())
  wordFr           String
  wordEn           String
  notes            String?
  linkedOutcomes   CognateOutcome[]
  linkedActivities CognateActivity[]
  userId           Int
  user             User                   @relation(fields: [userId], references: [id])
  createdAt        DateTime               @default(now())
  @@unique([wordFr, wordEn, userId])
}

model CognateOutcome {
  cognatePair   CognatePair @relation(fields: [cognatePairId], references: [id])
  cognatePairId Int
  outcome       Outcome     @relation(fields: [outcomeId], references: [id])
  outcomeId     String
  @@id([cognatePairId, outcomeId])
}

model CognateActivity {
  cognatePair   CognatePair @relation(fields: [cognatePairId], references: [id])
  cognatePairId Int
  activity      Activity    @relation(fields: [activityId], references: [id])
  activityId    Int
  @@id([cognatePairId, activityId])
}

model AssessmentTemplate {
  id          Int        @id @default(autoincrement())
  title       String
  type        String     // "oral" | "reading" | "writing" | "mixed"
  description String?
  outcomeIds  String     @default("[]")
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  results     AssessmentResult[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model AssessmentResult {
  id         Int        @id @default(autoincrement())
  templateId Int
  template   AssessmentTemplate @relation(fields: [templateId], references: [id])
  date       DateTime
  groupScore Int?       // 0–100
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model MediaResource {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  title          String
  filePath       String
  fileType       String   // "image", "pdf", "video", "audio"
  fileSize       Int?     // file size in bytes
  mimeType       String?  // MIME type for validation
  tags           String   @default("[]") // JSON array of tags
  linkedOutcomes MediaResourceOutcome[]
  linkedActivities MediaResourceActivity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MediaResourceOutcome {
  mediaResource   MediaResource @relation(fields: [mediaResourceId], references: [id])
  mediaResourceId Int
  outcome         Outcome       @relation(fields: [outcomeId], references: [id])
  outcomeId       String
  @@id([mediaResourceId, outcomeId])
}

model MediaResourceActivity {
  mediaResource   MediaResource @relation(fields: [mediaResourceId], references: [id])
  mediaResourceId Int
  activity        Activity      @relation(fields: [activityId], references: [id])
  activityId      Int
  @@id([mediaResourceId, activityId])
}

model ParentMessageOutcome {
  parentMessage   ParentMessage @relation(fields: [parentMessageId], references: [id])
  parentMessageId Int
  outcome         Outcome       @relation(fields: [outcomeId], references: [id])
  outcomeId       String
  @@id([parentMessageId, outcomeId])
}

model ParentMessageActivity {
  parentMessage   ParentMessage @relation(fields: [parentMessageId], references: [id])
  parentMessageId Int
  activity        Activity      @relation(fields: [activityId], references: [id])
  activityId      Int
  @@id([parentMessageId, activityId])
}