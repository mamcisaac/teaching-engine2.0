datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}



model Subject {
  id         Int        @id @default(autoincrement())
  name       String
  milestones Milestone[]
  timetableSlots TimetableSlot[]
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
}

model Milestone {
  id         Int       @id @default(autoincrement())
  title      String
  subjectId  Int
  subject    Subject   @relation(fields: [subjectId], references: [id])
  activities Activity[]
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  description String?
  /// Array of curriculum standard codes associated with the milestone
  standardCodes Json    @default("[]")
  targetDate DateTime?
  estHours   Int?
  deadline   ReportDeadline? @relation(fields: [deadlineId], references: [id])
  deadlineId Int?
}

model Activity {
  id          Int       @id @default(autoincrement())
  title       String
  activityType ActivityType @default(LESSON)
  milestoneId Int
  /// Position of the activity within its milestone
  orderIndex  Int       @default(0)
  milestone   Milestone  @relation(fields: [milestoneId], references: [id])
  userId      Int?
  user        User?      @relation(fields: [userId], references: [id])
  durationMins Int?
  privateNote  String?
  publicNote   String?
  /// Optional list of activity tags (e.g. "HandsOn")
  tags         Json     @default("[]")
  completedAt  DateTime?
  weeklySchedules WeeklySchedule[]
  resources   Resource[]
  dailyPlanItems DailyPlanItem[]
  notes       Note[]
  @@index([milestoneId, orderIndex])
}

model LessonPlan {
  id         Int             @id @default(autoincrement())
  weekStart  DateTime
  schedule   WeeklySchedule[]
  dailyPlans DailyPlan[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model TimetableSlot {
  id        Int      @id @default(autoincrement())
  day       Int
  startMin  Int
  endMin    Int
  subjectId Int?
  subject   Subject? @relation(fields: [subjectId], references: [id])
  weeklySchedules WeeklySchedule[]
  dailyPlanItems DailyPlanItem[]
}

model WeeklySchedule {
  id          Int        @id @default(autoincrement())
  day         Int
  lessonPlanId Int
  lessonPlan  LessonPlan @relation(fields: [lessonPlanId], references: [id])
  activityId  Int
  activity    Activity   @relation(fields: [activityId], references: [id])
  slotId      Int?
  slot        TimetableSlot? @relation(fields: [slotId], references: [id])
}

model TeacherPreferences {
  id             Int    @id @default(autoincrement())
  teachingStyles String
  pacePreference String
  prepTime       Int
  /**
   * JSON object storing contact info for sub plans
   * e.g. { "principal": "Name", "office": "555-1234" }
   */
  subPlanContacts Json?
  /// Special procedures or notes for substitute teachers
  subPlanProcedures String?
}

model Resource {
  id         Int      @id @default(autoincrement())
  filename   String
  url        String
  type       String
  size       Int
  activityId Int?
  activity   Activity? @relation(fields: [activityId], references: [id])
  createdAt  DateTime @default(now())
}

model MaterialList {
  id        Int      @id @default(autoincrement())
  weekStart DateTime
  items     String
  prepared  Boolean  @default(false)
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String?
  dueDate   DateTime?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailyPlan {
  id           Int            @id @default(autoincrement())
  date         DateTime
  lessonPlanId Int
  lessonPlan   LessonPlan     @relation(fields: [lessonPlanId], references: [id])
  items        DailyPlanItem[]
  notes        Note[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model DailyPlanItem {
  id          Int          @id @default(autoincrement())
  startMin    Int
  endMin      Int
  slotId      Int?
  slot        TimetableSlot? @relation(fields: [slotId], references: [id])
  activityId  Int?
  activity    Activity?    @relation(fields: [activityId], references: [id])
  notes       String?
  dailyPlanId Int
  dailyPlan   DailyPlan    @relation(fields: [dailyPlanId], references: [id])
}

model Note {
  id          Int       @id @default(autoincrement())
  content     String
  public      Boolean   @default(false)
  activityId  Int?
  activity    Activity? @relation(fields: [activityId], references: [id])
  dailyPlanId Int?
  dailyPlan   DailyPlan? @relation(fields: [dailyPlanId], references: [id])
  createdAt   DateTime  @default(now())
}


model ParentContact {
  id          Int    @id @default(autoincrement())
  name        String
  email       String  @unique
  studentName String
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  role     String   @default("teacher")
  subjects Subject[]
  milestones Milestone[]
  activities Activity[]
  events    CalendarEvent[]
  unavailableBlocks UnavailableBlock[]
  reportDeadlines ReportDeadline[]
  yearPlanEntries YearPlanEntry[]
  shareLinks ShareLink[]
  equipmentBookings EquipmentBooking[]
}

enum ActivityType {
  LESSON
  ASSESSMENT
}

enum CalendarEventType {
  PD_DAY
  ASSEMBLY
  TRIP
  HOLIDAY
  CUSTOM
}

enum CalendarEventSource {
  MANUAL
  ICAL_FEED
  SYSTEM
}

model CalendarEvent {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  start       DateTime
  end         DateTime
  allDay      Boolean             @default(false)
  eventType   CalendarEventType
  source      CalendarEventSource @default(MANUAL)
  teacherId   Int?
  teacher     User?               @relation(fields: [teacherId], references: [id])
  schoolId    Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum UnavailableBlockType {
  TEACHER_ABSENCE
  STUDENT_PULL_OUT
}

model UnavailableBlock {
  id                Int                  @id @default(autoincrement())
  teacherId         Int?
  teacher           User?               @relation(fields: [teacherId], references: [id])
  date              DateTime
  startMin          Int
  endMin            Int
  reason            String
  blockType         UnavailableBlockType
  affectedStudentIds String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ReportDeadline {
  id               Int      @id @default(autoincrement())
  teacherId        Int
  teacher          User     @relation(fields: [teacherId], references: [id])
  name             String
  date             DateTime
  remindDaysBefore Int      @default(14)
  milestones       Milestone[]
}


enum YearPlanEntryType {
  UNIT
  ASSESSMENT
  EVENT
}

model YearPlanEntry {
  id        Int              @id @default(autoincrement())
  teacherId Int
  teacher   User             @relation(fields: [teacherId], references: [id])
  entryType YearPlanEntryType
  title     String
  start     DateTime
  end       DateTime
  colorCode String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum ShareLinkType {
  YEAR_PLAN
}

model ShareLink {
  id        Int           @id @default(autoincrement())
  token     String        @unique
  type      ShareLinkType
  teacherId Int
  teacher   User          @relation(fields: [teacherId], references: [id])
  year      Int
  expiresAt DateTime
  createdAt DateTime      @default(now())
}

enum EquipmentBookingStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
}

model EquipmentBooking {
  id            Int                    @id @default(autoincrement())
  teacherId     Int
  teacher       User                   @relation(fields: [teacherId], references: [id])
  resourceName  String
  neededBy      DateTime
  leadTimeDays  Int                    @default(14)
  status        EquipmentBookingStatus @default(REQUESTED)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}
