datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model Subject {
  id         Int        @id @default(autoincrement())
  name       String
  nameEn     String?
  nameFr     String?
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
}






// TeacherPreferences model archived - see schema.archive.prisma
// Functionality moved to User.preferredLanguage and ClassRoutine models

// SubstituteInfo model archived - see schema.archive.prisma
// Functionality moved to ClassRoutine model with category-based organization


// MaterialList model archived - see schema.archive.prisma
// Functionality moved to UnitPlanResource and ETFOLessonPlanResource models

// Notification model archived - see schema.archive.prisma
// Functionality integrated into ETFO planning workflow notifications

// Newsletter model archived - see schema.archive.prisma
// Functionality replaced by ParentMessage model

model ParentMessage {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  title        String
  timeframe    String
  contentFr    String
  contentEn    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}






model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  role     String   @default("teacher")
  preferredLanguage String @default("en")
  subjects Subject[]
  events    CalendarEvent[]
  unavailableBlocks UnavailableBlock[]
  // Archived relations - see schema.archive.prisma:
  // reportDeadlines, yearPlanEntries, shareLinks, equipmentBookings, substituteInfos
  // oralRoutineTemplates, dailyOralRoutines, thematicUnits, cognatePairs, mediaResources
  // reflectionJournalEntries, aiGeneratedPlans, planningConversations
  parentMessages ParentMessage[]
  students Student[]
  curriculumImports CurriculumImport[]
  classRoutines ClassRoutine[]
  subPlanRecords SubPlanRecord[]
  
  // ETFO-aligned planning models
  longRangePlans LongRangePlan[]
  unitPlans UnitPlan[]
  etfoLessonPlans ETFOLessonPlan[]
  daybookEntries DaybookEntry[]
  
  // Newsletters
  newsletters Newsletter[]
  
  // Activity Discovery
  activityImports ActivityImport[]
  activityRatings ActivityRating[]
  activityCollections ActivityCollection[]
  
  // Weekly Planner State
  weeklyPlannerState WeeklyPlannerState?
  
  // Template System
  createdTemplates PlanTemplate[]
  
  // Recent Plan Access
  recentPlanAccess RecentPlanAccess[]
  
  // Collaboration
  ownedTeams Team[] @relation("TeamOwner")
  teamMemberships TeamMember[]
  sharedPlans SharedPlan[] @relation("PlanSharer")
  receivedPlans SharedPlan[] @relation("PlanReceiver")
  planComments PlanComment[]
  sentInvitations TeamInvitation[] @relation("InvitationSender")
  receivedInvitations TeamInvitation[] @relation("InvitationReceiver")
  resourceContributions ResourceLibraryItem[] @relation("ResourceContributor")
  resourceBookmarks ResourceBookmark[]
}


enum CalendarEventType {
  PD_DAY
  ASSEMBLY
  TRIP
  HOLIDAY
  CUSTOM
}

enum CalendarEventSource {
  MANUAL
  ICAL_FEED
  SYSTEM
}

model CalendarEvent {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  start       DateTime
  end         DateTime
  allDay      Boolean             @default(false)
  eventType   CalendarEventType
  source      CalendarEventSource @default(MANUAL)
  teacherId   Int?
  teacher     User?               @relation(fields: [teacherId], references: [id])
  schoolId    Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum UnavailableBlockType {
  TEACHER_ABSENCE
  STUDENT_PULL_OUT
}

model UnavailableBlock {
  id                Int                  @id @default(autoincrement())
  teacherId         Int?
  teacher           User?               @relation(fields: [teacherId], references: [id])
  date              DateTime
  startMin          Int
  endMin            Int
  reason            String
  blockType         UnavailableBlockType
  affectedStudentIds String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// ReportDeadline model archived - see schema.archive.prisma
// Functionality moved to CalendarEvent with type CUSTOM for deadlines


// YearPlanEntry model and YearPlanEntryType enum archived - see schema.archive.prisma
// Functionality replaced by LongRangePlan and UnitPlan models

// ShareLink model and ShareLinkType enum archived - see schema.archive.prisma
// Functionality simplified - sharing now handled differently

// EquipmentBooking model and EquipmentBookingStatus enum archived - see schema.archive.prisma
// Functionality moved to external resource management systems

// Holiday model archived - see schema.archive.prisma
// Functionality moved to CalendarEvent with type HOLIDAY





// OralRoutineTemplate and DailyOralRoutine models archived - see schema.archive.prisma
// Functionality integrated into ETFOLessonPlan and DaybookEntry models


// ThematicUnit model archived - see schema.archive.prisma
// Functionality replaced by UnitPlan model with ETFO alignment



// CognatePair model archived - see schema.archive.prisma
// Functionality moved to external vocabulary management systems




// MediaResource model archived - see schema.archive.prisma
// Functionality moved to cloud storage with references in lesson plan resources





// ReflectionJournalEntry model archived - see schema.archive.prisma
// Functionality integrated into DaybookEntry for comprehensive daily reflections



// AIGeneratedPlan and PlanningConversation models archived - see schema.archive.prisma
// Functionality replaced by ETFO-aligned planning workflow with integrated AI assistance

model Student {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  grade       Int
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
  artifacts   StudentArtifact[]
  reflections StudentReflection[]
  parentSummaries ParentSummary[]
  goals       StudentGoal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([userId, lastName])
}

model StudentGoal {
  id         Int       @id @default(autoincrement())
  studentId  Int
  student    Student   @relation(fields: [studentId], references: [id])
  text       String
  // themeId removed - ThematicUnit archived, use unitPlanId for unit-specific goals
  unitPlanId String?   // Optional link to UnitPlan for unit-specific goals
  createdAt  DateTime  @default(now())
  status     String    @default("active") // "active" | "completed" | "abandoned"
}

model StudentReflection {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id])
  content     String?
  text        String?   // Keep both content and text for compatibility
  date        DateTime? // Optional date
  emoji       String?   // e.g. "üôÇ", "üòê", "üòï"
  voicePath   String?   // path to optional recording
  // themeId removed - ThematicUnit archived, use unitPlanId for unit-specific reflections
  unitPlanId  String?   // Optional link to UnitPlan for unit-specific reflections
  // A3 Enhancement: AI Classification fields
  suggestedOutcomeIds  String?    // JSON array of suggested outcome IDs
  selTags              String?    // JSON array of SEL/competency tags
  classificationConfidence Float? // AI confidence score (0-1)
  classificationRationale  String? // AI rationale for suggestions
  classifiedAt         DateTime?  // When classification was performed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentArtifact {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id])
  title       String
  description String?
  fileUrl     String?
  outcomeIds  String   @default("[]") // JSON array of outcome IDs
  createdAt   DateTime @default(now())
}

model ParentSummary {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id])
  dateFrom    DateTime
  dateTo      DateTime
  focus       String?  @default("[]") // JSON array of focus areas
  contentFr   String
  contentEn   String
  isDraft     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}





// Newsletter model for multi-student parent communication
model Newsletter {
  id          String    @id @default(cuid())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  
  title       String
  titleFr     String
  
  studentIds  Json      // Array of student IDs
  dateFrom    DateTime
  dateTo      DateTime
  
  tone        String    // "friendly" | "formal" | "informative"
  sections    Json      // Array of newsletter sections
  
  isDraft     Boolean   @default(true)
  sentAt      DateTime?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
  @@index([isDraft])
}

// ==================== Phase 5: Curriculum Intelligence Models ====================

enum ImportStatus {
  UPLOADING
  PROCESSING
  READY_FOR_REVIEW
  CONFIRMED
  COMPLETED
  FAILED
  CANCELLED
}

// Stores vector embeddings for curriculum outcomes to enable semantic search and clustering

// Tracks curriculum import sessions from various file formats (PDF, DOCX, CSV)
model CurriculumImport {
  id                String           @id @default(cuid())
  userId            Int
  user              User             @relation(fields: [userId], references: [id])
  filename          String?          // For planner agent compatibility
  originalName      String?          // Original uploaded filename
  mimeType          String?          // File MIME type
  fileSize          Int?             // File size in bytes
  filePath          String?          // Path to uploaded file
  grade             Int?             // Grade level for import
  subject           String?          // Subject area
  status            ImportStatus     @default(UPLOADING)
  sourceFormat      String?          // "pdf" | "docx" | "csv" | "manual"
  sourceFile        String?          // Path or URL to original file
  rawText           String?          // Extracted text from document
  parsedData        String?          // JSON string of parsed curriculum data
  errorMessage      String?          // Error details if parsing fails
  totalOutcomes     Int              @default(0)
  processedOutcomes Int              @default(0)
  errorLog          Json?            // Array of error objects with details
  metadata          Json?            // Additional import metadata (e.g., parsing settings)
  processedAt       DateTime?        // When processing completed
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  completedAt       DateTime?
  
  clusters          ExpectationCluster[]
  curriculumExpectations CurriculumExpectation[] @relation("CurriculumExpectationImport")
  
  @@index([userId, status])
  @@index([createdAt])
}

// Stores clustered groups of related expectations for intelligent curriculum organization
model ExpectationCluster {
  id             String           @id @default(cuid())
  importId       String
  import         CurriculumImport @relation(fields: [importId], references: [id], onDelete: Cascade)
  clusterName    String           // Human-readable cluster name
  clusterType    String           // "theme" | "skill" | "concept"
  expectationIds Json             // Array of expectation IDs in this cluster
  centroid       Json?            // Centroid embedding vector for the cluster
  confidence     Float            @default(0.0) // Clustering confidence score (0-1)
  suggestedTheme String?          // AI-suggested theme name
  metadata       Json?            // Additional cluster metadata
  createdAt      DateTime         @default(now())
  
  @@index([importId])
  @@index([clusterType])
}

// A4 Enhancement: Stores pedagogical prompts linked to curriculum outcomes
// Stores classroom routines and procedures for substitute teachers
model ClassRoutine {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  category    String   // "morning", "transition", "dismissal", "behavior", "emergency", "other"
  timeOfDay   String?  // Optional time indicator like "9:00 AM" or "After recess"
  priority    Int      @default(0) // Higher priority routines shown first
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, category])
  @@index([userId, isActive])
}

// Tracks generated substitute plans for reuse and history
model SubPlanRecord {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  date            DateTime
  daysCount       Int      @default(1) // Number of days included
  content         Json     // Full generated content
  includeGoals    Boolean  @default(true)
  includeRoutines Boolean  @default(true)
  includePlans    Boolean  @default(true)
  anonymized      Boolean  @default(false)
  notes           String?  // Additional notes from teacher
  createdAt       DateTime @default(now())
  
  @@index([userId, date])
  @@index([userId, createdAt])
}

// ==================== ETFO-Aligned Planning Models ====================
// These models implement the 5-level ETFO planning hierarchy:
// 1. CurriculumExpectation ‚Üí 2. LongRangePlan ‚Üí 3. UnitPlan ‚Üí 4. LessonPlan ‚Üí 5. DaybookEntry

// Level 1: Curriculum Expectations (replaces Outcome)
model CurriculumExpectation {
  id              String   @id @default(cuid())
  code            String   @unique // e.g., "A1.2", "B2.3"
  description     String
  strand          String   // Major curriculum category
  substrand       String?  // Subcategory if applicable
  grade           Int
  subject         String
  
  // Bilingual support
  descriptionFr   String?
  strandFr        String?
  substrandFr     String?
  
  // Import tracking
  importId        String?
  import          CurriculumImport? @relation("CurriculumExpectationImport", fields: [importId], references: [id])
  
  // Relationships to planning levels
  longRangePlans  LongRangePlanExpectation[]
  unitPlans       UnitPlanExpectation[]
  lessonPlans     ETFOLessonPlanExpectation[]
  daybookEntries  DaybookEntryExpectation[]
  
  // AI features
  embedding       CurriculumExpectationEmbedding?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([subject, grade])
  @@index([code])
}

// Vector embeddings for curriculum expectations (for AI clustering)
model CurriculumExpectationEmbedding {
  id            String                @id @default(cuid())
  expectationId String                @unique
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id], onDelete: Cascade)
  embedding     Json                  // Array of float values
  model         String                // e.g., "text-embedding-3-small"
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  @@index([expectationId])
}

// Level 2: Long-Range Plans (yearly/term overview)
model LongRangePlan {
  id            String   @id @default(cuid())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  
  title         String
  academicYear  String   // e.g., "2024-2025"
  term          String?  // "Full Year", "Term 1", "Term 2", etc.
  grade         Int
  subject       String
  
  // Planning details
  description   String?
  goals         String?  // Overall learning goals for the year/term
  themes        Json?    // Array of major themes
  
  // ETFO-aligned fields
  overarchingQuestions  String?  // Big questions that will guide the year
  assessmentOverview    String?  // Overall assessment strategy
  resourceNeeds         String?  // Materials, technology, resources needed
  professionalGoals     String?  // Professional development goals
  
  // Bilingual support
  titleFr       String?
  descriptionFr String?
  goalsFr       String?
  
  // Relationships
  expectations  LongRangePlanExpectation[]
  unitPlans     UnitPlan[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, academicYear])
  @@index([userId, subject, grade])
}

// Junction table for Long-Range Plans and Curriculum Expectations
model LongRangePlanExpectation {
  longRangePlan   LongRangePlan         @relation(fields: [longRangePlanId], references: [id], onDelete: Cascade)
  longRangePlanId String
  expectation     CurriculumExpectation @relation(fields: [expectationId], references: [id], onDelete: Cascade)
  expectationId   String
  plannedTerm     String?               // Which term this expectation is planned for
  
  @@id([longRangePlanId, expectationId])
}

// Level 3: Unit Plans (replaces Milestone)
model UnitPlan {
  id              String   @id @default(cuid())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  
  title           String
  longRangePlanId String
  longRangePlan   LongRangePlan @relation(fields: [longRangePlanId], references: [id])
  
  // Planning details
  description     String?
  bigIdeas        String?  // Key concepts/enduring understandings
  essentialQuestions Json? // Array of guiding questions
  
  // Timeline
  startDate       DateTime
  endDate         DateTime
  estimatedHours  Int?
  
  // Bilingual support
  titleFr         String?
  descriptionFr   String?
  bigIdeasFr      String?
  
  // Assessment planning
  assessmentPlan  String?  // How learning will be assessed
  successCriteria Json?    // Array of success criteria
  
  // ETFO-aligned planning fields
  crossCurricularConnections String?  // Links to other subject areas
  learningSkills          Json?      // Array of learning skills focus
  culminatingTask         String?    // Final assessment task description
  keyVocabulary          Json?      // Array of key terms
  priorKnowledge         String?    // Prerequisites for the unit
  parentCommunicationPlan String?   // How to communicate with families
  fieldTripsAndGuestSpeakers String? // Community connections
  differentiationStrategies Json?   // Support for diverse learners
  indigenousPerspectives   String?  // Indigenous knowledge integration
  environmentalEducation   String?  // Environmental learning connections
  socialJusticeConnections String?  // Equity and social justice themes
  technologyIntegration    String?  // Technology use in the unit
  communityConnections     String?  // Local partnerships and connections
  
  // Relationships
  expectations    UnitPlanExpectation[]
  lessonPlans     ETFOLessonPlan[]
  resources       UnitPlanResource[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, startDate])
  @@index([longRangePlanId])
}

// Junction table for Unit Plans and Curriculum Expectations
model UnitPlanExpectation {
  unitPlan      UnitPlan              @relation(fields: [unitPlanId], references: [id], onDelete: Cascade)
  unitPlanId    String
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id], onDelete: Cascade)
  expectationId String
  
  @@id([unitPlanId, expectationId])
}

// Resources linked to unit plans
model UnitPlanResource {
  id         String   @id @default(cuid())
  unitPlanId String
  unitPlan   UnitPlan @relation(fields: [unitPlanId], references: [id])
  
  title      String
  type       String   // "document", "video", "website", "book", etc.
  url        String?
  notes      String?
  
  createdAt  DateTime @default(now())
}

// Level 4: Lesson Plans (ETFO version, replaces Activity)
model ETFOLessonPlan {
  id         String   @id @default(cuid())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  
  title      String
  unitPlanId String
  unitPlan   UnitPlan @relation(fields: [unitPlanId], references: [id])
  
  // Denormalized fields for performance and filtering
  grade      Int?     // Denormalized from LongRangePlan
  subject    String?  // Denormalized from LongRangePlan
  language   String?  // Teaching language (e.g., "en", "fr")
  
  // Lesson details
  date       DateTime
  duration   Int      // in minutes
  
  // Three-part lesson structure (ETFO standard)
  mindsOn    String?  // Introduction/hook
  action     String?  // Main learning activities
  consolidation String? // Closure/assessment
  
  // Planning details
  learningGoals String?
  materials    Json?    // Array of required materials
  grouping     String?  // "whole class", "small group", "pairs", "individual"
  
  // Bilingual support
  titleFr      String?
  mindsOnFr    String?
  actionFr     String?
  consolidationFr String?
  learningGoalsFr String?
  
  // Differentiation
  accommodations Json?  // Array of accommodations
  modifications  Json?  // Array of modifications
  extensions     Json?  // Array of extensions
  
  // Assessment
  assessmentType String? // "diagnostic", "formative", "summative"
  assessmentNotes String?
  
  // Substitute teacher friendly
  isSubFriendly Boolean @default(true)
  subNotes      String?
  
  // Relationships
  expectations  ETFOLessonPlanExpectation[]
  daybookEntry  DaybookEntry?
  resources     ETFOLessonPlanResource[]
  activityImports ActivityImport[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, date])
  @@index([unitPlanId])
  @@index([grade, subject])
  @@index([language])
}

// Junction table for Lesson Plans and Curriculum Expectations
model ETFOLessonPlanExpectation {
  lessonPlan    ETFOLessonPlan        @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
  lessonPlanId  String
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id], onDelete: Cascade)
  expectationId String
  
  @@id([lessonPlanId, expectationId])
}

// Resources linked to lesson plans
model ETFOLessonPlanResource {
  id           String         @id @default(cuid())
  lessonPlanId String
  lessonPlan   ETFOLessonPlan @relation(fields: [lessonPlanId], references: [id])
  
  title        String
  type         String         // "handout", "slide", "video", etc.
  url          String?
  content      String?        // For inline content
  
  createdAt    DateTime       @default(now())
}

// Level 5: Daybook Entries (daily reflections and notes)
model DaybookEntry {
  id           String         @id @default(cuid())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  
  date         DateTime
  lessonPlanId String?        @unique
  lessonPlan   ETFOLessonPlan? @relation(fields: [lessonPlanId], references: [id])
  
  // Reflection prompts
  whatWorked   String?        // What went well?
  whatDidntWork String?       // What could be improved?
  nextSteps    String?        // What to do differently next time?
  
  // Student observations
  studentEngagement String?    // Notes on engagement levels
  studentChallenges String?    // Observed difficulties
  studentSuccesses  String?    // Notable achievements
  
  // General notes
  notes        String?        // Any other observations
  privateNotes String?        // Notes not for sharing
  
  // Bilingual support
  whatWorkedFr String?
  whatDidntWorkFr String?
  nextStepsFr  String?
  notesFr      String?
  
  // Quick indicators
  overallRating Int?          // 1-5 scale
  wouldReuseLesson Boolean?
  
  // Relationships
  expectations DaybookEntryExpectation[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId, date])
}

// Junction table for Daybook Entries and Curriculum Expectations
model DaybookEntryExpectation {
  daybookEntry  DaybookEntry          @relation(fields: [daybookEntryId], references: [id], onDelete: Cascade)
  daybookEntryId String
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id], onDelete: Cascade)
  expectationId String
  coverage      String?               // "introduced", "developing", "consolidated"
  
  @@id([daybookEntryId, expectationId])
}

// ==================== Activity Discovery Models ====================
// These models support the Activity Search and Discovery feature
// allowing teachers to find, import, and rate educational activities from multiple sources

model ExternalActivity {
  id                String   @id @default(cuid())
  externalId        String   // ID from source platform
  source            String   // "TPT", "Khan", "OER", etc.
  url               String
  title             String
  description       String?
  thumbnailUrl      String?
  
  // Activity details
  duration          Int?     // in minutes
  activityType      String   // "video", "worksheet", "game", "experiment", "handson"
  gradeMin          Int
  gradeMax          Int
  subject           String
  language          String   @default("en")
  
  // Materials and requirements
  materials         Json     // Array of required materials
  technology        Json?    // Tech requirements
  groupSize         String?  // "individual", "pairs", "small group", "whole class"
  
  // Quality and ratings
  sourceRating      Float?   // Rating from source platform
  sourceReviews     Int?     // Number of reviews on source
  internalRating    Float?   // Our users' ratings
  internalReviews   Int?     // Our users' review count
  
  // Curriculum alignment
  curriculumTags    Json     // Array of curriculum codes
  learningGoals     Json?    // Extracted learning objectives
  
  // Metadata
  isFree            Boolean  @default(true)
  price             Float?
  license           String?  // Copyright/usage terms
  lastVerified      DateTime @default(now())
  isActive          Boolean  @default(true)
  
  // Relations
  imports           ActivityImport[]
  ratings           ActivityRating[]
  collections       ActivityCollectionItem[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([source, externalId])
  @@index([subject, gradeMin, gradeMax])
  @@index([activityType, language])
  @@index([isActive, lastVerified])
}

model ActivityImport {
  id              String           @id @default(cuid())
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  activityId      String
  activity        ExternalActivity @relation(fields: [activityId], references: [id])
  
  // Where it was imported to
  lessonPlanId    String?
  lessonPlan      ETFOLessonPlan?  @relation(fields: [lessonPlanId], references: [id])
  lessonSection   String?          // "mindsOn", "action", "consolidation"
  
  // Customizations made
  customizations  Json?            // User's modifications
  notes           String?          // Teacher's notes
  
  // Usage tracking
  timesUsed       Int              @default(1)
  lastUsed        DateTime         @default(now())
  effectiveness   Int?             // 1-5 rating after use
  
  createdAt       DateTime         @default(now())
  
  @@index([userId, activityId])
  @@index([lessonPlanId])
}

model ActivityRating {
  id          String           @id @default(cuid())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  activityId  String
  activity    ExternalActivity @relation(fields: [activityId], references: [id])
  
  rating      Int              // 1-5 stars
  review      String?
  wouldRecommend Boolean?
  
  // Context of use
  gradeUsed   Int?
  subjectUsed String?
  workedWell  String?          // What worked
  challenges  String?          // What didn't work
  
  createdAt   DateTime         @default(now())
  
  @@unique([userId, activityId])
  @@index([activityId, rating])
}

model ActivityCollection {
  id          String     @id @default(cuid())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  
  name        String
  description String?
  isPublic    Boolean    @default(false)
  
  items       ActivityCollectionItem[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([userId, isPublic])
}

// Junction table for ActivityCollection and ExternalActivity
model ActivityCollectionItem {
  collectionId String
  collection   ActivityCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  activityId   String
  activity     ExternalActivity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  addedAt      DateTime          @default(now())
  
  @@id([collectionId, activityId])
}

// ==================== Weekly Planner State Model ====================
// Stores user preferences and state for the weekly planner interface

model WeeklyPlannerState {
  id                 String   @id @default(cuid())
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // View preferences
  defaultView        String   @default("week") // "week" | "month" | "agenda"
  timeSlotDuration   Int      @default(30) // minutes (15, 30, 60)
  showWeekends       Boolean  @default(false)
  startOfWeek        Int      @default(1) // 0=Sunday, 1=Monday
  workingHours       String   @default("{\"start\":\"08:00\",\"end\":\"16:00\"}")
  
  // UI preferences  
  sidebarExpanded    Boolean  @default(true)
  showMiniCalendar   Boolean  @default(true)
  showResourcePanel  Boolean  @default(true)
  compactMode        Boolean  @default(false)
  theme              String   @default("light") // "light" | "dark" | "system"
  
  // Planning preferences
  autoSave           Boolean  @default(true)
  autoSaveInterval   Int      @default(30) // seconds
  showUncoveredOutcomes Boolean @default(true)
  defaultLessonDuration Int   @default(60) // minutes
  
  // Current state
  currentWeekStart   DateTime @default(now())
  lastActiveView     String?  // For restoring user's position
  draftChanges       String?  // Unsaved changes as JSON string
  
  // Advanced features
  undoHistory        String   @default("[]") // Array of undo states as JSON string
  redoHistory        String   @default("[]") // Array of redo states as JSON string
  maxHistorySize     Int      @default(50)
  
  // Offline support
  lastSyncedAt       DateTime @default(now())
  hasOfflineChanges  Boolean  @default(false)
  offlineData        String?  // IndexedDB sync data as JSON string
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([userId])
  @@index([userId, lastSyncedAt])
  @@index([userId, hasOfflineChanges])
  @@index([currentWeekStart])
}

// ==================== Template System Models ====================
// Support for unit and lesson plan templates to reduce teacher workload

enum TemplateType {
  UNIT_PLAN
  LESSON_PLAN
}

enum TemplateCategory {
  BY_SUBJECT
  BY_GRADE
  BY_THEME
  BY_SEASON
  BY_SKILL
  CUSTOM
}

model PlanTemplate {
  id              String           @id @default(cuid())
  
  // Template identification
  title           String
  titleFr         String?
  description     String?
  descriptionFr   String?
  type            TemplateType
  category        TemplateCategory
  
  // Template metadata
  subject         String?          // Optional subject filter
  gradeMin        Int?             // Minimum grade level
  gradeMax        Int?             // Maximum grade level
  tags            Json             // Array of tags for searchability
  keywords        Json             // Array of keywords for search
  
  // Template ownership
  isSystem        Boolean          @default(false) // System-provided templates
  createdByUserId Int?
  createdByUser   User?            @relation(fields: [createdByUserId], references: [id])
  isPublic        Boolean          @default(false) // Can other teachers use this?
  
  // Template content (JSON structure based on type)
  content         Json             // Full template content
  
  // Unit Plan specific fields (when type = UNIT_PLAN)
  estimatedWeeks  Int?             // Typical duration in weeks
  unitStructure   Json?            // Predefined lesson sequence structure
  
  // Lesson Plan specific fields (when type = LESSON_PLAN)
  estimatedMinutes Int?            // Typical duration in minutes
  lessonStructure Json?            // Three-part lesson structure template
  
  // Usage tracking
  usageCount      Int              @default(0)
  lastUsedAt      DateTime?
  
  // Ratings and feedback
  ratings         TemplateRating[]
  averageRating   Float?           @default(0)
  
  // Template variations
  variations      TemplateVariation[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([type, category])
  @@index([subject, gradeMin, gradeMax])
  @@index([isSystem, isPublic])
  @@index([createdByUserId])
  @@index([usageCount])
}

model TemplateRating {
  id          String       @id @default(cuid())
  templateId  String
  template    PlanTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      Int
  rating      Int          // 1-5 stars
  comment     String?
  createdAt   DateTime     @default(now())
  
  @@unique([templateId, userId])
  @@index([templateId, rating])
}

// Variations allow templates to have different versions (e.g., simplified, enriched, differentiated)
model TemplateVariation {
  id              String       @id @default(cuid())
  templateId      String
  template        PlanTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  name            String       // e.g., "Simplified Version", "Extended Version"
  nameFr          String?
  description     String?
  modificationNotes String?     // What's different in this variation
  content         Json         // Modified template content
  
  createdAt       DateTime     @default(now())
  
  @@index([templateId])
}

// Recent Plan Access tracking
model RecentPlanAccess {
  id              String   @id @default(cuid())
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planType        String   // 'long-range', 'unit', 'lesson', 'daybook'
  planId          String   // ID of the specific plan
  lastAccessed    DateTime @default(now())
  accessCount     Int      @default(1)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, planType, planId])
  @@index([userId, lastAccessed])
  @@index([planType, planId])
}

// ==================== Collaboration Models ====================
// These models support team collaboration, plan sharing, and resource libraries

// Teams for grade-level or subject-specific collaboration
model Team {
  id              String   @id @default(cuid())
  name            String
  description     String?
  
  // Team identification
  grade           Int?     // Optional grade level focus
  subject         String?  // Optional subject focus
  schoolName      String?  // School affiliation
  schoolBoard     String?  // School board/district
  
  // Team settings
  isPublic        Boolean  @default(false) // Can anyone request to join?
  requiresApproval Boolean @default(true)  // Do join requests need approval?
  allowGuests     Boolean  @default(false) // Can non-members view shared content?
  
  // Team ownership
  ownerId         Int
  owner           User     @relation("TeamOwner", fields: [ownerId], references: [id])
  
  // Team customization
  teamCode        String   @unique @default(cuid()) // For easy sharing/joining
  avatarUrl       String?
  coverImageUrl   String?
  
  // Relationships
  members         TeamMember[]
  invitations     TeamInvitation[]
  sharedCalendars TeamCalendar[]
  sharedResources TeamResource[]
  discussions     TeamDiscussion[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([ownerId])
  @@index([isPublic])
  @@index([teamCode])
  @@index([grade, subject])
}

// Team membership with roles
model TeamMember {
  id          String   @id @default(cuid())
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  role        TeamRole @default(MEMBER)
  joinedAt    DateTime @default(now())
  
  // Member preferences
  emailNotifications Boolean @default(true)
  
  @@unique([teamId, userId])
  @@index([userId])
  @@index([teamId, role])
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Team invitations
model TeamInvitation {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Invitation details
  email           String
  invitedById     Int
  invitedBy       User     @relation("InvitationSender", fields: [invitedById], references: [id])
  invitedUserId   Int?     // Null if user doesn't exist yet
  invitedUser     User?    @relation("InvitationReceiver", fields: [invitedUserId], references: [id])
  
  message         String?
  role            TeamRole @default(MEMBER)
  
  // Invitation status
  status          InvitationStatus @default(PENDING)
  expiresAt       DateTime
  respondedAt     DateTime?
  
  createdAt       DateTime @default(now())
  
  @@unique([teamId, email])
  @@index([email, status])
  @@index([invitedUserId, status])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Shared plans between users
model SharedPlan {
  id              String   @id @default(cuid())
  
  // What is being shared
  planType        String   // 'long-range', 'unit', 'lesson', 'daybook'
  planId          String   // ID of the specific plan
  
  // Sharing details
  sharedById      Int
  sharedBy        User     @relation("PlanSharer", fields: [sharedById], references: [id])
  sharedWithId    Int?     // Null for public links
  sharedWith      User?    @relation("PlanReceiver", fields: [sharedWithId], references: [id])
  teamId          String?  // If shared with a team
  
  // Permissions
  canEdit         Boolean  @default(false)
  canCopy         Boolean  @default(true)
  canComment      Boolean  @default(true)
  canReshare      Boolean  @default(false)
  
  // Sharing link
  shareCode       String   @unique @default(cuid())
  isPublicLink    Boolean  @default(false)
  linkExpiresAt   DateTime?
  
  // Usage tracking
  viewCount       Int      @default(0)
  copyCount       Int      @default(0)
  lastViewedAt    DateTime?
  
  // Metadata
  message         String?  // Optional message from sharer
  sharedAt        DateTime @default(now())
  
  @@index([sharedById])
  @@index([sharedWithId])
  @@index([teamId])
  @@index([shareCode])
  @@index([planType, planId])
}

// Comments and feedback on plans
model PlanComment {
  id              String   @id @default(cuid())
  
  // What is being commented on
  planType        String   // 'long-range', 'unit', 'lesson', 'daybook'
  planId          String   // ID of the specific plan
  
  // Comment details
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  content         String
  
  // Threading
  parentId        String?
  parent          PlanComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         PlanComment[] @relation("CommentReplies")
  
  // Comment metadata
  isResolved      Boolean  @default(false)
  isPinned        Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([planType, planId])
  @@index([userId])
  @@index([parentId])
}

// Team shared calendar for coordinated planning
model TeamCalendar {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  
  // Calendar settings
  isDefault       Boolean  @default(false) // Team's main calendar
  color           String   @default("#3B82F6") // Hex color
  
  // Calendar events
  events          TeamCalendarEvent[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([teamId])
}

// Events in team calendars
model TeamCalendarEvent {
  id              String   @id @default(cuid())
  calendarId      String
  calendar        TeamCalendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  
  // Event timing
  startDate       DateTime
  endDate         DateTime
  allDay          Boolean  @default(false)
  
  // Event type
  eventType       String   // 'meeting', 'deadline', 'field-trip', 'assessment', 'planning'
  
  // Event details
  location        String?
  attachments     Json?    // Array of file references
  
  // Creator
  createdByUserId Int
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([calendarId])
  @@index([startDate, endDate])
}

// Shared resources within teams
model TeamResource {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  
  // Resource type and content
  resourceType    String   // 'document', 'template', 'link', 'file'
  url             String?
  content         String?  // For inline content
  fileSize        Int?
  mimeType        String?
  
  // Organization
  category        String?  // User-defined categories
  tags            Json     // Array of tags
  
  // Contributor
  contributedById Int
  
  // Usage tracking
  downloadCount   Int      @default(0)
  viewCount       Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([teamId])
  @@index([contributedById])
  @@index([category])
}

// Team discussions/forums
model TeamDiscussion {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  title           String
  content         String
  
  // Discussion metadata
  category        String?  // 'general', 'planning', 'resources', 'help'
  isPinned        Boolean  @default(false)
  isLocked        Boolean  @default(false) // No new replies
  
  // Author
  authorId        Int
  
  // Engagement metrics
  viewCount       Int      @default(0)
  replyCount      Int      @default(0)
  lastReplyAt     DateTime?
  
  // Replies
  replies         DiscussionReply[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([teamId, isPinned])
  @@index([teamId, category])
  @@index([authorId])
}

// Replies to team discussions
model DiscussionReply {
  id              String   @id @default(cuid())
  discussionId    String
  discussion      TeamDiscussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  
  content         String
  authorId        Int
  
  // Reply metadata
  isAnswer        Boolean  @default(false) // Marked as best answer
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([discussionId])
  @@index([authorId])
}

// School-wide resource library
model ResourceLibraryItem {
  id              String   @id @default(cuid())
  
  // Resource identification
  title           String
  titleFr         String?
  description     String?
  descriptionFr   String?
  
  // Resource details
  resourceType    String   // 'lesson', 'worksheet', 'assessment', 'template', 'media'
  fileUrl         String?
  thumbnailUrl    String?
  content         String?  // For inline content
  
  // Categorization
  subject         String
  gradeMin        Int
  gradeMax        Int
  language        String   @default("en")
  
  // French Immersion specific
  isFrenchImmersion Boolean @default(false)
  frenchLevel     String?  // 'core', 'extended', 'immersion'
  
  // Organization
  categories      Json     // Array of categories
  tags            Json     // Array of searchable tags
  curriculumCodes Json     // Array of curriculum expectation codes
  
  // Contributor
  contributorId   Int
  contributor     User     @relation("ResourceContributor", fields: [contributorId], references: [id])
  schoolName      String?
  schoolBoard     String?
  
  // Quality and ratings
  ratings         ResourceRating[]
  averageRating   Float?   @default(0)
  
  // Usage tracking
  viewCount       Int      @default(0)
  downloadCount   Int      @default(0)
  bookmarkCount   Int      @default(0)
  
  // Moderation
  isApproved      Boolean  @default(false)
  approvedAt      DateTime?
  approvedBy      Int?
  
  // Versioning
  version         Int      @default(1)
  previousVersionId String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([subject, gradeMin, gradeMax])
  @@index([resourceType, language])
  @@index([isApproved])
  @@index([contributorId])
  @@index([isFrenchImmersion, frenchLevel])
}

// Ratings for library resources
model ResourceRating {
  id              String   @id @default(cuid())
  resourceId      String
  resource        ResourceLibraryItem @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userId          Int
  
  rating          Int      // 1-5 stars
  review          String?
  
  // Context of use
  gradeUsed       Int?
  effectiveness   String?  // How well it worked
  
  createdAt       DateTime @default(now())
  
  @@unique([resourceId, userId])
  @@index([resourceId, rating])
}

// User bookmarks for library resources
model ResourceBookmark {
  id              String   @id @default(cuid())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  resourceId      String
  
  notes           String?  // Personal notes
  tags            Json?    // Personal organization tags
  
  createdAt       DateTime @default(now())
  
  @@unique([userId, resourceId])
  @@index([userId])
}

// Plan version history for collaboration
model PlanVersion {
  id              String   @id @default(cuid())
  
  // What plan this is a version of
  planType        String   // 'long-range', 'unit', 'lesson', 'daybook'
  planId          String   // ID of the specific plan
  
  // Version details
  versionNumber   Int
  content         Json     // Full plan content at this version
  
  // Change tracking
  changedBy       Int
  changeNotes     String?
  changeType      String   // 'create', 'update', 'revert'
  
  createdAt       DateTime @default(now())
  
  @@unique([planType, planId, versionNumber])
  @@index([planType, planId])
  @@index([changedBy])
}