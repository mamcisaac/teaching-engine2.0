datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}



model Subject {
  id         Int        @id @default(autoincrement())
  name       String
  nameEn     String?
  nameFr     String?
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
}






model TeacherPreferences {
  id             Int    @id @default(autoincrement())
  teachingStyles String
  pacePreference String
  prepTime       Int
  /**
   * JSON object storing contact info for sub plans
   * e.g. { "principal": "Name", "office": "555-1234" }
   */
  subPlanContacts Json?
  /// Special procedures or notes for substitute teachers
  subPlanProcedures String?
}

model SubstituteInfo {
  id         Int      @id @default(autoincrement())
  teacherId  Int
  teacher    User     @relation(fields: [teacherId], references: [id])
  procedures String?
  allergies  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model MaterialList {
  id        Int      @id @default(autoincrement())
  weekStart DateTime
  items     String
  prepared  Boolean  @default(false)
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String?
  dueDate   DateTime?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Newsletter {
  id        Int      @id @default(autoincrement())
  title     String
  titleEn   String?
  titleFr   String?
  content   String
  contentEn String?
  contentFr String?
  rawDraft  String?
  rawDraftEn String?
  rawDraftFr String?
  polishedDraft String?
  polishedDraftEn String?
  polishedDraftFr String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParentMessage {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  title        String
  timeframe    String
  contentFr    String
  contentEn    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}






model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  role     String   @default("teacher")
  preferredLanguage String @default("en")
  subjects Subject[]
  events    CalendarEvent[]
  unavailableBlocks UnavailableBlock[]
  reportDeadlines ReportDeadline[]
  yearPlanEntries YearPlanEntry[]
  shareLinks ShareLink[]
  equipmentBookings EquipmentBooking[]
  substituteInfos SubstituteInfo[]
  oralRoutineTemplates OralRoutineTemplate[]
  dailyOralRoutines DailyOralRoutine[]
  thematicUnits ThematicUnit[]
  cognatePairs CognatePair[]
  mediaResources MediaResource[]
  parentMessages ParentMessage[]
  reflectionJournalEntries ReflectionJournalEntry[]
  students Student[]
  curriculumImports CurriculumImport[]
  classRoutines ClassRoutine[]
  subPlanRecords SubPlanRecord[]
  aiGeneratedPlans AIGeneratedPlan[]
  planningConversations PlanningConversation[]
  
  // ETFO-aligned planning models
  longRangePlans LongRangePlan[]
  unitPlans UnitPlan[]
  etfoLessonPlans ETFOLessonPlan[]
  daybookEntries DaybookEntry[]
  
  // Activity Discovery
  activityImports ActivityImport[]
  activityRatings ActivityRating[]
  activityCollections ActivityCollection[]
}


enum CalendarEventType {
  PD_DAY
  ASSEMBLY
  TRIP
  HOLIDAY
  CUSTOM
}

enum CalendarEventSource {
  MANUAL
  ICAL_FEED
  SYSTEM
}

model CalendarEvent {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  start       DateTime
  end         DateTime
  allDay      Boolean             @default(false)
  eventType   CalendarEventType
  source      CalendarEventSource @default(MANUAL)
  teacherId   Int?
  teacher     User?               @relation(fields: [teacherId], references: [id])
  schoolId    Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum UnavailableBlockType {
  TEACHER_ABSENCE
  STUDENT_PULL_OUT
}

model UnavailableBlock {
  id                Int                  @id @default(autoincrement())
  teacherId         Int?
  teacher           User?               @relation(fields: [teacherId], references: [id])
  date              DateTime
  startMin          Int
  endMin            Int
  reason            String
  blockType         UnavailableBlockType
  affectedStudentIds String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ReportDeadline {
  id               Int      @id @default(autoincrement())
  teacherId        Int
  teacher          User     @relation(fields: [teacherId], references: [id])
  name             String
  date             DateTime
  remindDaysBefore Int      @default(14)
}


enum YearPlanEntryType {
  UNIT
  ASSESSMENT
  EVENT
}

model YearPlanEntry {
  id        Int              @id @default(autoincrement())
  teacherId Int
  teacher   User             @relation(fields: [teacherId], references: [id])
  entryType YearPlanEntryType
  title     String
  start     DateTime
  end       DateTime
  colorCode String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum ShareLinkType {
  YEAR_PLAN
}

model ShareLink {
  id        Int           @id @default(autoincrement())
  token     String        @unique
  type      ShareLinkType
  teacherId Int
  teacher   User          @relation(fields: [teacherId], references: [id])
  year      Int
  expiresAt DateTime
  createdAt DateTime      @default(now())
}

enum EquipmentBookingStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
}

model EquipmentBooking {
  id            Int                    @id @default(autoincrement())
  teacherId     Int
  teacher       User                   @relation(fields: [teacherId], references: [id])
  resourceName  String
  neededBy      DateTime
  leadTimeDays  Int                    @default(14)
  status        EquipmentBookingStatus @default(REQUESTED)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model Holiday {
  id   Int      @id @default(autoincrement())
  date DateTime
  name String
}





model OralRoutineTemplate {
  id            Int                      @id @default(autoincrement())
  title         String
  titleEn       String?
  titleFr       String?
  description   String?
  descriptionEn String?
  descriptionFr String?
  userId        Int
  user          User                     @relation(fields: [userId], references: [id])
  dailyRoutines DailyOralRoutine[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

model DailyOralRoutine {
  id            Int                 @id @default(autoincrement())
  date          DateTime
  templateId    Int
  template      OralRoutineTemplate @relation(fields: [templateId], references: [id])
  completed     Boolean             @default(false)
  notes         String?
  participation Int?
  userId        Int
  user          User                @relation(fields: [userId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}


model ThematicUnit {
  id           Int        @id @default(autoincrement())
  title        String
  titleEn      String?
  titleFr      String?
  description  String?
  descriptionEn String?
  descriptionFr String?
  startDate    DateTime
  endDate      DateTime
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  reflections  ReflectionJournalEntry[]
  studentGoals StudentGoal[]
  studentReflections StudentReflection[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}



model CognatePair {
  id               Int                    @id @default(autoincrement())
  wordFr           String
  wordEn           String
  notes            String?
  userId           Int
  user             User                   @relation(fields: [userId], references: [id])
  createdAt        DateTime               @default(now())
  @@unique([wordFr, wordEn, userId])
}




model MediaResource {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  title          String
  filePath       String
  fileType       String   // "image", "pdf", "video", "audio"
  fileSize       Int?     // file size in bytes
  mimeType       String?  // MIME type for validation
  tags           String   @default("[]") // JSON array of tags
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}





model ReflectionJournalEntry {
  id             Int                       @id @default(autoincrement())
  userId         Int
  user           User                      @relation(fields: [userId], references: [id])
  date           DateTime
  content        String
  themeId        Int?
  theme          ThematicUnit?             @relation(fields: [themeId], references: [id])
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
}



model AIGeneratedPlan {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  weekStart    DateTime
  planData     String    // JSON structure of the generated plan
  parameters   String    // JSON of generation parameters used
  qualityScore Float?    // Overall plan quality score
  accepted     Boolean   @default(false)
  appliedAt    DateTime? // When the plan was applied to the calendar
  createdAt    DateTime  @default(now())
}

model PlanningConversation {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  sessionId    String    // Group messages in sessions
  role         String    // "user" or "assistant"
  content      String
  metadata     String?   // JSON for additional context
  createdAt    DateTime  @default(now())
  @@index([userId, sessionId])
}

model Student {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  grade       Int
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
  artifacts   StudentArtifact[]
  reflections StudentReflection[]
  parentSummaries ParentSummary[]
  goals       StudentGoal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([userId, lastName])
}

model StudentGoal {
  id         Int       @id @default(autoincrement())
  studentId  Int
  student    Student   @relation(fields: [studentId], references: [id])
  text       String
  themeId    Int?      // For thematic unit goals
  theme      ThematicUnit? @relation(fields: [themeId], references: [id])
  createdAt  DateTime  @default(now())
  status     String    @default("active") // "active" | "completed" | "abandoned"
}

model StudentReflection {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id])
  content     String?
  text        String?   // Keep both content and text for compatibility
  date        DateTime? // Optional date
  emoji       String?   // e.g. "🙂", "😐", "😕"
  voicePath   String?   // path to optional recording
  themeId     Int?
  theme       ThematicUnit? @relation(fields: [themeId], references: [id])
  // A3 Enhancement: AI Classification fields
  suggestedOutcomeIds  String?    // JSON array of suggested outcome IDs
  selTags              String?    // JSON array of SEL/competency tags
  classificationConfidence Float? // AI confidence score (0-1)
  classificationRationale  String? // AI rationale for suggestions
  classifiedAt         DateTime?  // When classification was performed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentArtifact {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id])
  title       String
  description String?
  fileUrl     String?
  outcomeIds  String   @default("[]") // JSON array of outcome IDs
  createdAt   DateTime @default(now())
}

model ParentSummary {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation(fields: [studentId], references: [id])
  dateFrom    DateTime
  dateTo      DateTime
  focus       String?  @default("[]") // JSON array of focus areas
  contentFr   String
  contentEn   String
  isDraft     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}





// ==================== Phase 5: Curriculum Intelligence Models ====================

enum ImportStatus {
  UPLOADING
  PROCESSING
  READY_FOR_REVIEW
  CONFIRMED
  COMPLETED
  FAILED
  CANCELLED
}

// Stores vector embeddings for curriculum outcomes to enable semantic search and clustering

// Tracks curriculum import sessions from various file formats (PDF, DOCX, CSV)
model CurriculumImport {
  id                String           @id @default(cuid())
  userId            Int
  user              User             @relation(fields: [userId], references: [id])
  filename          String?          // For planner agent compatibility
  originalName      String?          // Original uploaded filename
  mimeType          String?          // File MIME type
  fileSize          Int?             // File size in bytes
  filePath          String?          // Path to uploaded file
  grade             Int?             // Grade level for import
  subject           String?          // Subject area
  status            ImportStatus     @default(UPLOADING)
  sourceFormat      String?          // "pdf" | "docx" | "csv" | "manual"
  sourceFile        String?          // Path or URL to original file
  rawText           String?          // Extracted text from document
  parsedData        String?          // JSON string of parsed curriculum data
  errorMessage      String?          // Error details if parsing fails
  totalOutcomes     Int              @default(0)
  processedOutcomes Int              @default(0)
  errorLog          Json?            // Array of error objects with details
  metadata          Json?            // Additional import metadata (e.g., parsing settings)
  processedAt       DateTime?        // When processing completed
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  completedAt       DateTime?
  
  clusters          ExpectationCluster[]
  curriculumExpectations CurriculumExpectation[] @relation("CurriculumExpectationImport")
  
  @@index([userId, status])
  @@index([createdAt])
}

// Stores clustered groups of related expectations for intelligent curriculum organization
model ExpectationCluster {
  id             String           @id @default(cuid())
  importId       String
  import         CurriculumImport @relation(fields: [importId], references: [id], onDelete: Cascade)
  clusterName    String           // Human-readable cluster name
  clusterType    String           // "theme" | "skill" | "concept"
  expectationIds Json             // Array of expectation IDs in this cluster
  centroid       Json?            // Centroid embedding vector for the cluster
  confidence     Float            @default(0.0) // Clustering confidence score (0-1)
  suggestedTheme String?          // AI-suggested theme name
  metadata       Json?            // Additional cluster metadata
  createdAt      DateTime         @default(now())
  
  @@index([importId])
  @@index([clusterType])
}

// A4 Enhancement: Stores pedagogical prompts linked to curriculum outcomes
// Stores classroom routines and procedures for substitute teachers
model ClassRoutine {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  category    String   // "morning", "transition", "dismissal", "behavior", "emergency", "other"
  timeOfDay   String?  // Optional time indicator like "9:00 AM" or "After recess"
  priority    Int      @default(0) // Higher priority routines shown first
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, category])
  @@index([userId, isActive])
}

// Tracks generated substitute plans for reuse and history
model SubPlanRecord {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  date            DateTime
  daysCount       Int      @default(1) // Number of days included
  content         Json     // Full generated content
  includeGoals    Boolean  @default(true)
  includeRoutines Boolean  @default(true)
  includePlans    Boolean  @default(true)
  anonymized      Boolean  @default(false)
  notes           String?  // Additional notes from teacher
  createdAt       DateTime @default(now())
  
  @@index([userId, date])
  @@index([userId, createdAt])
}

// ==================== ETFO-Aligned Planning Models ====================
// These models implement the 5-level ETFO planning hierarchy:
// 1. CurriculumExpectation → 2. LongRangePlan → 3. UnitPlan → 4. LessonPlan → 5. DaybookEntry

// Level 1: Curriculum Expectations (replaces Outcome)
model CurriculumExpectation {
  id              String   @id @default(cuid())
  code            String   @unique // e.g., "A1.2", "B2.3"
  description     String
  strand          String   // Major curriculum category
  substrand       String?  // Subcategory if applicable
  grade           Int
  subject         String
  
  // Bilingual support
  descriptionFr   String?
  strandFr        String?
  substrandFr     String?
  
  // Import tracking
  importId        String?
  import          CurriculumImport? @relation("CurriculumExpectationImport", fields: [importId], references: [id])
  
  // Relationships to planning levels
  longRangePlans  LongRangePlanExpectation[]
  unitPlans       UnitPlanExpectation[]
  lessonPlans     ETFOLessonPlanExpectation[]
  daybookEntries  DaybookEntryExpectation[]
  
  // AI features
  embedding       CurriculumExpectationEmbedding?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([subject, grade])
  @@index([code])
}

// Vector embeddings for curriculum expectations (for AI clustering)
model CurriculumExpectationEmbedding {
  id            String                @id @default(cuid())
  expectationId String                @unique
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id], onDelete: Cascade)
  embedding     Json                  // Array of float values
  model         String                // e.g., "text-embedding-3-small"
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  @@index([expectationId])
}

// Level 2: Long-Range Plans (yearly/term overview)
model LongRangePlan {
  id            String   @id @default(cuid())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  
  title         String
  academicYear  String   // e.g., "2024-2025"
  term          String?  // "Full Year", "Term 1", "Term 2", etc.
  grade         Int
  subject       String
  
  // Planning details
  description   String?
  goals         String?  // Overall learning goals for the year/term
  themes        Json?    // Array of major themes
  
  // ETFO-aligned fields
  overarchingQuestions  String?  // Big questions that will guide the year
  assessmentOverview    String?  // Overall assessment strategy
  resourceNeeds         String?  // Materials, technology, resources needed
  professionalGoals     String?  // Professional development goals
  
  // Bilingual support
  titleFr       String?
  descriptionFr String?
  goalsFr       String?
  
  // Relationships
  expectations  LongRangePlanExpectation[]
  unitPlans     UnitPlan[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, academicYear])
  @@index([userId, subject, grade])
}

// Junction table for Long-Range Plans and Curriculum Expectations
model LongRangePlanExpectation {
  longRangePlan   LongRangePlan         @relation(fields: [longRangePlanId], references: [id])
  longRangePlanId String
  expectation     CurriculumExpectation @relation(fields: [expectationId], references: [id])
  expectationId   String
  plannedTerm     String?               // Which term this expectation is planned for
  
  @@id([longRangePlanId, expectationId])
}

// Level 3: Unit Plans (replaces Milestone)
model UnitPlan {
  id              String   @id @default(cuid())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  
  title           String
  longRangePlanId String
  longRangePlan   LongRangePlan @relation(fields: [longRangePlanId], references: [id])
  
  // Planning details
  description     String?
  bigIdeas        String?  // Key concepts/enduring understandings
  essentialQuestions Json? // Array of guiding questions
  
  // Timeline
  startDate       DateTime
  endDate         DateTime
  estimatedHours  Int?
  
  // Bilingual support
  titleFr         String?
  descriptionFr   String?
  bigIdeasFr      String?
  
  // Assessment planning
  assessmentPlan  String?  // How learning will be assessed
  successCriteria Json?    // Array of success criteria
  
  // ETFO-aligned planning fields
  crossCurricularConnections String?  // Links to other subject areas
  learningSkills          Json?      // Array of learning skills focus
  culminatingTask         String?    // Final assessment task description
  keyVocabulary          Json?      // Array of key terms
  priorKnowledge         String?    // Prerequisites for the unit
  parentCommunicationPlan String?   // How to communicate with families
  fieldTripsAndGuestSpeakers String? // Community connections
  differentiationStrategies Json?   // Support for diverse learners
  indigenousPerspectives   String?  // Indigenous knowledge integration
  environmentalEducation   String?  // Environmental learning connections
  socialJusticeConnections String?  // Equity and social justice themes
  technologyIntegration    String?  // Technology use in the unit
  communityConnections     String?  // Local partnerships and connections
  
  // Relationships
  expectations    UnitPlanExpectation[]
  lessonPlans     ETFOLessonPlan[]
  resources       UnitPlanResource[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, startDate])
  @@index([longRangePlanId])
}

// Junction table for Unit Plans and Curriculum Expectations
model UnitPlanExpectation {
  unitPlan      UnitPlan              @relation(fields: [unitPlanId], references: [id])
  unitPlanId    String
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id])
  expectationId String
  
  @@id([unitPlanId, expectationId])
}

// Resources linked to unit plans
model UnitPlanResource {
  id         String   @id @default(cuid())
  unitPlanId String
  unitPlan   UnitPlan @relation(fields: [unitPlanId], references: [id])
  
  title      String
  type       String   // "document", "video", "website", "book", etc.
  url        String?
  notes      String?
  
  createdAt  DateTime @default(now())
}

// Level 4: Lesson Plans (ETFO version, replaces Activity)
model ETFOLessonPlan {
  id         String   @id @default(cuid())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  
  title      String
  unitPlanId String
  unitPlan   UnitPlan @relation(fields: [unitPlanId], references: [id])
  
  // Lesson details
  date       DateTime
  duration   Int      // in minutes
  
  // Three-part lesson structure (ETFO standard)
  mindsOn    String?  // Introduction/hook
  action     String?  // Main learning activities
  consolidation String? // Closure/assessment
  
  // Planning details
  learningGoals String?
  materials    Json?    // Array of required materials
  grouping     String?  // "whole class", "small group", "pairs", "individual"
  
  // Bilingual support
  titleFr      String?
  mindsOnFr    String?
  actionFr     String?
  consolidationFr String?
  learningGoalsFr String?
  
  // Differentiation
  accommodations Json?  // Array of accommodations
  modifications  Json?  // Array of modifications
  extensions     Json?  // Array of extensions
  
  // Assessment
  assessmentType String? // "diagnostic", "formative", "summative"
  assessmentNotes String?
  
  // Substitute teacher friendly
  isSubFriendly Boolean @default(true)
  subNotes      String?
  
  // Relationships
  expectations  ETFOLessonPlanExpectation[]
  daybookEntry  DaybookEntry?
  resources     ETFOLessonPlanResource[]
  activityImports ActivityImport[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, date])
  @@index([unitPlanId])
}

// Junction table for Lesson Plans and Curriculum Expectations
model ETFOLessonPlanExpectation {
  lessonPlan    ETFOLessonPlan        @relation(fields: [lessonPlanId], references: [id])
  lessonPlanId  String
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id])
  expectationId String
  
  @@id([lessonPlanId, expectationId])
}

// Resources linked to lesson plans
model ETFOLessonPlanResource {
  id           String         @id @default(cuid())
  lessonPlanId String
  lessonPlan   ETFOLessonPlan @relation(fields: [lessonPlanId], references: [id])
  
  title        String
  type         String         // "handout", "slide", "video", etc.
  url          String?
  content      String?        // For inline content
  
  createdAt    DateTime       @default(now())
}

// Level 5: Daybook Entries (daily reflections and notes)
model DaybookEntry {
  id           String         @id @default(cuid())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  
  date         DateTime
  lessonPlanId String?        @unique
  lessonPlan   ETFOLessonPlan? @relation(fields: [lessonPlanId], references: [id])
  
  // Reflection prompts
  whatWorked   String?        // What went well?
  whatDidntWork String?       // What could be improved?
  nextSteps    String?        // What to do differently next time?
  
  // Student observations
  studentEngagement String?    // Notes on engagement levels
  studentChallenges String?    // Observed difficulties
  studentSuccesses  String?    // Notable achievements
  
  // General notes
  notes        String?        // Any other observations
  privateNotes String?        // Notes not for sharing
  
  // Bilingual support
  whatWorkedFr String?
  whatDidntWorkFr String?
  nextStepsFr  String?
  notesFr      String?
  
  // Quick indicators
  overallRating Int?          // 1-5 scale
  wouldReuseLesson Boolean?
  
  // Relationships
  expectations DaybookEntryExpectation[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId, date])
}

// Junction table for Daybook Entries and Curriculum Expectations
model DaybookEntryExpectation {
  daybookEntry  DaybookEntry          @relation(fields: [daybookEntryId], references: [id])
  daybookEntryId String
  expectation   CurriculumExpectation @relation(fields: [expectationId], references: [id])
  expectationId String
  coverage      String?               // "introduced", "developing", "consolidated"
  
  @@id([daybookEntryId, expectationId])
}

// ==================== Activity Discovery Models ====================
// These models support the Activity Search and Discovery feature
// allowing teachers to find, import, and rate educational activities from multiple sources

model ExternalActivity {
  id                String   @id @default(cuid())
  externalId        String   // ID from source platform
  source            String   // "TPT", "Khan", "OER", etc.
  url               String
  title             String
  description       String?
  thumbnailUrl      String?
  
  // Activity details
  duration          Int?     // in minutes
  activityType      String   // "video", "worksheet", "game", "experiment", "handson"
  gradeMin          Int
  gradeMax          Int
  subject           String
  language          String   @default("en")
  
  // Materials and requirements
  materials         Json     // Array of required materials
  technology        Json?    // Tech requirements
  groupSize         String?  // "individual", "pairs", "small group", "whole class"
  
  // Quality and ratings
  sourceRating      Float?   // Rating from source platform
  sourceReviews     Int?     // Number of reviews on source
  internalRating    Float?   // Our users' ratings
  internalReviews   Int?     // Our users' review count
  
  // Curriculum alignment
  curriculumTags    Json     // Array of curriculum codes
  learningGoals     Json?    // Extracted learning objectives
  
  // Metadata
  isFree            Boolean  @default(true)
  price             Float?
  license           String?  // Copyright/usage terms
  lastVerified      DateTime @default(now())
  isActive          Boolean  @default(true)
  
  // Relations
  imports           ActivityImport[]
  ratings           ActivityRating[]
  collections       ActivityCollectionItem[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([source, externalId])
  @@index([subject, gradeMin, gradeMax])
  @@index([activityType, language])
  @@index([isActive, lastVerified])
}

model ActivityImport {
  id              String           @id @default(cuid())
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  activityId      String
  activity        ExternalActivity @relation(fields: [activityId], references: [id])
  
  // Where it was imported to
  lessonPlanId    String?
  lessonPlan      ETFOLessonPlan?  @relation(fields: [lessonPlanId], references: [id])
  lessonSection   String?          // "mindsOn", "action", "consolidation"
  
  // Customizations made
  customizations  Json?            // User's modifications
  notes           String?          // Teacher's notes
  
  // Usage tracking
  timesUsed       Int              @default(1)
  lastUsed        DateTime         @default(now())
  effectiveness   Int?             // 1-5 rating after use
  
  createdAt       DateTime         @default(now())
  
  @@index([userId, activityId])
  @@index([lessonPlanId])
}

model ActivityRating {
  id          String           @id @default(cuid())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  activityId  String
  activity    ExternalActivity @relation(fields: [activityId], references: [id])
  
  rating      Int              // 1-5 stars
  review      String?
  wouldRecommend Boolean?
  
  // Context of use
  gradeUsed   Int?
  subjectUsed String?
  workedWell  String?          // What worked
  challenges  String?          // What didn't work
  
  createdAt   DateTime         @default(now())
  
  @@unique([userId, activityId])
  @@index([activityId, rating])
}

model ActivityCollection {
  id          String     @id @default(cuid())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  
  name        String
  description String?
  isPublic    Boolean    @default(false)
  
  items       ActivityCollectionItem[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([userId, isPublic])
}

// Junction table for ActivityCollection and ExternalActivity
model ActivityCollectionItem {
  collectionId String
  collection   ActivityCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  activityId   String
  activity     ExternalActivity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  addedAt      DateTime          @default(now())
  
  @@id([collectionId, activityId])
}